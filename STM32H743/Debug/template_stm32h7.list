
template_stm32h7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000276e0  08010000  08010000  00010000  2**16
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003b658  080376e0  080376e0  000376e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08072d38  08072d38  00072d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08072d40  08072d40  00072d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08072d44  08072d44  00072d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000025a4  24000000  08072d48  00073000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000505ac  240025c0  080752ec  000755c0  2**5
                  ALLOC
  8 ._user_heap_stack 00001000  20000000  20000000  00076000  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000755a4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003097e  00000000  00000000  000755d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006779  00000000  00000000  000a5f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002018  00000000  00000000  000ac6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001929  00000000  00000000  000ae6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004198d  00000000  00000000  000b0011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00031f2f  00000000  00000000  000f199e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001892ba  00000000  00000000  001238cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000086  00000000  00000000  002acb87  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009a5c  00000000  00000000  002acc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000059  00000000  00000000  002b666c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	@ (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	@ (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	@ (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	240025c0 	.word	0x240025c0
 801001c:	00000000 	.word	0x00000000
 8010020:	080376c8 	.word	0x080376c8

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	@ (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	@ (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	@ (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	240025c4 	.word	0x240025c4
 801003c:	080376c8 	.word	0x080376c8

08010040 <memchr>:
 8010040:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010044:	2a10      	cmp	r2, #16
 8010046:	db2b      	blt.n	80100a0 <memchr+0x60>
 8010048:	f010 0f07 	tst.w	r0, #7
 801004c:	d008      	beq.n	8010060 <memchr+0x20>
 801004e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010052:	3a01      	subs	r2, #1
 8010054:	428b      	cmp	r3, r1
 8010056:	d02d      	beq.n	80100b4 <memchr+0x74>
 8010058:	f010 0f07 	tst.w	r0, #7
 801005c:	b342      	cbz	r2, 80100b0 <memchr+0x70>
 801005e:	d1f6      	bne.n	801004e <memchr+0xe>
 8010060:	b4f0      	push	{r4, r5, r6, r7}
 8010062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801006a:	f022 0407 	bic.w	r4, r2, #7
 801006e:	f07f 0700 	mvns.w	r7, #0
 8010072:	2300      	movs	r3, #0
 8010074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010078:	3c08      	subs	r4, #8
 801007a:	ea85 0501 	eor.w	r5, r5, r1
 801007e:	ea86 0601 	eor.w	r6, r6, r1
 8010082:	fa85 f547 	uadd8	r5, r5, r7
 8010086:	faa3 f587 	sel	r5, r3, r7
 801008a:	fa86 f647 	uadd8	r6, r6, r7
 801008e:	faa5 f687 	sel	r6, r5, r7
 8010092:	b98e      	cbnz	r6, 80100b8 <memchr+0x78>
 8010094:	d1ee      	bne.n	8010074 <memchr+0x34>
 8010096:	bcf0      	pop	{r4, r5, r6, r7}
 8010098:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801009c:	f002 0207 	and.w	r2, r2, #7
 80100a0:	b132      	cbz	r2, 80100b0 <memchr+0x70>
 80100a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80100a6:	3a01      	subs	r2, #1
 80100a8:	ea83 0301 	eor.w	r3, r3, r1
 80100ac:	b113      	cbz	r3, 80100b4 <memchr+0x74>
 80100ae:	d1f8      	bne.n	80100a2 <memchr+0x62>
 80100b0:	2000      	movs	r0, #0
 80100b2:	4770      	bx	lr
 80100b4:	3801      	subs	r0, #1
 80100b6:	4770      	bx	lr
 80100b8:	2d00      	cmp	r5, #0
 80100ba:	bf06      	itte	eq
 80100bc:	4635      	moveq	r5, r6
 80100be:	3803      	subeq	r0, #3
 80100c0:	3807      	subne	r0, #7
 80100c2:	f015 0f01 	tst.w	r5, #1
 80100c6:	d107      	bne.n	80100d8 <memchr+0x98>
 80100c8:	3001      	adds	r0, #1
 80100ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80100ce:	bf02      	ittt	eq
 80100d0:	3001      	addeq	r0, #1
 80100d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80100d6:	3001      	addeq	r0, #1
 80100d8:	bcf0      	pop	{r4, r5, r6, r7}
 80100da:	3801      	subs	r0, #1
 80100dc:	4770      	bx	lr
 80100de:	bf00      	nop

080100e0 <strlen>:
 80100e0:	4603      	mov	r3, r0
 80100e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100e6:	2a00      	cmp	r2, #0
 80100e8:	d1fb      	bne.n	80100e2 <strlen+0x2>
 80100ea:	1a18      	subs	r0, r3, r0
 80100ec:	3801      	subs	r0, #1
 80100ee:	4770      	bx	lr

080100f0 <__aeabi_drsub>:
 80100f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80100f4:	e002      	b.n	80100fc <__adddf3>
 80100f6:	bf00      	nop

080100f8 <__aeabi_dsub>:
 80100f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080100fc <__adddf3>:
 80100fc:	b530      	push	{r4, r5, lr}
 80100fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8010102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8010106:	ea94 0f05 	teq	r4, r5
 801010a:	bf08      	it	eq
 801010c:	ea90 0f02 	teqeq	r0, r2
 8010110:	bf1f      	itttt	ne
 8010112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8010116:	ea55 0c02 	orrsne.w	ip, r5, r2
 801011a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 801011e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010122:	f000 80e2 	beq.w	80102ea <__adddf3+0x1ee>
 8010126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 801012a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 801012e:	bfb8      	it	lt
 8010130:	426d      	neglt	r5, r5
 8010132:	dd0c      	ble.n	801014e <__adddf3+0x52>
 8010134:	442c      	add	r4, r5
 8010136:	ea80 0202 	eor.w	r2, r0, r2
 801013a:	ea81 0303 	eor.w	r3, r1, r3
 801013e:	ea82 0000 	eor.w	r0, r2, r0
 8010142:	ea83 0101 	eor.w	r1, r3, r1
 8010146:	ea80 0202 	eor.w	r2, r0, r2
 801014a:	ea81 0303 	eor.w	r3, r1, r3
 801014e:	2d36      	cmp	r5, #54	@ 0x36
 8010150:	bf88      	it	hi
 8010152:	bd30      	pophi	{r4, r5, pc}
 8010154:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801015c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8010160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010164:	d002      	beq.n	801016c <__adddf3+0x70>
 8010166:	4240      	negs	r0, r0
 8010168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801016c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8010170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010178:	d002      	beq.n	8010180 <__adddf3+0x84>
 801017a:	4252      	negs	r2, r2
 801017c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010180:	ea94 0f05 	teq	r4, r5
 8010184:	f000 80a7 	beq.w	80102d6 <__adddf3+0x1da>
 8010188:	f1a4 0401 	sub.w	r4, r4, #1
 801018c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010190:	db0d      	blt.n	80101ae <__adddf3+0xb2>
 8010192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010196:	fa22 f205 	lsr.w	r2, r2, r5
 801019a:	1880      	adds	r0, r0, r2
 801019c:	f141 0100 	adc.w	r1, r1, #0
 80101a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80101a4:	1880      	adds	r0, r0, r2
 80101a6:	fa43 f305 	asr.w	r3, r3, r5
 80101aa:	4159      	adcs	r1, r3
 80101ac:	e00e      	b.n	80101cc <__adddf3+0xd0>
 80101ae:	f1a5 0520 	sub.w	r5, r5, #32
 80101b2:	f10e 0e20 	add.w	lr, lr, #32
 80101b6:	2a01      	cmp	r2, #1
 80101b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80101bc:	bf28      	it	cs
 80101be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80101c2:	fa43 f305 	asr.w	r3, r3, r5
 80101c6:	18c0      	adds	r0, r0, r3
 80101c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80101cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80101d0:	d507      	bpl.n	80101e2 <__adddf3+0xe6>
 80101d2:	f04f 0e00 	mov.w	lr, #0
 80101d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80101da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80101de:	eb6e 0101 	sbc.w	r1, lr, r1
 80101e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80101e6:	d31b      	bcc.n	8010220 <__adddf3+0x124>
 80101e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80101ec:	d30c      	bcc.n	8010208 <__adddf3+0x10c>
 80101ee:	0849      	lsrs	r1, r1, #1
 80101f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80101f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80101f8:	f104 0401 	add.w	r4, r4, #1
 80101fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8010200:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8010204:	f080 809a 	bcs.w	801033c <__adddf3+0x240>
 8010208:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 801020c:	bf08      	it	eq
 801020e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8010212:	f150 0000 	adcs.w	r0, r0, #0
 8010216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801021a:	ea41 0105 	orr.w	r1, r1, r5
 801021e:	bd30      	pop	{r4, r5, pc}
 8010220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8010224:	4140      	adcs	r0, r0
 8010226:	eb41 0101 	adc.w	r1, r1, r1
 801022a:	3c01      	subs	r4, #1
 801022c:	bf28      	it	cs
 801022e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8010232:	d2e9      	bcs.n	8010208 <__adddf3+0x10c>
 8010234:	f091 0f00 	teq	r1, #0
 8010238:	bf04      	itt	eq
 801023a:	4601      	moveq	r1, r0
 801023c:	2000      	moveq	r0, #0
 801023e:	fab1 f381 	clz	r3, r1
 8010242:	bf08      	it	eq
 8010244:	3320      	addeq	r3, #32
 8010246:	f1a3 030b 	sub.w	r3, r3, #11
 801024a:	f1b3 0220 	subs.w	r2, r3, #32
 801024e:	da0c      	bge.n	801026a <__adddf3+0x16e>
 8010250:	320c      	adds	r2, #12
 8010252:	dd08      	ble.n	8010266 <__adddf3+0x16a>
 8010254:	f102 0c14 	add.w	ip, r2, #20
 8010258:	f1c2 020c 	rsb	r2, r2, #12
 801025c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010260:	fa21 f102 	lsr.w	r1, r1, r2
 8010264:	e00c      	b.n	8010280 <__adddf3+0x184>
 8010266:	f102 0214 	add.w	r2, r2, #20
 801026a:	bfd8      	it	le
 801026c:	f1c2 0c20 	rsble	ip, r2, #32
 8010270:	fa01 f102 	lsl.w	r1, r1, r2
 8010274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010278:	bfdc      	itt	le
 801027a:	ea41 010c 	orrle.w	r1, r1, ip
 801027e:	4090      	lslle	r0, r2
 8010280:	1ae4      	subs	r4, r4, r3
 8010282:	bfa2      	ittt	ge
 8010284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010288:	4329      	orrge	r1, r5
 801028a:	bd30      	popge	{r4, r5, pc}
 801028c:	ea6f 0404 	mvn.w	r4, r4
 8010290:	3c1f      	subs	r4, #31
 8010292:	da1c      	bge.n	80102ce <__adddf3+0x1d2>
 8010294:	340c      	adds	r4, #12
 8010296:	dc0e      	bgt.n	80102b6 <__adddf3+0x1ba>
 8010298:	f104 0414 	add.w	r4, r4, #20
 801029c:	f1c4 0220 	rsb	r2, r4, #32
 80102a0:	fa20 f004 	lsr.w	r0, r0, r4
 80102a4:	fa01 f302 	lsl.w	r3, r1, r2
 80102a8:	ea40 0003 	orr.w	r0, r0, r3
 80102ac:	fa21 f304 	lsr.w	r3, r1, r4
 80102b0:	ea45 0103 	orr.w	r1, r5, r3
 80102b4:	bd30      	pop	{r4, r5, pc}
 80102b6:	f1c4 040c 	rsb	r4, r4, #12
 80102ba:	f1c4 0220 	rsb	r2, r4, #32
 80102be:	fa20 f002 	lsr.w	r0, r0, r2
 80102c2:	fa01 f304 	lsl.w	r3, r1, r4
 80102c6:	ea40 0003 	orr.w	r0, r0, r3
 80102ca:	4629      	mov	r1, r5
 80102cc:	bd30      	pop	{r4, r5, pc}
 80102ce:	fa21 f004 	lsr.w	r0, r1, r4
 80102d2:	4629      	mov	r1, r5
 80102d4:	bd30      	pop	{r4, r5, pc}
 80102d6:	f094 0f00 	teq	r4, #0
 80102da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80102de:	bf06      	itte	eq
 80102e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80102e4:	3401      	addeq	r4, #1
 80102e6:	3d01      	subne	r5, #1
 80102e8:	e74e      	b.n	8010188 <__adddf3+0x8c>
 80102ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80102ee:	bf18      	it	ne
 80102f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102f4:	d029      	beq.n	801034a <__adddf3+0x24e>
 80102f6:	ea94 0f05 	teq	r4, r5
 80102fa:	bf08      	it	eq
 80102fc:	ea90 0f02 	teqeq	r0, r2
 8010300:	d005      	beq.n	801030e <__adddf3+0x212>
 8010302:	ea54 0c00 	orrs.w	ip, r4, r0
 8010306:	bf04      	itt	eq
 8010308:	4619      	moveq	r1, r3
 801030a:	4610      	moveq	r0, r2
 801030c:	bd30      	pop	{r4, r5, pc}
 801030e:	ea91 0f03 	teq	r1, r3
 8010312:	bf1e      	ittt	ne
 8010314:	2100      	movne	r1, #0
 8010316:	2000      	movne	r0, #0
 8010318:	bd30      	popne	{r4, r5, pc}
 801031a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 801031e:	d105      	bne.n	801032c <__adddf3+0x230>
 8010320:	0040      	lsls	r0, r0, #1
 8010322:	4149      	adcs	r1, r1
 8010324:	bf28      	it	cs
 8010326:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 801032a:	bd30      	pop	{r4, r5, pc}
 801032c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8010330:	bf3c      	itt	cc
 8010332:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8010336:	bd30      	popcc	{r4, r5, pc}
 8010338:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 801033c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8010340:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010344:	f04f 0000 	mov.w	r0, #0
 8010348:	bd30      	pop	{r4, r5, pc}
 801034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801034e:	bf1a      	itte	ne
 8010350:	4619      	movne	r1, r3
 8010352:	4610      	movne	r0, r2
 8010354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010358:	bf1c      	itt	ne
 801035a:	460b      	movne	r3, r1
 801035c:	4602      	movne	r2, r0
 801035e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010362:	bf06      	itte	eq
 8010364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010368:	ea91 0f03 	teqeq	r1, r3
 801036c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8010370:	bd30      	pop	{r4, r5, pc}
 8010372:	bf00      	nop

08010374 <__aeabi_ui2d>:
 8010374:	f090 0f00 	teq	r0, #0
 8010378:	bf04      	itt	eq
 801037a:	2100      	moveq	r1, #0
 801037c:	4770      	bxeq	lr
 801037e:	b530      	push	{r4, r5, lr}
 8010380:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010384:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010388:	f04f 0500 	mov.w	r5, #0
 801038c:	f04f 0100 	mov.w	r1, #0
 8010390:	e750      	b.n	8010234 <__adddf3+0x138>
 8010392:	bf00      	nop

08010394 <__aeabi_i2d>:
 8010394:	f090 0f00 	teq	r0, #0
 8010398:	bf04      	itt	eq
 801039a:	2100      	moveq	r1, #0
 801039c:	4770      	bxeq	lr
 801039e:	b530      	push	{r4, r5, lr}
 80103a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80103a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80103a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80103ac:	bf48      	it	mi
 80103ae:	4240      	negmi	r0, r0
 80103b0:	f04f 0100 	mov.w	r1, #0
 80103b4:	e73e      	b.n	8010234 <__adddf3+0x138>
 80103b6:	bf00      	nop

080103b8 <__aeabi_f2d>:
 80103b8:	0042      	lsls	r2, r0, #1
 80103ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80103be:	ea4f 0131 	mov.w	r1, r1, rrx
 80103c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80103c6:	bf1f      	itttt	ne
 80103c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80103cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80103d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80103d4:	4770      	bxne	lr
 80103d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80103da:	bf08      	it	eq
 80103dc:	4770      	bxeq	lr
 80103de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80103e2:	bf04      	itt	eq
 80103e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80103e8:	4770      	bxeq	lr
 80103ea:	b530      	push	{r4, r5, lr}
 80103ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80103f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80103f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80103f8:	e71c      	b.n	8010234 <__adddf3+0x138>
 80103fa:	bf00      	nop

080103fc <__aeabi_ul2d>:
 80103fc:	ea50 0201 	orrs.w	r2, r0, r1
 8010400:	bf08      	it	eq
 8010402:	4770      	bxeq	lr
 8010404:	b530      	push	{r4, r5, lr}
 8010406:	f04f 0500 	mov.w	r5, #0
 801040a:	e00a      	b.n	8010422 <__aeabi_l2d+0x16>

0801040c <__aeabi_l2d>:
 801040c:	ea50 0201 	orrs.w	r2, r0, r1
 8010410:	bf08      	it	eq
 8010412:	4770      	bxeq	lr
 8010414:	b530      	push	{r4, r5, lr}
 8010416:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 801041a:	d502      	bpl.n	8010422 <__aeabi_l2d+0x16>
 801041c:	4240      	negs	r0, r0
 801041e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010422:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010426:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 801042a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 801042e:	f43f aed8 	beq.w	80101e2 <__adddf3+0xe6>
 8010432:	f04f 0203 	mov.w	r2, #3
 8010436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801043a:	bf18      	it	ne
 801043c:	3203      	addne	r2, #3
 801043e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010442:	bf18      	it	ne
 8010444:	3203      	addne	r2, #3
 8010446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801044a:	f1c2 0320 	rsb	r3, r2, #32
 801044e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010452:	fa20 f002 	lsr.w	r0, r0, r2
 8010456:	fa01 fe03 	lsl.w	lr, r1, r3
 801045a:	ea40 000e 	orr.w	r0, r0, lr
 801045e:	fa21 f102 	lsr.w	r1, r1, r2
 8010462:	4414      	add	r4, r2
 8010464:	e6bd      	b.n	80101e2 <__adddf3+0xe6>
 8010466:	bf00      	nop

08010468 <__aeabi_frsub>:
 8010468:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 801046c:	e002      	b.n	8010474 <__addsf3>
 801046e:	bf00      	nop

08010470 <__aeabi_fsub>:
 8010470:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08010474 <__addsf3>:
 8010474:	0042      	lsls	r2, r0, #1
 8010476:	bf1f      	itttt	ne
 8010478:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 801047c:	ea92 0f03 	teqne	r2, r3
 8010480:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8010484:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8010488:	d06a      	beq.n	8010560 <__addsf3+0xec>
 801048a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 801048e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8010492:	bfc1      	itttt	gt
 8010494:	18d2      	addgt	r2, r2, r3
 8010496:	4041      	eorgt	r1, r0
 8010498:	4048      	eorgt	r0, r1
 801049a:	4041      	eorgt	r1, r0
 801049c:	bfb8      	it	lt
 801049e:	425b      	neglt	r3, r3
 80104a0:	2b19      	cmp	r3, #25
 80104a2:	bf88      	it	hi
 80104a4:	4770      	bxhi	lr
 80104a6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80104aa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80104ae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80104b2:	bf18      	it	ne
 80104b4:	4240      	negne	r0, r0
 80104b6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80104ba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80104be:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80104c2:	bf18      	it	ne
 80104c4:	4249      	negne	r1, r1
 80104c6:	ea92 0f03 	teq	r2, r3
 80104ca:	d03f      	beq.n	801054c <__addsf3+0xd8>
 80104cc:	f1a2 0201 	sub.w	r2, r2, #1
 80104d0:	fa41 fc03 	asr.w	ip, r1, r3
 80104d4:	eb10 000c 	adds.w	r0, r0, ip
 80104d8:	f1c3 0320 	rsb	r3, r3, #32
 80104dc:	fa01 f103 	lsl.w	r1, r1, r3
 80104e0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80104e4:	d502      	bpl.n	80104ec <__addsf3+0x78>
 80104e6:	4249      	negs	r1, r1
 80104e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80104ec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80104f0:	d313      	bcc.n	801051a <__addsf3+0xa6>
 80104f2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80104f6:	d306      	bcc.n	8010506 <__addsf3+0x92>
 80104f8:	0840      	lsrs	r0, r0, #1
 80104fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80104fe:	f102 0201 	add.w	r2, r2, #1
 8010502:	2afe      	cmp	r2, #254	@ 0xfe
 8010504:	d251      	bcs.n	80105aa <__addsf3+0x136>
 8010506:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 801050a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 801050e:	bf08      	it	eq
 8010510:	f020 0001 	biceq.w	r0, r0, #1
 8010514:	ea40 0003 	orr.w	r0, r0, r3
 8010518:	4770      	bx	lr
 801051a:	0049      	lsls	r1, r1, #1
 801051c:	eb40 0000 	adc.w	r0, r0, r0
 8010520:	3a01      	subs	r2, #1
 8010522:	bf28      	it	cs
 8010524:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8010528:	d2ed      	bcs.n	8010506 <__addsf3+0x92>
 801052a:	fab0 fc80 	clz	ip, r0
 801052e:	f1ac 0c08 	sub.w	ip, ip, #8
 8010532:	ebb2 020c 	subs.w	r2, r2, ip
 8010536:	fa00 f00c 	lsl.w	r0, r0, ip
 801053a:	bfaa      	itet	ge
 801053c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8010540:	4252      	neglt	r2, r2
 8010542:	4318      	orrge	r0, r3
 8010544:	bfbc      	itt	lt
 8010546:	40d0      	lsrlt	r0, r2
 8010548:	4318      	orrlt	r0, r3
 801054a:	4770      	bx	lr
 801054c:	f092 0f00 	teq	r2, #0
 8010550:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8010554:	bf06      	itte	eq
 8010556:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 801055a:	3201      	addeq	r2, #1
 801055c:	3b01      	subne	r3, #1
 801055e:	e7b5      	b.n	80104cc <__addsf3+0x58>
 8010560:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8010564:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8010568:	bf18      	it	ne
 801056a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 801056e:	d021      	beq.n	80105b4 <__addsf3+0x140>
 8010570:	ea92 0f03 	teq	r2, r3
 8010574:	d004      	beq.n	8010580 <__addsf3+0x10c>
 8010576:	f092 0f00 	teq	r2, #0
 801057a:	bf08      	it	eq
 801057c:	4608      	moveq	r0, r1
 801057e:	4770      	bx	lr
 8010580:	ea90 0f01 	teq	r0, r1
 8010584:	bf1c      	itt	ne
 8010586:	2000      	movne	r0, #0
 8010588:	4770      	bxne	lr
 801058a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 801058e:	d104      	bne.n	801059a <__addsf3+0x126>
 8010590:	0040      	lsls	r0, r0, #1
 8010592:	bf28      	it	cs
 8010594:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8010598:	4770      	bx	lr
 801059a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 801059e:	bf3c      	itt	cc
 80105a0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80105a4:	4770      	bxcc	lr
 80105a6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80105aa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80105ae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80105b2:	4770      	bx	lr
 80105b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80105b8:	bf16      	itet	ne
 80105ba:	4608      	movne	r0, r1
 80105bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80105c0:	4601      	movne	r1, r0
 80105c2:	0242      	lsls	r2, r0, #9
 80105c4:	bf06      	itte	eq
 80105c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80105ca:	ea90 0f01 	teqeq	r0, r1
 80105ce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80105d2:	4770      	bx	lr

080105d4 <__aeabi_ui2f>:
 80105d4:	f04f 0300 	mov.w	r3, #0
 80105d8:	e004      	b.n	80105e4 <__aeabi_i2f+0x8>
 80105da:	bf00      	nop

080105dc <__aeabi_i2f>:
 80105dc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80105e0:	bf48      	it	mi
 80105e2:	4240      	negmi	r0, r0
 80105e4:	ea5f 0c00 	movs.w	ip, r0
 80105e8:	bf08      	it	eq
 80105ea:	4770      	bxeq	lr
 80105ec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80105f0:	4601      	mov	r1, r0
 80105f2:	f04f 0000 	mov.w	r0, #0
 80105f6:	e01c      	b.n	8010632 <__aeabi_l2f+0x2a>

080105f8 <__aeabi_ul2f>:
 80105f8:	ea50 0201 	orrs.w	r2, r0, r1
 80105fc:	bf08      	it	eq
 80105fe:	4770      	bxeq	lr
 8010600:	f04f 0300 	mov.w	r3, #0
 8010604:	e00a      	b.n	801061c <__aeabi_l2f+0x14>
 8010606:	bf00      	nop

08010608 <__aeabi_l2f>:
 8010608:	ea50 0201 	orrs.w	r2, r0, r1
 801060c:	bf08      	it	eq
 801060e:	4770      	bxeq	lr
 8010610:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8010614:	d502      	bpl.n	801061c <__aeabi_l2f+0x14>
 8010616:	4240      	negs	r0, r0
 8010618:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801061c:	ea5f 0c01 	movs.w	ip, r1
 8010620:	bf02      	ittt	eq
 8010622:	4684      	moveq	ip, r0
 8010624:	4601      	moveq	r1, r0
 8010626:	2000      	moveq	r0, #0
 8010628:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 801062c:	bf08      	it	eq
 801062e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8010632:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8010636:	fabc f28c 	clz	r2, ip
 801063a:	3a08      	subs	r2, #8
 801063c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8010640:	db10      	blt.n	8010664 <__aeabi_l2f+0x5c>
 8010642:	fa01 fc02 	lsl.w	ip, r1, r2
 8010646:	4463      	add	r3, ip
 8010648:	fa00 fc02 	lsl.w	ip, r0, r2
 801064c:	f1c2 0220 	rsb	r2, r2, #32
 8010650:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8010654:	fa20 f202 	lsr.w	r2, r0, r2
 8010658:	eb43 0002 	adc.w	r0, r3, r2
 801065c:	bf08      	it	eq
 801065e:	f020 0001 	biceq.w	r0, r0, #1
 8010662:	4770      	bx	lr
 8010664:	f102 0220 	add.w	r2, r2, #32
 8010668:	fa01 fc02 	lsl.w	ip, r1, r2
 801066c:	f1c2 0220 	rsb	r2, r2, #32
 8010670:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8010674:	fa21 f202 	lsr.w	r2, r1, r2
 8010678:	eb43 0002 	adc.w	r0, r3, r2
 801067c:	bf08      	it	eq
 801067e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8010682:	4770      	bx	lr

08010684 <__aeabi_uldivmod>:
 8010684:	b953      	cbnz	r3, 801069c <__aeabi_uldivmod+0x18>
 8010686:	b94a      	cbnz	r2, 801069c <__aeabi_uldivmod+0x18>
 8010688:	2900      	cmp	r1, #0
 801068a:	bf08      	it	eq
 801068c:	2800      	cmpeq	r0, #0
 801068e:	bf1c      	itt	ne
 8010690:	f04f 31ff 	movne.w	r1, #4294967295
 8010694:	f04f 30ff 	movne.w	r0, #4294967295
 8010698:	f000 b9f6 	b.w	8010a88 <__aeabi_idiv0>
 801069c:	f1ad 0c08 	sub.w	ip, sp, #8
 80106a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80106a4:	f000 f874 	bl	8010790 <__udivmoddi4>
 80106a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80106ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80106b0:	b004      	add	sp, #16
 80106b2:	4770      	bx	lr

080106b4 <__aeabi_f2lz>:
 80106b4:	ee07 0a90 	vmov	s15, r0
 80106b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80106bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106c0:	d401      	bmi.n	80106c6 <__aeabi_f2lz+0x12>
 80106c2:	f000 b825 	b.w	8010710 <__aeabi_f2ulz>
 80106c6:	eef1 7a67 	vneg.f32	s15, s15
 80106ca:	b508      	push	{r3, lr}
 80106cc:	ee17 0a90 	vmov	r0, s15
 80106d0:	f000 f81e 	bl	8010710 <__aeabi_f2ulz>
 80106d4:	4240      	negs	r0, r0
 80106d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80106da:	bd08      	pop	{r3, pc}

080106dc <__aeabi_d2lz>:
 80106dc:	b508      	push	{r3, lr}
 80106de:	4602      	mov	r2, r0
 80106e0:	460b      	mov	r3, r1
 80106e2:	ec43 2b17 	vmov	d7, r2, r3
 80106e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80106ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ee:	d403      	bmi.n	80106f8 <__aeabi_d2lz+0x1c>
 80106f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80106f4:	f000 b82c 	b.w	8010750 <__aeabi_d2ulz>
 80106f8:	eeb1 7b47 	vneg.f64	d7, d7
 80106fc:	ec51 0b17 	vmov	r0, r1, d7
 8010700:	f000 f826 	bl	8010750 <__aeabi_d2ulz>
 8010704:	4240      	negs	r0, r0
 8010706:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801070a:	bd08      	pop	{r3, pc}
 801070c:	0000      	movs	r0, r0
	...

08010710 <__aeabi_f2ulz>:
 8010710:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8010740 <__aeabi_f2ulz+0x30>
 8010714:	ee07 0a10 	vmov	s14, r0
 8010718:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8010748 <__aeabi_f2ulz+0x38>
 801071c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8010720:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010724:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8010728:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 801072c:	eea4 7b45 	vfms.f64	d7, d4, d5
 8010730:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8010734:	ee16 1a10 	vmov	r1, s12
 8010738:	ee17 0a90 	vmov	r0, s15
 801073c:	4770      	bx	lr
 801073e:	bf00      	nop
 8010740:	00000000 	.word	0x00000000
 8010744:	3df00000 	.word	0x3df00000
 8010748:	00000000 	.word	0x00000000
 801074c:	41f00000 	.word	0x41f00000

08010750 <__aeabi_d2ulz>:
 8010750:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8010780 <__aeabi_d2ulz+0x30>
 8010754:	ec41 0b17 	vmov	d7, r0, r1
 8010758:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8010788 <__aeabi_d2ulz+0x38>
 801075c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010760:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8010764:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8010768:	eea4 7b45 	vfms.f64	d7, d4, d5
 801076c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8010770:	ee16 1a10 	vmov	r1, s12
 8010774:	ee17 0a90 	vmov	r0, s15
 8010778:	4770      	bx	lr
 801077a:	bf00      	nop
 801077c:	f3af 8000 	nop.w
 8010780:	00000000 	.word	0x00000000
 8010784:	3df00000 	.word	0x3df00000
 8010788:	00000000 	.word	0x00000000
 801078c:	41f00000 	.word	0x41f00000

08010790 <__udivmoddi4>:
 8010790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010794:	9d08      	ldr	r5, [sp, #32]
 8010796:	468e      	mov	lr, r1
 8010798:	4604      	mov	r4, r0
 801079a:	4688      	mov	r8, r1
 801079c:	2b00      	cmp	r3, #0
 801079e:	d14a      	bne.n	8010836 <__udivmoddi4+0xa6>
 80107a0:	428a      	cmp	r2, r1
 80107a2:	4617      	mov	r7, r2
 80107a4:	d962      	bls.n	801086c <__udivmoddi4+0xdc>
 80107a6:	fab2 f682 	clz	r6, r2
 80107aa:	b14e      	cbz	r6, 80107c0 <__udivmoddi4+0x30>
 80107ac:	f1c6 0320 	rsb	r3, r6, #32
 80107b0:	fa01 f806 	lsl.w	r8, r1, r6
 80107b4:	fa20 f303 	lsr.w	r3, r0, r3
 80107b8:	40b7      	lsls	r7, r6
 80107ba:	ea43 0808 	orr.w	r8, r3, r8
 80107be:	40b4      	lsls	r4, r6
 80107c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80107c4:	fa1f fc87 	uxth.w	ip, r7
 80107c8:	fbb8 f1fe 	udiv	r1, r8, lr
 80107cc:	0c23      	lsrs	r3, r4, #16
 80107ce:	fb0e 8811 	mls	r8, lr, r1, r8
 80107d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80107d6:	fb01 f20c 	mul.w	r2, r1, ip
 80107da:	429a      	cmp	r2, r3
 80107dc:	d909      	bls.n	80107f2 <__udivmoddi4+0x62>
 80107de:	18fb      	adds	r3, r7, r3
 80107e0:	f101 30ff 	add.w	r0, r1, #4294967295
 80107e4:	f080 80ea 	bcs.w	80109bc <__udivmoddi4+0x22c>
 80107e8:	429a      	cmp	r2, r3
 80107ea:	f240 80e7 	bls.w	80109bc <__udivmoddi4+0x22c>
 80107ee:	3902      	subs	r1, #2
 80107f0:	443b      	add	r3, r7
 80107f2:	1a9a      	subs	r2, r3, r2
 80107f4:	b2a3      	uxth	r3, r4
 80107f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80107fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80107fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010802:	fb00 fc0c 	mul.w	ip, r0, ip
 8010806:	459c      	cmp	ip, r3
 8010808:	d909      	bls.n	801081e <__udivmoddi4+0x8e>
 801080a:	18fb      	adds	r3, r7, r3
 801080c:	f100 32ff 	add.w	r2, r0, #4294967295
 8010810:	f080 80d6 	bcs.w	80109c0 <__udivmoddi4+0x230>
 8010814:	459c      	cmp	ip, r3
 8010816:	f240 80d3 	bls.w	80109c0 <__udivmoddi4+0x230>
 801081a:	443b      	add	r3, r7
 801081c:	3802      	subs	r0, #2
 801081e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8010822:	eba3 030c 	sub.w	r3, r3, ip
 8010826:	2100      	movs	r1, #0
 8010828:	b11d      	cbz	r5, 8010832 <__udivmoddi4+0xa2>
 801082a:	40f3      	lsrs	r3, r6
 801082c:	2200      	movs	r2, #0
 801082e:	e9c5 3200 	strd	r3, r2, [r5]
 8010832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010836:	428b      	cmp	r3, r1
 8010838:	d905      	bls.n	8010846 <__udivmoddi4+0xb6>
 801083a:	b10d      	cbz	r5, 8010840 <__udivmoddi4+0xb0>
 801083c:	e9c5 0100 	strd	r0, r1, [r5]
 8010840:	2100      	movs	r1, #0
 8010842:	4608      	mov	r0, r1
 8010844:	e7f5      	b.n	8010832 <__udivmoddi4+0xa2>
 8010846:	fab3 f183 	clz	r1, r3
 801084a:	2900      	cmp	r1, #0
 801084c:	d146      	bne.n	80108dc <__udivmoddi4+0x14c>
 801084e:	4573      	cmp	r3, lr
 8010850:	d302      	bcc.n	8010858 <__udivmoddi4+0xc8>
 8010852:	4282      	cmp	r2, r0
 8010854:	f200 8105 	bhi.w	8010a62 <__udivmoddi4+0x2d2>
 8010858:	1a84      	subs	r4, r0, r2
 801085a:	eb6e 0203 	sbc.w	r2, lr, r3
 801085e:	2001      	movs	r0, #1
 8010860:	4690      	mov	r8, r2
 8010862:	2d00      	cmp	r5, #0
 8010864:	d0e5      	beq.n	8010832 <__udivmoddi4+0xa2>
 8010866:	e9c5 4800 	strd	r4, r8, [r5]
 801086a:	e7e2      	b.n	8010832 <__udivmoddi4+0xa2>
 801086c:	2a00      	cmp	r2, #0
 801086e:	f000 8090 	beq.w	8010992 <__udivmoddi4+0x202>
 8010872:	fab2 f682 	clz	r6, r2
 8010876:	2e00      	cmp	r6, #0
 8010878:	f040 80a4 	bne.w	80109c4 <__udivmoddi4+0x234>
 801087c:	1a8a      	subs	r2, r1, r2
 801087e:	0c03      	lsrs	r3, r0, #16
 8010880:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010884:	b280      	uxth	r0, r0
 8010886:	b2bc      	uxth	r4, r7
 8010888:	2101      	movs	r1, #1
 801088a:	fbb2 fcfe 	udiv	ip, r2, lr
 801088e:	fb0e 221c 	mls	r2, lr, ip, r2
 8010892:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010896:	fb04 f20c 	mul.w	r2, r4, ip
 801089a:	429a      	cmp	r2, r3
 801089c:	d907      	bls.n	80108ae <__udivmoddi4+0x11e>
 801089e:	18fb      	adds	r3, r7, r3
 80108a0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80108a4:	d202      	bcs.n	80108ac <__udivmoddi4+0x11c>
 80108a6:	429a      	cmp	r2, r3
 80108a8:	f200 80e0 	bhi.w	8010a6c <__udivmoddi4+0x2dc>
 80108ac:	46c4      	mov	ip, r8
 80108ae:	1a9b      	subs	r3, r3, r2
 80108b0:	fbb3 f2fe 	udiv	r2, r3, lr
 80108b4:	fb0e 3312 	mls	r3, lr, r2, r3
 80108b8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80108bc:	fb02 f404 	mul.w	r4, r2, r4
 80108c0:	429c      	cmp	r4, r3
 80108c2:	d907      	bls.n	80108d4 <__udivmoddi4+0x144>
 80108c4:	18fb      	adds	r3, r7, r3
 80108c6:	f102 30ff 	add.w	r0, r2, #4294967295
 80108ca:	d202      	bcs.n	80108d2 <__udivmoddi4+0x142>
 80108cc:	429c      	cmp	r4, r3
 80108ce:	f200 80ca 	bhi.w	8010a66 <__udivmoddi4+0x2d6>
 80108d2:	4602      	mov	r2, r0
 80108d4:	1b1b      	subs	r3, r3, r4
 80108d6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80108da:	e7a5      	b.n	8010828 <__udivmoddi4+0x98>
 80108dc:	f1c1 0620 	rsb	r6, r1, #32
 80108e0:	408b      	lsls	r3, r1
 80108e2:	fa22 f706 	lsr.w	r7, r2, r6
 80108e6:	431f      	orrs	r7, r3
 80108e8:	fa0e f401 	lsl.w	r4, lr, r1
 80108ec:	fa20 f306 	lsr.w	r3, r0, r6
 80108f0:	fa2e fe06 	lsr.w	lr, lr, r6
 80108f4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80108f8:	4323      	orrs	r3, r4
 80108fa:	fa00 f801 	lsl.w	r8, r0, r1
 80108fe:	fa1f fc87 	uxth.w	ip, r7
 8010902:	fbbe f0f9 	udiv	r0, lr, r9
 8010906:	0c1c      	lsrs	r4, r3, #16
 8010908:	fb09 ee10 	mls	lr, r9, r0, lr
 801090c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8010910:	fb00 fe0c 	mul.w	lr, r0, ip
 8010914:	45a6      	cmp	lr, r4
 8010916:	fa02 f201 	lsl.w	r2, r2, r1
 801091a:	d909      	bls.n	8010930 <__udivmoddi4+0x1a0>
 801091c:	193c      	adds	r4, r7, r4
 801091e:	f100 3aff 	add.w	sl, r0, #4294967295
 8010922:	f080 809c 	bcs.w	8010a5e <__udivmoddi4+0x2ce>
 8010926:	45a6      	cmp	lr, r4
 8010928:	f240 8099 	bls.w	8010a5e <__udivmoddi4+0x2ce>
 801092c:	3802      	subs	r0, #2
 801092e:	443c      	add	r4, r7
 8010930:	eba4 040e 	sub.w	r4, r4, lr
 8010934:	fa1f fe83 	uxth.w	lr, r3
 8010938:	fbb4 f3f9 	udiv	r3, r4, r9
 801093c:	fb09 4413 	mls	r4, r9, r3, r4
 8010940:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8010944:	fb03 fc0c 	mul.w	ip, r3, ip
 8010948:	45a4      	cmp	ip, r4
 801094a:	d908      	bls.n	801095e <__udivmoddi4+0x1ce>
 801094c:	193c      	adds	r4, r7, r4
 801094e:	f103 3eff 	add.w	lr, r3, #4294967295
 8010952:	f080 8082 	bcs.w	8010a5a <__udivmoddi4+0x2ca>
 8010956:	45a4      	cmp	ip, r4
 8010958:	d97f      	bls.n	8010a5a <__udivmoddi4+0x2ca>
 801095a:	3b02      	subs	r3, #2
 801095c:	443c      	add	r4, r7
 801095e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8010962:	eba4 040c 	sub.w	r4, r4, ip
 8010966:	fba0 ec02 	umull	lr, ip, r0, r2
 801096a:	4564      	cmp	r4, ip
 801096c:	4673      	mov	r3, lr
 801096e:	46e1      	mov	r9, ip
 8010970:	d362      	bcc.n	8010a38 <__udivmoddi4+0x2a8>
 8010972:	d05f      	beq.n	8010a34 <__udivmoddi4+0x2a4>
 8010974:	b15d      	cbz	r5, 801098e <__udivmoddi4+0x1fe>
 8010976:	ebb8 0203 	subs.w	r2, r8, r3
 801097a:	eb64 0409 	sbc.w	r4, r4, r9
 801097e:	fa04 f606 	lsl.w	r6, r4, r6
 8010982:	fa22 f301 	lsr.w	r3, r2, r1
 8010986:	431e      	orrs	r6, r3
 8010988:	40cc      	lsrs	r4, r1
 801098a:	e9c5 6400 	strd	r6, r4, [r5]
 801098e:	2100      	movs	r1, #0
 8010990:	e74f      	b.n	8010832 <__udivmoddi4+0xa2>
 8010992:	fbb1 fcf2 	udiv	ip, r1, r2
 8010996:	0c01      	lsrs	r1, r0, #16
 8010998:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 801099c:	b280      	uxth	r0, r0
 801099e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80109a2:	463b      	mov	r3, r7
 80109a4:	4638      	mov	r0, r7
 80109a6:	463c      	mov	r4, r7
 80109a8:	46b8      	mov	r8, r7
 80109aa:	46be      	mov	lr, r7
 80109ac:	2620      	movs	r6, #32
 80109ae:	fbb1 f1f7 	udiv	r1, r1, r7
 80109b2:	eba2 0208 	sub.w	r2, r2, r8
 80109b6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80109ba:	e766      	b.n	801088a <__udivmoddi4+0xfa>
 80109bc:	4601      	mov	r1, r0
 80109be:	e718      	b.n	80107f2 <__udivmoddi4+0x62>
 80109c0:	4610      	mov	r0, r2
 80109c2:	e72c      	b.n	801081e <__udivmoddi4+0x8e>
 80109c4:	f1c6 0220 	rsb	r2, r6, #32
 80109c8:	fa2e f302 	lsr.w	r3, lr, r2
 80109cc:	40b7      	lsls	r7, r6
 80109ce:	40b1      	lsls	r1, r6
 80109d0:	fa20 f202 	lsr.w	r2, r0, r2
 80109d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80109d8:	430a      	orrs	r2, r1
 80109da:	fbb3 f8fe 	udiv	r8, r3, lr
 80109de:	b2bc      	uxth	r4, r7
 80109e0:	fb0e 3318 	mls	r3, lr, r8, r3
 80109e4:	0c11      	lsrs	r1, r2, #16
 80109e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80109ea:	fb08 f904 	mul.w	r9, r8, r4
 80109ee:	40b0      	lsls	r0, r6
 80109f0:	4589      	cmp	r9, r1
 80109f2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80109f6:	b280      	uxth	r0, r0
 80109f8:	d93e      	bls.n	8010a78 <__udivmoddi4+0x2e8>
 80109fa:	1879      	adds	r1, r7, r1
 80109fc:	f108 3cff 	add.w	ip, r8, #4294967295
 8010a00:	d201      	bcs.n	8010a06 <__udivmoddi4+0x276>
 8010a02:	4589      	cmp	r9, r1
 8010a04:	d81f      	bhi.n	8010a46 <__udivmoddi4+0x2b6>
 8010a06:	eba1 0109 	sub.w	r1, r1, r9
 8010a0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8010a0e:	fb09 f804 	mul.w	r8, r9, r4
 8010a12:	fb0e 1119 	mls	r1, lr, r9, r1
 8010a16:	b292      	uxth	r2, r2
 8010a18:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010a1c:	4542      	cmp	r2, r8
 8010a1e:	d229      	bcs.n	8010a74 <__udivmoddi4+0x2e4>
 8010a20:	18ba      	adds	r2, r7, r2
 8010a22:	f109 31ff 	add.w	r1, r9, #4294967295
 8010a26:	d2c4      	bcs.n	80109b2 <__udivmoddi4+0x222>
 8010a28:	4542      	cmp	r2, r8
 8010a2a:	d2c2      	bcs.n	80109b2 <__udivmoddi4+0x222>
 8010a2c:	f1a9 0102 	sub.w	r1, r9, #2
 8010a30:	443a      	add	r2, r7
 8010a32:	e7be      	b.n	80109b2 <__udivmoddi4+0x222>
 8010a34:	45f0      	cmp	r8, lr
 8010a36:	d29d      	bcs.n	8010974 <__udivmoddi4+0x1e4>
 8010a38:	ebbe 0302 	subs.w	r3, lr, r2
 8010a3c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8010a40:	3801      	subs	r0, #1
 8010a42:	46e1      	mov	r9, ip
 8010a44:	e796      	b.n	8010974 <__udivmoddi4+0x1e4>
 8010a46:	eba7 0909 	sub.w	r9, r7, r9
 8010a4a:	4449      	add	r1, r9
 8010a4c:	f1a8 0c02 	sub.w	ip, r8, #2
 8010a50:	fbb1 f9fe 	udiv	r9, r1, lr
 8010a54:	fb09 f804 	mul.w	r8, r9, r4
 8010a58:	e7db      	b.n	8010a12 <__udivmoddi4+0x282>
 8010a5a:	4673      	mov	r3, lr
 8010a5c:	e77f      	b.n	801095e <__udivmoddi4+0x1ce>
 8010a5e:	4650      	mov	r0, sl
 8010a60:	e766      	b.n	8010930 <__udivmoddi4+0x1a0>
 8010a62:	4608      	mov	r0, r1
 8010a64:	e6fd      	b.n	8010862 <__udivmoddi4+0xd2>
 8010a66:	443b      	add	r3, r7
 8010a68:	3a02      	subs	r2, #2
 8010a6a:	e733      	b.n	80108d4 <__udivmoddi4+0x144>
 8010a6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8010a70:	443b      	add	r3, r7
 8010a72:	e71c      	b.n	80108ae <__udivmoddi4+0x11e>
 8010a74:	4649      	mov	r1, r9
 8010a76:	e79c      	b.n	80109b2 <__udivmoddi4+0x222>
 8010a78:	eba1 0109 	sub.w	r1, r1, r9
 8010a7c:	46c4      	mov	ip, r8
 8010a7e:	fbb1 f9fe 	udiv	r9, r1, lr
 8010a82:	fb09 f804 	mul.w	r8, r9, r4
 8010a86:	e7c4      	b.n	8010a12 <__udivmoddi4+0x282>

08010a88 <__aeabi_idiv0>:
 8010a88:	4770      	bx	lr
 8010a8a:	bf00      	nop

08010a8c <AudioCapture_Init>:
/**
  * @brief  初始化音频采集
  * @retval None
  */
void AudioCapture_Init(void)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	af00      	add	r7, sp, #0
    /* 清空缓冲区 */
    memset(dma, 0, DMA_BUFFER_SIZE * sizeof(uint32_t));
 8010a90:	2210      	movs	r2, #16
 8010a92:	2100      	movs	r1, #0
 8010a94:	480b      	ldr	r0, [pc, #44]	@ (8010ac4 <AudioCapture_Init+0x38>)
 8010a96:	f023 f9fc 	bl	8033e92 <memset>
    memset(audioBuffer, 0, AUDIO_BUFFER_SAMPLES * sizeof(uint32_t));
 8010a9a:	4a0b      	ldr	r2, [pc, #44]	@ (8010ac8 <AudioCapture_Init+0x3c>)
 8010a9c:	2100      	movs	r1, #0
 8010a9e:	480b      	ldr	r0, [pc, #44]	@ (8010acc <AudioCapture_Init+0x40>)
 8010aa0:	f023 f9f7 	bl	8033e92 <memset>
    currentSampleIndex = 0;
 8010aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8010ad0 <AudioCapture_Init+0x44>)
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	601a      	str	r2, [r3, #0]

    /* 设置初始状态 */
    audioState = AUDIO_STATE_IDLE;
 8010aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8010ad4 <AudioCapture_Init+0x48>)
 8010aac:	2200      	movs	r2, #0
 8010aae:	701a      	strb	r2, [r3, #0]
    captureDoneFlag = 0;
 8010ab0:	4b09      	ldr	r3, [pc, #36]	@ (8010ad8 <AudioCapture_Init+0x4c>)
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	701a      	strb	r2, [r3, #0]

    SEGGER_RTT_printf(0, "Audio capture system initialized. Press button to start 3-second capture.\r\n");
 8010ab6:	4909      	ldr	r1, [pc, #36]	@ (8010adc <AudioCapture_Init+0x50>)
 8010ab8:	2000      	movs	r0, #0
 8010aba:	f00a fc57 	bl	801b36c <SEGGER_RTT_printf>
}
 8010abe:	bf00      	nop
 8010ac0:	bd80      	pop	{r7, pc}
 8010ac2:	bf00      	nop
 8010ac4:	240025dc 	.word	0x240025dc
 8010ac8:	0002ee00 	.word	0x0002ee00
 8010acc:	240025ec 	.word	0x240025ec
 8010ad0:	240313f0 	.word	0x240313f0
 8010ad4:	240313ec 	.word	0x240313ec
 8010ad8:	240313f4 	.word	0x240313f4
 8010adc:	080376e0 	.word	0x080376e0

08010ae0 <AudioCapture_Start>:
/**
  * @brief  启动音频采集
  * @retval None
  */
void AudioCapture_Start(void)
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	af00      	add	r7, sp, #0
    /* 只有在空闲状态才启动采集 */
    if(audioState == AUDIO_STATE_IDLE)
 8010ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8010b20 <AudioCapture_Start+0x40>)
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	b2db      	uxtb	r3, r3
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d116      	bne.n	8010b1c <AudioCapture_Start+0x3c>
    {
        SEGGER_RTT_printf(0, "Starting audio capture...\r\n");
 8010aee:	490d      	ldr	r1, [pc, #52]	@ (8010b24 <AudioCapture_Start+0x44>)
 8010af0:	2000      	movs	r0, #0
 8010af2:	f00a fc3b 	bl	801b36c <SEGGER_RTT_printf>

        /* 重置状态 */
        captureDoneFlag = 0;
 8010af6:	4b0c      	ldr	r3, [pc, #48]	@ (8010b28 <AudioCapture_Start+0x48>)
 8010af8:	2200      	movs	r2, #0
 8010afa:	701a      	strb	r2, [r3, #0]
        audioState = AUDIO_STATE_CAPTURING;
 8010afc:	4b08      	ldr	r3, [pc, #32]	@ (8010b20 <AudioCapture_Start+0x40>)
 8010afe:	2201      	movs	r2, #1
 8010b00:	701a      	strb	r2, [r3, #0]
        currentSampleIndex = 0;
 8010b02:	4b0a      	ldr	r3, [pc, #40]	@ (8010b2c <AudioCapture_Start+0x4c>)
 8010b04:	2200      	movs	r2, #0
 8010b06:	601a      	str	r2, [r3, #0]

        /* 清空缓冲区 */
        memset(dma, 0, DMA_BUFFER_SIZE * sizeof(uint32_t));
 8010b08:	2210      	movs	r2, #16
 8010b0a:	2100      	movs	r1, #0
 8010b0c:	4808      	ldr	r0, [pc, #32]	@ (8010b30 <AudioCapture_Start+0x50>)
 8010b0e:	f023 f9c0 	bl	8033e92 <memset>

        /* 启动I2S DMA接收 */
        HAL_I2S_Receive_DMA(&hi2s1, (uint16_t*)dma, DMA_BUFFER_SIZE);
 8010b12:	2204      	movs	r2, #4
 8010b14:	4906      	ldr	r1, [pc, #24]	@ (8010b30 <AudioCapture_Start+0x50>)
 8010b16:	4807      	ldr	r0, [pc, #28]	@ (8010b34 <AudioCapture_Start+0x54>)
 8010b18:	f004 fa1c 	bl	8014f54 <HAL_I2S_Receive_DMA>
    }
}
 8010b1c:	bf00      	nop
 8010b1e:	bd80      	pop	{r7, pc}
 8010b20:	240313ec 	.word	0x240313ec
 8010b24:	0803772c 	.word	0x0803772c
 8010b28:	240313f4 	.word	0x240313f4
 8010b2c:	240313f0 	.word	0x240313f0
 8010b30:	240025dc 	.word	0x240025dc
 8010b34:	24031450 	.word	0x24031450

08010b38 <AudioCapture_Stop>:
/**
  * @brief  停止音频采集
  * @retval None
  */
void AudioCapture_Stop(void)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	af00      	add	r7, sp, #0
    /* 停止DMA传输 */
    HAL_I2S_DMAStop(&hi2s1);
 8010b3c:	4808      	ldr	r0, [pc, #32]	@ (8010b60 <AudioCapture_Stop+0x28>)
 8010b3e:	f004 faab 	bl	8015098 <HAL_I2S_DMAStop>

    SEGGER_RTT_printf(0, "Audio capture completed. Collected %d samples.\r\n", AUDIO_BUFFER_SAMPLES);
 8010b42:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8010b46:	4907      	ldr	r1, [pc, #28]	@ (8010b64 <AudioCapture_Stop+0x2c>)
 8010b48:	2000      	movs	r0, #0
 8010b4a:	f00a fc0f 	bl	801b36c <SEGGER_RTT_printf>

    /* 更新状态 */
    audioState = AUDIO_STATE_PROCESSING;
 8010b4e:	4b06      	ldr	r3, [pc, #24]	@ (8010b68 <AudioCapture_Stop+0x30>)
 8010b50:	2202      	movs	r2, #2
 8010b52:	701a      	strb	r2, [r3, #0]
    captureDoneFlag = 1;
 8010b54:	4b05      	ldr	r3, [pc, #20]	@ (8010b6c <AudioCapture_Stop+0x34>)
 8010b56:	2201      	movs	r2, #1
 8010b58:	701a      	strb	r2, [r3, #0]
}
 8010b5a:	bf00      	nop
 8010b5c:	bd80      	pop	{r7, pc}
 8010b5e:	bf00      	nop
 8010b60:	24031450 	.word	0x24031450
 8010b64:	08037748 	.word	0x08037748
 8010b68:	240313ec 	.word	0x240313ec
 8010b6c:	240313f4 	.word	0x240313f4

08010b70 <HAL_I2S_RxCpltCallback>:

/**
 * @brief DMA全传输完成回调
 */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b084      	sub	sp, #16
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
    if(hi2s != &hi2s1 || audioState != AUDIO_STATE_CAPTURING)
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	4a22      	ldr	r2, [pc, #136]	@ (8010c04 <HAL_I2S_RxCpltCallback+0x94>)
 8010b7c:	4293      	cmp	r3, r2
 8010b7e:	d13c      	bne.n	8010bfa <HAL_I2S_RxCpltCallback+0x8a>
 8010b80:	4b21      	ldr	r3, [pc, #132]	@ (8010c08 <HAL_I2S_RxCpltCallback+0x98>)
 8010b82:	781b      	ldrb	r3, [r3, #0]
 8010b84:	b2db      	uxtb	r3, r3
 8010b86:	2b01      	cmp	r3, #1
 8010b88:	d137      	bne.n	8010bfa <HAL_I2S_RxCpltCallback+0x8a>
        return;

    // 合并两个32位值获取一个24位样本
    uint32_t val24 = (dma[0]<<8)+(dma[1]>>8);
 8010b8a:	4b20      	ldr	r3, [pc, #128]	@ (8010c0c <HAL_I2S_RxCpltCallback+0x9c>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	021a      	lsls	r2, r3, #8
 8010b90:	4b1e      	ldr	r3, [pc, #120]	@ (8010c0c <HAL_I2S_RxCpltCallback+0x9c>)
 8010b92:	685b      	ldr	r3, [r3, #4]
 8010b94:	0a1b      	lsrs	r3, r3, #8
 8010b96:	4413      	add	r3, r2
 8010b98:	60bb      	str	r3, [r7, #8]
    int32_t val32;

    // 将24位有符号整型扩展到32位
    if(val24 & 0x800000) { // 负数
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d004      	beq.n	8010bae <HAL_I2S_RxCpltCallback+0x3e>
        val32 = 0xff000000 | val24;
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010baa:	60fb      	str	r3, [r7, #12]
 8010bac:	e001      	b.n	8010bb2 <HAL_I2S_RxCpltCallback+0x42>
    } else { // 正数
        val32 = val24;
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	60fb      	str	r3, [r7, #12]
    }

    // 保存样本，并检查是否达到上限
    if(currentSampleIndex < AUDIO_BUFFER_SAMPLES) {
 8010bb2:	4b17      	ldr	r3, [pc, #92]	@ (8010c10 <HAL_I2S_RxCpltCallback+0xa0>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8010bba:	4293      	cmp	r3, r2
 8010bbc:	d80f      	bhi.n	8010bde <HAL_I2S_RxCpltCallback+0x6e>
        audioBuffer[currentSampleIndex++] = val32;
 8010bbe:	4b14      	ldr	r3, [pc, #80]	@ (8010c10 <HAL_I2S_RxCpltCallback+0xa0>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	1c5a      	adds	r2, r3, #1
 8010bc4:	4912      	ldr	r1, [pc, #72]	@ (8010c10 <HAL_I2S_RxCpltCallback+0xa0>)
 8010bc6:	600a      	str	r2, [r1, #0]
 8010bc8:	4912      	ldr	r1, [pc, #72]	@ (8010c14 <HAL_I2S_RxCpltCallback+0xa4>)
 8010bca:	68fa      	ldr	r2, [r7, #12]
 8010bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        AudioCapture_Stop();
        return;
    }

    // 重启DMA以继续采集
    if(currentSampleIndex < AUDIO_BUFFER_SAMPLES && audioState == AUDIO_STATE_CAPTURING) {
 8010bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8010c10 <HAL_I2S_RxCpltCallback+0xa0>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8010bd8:	4293      	cmp	r3, r2
 8010bda:	d80f      	bhi.n	8010bfc <HAL_I2S_RxCpltCallback+0x8c>
 8010bdc:	e002      	b.n	8010be4 <HAL_I2S_RxCpltCallback+0x74>
        AudioCapture_Stop();
 8010bde:	f7ff ffab 	bl	8010b38 <AudioCapture_Stop>
        return;
 8010be2:	e00b      	b.n	8010bfc <HAL_I2S_RxCpltCallback+0x8c>
    if(currentSampleIndex < AUDIO_BUFFER_SAMPLES && audioState == AUDIO_STATE_CAPTURING) {
 8010be4:	4b08      	ldr	r3, [pc, #32]	@ (8010c08 <HAL_I2S_RxCpltCallback+0x98>)
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	b2db      	uxtb	r3, r3
 8010bea:	2b01      	cmp	r3, #1
 8010bec:	d106      	bne.n	8010bfc <HAL_I2S_RxCpltCallback+0x8c>
        HAL_I2S_Receive_DMA(&hi2s1, (uint16_t*)dma, DMA_BUFFER_SIZE);
 8010bee:	2204      	movs	r2, #4
 8010bf0:	4906      	ldr	r1, [pc, #24]	@ (8010c0c <HAL_I2S_RxCpltCallback+0x9c>)
 8010bf2:	4804      	ldr	r0, [pc, #16]	@ (8010c04 <HAL_I2S_RxCpltCallback+0x94>)
 8010bf4:	f004 f9ae 	bl	8014f54 <HAL_I2S_Receive_DMA>
 8010bf8:	e000      	b.n	8010bfc <HAL_I2S_RxCpltCallback+0x8c>
        return;
 8010bfa:	bf00      	nop
    }
}
 8010bfc:	3710      	adds	r7, #16
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}
 8010c02:	bf00      	nop
 8010c04:	24031450 	.word	0x24031450
 8010c08:	240313ec 	.word	0x240313ec
 8010c0c:	240025dc 	.word	0x240025dc
 8010c10:	240313f0 	.word	0x240313f0
 8010c14:	240025ec 	.word	0x240025ec

08010c18 <HAL_GPIO_EXTI_Callback>:
  * @brief  按键外部中断回调
  * @param  GPIO_Pin: 触发中断的GPIO引脚
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b084      	sub	sp, #16
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	4603      	mov	r3, r0
 8010c20:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_13)
 8010c22:	88fb      	ldrh	r3, [r7, #6]
 8010c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010c28:	d113      	bne.n	8010c52 <HAL_GPIO_EXTI_Callback+0x3a>
    {
        /* 防抖 - 可根据需要调整 */
        static uint32_t lastTick = 0;
        uint32_t currentTick = HAL_GetTick();
 8010c2a:	f000 ffb7 	bl	8011b9c <HAL_GetTick>
 8010c2e:	60f8      	str	r0, [r7, #12]

        if(currentTick - lastTick > 300)  // 300ms防抖
 8010c30:	4b0a      	ldr	r3, [pc, #40]	@ (8010c5c <HAL_GPIO_EXTI_Callback+0x44>)
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	68fa      	ldr	r2, [r7, #12]
 8010c36:	1ad3      	subs	r3, r2, r3
 8010c38:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8010c3c:	d909      	bls.n	8010c52 <HAL_GPIO_EXTI_Callback+0x3a>
        {
            /* 只有在空闲状态才处理按键 */
            if(audioState == AUDIO_STATE_IDLE)
 8010c3e:	4b08      	ldr	r3, [pc, #32]	@ (8010c60 <HAL_GPIO_EXTI_Callback+0x48>)
 8010c40:	781b      	ldrb	r3, [r3, #0]
 8010c42:	b2db      	uxtb	r3, r3
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d101      	bne.n	8010c4c <HAL_GPIO_EXTI_Callback+0x34>
            {
                /* 直接启动采集 */
                AudioCapture_Start();
 8010c48:	f7ff ff4a 	bl	8010ae0 <AudioCapture_Start>
            }

            lastTick = currentTick;
 8010c4c:	4a03      	ldr	r2, [pc, #12]	@ (8010c5c <HAL_GPIO_EXTI_Callback+0x44>)
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	6013      	str	r3, [r2, #0]
        }
    }
}
 8010c52:	bf00      	nop
 8010c54:	3710      	adds	r7, #16
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}
 8010c5a:	bf00      	nop
 8010c5c:	240313f8 	.word	0x240313f8
 8010c60:	240313ec 	.word	0x240313ec

08010c64 <ProcessAudio>:
#include "audio_capture.h"
#include "SEGGER_RTT.h"
#include "SEGGER_RTT_Conf.h"

void ProcessAudio(int32_t* buffer, uint32_t size)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b084      	sub	sp, #16
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < size; i += 160)
 8010c6e:	2300      	movs	r3, #0
 8010c70:	60fb      	str	r3, [r7, #12]
 8010c72:	e00f      	b.n	8010c94 <ProcessAudio+0x30>
	{
		// 处理音频数据
		SEGGER_RTT_printf(0, "Sample %lu: %ld\r\n", i, buffer[i]);
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	009b      	lsls	r3, r3, #2
 8010c78:	687a      	ldr	r2, [r7, #4]
 8010c7a:	4413      	add	r3, r2
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	68fa      	ldr	r2, [r7, #12]
 8010c80:	4909      	ldr	r1, [pc, #36]	@ (8010ca8 <ProcessAudio+0x44>)
 8010c82:	2000      	movs	r0, #0
 8010c84:	f00a fb72 	bl	801b36c <SEGGER_RTT_printf>
		HAL_Delay(10);
 8010c88:	200a      	movs	r0, #10
 8010c8a:	f000 ff93 	bl	8011bb4 <HAL_Delay>
	for(uint32_t i = 0; i < size; i += 160)
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	33a0      	adds	r3, #160	@ 0xa0
 8010c92:	60fb      	str	r3, [r7, #12]
 8010c94:	68fa      	ldr	r2, [r7, #12]
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d3eb      	bcc.n	8010c74 <ProcessAudio+0x10>
	}
}
 8010c9c:	bf00      	nop
 8010c9e:	bf00      	nop
 8010ca0:	3710      	adds	r7, #16
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}
 8010ca6:	bf00      	nop
 8010ca8:	0803777c 	.word	0x0803777c

08010cac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b082      	sub	sp, #8
 8010cb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8010cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8010ce8 <MX_DMA_Init+0x3c>)
 8010cb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010cb8:	4a0b      	ldr	r2, [pc, #44]	@ (8010ce8 <MX_DMA_Init+0x3c>)
 8010cba:	f043 0301 	orr.w	r3, r3, #1
 8010cbe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8010cc2:	4b09      	ldr	r3, [pc, #36]	@ (8010ce8 <MX_DMA_Init+0x3c>)
 8010cc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010cc8:	f003 0301 	and.w	r3, r3, #1
 8010ccc:	607b      	str	r3, [r7, #4]
 8010cce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	2100      	movs	r1, #0
 8010cd4:	200b      	movs	r0, #11
 8010cd6:	f001 f86d 	bl	8011db4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8010cda:	200b      	movs	r0, #11
 8010cdc:	f001 f884 	bl	8011de8 <HAL_NVIC_EnableIRQ>

}
 8010ce0:	bf00      	nop
 8010ce2:	3708      	adds	r7, #8
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}
 8010ce8:	58024400 	.word	0x58024400

08010cec <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b08c      	sub	sp, #48	@ 0x30
 8010cf0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010cf2:	f107 031c 	add.w	r3, r7, #28
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	601a      	str	r2, [r3, #0]
 8010cfa:	605a      	str	r2, [r3, #4]
 8010cfc:	609a      	str	r2, [r3, #8]
 8010cfe:	60da      	str	r2, [r3, #12]
 8010d00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8010d02:	4b63      	ldr	r3, [pc, #396]	@ (8010e90 <MX_GPIO_Init+0x1a4>)
 8010d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010d08:	4a61      	ldr	r2, [pc, #388]	@ (8010e90 <MX_GPIO_Init+0x1a4>)
 8010d0a:	f043 0310 	orr.w	r3, r3, #16
 8010d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010d12:	4b5f      	ldr	r3, [pc, #380]	@ (8010e90 <MX_GPIO_Init+0x1a4>)
 8010d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010d18:	f003 0310 	and.w	r3, r3, #16
 8010d1c:	61bb      	str	r3, [r7, #24]
 8010d1e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010d20:	4b5b      	ldr	r3, [pc, #364]	@ (8010e90 <MX_GPIO_Init+0x1a4>)
 8010d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010d26:	4a5a      	ldr	r2, [pc, #360]	@ (8010e90 <MX_GPIO_Init+0x1a4>)
 8010d28:	f043 0304 	orr.w	r3, r3, #4
 8010d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010d30:	4b57      	ldr	r3, [pc, #348]	@ (8010e90 <MX_GPIO_Init+0x1a4>)
 8010d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010d36:	f003 0304 	and.w	r3, r3, #4
 8010d3a:	617b      	str	r3, [r7, #20]
 8010d3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8010d3e:	4b54      	ldr	r3, [pc, #336]	@ (8010e90 <MX_GPIO_Init+0x1a4>)
 8010d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010d44:	4a52      	ldr	r2, [pc, #328]	@ (8010e90 <MX_GPIO_Init+0x1a4>)
 8010d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010d4e:	4b50      	ldr	r3, [pc, #320]	@ (8010e90 <MX_GPIO_Init+0x1a4>)
 8010d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d58:	613b      	str	r3, [r7, #16]
 8010d5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010d5c:	4b4c      	ldr	r3, [pc, #304]	@ (8010e90 <MX_GPIO_Init+0x1a4>)
 8010d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010d62:	4a4b      	ldr	r2, [pc, #300]	@ (8010e90 <MX_GPIO_Init+0x1a4>)
 8010d64:	f043 0301 	orr.w	r3, r3, #1
 8010d68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010d6c:	4b48      	ldr	r3, [pc, #288]	@ (8010e90 <MX_GPIO_Init+0x1a4>)
 8010d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010d72:	f003 0301 	and.w	r3, r3, #1
 8010d76:	60fb      	str	r3, [r7, #12]
 8010d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010d7a:	4b45      	ldr	r3, [pc, #276]	@ (8010e90 <MX_GPIO_Init+0x1a4>)
 8010d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010d80:	4a43      	ldr	r2, [pc, #268]	@ (8010e90 <MX_GPIO_Init+0x1a4>)
 8010d82:	f043 0302 	orr.w	r3, r3, #2
 8010d86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010d8a:	4b41      	ldr	r3, [pc, #260]	@ (8010e90 <MX_GPIO_Init+0x1a4>)
 8010d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010d90:	f003 0302 	and.w	r3, r3, #2
 8010d94:	60bb      	str	r3, [r7, #8]
 8010d96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8010d98:	4b3d      	ldr	r3, [pc, #244]	@ (8010e90 <MX_GPIO_Init+0x1a4>)
 8010d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010d9e:	4a3c      	ldr	r2, [pc, #240]	@ (8010e90 <MX_GPIO_Init+0x1a4>)
 8010da0:	f043 0308 	orr.w	r3, r3, #8
 8010da4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010da8:	4b39      	ldr	r3, [pc, #228]	@ (8010e90 <MX_GPIO_Init+0x1a4>)
 8010daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010dae:	f003 0308 	and.w	r3, r3, #8
 8010db2:	607b      	str	r3, [r7, #4]
 8010db4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Pin_GPIO_Port, LED_Pin_Pin, GPIO_PIN_RESET);
 8010db6:	2200      	movs	r2, #0
 8010db8:	2108      	movs	r1, #8
 8010dba:	4836      	ldr	r0, [pc, #216]	@ (8010e94 <MX_GPIO_Init+0x1a8>)
 8010dbc:	f003 fe40 	bl	8014a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8010dc6:	4834      	ldr	r0, [pc, #208]	@ (8010e98 <MX_GPIO_Init+0x1ac>)
 8010dc8:	f003 fe3a 	bl	8014a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8010dcc:	2200      	movs	r2, #0
 8010dce:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8010dd2:	4832      	ldr	r0, [pc, #200]	@ (8010e9c <MX_GPIO_Init+0x1b0>)
 8010dd4:	f003 fe34 	bl	8014a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin_Pin */
  GPIO_InitStruct.Pin = LED_Pin_Pin;
 8010dd8:	2308      	movs	r3, #8
 8010dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010ddc:	2301      	movs	r3, #1
 8010dde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010de0:	2301      	movs	r3, #1
 8010de2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010de4:	2303      	movs	r3, #3
 8010de6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_Pin_GPIO_Port, &GPIO_InitStruct);
 8010de8:	f107 031c 	add.w	r3, r7, #28
 8010dec:	4619      	mov	r1, r3
 8010dee:	4829      	ldr	r0, [pc, #164]	@ (8010e94 <MX_GPIO_Init+0x1a8>)
 8010df0:	f003 fc76 	bl	80146e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_1_Pin */
  GPIO_InitStruct.Pin = button_1_Pin;
 8010df4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8010dfa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8010dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8010e00:	2302      	movs	r3, #2
 8010e02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(button_1_GPIO_Port, &GPIO_InitStruct);
 8010e04:	f107 031c 	add.w	r3, r7, #28
 8010e08:	4619      	mov	r1, r3
 8010e0a:	4824      	ldr	r0, [pc, #144]	@ (8010e9c <MX_GPIO_Init+0x1b0>)
 8010e0c:	f003 fc68 	bl	80146e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8010e10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010e16:	2301      	movs	r3, #1
 8010e18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e1e:	2303      	movs	r3, #3
 8010e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010e22:	f107 031c 	add.w	r3, r7, #28
 8010e26:	4619      	mov	r1, r3
 8010e28:	481b      	ldr	r0, [pc, #108]	@ (8010e98 <MX_GPIO_Init+0x1ac>)
 8010e2a:	f003 fc59 	bl	80146e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8010e2e:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8010e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010e34:	2301      	movs	r3, #1
 8010e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e3c:	2303      	movs	r3, #3
 8010e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010e40:	f107 031c 	add.w	r3, r7, #28
 8010e44:	4619      	mov	r1, r3
 8010e46:	4815      	ldr	r0, [pc, #84]	@ (8010e9c <MX_GPIO_Init+0x1b0>)
 8010e48:	f003 fc4a 	bl	80146e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8010e4c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8010e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8010e52:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8010e56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010e58:	2301      	movs	r3, #1
 8010e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010e5c:	f107 031c 	add.w	r3, r7, #28
 8010e60:	4619      	mov	r1, r3
 8010e62:	480f      	ldr	r0, [pc, #60]	@ (8010ea0 <MX_GPIO_Init+0x1b4>)
 8010e64:	f003 fc3c 	bl	80146e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8010e68:	2200      	movs	r2, #0
 8010e6a:	2100      	movs	r1, #0
 8010e6c:	2017      	movs	r0, #23
 8010e6e:	f000 ffa1 	bl	8011db4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8010e72:	2017      	movs	r0, #23
 8010e74:	f000 ffb8 	bl	8011de8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8010e78:	2200      	movs	r2, #0
 8010e7a:	2100      	movs	r1, #0
 8010e7c:	2028      	movs	r0, #40	@ 0x28
 8010e7e:	f000 ff99 	bl	8011db4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8010e82:	2028      	movs	r0, #40	@ 0x28
 8010e84:	f000 ffb0 	bl	8011de8 <HAL_NVIC_EnableIRQ>

}
 8010e88:	bf00      	nop
 8010e8a:	3730      	adds	r7, #48	@ 0x30
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}
 8010e90:	58024400 	.word	0x58024400
 8010e94:	58021000 	.word	0x58021000
 8010e98:	58020c00 	.word	0x58020c00
 8010e9c:	58020800 	.word	0x58020800
 8010ea0:	58020000 	.word	0x58020000

08010ea4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8010ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8010f18 <MX_I2C1_Init+0x74>)
 8010eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8010f1c <MX_I2C1_Init+0x78>)
 8010eac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8010eae:	4b1a      	ldr	r3, [pc, #104]	@ (8010f18 <MX_I2C1_Init+0x74>)
 8010eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8010f20 <MX_I2C1_Init+0x7c>)
 8010eb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8010eb4:	4b18      	ldr	r3, [pc, #96]	@ (8010f18 <MX_I2C1_Init+0x74>)
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010eba:	4b17      	ldr	r3, [pc, #92]	@ (8010f18 <MX_I2C1_Init+0x74>)
 8010ebc:	2201      	movs	r2, #1
 8010ebe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010ec0:	4b15      	ldr	r3, [pc, #84]	@ (8010f18 <MX_I2C1_Init+0x74>)
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8010ec6:	4b14      	ldr	r3, [pc, #80]	@ (8010f18 <MX_I2C1_Init+0x74>)
 8010ec8:	2200      	movs	r2, #0
 8010eca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8010ecc:	4b12      	ldr	r3, [pc, #72]	@ (8010f18 <MX_I2C1_Init+0x74>)
 8010ece:	2200      	movs	r2, #0
 8010ed0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010ed2:	4b11      	ldr	r3, [pc, #68]	@ (8010f18 <MX_I2C1_Init+0x74>)
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8010ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8010f18 <MX_I2C1_Init+0x74>)
 8010eda:	2200      	movs	r2, #0
 8010edc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8010ede:	480e      	ldr	r0, [pc, #56]	@ (8010f18 <MX_I2C1_Init+0x74>)
 8010ee0:	f003 fde2 	bl	8014aa8 <HAL_I2C_Init>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d001      	beq.n	8010eee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8010eea:	f000 faf1 	bl	80114d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8010eee:	2100      	movs	r1, #0
 8010ef0:	4809      	ldr	r0, [pc, #36]	@ (8010f18 <MX_I2C1_Init+0x74>)
 8010ef2:	f003 fe75 	bl	8014be0 <HAL_I2CEx_ConfigAnalogFilter>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d001      	beq.n	8010f00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8010efc:	f000 fae8 	bl	80114d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8010f00:	2100      	movs	r1, #0
 8010f02:	4805      	ldr	r0, [pc, #20]	@ (8010f18 <MX_I2C1_Init+0x74>)
 8010f04:	f003 feb7 	bl	8014c76 <HAL_I2CEx_ConfigDigitalFilter>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d001      	beq.n	8010f12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8010f0e:	f000 fadf 	bl	80114d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8010f12:	bf00      	nop
 8010f14:	bd80      	pop	{r7, pc}
 8010f16:	bf00      	nop
 8010f18:	240313fc 	.word	0x240313fc
 8010f1c:	40005400 	.word	0x40005400
 8010f20:	307075b1 	.word	0x307075b1

08010f24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b0ba      	sub	sp, #232	@ 0xe8
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010f2c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010f30:	2200      	movs	r2, #0
 8010f32:	601a      	str	r2, [r3, #0]
 8010f34:	605a      	str	r2, [r3, #4]
 8010f36:	609a      	str	r2, [r3, #8]
 8010f38:	60da      	str	r2, [r3, #12]
 8010f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010f3c:	f107 0310 	add.w	r3, r7, #16
 8010f40:	22c0      	movs	r2, #192	@ 0xc0
 8010f42:	2100      	movs	r1, #0
 8010f44:	4618      	mov	r0, r3
 8010f46:	f022 ffa4 	bl	8033e92 <memset>
  if(i2cHandle->Instance==I2C1)
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	4a26      	ldr	r2, [pc, #152]	@ (8010fe8 <HAL_I2C_MspInit+0xc4>)
 8010f50:	4293      	cmp	r3, r2
 8010f52:	d145      	bne.n	8010fe0 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8010f54:	f04f 0208 	mov.w	r2, #8
 8010f58:	f04f 0300 	mov.w	r3, #0
 8010f5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8010f60:	2300      	movs	r3, #0
 8010f62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010f66:	f107 0310 	add.w	r3, r7, #16
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f005 f9ae 	bl	80162cc <HAL_RCCEx_PeriphCLKConfig>
 8010f70:	4603      	mov	r3, r0
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d001      	beq.n	8010f7a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8010f76:	f000 faab 	bl	80114d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8010fec <HAL_I2C_MspInit+0xc8>)
 8010f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010f80:	4a1a      	ldr	r2, [pc, #104]	@ (8010fec <HAL_I2C_MspInit+0xc8>)
 8010f82:	f043 0302 	orr.w	r3, r3, #2
 8010f86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010f8a:	4b18      	ldr	r3, [pc, #96]	@ (8010fec <HAL_I2C_MspInit+0xc8>)
 8010f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010f90:	f003 0302 	and.w	r3, r3, #2
 8010f94:	60fb      	str	r3, [r7, #12]
 8010f96:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8010f98:	23c0      	movs	r3, #192	@ 0xc0
 8010f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010f9e:	2312      	movs	r3, #18
 8010fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010faa:	2300      	movs	r3, #0
 8010fac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8010fb0:	2304      	movs	r3, #4
 8010fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010fb6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010fba:	4619      	mov	r1, r3
 8010fbc:	480c      	ldr	r0, [pc, #48]	@ (8010ff0 <HAL_I2C_MspInit+0xcc>)
 8010fbe:	f003 fb8f 	bl	80146e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8010fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8010fec <HAL_I2C_MspInit+0xc8>)
 8010fc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010fc8:	4a08      	ldr	r2, [pc, #32]	@ (8010fec <HAL_I2C_MspInit+0xc8>)
 8010fca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010fce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8010fd2:	4b06      	ldr	r3, [pc, #24]	@ (8010fec <HAL_I2C_MspInit+0xc8>)
 8010fd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010fdc:	60bb      	str	r3, [r7, #8]
 8010fde:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8010fe0:	bf00      	nop
 8010fe2:	37e8      	adds	r7, #232	@ 0xe8
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}
 8010fe8:	40005400 	.word	0x40005400
 8010fec:	58024400 	.word	0x58024400
 8010ff0:	58020400 	.word	0x58020400

08010ff4 <MX_I2S1_Init>:
I2S_HandleTypeDef hi2s1;
DMA_HandleTypeDef hdma_spi1_rx;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8010ff8:	4b17      	ldr	r3, [pc, #92]	@ (8011058 <MX_I2S1_Init+0x64>)
 8010ffa:	4a18      	ldr	r2, [pc, #96]	@ (801105c <MX_I2S1_Init+0x68>)
 8010ffc:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8010ffe:	4b16      	ldr	r3, [pc, #88]	@ (8011058 <MX_I2S1_Init+0x64>)
 8011000:	220a      	movs	r2, #10
 8011002:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8011004:	4b14      	ldr	r3, [pc, #80]	@ (8011058 <MX_I2S1_Init+0x64>)
 8011006:	2200      	movs	r2, #0
 8011008:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 801100a:	4b13      	ldr	r3, [pc, #76]	@ (8011058 <MX_I2S1_Init+0x64>)
 801100c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011010:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8011012:	4b11      	ldr	r3, [pc, #68]	@ (8011058 <MX_I2S1_Init+0x64>)
 8011014:	2200      	movs	r2, #0
 8011016:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8011018:	4b0f      	ldr	r3, [pc, #60]	@ (8011058 <MX_I2S1_Init+0x64>)
 801101a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 801101e:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8011020:	4b0d      	ldr	r3, [pc, #52]	@ (8011058 <MX_I2S1_Init+0x64>)
 8011022:	2200      	movs	r2, #0
 8011024:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8011026:	4b0c      	ldr	r3, [pc, #48]	@ (8011058 <MX_I2S1_Init+0x64>)
 8011028:	2200      	movs	r2, #0
 801102a:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_ENABLE;
 801102c:	4b0a      	ldr	r3, [pc, #40]	@ (8011058 <MX_I2S1_Init+0x64>)
 801102e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8011032:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_LEFT;
 8011034:	4b08      	ldr	r3, [pc, #32]	@ (8011058 <MX_I2S1_Init+0x64>)
 8011036:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 801103a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 801103c:	4b06      	ldr	r3, [pc, #24]	@ (8011058 <MX_I2S1_Init+0x64>)
 801103e:	2200      	movs	r2, #0
 8011040:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8011042:	4805      	ldr	r0, [pc, #20]	@ (8011058 <MX_I2S1_Init+0x64>)
 8011044:	f003 fe64 	bl	8014d10 <HAL_I2S_Init>
 8011048:	4603      	mov	r3, r0
 801104a:	2b00      	cmp	r3, #0
 801104c:	d001      	beq.n	8011052 <MX_I2S1_Init+0x5e>
  {
    Error_Handler();
 801104e:	f000 fa3f 	bl	80114d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8011052:	bf00      	nop
 8011054:	bd80      	pop	{r7, pc}
 8011056:	bf00      	nop
 8011058:	24031450 	.word	0x24031450
 801105c:	40013000 	.word	0x40013000

08011060 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b0ba      	sub	sp, #232	@ 0xe8
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011068:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801106c:	2200      	movs	r2, #0
 801106e:	601a      	str	r2, [r3, #0]
 8011070:	605a      	str	r2, [r3, #4]
 8011072:	609a      	str	r2, [r3, #8]
 8011074:	60da      	str	r2, [r3, #12]
 8011076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011078:	f107 0310 	add.w	r3, r7, #16
 801107c:	22c0      	movs	r2, #192	@ 0xc0
 801107e:	2100      	movs	r1, #0
 8011080:	4618      	mov	r0, r3
 8011082:	f022 ff06 	bl	8033e92 <memset>
  if(i2sHandle->Instance==SPI1)
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	4a5c      	ldr	r2, [pc, #368]	@ (80111fc <HAL_I2S_MspInit+0x19c>)
 801108c:	4293      	cmp	r3, r2
 801108e:	f040 80b0 	bne.w	80111f2 <HAL_I2S_MspInit+0x192>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8011092:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8011096:	f04f 0300 	mov.w	r3, #0
 801109a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 801109e:	2305      	movs	r3, #5
 80110a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 80;
 80110a2:	2350      	movs	r3, #80	@ 0x50
 80110a4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80110a6:	2302      	movs	r3, #2
 80110a8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80110aa:	2302      	movs	r3, #2
 80110ac:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80110ae:	2302      	movs	r3, #2
 80110b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80110b2:	2380      	movs	r3, #128	@ 0x80
 80110b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80110b6:	2300      	movs	r3, #0
 80110b8:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80110ba:	2300      	movs	r3, #0
 80110bc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80110be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80110c2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80110c4:	f107 0310 	add.w	r3, r7, #16
 80110c8:	4618      	mov	r0, r3
 80110ca:	f005 f8ff 	bl	80162cc <HAL_RCCEx_PeriphCLKConfig>
 80110ce:	4603      	mov	r3, r0
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d001      	beq.n	80110d8 <HAL_I2S_MspInit+0x78>
    {
      Error_Handler();
 80110d4:	f000 f9fc 	bl	80114d0 <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80110d8:	4b49      	ldr	r3, [pc, #292]	@ (8011200 <HAL_I2S_MspInit+0x1a0>)
 80110da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80110de:	4a48      	ldr	r2, [pc, #288]	@ (8011200 <HAL_I2S_MspInit+0x1a0>)
 80110e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80110e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80110e8:	4b45      	ldr	r3, [pc, #276]	@ (8011200 <HAL_I2S_MspInit+0x1a0>)
 80110ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80110ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80110f2:	60fb      	str	r3, [r7, #12]
 80110f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80110f6:	4b42      	ldr	r3, [pc, #264]	@ (8011200 <HAL_I2S_MspInit+0x1a0>)
 80110f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80110fc:	4a40      	ldr	r2, [pc, #256]	@ (8011200 <HAL_I2S_MspInit+0x1a0>)
 80110fe:	f043 0301 	orr.w	r3, r3, #1
 8011102:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011106:	4b3e      	ldr	r3, [pc, #248]	@ (8011200 <HAL_I2S_MspInit+0x1a0>)
 8011108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801110c:	f003 0301 	and.w	r3, r3, #1
 8011110:	60bb      	str	r3, [r7, #8]
 8011112:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    PA7     ------> I2S1_SDO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8011114:	2330      	movs	r3, #48	@ 0x30
 8011116:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801111a:	2302      	movs	r3, #2
 801111c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011120:	2300      	movs	r3, #0
 8011122:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011126:	2303      	movs	r3, #3
 8011128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801112c:	2305      	movs	r3, #5
 801112e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011132:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011136:	4619      	mov	r1, r3
 8011138:	4832      	ldr	r0, [pc, #200]	@ (8011204 <HAL_I2S_MspInit+0x1a4>)
 801113a:	f003 fad1 	bl	80146e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 801113e:	2340      	movs	r3, #64	@ 0x40
 8011140:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011144:	2302      	movs	r3, #2
 8011146:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801114a:	2302      	movs	r3, #2
 801114c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011150:	2303      	movs	r3, #3
 8011152:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8011156:	2305      	movs	r3, #5
 8011158:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801115c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011160:	4619      	mov	r1, r3
 8011162:	4828      	ldr	r0, [pc, #160]	@ (8011204 <HAL_I2S_MspInit+0x1a4>)
 8011164:	f003 fabc 	bl	80146e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8011168:	2380      	movs	r3, #128	@ 0x80
 801116a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801116e:	2302      	movs	r3, #2
 8011170:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011174:	2300      	movs	r3, #0
 8011176:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801117a:	2300      	movs	r3, #0
 801117c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8011180:	2305      	movs	r3, #5
 8011182:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011186:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801118a:	4619      	mov	r1, r3
 801118c:	481d      	ldr	r0, [pc, #116]	@ (8011204 <HAL_I2S_MspInit+0x1a4>)
 801118e:	f003 faa7 	bl	80146e0 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8011192:	4b1d      	ldr	r3, [pc, #116]	@ (8011208 <HAL_I2S_MspInit+0x1a8>)
 8011194:	4a1d      	ldr	r2, [pc, #116]	@ (801120c <HAL_I2S_MspInit+0x1ac>)
 8011196:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8011198:	4b1b      	ldr	r3, [pc, #108]	@ (8011208 <HAL_I2S_MspInit+0x1a8>)
 801119a:	2225      	movs	r2, #37	@ 0x25
 801119c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801119e:	4b1a      	ldr	r3, [pc, #104]	@ (8011208 <HAL_I2S_MspInit+0x1a8>)
 80111a0:	2200      	movs	r2, #0
 80111a2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80111a4:	4b18      	ldr	r3, [pc, #96]	@ (8011208 <HAL_I2S_MspInit+0x1a8>)
 80111a6:	2200      	movs	r2, #0
 80111a8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80111aa:	4b17      	ldr	r3, [pc, #92]	@ (8011208 <HAL_I2S_MspInit+0x1a8>)
 80111ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80111b0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80111b2:	4b15      	ldr	r3, [pc, #84]	@ (8011208 <HAL_I2S_MspInit+0x1a8>)
 80111b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80111b8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80111ba:	4b13      	ldr	r3, [pc, #76]	@ (8011208 <HAL_I2S_MspInit+0x1a8>)
 80111bc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80111c0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80111c2:	4b11      	ldr	r3, [pc, #68]	@ (8011208 <HAL_I2S_MspInit+0x1a8>)
 80111c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80111c8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80111ca:	4b0f      	ldr	r3, [pc, #60]	@ (8011208 <HAL_I2S_MspInit+0x1a8>)
 80111cc:	2200      	movs	r2, #0
 80111ce:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80111d0:	4b0d      	ldr	r3, [pc, #52]	@ (8011208 <HAL_I2S_MspInit+0x1a8>)
 80111d2:	2200      	movs	r2, #0
 80111d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80111d6:	480c      	ldr	r0, [pc, #48]	@ (8011208 <HAL_I2S_MspInit+0x1a8>)
 80111d8:	f000 fe8c 	bl	8011ef4 <HAL_DMA_Init>
 80111dc:	4603      	mov	r3, r0
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d001      	beq.n	80111e6 <HAL_I2S_MspInit+0x186>
    {
      Error_Handler();
 80111e2:	f000 f975 	bl	80114d0 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi1_rx);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	4a07      	ldr	r2, [pc, #28]	@ (8011208 <HAL_I2S_MspInit+0x1a8>)
 80111ea:	649a      	str	r2, [r3, #72]	@ 0x48
 80111ec:	4a06      	ldr	r2, [pc, #24]	@ (8011208 <HAL_I2S_MspInit+0x1a8>)
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80111f2:	bf00      	nop
 80111f4:	37e8      	adds	r7, #232	@ 0xe8
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}
 80111fa:	bf00      	nop
 80111fc:	40013000 	.word	0x40013000
 8011200:	58024400 	.word	0x58024400
 8011204:	58020000 	.word	0x58020000
 8011208:	240314a4 	.word	0x240314a4
 801120c:	40020010 	.word	0x40020010

08011210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8011210:	b580      	push	{r7, lr}
 8011212:	b084      	sub	sp, #16
 8011214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8011216:	f000 f91d 	bl	8011454 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 801121a:	4b4a      	ldr	r3, [pc, #296]	@ (8011344 <main+0x134>)
 801121c:	695b      	ldr	r3, [r3, #20]
 801121e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011222:	2b00      	cmp	r3, #0
 8011224:	d11b      	bne.n	801125e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8011226:	f3bf 8f4f 	dsb	sy
}
 801122a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801122c:	f3bf 8f6f 	isb	sy
}
 8011230:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8011232:	4b44      	ldr	r3, [pc, #272]	@ (8011344 <main+0x134>)
 8011234:	2200      	movs	r2, #0
 8011236:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 801123a:	f3bf 8f4f 	dsb	sy
}
 801123e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011240:	f3bf 8f6f 	isb	sy
}
 8011244:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8011246:	4b3f      	ldr	r3, [pc, #252]	@ (8011344 <main+0x134>)
 8011248:	695b      	ldr	r3, [r3, #20]
 801124a:	4a3e      	ldr	r2, [pc, #248]	@ (8011344 <main+0x134>)
 801124c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011250:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8011252:	f3bf 8f4f 	dsb	sy
}
 8011256:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011258:	f3bf 8f6f 	isb	sy
}
 801125c:	e000      	b.n	8011260 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 801125e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8011260:	4b38      	ldr	r3, [pc, #224]	@ (8011344 <main+0x134>)
 8011262:	695b      	ldr	r3, [r3, #20]
 8011264:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011268:	2b00      	cmp	r3, #0
 801126a:	d138      	bne.n	80112de <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 801126c:	4b35      	ldr	r3, [pc, #212]	@ (8011344 <main+0x134>)
 801126e:	2200      	movs	r2, #0
 8011270:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8011274:	f3bf 8f4f 	dsb	sy
}
 8011278:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 801127a:	4b32      	ldr	r3, [pc, #200]	@ (8011344 <main+0x134>)
 801127c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011280:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	0b5b      	lsrs	r3, r3, #13
 8011286:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801128a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	08db      	lsrs	r3, r3, #3
 8011290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011294:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8011296:	68bb      	ldr	r3, [r7, #8]
 8011298:	015a      	lsls	r2, r3, #5
 801129a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 801129e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80112a0:	687a      	ldr	r2, [r7, #4]
 80112a2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80112a4:	4927      	ldr	r1, [pc, #156]	@ (8011344 <main+0x134>)
 80112a6:	4313      	orrs	r3, r2
 80112a8:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	1e5a      	subs	r2, r3, #1
 80112b0:	607a      	str	r2, [r7, #4]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d1ef      	bne.n	8011296 <main+0x86>
    } while(sets-- != 0U);
 80112b6:	68bb      	ldr	r3, [r7, #8]
 80112b8:	1e5a      	subs	r2, r3, #1
 80112ba:	60ba      	str	r2, [r7, #8]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d1e5      	bne.n	801128c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80112c0:	f3bf 8f4f 	dsb	sy
}
 80112c4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80112c6:	4b1f      	ldr	r3, [pc, #124]	@ (8011344 <main+0x134>)
 80112c8:	695b      	ldr	r3, [r3, #20]
 80112ca:	4a1e      	ldr	r2, [pc, #120]	@ (8011344 <main+0x134>)
 80112cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80112d0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80112d2:	f3bf 8f4f 	dsb	sy
}
 80112d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80112d8:	f3bf 8f6f 	isb	sy
}
 80112dc:	e000      	b.n	80112e0 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80112de:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80112e0:	f000 fc0c 	bl	8011afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80112e4:	f000 f83a 	bl	801135c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80112e8:	f7ff fd00 	bl	8010cec <MX_GPIO_Init>
  MX_DMA_Init();
 80112ec:	f7ff fcde 	bl	8010cac <MX_DMA_Init>
  MX_RTC_Init();
 80112f0:	f000 f8f4 	bl	80114dc <MX_RTC_Init>
  MX_I2S1_Init();
 80112f4:	f7ff fe7e 	bl	8010ff4 <MX_I2S1_Init>
  MX_I2C1_Init();
 80112f8:	f7ff fdd4 	bl	8010ea4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80112fc:	f000 fb1c 	bl	8011938 <MX_USART1_UART_Init>
  MX_X_CUBE_AI_Init();
 8011300:	f00d fbb2 	bl	801ea68 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  AudioCapture_Init();
 8011304:	f7ff fbc2 	bl	8010a8c <AudioCapture_Init>
  SEGGER_RTT_Init();
 8011308:	f009 fc88 	bl	801ac1c <SEGGER_RTT_Init>
  SEGGER_RTT_printf(0, "Test\n");
 801130c:	490e      	ldr	r1, [pc, #56]	@ (8011348 <main+0x138>)
 801130e:	2000      	movs	r0, #0
 8011310:	f00a f82c 	bl	801b36c <SEGGER_RTT_printf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(captureDoneFlag)
 8011314:	4b0d      	ldr	r3, [pc, #52]	@ (801134c <main+0x13c>)
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	b2db      	uxtb	r3, r3
 801131a:	2b00      	cmp	r3, #0
 801131c:	d00e      	beq.n	801133c <main+0x12c>
	  {
		  captureDoneFlag = 0;  // 清除标志
 801131e:	4b0b      	ldr	r3, [pc, #44]	@ (801134c <main+0x13c>)
 8011320:	2200      	movs	r2, #0
 8011322:	701a      	strb	r2, [r3, #0]

	       /* 处理音频数据 */
		  ProcessAudio(audioBuffer, AUDIO_BUFFER_SAMPLES);
 8011324:	f64b 3180 	movw	r1, #48000	@ 0xbb80
 8011328:	4809      	ldr	r0, [pc, #36]	@ (8011350 <main+0x140>)
 801132a:	f7ff fc9b 	bl	8010c64 <ProcessAudio>

	       /* 恢复空闲状态，等待下一次按键 */
	       audioState = AUDIO_STATE_IDLE;
 801132e:	4b09      	ldr	r3, [pc, #36]	@ (8011354 <main+0x144>)
 8011330:	2200      	movs	r2, #0
 8011332:	701a      	strb	r2, [r3, #0]

	       SEGGER_RTT_printf(0, "Ready for next capture. Press button again.\r\n");
 8011334:	4908      	ldr	r1, [pc, #32]	@ (8011358 <main+0x148>)
 8011336:	2000      	movs	r0, #0
 8011338:	f00a f818 	bl	801b36c <SEGGER_RTT_printf>
	     }
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 801133c:	f00d fb9c 	bl	801ea78 <MX_X_CUBE_AI_Process>
	  if(captureDoneFlag)
 8011340:	e7e8      	b.n	8011314 <main+0x104>
 8011342:	bf00      	nop
 8011344:	e000ed00 	.word	0xe000ed00
 8011348:	08037790 	.word	0x08037790
 801134c:	240313f4 	.word	0x240313f4
 8011350:	240025ec 	.word	0x240025ec
 8011354:	240313ec 	.word	0x240313ec
 8011358:	08037798 	.word	0x08037798

0801135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b09c      	sub	sp, #112	@ 0x70
 8011360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011362:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011366:	224c      	movs	r2, #76	@ 0x4c
 8011368:	2100      	movs	r1, #0
 801136a:	4618      	mov	r0, r3
 801136c:	f022 fd91 	bl	8033e92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011370:	1d3b      	adds	r3, r7, #4
 8011372:	2220      	movs	r2, #32
 8011374:	2100      	movs	r1, #0
 8011376:	4618      	mov	r0, r3
 8011378:	f022 fd8b 	bl	8033e92 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 801137c:	2002      	movs	r0, #2
 801137e:	f003 ff43 	bl	8015208 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8011382:	2300      	movs	r3, #0
 8011384:	603b      	str	r3, [r7, #0]
 8011386:	4b31      	ldr	r3, [pc, #196]	@ (801144c <SystemClock_Config+0xf0>)
 8011388:	699b      	ldr	r3, [r3, #24]
 801138a:	4a30      	ldr	r2, [pc, #192]	@ (801144c <SystemClock_Config+0xf0>)
 801138c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011390:	6193      	str	r3, [r2, #24]
 8011392:	4b2e      	ldr	r3, [pc, #184]	@ (801144c <SystemClock_Config+0xf0>)
 8011394:	699b      	ldr	r3, [r3, #24]
 8011396:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801139a:	603b      	str	r3, [r7, #0]
 801139c:	4b2c      	ldr	r3, [pc, #176]	@ (8011450 <SystemClock_Config+0xf4>)
 801139e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113a0:	4a2b      	ldr	r2, [pc, #172]	@ (8011450 <SystemClock_Config+0xf4>)
 80113a2:	f043 0301 	orr.w	r3, r3, #1
 80113a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80113a8:	4b29      	ldr	r3, [pc, #164]	@ (8011450 <SystemClock_Config+0xf4>)
 80113aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113ac:	f003 0301 	and.w	r3, r3, #1
 80113b0:	603b      	str	r3, [r7, #0]
 80113b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80113b4:	bf00      	nop
 80113b6:	4b25      	ldr	r3, [pc, #148]	@ (801144c <SystemClock_Config+0xf0>)
 80113b8:	699b      	ldr	r3, [r3, #24]
 80113ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80113be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80113c2:	d1f8      	bne.n	80113b6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80113c4:	2309      	movs	r3, #9
 80113c6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80113c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80113cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80113ce:	2301      	movs	r3, #1
 80113d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80113d2:	2302      	movs	r3, #2
 80113d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80113d6:	2302      	movs	r3, #2
 80113d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80113da:	2305      	movs	r3, #5
 80113dc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 80113de:	23c0      	movs	r3, #192	@ 0xc0
 80113e0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80113e2:	2302      	movs	r3, #2
 80113e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80113e6:	2314      	movs	r3, #20
 80113e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80113ea:	2302      	movs	r3, #2
 80113ec:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80113ee:	2308      	movs	r3, #8
 80113f0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80113f2:	2300      	movs	r3, #0
 80113f4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80113f6:	2300      	movs	r3, #0
 80113f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80113fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80113fe:	4618      	mov	r0, r3
 8011400:	f003 ff3c 	bl	801527c <HAL_RCC_OscConfig>
 8011404:	4603      	mov	r3, r0
 8011406:	2b00      	cmp	r3, #0
 8011408:	d001      	beq.n	801140e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 801140a:	f000 f861 	bl	80114d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801140e:	233f      	movs	r3, #63	@ 0x3f
 8011410:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8011412:	2303      	movs	r3, #3
 8011414:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8011416:	2300      	movs	r3, #0
 8011418:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 801141a:	2308      	movs	r3, #8
 801141c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 801141e:	2340      	movs	r3, #64	@ 0x40
 8011420:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8011422:	2340      	movs	r3, #64	@ 0x40
 8011424:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8011426:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801142a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 801142c:	2340      	movs	r3, #64	@ 0x40
 801142e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8011430:	1d3b      	adds	r3, r7, #4
 8011432:	2104      	movs	r1, #4
 8011434:	4618      	mov	r0, r3
 8011436:	f004 fb7b 	bl	8015b30 <HAL_RCC_ClockConfig>
 801143a:	4603      	mov	r3, r0
 801143c:	2b00      	cmp	r3, #0
 801143e:	d001      	beq.n	8011444 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8011440:	f000 f846 	bl	80114d0 <Error_Handler>
  }
}
 8011444:	bf00      	nop
 8011446:	3770      	adds	r7, #112	@ 0x70
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}
 801144c:	58024800 	.word	0x58024800
 8011450:	58000400 	.word	0x58000400

08011454 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b084      	sub	sp, #16
 8011458:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 801145a:	463b      	mov	r3, r7
 801145c:	2200      	movs	r2, #0
 801145e:	601a      	str	r2, [r3, #0]
 8011460:	605a      	str	r2, [r3, #4]
 8011462:	609a      	str	r2, [r3, #8]
 8011464:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8011466:	f000 fccd 	bl	8011e04 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 801146a:	2301      	movs	r3, #1
 801146c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 801146e:	2300      	movs	r3, #0
 8011470:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8011472:	2300      	movs	r3, #0
 8011474:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8011476:	231f      	movs	r3, #31
 8011478:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 801147a:	2387      	movs	r3, #135	@ 0x87
 801147c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 801147e:	2300      	movs	r3, #0
 8011480:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8011482:	2300      	movs	r3, #0
 8011484:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8011486:	2301      	movs	r3, #1
 8011488:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 801148a:	2301      	movs	r3, #1
 801148c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 801148e:	2300      	movs	r3, #0
 8011490:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8011492:	2300      	movs	r3, #0
 8011494:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8011496:	463b      	mov	r3, r7
 8011498:	4618      	mov	r0, r3
 801149a:	f000 fceb 	bl	8011e74 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 801149e:	2004      	movs	r0, #4
 80114a0:	f000 fcc8 	bl	8011e34 <HAL_MPU_Enable>

}
 80114a4:	bf00      	nop
 80114a6:	3710      	adds	r7, #16
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}

080114ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b082      	sub	sp, #8
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	4a04      	ldr	r2, [pc, #16]	@ (80114cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80114ba:	4293      	cmp	r3, r2
 80114bc:	d101      	bne.n	80114c2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80114be:	f000 fb59 	bl	8011b74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80114c2:	bf00      	nop
 80114c4:	3708      	adds	r7, #8
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}
 80114ca:	bf00      	nop
 80114cc:	40001000 	.word	0x40001000

080114d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80114d0:	b480      	push	{r7}
 80114d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80114d4:	b672      	cpsid	i
}
 80114d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80114d8:	bf00      	nop
 80114da:	e7fd      	b.n	80114d8 <Error_Handler+0x8>

080114dc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80114e0:	4b10      	ldr	r3, [pc, #64]	@ (8011524 <MX_RTC_Init+0x48>)
 80114e2:	4a11      	ldr	r2, [pc, #68]	@ (8011528 <MX_RTC_Init+0x4c>)
 80114e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80114e6:	4b0f      	ldr	r3, [pc, #60]	@ (8011524 <MX_RTC_Init+0x48>)
 80114e8:	2200      	movs	r2, #0
 80114ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80114ec:	4b0d      	ldr	r3, [pc, #52]	@ (8011524 <MX_RTC_Init+0x48>)
 80114ee:	227f      	movs	r2, #127	@ 0x7f
 80114f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80114f2:	4b0c      	ldr	r3, [pc, #48]	@ (8011524 <MX_RTC_Init+0x48>)
 80114f4:	22ff      	movs	r2, #255	@ 0xff
 80114f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80114f8:	4b0a      	ldr	r3, [pc, #40]	@ (8011524 <MX_RTC_Init+0x48>)
 80114fa:	2200      	movs	r2, #0
 80114fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80114fe:	4b09      	ldr	r3, [pc, #36]	@ (8011524 <MX_RTC_Init+0x48>)
 8011500:	2200      	movs	r2, #0
 8011502:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8011504:	4b07      	ldr	r3, [pc, #28]	@ (8011524 <MX_RTC_Init+0x48>)
 8011506:	2200      	movs	r2, #0
 8011508:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 801150a:	4b06      	ldr	r3, [pc, #24]	@ (8011524 <MX_RTC_Init+0x48>)
 801150c:	2200      	movs	r2, #0
 801150e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8011510:	4804      	ldr	r0, [pc, #16]	@ (8011524 <MX_RTC_Init+0x48>)
 8011512:	f007 fbd9 	bl	8018cc8 <HAL_RTC_Init>
 8011516:	4603      	mov	r3, r0
 8011518:	2b00      	cmp	r3, #0
 801151a:	d001      	beq.n	8011520 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 801151c:	f7ff ffd8 	bl	80114d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8011520:	bf00      	nop
 8011522:	bd80      	pop	{r7, pc}
 8011524:	2403151c 	.word	0x2403151c
 8011528:	58004000 	.word	0x58004000

0801152c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b0b2      	sub	sp, #200	@ 0xc8
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011534:	f107 0308 	add.w	r3, r7, #8
 8011538:	22c0      	movs	r2, #192	@ 0xc0
 801153a:	2100      	movs	r1, #0
 801153c:	4618      	mov	r0, r3
 801153e:	f022 fca8 	bl	8033e92 <memset>
  if(rtcHandle->Instance==RTC)
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	4a10      	ldr	r2, [pc, #64]	@ (8011588 <HAL_RTC_MspInit+0x5c>)
 8011548:	4293      	cmp	r3, r2
 801154a:	d119      	bne.n	8011580 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 801154c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8011550:	f04f 0300 	mov.w	r3, #0
 8011554:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8011558:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801155c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011560:	f107 0308 	add.w	r3, r7, #8
 8011564:	4618      	mov	r0, r3
 8011566:	f004 feb1 	bl	80162cc <HAL_RCCEx_PeriphCLKConfig>
 801156a:	4603      	mov	r3, r0
 801156c:	2b00      	cmp	r3, #0
 801156e:	d001      	beq.n	8011574 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8011570:	f7ff ffae 	bl	80114d0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8011574:	4b05      	ldr	r3, [pc, #20]	@ (801158c <HAL_RTC_MspInit+0x60>)
 8011576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011578:	4a04      	ldr	r2, [pc, #16]	@ (801158c <HAL_RTC_MspInit+0x60>)
 801157a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801157e:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8011580:	bf00      	nop
 8011582:	37c8      	adds	r7, #200	@ 0xc8
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}
 8011588:	58004000 	.word	0x58004000
 801158c:	58024400 	.word	0x58024400

08011590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011590:	b480      	push	{r7}
 8011592:	b083      	sub	sp, #12
 8011594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011596:	4b0a      	ldr	r3, [pc, #40]	@ (80115c0 <HAL_MspInit+0x30>)
 8011598:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801159c:	4a08      	ldr	r2, [pc, #32]	@ (80115c0 <HAL_MspInit+0x30>)
 801159e:	f043 0302 	orr.w	r3, r3, #2
 80115a2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80115a6:	4b06      	ldr	r3, [pc, #24]	@ (80115c0 <HAL_MspInit+0x30>)
 80115a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80115ac:	f003 0302 	and.w	r3, r3, #2
 80115b0:	607b      	str	r3, [r7, #4]
 80115b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80115b4:	bf00      	nop
 80115b6:	370c      	adds	r7, #12
 80115b8:	46bd      	mov	sp, r7
 80115ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115be:	4770      	bx	lr
 80115c0:	58024400 	.word	0x58024400

080115c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b090      	sub	sp, #64	@ 0x40
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2b0f      	cmp	r3, #15
 80115d0:	d827      	bhi.n	8011622 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80115d2:	2200      	movs	r2, #0
 80115d4:	6879      	ldr	r1, [r7, #4]
 80115d6:	2036      	movs	r0, #54	@ 0x36
 80115d8:	f000 fbec 	bl	8011db4 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80115dc:	2036      	movs	r0, #54	@ 0x36
 80115de:	f000 fc03 	bl	8011de8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80115e2:	4a29      	ldr	r2, [pc, #164]	@ (8011688 <HAL_InitTick+0xc4>)
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80115e8:	4b28      	ldr	r3, [pc, #160]	@ (801168c <HAL_InitTick+0xc8>)
 80115ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80115ee:	4a27      	ldr	r2, [pc, #156]	@ (801168c <HAL_InitTick+0xc8>)
 80115f0:	f043 0310 	orr.w	r3, r3, #16
 80115f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80115f8:	4b24      	ldr	r3, [pc, #144]	@ (801168c <HAL_InitTick+0xc8>)
 80115fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80115fe:	f003 0310 	and.w	r3, r3, #16
 8011602:	60fb      	str	r3, [r7, #12]
 8011604:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8011606:	f107 0210 	add.w	r2, r7, #16
 801160a:	f107 0314 	add.w	r3, r7, #20
 801160e:	4611      	mov	r1, r2
 8011610:	4618      	mov	r0, r3
 8011612:	f004 fe19 	bl	8016248 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8011616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011618:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 801161a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801161c:	2b00      	cmp	r3, #0
 801161e:	d106      	bne.n	801162e <HAL_InitTick+0x6a>
 8011620:	e001      	b.n	8011626 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8011622:	2301      	movs	r3, #1
 8011624:	e02b      	b.n	801167e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8011626:	f004 fde3 	bl	80161f0 <HAL_RCC_GetPCLK1Freq>
 801162a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801162c:	e004      	b.n	8011638 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 801162e:	f004 fddf 	bl	80161f0 <HAL_RCC_GetPCLK1Freq>
 8011632:	4603      	mov	r3, r0
 8011634:	005b      	lsls	r3, r3, #1
 8011636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8011638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801163a:	4a15      	ldr	r2, [pc, #84]	@ (8011690 <HAL_InitTick+0xcc>)
 801163c:	fba2 2303 	umull	r2, r3, r2, r3
 8011640:	0c9b      	lsrs	r3, r3, #18
 8011642:	3b01      	subs	r3, #1
 8011644:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8011646:	4b13      	ldr	r3, [pc, #76]	@ (8011694 <HAL_InitTick+0xd0>)
 8011648:	4a13      	ldr	r2, [pc, #76]	@ (8011698 <HAL_InitTick+0xd4>)
 801164a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 801164c:	4b11      	ldr	r3, [pc, #68]	@ (8011694 <HAL_InitTick+0xd0>)
 801164e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8011652:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8011654:	4a0f      	ldr	r2, [pc, #60]	@ (8011694 <HAL_InitTick+0xd0>)
 8011656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011658:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 801165a:	4b0e      	ldr	r3, [pc, #56]	@ (8011694 <HAL_InitTick+0xd0>)
 801165c:	2200      	movs	r2, #0
 801165e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011660:	4b0c      	ldr	r3, [pc, #48]	@ (8011694 <HAL_InitTick+0xd0>)
 8011662:	2200      	movs	r2, #0
 8011664:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8011666:	480b      	ldr	r0, [pc, #44]	@ (8011694 <HAL_InitTick+0xd0>)
 8011668:	f007 fc46 	bl	8018ef8 <HAL_TIM_Base_Init>
 801166c:	4603      	mov	r3, r0
 801166e:	2b00      	cmp	r3, #0
 8011670:	d104      	bne.n	801167c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8011672:	4808      	ldr	r0, [pc, #32]	@ (8011694 <HAL_InitTick+0xd0>)
 8011674:	f007 fca2 	bl	8018fbc <HAL_TIM_Base_Start_IT>
 8011678:	4603      	mov	r3, r0
 801167a:	e000      	b.n	801167e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 801167c:	2301      	movs	r3, #1
}
 801167e:	4618      	mov	r0, r3
 8011680:	3740      	adds	r7, #64	@ 0x40
 8011682:	46bd      	mov	sp, r7
 8011684:	bd80      	pop	{r7, pc}
 8011686:	bf00      	nop
 8011688:	24000008 	.word	0x24000008
 801168c:	58024400 	.word	0x58024400
 8011690:	431bde83 	.word	0x431bde83
 8011694:	24031540 	.word	0x24031540
 8011698:	40001000 	.word	0x40001000

0801169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801169c:	b480      	push	{r7}
 801169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80116a0:	bf00      	nop
 80116a2:	e7fd      	b.n	80116a0 <NMI_Handler+0x4>

080116a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80116a4:	b480      	push	{r7}
 80116a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80116a8:	bf00      	nop
 80116aa:	e7fd      	b.n	80116a8 <HardFault_Handler+0x4>

080116ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80116ac:	b480      	push	{r7}
 80116ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80116b0:	bf00      	nop
 80116b2:	e7fd      	b.n	80116b0 <MemManage_Handler+0x4>

080116b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80116b4:	b480      	push	{r7}
 80116b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80116b8:	bf00      	nop
 80116ba:	e7fd      	b.n	80116b8 <BusFault_Handler+0x4>

080116bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80116bc:	b480      	push	{r7}
 80116be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80116c0:	bf00      	nop
 80116c2:	e7fd      	b.n	80116c0 <UsageFault_Handler+0x4>

080116c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80116c4:	b480      	push	{r7}
 80116c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80116c8:	bf00      	nop
 80116ca:	46bd      	mov	sp, r7
 80116cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d0:	4770      	bx	lr

080116d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80116d2:	b480      	push	{r7}
 80116d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80116d6:	bf00      	nop
 80116d8:	46bd      	mov	sp, r7
 80116da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116de:	4770      	bx	lr

080116e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80116e0:	b480      	push	{r7}
 80116e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80116e4:	bf00      	nop
 80116e6:	46bd      	mov	sp, r7
 80116e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ec:	4770      	bx	lr

080116ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80116ee:	b480      	push	{r7}
 80116f0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80116f2:	bf00      	nop
 80116f4:	46bd      	mov	sp, r7
 80116f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fa:	4770      	bx	lr

080116fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8011700:	4802      	ldr	r0, [pc, #8]	@ (801170c <DMA1_Stream0_IRQHandler+0x10>)
 8011702:	f001 fcdb 	bl	80130bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8011706:	bf00      	nop
 8011708:	bd80      	pop	{r7, pc}
 801170a:	bf00      	nop
 801170c:	240314a4 	.word	0x240314a4

08011710 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8011714:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8011718:	f003 f9ab 	bl	8014a72 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 801171c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8011720:	f003 f9a7 	bl	8014a72 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8011724:	bf00      	nop
 8011726:	bd80      	pop	{r7, pc}

08011728 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 801172c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8011730:	f003 f99f 	bl	8014a72 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8011734:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8011738:	f003 f99b 	bl	8014a72 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button_1_Pin);
 801173c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8011740:	f003 f997 	bl	8014a72 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8011744:	bf00      	nop
 8011746:	bd80      	pop	{r7, pc}

08011748 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 801174c:	4802      	ldr	r0, [pc, #8]	@ (8011758 <TIM6_DAC_IRQHandler+0x10>)
 801174e:	f007 fcad 	bl	80190ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8011752:	bf00      	nop
 8011754:	bd80      	pop	{r7, pc}
 8011756:	bf00      	nop
 8011758:	24031540 	.word	0x24031540

0801175c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b086      	sub	sp, #24
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8011764:	4a14      	ldr	r2, [pc, #80]	@ (80117b8 <_sbrk+0x5c>)
 8011766:	4b15      	ldr	r3, [pc, #84]	@ (80117bc <_sbrk+0x60>)
 8011768:	1ad3      	subs	r3, r2, r3
 801176a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801176c:	697b      	ldr	r3, [r7, #20]
 801176e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8011770:	4b13      	ldr	r3, [pc, #76]	@ (80117c0 <_sbrk+0x64>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d102      	bne.n	801177e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8011778:	4b11      	ldr	r3, [pc, #68]	@ (80117c0 <_sbrk+0x64>)
 801177a:	4a12      	ldr	r2, [pc, #72]	@ (80117c4 <_sbrk+0x68>)
 801177c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801177e:	4b10      	ldr	r3, [pc, #64]	@ (80117c0 <_sbrk+0x64>)
 8011780:	681a      	ldr	r2, [r3, #0]
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	4413      	add	r3, r2
 8011786:	693a      	ldr	r2, [r7, #16]
 8011788:	429a      	cmp	r2, r3
 801178a:	d207      	bcs.n	801179c <_sbrk+0x40>
  {
    errno = ENOMEM;
 801178c:	f022 fbf6 	bl	8033f7c <__errno>
 8011790:	4603      	mov	r3, r0
 8011792:	220c      	movs	r2, #12
 8011794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8011796:	f04f 33ff 	mov.w	r3, #4294967295
 801179a:	e009      	b.n	80117b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801179c:	4b08      	ldr	r3, [pc, #32]	@ (80117c0 <_sbrk+0x64>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80117a2:	4b07      	ldr	r3, [pc, #28]	@ (80117c0 <_sbrk+0x64>)
 80117a4:	681a      	ldr	r2, [r3, #0]
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	4413      	add	r3, r2
 80117aa:	4a05      	ldr	r2, [pc, #20]	@ (80117c0 <_sbrk+0x64>)
 80117ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80117ae:	68fb      	ldr	r3, [r7, #12]
}
 80117b0:	4618      	mov	r0, r3
 80117b2:	3718      	adds	r7, #24
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bd80      	pop	{r7, pc}
 80117b8:	24080000 	.word	0x24080000
 80117bc:	00000800 	.word	0x00000800
 80117c0:	2403158c 	.word	0x2403158c
 80117c4:	20000000 	.word	0x20000000

080117c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80117c8:	b480      	push	{r7}
 80117ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80117cc:	4b43      	ldr	r3, [pc, #268]	@ (80118dc <SystemInit+0x114>)
 80117ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80117d2:	4a42      	ldr	r2, [pc, #264]	@ (80118dc <SystemInit+0x114>)
 80117d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80117d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80117dc:	4b40      	ldr	r3, [pc, #256]	@ (80118e0 <SystemInit+0x118>)
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	f003 030f 	and.w	r3, r3, #15
 80117e4:	2b06      	cmp	r3, #6
 80117e6:	d807      	bhi.n	80117f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80117e8:	4b3d      	ldr	r3, [pc, #244]	@ (80118e0 <SystemInit+0x118>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	f023 030f 	bic.w	r3, r3, #15
 80117f0:	4a3b      	ldr	r2, [pc, #236]	@ (80118e0 <SystemInit+0x118>)
 80117f2:	f043 0307 	orr.w	r3, r3, #7
 80117f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80117f8:	4b3a      	ldr	r3, [pc, #232]	@ (80118e4 <SystemInit+0x11c>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	4a39      	ldr	r2, [pc, #228]	@ (80118e4 <SystemInit+0x11c>)
 80117fe:	f043 0301 	orr.w	r3, r3, #1
 8011802:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8011804:	4b37      	ldr	r3, [pc, #220]	@ (80118e4 <SystemInit+0x11c>)
 8011806:	2200      	movs	r2, #0
 8011808:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 801180a:	4b36      	ldr	r3, [pc, #216]	@ (80118e4 <SystemInit+0x11c>)
 801180c:	681a      	ldr	r2, [r3, #0]
 801180e:	4935      	ldr	r1, [pc, #212]	@ (80118e4 <SystemInit+0x11c>)
 8011810:	4b35      	ldr	r3, [pc, #212]	@ (80118e8 <SystemInit+0x120>)
 8011812:	4013      	ands	r3, r2
 8011814:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8011816:	4b32      	ldr	r3, [pc, #200]	@ (80118e0 <SystemInit+0x118>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	f003 0308 	and.w	r3, r3, #8
 801181e:	2b00      	cmp	r3, #0
 8011820:	d007      	beq.n	8011832 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8011822:	4b2f      	ldr	r3, [pc, #188]	@ (80118e0 <SystemInit+0x118>)
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	f023 030f 	bic.w	r3, r3, #15
 801182a:	4a2d      	ldr	r2, [pc, #180]	@ (80118e0 <SystemInit+0x118>)
 801182c:	f043 0307 	orr.w	r3, r3, #7
 8011830:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8011832:	4b2c      	ldr	r3, [pc, #176]	@ (80118e4 <SystemInit+0x11c>)
 8011834:	2200      	movs	r2, #0
 8011836:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8011838:	4b2a      	ldr	r3, [pc, #168]	@ (80118e4 <SystemInit+0x11c>)
 801183a:	2200      	movs	r2, #0
 801183c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 801183e:	4b29      	ldr	r3, [pc, #164]	@ (80118e4 <SystemInit+0x11c>)
 8011840:	2200      	movs	r2, #0
 8011842:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8011844:	4b27      	ldr	r3, [pc, #156]	@ (80118e4 <SystemInit+0x11c>)
 8011846:	4a29      	ldr	r2, [pc, #164]	@ (80118ec <SystemInit+0x124>)
 8011848:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 801184a:	4b26      	ldr	r3, [pc, #152]	@ (80118e4 <SystemInit+0x11c>)
 801184c:	4a28      	ldr	r2, [pc, #160]	@ (80118f0 <SystemInit+0x128>)
 801184e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8011850:	4b24      	ldr	r3, [pc, #144]	@ (80118e4 <SystemInit+0x11c>)
 8011852:	4a28      	ldr	r2, [pc, #160]	@ (80118f4 <SystemInit+0x12c>)
 8011854:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8011856:	4b23      	ldr	r3, [pc, #140]	@ (80118e4 <SystemInit+0x11c>)
 8011858:	2200      	movs	r2, #0
 801185a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 801185c:	4b21      	ldr	r3, [pc, #132]	@ (80118e4 <SystemInit+0x11c>)
 801185e:	4a25      	ldr	r2, [pc, #148]	@ (80118f4 <SystemInit+0x12c>)
 8011860:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8011862:	4b20      	ldr	r3, [pc, #128]	@ (80118e4 <SystemInit+0x11c>)
 8011864:	2200      	movs	r2, #0
 8011866:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8011868:	4b1e      	ldr	r3, [pc, #120]	@ (80118e4 <SystemInit+0x11c>)
 801186a:	4a22      	ldr	r2, [pc, #136]	@ (80118f4 <SystemInit+0x12c>)
 801186c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 801186e:	4b1d      	ldr	r3, [pc, #116]	@ (80118e4 <SystemInit+0x11c>)
 8011870:	2200      	movs	r2, #0
 8011872:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8011874:	4b1b      	ldr	r3, [pc, #108]	@ (80118e4 <SystemInit+0x11c>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	4a1a      	ldr	r2, [pc, #104]	@ (80118e4 <SystemInit+0x11c>)
 801187a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801187e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8011880:	4b18      	ldr	r3, [pc, #96]	@ (80118e4 <SystemInit+0x11c>)
 8011882:	2200      	movs	r2, #0
 8011884:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8011886:	4b1c      	ldr	r3, [pc, #112]	@ (80118f8 <SystemInit+0x130>)
 8011888:	681a      	ldr	r2, [r3, #0]
 801188a:	4b1c      	ldr	r3, [pc, #112]	@ (80118fc <SystemInit+0x134>)
 801188c:	4013      	ands	r3, r2
 801188e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011892:	d202      	bcs.n	801189a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8011894:	4b1a      	ldr	r3, [pc, #104]	@ (8011900 <SystemInit+0x138>)
 8011896:	2201      	movs	r2, #1
 8011898:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 801189a:	4b12      	ldr	r3, [pc, #72]	@ (80118e4 <SystemInit+0x11c>)
 801189c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80118a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d113      	bne.n	80118d0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80118a8:	4b0e      	ldr	r3, [pc, #56]	@ (80118e4 <SystemInit+0x11c>)
 80118aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80118ae:	4a0d      	ldr	r2, [pc, #52]	@ (80118e4 <SystemInit+0x11c>)
 80118b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80118b4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80118b8:	4b12      	ldr	r3, [pc, #72]	@ (8011904 <SystemInit+0x13c>)
 80118ba:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80118be:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80118c0:	4b08      	ldr	r3, [pc, #32]	@ (80118e4 <SystemInit+0x11c>)
 80118c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80118c6:	4a07      	ldr	r2, [pc, #28]	@ (80118e4 <SystemInit+0x11c>)
 80118c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80118cc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80118d0:	bf00      	nop
 80118d2:	46bd      	mov	sp, r7
 80118d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d8:	4770      	bx	lr
 80118da:	bf00      	nop
 80118dc:	e000ed00 	.word	0xe000ed00
 80118e0:	52002000 	.word	0x52002000
 80118e4:	58024400 	.word	0x58024400
 80118e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80118ec:	02020200 	.word	0x02020200
 80118f0:	01ff0000 	.word	0x01ff0000
 80118f4:	01010280 	.word	0x01010280
 80118f8:	5c001000 	.word	0x5c001000
 80118fc:	ffff0000 	.word	0xffff0000
 8011900:	51008108 	.word	0x51008108
 8011904:	52004000 	.word	0x52004000

08011908 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8011908:	b480      	push	{r7}
 801190a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 801190c:	4b09      	ldr	r3, [pc, #36]	@ (8011934 <ExitRun0Mode+0x2c>)
 801190e:	68db      	ldr	r3, [r3, #12]
 8011910:	4a08      	ldr	r2, [pc, #32]	@ (8011934 <ExitRun0Mode+0x2c>)
 8011912:	f043 0302 	orr.w	r3, r3, #2
 8011916:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8011918:	bf00      	nop
 801191a:	4b06      	ldr	r3, [pc, #24]	@ (8011934 <ExitRun0Mode+0x2c>)
 801191c:	685b      	ldr	r3, [r3, #4]
 801191e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011922:	2b00      	cmp	r3, #0
 8011924:	d0f9      	beq.n	801191a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8011926:	bf00      	nop
 8011928:	bf00      	nop
 801192a:	46bd      	mov	sp, r7
 801192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011930:	4770      	bx	lr
 8011932:	bf00      	nop
 8011934:	58024800 	.word	0x58024800

08011938 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 801193c:	4b22      	ldr	r3, [pc, #136]	@ (80119c8 <MX_USART1_UART_Init+0x90>)
 801193e:	4a23      	ldr	r2, [pc, #140]	@ (80119cc <MX_USART1_UART_Init+0x94>)
 8011940:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8011942:	4b21      	ldr	r3, [pc, #132]	@ (80119c8 <MX_USART1_UART_Init+0x90>)
 8011944:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8011948:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801194a:	4b1f      	ldr	r3, [pc, #124]	@ (80119c8 <MX_USART1_UART_Init+0x90>)
 801194c:	2200      	movs	r2, #0
 801194e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8011950:	4b1d      	ldr	r3, [pc, #116]	@ (80119c8 <MX_USART1_UART_Init+0x90>)
 8011952:	2200      	movs	r2, #0
 8011954:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8011956:	4b1c      	ldr	r3, [pc, #112]	@ (80119c8 <MX_USART1_UART_Init+0x90>)
 8011958:	2200      	movs	r2, #0
 801195a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 801195c:	4b1a      	ldr	r3, [pc, #104]	@ (80119c8 <MX_USART1_UART_Init+0x90>)
 801195e:	220c      	movs	r2, #12
 8011960:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011962:	4b19      	ldr	r3, [pc, #100]	@ (80119c8 <MX_USART1_UART_Init+0x90>)
 8011964:	2200      	movs	r2, #0
 8011966:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8011968:	4b17      	ldr	r3, [pc, #92]	@ (80119c8 <MX_USART1_UART_Init+0x90>)
 801196a:	2200      	movs	r2, #0
 801196c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801196e:	4b16      	ldr	r3, [pc, #88]	@ (80119c8 <MX_USART1_UART_Init+0x90>)
 8011970:	2200      	movs	r2, #0
 8011972:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8011974:	4b14      	ldr	r3, [pc, #80]	@ (80119c8 <MX_USART1_UART_Init+0x90>)
 8011976:	2200      	movs	r2, #0
 8011978:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801197a:	4b13      	ldr	r3, [pc, #76]	@ (80119c8 <MX_USART1_UART_Init+0x90>)
 801197c:	2200      	movs	r2, #0
 801197e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8011980:	4811      	ldr	r0, [pc, #68]	@ (80119c8 <MX_USART1_UART_Init+0x90>)
 8011982:	f007 fd81 	bl	8019488 <HAL_UART_Init>
 8011986:	4603      	mov	r3, r0
 8011988:	2b00      	cmp	r3, #0
 801198a:	d001      	beq.n	8011990 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 801198c:	f7ff fda0 	bl	80114d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011990:	2100      	movs	r1, #0
 8011992:	480d      	ldr	r0, [pc, #52]	@ (80119c8 <MX_USART1_UART_Init+0x90>)
 8011994:	f008 fedf 	bl	801a756 <HAL_UARTEx_SetTxFifoThreshold>
 8011998:	4603      	mov	r3, r0
 801199a:	2b00      	cmp	r3, #0
 801199c:	d001      	beq.n	80119a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 801199e:	f7ff fd97 	bl	80114d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80119a2:	2100      	movs	r1, #0
 80119a4:	4808      	ldr	r0, [pc, #32]	@ (80119c8 <MX_USART1_UART_Init+0x90>)
 80119a6:	f008 ff14 	bl	801a7d2 <HAL_UARTEx_SetRxFifoThreshold>
 80119aa:	4603      	mov	r3, r0
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d001      	beq.n	80119b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80119b0:	f7ff fd8e 	bl	80114d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80119b4:	4804      	ldr	r0, [pc, #16]	@ (80119c8 <MX_USART1_UART_Init+0x90>)
 80119b6:	f008 fe95 	bl	801a6e4 <HAL_UARTEx_DisableFifoMode>
 80119ba:	4603      	mov	r3, r0
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d001      	beq.n	80119c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80119c0:	f7ff fd86 	bl	80114d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80119c4:	bf00      	nop
 80119c6:	bd80      	pop	{r7, pc}
 80119c8:	24031590 	.word	0x24031590
 80119cc:	40011000 	.word	0x40011000

080119d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b0ba      	sub	sp, #232	@ 0xe8
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80119d8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80119dc:	2200      	movs	r2, #0
 80119de:	601a      	str	r2, [r3, #0]
 80119e0:	605a      	str	r2, [r3, #4]
 80119e2:	609a      	str	r2, [r3, #8]
 80119e4:	60da      	str	r2, [r3, #12]
 80119e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80119e8:	f107 0310 	add.w	r3, r7, #16
 80119ec:	22c0      	movs	r2, #192	@ 0xc0
 80119ee:	2100      	movs	r1, #0
 80119f0:	4618      	mov	r0, r3
 80119f2:	f022 fa4e 	bl	8033e92 <memset>
  if(uartHandle->Instance==USART1)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	4a27      	ldr	r2, [pc, #156]	@ (8011a98 <HAL_UART_MspInit+0xc8>)
 80119fc:	4293      	cmp	r3, r2
 80119fe:	d146      	bne.n	8011a8e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8011a00:	f04f 0201 	mov.w	r2, #1
 8011a04:	f04f 0300 	mov.w	r3, #0
 8011a08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011a12:	f107 0310 	add.w	r3, r7, #16
 8011a16:	4618      	mov	r0, r3
 8011a18:	f004 fc58 	bl	80162cc <HAL_RCCEx_PeriphCLKConfig>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d001      	beq.n	8011a26 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8011a22:	f7ff fd55 	bl	80114d0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8011a26:	4b1d      	ldr	r3, [pc, #116]	@ (8011a9c <HAL_UART_MspInit+0xcc>)
 8011a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8011a9c <HAL_UART_MspInit+0xcc>)
 8011a2e:	f043 0310 	orr.w	r3, r3, #16
 8011a32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8011a36:	4b19      	ldr	r3, [pc, #100]	@ (8011a9c <HAL_UART_MspInit+0xcc>)
 8011a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011a3c:	f003 0310 	and.w	r3, r3, #16
 8011a40:	60fb      	str	r3, [r7, #12]
 8011a42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011a44:	4b15      	ldr	r3, [pc, #84]	@ (8011a9c <HAL_UART_MspInit+0xcc>)
 8011a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011a4a:	4a14      	ldr	r2, [pc, #80]	@ (8011a9c <HAL_UART_MspInit+0xcc>)
 8011a4c:	f043 0302 	orr.w	r3, r3, #2
 8011a50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011a54:	4b11      	ldr	r3, [pc, #68]	@ (8011a9c <HAL_UART_MspInit+0xcc>)
 8011a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011a5a:	f003 0302 	and.w	r3, r3, #2
 8011a5e:	60bb      	str	r3, [r7, #8]
 8011a60:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8011a62:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8011a66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a6a:	2302      	movs	r3, #2
 8011a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a70:	2300      	movs	r3, #0
 8011a72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011a76:	2300      	movs	r3, #0
 8011a78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8011a7c:	2304      	movs	r3, #4
 8011a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011a82:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011a86:	4619      	mov	r1, r3
 8011a88:	4805      	ldr	r0, [pc, #20]	@ (8011aa0 <HAL_UART_MspInit+0xd0>)
 8011a8a:	f002 fe29 	bl	80146e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8011a8e:	bf00      	nop
 8011a90:	37e8      	adds	r7, #232	@ 0xe8
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}
 8011a96:	bf00      	nop
 8011a98:	40011000 	.word	0x40011000
 8011a9c:	58024400 	.word	0x58024400
 8011aa0:	58020400 	.word	0x58020400

08011aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8011aa4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8011ae0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8011aa8:	f7ff ff2e 	bl	8011908 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8011aac:	f7ff fe8c 	bl	80117c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8011ab0:	480c      	ldr	r0, [pc, #48]	@ (8011ae4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8011ab2:	490d      	ldr	r1, [pc, #52]	@ (8011ae8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8011ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8011aec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8011ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011ab8:	e002      	b.n	8011ac0 <LoopCopyDataInit>

08011aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8011abe:	3304      	adds	r3, #4

08011ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8011ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011ac4:	d3f9      	bcc.n	8011aba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8011ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8011af0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8011ac8:	4c0a      	ldr	r4, [pc, #40]	@ (8011af4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8011aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011acc:	e001      	b.n	8011ad2 <LoopFillZerobss>

08011ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8011ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011ad0:	3204      	adds	r2, #4

08011ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8011ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8011ad4:	d3fb      	bcc.n	8011ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8011ad6:	f022 fa57 	bl	8033f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011ada:	f7ff fb99 	bl	8011210 <main>
  bx  lr
 8011ade:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8011ae0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8011ae4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8011ae8:	240025a4 	.word	0x240025a4
  ldr r2, =_sidata
 8011aec:	08072d48 	.word	0x08072d48
  ldr r2, =_sbss
 8011af0:	240025c0 	.word	0x240025c0
  ldr r4, =_ebss
 8011af4:	24052b6c 	.word	0x24052b6c

08011af8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011af8:	e7fe      	b.n	8011af8 <ADC3_IRQHandler>
	...

08011afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b082      	sub	sp, #8
 8011b00:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011b02:	2003      	movs	r0, #3
 8011b04:	f000 f94b 	bl	8011d9e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8011b08:	f004 f9c8 	bl	8015e9c <HAL_RCC_GetSysClockFreq>
 8011b0c:	4602      	mov	r2, r0
 8011b0e:	4b15      	ldr	r3, [pc, #84]	@ (8011b64 <HAL_Init+0x68>)
 8011b10:	699b      	ldr	r3, [r3, #24]
 8011b12:	0a1b      	lsrs	r3, r3, #8
 8011b14:	f003 030f 	and.w	r3, r3, #15
 8011b18:	4913      	ldr	r1, [pc, #76]	@ (8011b68 <HAL_Init+0x6c>)
 8011b1a:	5ccb      	ldrb	r3, [r1, r3]
 8011b1c:	f003 031f 	and.w	r3, r3, #31
 8011b20:	fa22 f303 	lsr.w	r3, r2, r3
 8011b24:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011b26:	4b0f      	ldr	r3, [pc, #60]	@ (8011b64 <HAL_Init+0x68>)
 8011b28:	699b      	ldr	r3, [r3, #24]
 8011b2a:	f003 030f 	and.w	r3, r3, #15
 8011b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8011b68 <HAL_Init+0x6c>)
 8011b30:	5cd3      	ldrb	r3, [r2, r3]
 8011b32:	f003 031f 	and.w	r3, r3, #31
 8011b36:	687a      	ldr	r2, [r7, #4]
 8011b38:	fa22 f303 	lsr.w	r3, r2, r3
 8011b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8011b6c <HAL_Init+0x70>)
 8011b3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011b40:	4a0b      	ldr	r2, [pc, #44]	@ (8011b70 <HAL_Init+0x74>)
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8011b46:	200f      	movs	r0, #15
 8011b48:	f7ff fd3c 	bl	80115c4 <HAL_InitTick>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d001      	beq.n	8011b56 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8011b52:	2301      	movs	r3, #1
 8011b54:	e002      	b.n	8011b5c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8011b56:	f7ff fd1b 	bl	8011590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8011b5a:	2300      	movs	r3, #0
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	3708      	adds	r7, #8
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}
 8011b64:	58024400 	.word	0x58024400
 8011b68:	08038288 	.word	0x08038288
 8011b6c:	24000004 	.word	0x24000004
 8011b70:	24000000 	.word	0x24000000

08011b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011b74:	b480      	push	{r7}
 8011b76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8011b78:	4b06      	ldr	r3, [pc, #24]	@ (8011b94 <HAL_IncTick+0x20>)
 8011b7a:	781b      	ldrb	r3, [r3, #0]
 8011b7c:	461a      	mov	r2, r3
 8011b7e:	4b06      	ldr	r3, [pc, #24]	@ (8011b98 <HAL_IncTick+0x24>)
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	4413      	add	r3, r2
 8011b84:	4a04      	ldr	r2, [pc, #16]	@ (8011b98 <HAL_IncTick+0x24>)
 8011b86:	6013      	str	r3, [r2, #0]
}
 8011b88:	bf00      	nop
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b90:	4770      	bx	lr
 8011b92:	bf00      	nop
 8011b94:	2400000c 	.word	0x2400000c
 8011b98:	24031624 	.word	0x24031624

08011b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011b9c:	b480      	push	{r7}
 8011b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8011ba0:	4b03      	ldr	r3, [pc, #12]	@ (8011bb0 <HAL_GetTick+0x14>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bac:	4770      	bx	lr
 8011bae:	bf00      	nop
 8011bb0:	24031624 	.word	0x24031624

08011bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b084      	sub	sp, #16
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011bbc:	f7ff ffee 	bl	8011b9c <HAL_GetTick>
 8011bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bcc:	d005      	beq.n	8011bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8011bce:	4b0a      	ldr	r3, [pc, #40]	@ (8011bf8 <HAL_Delay+0x44>)
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	461a      	mov	r2, r3
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	4413      	add	r3, r2
 8011bd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8011bda:	bf00      	nop
 8011bdc:	f7ff ffde 	bl	8011b9c <HAL_GetTick>
 8011be0:	4602      	mov	r2, r0
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	1ad3      	subs	r3, r2, r3
 8011be6:	68fa      	ldr	r2, [r7, #12]
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d8f7      	bhi.n	8011bdc <HAL_Delay+0x28>
  {
  }
}
 8011bec:	bf00      	nop
 8011bee:	bf00      	nop
 8011bf0:	3710      	adds	r7, #16
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}
 8011bf6:	bf00      	nop
 8011bf8:	2400000c 	.word	0x2400000c

08011bfc <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8011bfc:	b480      	push	{r7}
 8011bfe:	af00      	add	r7, sp, #0
 return __STM32H7xx_HAL_VERSION;
 8011c00:	4b02      	ldr	r3, [pc, #8]	@ (8011c0c <HAL_GetHalVersion+0x10>)
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	46bd      	mov	sp, r7
 8011c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0a:	4770      	bx	lr
 8011c0c:	010b0500 	.word	0x010b0500

08011c10 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8011c10:	b480      	push	{r7}
 8011c12:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8011c14:	4b03      	ldr	r3, [pc, #12]	@ (8011c24 <HAL_GetREVID+0x14>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	0c1b      	lsrs	r3, r3, #16
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c22:	4770      	bx	lr
 8011c24:	5c001000 	.word	0x5c001000

08011c28 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8011c28:	b480      	push	{r7}
 8011c2a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8011c2c:	4b04      	ldr	r3, [pc, #16]	@ (8011c40 <HAL_GetDEVID+0x18>)
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8011c34:	4618      	mov	r0, r3
 8011c36:	46bd      	mov	sp, r7
 8011c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3c:	4770      	bx	lr
 8011c3e:	bf00      	nop
 8011c40:	5c001000 	.word	0x5c001000

08011c44 <__NVIC_SetPriorityGrouping>:
{
 8011c44:	b480      	push	{r7}
 8011c46:	b085      	sub	sp, #20
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	f003 0307 	and.w	r3, r3, #7
 8011c52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011c54:	4b0b      	ldr	r3, [pc, #44]	@ (8011c84 <__NVIC_SetPriorityGrouping+0x40>)
 8011c56:	68db      	ldr	r3, [r3, #12]
 8011c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011c5a:	68ba      	ldr	r2, [r7, #8]
 8011c5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8011c60:	4013      	ands	r3, r2
 8011c62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8011c6c:	4b06      	ldr	r3, [pc, #24]	@ (8011c88 <__NVIC_SetPriorityGrouping+0x44>)
 8011c6e:	4313      	orrs	r3, r2
 8011c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011c72:	4a04      	ldr	r2, [pc, #16]	@ (8011c84 <__NVIC_SetPriorityGrouping+0x40>)
 8011c74:	68bb      	ldr	r3, [r7, #8]
 8011c76:	60d3      	str	r3, [r2, #12]
}
 8011c78:	bf00      	nop
 8011c7a:	3714      	adds	r7, #20
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c82:	4770      	bx	lr
 8011c84:	e000ed00 	.word	0xe000ed00
 8011c88:	05fa0000 	.word	0x05fa0000

08011c8c <__NVIC_GetPriorityGrouping>:
{
 8011c8c:	b480      	push	{r7}
 8011c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011c90:	4b04      	ldr	r3, [pc, #16]	@ (8011ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8011c92:	68db      	ldr	r3, [r3, #12]
 8011c94:	0a1b      	lsrs	r3, r3, #8
 8011c96:	f003 0307 	and.w	r3, r3, #7
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca2:	4770      	bx	lr
 8011ca4:	e000ed00 	.word	0xe000ed00

08011ca8 <__NVIC_EnableIRQ>:
{
 8011ca8:	b480      	push	{r7}
 8011caa:	b083      	sub	sp, #12
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	4603      	mov	r3, r0
 8011cb0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	db0b      	blt.n	8011cd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011cba:	88fb      	ldrh	r3, [r7, #6]
 8011cbc:	f003 021f 	and.w	r2, r3, #31
 8011cc0:	4907      	ldr	r1, [pc, #28]	@ (8011ce0 <__NVIC_EnableIRQ+0x38>)
 8011cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011cc6:	095b      	lsrs	r3, r3, #5
 8011cc8:	2001      	movs	r0, #1
 8011cca:	fa00 f202 	lsl.w	r2, r0, r2
 8011cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011cd2:	bf00      	nop
 8011cd4:	370c      	adds	r7, #12
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cdc:	4770      	bx	lr
 8011cde:	bf00      	nop
 8011ce0:	e000e100 	.word	0xe000e100

08011ce4 <__NVIC_SetPriority>:
{
 8011ce4:	b480      	push	{r7}
 8011ce6:	b083      	sub	sp, #12
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	4603      	mov	r3, r0
 8011cec:	6039      	str	r1, [r7, #0]
 8011cee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011cf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	db0a      	blt.n	8011d0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	b2da      	uxtb	r2, r3
 8011cfc:	490c      	ldr	r1, [pc, #48]	@ (8011d30 <__NVIC_SetPriority+0x4c>)
 8011cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011d02:	0112      	lsls	r2, r2, #4
 8011d04:	b2d2      	uxtb	r2, r2
 8011d06:	440b      	add	r3, r1
 8011d08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8011d0c:	e00a      	b.n	8011d24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	b2da      	uxtb	r2, r3
 8011d12:	4908      	ldr	r1, [pc, #32]	@ (8011d34 <__NVIC_SetPriority+0x50>)
 8011d14:	88fb      	ldrh	r3, [r7, #6]
 8011d16:	f003 030f 	and.w	r3, r3, #15
 8011d1a:	3b04      	subs	r3, #4
 8011d1c:	0112      	lsls	r2, r2, #4
 8011d1e:	b2d2      	uxtb	r2, r2
 8011d20:	440b      	add	r3, r1
 8011d22:	761a      	strb	r2, [r3, #24]
}
 8011d24:	bf00      	nop
 8011d26:	370c      	adds	r7, #12
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2e:	4770      	bx	lr
 8011d30:	e000e100 	.word	0xe000e100
 8011d34:	e000ed00 	.word	0xe000ed00

08011d38 <NVIC_EncodePriority>:
{
 8011d38:	b480      	push	{r7}
 8011d3a:	b089      	sub	sp, #36	@ 0x24
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	60f8      	str	r0, [r7, #12]
 8011d40:	60b9      	str	r1, [r7, #8]
 8011d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	f003 0307 	and.w	r3, r3, #7
 8011d4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011d4c:	69fb      	ldr	r3, [r7, #28]
 8011d4e:	f1c3 0307 	rsb	r3, r3, #7
 8011d52:	2b04      	cmp	r3, #4
 8011d54:	bf28      	it	cs
 8011d56:	2304      	movcs	r3, #4
 8011d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011d5a:	69fb      	ldr	r3, [r7, #28]
 8011d5c:	3304      	adds	r3, #4
 8011d5e:	2b06      	cmp	r3, #6
 8011d60:	d902      	bls.n	8011d68 <NVIC_EncodePriority+0x30>
 8011d62:	69fb      	ldr	r3, [r7, #28]
 8011d64:	3b03      	subs	r3, #3
 8011d66:	e000      	b.n	8011d6a <NVIC_EncodePriority+0x32>
 8011d68:	2300      	movs	r3, #0
 8011d6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8011d70:	69bb      	ldr	r3, [r7, #24]
 8011d72:	fa02 f303 	lsl.w	r3, r2, r3
 8011d76:	43da      	mvns	r2, r3
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	401a      	ands	r2, r3
 8011d7c:	697b      	ldr	r3, [r7, #20]
 8011d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011d80:	f04f 31ff 	mov.w	r1, #4294967295
 8011d84:	697b      	ldr	r3, [r7, #20]
 8011d86:	fa01 f303 	lsl.w	r3, r1, r3
 8011d8a:	43d9      	mvns	r1, r3
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011d90:	4313      	orrs	r3, r2
}
 8011d92:	4618      	mov	r0, r3
 8011d94:	3724      	adds	r7, #36	@ 0x24
 8011d96:	46bd      	mov	sp, r7
 8011d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9c:	4770      	bx	lr

08011d9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011d9e:	b580      	push	{r7, lr}
 8011da0:	b082      	sub	sp, #8
 8011da2:	af00      	add	r7, sp, #0
 8011da4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f7ff ff4c 	bl	8011c44 <__NVIC_SetPriorityGrouping>
}
 8011dac:	bf00      	nop
 8011dae:	3708      	adds	r7, #8
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd80      	pop	{r7, pc}

08011db4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b086      	sub	sp, #24
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	4603      	mov	r3, r0
 8011dbc:	60b9      	str	r1, [r7, #8]
 8011dbe:	607a      	str	r2, [r7, #4]
 8011dc0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8011dc2:	f7ff ff63 	bl	8011c8c <__NVIC_GetPriorityGrouping>
 8011dc6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011dc8:	687a      	ldr	r2, [r7, #4]
 8011dca:	68b9      	ldr	r1, [r7, #8]
 8011dcc:	6978      	ldr	r0, [r7, #20]
 8011dce:	f7ff ffb3 	bl	8011d38 <NVIC_EncodePriority>
 8011dd2:	4602      	mov	r2, r0
 8011dd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011dd8:	4611      	mov	r1, r2
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f7ff ff82 	bl	8011ce4 <__NVIC_SetPriority>
}
 8011de0:	bf00      	nop
 8011de2:	3718      	adds	r7, #24
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd80      	pop	{r7, pc}

08011de8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	4603      	mov	r3, r0
 8011df0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011df6:	4618      	mov	r0, r3
 8011df8:	f7ff ff56 	bl	8011ca8 <__NVIC_EnableIRQ>
}
 8011dfc:	bf00      	nop
 8011dfe:	3708      	adds	r7, #8
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}

08011e04 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8011e04:	b480      	push	{r7}
 8011e06:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8011e08:	f3bf 8f5f 	dmb	sy
}
 8011e0c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8011e0e:	4b07      	ldr	r3, [pc, #28]	@ (8011e2c <HAL_MPU_Disable+0x28>)
 8011e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e12:	4a06      	ldr	r2, [pc, #24]	@ (8011e2c <HAL_MPU_Disable+0x28>)
 8011e14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011e18:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8011e1a:	4b05      	ldr	r3, [pc, #20]	@ (8011e30 <HAL_MPU_Disable+0x2c>)
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	605a      	str	r2, [r3, #4]
}
 8011e20:	bf00      	nop
 8011e22:	46bd      	mov	sp, r7
 8011e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e28:	4770      	bx	lr
 8011e2a:	bf00      	nop
 8011e2c:	e000ed00 	.word	0xe000ed00
 8011e30:	e000ed90 	.word	0xe000ed90

08011e34 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8011e34:	b480      	push	{r7}
 8011e36:	b083      	sub	sp, #12
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8011e3c:	4a0b      	ldr	r2, [pc, #44]	@ (8011e6c <HAL_MPU_Enable+0x38>)
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	f043 0301 	orr.w	r3, r3, #1
 8011e44:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8011e46:	4b0a      	ldr	r3, [pc, #40]	@ (8011e70 <HAL_MPU_Enable+0x3c>)
 8011e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e4a:	4a09      	ldr	r2, [pc, #36]	@ (8011e70 <HAL_MPU_Enable+0x3c>)
 8011e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011e50:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8011e52:	f3bf 8f4f 	dsb	sy
}
 8011e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011e58:	f3bf 8f6f 	isb	sy
}
 8011e5c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8011e5e:	bf00      	nop
 8011e60:	370c      	adds	r7, #12
 8011e62:	46bd      	mov	sp, r7
 8011e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e68:	4770      	bx	lr
 8011e6a:	bf00      	nop
 8011e6c:	e000ed90 	.word	0xe000ed90
 8011e70:	e000ed00 	.word	0xe000ed00

08011e74 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8011e74:	b480      	push	{r7}
 8011e76:	b083      	sub	sp, #12
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	785a      	ldrb	r2, [r3, #1]
 8011e80:	4b1b      	ldr	r3, [pc, #108]	@ (8011ef0 <HAL_MPU_ConfigRegion+0x7c>)
 8011e82:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8011e84:	4b1a      	ldr	r3, [pc, #104]	@ (8011ef0 <HAL_MPU_ConfigRegion+0x7c>)
 8011e86:	691b      	ldr	r3, [r3, #16]
 8011e88:	4a19      	ldr	r2, [pc, #100]	@ (8011ef0 <HAL_MPU_ConfigRegion+0x7c>)
 8011e8a:	f023 0301 	bic.w	r3, r3, #1
 8011e8e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8011e90:	4a17      	ldr	r2, [pc, #92]	@ (8011ef0 <HAL_MPU_ConfigRegion+0x7c>)
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	685b      	ldr	r3, [r3, #4]
 8011e96:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	7b1b      	ldrb	r3, [r3, #12]
 8011e9c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	7adb      	ldrb	r3, [r3, #11]
 8011ea2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8011ea4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	7a9b      	ldrb	r3, [r3, #10]
 8011eaa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8011eac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	7b5b      	ldrb	r3, [r3, #13]
 8011eb2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8011eb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	7b9b      	ldrb	r3, [r3, #14]
 8011eba:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8011ebc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	7bdb      	ldrb	r3, [r3, #15]
 8011ec2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8011ec4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	7a5b      	ldrb	r3, [r3, #9]
 8011eca:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8011ecc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	7a1b      	ldrb	r3, [r3, #8]
 8011ed2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8011ed4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8011ed6:	687a      	ldr	r2, [r7, #4]
 8011ed8:	7812      	ldrb	r2, [r2, #0]
 8011eda:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8011edc:	4a04      	ldr	r2, [pc, #16]	@ (8011ef0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8011ede:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8011ee0:	6113      	str	r3, [r2, #16]
}
 8011ee2:	bf00      	nop
 8011ee4:	370c      	adds	r7, #12
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eec:	4770      	bx	lr
 8011eee:	bf00      	nop
 8011ef0:	e000ed90 	.word	0xe000ed90

08011ef4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b086      	sub	sp, #24
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8011efc:	f7ff fe4e 	bl	8011b9c <HAL_GetTick>
 8011f00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d101      	bne.n	8011f0c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8011f08:	2301      	movs	r3, #1
 8011f0a:	e316      	b.n	801253a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	4a66      	ldr	r2, [pc, #408]	@ (80120ac <HAL_DMA_Init+0x1b8>)
 8011f12:	4293      	cmp	r3, r2
 8011f14:	d04a      	beq.n	8011fac <HAL_DMA_Init+0xb8>
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	4a65      	ldr	r2, [pc, #404]	@ (80120b0 <HAL_DMA_Init+0x1bc>)
 8011f1c:	4293      	cmp	r3, r2
 8011f1e:	d045      	beq.n	8011fac <HAL_DMA_Init+0xb8>
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	4a63      	ldr	r2, [pc, #396]	@ (80120b4 <HAL_DMA_Init+0x1c0>)
 8011f26:	4293      	cmp	r3, r2
 8011f28:	d040      	beq.n	8011fac <HAL_DMA_Init+0xb8>
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	4a62      	ldr	r2, [pc, #392]	@ (80120b8 <HAL_DMA_Init+0x1c4>)
 8011f30:	4293      	cmp	r3, r2
 8011f32:	d03b      	beq.n	8011fac <HAL_DMA_Init+0xb8>
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	4a60      	ldr	r2, [pc, #384]	@ (80120bc <HAL_DMA_Init+0x1c8>)
 8011f3a:	4293      	cmp	r3, r2
 8011f3c:	d036      	beq.n	8011fac <HAL_DMA_Init+0xb8>
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	4a5f      	ldr	r2, [pc, #380]	@ (80120c0 <HAL_DMA_Init+0x1cc>)
 8011f44:	4293      	cmp	r3, r2
 8011f46:	d031      	beq.n	8011fac <HAL_DMA_Init+0xb8>
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	4a5d      	ldr	r2, [pc, #372]	@ (80120c4 <HAL_DMA_Init+0x1d0>)
 8011f4e:	4293      	cmp	r3, r2
 8011f50:	d02c      	beq.n	8011fac <HAL_DMA_Init+0xb8>
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	4a5c      	ldr	r2, [pc, #368]	@ (80120c8 <HAL_DMA_Init+0x1d4>)
 8011f58:	4293      	cmp	r3, r2
 8011f5a:	d027      	beq.n	8011fac <HAL_DMA_Init+0xb8>
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	4a5a      	ldr	r2, [pc, #360]	@ (80120cc <HAL_DMA_Init+0x1d8>)
 8011f62:	4293      	cmp	r3, r2
 8011f64:	d022      	beq.n	8011fac <HAL_DMA_Init+0xb8>
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	4a59      	ldr	r2, [pc, #356]	@ (80120d0 <HAL_DMA_Init+0x1dc>)
 8011f6c:	4293      	cmp	r3, r2
 8011f6e:	d01d      	beq.n	8011fac <HAL_DMA_Init+0xb8>
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	4a57      	ldr	r2, [pc, #348]	@ (80120d4 <HAL_DMA_Init+0x1e0>)
 8011f76:	4293      	cmp	r3, r2
 8011f78:	d018      	beq.n	8011fac <HAL_DMA_Init+0xb8>
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	4a56      	ldr	r2, [pc, #344]	@ (80120d8 <HAL_DMA_Init+0x1e4>)
 8011f80:	4293      	cmp	r3, r2
 8011f82:	d013      	beq.n	8011fac <HAL_DMA_Init+0xb8>
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	4a54      	ldr	r2, [pc, #336]	@ (80120dc <HAL_DMA_Init+0x1e8>)
 8011f8a:	4293      	cmp	r3, r2
 8011f8c:	d00e      	beq.n	8011fac <HAL_DMA_Init+0xb8>
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	4a53      	ldr	r2, [pc, #332]	@ (80120e0 <HAL_DMA_Init+0x1ec>)
 8011f94:	4293      	cmp	r3, r2
 8011f96:	d009      	beq.n	8011fac <HAL_DMA_Init+0xb8>
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	4a51      	ldr	r2, [pc, #324]	@ (80120e4 <HAL_DMA_Init+0x1f0>)
 8011f9e:	4293      	cmp	r3, r2
 8011fa0:	d004      	beq.n	8011fac <HAL_DMA_Init+0xb8>
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	4a50      	ldr	r2, [pc, #320]	@ (80120e8 <HAL_DMA_Init+0x1f4>)
 8011fa8:	4293      	cmp	r3, r2
 8011faa:	d101      	bne.n	8011fb0 <HAL_DMA_Init+0xbc>
 8011fac:	2301      	movs	r3, #1
 8011fae:	e000      	b.n	8011fb2 <HAL_DMA_Init+0xbe>
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	f000 813b 	beq.w	801222e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	2202      	movs	r2, #2
 8011fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	4a37      	ldr	r2, [pc, #220]	@ (80120ac <HAL_DMA_Init+0x1b8>)
 8011fce:	4293      	cmp	r3, r2
 8011fd0:	d04a      	beq.n	8012068 <HAL_DMA_Init+0x174>
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	4a36      	ldr	r2, [pc, #216]	@ (80120b0 <HAL_DMA_Init+0x1bc>)
 8011fd8:	4293      	cmp	r3, r2
 8011fda:	d045      	beq.n	8012068 <HAL_DMA_Init+0x174>
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	4a34      	ldr	r2, [pc, #208]	@ (80120b4 <HAL_DMA_Init+0x1c0>)
 8011fe2:	4293      	cmp	r3, r2
 8011fe4:	d040      	beq.n	8012068 <HAL_DMA_Init+0x174>
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	4a33      	ldr	r2, [pc, #204]	@ (80120b8 <HAL_DMA_Init+0x1c4>)
 8011fec:	4293      	cmp	r3, r2
 8011fee:	d03b      	beq.n	8012068 <HAL_DMA_Init+0x174>
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	4a31      	ldr	r2, [pc, #196]	@ (80120bc <HAL_DMA_Init+0x1c8>)
 8011ff6:	4293      	cmp	r3, r2
 8011ff8:	d036      	beq.n	8012068 <HAL_DMA_Init+0x174>
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	4a30      	ldr	r2, [pc, #192]	@ (80120c0 <HAL_DMA_Init+0x1cc>)
 8012000:	4293      	cmp	r3, r2
 8012002:	d031      	beq.n	8012068 <HAL_DMA_Init+0x174>
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	4a2e      	ldr	r2, [pc, #184]	@ (80120c4 <HAL_DMA_Init+0x1d0>)
 801200a:	4293      	cmp	r3, r2
 801200c:	d02c      	beq.n	8012068 <HAL_DMA_Init+0x174>
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	4a2d      	ldr	r2, [pc, #180]	@ (80120c8 <HAL_DMA_Init+0x1d4>)
 8012014:	4293      	cmp	r3, r2
 8012016:	d027      	beq.n	8012068 <HAL_DMA_Init+0x174>
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	4a2b      	ldr	r2, [pc, #172]	@ (80120cc <HAL_DMA_Init+0x1d8>)
 801201e:	4293      	cmp	r3, r2
 8012020:	d022      	beq.n	8012068 <HAL_DMA_Init+0x174>
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	4a2a      	ldr	r2, [pc, #168]	@ (80120d0 <HAL_DMA_Init+0x1dc>)
 8012028:	4293      	cmp	r3, r2
 801202a:	d01d      	beq.n	8012068 <HAL_DMA_Init+0x174>
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	4a28      	ldr	r2, [pc, #160]	@ (80120d4 <HAL_DMA_Init+0x1e0>)
 8012032:	4293      	cmp	r3, r2
 8012034:	d018      	beq.n	8012068 <HAL_DMA_Init+0x174>
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	4a27      	ldr	r2, [pc, #156]	@ (80120d8 <HAL_DMA_Init+0x1e4>)
 801203c:	4293      	cmp	r3, r2
 801203e:	d013      	beq.n	8012068 <HAL_DMA_Init+0x174>
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	4a25      	ldr	r2, [pc, #148]	@ (80120dc <HAL_DMA_Init+0x1e8>)
 8012046:	4293      	cmp	r3, r2
 8012048:	d00e      	beq.n	8012068 <HAL_DMA_Init+0x174>
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	4a24      	ldr	r2, [pc, #144]	@ (80120e0 <HAL_DMA_Init+0x1ec>)
 8012050:	4293      	cmp	r3, r2
 8012052:	d009      	beq.n	8012068 <HAL_DMA_Init+0x174>
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	4a22      	ldr	r2, [pc, #136]	@ (80120e4 <HAL_DMA_Init+0x1f0>)
 801205a:	4293      	cmp	r3, r2
 801205c:	d004      	beq.n	8012068 <HAL_DMA_Init+0x174>
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	4a21      	ldr	r2, [pc, #132]	@ (80120e8 <HAL_DMA_Init+0x1f4>)
 8012064:	4293      	cmp	r3, r2
 8012066:	d108      	bne.n	801207a <HAL_DMA_Init+0x186>
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	681a      	ldr	r2, [r3, #0]
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	f022 0201 	bic.w	r2, r2, #1
 8012076:	601a      	str	r2, [r3, #0]
 8012078:	e007      	b.n	801208a <HAL_DMA_Init+0x196>
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	681a      	ldr	r2, [r3, #0]
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	f022 0201 	bic.w	r2, r2, #1
 8012088:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801208a:	e02f      	b.n	80120ec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801208c:	f7ff fd86 	bl	8011b9c <HAL_GetTick>
 8012090:	4602      	mov	r2, r0
 8012092:	693b      	ldr	r3, [r7, #16]
 8012094:	1ad3      	subs	r3, r2, r3
 8012096:	2b05      	cmp	r3, #5
 8012098:	d928      	bls.n	80120ec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	2220      	movs	r2, #32
 801209e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2203      	movs	r2, #3
 80120a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80120a8:	2301      	movs	r3, #1
 80120aa:	e246      	b.n	801253a <HAL_DMA_Init+0x646>
 80120ac:	40020010 	.word	0x40020010
 80120b0:	40020028 	.word	0x40020028
 80120b4:	40020040 	.word	0x40020040
 80120b8:	40020058 	.word	0x40020058
 80120bc:	40020070 	.word	0x40020070
 80120c0:	40020088 	.word	0x40020088
 80120c4:	400200a0 	.word	0x400200a0
 80120c8:	400200b8 	.word	0x400200b8
 80120cc:	40020410 	.word	0x40020410
 80120d0:	40020428 	.word	0x40020428
 80120d4:	40020440 	.word	0x40020440
 80120d8:	40020458 	.word	0x40020458
 80120dc:	40020470 	.word	0x40020470
 80120e0:	40020488 	.word	0x40020488
 80120e4:	400204a0 	.word	0x400204a0
 80120e8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	f003 0301 	and.w	r3, r3, #1
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d1c8      	bne.n	801208c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8012102:	697a      	ldr	r2, [r7, #20]
 8012104:	4b83      	ldr	r3, [pc, #524]	@ (8012314 <HAL_DMA_Init+0x420>)
 8012106:	4013      	ands	r3, r2
 8012108:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8012112:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	691b      	ldr	r3, [r3, #16]
 8012118:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801211e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	699b      	ldr	r3, [r3, #24]
 8012124:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801212a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	6a1b      	ldr	r3, [r3, #32]
 8012130:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8012132:	697a      	ldr	r2, [r7, #20]
 8012134:	4313      	orrs	r3, r2
 8012136:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801213c:	2b04      	cmp	r3, #4
 801213e:	d107      	bne.n	8012150 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012148:	4313      	orrs	r3, r2
 801214a:	697a      	ldr	r2, [r7, #20]
 801214c:	4313      	orrs	r3, r2
 801214e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8012150:	4b71      	ldr	r3, [pc, #452]	@ (8012318 <HAL_DMA_Init+0x424>)
 8012152:	681a      	ldr	r2, [r3, #0]
 8012154:	4b71      	ldr	r3, [pc, #452]	@ (801231c <HAL_DMA_Init+0x428>)
 8012156:	4013      	ands	r3, r2
 8012158:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801215c:	d328      	bcc.n	80121b0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	685b      	ldr	r3, [r3, #4]
 8012162:	2b28      	cmp	r3, #40	@ 0x28
 8012164:	d903      	bls.n	801216e <HAL_DMA_Init+0x27a>
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	685b      	ldr	r3, [r3, #4]
 801216a:	2b2e      	cmp	r3, #46	@ 0x2e
 801216c:	d917      	bls.n	801219e <HAL_DMA_Init+0x2aa>
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	685b      	ldr	r3, [r3, #4]
 8012172:	2b3e      	cmp	r3, #62	@ 0x3e
 8012174:	d903      	bls.n	801217e <HAL_DMA_Init+0x28a>
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	685b      	ldr	r3, [r3, #4]
 801217a:	2b42      	cmp	r3, #66	@ 0x42
 801217c:	d90f      	bls.n	801219e <HAL_DMA_Init+0x2aa>
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	685b      	ldr	r3, [r3, #4]
 8012182:	2b46      	cmp	r3, #70	@ 0x46
 8012184:	d903      	bls.n	801218e <HAL_DMA_Init+0x29a>
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	685b      	ldr	r3, [r3, #4]
 801218a:	2b48      	cmp	r3, #72	@ 0x48
 801218c:	d907      	bls.n	801219e <HAL_DMA_Init+0x2aa>
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	685b      	ldr	r3, [r3, #4]
 8012192:	2b4e      	cmp	r3, #78	@ 0x4e
 8012194:	d905      	bls.n	80121a2 <HAL_DMA_Init+0x2ae>
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	685b      	ldr	r3, [r3, #4]
 801219a:	2b52      	cmp	r3, #82	@ 0x52
 801219c:	d801      	bhi.n	80121a2 <HAL_DMA_Init+0x2ae>
 801219e:	2301      	movs	r3, #1
 80121a0:	e000      	b.n	80121a4 <HAL_DMA_Init+0x2b0>
 80121a2:	2300      	movs	r3, #0
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d003      	beq.n	80121b0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80121a8:	697b      	ldr	r3, [r7, #20]
 80121aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80121ae:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	697a      	ldr	r2, [r7, #20]
 80121b6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	695b      	ldr	r3, [r3, #20]
 80121be:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80121c0:	697b      	ldr	r3, [r7, #20]
 80121c2:	f023 0307 	bic.w	r3, r3, #7
 80121c6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121cc:	697a      	ldr	r2, [r7, #20]
 80121ce:	4313      	orrs	r3, r2
 80121d0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121d6:	2b04      	cmp	r3, #4
 80121d8:	d117      	bne.n	801220a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121de:	697a      	ldr	r2, [r7, #20]
 80121e0:	4313      	orrs	r3, r2
 80121e2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d00e      	beq.n	801220a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f002 f8ed 	bl	80143cc <DMA_CheckFifoParam>
 80121f2:	4603      	mov	r3, r0
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d008      	beq.n	801220a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2240      	movs	r2, #64	@ 0x40
 80121fc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	2201      	movs	r2, #1
 8012202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8012206:	2301      	movs	r3, #1
 8012208:	e197      	b.n	801253a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	697a      	ldr	r2, [r7, #20]
 8012210:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8012212:	6878      	ldr	r0, [r7, #4]
 8012214:	f002 f828 	bl	8014268 <DMA_CalcBaseAndBitshift>
 8012218:	4603      	mov	r3, r0
 801221a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012220:	f003 031f 	and.w	r3, r3, #31
 8012224:	223f      	movs	r2, #63	@ 0x3f
 8012226:	409a      	lsls	r2, r3
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	609a      	str	r2, [r3, #8]
 801222c:	e0cd      	b.n	80123ca <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	4a3b      	ldr	r2, [pc, #236]	@ (8012320 <HAL_DMA_Init+0x42c>)
 8012234:	4293      	cmp	r3, r2
 8012236:	d022      	beq.n	801227e <HAL_DMA_Init+0x38a>
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	4a39      	ldr	r2, [pc, #228]	@ (8012324 <HAL_DMA_Init+0x430>)
 801223e:	4293      	cmp	r3, r2
 8012240:	d01d      	beq.n	801227e <HAL_DMA_Init+0x38a>
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	4a38      	ldr	r2, [pc, #224]	@ (8012328 <HAL_DMA_Init+0x434>)
 8012248:	4293      	cmp	r3, r2
 801224a:	d018      	beq.n	801227e <HAL_DMA_Init+0x38a>
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	4a36      	ldr	r2, [pc, #216]	@ (801232c <HAL_DMA_Init+0x438>)
 8012252:	4293      	cmp	r3, r2
 8012254:	d013      	beq.n	801227e <HAL_DMA_Init+0x38a>
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	4a35      	ldr	r2, [pc, #212]	@ (8012330 <HAL_DMA_Init+0x43c>)
 801225c:	4293      	cmp	r3, r2
 801225e:	d00e      	beq.n	801227e <HAL_DMA_Init+0x38a>
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	4a33      	ldr	r2, [pc, #204]	@ (8012334 <HAL_DMA_Init+0x440>)
 8012266:	4293      	cmp	r3, r2
 8012268:	d009      	beq.n	801227e <HAL_DMA_Init+0x38a>
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	4a32      	ldr	r2, [pc, #200]	@ (8012338 <HAL_DMA_Init+0x444>)
 8012270:	4293      	cmp	r3, r2
 8012272:	d004      	beq.n	801227e <HAL_DMA_Init+0x38a>
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	4a30      	ldr	r2, [pc, #192]	@ (801233c <HAL_DMA_Init+0x448>)
 801227a:	4293      	cmp	r3, r2
 801227c:	d101      	bne.n	8012282 <HAL_DMA_Init+0x38e>
 801227e:	2301      	movs	r3, #1
 8012280:	e000      	b.n	8012284 <HAL_DMA_Init+0x390>
 8012282:	2300      	movs	r3, #0
 8012284:	2b00      	cmp	r3, #0
 8012286:	f000 8097 	beq.w	80123b8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	4a24      	ldr	r2, [pc, #144]	@ (8012320 <HAL_DMA_Init+0x42c>)
 8012290:	4293      	cmp	r3, r2
 8012292:	d021      	beq.n	80122d8 <HAL_DMA_Init+0x3e4>
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	4a22      	ldr	r2, [pc, #136]	@ (8012324 <HAL_DMA_Init+0x430>)
 801229a:	4293      	cmp	r3, r2
 801229c:	d01c      	beq.n	80122d8 <HAL_DMA_Init+0x3e4>
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	4a21      	ldr	r2, [pc, #132]	@ (8012328 <HAL_DMA_Init+0x434>)
 80122a4:	4293      	cmp	r3, r2
 80122a6:	d017      	beq.n	80122d8 <HAL_DMA_Init+0x3e4>
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	4a1f      	ldr	r2, [pc, #124]	@ (801232c <HAL_DMA_Init+0x438>)
 80122ae:	4293      	cmp	r3, r2
 80122b0:	d012      	beq.n	80122d8 <HAL_DMA_Init+0x3e4>
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	4a1e      	ldr	r2, [pc, #120]	@ (8012330 <HAL_DMA_Init+0x43c>)
 80122b8:	4293      	cmp	r3, r2
 80122ba:	d00d      	beq.n	80122d8 <HAL_DMA_Init+0x3e4>
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	4a1c      	ldr	r2, [pc, #112]	@ (8012334 <HAL_DMA_Init+0x440>)
 80122c2:	4293      	cmp	r3, r2
 80122c4:	d008      	beq.n	80122d8 <HAL_DMA_Init+0x3e4>
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	4a1b      	ldr	r2, [pc, #108]	@ (8012338 <HAL_DMA_Init+0x444>)
 80122cc:	4293      	cmp	r3, r2
 80122ce:	d003      	beq.n	80122d8 <HAL_DMA_Init+0x3e4>
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	4a19      	ldr	r2, [pc, #100]	@ (801233c <HAL_DMA_Init+0x448>)
 80122d6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	2202      	movs	r2, #2
 80122dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2200      	movs	r2, #0
 80122e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80122f0:	697a      	ldr	r2, [r7, #20]
 80122f2:	4b13      	ldr	r3, [pc, #76]	@ (8012340 <HAL_DMA_Init+0x44c>)
 80122f4:	4013      	ands	r3, r2
 80122f6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	689b      	ldr	r3, [r3, #8]
 80122fc:	2b40      	cmp	r3, #64	@ 0x40
 80122fe:	d021      	beq.n	8012344 <HAL_DMA_Init+0x450>
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	689b      	ldr	r3, [r3, #8]
 8012304:	2b80      	cmp	r3, #128	@ 0x80
 8012306:	d102      	bne.n	801230e <HAL_DMA_Init+0x41a>
 8012308:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801230c:	e01b      	b.n	8012346 <HAL_DMA_Init+0x452>
 801230e:	2300      	movs	r3, #0
 8012310:	e019      	b.n	8012346 <HAL_DMA_Init+0x452>
 8012312:	bf00      	nop
 8012314:	fe10803f 	.word	0xfe10803f
 8012318:	5c001000 	.word	0x5c001000
 801231c:	ffff0000 	.word	0xffff0000
 8012320:	58025408 	.word	0x58025408
 8012324:	5802541c 	.word	0x5802541c
 8012328:	58025430 	.word	0x58025430
 801232c:	58025444 	.word	0x58025444
 8012330:	58025458 	.word	0x58025458
 8012334:	5802546c 	.word	0x5802546c
 8012338:	58025480 	.word	0x58025480
 801233c:	58025494 	.word	0x58025494
 8012340:	fffe000f 	.word	0xfffe000f
 8012344:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8012346:	687a      	ldr	r2, [r7, #4]
 8012348:	68d2      	ldr	r2, [r2, #12]
 801234a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801234c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	691b      	ldr	r3, [r3, #16]
 8012352:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8012354:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	695b      	ldr	r3, [r3, #20]
 801235a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801235c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	699b      	ldr	r3, [r3, #24]
 8012362:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8012364:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	69db      	ldr	r3, [r3, #28]
 801236a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801236c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	6a1b      	ldr	r3, [r3, #32]
 8012372:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8012374:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8012376:	697a      	ldr	r2, [r7, #20]
 8012378:	4313      	orrs	r3, r2
 801237a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	697a      	ldr	r2, [r7, #20]
 8012382:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	461a      	mov	r2, r3
 801238a:	4b6e      	ldr	r3, [pc, #440]	@ (8012544 <HAL_DMA_Init+0x650>)
 801238c:	4413      	add	r3, r2
 801238e:	4a6e      	ldr	r2, [pc, #440]	@ (8012548 <HAL_DMA_Init+0x654>)
 8012390:	fba2 2303 	umull	r2, r3, r2, r3
 8012394:	091b      	lsrs	r3, r3, #4
 8012396:	009a      	lsls	r2, r3, #2
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801239c:	6878      	ldr	r0, [r7, #4]
 801239e:	f001 ff63 	bl	8014268 <DMA_CalcBaseAndBitshift>
 80123a2:	4603      	mov	r3, r0
 80123a4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80123aa:	f003 031f 	and.w	r3, r3, #31
 80123ae:	2201      	movs	r2, #1
 80123b0:	409a      	lsls	r2, r3
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	605a      	str	r2, [r3, #4]
 80123b6:	e008      	b.n	80123ca <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	2240      	movs	r2, #64	@ 0x40
 80123bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	2203      	movs	r2, #3
 80123c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80123c6:	2301      	movs	r3, #1
 80123c8:	e0b7      	b.n	801253a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	4a5f      	ldr	r2, [pc, #380]	@ (801254c <HAL_DMA_Init+0x658>)
 80123d0:	4293      	cmp	r3, r2
 80123d2:	d072      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	4a5d      	ldr	r2, [pc, #372]	@ (8012550 <HAL_DMA_Init+0x65c>)
 80123da:	4293      	cmp	r3, r2
 80123dc:	d06d      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	4a5c      	ldr	r2, [pc, #368]	@ (8012554 <HAL_DMA_Init+0x660>)
 80123e4:	4293      	cmp	r3, r2
 80123e6:	d068      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	4a5a      	ldr	r2, [pc, #360]	@ (8012558 <HAL_DMA_Init+0x664>)
 80123ee:	4293      	cmp	r3, r2
 80123f0:	d063      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	4a59      	ldr	r2, [pc, #356]	@ (801255c <HAL_DMA_Init+0x668>)
 80123f8:	4293      	cmp	r3, r2
 80123fa:	d05e      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	4a57      	ldr	r2, [pc, #348]	@ (8012560 <HAL_DMA_Init+0x66c>)
 8012402:	4293      	cmp	r3, r2
 8012404:	d059      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	4a56      	ldr	r2, [pc, #344]	@ (8012564 <HAL_DMA_Init+0x670>)
 801240c:	4293      	cmp	r3, r2
 801240e:	d054      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	4a54      	ldr	r2, [pc, #336]	@ (8012568 <HAL_DMA_Init+0x674>)
 8012416:	4293      	cmp	r3, r2
 8012418:	d04f      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	4a53      	ldr	r2, [pc, #332]	@ (801256c <HAL_DMA_Init+0x678>)
 8012420:	4293      	cmp	r3, r2
 8012422:	d04a      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	4a51      	ldr	r2, [pc, #324]	@ (8012570 <HAL_DMA_Init+0x67c>)
 801242a:	4293      	cmp	r3, r2
 801242c:	d045      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	4a50      	ldr	r2, [pc, #320]	@ (8012574 <HAL_DMA_Init+0x680>)
 8012434:	4293      	cmp	r3, r2
 8012436:	d040      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	4a4e      	ldr	r2, [pc, #312]	@ (8012578 <HAL_DMA_Init+0x684>)
 801243e:	4293      	cmp	r3, r2
 8012440:	d03b      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	4a4d      	ldr	r2, [pc, #308]	@ (801257c <HAL_DMA_Init+0x688>)
 8012448:	4293      	cmp	r3, r2
 801244a:	d036      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	4a4b      	ldr	r2, [pc, #300]	@ (8012580 <HAL_DMA_Init+0x68c>)
 8012452:	4293      	cmp	r3, r2
 8012454:	d031      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	4a4a      	ldr	r2, [pc, #296]	@ (8012584 <HAL_DMA_Init+0x690>)
 801245c:	4293      	cmp	r3, r2
 801245e:	d02c      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	4a48      	ldr	r2, [pc, #288]	@ (8012588 <HAL_DMA_Init+0x694>)
 8012466:	4293      	cmp	r3, r2
 8012468:	d027      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	4a47      	ldr	r2, [pc, #284]	@ (801258c <HAL_DMA_Init+0x698>)
 8012470:	4293      	cmp	r3, r2
 8012472:	d022      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	4a45      	ldr	r2, [pc, #276]	@ (8012590 <HAL_DMA_Init+0x69c>)
 801247a:	4293      	cmp	r3, r2
 801247c:	d01d      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	4a44      	ldr	r2, [pc, #272]	@ (8012594 <HAL_DMA_Init+0x6a0>)
 8012484:	4293      	cmp	r3, r2
 8012486:	d018      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	4a42      	ldr	r2, [pc, #264]	@ (8012598 <HAL_DMA_Init+0x6a4>)
 801248e:	4293      	cmp	r3, r2
 8012490:	d013      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	4a41      	ldr	r2, [pc, #260]	@ (801259c <HAL_DMA_Init+0x6a8>)
 8012498:	4293      	cmp	r3, r2
 801249a:	d00e      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	4a3f      	ldr	r2, [pc, #252]	@ (80125a0 <HAL_DMA_Init+0x6ac>)
 80124a2:	4293      	cmp	r3, r2
 80124a4:	d009      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	4a3e      	ldr	r2, [pc, #248]	@ (80125a4 <HAL_DMA_Init+0x6b0>)
 80124ac:	4293      	cmp	r3, r2
 80124ae:	d004      	beq.n	80124ba <HAL_DMA_Init+0x5c6>
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	4a3c      	ldr	r2, [pc, #240]	@ (80125a8 <HAL_DMA_Init+0x6b4>)
 80124b6:	4293      	cmp	r3, r2
 80124b8:	d101      	bne.n	80124be <HAL_DMA_Init+0x5ca>
 80124ba:	2301      	movs	r3, #1
 80124bc:	e000      	b.n	80124c0 <HAL_DMA_Init+0x5cc>
 80124be:	2300      	movs	r3, #0
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d032      	beq.n	801252a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f001 fffd 	bl	80144c4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	689b      	ldr	r3, [r3, #8]
 80124ce:	2b80      	cmp	r3, #128	@ 0x80
 80124d0:	d102      	bne.n	80124d8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	2200      	movs	r2, #0
 80124d6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	685a      	ldr	r2, [r3, #4]
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80124e0:	b2d2      	uxtb	r2, r2
 80124e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80124e8:	687a      	ldr	r2, [r7, #4]
 80124ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80124ec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	685b      	ldr	r3, [r3, #4]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d010      	beq.n	8012518 <HAL_DMA_Init+0x624>
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	685b      	ldr	r3, [r3, #4]
 80124fa:	2b08      	cmp	r3, #8
 80124fc:	d80c      	bhi.n	8012518 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80124fe:	6878      	ldr	r0, [r7, #4]
 8012500:	f002 f87a 	bl	80145f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012508:	2200      	movs	r2, #0
 801250a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012510:	687a      	ldr	r2, [r7, #4]
 8012512:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8012514:	605a      	str	r2, [r3, #4]
 8012516:	e008      	b.n	801252a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2200      	movs	r2, #0
 801251c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	2200      	movs	r2, #0
 8012522:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2200      	movs	r2, #0
 8012528:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	2200      	movs	r2, #0
 801252e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	2201      	movs	r2, #1
 8012534:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8012538:	2300      	movs	r3, #0
}
 801253a:	4618      	mov	r0, r3
 801253c:	3718      	adds	r7, #24
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
 8012542:	bf00      	nop
 8012544:	a7fdabf8 	.word	0xa7fdabf8
 8012548:	cccccccd 	.word	0xcccccccd
 801254c:	40020010 	.word	0x40020010
 8012550:	40020028 	.word	0x40020028
 8012554:	40020040 	.word	0x40020040
 8012558:	40020058 	.word	0x40020058
 801255c:	40020070 	.word	0x40020070
 8012560:	40020088 	.word	0x40020088
 8012564:	400200a0 	.word	0x400200a0
 8012568:	400200b8 	.word	0x400200b8
 801256c:	40020410 	.word	0x40020410
 8012570:	40020428 	.word	0x40020428
 8012574:	40020440 	.word	0x40020440
 8012578:	40020458 	.word	0x40020458
 801257c:	40020470 	.word	0x40020470
 8012580:	40020488 	.word	0x40020488
 8012584:	400204a0 	.word	0x400204a0
 8012588:	400204b8 	.word	0x400204b8
 801258c:	58025408 	.word	0x58025408
 8012590:	5802541c 	.word	0x5802541c
 8012594:	58025430 	.word	0x58025430
 8012598:	58025444 	.word	0x58025444
 801259c:	58025458 	.word	0x58025458
 80125a0:	5802546c 	.word	0x5802546c
 80125a4:	58025480 	.word	0x58025480
 80125a8:	58025494 	.word	0x58025494

080125ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b086      	sub	sp, #24
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	60f8      	str	r0, [r7, #12]
 80125b4:	60b9      	str	r1, [r7, #8]
 80125b6:	607a      	str	r2, [r7, #4]
 80125b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80125ba:	2300      	movs	r3, #0
 80125bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d101      	bne.n	80125c8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80125c4:	2301      	movs	r3, #1
 80125c6:	e226      	b.n	8012a16 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80125ce:	2b01      	cmp	r3, #1
 80125d0:	d101      	bne.n	80125d6 <HAL_DMA_Start_IT+0x2a>
 80125d2:	2302      	movs	r3, #2
 80125d4:	e21f      	b.n	8012a16 <HAL_DMA_Start_IT+0x46a>
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	2201      	movs	r2, #1
 80125da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80125e4:	b2db      	uxtb	r3, r3
 80125e6:	2b01      	cmp	r3, #1
 80125e8:	f040 820a 	bne.w	8012a00 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	2202      	movs	r2, #2
 80125f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	2200      	movs	r2, #0
 80125f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	4a68      	ldr	r2, [pc, #416]	@ (80127a0 <HAL_DMA_Start_IT+0x1f4>)
 8012600:	4293      	cmp	r3, r2
 8012602:	d04a      	beq.n	801269a <HAL_DMA_Start_IT+0xee>
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	4a66      	ldr	r2, [pc, #408]	@ (80127a4 <HAL_DMA_Start_IT+0x1f8>)
 801260a:	4293      	cmp	r3, r2
 801260c:	d045      	beq.n	801269a <HAL_DMA_Start_IT+0xee>
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	4a65      	ldr	r2, [pc, #404]	@ (80127a8 <HAL_DMA_Start_IT+0x1fc>)
 8012614:	4293      	cmp	r3, r2
 8012616:	d040      	beq.n	801269a <HAL_DMA_Start_IT+0xee>
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	4a63      	ldr	r2, [pc, #396]	@ (80127ac <HAL_DMA_Start_IT+0x200>)
 801261e:	4293      	cmp	r3, r2
 8012620:	d03b      	beq.n	801269a <HAL_DMA_Start_IT+0xee>
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	4a62      	ldr	r2, [pc, #392]	@ (80127b0 <HAL_DMA_Start_IT+0x204>)
 8012628:	4293      	cmp	r3, r2
 801262a:	d036      	beq.n	801269a <HAL_DMA_Start_IT+0xee>
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	4a60      	ldr	r2, [pc, #384]	@ (80127b4 <HAL_DMA_Start_IT+0x208>)
 8012632:	4293      	cmp	r3, r2
 8012634:	d031      	beq.n	801269a <HAL_DMA_Start_IT+0xee>
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	4a5f      	ldr	r2, [pc, #380]	@ (80127b8 <HAL_DMA_Start_IT+0x20c>)
 801263c:	4293      	cmp	r3, r2
 801263e:	d02c      	beq.n	801269a <HAL_DMA_Start_IT+0xee>
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	4a5d      	ldr	r2, [pc, #372]	@ (80127bc <HAL_DMA_Start_IT+0x210>)
 8012646:	4293      	cmp	r3, r2
 8012648:	d027      	beq.n	801269a <HAL_DMA_Start_IT+0xee>
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	4a5c      	ldr	r2, [pc, #368]	@ (80127c0 <HAL_DMA_Start_IT+0x214>)
 8012650:	4293      	cmp	r3, r2
 8012652:	d022      	beq.n	801269a <HAL_DMA_Start_IT+0xee>
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	4a5a      	ldr	r2, [pc, #360]	@ (80127c4 <HAL_DMA_Start_IT+0x218>)
 801265a:	4293      	cmp	r3, r2
 801265c:	d01d      	beq.n	801269a <HAL_DMA_Start_IT+0xee>
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	4a59      	ldr	r2, [pc, #356]	@ (80127c8 <HAL_DMA_Start_IT+0x21c>)
 8012664:	4293      	cmp	r3, r2
 8012666:	d018      	beq.n	801269a <HAL_DMA_Start_IT+0xee>
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	4a57      	ldr	r2, [pc, #348]	@ (80127cc <HAL_DMA_Start_IT+0x220>)
 801266e:	4293      	cmp	r3, r2
 8012670:	d013      	beq.n	801269a <HAL_DMA_Start_IT+0xee>
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	4a56      	ldr	r2, [pc, #344]	@ (80127d0 <HAL_DMA_Start_IT+0x224>)
 8012678:	4293      	cmp	r3, r2
 801267a:	d00e      	beq.n	801269a <HAL_DMA_Start_IT+0xee>
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	4a54      	ldr	r2, [pc, #336]	@ (80127d4 <HAL_DMA_Start_IT+0x228>)
 8012682:	4293      	cmp	r3, r2
 8012684:	d009      	beq.n	801269a <HAL_DMA_Start_IT+0xee>
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	4a53      	ldr	r2, [pc, #332]	@ (80127d8 <HAL_DMA_Start_IT+0x22c>)
 801268c:	4293      	cmp	r3, r2
 801268e:	d004      	beq.n	801269a <HAL_DMA_Start_IT+0xee>
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	4a51      	ldr	r2, [pc, #324]	@ (80127dc <HAL_DMA_Start_IT+0x230>)
 8012696:	4293      	cmp	r3, r2
 8012698:	d108      	bne.n	80126ac <HAL_DMA_Start_IT+0x100>
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	681a      	ldr	r2, [r3, #0]
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	f022 0201 	bic.w	r2, r2, #1
 80126a8:	601a      	str	r2, [r3, #0]
 80126aa:	e007      	b.n	80126bc <HAL_DMA_Start_IT+0x110>
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	681a      	ldr	r2, [r3, #0]
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	f022 0201 	bic.w	r2, r2, #1
 80126ba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	687a      	ldr	r2, [r7, #4]
 80126c0:	68b9      	ldr	r1, [r7, #8]
 80126c2:	68f8      	ldr	r0, [r7, #12]
 80126c4:	f001 fc24 	bl	8013f10 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	4a34      	ldr	r2, [pc, #208]	@ (80127a0 <HAL_DMA_Start_IT+0x1f4>)
 80126ce:	4293      	cmp	r3, r2
 80126d0:	d04a      	beq.n	8012768 <HAL_DMA_Start_IT+0x1bc>
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	4a33      	ldr	r2, [pc, #204]	@ (80127a4 <HAL_DMA_Start_IT+0x1f8>)
 80126d8:	4293      	cmp	r3, r2
 80126da:	d045      	beq.n	8012768 <HAL_DMA_Start_IT+0x1bc>
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	4a31      	ldr	r2, [pc, #196]	@ (80127a8 <HAL_DMA_Start_IT+0x1fc>)
 80126e2:	4293      	cmp	r3, r2
 80126e4:	d040      	beq.n	8012768 <HAL_DMA_Start_IT+0x1bc>
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	4a30      	ldr	r2, [pc, #192]	@ (80127ac <HAL_DMA_Start_IT+0x200>)
 80126ec:	4293      	cmp	r3, r2
 80126ee:	d03b      	beq.n	8012768 <HAL_DMA_Start_IT+0x1bc>
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	4a2e      	ldr	r2, [pc, #184]	@ (80127b0 <HAL_DMA_Start_IT+0x204>)
 80126f6:	4293      	cmp	r3, r2
 80126f8:	d036      	beq.n	8012768 <HAL_DMA_Start_IT+0x1bc>
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	4a2d      	ldr	r2, [pc, #180]	@ (80127b4 <HAL_DMA_Start_IT+0x208>)
 8012700:	4293      	cmp	r3, r2
 8012702:	d031      	beq.n	8012768 <HAL_DMA_Start_IT+0x1bc>
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	4a2b      	ldr	r2, [pc, #172]	@ (80127b8 <HAL_DMA_Start_IT+0x20c>)
 801270a:	4293      	cmp	r3, r2
 801270c:	d02c      	beq.n	8012768 <HAL_DMA_Start_IT+0x1bc>
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	4a2a      	ldr	r2, [pc, #168]	@ (80127bc <HAL_DMA_Start_IT+0x210>)
 8012714:	4293      	cmp	r3, r2
 8012716:	d027      	beq.n	8012768 <HAL_DMA_Start_IT+0x1bc>
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	4a28      	ldr	r2, [pc, #160]	@ (80127c0 <HAL_DMA_Start_IT+0x214>)
 801271e:	4293      	cmp	r3, r2
 8012720:	d022      	beq.n	8012768 <HAL_DMA_Start_IT+0x1bc>
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	4a27      	ldr	r2, [pc, #156]	@ (80127c4 <HAL_DMA_Start_IT+0x218>)
 8012728:	4293      	cmp	r3, r2
 801272a:	d01d      	beq.n	8012768 <HAL_DMA_Start_IT+0x1bc>
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	4a25      	ldr	r2, [pc, #148]	@ (80127c8 <HAL_DMA_Start_IT+0x21c>)
 8012732:	4293      	cmp	r3, r2
 8012734:	d018      	beq.n	8012768 <HAL_DMA_Start_IT+0x1bc>
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	4a24      	ldr	r2, [pc, #144]	@ (80127cc <HAL_DMA_Start_IT+0x220>)
 801273c:	4293      	cmp	r3, r2
 801273e:	d013      	beq.n	8012768 <HAL_DMA_Start_IT+0x1bc>
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	4a22      	ldr	r2, [pc, #136]	@ (80127d0 <HAL_DMA_Start_IT+0x224>)
 8012746:	4293      	cmp	r3, r2
 8012748:	d00e      	beq.n	8012768 <HAL_DMA_Start_IT+0x1bc>
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	4a21      	ldr	r2, [pc, #132]	@ (80127d4 <HAL_DMA_Start_IT+0x228>)
 8012750:	4293      	cmp	r3, r2
 8012752:	d009      	beq.n	8012768 <HAL_DMA_Start_IT+0x1bc>
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	4a1f      	ldr	r2, [pc, #124]	@ (80127d8 <HAL_DMA_Start_IT+0x22c>)
 801275a:	4293      	cmp	r3, r2
 801275c:	d004      	beq.n	8012768 <HAL_DMA_Start_IT+0x1bc>
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	4a1e      	ldr	r2, [pc, #120]	@ (80127dc <HAL_DMA_Start_IT+0x230>)
 8012764:	4293      	cmp	r3, r2
 8012766:	d101      	bne.n	801276c <HAL_DMA_Start_IT+0x1c0>
 8012768:	2301      	movs	r3, #1
 801276a:	e000      	b.n	801276e <HAL_DMA_Start_IT+0x1c2>
 801276c:	2300      	movs	r3, #0
 801276e:	2b00      	cmp	r3, #0
 8012770:	d036      	beq.n	80127e0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	f023 021e 	bic.w	r2, r3, #30
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	f042 0216 	orr.w	r2, r2, #22
 8012784:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801278a:	2b00      	cmp	r3, #0
 801278c:	d03e      	beq.n	801280c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	681a      	ldr	r2, [r3, #0]
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	f042 0208 	orr.w	r2, r2, #8
 801279c:	601a      	str	r2, [r3, #0]
 801279e:	e035      	b.n	801280c <HAL_DMA_Start_IT+0x260>
 80127a0:	40020010 	.word	0x40020010
 80127a4:	40020028 	.word	0x40020028
 80127a8:	40020040 	.word	0x40020040
 80127ac:	40020058 	.word	0x40020058
 80127b0:	40020070 	.word	0x40020070
 80127b4:	40020088 	.word	0x40020088
 80127b8:	400200a0 	.word	0x400200a0
 80127bc:	400200b8 	.word	0x400200b8
 80127c0:	40020410 	.word	0x40020410
 80127c4:	40020428 	.word	0x40020428
 80127c8:	40020440 	.word	0x40020440
 80127cc:	40020458 	.word	0x40020458
 80127d0:	40020470 	.word	0x40020470
 80127d4:	40020488 	.word	0x40020488
 80127d8:	400204a0 	.word	0x400204a0
 80127dc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	f023 020e 	bic.w	r2, r3, #14
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	f042 020a 	orr.w	r2, r2, #10
 80127f2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d007      	beq.n	801280c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	681a      	ldr	r2, [r3, #0]
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	f042 0204 	orr.w	r2, r2, #4
 801280a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	4a83      	ldr	r2, [pc, #524]	@ (8012a20 <HAL_DMA_Start_IT+0x474>)
 8012812:	4293      	cmp	r3, r2
 8012814:	d072      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	4a82      	ldr	r2, [pc, #520]	@ (8012a24 <HAL_DMA_Start_IT+0x478>)
 801281c:	4293      	cmp	r3, r2
 801281e:	d06d      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	4a80      	ldr	r2, [pc, #512]	@ (8012a28 <HAL_DMA_Start_IT+0x47c>)
 8012826:	4293      	cmp	r3, r2
 8012828:	d068      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	4a7f      	ldr	r2, [pc, #508]	@ (8012a2c <HAL_DMA_Start_IT+0x480>)
 8012830:	4293      	cmp	r3, r2
 8012832:	d063      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	4a7d      	ldr	r2, [pc, #500]	@ (8012a30 <HAL_DMA_Start_IT+0x484>)
 801283a:	4293      	cmp	r3, r2
 801283c:	d05e      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	4a7c      	ldr	r2, [pc, #496]	@ (8012a34 <HAL_DMA_Start_IT+0x488>)
 8012844:	4293      	cmp	r3, r2
 8012846:	d059      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	4a7a      	ldr	r2, [pc, #488]	@ (8012a38 <HAL_DMA_Start_IT+0x48c>)
 801284e:	4293      	cmp	r3, r2
 8012850:	d054      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	4a79      	ldr	r2, [pc, #484]	@ (8012a3c <HAL_DMA_Start_IT+0x490>)
 8012858:	4293      	cmp	r3, r2
 801285a:	d04f      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	4a77      	ldr	r2, [pc, #476]	@ (8012a40 <HAL_DMA_Start_IT+0x494>)
 8012862:	4293      	cmp	r3, r2
 8012864:	d04a      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	4a76      	ldr	r2, [pc, #472]	@ (8012a44 <HAL_DMA_Start_IT+0x498>)
 801286c:	4293      	cmp	r3, r2
 801286e:	d045      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	4a74      	ldr	r2, [pc, #464]	@ (8012a48 <HAL_DMA_Start_IT+0x49c>)
 8012876:	4293      	cmp	r3, r2
 8012878:	d040      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	4a73      	ldr	r2, [pc, #460]	@ (8012a4c <HAL_DMA_Start_IT+0x4a0>)
 8012880:	4293      	cmp	r3, r2
 8012882:	d03b      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	4a71      	ldr	r2, [pc, #452]	@ (8012a50 <HAL_DMA_Start_IT+0x4a4>)
 801288a:	4293      	cmp	r3, r2
 801288c:	d036      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	4a70      	ldr	r2, [pc, #448]	@ (8012a54 <HAL_DMA_Start_IT+0x4a8>)
 8012894:	4293      	cmp	r3, r2
 8012896:	d031      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	4a6e      	ldr	r2, [pc, #440]	@ (8012a58 <HAL_DMA_Start_IT+0x4ac>)
 801289e:	4293      	cmp	r3, r2
 80128a0:	d02c      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	4a6d      	ldr	r2, [pc, #436]	@ (8012a5c <HAL_DMA_Start_IT+0x4b0>)
 80128a8:	4293      	cmp	r3, r2
 80128aa:	d027      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	4a6b      	ldr	r2, [pc, #428]	@ (8012a60 <HAL_DMA_Start_IT+0x4b4>)
 80128b2:	4293      	cmp	r3, r2
 80128b4:	d022      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	4a6a      	ldr	r2, [pc, #424]	@ (8012a64 <HAL_DMA_Start_IT+0x4b8>)
 80128bc:	4293      	cmp	r3, r2
 80128be:	d01d      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	4a68      	ldr	r2, [pc, #416]	@ (8012a68 <HAL_DMA_Start_IT+0x4bc>)
 80128c6:	4293      	cmp	r3, r2
 80128c8:	d018      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	4a67      	ldr	r2, [pc, #412]	@ (8012a6c <HAL_DMA_Start_IT+0x4c0>)
 80128d0:	4293      	cmp	r3, r2
 80128d2:	d013      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	4a65      	ldr	r2, [pc, #404]	@ (8012a70 <HAL_DMA_Start_IT+0x4c4>)
 80128da:	4293      	cmp	r3, r2
 80128dc:	d00e      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	4a64      	ldr	r2, [pc, #400]	@ (8012a74 <HAL_DMA_Start_IT+0x4c8>)
 80128e4:	4293      	cmp	r3, r2
 80128e6:	d009      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	4a62      	ldr	r2, [pc, #392]	@ (8012a78 <HAL_DMA_Start_IT+0x4cc>)
 80128ee:	4293      	cmp	r3, r2
 80128f0:	d004      	beq.n	80128fc <HAL_DMA_Start_IT+0x350>
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	4a61      	ldr	r2, [pc, #388]	@ (8012a7c <HAL_DMA_Start_IT+0x4d0>)
 80128f8:	4293      	cmp	r3, r2
 80128fa:	d101      	bne.n	8012900 <HAL_DMA_Start_IT+0x354>
 80128fc:	2301      	movs	r3, #1
 80128fe:	e000      	b.n	8012902 <HAL_DMA_Start_IT+0x356>
 8012900:	2300      	movs	r3, #0
 8012902:	2b00      	cmp	r3, #0
 8012904:	d01a      	beq.n	801293c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012910:	2b00      	cmp	r3, #0
 8012912:	d007      	beq.n	8012924 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012918:	681a      	ldr	r2, [r3, #0]
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801291e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012922:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012928:	2b00      	cmp	r3, #0
 801292a:	d007      	beq.n	801293c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012930:	681a      	ldr	r2, [r3, #0]
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012936:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801293a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	4a37      	ldr	r2, [pc, #220]	@ (8012a20 <HAL_DMA_Start_IT+0x474>)
 8012942:	4293      	cmp	r3, r2
 8012944:	d04a      	beq.n	80129dc <HAL_DMA_Start_IT+0x430>
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	4a36      	ldr	r2, [pc, #216]	@ (8012a24 <HAL_DMA_Start_IT+0x478>)
 801294c:	4293      	cmp	r3, r2
 801294e:	d045      	beq.n	80129dc <HAL_DMA_Start_IT+0x430>
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	4a34      	ldr	r2, [pc, #208]	@ (8012a28 <HAL_DMA_Start_IT+0x47c>)
 8012956:	4293      	cmp	r3, r2
 8012958:	d040      	beq.n	80129dc <HAL_DMA_Start_IT+0x430>
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	4a33      	ldr	r2, [pc, #204]	@ (8012a2c <HAL_DMA_Start_IT+0x480>)
 8012960:	4293      	cmp	r3, r2
 8012962:	d03b      	beq.n	80129dc <HAL_DMA_Start_IT+0x430>
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	4a31      	ldr	r2, [pc, #196]	@ (8012a30 <HAL_DMA_Start_IT+0x484>)
 801296a:	4293      	cmp	r3, r2
 801296c:	d036      	beq.n	80129dc <HAL_DMA_Start_IT+0x430>
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	4a30      	ldr	r2, [pc, #192]	@ (8012a34 <HAL_DMA_Start_IT+0x488>)
 8012974:	4293      	cmp	r3, r2
 8012976:	d031      	beq.n	80129dc <HAL_DMA_Start_IT+0x430>
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	4a2e      	ldr	r2, [pc, #184]	@ (8012a38 <HAL_DMA_Start_IT+0x48c>)
 801297e:	4293      	cmp	r3, r2
 8012980:	d02c      	beq.n	80129dc <HAL_DMA_Start_IT+0x430>
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	4a2d      	ldr	r2, [pc, #180]	@ (8012a3c <HAL_DMA_Start_IT+0x490>)
 8012988:	4293      	cmp	r3, r2
 801298a:	d027      	beq.n	80129dc <HAL_DMA_Start_IT+0x430>
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	4a2b      	ldr	r2, [pc, #172]	@ (8012a40 <HAL_DMA_Start_IT+0x494>)
 8012992:	4293      	cmp	r3, r2
 8012994:	d022      	beq.n	80129dc <HAL_DMA_Start_IT+0x430>
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	4a2a      	ldr	r2, [pc, #168]	@ (8012a44 <HAL_DMA_Start_IT+0x498>)
 801299c:	4293      	cmp	r3, r2
 801299e:	d01d      	beq.n	80129dc <HAL_DMA_Start_IT+0x430>
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	4a28      	ldr	r2, [pc, #160]	@ (8012a48 <HAL_DMA_Start_IT+0x49c>)
 80129a6:	4293      	cmp	r3, r2
 80129a8:	d018      	beq.n	80129dc <HAL_DMA_Start_IT+0x430>
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	4a27      	ldr	r2, [pc, #156]	@ (8012a4c <HAL_DMA_Start_IT+0x4a0>)
 80129b0:	4293      	cmp	r3, r2
 80129b2:	d013      	beq.n	80129dc <HAL_DMA_Start_IT+0x430>
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	4a25      	ldr	r2, [pc, #148]	@ (8012a50 <HAL_DMA_Start_IT+0x4a4>)
 80129ba:	4293      	cmp	r3, r2
 80129bc:	d00e      	beq.n	80129dc <HAL_DMA_Start_IT+0x430>
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	4a24      	ldr	r2, [pc, #144]	@ (8012a54 <HAL_DMA_Start_IT+0x4a8>)
 80129c4:	4293      	cmp	r3, r2
 80129c6:	d009      	beq.n	80129dc <HAL_DMA_Start_IT+0x430>
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	4a22      	ldr	r2, [pc, #136]	@ (8012a58 <HAL_DMA_Start_IT+0x4ac>)
 80129ce:	4293      	cmp	r3, r2
 80129d0:	d004      	beq.n	80129dc <HAL_DMA_Start_IT+0x430>
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	4a21      	ldr	r2, [pc, #132]	@ (8012a5c <HAL_DMA_Start_IT+0x4b0>)
 80129d8:	4293      	cmp	r3, r2
 80129da:	d108      	bne.n	80129ee <HAL_DMA_Start_IT+0x442>
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	681a      	ldr	r2, [r3, #0]
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	f042 0201 	orr.w	r2, r2, #1
 80129ea:	601a      	str	r2, [r3, #0]
 80129ec:	e012      	b.n	8012a14 <HAL_DMA_Start_IT+0x468>
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	681a      	ldr	r2, [r3, #0]
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	f042 0201 	orr.w	r2, r2, #1
 80129fc:	601a      	str	r2, [r3, #0]
 80129fe:	e009      	b.n	8012a14 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012a06:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8012a10:	2301      	movs	r3, #1
 8012a12:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8012a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a16:	4618      	mov	r0, r3
 8012a18:	3718      	adds	r7, #24
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	bd80      	pop	{r7, pc}
 8012a1e:	bf00      	nop
 8012a20:	40020010 	.word	0x40020010
 8012a24:	40020028 	.word	0x40020028
 8012a28:	40020040 	.word	0x40020040
 8012a2c:	40020058 	.word	0x40020058
 8012a30:	40020070 	.word	0x40020070
 8012a34:	40020088 	.word	0x40020088
 8012a38:	400200a0 	.word	0x400200a0
 8012a3c:	400200b8 	.word	0x400200b8
 8012a40:	40020410 	.word	0x40020410
 8012a44:	40020428 	.word	0x40020428
 8012a48:	40020440 	.word	0x40020440
 8012a4c:	40020458 	.word	0x40020458
 8012a50:	40020470 	.word	0x40020470
 8012a54:	40020488 	.word	0x40020488
 8012a58:	400204a0 	.word	0x400204a0
 8012a5c:	400204b8 	.word	0x400204b8
 8012a60:	58025408 	.word	0x58025408
 8012a64:	5802541c 	.word	0x5802541c
 8012a68:	58025430 	.word	0x58025430
 8012a6c:	58025444 	.word	0x58025444
 8012a70:	58025458 	.word	0x58025458
 8012a74:	5802546c 	.word	0x5802546c
 8012a78:	58025480 	.word	0x58025480
 8012a7c:	58025494 	.word	0x58025494

08012a80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b086      	sub	sp, #24
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8012a88:	f7ff f888 	bl	8011b9c <HAL_GetTick>
 8012a8c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d101      	bne.n	8012a98 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8012a94:	2301      	movs	r3, #1
 8012a96:	e2dc      	b.n	8013052 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012a9e:	b2db      	uxtb	r3, r3
 8012aa0:	2b02      	cmp	r3, #2
 8012aa2:	d008      	beq.n	8012ab6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	2280      	movs	r2, #128	@ 0x80
 8012aa8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	2200      	movs	r2, #0
 8012aae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	e2cd      	b.n	8013052 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	4a76      	ldr	r2, [pc, #472]	@ (8012c94 <HAL_DMA_Abort+0x214>)
 8012abc:	4293      	cmp	r3, r2
 8012abe:	d04a      	beq.n	8012b56 <HAL_DMA_Abort+0xd6>
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	4a74      	ldr	r2, [pc, #464]	@ (8012c98 <HAL_DMA_Abort+0x218>)
 8012ac6:	4293      	cmp	r3, r2
 8012ac8:	d045      	beq.n	8012b56 <HAL_DMA_Abort+0xd6>
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	4a73      	ldr	r2, [pc, #460]	@ (8012c9c <HAL_DMA_Abort+0x21c>)
 8012ad0:	4293      	cmp	r3, r2
 8012ad2:	d040      	beq.n	8012b56 <HAL_DMA_Abort+0xd6>
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	4a71      	ldr	r2, [pc, #452]	@ (8012ca0 <HAL_DMA_Abort+0x220>)
 8012ada:	4293      	cmp	r3, r2
 8012adc:	d03b      	beq.n	8012b56 <HAL_DMA_Abort+0xd6>
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	4a70      	ldr	r2, [pc, #448]	@ (8012ca4 <HAL_DMA_Abort+0x224>)
 8012ae4:	4293      	cmp	r3, r2
 8012ae6:	d036      	beq.n	8012b56 <HAL_DMA_Abort+0xd6>
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	4a6e      	ldr	r2, [pc, #440]	@ (8012ca8 <HAL_DMA_Abort+0x228>)
 8012aee:	4293      	cmp	r3, r2
 8012af0:	d031      	beq.n	8012b56 <HAL_DMA_Abort+0xd6>
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	4a6d      	ldr	r2, [pc, #436]	@ (8012cac <HAL_DMA_Abort+0x22c>)
 8012af8:	4293      	cmp	r3, r2
 8012afa:	d02c      	beq.n	8012b56 <HAL_DMA_Abort+0xd6>
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	4a6b      	ldr	r2, [pc, #428]	@ (8012cb0 <HAL_DMA_Abort+0x230>)
 8012b02:	4293      	cmp	r3, r2
 8012b04:	d027      	beq.n	8012b56 <HAL_DMA_Abort+0xd6>
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	4a6a      	ldr	r2, [pc, #424]	@ (8012cb4 <HAL_DMA_Abort+0x234>)
 8012b0c:	4293      	cmp	r3, r2
 8012b0e:	d022      	beq.n	8012b56 <HAL_DMA_Abort+0xd6>
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	4a68      	ldr	r2, [pc, #416]	@ (8012cb8 <HAL_DMA_Abort+0x238>)
 8012b16:	4293      	cmp	r3, r2
 8012b18:	d01d      	beq.n	8012b56 <HAL_DMA_Abort+0xd6>
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	4a67      	ldr	r2, [pc, #412]	@ (8012cbc <HAL_DMA_Abort+0x23c>)
 8012b20:	4293      	cmp	r3, r2
 8012b22:	d018      	beq.n	8012b56 <HAL_DMA_Abort+0xd6>
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	4a65      	ldr	r2, [pc, #404]	@ (8012cc0 <HAL_DMA_Abort+0x240>)
 8012b2a:	4293      	cmp	r3, r2
 8012b2c:	d013      	beq.n	8012b56 <HAL_DMA_Abort+0xd6>
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	4a64      	ldr	r2, [pc, #400]	@ (8012cc4 <HAL_DMA_Abort+0x244>)
 8012b34:	4293      	cmp	r3, r2
 8012b36:	d00e      	beq.n	8012b56 <HAL_DMA_Abort+0xd6>
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	4a62      	ldr	r2, [pc, #392]	@ (8012cc8 <HAL_DMA_Abort+0x248>)
 8012b3e:	4293      	cmp	r3, r2
 8012b40:	d009      	beq.n	8012b56 <HAL_DMA_Abort+0xd6>
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	4a61      	ldr	r2, [pc, #388]	@ (8012ccc <HAL_DMA_Abort+0x24c>)
 8012b48:	4293      	cmp	r3, r2
 8012b4a:	d004      	beq.n	8012b56 <HAL_DMA_Abort+0xd6>
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	4a5f      	ldr	r2, [pc, #380]	@ (8012cd0 <HAL_DMA_Abort+0x250>)
 8012b52:	4293      	cmp	r3, r2
 8012b54:	d101      	bne.n	8012b5a <HAL_DMA_Abort+0xda>
 8012b56:	2301      	movs	r3, #1
 8012b58:	e000      	b.n	8012b5c <HAL_DMA_Abort+0xdc>
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d013      	beq.n	8012b88 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	681a      	ldr	r2, [r3, #0]
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	f022 021e 	bic.w	r2, r2, #30
 8012b6e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	695a      	ldr	r2, [r3, #20]
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8012b7e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	617b      	str	r3, [r7, #20]
 8012b86:	e00a      	b.n	8012b9e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	681a      	ldr	r2, [r3, #0]
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	f022 020e 	bic.w	r2, r2, #14
 8012b96:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	4a3c      	ldr	r2, [pc, #240]	@ (8012c94 <HAL_DMA_Abort+0x214>)
 8012ba4:	4293      	cmp	r3, r2
 8012ba6:	d072      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	4a3a      	ldr	r2, [pc, #232]	@ (8012c98 <HAL_DMA_Abort+0x218>)
 8012bae:	4293      	cmp	r3, r2
 8012bb0:	d06d      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	4a39      	ldr	r2, [pc, #228]	@ (8012c9c <HAL_DMA_Abort+0x21c>)
 8012bb8:	4293      	cmp	r3, r2
 8012bba:	d068      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	4a37      	ldr	r2, [pc, #220]	@ (8012ca0 <HAL_DMA_Abort+0x220>)
 8012bc2:	4293      	cmp	r3, r2
 8012bc4:	d063      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	4a36      	ldr	r2, [pc, #216]	@ (8012ca4 <HAL_DMA_Abort+0x224>)
 8012bcc:	4293      	cmp	r3, r2
 8012bce:	d05e      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	4a34      	ldr	r2, [pc, #208]	@ (8012ca8 <HAL_DMA_Abort+0x228>)
 8012bd6:	4293      	cmp	r3, r2
 8012bd8:	d059      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	4a33      	ldr	r2, [pc, #204]	@ (8012cac <HAL_DMA_Abort+0x22c>)
 8012be0:	4293      	cmp	r3, r2
 8012be2:	d054      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	4a31      	ldr	r2, [pc, #196]	@ (8012cb0 <HAL_DMA_Abort+0x230>)
 8012bea:	4293      	cmp	r3, r2
 8012bec:	d04f      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	4a30      	ldr	r2, [pc, #192]	@ (8012cb4 <HAL_DMA_Abort+0x234>)
 8012bf4:	4293      	cmp	r3, r2
 8012bf6:	d04a      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	4a2e      	ldr	r2, [pc, #184]	@ (8012cb8 <HAL_DMA_Abort+0x238>)
 8012bfe:	4293      	cmp	r3, r2
 8012c00:	d045      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	4a2d      	ldr	r2, [pc, #180]	@ (8012cbc <HAL_DMA_Abort+0x23c>)
 8012c08:	4293      	cmp	r3, r2
 8012c0a:	d040      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	4a2b      	ldr	r2, [pc, #172]	@ (8012cc0 <HAL_DMA_Abort+0x240>)
 8012c12:	4293      	cmp	r3, r2
 8012c14:	d03b      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	4a2a      	ldr	r2, [pc, #168]	@ (8012cc4 <HAL_DMA_Abort+0x244>)
 8012c1c:	4293      	cmp	r3, r2
 8012c1e:	d036      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	4a28      	ldr	r2, [pc, #160]	@ (8012cc8 <HAL_DMA_Abort+0x248>)
 8012c26:	4293      	cmp	r3, r2
 8012c28:	d031      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	4a27      	ldr	r2, [pc, #156]	@ (8012ccc <HAL_DMA_Abort+0x24c>)
 8012c30:	4293      	cmp	r3, r2
 8012c32:	d02c      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	4a25      	ldr	r2, [pc, #148]	@ (8012cd0 <HAL_DMA_Abort+0x250>)
 8012c3a:	4293      	cmp	r3, r2
 8012c3c:	d027      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	4a24      	ldr	r2, [pc, #144]	@ (8012cd4 <HAL_DMA_Abort+0x254>)
 8012c44:	4293      	cmp	r3, r2
 8012c46:	d022      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	4a22      	ldr	r2, [pc, #136]	@ (8012cd8 <HAL_DMA_Abort+0x258>)
 8012c4e:	4293      	cmp	r3, r2
 8012c50:	d01d      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	4a21      	ldr	r2, [pc, #132]	@ (8012cdc <HAL_DMA_Abort+0x25c>)
 8012c58:	4293      	cmp	r3, r2
 8012c5a:	d018      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	4a1f      	ldr	r2, [pc, #124]	@ (8012ce0 <HAL_DMA_Abort+0x260>)
 8012c62:	4293      	cmp	r3, r2
 8012c64:	d013      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	4a1e      	ldr	r2, [pc, #120]	@ (8012ce4 <HAL_DMA_Abort+0x264>)
 8012c6c:	4293      	cmp	r3, r2
 8012c6e:	d00e      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	4a1c      	ldr	r2, [pc, #112]	@ (8012ce8 <HAL_DMA_Abort+0x268>)
 8012c76:	4293      	cmp	r3, r2
 8012c78:	d009      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8012cec <HAL_DMA_Abort+0x26c>)
 8012c80:	4293      	cmp	r3, r2
 8012c82:	d004      	beq.n	8012c8e <HAL_DMA_Abort+0x20e>
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	4a19      	ldr	r2, [pc, #100]	@ (8012cf0 <HAL_DMA_Abort+0x270>)
 8012c8a:	4293      	cmp	r3, r2
 8012c8c:	d132      	bne.n	8012cf4 <HAL_DMA_Abort+0x274>
 8012c8e:	2301      	movs	r3, #1
 8012c90:	e031      	b.n	8012cf6 <HAL_DMA_Abort+0x276>
 8012c92:	bf00      	nop
 8012c94:	40020010 	.word	0x40020010
 8012c98:	40020028 	.word	0x40020028
 8012c9c:	40020040 	.word	0x40020040
 8012ca0:	40020058 	.word	0x40020058
 8012ca4:	40020070 	.word	0x40020070
 8012ca8:	40020088 	.word	0x40020088
 8012cac:	400200a0 	.word	0x400200a0
 8012cb0:	400200b8 	.word	0x400200b8
 8012cb4:	40020410 	.word	0x40020410
 8012cb8:	40020428 	.word	0x40020428
 8012cbc:	40020440 	.word	0x40020440
 8012cc0:	40020458 	.word	0x40020458
 8012cc4:	40020470 	.word	0x40020470
 8012cc8:	40020488 	.word	0x40020488
 8012ccc:	400204a0 	.word	0x400204a0
 8012cd0:	400204b8 	.word	0x400204b8
 8012cd4:	58025408 	.word	0x58025408
 8012cd8:	5802541c 	.word	0x5802541c
 8012cdc:	58025430 	.word	0x58025430
 8012ce0:	58025444 	.word	0x58025444
 8012ce4:	58025458 	.word	0x58025458
 8012ce8:	5802546c 	.word	0x5802546c
 8012cec:	58025480 	.word	0x58025480
 8012cf0:	58025494 	.word	0x58025494
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d007      	beq.n	8012d0a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012cfe:	681a      	ldr	r2, [r3, #0]
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012d04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8012d08:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	4a6d      	ldr	r2, [pc, #436]	@ (8012ec4 <HAL_DMA_Abort+0x444>)
 8012d10:	4293      	cmp	r3, r2
 8012d12:	d04a      	beq.n	8012daa <HAL_DMA_Abort+0x32a>
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	4a6b      	ldr	r2, [pc, #428]	@ (8012ec8 <HAL_DMA_Abort+0x448>)
 8012d1a:	4293      	cmp	r3, r2
 8012d1c:	d045      	beq.n	8012daa <HAL_DMA_Abort+0x32a>
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	4a6a      	ldr	r2, [pc, #424]	@ (8012ecc <HAL_DMA_Abort+0x44c>)
 8012d24:	4293      	cmp	r3, r2
 8012d26:	d040      	beq.n	8012daa <HAL_DMA_Abort+0x32a>
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	4a68      	ldr	r2, [pc, #416]	@ (8012ed0 <HAL_DMA_Abort+0x450>)
 8012d2e:	4293      	cmp	r3, r2
 8012d30:	d03b      	beq.n	8012daa <HAL_DMA_Abort+0x32a>
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	4a67      	ldr	r2, [pc, #412]	@ (8012ed4 <HAL_DMA_Abort+0x454>)
 8012d38:	4293      	cmp	r3, r2
 8012d3a:	d036      	beq.n	8012daa <HAL_DMA_Abort+0x32a>
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	4a65      	ldr	r2, [pc, #404]	@ (8012ed8 <HAL_DMA_Abort+0x458>)
 8012d42:	4293      	cmp	r3, r2
 8012d44:	d031      	beq.n	8012daa <HAL_DMA_Abort+0x32a>
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	4a64      	ldr	r2, [pc, #400]	@ (8012edc <HAL_DMA_Abort+0x45c>)
 8012d4c:	4293      	cmp	r3, r2
 8012d4e:	d02c      	beq.n	8012daa <HAL_DMA_Abort+0x32a>
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	4a62      	ldr	r2, [pc, #392]	@ (8012ee0 <HAL_DMA_Abort+0x460>)
 8012d56:	4293      	cmp	r3, r2
 8012d58:	d027      	beq.n	8012daa <HAL_DMA_Abort+0x32a>
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	4a61      	ldr	r2, [pc, #388]	@ (8012ee4 <HAL_DMA_Abort+0x464>)
 8012d60:	4293      	cmp	r3, r2
 8012d62:	d022      	beq.n	8012daa <HAL_DMA_Abort+0x32a>
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	4a5f      	ldr	r2, [pc, #380]	@ (8012ee8 <HAL_DMA_Abort+0x468>)
 8012d6a:	4293      	cmp	r3, r2
 8012d6c:	d01d      	beq.n	8012daa <HAL_DMA_Abort+0x32a>
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	4a5e      	ldr	r2, [pc, #376]	@ (8012eec <HAL_DMA_Abort+0x46c>)
 8012d74:	4293      	cmp	r3, r2
 8012d76:	d018      	beq.n	8012daa <HAL_DMA_Abort+0x32a>
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	4a5c      	ldr	r2, [pc, #368]	@ (8012ef0 <HAL_DMA_Abort+0x470>)
 8012d7e:	4293      	cmp	r3, r2
 8012d80:	d013      	beq.n	8012daa <HAL_DMA_Abort+0x32a>
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	4a5b      	ldr	r2, [pc, #364]	@ (8012ef4 <HAL_DMA_Abort+0x474>)
 8012d88:	4293      	cmp	r3, r2
 8012d8a:	d00e      	beq.n	8012daa <HAL_DMA_Abort+0x32a>
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	4a59      	ldr	r2, [pc, #356]	@ (8012ef8 <HAL_DMA_Abort+0x478>)
 8012d92:	4293      	cmp	r3, r2
 8012d94:	d009      	beq.n	8012daa <HAL_DMA_Abort+0x32a>
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	4a58      	ldr	r2, [pc, #352]	@ (8012efc <HAL_DMA_Abort+0x47c>)
 8012d9c:	4293      	cmp	r3, r2
 8012d9e:	d004      	beq.n	8012daa <HAL_DMA_Abort+0x32a>
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	4a56      	ldr	r2, [pc, #344]	@ (8012f00 <HAL_DMA_Abort+0x480>)
 8012da6:	4293      	cmp	r3, r2
 8012da8:	d108      	bne.n	8012dbc <HAL_DMA_Abort+0x33c>
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	681a      	ldr	r2, [r3, #0]
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	f022 0201 	bic.w	r2, r2, #1
 8012db8:	601a      	str	r2, [r3, #0]
 8012dba:	e007      	b.n	8012dcc <HAL_DMA_Abort+0x34c>
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	681a      	ldr	r2, [r3, #0]
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	f022 0201 	bic.w	r2, r2, #1
 8012dca:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8012dcc:	e013      	b.n	8012df6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8012dce:	f7fe fee5 	bl	8011b9c <HAL_GetTick>
 8012dd2:	4602      	mov	r2, r0
 8012dd4:	693b      	ldr	r3, [r7, #16]
 8012dd6:	1ad3      	subs	r3, r2, r3
 8012dd8:	2b05      	cmp	r3, #5
 8012dda:	d90c      	bls.n	8012df6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	2220      	movs	r2, #32
 8012de0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2203      	movs	r2, #3
 8012de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	2200      	movs	r2, #0
 8012dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8012df2:	2301      	movs	r3, #1
 8012df4:	e12d      	b.n	8013052 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8012df6:	697b      	ldr	r3, [r7, #20]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	f003 0301 	and.w	r3, r3, #1
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d1e5      	bne.n	8012dce <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	4a2f      	ldr	r2, [pc, #188]	@ (8012ec4 <HAL_DMA_Abort+0x444>)
 8012e08:	4293      	cmp	r3, r2
 8012e0a:	d04a      	beq.n	8012ea2 <HAL_DMA_Abort+0x422>
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	4a2d      	ldr	r2, [pc, #180]	@ (8012ec8 <HAL_DMA_Abort+0x448>)
 8012e12:	4293      	cmp	r3, r2
 8012e14:	d045      	beq.n	8012ea2 <HAL_DMA_Abort+0x422>
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	4a2c      	ldr	r2, [pc, #176]	@ (8012ecc <HAL_DMA_Abort+0x44c>)
 8012e1c:	4293      	cmp	r3, r2
 8012e1e:	d040      	beq.n	8012ea2 <HAL_DMA_Abort+0x422>
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	4a2a      	ldr	r2, [pc, #168]	@ (8012ed0 <HAL_DMA_Abort+0x450>)
 8012e26:	4293      	cmp	r3, r2
 8012e28:	d03b      	beq.n	8012ea2 <HAL_DMA_Abort+0x422>
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	4a29      	ldr	r2, [pc, #164]	@ (8012ed4 <HAL_DMA_Abort+0x454>)
 8012e30:	4293      	cmp	r3, r2
 8012e32:	d036      	beq.n	8012ea2 <HAL_DMA_Abort+0x422>
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	4a27      	ldr	r2, [pc, #156]	@ (8012ed8 <HAL_DMA_Abort+0x458>)
 8012e3a:	4293      	cmp	r3, r2
 8012e3c:	d031      	beq.n	8012ea2 <HAL_DMA_Abort+0x422>
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	4a26      	ldr	r2, [pc, #152]	@ (8012edc <HAL_DMA_Abort+0x45c>)
 8012e44:	4293      	cmp	r3, r2
 8012e46:	d02c      	beq.n	8012ea2 <HAL_DMA_Abort+0x422>
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	4a24      	ldr	r2, [pc, #144]	@ (8012ee0 <HAL_DMA_Abort+0x460>)
 8012e4e:	4293      	cmp	r3, r2
 8012e50:	d027      	beq.n	8012ea2 <HAL_DMA_Abort+0x422>
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	4a23      	ldr	r2, [pc, #140]	@ (8012ee4 <HAL_DMA_Abort+0x464>)
 8012e58:	4293      	cmp	r3, r2
 8012e5a:	d022      	beq.n	8012ea2 <HAL_DMA_Abort+0x422>
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	4a21      	ldr	r2, [pc, #132]	@ (8012ee8 <HAL_DMA_Abort+0x468>)
 8012e62:	4293      	cmp	r3, r2
 8012e64:	d01d      	beq.n	8012ea2 <HAL_DMA_Abort+0x422>
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	4a20      	ldr	r2, [pc, #128]	@ (8012eec <HAL_DMA_Abort+0x46c>)
 8012e6c:	4293      	cmp	r3, r2
 8012e6e:	d018      	beq.n	8012ea2 <HAL_DMA_Abort+0x422>
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	4a1e      	ldr	r2, [pc, #120]	@ (8012ef0 <HAL_DMA_Abort+0x470>)
 8012e76:	4293      	cmp	r3, r2
 8012e78:	d013      	beq.n	8012ea2 <HAL_DMA_Abort+0x422>
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	4a1d      	ldr	r2, [pc, #116]	@ (8012ef4 <HAL_DMA_Abort+0x474>)
 8012e80:	4293      	cmp	r3, r2
 8012e82:	d00e      	beq.n	8012ea2 <HAL_DMA_Abort+0x422>
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	4a1b      	ldr	r2, [pc, #108]	@ (8012ef8 <HAL_DMA_Abort+0x478>)
 8012e8a:	4293      	cmp	r3, r2
 8012e8c:	d009      	beq.n	8012ea2 <HAL_DMA_Abort+0x422>
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	4a1a      	ldr	r2, [pc, #104]	@ (8012efc <HAL_DMA_Abort+0x47c>)
 8012e94:	4293      	cmp	r3, r2
 8012e96:	d004      	beq.n	8012ea2 <HAL_DMA_Abort+0x422>
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	4a18      	ldr	r2, [pc, #96]	@ (8012f00 <HAL_DMA_Abort+0x480>)
 8012e9e:	4293      	cmp	r3, r2
 8012ea0:	d101      	bne.n	8012ea6 <HAL_DMA_Abort+0x426>
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	e000      	b.n	8012ea8 <HAL_DMA_Abort+0x428>
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d02b      	beq.n	8012f04 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012eb0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012eb6:	f003 031f 	and.w	r3, r3, #31
 8012eba:	223f      	movs	r2, #63	@ 0x3f
 8012ebc:	409a      	lsls	r2, r3
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	609a      	str	r2, [r3, #8]
 8012ec2:	e02a      	b.n	8012f1a <HAL_DMA_Abort+0x49a>
 8012ec4:	40020010 	.word	0x40020010
 8012ec8:	40020028 	.word	0x40020028
 8012ecc:	40020040 	.word	0x40020040
 8012ed0:	40020058 	.word	0x40020058
 8012ed4:	40020070 	.word	0x40020070
 8012ed8:	40020088 	.word	0x40020088
 8012edc:	400200a0 	.word	0x400200a0
 8012ee0:	400200b8 	.word	0x400200b8
 8012ee4:	40020410 	.word	0x40020410
 8012ee8:	40020428 	.word	0x40020428
 8012eec:	40020440 	.word	0x40020440
 8012ef0:	40020458 	.word	0x40020458
 8012ef4:	40020470 	.word	0x40020470
 8012ef8:	40020488 	.word	0x40020488
 8012efc:	400204a0 	.word	0x400204a0
 8012f00:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012f08:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012f0e:	f003 031f 	and.w	r3, r3, #31
 8012f12:	2201      	movs	r2, #1
 8012f14:	409a      	lsls	r2, r3
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	4a4f      	ldr	r2, [pc, #316]	@ (801305c <HAL_DMA_Abort+0x5dc>)
 8012f20:	4293      	cmp	r3, r2
 8012f22:	d072      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	4a4d      	ldr	r2, [pc, #308]	@ (8013060 <HAL_DMA_Abort+0x5e0>)
 8012f2a:	4293      	cmp	r3, r2
 8012f2c:	d06d      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	4a4c      	ldr	r2, [pc, #304]	@ (8013064 <HAL_DMA_Abort+0x5e4>)
 8012f34:	4293      	cmp	r3, r2
 8012f36:	d068      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	4a4a      	ldr	r2, [pc, #296]	@ (8013068 <HAL_DMA_Abort+0x5e8>)
 8012f3e:	4293      	cmp	r3, r2
 8012f40:	d063      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	4a49      	ldr	r2, [pc, #292]	@ (801306c <HAL_DMA_Abort+0x5ec>)
 8012f48:	4293      	cmp	r3, r2
 8012f4a:	d05e      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	4a47      	ldr	r2, [pc, #284]	@ (8013070 <HAL_DMA_Abort+0x5f0>)
 8012f52:	4293      	cmp	r3, r2
 8012f54:	d059      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	4a46      	ldr	r2, [pc, #280]	@ (8013074 <HAL_DMA_Abort+0x5f4>)
 8012f5c:	4293      	cmp	r3, r2
 8012f5e:	d054      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	4a44      	ldr	r2, [pc, #272]	@ (8013078 <HAL_DMA_Abort+0x5f8>)
 8012f66:	4293      	cmp	r3, r2
 8012f68:	d04f      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	4a43      	ldr	r2, [pc, #268]	@ (801307c <HAL_DMA_Abort+0x5fc>)
 8012f70:	4293      	cmp	r3, r2
 8012f72:	d04a      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	4a41      	ldr	r2, [pc, #260]	@ (8013080 <HAL_DMA_Abort+0x600>)
 8012f7a:	4293      	cmp	r3, r2
 8012f7c:	d045      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	4a40      	ldr	r2, [pc, #256]	@ (8013084 <HAL_DMA_Abort+0x604>)
 8012f84:	4293      	cmp	r3, r2
 8012f86:	d040      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	4a3e      	ldr	r2, [pc, #248]	@ (8013088 <HAL_DMA_Abort+0x608>)
 8012f8e:	4293      	cmp	r3, r2
 8012f90:	d03b      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	4a3d      	ldr	r2, [pc, #244]	@ (801308c <HAL_DMA_Abort+0x60c>)
 8012f98:	4293      	cmp	r3, r2
 8012f9a:	d036      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	4a3b      	ldr	r2, [pc, #236]	@ (8013090 <HAL_DMA_Abort+0x610>)
 8012fa2:	4293      	cmp	r3, r2
 8012fa4:	d031      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	4a3a      	ldr	r2, [pc, #232]	@ (8013094 <HAL_DMA_Abort+0x614>)
 8012fac:	4293      	cmp	r3, r2
 8012fae:	d02c      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	4a38      	ldr	r2, [pc, #224]	@ (8013098 <HAL_DMA_Abort+0x618>)
 8012fb6:	4293      	cmp	r3, r2
 8012fb8:	d027      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	4a37      	ldr	r2, [pc, #220]	@ (801309c <HAL_DMA_Abort+0x61c>)
 8012fc0:	4293      	cmp	r3, r2
 8012fc2:	d022      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	4a35      	ldr	r2, [pc, #212]	@ (80130a0 <HAL_DMA_Abort+0x620>)
 8012fca:	4293      	cmp	r3, r2
 8012fcc:	d01d      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	4a34      	ldr	r2, [pc, #208]	@ (80130a4 <HAL_DMA_Abort+0x624>)
 8012fd4:	4293      	cmp	r3, r2
 8012fd6:	d018      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	4a32      	ldr	r2, [pc, #200]	@ (80130a8 <HAL_DMA_Abort+0x628>)
 8012fde:	4293      	cmp	r3, r2
 8012fe0:	d013      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	4a31      	ldr	r2, [pc, #196]	@ (80130ac <HAL_DMA_Abort+0x62c>)
 8012fe8:	4293      	cmp	r3, r2
 8012fea:	d00e      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	4a2f      	ldr	r2, [pc, #188]	@ (80130b0 <HAL_DMA_Abort+0x630>)
 8012ff2:	4293      	cmp	r3, r2
 8012ff4:	d009      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	4a2e      	ldr	r2, [pc, #184]	@ (80130b4 <HAL_DMA_Abort+0x634>)
 8012ffc:	4293      	cmp	r3, r2
 8012ffe:	d004      	beq.n	801300a <HAL_DMA_Abort+0x58a>
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	4a2c      	ldr	r2, [pc, #176]	@ (80130b8 <HAL_DMA_Abort+0x638>)
 8013006:	4293      	cmp	r3, r2
 8013008:	d101      	bne.n	801300e <HAL_DMA_Abort+0x58e>
 801300a:	2301      	movs	r3, #1
 801300c:	e000      	b.n	8013010 <HAL_DMA_Abort+0x590>
 801300e:	2300      	movs	r3, #0
 8013010:	2b00      	cmp	r3, #0
 8013012:	d015      	beq.n	8013040 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013018:	687a      	ldr	r2, [r7, #4]
 801301a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801301c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013022:	2b00      	cmp	r3, #0
 8013024:	d00c      	beq.n	8013040 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801302a:	681a      	ldr	r2, [r3, #0]
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013030:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8013034:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801303a:	687a      	ldr	r2, [r7, #4]
 801303c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801303e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2201      	movs	r2, #1
 8013044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2200      	movs	r2, #0
 801304c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8013050:	2300      	movs	r3, #0
}
 8013052:	4618      	mov	r0, r3
 8013054:	3718      	adds	r7, #24
 8013056:	46bd      	mov	sp, r7
 8013058:	bd80      	pop	{r7, pc}
 801305a:	bf00      	nop
 801305c:	40020010 	.word	0x40020010
 8013060:	40020028 	.word	0x40020028
 8013064:	40020040 	.word	0x40020040
 8013068:	40020058 	.word	0x40020058
 801306c:	40020070 	.word	0x40020070
 8013070:	40020088 	.word	0x40020088
 8013074:	400200a0 	.word	0x400200a0
 8013078:	400200b8 	.word	0x400200b8
 801307c:	40020410 	.word	0x40020410
 8013080:	40020428 	.word	0x40020428
 8013084:	40020440 	.word	0x40020440
 8013088:	40020458 	.word	0x40020458
 801308c:	40020470 	.word	0x40020470
 8013090:	40020488 	.word	0x40020488
 8013094:	400204a0 	.word	0x400204a0
 8013098:	400204b8 	.word	0x400204b8
 801309c:	58025408 	.word	0x58025408
 80130a0:	5802541c 	.word	0x5802541c
 80130a4:	58025430 	.word	0x58025430
 80130a8:	58025444 	.word	0x58025444
 80130ac:	58025458 	.word	0x58025458
 80130b0:	5802546c 	.word	0x5802546c
 80130b4:	58025480 	.word	0x58025480
 80130b8:	58025494 	.word	0x58025494

080130bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b08a      	sub	sp, #40	@ 0x28
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80130c4:	2300      	movs	r3, #0
 80130c6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80130c8:	4b67      	ldr	r3, [pc, #412]	@ (8013268 <HAL_DMA_IRQHandler+0x1ac>)
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	4a67      	ldr	r2, [pc, #412]	@ (801326c <HAL_DMA_IRQHandler+0x1b0>)
 80130ce:	fba2 2303 	umull	r2, r3, r2, r3
 80130d2:	0a9b      	lsrs	r3, r3, #10
 80130d4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80130da:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80130e0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80130e2:	6a3b      	ldr	r3, [r7, #32]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80130e8:	69fb      	ldr	r3, [r7, #28]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	4a5f      	ldr	r2, [pc, #380]	@ (8013270 <HAL_DMA_IRQHandler+0x1b4>)
 80130f4:	4293      	cmp	r3, r2
 80130f6:	d04a      	beq.n	801318e <HAL_DMA_IRQHandler+0xd2>
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	4a5d      	ldr	r2, [pc, #372]	@ (8013274 <HAL_DMA_IRQHandler+0x1b8>)
 80130fe:	4293      	cmp	r3, r2
 8013100:	d045      	beq.n	801318e <HAL_DMA_IRQHandler+0xd2>
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	4a5c      	ldr	r2, [pc, #368]	@ (8013278 <HAL_DMA_IRQHandler+0x1bc>)
 8013108:	4293      	cmp	r3, r2
 801310a:	d040      	beq.n	801318e <HAL_DMA_IRQHandler+0xd2>
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	4a5a      	ldr	r2, [pc, #360]	@ (801327c <HAL_DMA_IRQHandler+0x1c0>)
 8013112:	4293      	cmp	r3, r2
 8013114:	d03b      	beq.n	801318e <HAL_DMA_IRQHandler+0xd2>
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	4a59      	ldr	r2, [pc, #356]	@ (8013280 <HAL_DMA_IRQHandler+0x1c4>)
 801311c:	4293      	cmp	r3, r2
 801311e:	d036      	beq.n	801318e <HAL_DMA_IRQHandler+0xd2>
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	4a57      	ldr	r2, [pc, #348]	@ (8013284 <HAL_DMA_IRQHandler+0x1c8>)
 8013126:	4293      	cmp	r3, r2
 8013128:	d031      	beq.n	801318e <HAL_DMA_IRQHandler+0xd2>
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	4a56      	ldr	r2, [pc, #344]	@ (8013288 <HAL_DMA_IRQHandler+0x1cc>)
 8013130:	4293      	cmp	r3, r2
 8013132:	d02c      	beq.n	801318e <HAL_DMA_IRQHandler+0xd2>
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	4a54      	ldr	r2, [pc, #336]	@ (801328c <HAL_DMA_IRQHandler+0x1d0>)
 801313a:	4293      	cmp	r3, r2
 801313c:	d027      	beq.n	801318e <HAL_DMA_IRQHandler+0xd2>
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	4a53      	ldr	r2, [pc, #332]	@ (8013290 <HAL_DMA_IRQHandler+0x1d4>)
 8013144:	4293      	cmp	r3, r2
 8013146:	d022      	beq.n	801318e <HAL_DMA_IRQHandler+0xd2>
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	4a51      	ldr	r2, [pc, #324]	@ (8013294 <HAL_DMA_IRQHandler+0x1d8>)
 801314e:	4293      	cmp	r3, r2
 8013150:	d01d      	beq.n	801318e <HAL_DMA_IRQHandler+0xd2>
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	4a50      	ldr	r2, [pc, #320]	@ (8013298 <HAL_DMA_IRQHandler+0x1dc>)
 8013158:	4293      	cmp	r3, r2
 801315a:	d018      	beq.n	801318e <HAL_DMA_IRQHandler+0xd2>
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	4a4e      	ldr	r2, [pc, #312]	@ (801329c <HAL_DMA_IRQHandler+0x1e0>)
 8013162:	4293      	cmp	r3, r2
 8013164:	d013      	beq.n	801318e <HAL_DMA_IRQHandler+0xd2>
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	4a4d      	ldr	r2, [pc, #308]	@ (80132a0 <HAL_DMA_IRQHandler+0x1e4>)
 801316c:	4293      	cmp	r3, r2
 801316e:	d00e      	beq.n	801318e <HAL_DMA_IRQHandler+0xd2>
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	4a4b      	ldr	r2, [pc, #300]	@ (80132a4 <HAL_DMA_IRQHandler+0x1e8>)
 8013176:	4293      	cmp	r3, r2
 8013178:	d009      	beq.n	801318e <HAL_DMA_IRQHandler+0xd2>
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	4a4a      	ldr	r2, [pc, #296]	@ (80132a8 <HAL_DMA_IRQHandler+0x1ec>)
 8013180:	4293      	cmp	r3, r2
 8013182:	d004      	beq.n	801318e <HAL_DMA_IRQHandler+0xd2>
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	4a48      	ldr	r2, [pc, #288]	@ (80132ac <HAL_DMA_IRQHandler+0x1f0>)
 801318a:	4293      	cmp	r3, r2
 801318c:	d101      	bne.n	8013192 <HAL_DMA_IRQHandler+0xd6>
 801318e:	2301      	movs	r3, #1
 8013190:	e000      	b.n	8013194 <HAL_DMA_IRQHandler+0xd8>
 8013192:	2300      	movs	r3, #0
 8013194:	2b00      	cmp	r3, #0
 8013196:	f000 842b 	beq.w	80139f0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801319e:	f003 031f 	and.w	r3, r3, #31
 80131a2:	2208      	movs	r2, #8
 80131a4:	409a      	lsls	r2, r3
 80131a6:	69bb      	ldr	r3, [r7, #24]
 80131a8:	4013      	ands	r3, r2
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	f000 80a2 	beq.w	80132f4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	4a2e      	ldr	r2, [pc, #184]	@ (8013270 <HAL_DMA_IRQHandler+0x1b4>)
 80131b6:	4293      	cmp	r3, r2
 80131b8:	d04a      	beq.n	8013250 <HAL_DMA_IRQHandler+0x194>
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	4a2d      	ldr	r2, [pc, #180]	@ (8013274 <HAL_DMA_IRQHandler+0x1b8>)
 80131c0:	4293      	cmp	r3, r2
 80131c2:	d045      	beq.n	8013250 <HAL_DMA_IRQHandler+0x194>
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	4a2b      	ldr	r2, [pc, #172]	@ (8013278 <HAL_DMA_IRQHandler+0x1bc>)
 80131ca:	4293      	cmp	r3, r2
 80131cc:	d040      	beq.n	8013250 <HAL_DMA_IRQHandler+0x194>
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	4a2a      	ldr	r2, [pc, #168]	@ (801327c <HAL_DMA_IRQHandler+0x1c0>)
 80131d4:	4293      	cmp	r3, r2
 80131d6:	d03b      	beq.n	8013250 <HAL_DMA_IRQHandler+0x194>
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	4a28      	ldr	r2, [pc, #160]	@ (8013280 <HAL_DMA_IRQHandler+0x1c4>)
 80131de:	4293      	cmp	r3, r2
 80131e0:	d036      	beq.n	8013250 <HAL_DMA_IRQHandler+0x194>
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	4a27      	ldr	r2, [pc, #156]	@ (8013284 <HAL_DMA_IRQHandler+0x1c8>)
 80131e8:	4293      	cmp	r3, r2
 80131ea:	d031      	beq.n	8013250 <HAL_DMA_IRQHandler+0x194>
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	4a25      	ldr	r2, [pc, #148]	@ (8013288 <HAL_DMA_IRQHandler+0x1cc>)
 80131f2:	4293      	cmp	r3, r2
 80131f4:	d02c      	beq.n	8013250 <HAL_DMA_IRQHandler+0x194>
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	4a24      	ldr	r2, [pc, #144]	@ (801328c <HAL_DMA_IRQHandler+0x1d0>)
 80131fc:	4293      	cmp	r3, r2
 80131fe:	d027      	beq.n	8013250 <HAL_DMA_IRQHandler+0x194>
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	4a22      	ldr	r2, [pc, #136]	@ (8013290 <HAL_DMA_IRQHandler+0x1d4>)
 8013206:	4293      	cmp	r3, r2
 8013208:	d022      	beq.n	8013250 <HAL_DMA_IRQHandler+0x194>
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	4a21      	ldr	r2, [pc, #132]	@ (8013294 <HAL_DMA_IRQHandler+0x1d8>)
 8013210:	4293      	cmp	r3, r2
 8013212:	d01d      	beq.n	8013250 <HAL_DMA_IRQHandler+0x194>
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	4a1f      	ldr	r2, [pc, #124]	@ (8013298 <HAL_DMA_IRQHandler+0x1dc>)
 801321a:	4293      	cmp	r3, r2
 801321c:	d018      	beq.n	8013250 <HAL_DMA_IRQHandler+0x194>
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	4a1e      	ldr	r2, [pc, #120]	@ (801329c <HAL_DMA_IRQHandler+0x1e0>)
 8013224:	4293      	cmp	r3, r2
 8013226:	d013      	beq.n	8013250 <HAL_DMA_IRQHandler+0x194>
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	4a1c      	ldr	r2, [pc, #112]	@ (80132a0 <HAL_DMA_IRQHandler+0x1e4>)
 801322e:	4293      	cmp	r3, r2
 8013230:	d00e      	beq.n	8013250 <HAL_DMA_IRQHandler+0x194>
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	4a1b      	ldr	r2, [pc, #108]	@ (80132a4 <HAL_DMA_IRQHandler+0x1e8>)
 8013238:	4293      	cmp	r3, r2
 801323a:	d009      	beq.n	8013250 <HAL_DMA_IRQHandler+0x194>
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	4a19      	ldr	r2, [pc, #100]	@ (80132a8 <HAL_DMA_IRQHandler+0x1ec>)
 8013242:	4293      	cmp	r3, r2
 8013244:	d004      	beq.n	8013250 <HAL_DMA_IRQHandler+0x194>
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	4a18      	ldr	r2, [pc, #96]	@ (80132ac <HAL_DMA_IRQHandler+0x1f0>)
 801324c:	4293      	cmp	r3, r2
 801324e:	d12f      	bne.n	80132b0 <HAL_DMA_IRQHandler+0x1f4>
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	f003 0304 	and.w	r3, r3, #4
 801325a:	2b00      	cmp	r3, #0
 801325c:	bf14      	ite	ne
 801325e:	2301      	movne	r3, #1
 8013260:	2300      	moveq	r3, #0
 8013262:	b2db      	uxtb	r3, r3
 8013264:	e02e      	b.n	80132c4 <HAL_DMA_IRQHandler+0x208>
 8013266:	bf00      	nop
 8013268:	24000000 	.word	0x24000000
 801326c:	1b4e81b5 	.word	0x1b4e81b5
 8013270:	40020010 	.word	0x40020010
 8013274:	40020028 	.word	0x40020028
 8013278:	40020040 	.word	0x40020040
 801327c:	40020058 	.word	0x40020058
 8013280:	40020070 	.word	0x40020070
 8013284:	40020088 	.word	0x40020088
 8013288:	400200a0 	.word	0x400200a0
 801328c:	400200b8 	.word	0x400200b8
 8013290:	40020410 	.word	0x40020410
 8013294:	40020428 	.word	0x40020428
 8013298:	40020440 	.word	0x40020440
 801329c:	40020458 	.word	0x40020458
 80132a0:	40020470 	.word	0x40020470
 80132a4:	40020488 	.word	0x40020488
 80132a8:	400204a0 	.word	0x400204a0
 80132ac:	400204b8 	.word	0x400204b8
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	f003 0308 	and.w	r3, r3, #8
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	bf14      	ite	ne
 80132be:	2301      	movne	r3, #1
 80132c0:	2300      	moveq	r3, #0
 80132c2:	b2db      	uxtb	r3, r3
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d015      	beq.n	80132f4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	681a      	ldr	r2, [r3, #0]
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	f022 0204 	bic.w	r2, r2, #4
 80132d6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80132dc:	f003 031f 	and.w	r3, r3, #31
 80132e0:	2208      	movs	r2, #8
 80132e2:	409a      	lsls	r2, r3
 80132e4:	6a3b      	ldr	r3, [r7, #32]
 80132e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80132ec:	f043 0201 	orr.w	r2, r3, #1
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80132f8:	f003 031f 	and.w	r3, r3, #31
 80132fc:	69ba      	ldr	r2, [r7, #24]
 80132fe:	fa22 f303 	lsr.w	r3, r2, r3
 8013302:	f003 0301 	and.w	r3, r3, #1
 8013306:	2b00      	cmp	r3, #0
 8013308:	d06e      	beq.n	80133e8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	4a69      	ldr	r2, [pc, #420]	@ (80134b4 <HAL_DMA_IRQHandler+0x3f8>)
 8013310:	4293      	cmp	r3, r2
 8013312:	d04a      	beq.n	80133aa <HAL_DMA_IRQHandler+0x2ee>
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	4a67      	ldr	r2, [pc, #412]	@ (80134b8 <HAL_DMA_IRQHandler+0x3fc>)
 801331a:	4293      	cmp	r3, r2
 801331c:	d045      	beq.n	80133aa <HAL_DMA_IRQHandler+0x2ee>
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	4a66      	ldr	r2, [pc, #408]	@ (80134bc <HAL_DMA_IRQHandler+0x400>)
 8013324:	4293      	cmp	r3, r2
 8013326:	d040      	beq.n	80133aa <HAL_DMA_IRQHandler+0x2ee>
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	4a64      	ldr	r2, [pc, #400]	@ (80134c0 <HAL_DMA_IRQHandler+0x404>)
 801332e:	4293      	cmp	r3, r2
 8013330:	d03b      	beq.n	80133aa <HAL_DMA_IRQHandler+0x2ee>
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	4a63      	ldr	r2, [pc, #396]	@ (80134c4 <HAL_DMA_IRQHandler+0x408>)
 8013338:	4293      	cmp	r3, r2
 801333a:	d036      	beq.n	80133aa <HAL_DMA_IRQHandler+0x2ee>
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	4a61      	ldr	r2, [pc, #388]	@ (80134c8 <HAL_DMA_IRQHandler+0x40c>)
 8013342:	4293      	cmp	r3, r2
 8013344:	d031      	beq.n	80133aa <HAL_DMA_IRQHandler+0x2ee>
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	4a60      	ldr	r2, [pc, #384]	@ (80134cc <HAL_DMA_IRQHandler+0x410>)
 801334c:	4293      	cmp	r3, r2
 801334e:	d02c      	beq.n	80133aa <HAL_DMA_IRQHandler+0x2ee>
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	4a5e      	ldr	r2, [pc, #376]	@ (80134d0 <HAL_DMA_IRQHandler+0x414>)
 8013356:	4293      	cmp	r3, r2
 8013358:	d027      	beq.n	80133aa <HAL_DMA_IRQHandler+0x2ee>
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	4a5d      	ldr	r2, [pc, #372]	@ (80134d4 <HAL_DMA_IRQHandler+0x418>)
 8013360:	4293      	cmp	r3, r2
 8013362:	d022      	beq.n	80133aa <HAL_DMA_IRQHandler+0x2ee>
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	4a5b      	ldr	r2, [pc, #364]	@ (80134d8 <HAL_DMA_IRQHandler+0x41c>)
 801336a:	4293      	cmp	r3, r2
 801336c:	d01d      	beq.n	80133aa <HAL_DMA_IRQHandler+0x2ee>
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	4a5a      	ldr	r2, [pc, #360]	@ (80134dc <HAL_DMA_IRQHandler+0x420>)
 8013374:	4293      	cmp	r3, r2
 8013376:	d018      	beq.n	80133aa <HAL_DMA_IRQHandler+0x2ee>
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	4a58      	ldr	r2, [pc, #352]	@ (80134e0 <HAL_DMA_IRQHandler+0x424>)
 801337e:	4293      	cmp	r3, r2
 8013380:	d013      	beq.n	80133aa <HAL_DMA_IRQHandler+0x2ee>
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	4a57      	ldr	r2, [pc, #348]	@ (80134e4 <HAL_DMA_IRQHandler+0x428>)
 8013388:	4293      	cmp	r3, r2
 801338a:	d00e      	beq.n	80133aa <HAL_DMA_IRQHandler+0x2ee>
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	4a55      	ldr	r2, [pc, #340]	@ (80134e8 <HAL_DMA_IRQHandler+0x42c>)
 8013392:	4293      	cmp	r3, r2
 8013394:	d009      	beq.n	80133aa <HAL_DMA_IRQHandler+0x2ee>
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	4a54      	ldr	r2, [pc, #336]	@ (80134ec <HAL_DMA_IRQHandler+0x430>)
 801339c:	4293      	cmp	r3, r2
 801339e:	d004      	beq.n	80133aa <HAL_DMA_IRQHandler+0x2ee>
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	4a52      	ldr	r2, [pc, #328]	@ (80134f0 <HAL_DMA_IRQHandler+0x434>)
 80133a6:	4293      	cmp	r3, r2
 80133a8:	d10a      	bne.n	80133c0 <HAL_DMA_IRQHandler+0x304>
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	695b      	ldr	r3, [r3, #20]
 80133b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	bf14      	ite	ne
 80133b8:	2301      	movne	r3, #1
 80133ba:	2300      	moveq	r3, #0
 80133bc:	b2db      	uxtb	r3, r3
 80133be:	e003      	b.n	80133c8 <HAL_DMA_IRQHandler+0x30c>
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	2300      	movs	r3, #0
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d00d      	beq.n	80133e8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80133d0:	f003 031f 	and.w	r3, r3, #31
 80133d4:	2201      	movs	r2, #1
 80133d6:	409a      	lsls	r2, r3
 80133d8:	6a3b      	ldr	r3, [r7, #32]
 80133da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80133e0:	f043 0202 	orr.w	r2, r3, #2
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80133ec:	f003 031f 	and.w	r3, r3, #31
 80133f0:	2204      	movs	r2, #4
 80133f2:	409a      	lsls	r2, r3
 80133f4:	69bb      	ldr	r3, [r7, #24]
 80133f6:	4013      	ands	r3, r2
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	f000 808f 	beq.w	801351c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	4a2c      	ldr	r2, [pc, #176]	@ (80134b4 <HAL_DMA_IRQHandler+0x3f8>)
 8013404:	4293      	cmp	r3, r2
 8013406:	d04a      	beq.n	801349e <HAL_DMA_IRQHandler+0x3e2>
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	4a2a      	ldr	r2, [pc, #168]	@ (80134b8 <HAL_DMA_IRQHandler+0x3fc>)
 801340e:	4293      	cmp	r3, r2
 8013410:	d045      	beq.n	801349e <HAL_DMA_IRQHandler+0x3e2>
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	4a29      	ldr	r2, [pc, #164]	@ (80134bc <HAL_DMA_IRQHandler+0x400>)
 8013418:	4293      	cmp	r3, r2
 801341a:	d040      	beq.n	801349e <HAL_DMA_IRQHandler+0x3e2>
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	4a27      	ldr	r2, [pc, #156]	@ (80134c0 <HAL_DMA_IRQHandler+0x404>)
 8013422:	4293      	cmp	r3, r2
 8013424:	d03b      	beq.n	801349e <HAL_DMA_IRQHandler+0x3e2>
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	4a26      	ldr	r2, [pc, #152]	@ (80134c4 <HAL_DMA_IRQHandler+0x408>)
 801342c:	4293      	cmp	r3, r2
 801342e:	d036      	beq.n	801349e <HAL_DMA_IRQHandler+0x3e2>
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	4a24      	ldr	r2, [pc, #144]	@ (80134c8 <HAL_DMA_IRQHandler+0x40c>)
 8013436:	4293      	cmp	r3, r2
 8013438:	d031      	beq.n	801349e <HAL_DMA_IRQHandler+0x3e2>
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	4a23      	ldr	r2, [pc, #140]	@ (80134cc <HAL_DMA_IRQHandler+0x410>)
 8013440:	4293      	cmp	r3, r2
 8013442:	d02c      	beq.n	801349e <HAL_DMA_IRQHandler+0x3e2>
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	4a21      	ldr	r2, [pc, #132]	@ (80134d0 <HAL_DMA_IRQHandler+0x414>)
 801344a:	4293      	cmp	r3, r2
 801344c:	d027      	beq.n	801349e <HAL_DMA_IRQHandler+0x3e2>
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	4a20      	ldr	r2, [pc, #128]	@ (80134d4 <HAL_DMA_IRQHandler+0x418>)
 8013454:	4293      	cmp	r3, r2
 8013456:	d022      	beq.n	801349e <HAL_DMA_IRQHandler+0x3e2>
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	4a1e      	ldr	r2, [pc, #120]	@ (80134d8 <HAL_DMA_IRQHandler+0x41c>)
 801345e:	4293      	cmp	r3, r2
 8013460:	d01d      	beq.n	801349e <HAL_DMA_IRQHandler+0x3e2>
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	4a1d      	ldr	r2, [pc, #116]	@ (80134dc <HAL_DMA_IRQHandler+0x420>)
 8013468:	4293      	cmp	r3, r2
 801346a:	d018      	beq.n	801349e <HAL_DMA_IRQHandler+0x3e2>
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	4a1b      	ldr	r2, [pc, #108]	@ (80134e0 <HAL_DMA_IRQHandler+0x424>)
 8013472:	4293      	cmp	r3, r2
 8013474:	d013      	beq.n	801349e <HAL_DMA_IRQHandler+0x3e2>
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	4a1a      	ldr	r2, [pc, #104]	@ (80134e4 <HAL_DMA_IRQHandler+0x428>)
 801347c:	4293      	cmp	r3, r2
 801347e:	d00e      	beq.n	801349e <HAL_DMA_IRQHandler+0x3e2>
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	4a18      	ldr	r2, [pc, #96]	@ (80134e8 <HAL_DMA_IRQHandler+0x42c>)
 8013486:	4293      	cmp	r3, r2
 8013488:	d009      	beq.n	801349e <HAL_DMA_IRQHandler+0x3e2>
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	4a17      	ldr	r2, [pc, #92]	@ (80134ec <HAL_DMA_IRQHandler+0x430>)
 8013490:	4293      	cmp	r3, r2
 8013492:	d004      	beq.n	801349e <HAL_DMA_IRQHandler+0x3e2>
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	4a15      	ldr	r2, [pc, #84]	@ (80134f0 <HAL_DMA_IRQHandler+0x434>)
 801349a:	4293      	cmp	r3, r2
 801349c:	d12a      	bne.n	80134f4 <HAL_DMA_IRQHandler+0x438>
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	f003 0302 	and.w	r3, r3, #2
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	bf14      	ite	ne
 80134ac:	2301      	movne	r3, #1
 80134ae:	2300      	moveq	r3, #0
 80134b0:	b2db      	uxtb	r3, r3
 80134b2:	e023      	b.n	80134fc <HAL_DMA_IRQHandler+0x440>
 80134b4:	40020010 	.word	0x40020010
 80134b8:	40020028 	.word	0x40020028
 80134bc:	40020040 	.word	0x40020040
 80134c0:	40020058 	.word	0x40020058
 80134c4:	40020070 	.word	0x40020070
 80134c8:	40020088 	.word	0x40020088
 80134cc:	400200a0 	.word	0x400200a0
 80134d0:	400200b8 	.word	0x400200b8
 80134d4:	40020410 	.word	0x40020410
 80134d8:	40020428 	.word	0x40020428
 80134dc:	40020440 	.word	0x40020440
 80134e0:	40020458 	.word	0x40020458
 80134e4:	40020470 	.word	0x40020470
 80134e8:	40020488 	.word	0x40020488
 80134ec:	400204a0 	.word	0x400204a0
 80134f0:	400204b8 	.word	0x400204b8
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	2300      	movs	r3, #0
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d00d      	beq.n	801351c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013504:	f003 031f 	and.w	r3, r3, #31
 8013508:	2204      	movs	r2, #4
 801350a:	409a      	lsls	r2, r3
 801350c:	6a3b      	ldr	r3, [r7, #32]
 801350e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013514:	f043 0204 	orr.w	r2, r3, #4
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013520:	f003 031f 	and.w	r3, r3, #31
 8013524:	2210      	movs	r2, #16
 8013526:	409a      	lsls	r2, r3
 8013528:	69bb      	ldr	r3, [r7, #24]
 801352a:	4013      	ands	r3, r2
 801352c:	2b00      	cmp	r3, #0
 801352e:	f000 80a6 	beq.w	801367e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	4a85      	ldr	r2, [pc, #532]	@ (801374c <HAL_DMA_IRQHandler+0x690>)
 8013538:	4293      	cmp	r3, r2
 801353a:	d04a      	beq.n	80135d2 <HAL_DMA_IRQHandler+0x516>
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	4a83      	ldr	r2, [pc, #524]	@ (8013750 <HAL_DMA_IRQHandler+0x694>)
 8013542:	4293      	cmp	r3, r2
 8013544:	d045      	beq.n	80135d2 <HAL_DMA_IRQHandler+0x516>
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	4a82      	ldr	r2, [pc, #520]	@ (8013754 <HAL_DMA_IRQHandler+0x698>)
 801354c:	4293      	cmp	r3, r2
 801354e:	d040      	beq.n	80135d2 <HAL_DMA_IRQHandler+0x516>
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	4a80      	ldr	r2, [pc, #512]	@ (8013758 <HAL_DMA_IRQHandler+0x69c>)
 8013556:	4293      	cmp	r3, r2
 8013558:	d03b      	beq.n	80135d2 <HAL_DMA_IRQHandler+0x516>
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	4a7f      	ldr	r2, [pc, #508]	@ (801375c <HAL_DMA_IRQHandler+0x6a0>)
 8013560:	4293      	cmp	r3, r2
 8013562:	d036      	beq.n	80135d2 <HAL_DMA_IRQHandler+0x516>
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	4a7d      	ldr	r2, [pc, #500]	@ (8013760 <HAL_DMA_IRQHandler+0x6a4>)
 801356a:	4293      	cmp	r3, r2
 801356c:	d031      	beq.n	80135d2 <HAL_DMA_IRQHandler+0x516>
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	4a7c      	ldr	r2, [pc, #496]	@ (8013764 <HAL_DMA_IRQHandler+0x6a8>)
 8013574:	4293      	cmp	r3, r2
 8013576:	d02c      	beq.n	80135d2 <HAL_DMA_IRQHandler+0x516>
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	4a7a      	ldr	r2, [pc, #488]	@ (8013768 <HAL_DMA_IRQHandler+0x6ac>)
 801357e:	4293      	cmp	r3, r2
 8013580:	d027      	beq.n	80135d2 <HAL_DMA_IRQHandler+0x516>
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	4a79      	ldr	r2, [pc, #484]	@ (801376c <HAL_DMA_IRQHandler+0x6b0>)
 8013588:	4293      	cmp	r3, r2
 801358a:	d022      	beq.n	80135d2 <HAL_DMA_IRQHandler+0x516>
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	4a77      	ldr	r2, [pc, #476]	@ (8013770 <HAL_DMA_IRQHandler+0x6b4>)
 8013592:	4293      	cmp	r3, r2
 8013594:	d01d      	beq.n	80135d2 <HAL_DMA_IRQHandler+0x516>
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	4a76      	ldr	r2, [pc, #472]	@ (8013774 <HAL_DMA_IRQHandler+0x6b8>)
 801359c:	4293      	cmp	r3, r2
 801359e:	d018      	beq.n	80135d2 <HAL_DMA_IRQHandler+0x516>
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	4a74      	ldr	r2, [pc, #464]	@ (8013778 <HAL_DMA_IRQHandler+0x6bc>)
 80135a6:	4293      	cmp	r3, r2
 80135a8:	d013      	beq.n	80135d2 <HAL_DMA_IRQHandler+0x516>
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	4a73      	ldr	r2, [pc, #460]	@ (801377c <HAL_DMA_IRQHandler+0x6c0>)
 80135b0:	4293      	cmp	r3, r2
 80135b2:	d00e      	beq.n	80135d2 <HAL_DMA_IRQHandler+0x516>
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	4a71      	ldr	r2, [pc, #452]	@ (8013780 <HAL_DMA_IRQHandler+0x6c4>)
 80135ba:	4293      	cmp	r3, r2
 80135bc:	d009      	beq.n	80135d2 <HAL_DMA_IRQHandler+0x516>
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	4a70      	ldr	r2, [pc, #448]	@ (8013784 <HAL_DMA_IRQHandler+0x6c8>)
 80135c4:	4293      	cmp	r3, r2
 80135c6:	d004      	beq.n	80135d2 <HAL_DMA_IRQHandler+0x516>
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	4a6e      	ldr	r2, [pc, #440]	@ (8013788 <HAL_DMA_IRQHandler+0x6cc>)
 80135ce:	4293      	cmp	r3, r2
 80135d0:	d10a      	bne.n	80135e8 <HAL_DMA_IRQHandler+0x52c>
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	f003 0308 	and.w	r3, r3, #8
 80135dc:	2b00      	cmp	r3, #0
 80135de:	bf14      	ite	ne
 80135e0:	2301      	movne	r3, #1
 80135e2:	2300      	moveq	r3, #0
 80135e4:	b2db      	uxtb	r3, r3
 80135e6:	e009      	b.n	80135fc <HAL_DMA_IRQHandler+0x540>
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	f003 0304 	and.w	r3, r3, #4
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	bf14      	ite	ne
 80135f6:	2301      	movne	r3, #1
 80135f8:	2300      	moveq	r3, #0
 80135fa:	b2db      	uxtb	r3, r3
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d03e      	beq.n	801367e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013604:	f003 031f 	and.w	r3, r3, #31
 8013608:	2210      	movs	r2, #16
 801360a:	409a      	lsls	r2, r3
 801360c:	6a3b      	ldr	r3, [r7, #32]
 801360e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801361a:	2b00      	cmp	r3, #0
 801361c:	d018      	beq.n	8013650 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8013628:	2b00      	cmp	r3, #0
 801362a:	d108      	bne.n	801363e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013630:	2b00      	cmp	r3, #0
 8013632:	d024      	beq.n	801367e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013638:	6878      	ldr	r0, [r7, #4]
 801363a:	4798      	blx	r3
 801363c:	e01f      	b.n	801367e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013642:	2b00      	cmp	r3, #0
 8013644:	d01b      	beq.n	801367e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801364a:	6878      	ldr	r0, [r7, #4]
 801364c:	4798      	blx	r3
 801364e:	e016      	b.n	801367e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801365a:	2b00      	cmp	r3, #0
 801365c:	d107      	bne.n	801366e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	681a      	ldr	r2, [r3, #0]
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	f022 0208 	bic.w	r2, r2, #8
 801366c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013672:	2b00      	cmp	r3, #0
 8013674:	d003      	beq.n	801367e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801367a:	6878      	ldr	r0, [r7, #4]
 801367c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013682:	f003 031f 	and.w	r3, r3, #31
 8013686:	2220      	movs	r2, #32
 8013688:	409a      	lsls	r2, r3
 801368a:	69bb      	ldr	r3, [r7, #24]
 801368c:	4013      	ands	r3, r2
 801368e:	2b00      	cmp	r3, #0
 8013690:	f000 8110 	beq.w	80138b4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	4a2c      	ldr	r2, [pc, #176]	@ (801374c <HAL_DMA_IRQHandler+0x690>)
 801369a:	4293      	cmp	r3, r2
 801369c:	d04a      	beq.n	8013734 <HAL_DMA_IRQHandler+0x678>
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	4a2b      	ldr	r2, [pc, #172]	@ (8013750 <HAL_DMA_IRQHandler+0x694>)
 80136a4:	4293      	cmp	r3, r2
 80136a6:	d045      	beq.n	8013734 <HAL_DMA_IRQHandler+0x678>
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	4a29      	ldr	r2, [pc, #164]	@ (8013754 <HAL_DMA_IRQHandler+0x698>)
 80136ae:	4293      	cmp	r3, r2
 80136b0:	d040      	beq.n	8013734 <HAL_DMA_IRQHandler+0x678>
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	4a28      	ldr	r2, [pc, #160]	@ (8013758 <HAL_DMA_IRQHandler+0x69c>)
 80136b8:	4293      	cmp	r3, r2
 80136ba:	d03b      	beq.n	8013734 <HAL_DMA_IRQHandler+0x678>
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	4a26      	ldr	r2, [pc, #152]	@ (801375c <HAL_DMA_IRQHandler+0x6a0>)
 80136c2:	4293      	cmp	r3, r2
 80136c4:	d036      	beq.n	8013734 <HAL_DMA_IRQHandler+0x678>
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	4a25      	ldr	r2, [pc, #148]	@ (8013760 <HAL_DMA_IRQHandler+0x6a4>)
 80136cc:	4293      	cmp	r3, r2
 80136ce:	d031      	beq.n	8013734 <HAL_DMA_IRQHandler+0x678>
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	4a23      	ldr	r2, [pc, #140]	@ (8013764 <HAL_DMA_IRQHandler+0x6a8>)
 80136d6:	4293      	cmp	r3, r2
 80136d8:	d02c      	beq.n	8013734 <HAL_DMA_IRQHandler+0x678>
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	4a22      	ldr	r2, [pc, #136]	@ (8013768 <HAL_DMA_IRQHandler+0x6ac>)
 80136e0:	4293      	cmp	r3, r2
 80136e2:	d027      	beq.n	8013734 <HAL_DMA_IRQHandler+0x678>
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	4a20      	ldr	r2, [pc, #128]	@ (801376c <HAL_DMA_IRQHandler+0x6b0>)
 80136ea:	4293      	cmp	r3, r2
 80136ec:	d022      	beq.n	8013734 <HAL_DMA_IRQHandler+0x678>
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	4a1f      	ldr	r2, [pc, #124]	@ (8013770 <HAL_DMA_IRQHandler+0x6b4>)
 80136f4:	4293      	cmp	r3, r2
 80136f6:	d01d      	beq.n	8013734 <HAL_DMA_IRQHandler+0x678>
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	4a1d      	ldr	r2, [pc, #116]	@ (8013774 <HAL_DMA_IRQHandler+0x6b8>)
 80136fe:	4293      	cmp	r3, r2
 8013700:	d018      	beq.n	8013734 <HAL_DMA_IRQHandler+0x678>
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	4a1c      	ldr	r2, [pc, #112]	@ (8013778 <HAL_DMA_IRQHandler+0x6bc>)
 8013708:	4293      	cmp	r3, r2
 801370a:	d013      	beq.n	8013734 <HAL_DMA_IRQHandler+0x678>
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	4a1a      	ldr	r2, [pc, #104]	@ (801377c <HAL_DMA_IRQHandler+0x6c0>)
 8013712:	4293      	cmp	r3, r2
 8013714:	d00e      	beq.n	8013734 <HAL_DMA_IRQHandler+0x678>
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	4a19      	ldr	r2, [pc, #100]	@ (8013780 <HAL_DMA_IRQHandler+0x6c4>)
 801371c:	4293      	cmp	r3, r2
 801371e:	d009      	beq.n	8013734 <HAL_DMA_IRQHandler+0x678>
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	4a17      	ldr	r2, [pc, #92]	@ (8013784 <HAL_DMA_IRQHandler+0x6c8>)
 8013726:	4293      	cmp	r3, r2
 8013728:	d004      	beq.n	8013734 <HAL_DMA_IRQHandler+0x678>
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	4a16      	ldr	r2, [pc, #88]	@ (8013788 <HAL_DMA_IRQHandler+0x6cc>)
 8013730:	4293      	cmp	r3, r2
 8013732:	d12b      	bne.n	801378c <HAL_DMA_IRQHandler+0x6d0>
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	f003 0310 	and.w	r3, r3, #16
 801373e:	2b00      	cmp	r3, #0
 8013740:	bf14      	ite	ne
 8013742:	2301      	movne	r3, #1
 8013744:	2300      	moveq	r3, #0
 8013746:	b2db      	uxtb	r3, r3
 8013748:	e02a      	b.n	80137a0 <HAL_DMA_IRQHandler+0x6e4>
 801374a:	bf00      	nop
 801374c:	40020010 	.word	0x40020010
 8013750:	40020028 	.word	0x40020028
 8013754:	40020040 	.word	0x40020040
 8013758:	40020058 	.word	0x40020058
 801375c:	40020070 	.word	0x40020070
 8013760:	40020088 	.word	0x40020088
 8013764:	400200a0 	.word	0x400200a0
 8013768:	400200b8 	.word	0x400200b8
 801376c:	40020410 	.word	0x40020410
 8013770:	40020428 	.word	0x40020428
 8013774:	40020440 	.word	0x40020440
 8013778:	40020458 	.word	0x40020458
 801377c:	40020470 	.word	0x40020470
 8013780:	40020488 	.word	0x40020488
 8013784:	400204a0 	.word	0x400204a0
 8013788:	400204b8 	.word	0x400204b8
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	f003 0302 	and.w	r3, r3, #2
 8013796:	2b00      	cmp	r3, #0
 8013798:	bf14      	ite	ne
 801379a:	2301      	movne	r3, #1
 801379c:	2300      	moveq	r3, #0
 801379e:	b2db      	uxtb	r3, r3
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	f000 8087 	beq.w	80138b4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80137aa:	f003 031f 	and.w	r3, r3, #31
 80137ae:	2220      	movs	r2, #32
 80137b0:	409a      	lsls	r2, r3
 80137b2:	6a3b      	ldr	r3, [r7, #32]
 80137b4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80137bc:	b2db      	uxtb	r3, r3
 80137be:	2b04      	cmp	r3, #4
 80137c0:	d139      	bne.n	8013836 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	681a      	ldr	r2, [r3, #0]
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	f022 0216 	bic.w	r2, r2, #22
 80137d0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	695a      	ldr	r2, [r3, #20]
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80137e0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d103      	bne.n	80137f2 <HAL_DMA_IRQHandler+0x736>
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d007      	beq.n	8013802 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	681a      	ldr	r2, [r3, #0]
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	f022 0208 	bic.w	r2, r2, #8
 8013800:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013806:	f003 031f 	and.w	r3, r3, #31
 801380a:	223f      	movs	r2, #63	@ 0x3f
 801380c:	409a      	lsls	r2, r3
 801380e:	6a3b      	ldr	r3, [r7, #32]
 8013810:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	2201      	movs	r2, #1
 8013816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	2200      	movs	r2, #0
 801381e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013826:	2b00      	cmp	r3, #0
 8013828:	f000 834a 	beq.w	8013ec0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013830:	6878      	ldr	r0, [r7, #4]
 8013832:	4798      	blx	r3
          }
          return;
 8013834:	e344      	b.n	8013ec0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8013840:	2b00      	cmp	r3, #0
 8013842:	d018      	beq.n	8013876 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801384e:	2b00      	cmp	r3, #0
 8013850:	d108      	bne.n	8013864 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013856:	2b00      	cmp	r3, #0
 8013858:	d02c      	beq.n	80138b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801385e:	6878      	ldr	r0, [r7, #4]
 8013860:	4798      	blx	r3
 8013862:	e027      	b.n	80138b4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013868:	2b00      	cmp	r3, #0
 801386a:	d023      	beq.n	80138b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	4798      	blx	r3
 8013874:	e01e      	b.n	80138b4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013880:	2b00      	cmp	r3, #0
 8013882:	d10f      	bne.n	80138a4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	681a      	ldr	r2, [r3, #0]
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	f022 0210 	bic.w	r2, r2, #16
 8013892:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	2201      	movs	r2, #1
 8013898:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	2200      	movs	r2, #0
 80138a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d003      	beq.n	80138b4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80138b0:	6878      	ldr	r0, [r7, #4]
 80138b2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	f000 8306 	beq.w	8013eca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80138c2:	f003 0301 	and.w	r3, r3, #1
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	f000 8088 	beq.w	80139dc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	2204      	movs	r2, #4
 80138d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	4a7a      	ldr	r2, [pc, #488]	@ (8013ac4 <HAL_DMA_IRQHandler+0xa08>)
 80138da:	4293      	cmp	r3, r2
 80138dc:	d04a      	beq.n	8013974 <HAL_DMA_IRQHandler+0x8b8>
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	4a79      	ldr	r2, [pc, #484]	@ (8013ac8 <HAL_DMA_IRQHandler+0xa0c>)
 80138e4:	4293      	cmp	r3, r2
 80138e6:	d045      	beq.n	8013974 <HAL_DMA_IRQHandler+0x8b8>
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	4a77      	ldr	r2, [pc, #476]	@ (8013acc <HAL_DMA_IRQHandler+0xa10>)
 80138ee:	4293      	cmp	r3, r2
 80138f0:	d040      	beq.n	8013974 <HAL_DMA_IRQHandler+0x8b8>
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	4a76      	ldr	r2, [pc, #472]	@ (8013ad0 <HAL_DMA_IRQHandler+0xa14>)
 80138f8:	4293      	cmp	r3, r2
 80138fa:	d03b      	beq.n	8013974 <HAL_DMA_IRQHandler+0x8b8>
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	4a74      	ldr	r2, [pc, #464]	@ (8013ad4 <HAL_DMA_IRQHandler+0xa18>)
 8013902:	4293      	cmp	r3, r2
 8013904:	d036      	beq.n	8013974 <HAL_DMA_IRQHandler+0x8b8>
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	4a73      	ldr	r2, [pc, #460]	@ (8013ad8 <HAL_DMA_IRQHandler+0xa1c>)
 801390c:	4293      	cmp	r3, r2
 801390e:	d031      	beq.n	8013974 <HAL_DMA_IRQHandler+0x8b8>
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	4a71      	ldr	r2, [pc, #452]	@ (8013adc <HAL_DMA_IRQHandler+0xa20>)
 8013916:	4293      	cmp	r3, r2
 8013918:	d02c      	beq.n	8013974 <HAL_DMA_IRQHandler+0x8b8>
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	4a70      	ldr	r2, [pc, #448]	@ (8013ae0 <HAL_DMA_IRQHandler+0xa24>)
 8013920:	4293      	cmp	r3, r2
 8013922:	d027      	beq.n	8013974 <HAL_DMA_IRQHandler+0x8b8>
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	4a6e      	ldr	r2, [pc, #440]	@ (8013ae4 <HAL_DMA_IRQHandler+0xa28>)
 801392a:	4293      	cmp	r3, r2
 801392c:	d022      	beq.n	8013974 <HAL_DMA_IRQHandler+0x8b8>
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	4a6d      	ldr	r2, [pc, #436]	@ (8013ae8 <HAL_DMA_IRQHandler+0xa2c>)
 8013934:	4293      	cmp	r3, r2
 8013936:	d01d      	beq.n	8013974 <HAL_DMA_IRQHandler+0x8b8>
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	4a6b      	ldr	r2, [pc, #428]	@ (8013aec <HAL_DMA_IRQHandler+0xa30>)
 801393e:	4293      	cmp	r3, r2
 8013940:	d018      	beq.n	8013974 <HAL_DMA_IRQHandler+0x8b8>
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	4a6a      	ldr	r2, [pc, #424]	@ (8013af0 <HAL_DMA_IRQHandler+0xa34>)
 8013948:	4293      	cmp	r3, r2
 801394a:	d013      	beq.n	8013974 <HAL_DMA_IRQHandler+0x8b8>
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	4a68      	ldr	r2, [pc, #416]	@ (8013af4 <HAL_DMA_IRQHandler+0xa38>)
 8013952:	4293      	cmp	r3, r2
 8013954:	d00e      	beq.n	8013974 <HAL_DMA_IRQHandler+0x8b8>
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	4a67      	ldr	r2, [pc, #412]	@ (8013af8 <HAL_DMA_IRQHandler+0xa3c>)
 801395c:	4293      	cmp	r3, r2
 801395e:	d009      	beq.n	8013974 <HAL_DMA_IRQHandler+0x8b8>
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	4a65      	ldr	r2, [pc, #404]	@ (8013afc <HAL_DMA_IRQHandler+0xa40>)
 8013966:	4293      	cmp	r3, r2
 8013968:	d004      	beq.n	8013974 <HAL_DMA_IRQHandler+0x8b8>
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	4a64      	ldr	r2, [pc, #400]	@ (8013b00 <HAL_DMA_IRQHandler+0xa44>)
 8013970:	4293      	cmp	r3, r2
 8013972:	d108      	bne.n	8013986 <HAL_DMA_IRQHandler+0x8ca>
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	681a      	ldr	r2, [r3, #0]
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	f022 0201 	bic.w	r2, r2, #1
 8013982:	601a      	str	r2, [r3, #0]
 8013984:	e007      	b.n	8013996 <HAL_DMA_IRQHandler+0x8da>
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	681a      	ldr	r2, [r3, #0]
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	f022 0201 	bic.w	r2, r2, #1
 8013994:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	3301      	adds	r3, #1
 801399a:	60fb      	str	r3, [r7, #12]
 801399c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801399e:	429a      	cmp	r2, r3
 80139a0:	d307      	bcc.n	80139b2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	f003 0301 	and.w	r3, r3, #1
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d1f2      	bne.n	8013996 <HAL_DMA_IRQHandler+0x8da>
 80139b0:	e000      	b.n	80139b4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80139b2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	f003 0301 	and.w	r3, r3, #1
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d004      	beq.n	80139cc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	2203      	movs	r2, #3
 80139c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80139ca:	e003      	b.n	80139d4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	2201      	movs	r2, #1
 80139d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	2200      	movs	r2, #0
 80139d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	f000 8272 	beq.w	8013eca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80139ea:	6878      	ldr	r0, [r7, #4]
 80139ec:	4798      	blx	r3
 80139ee:	e26c      	b.n	8013eca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	4a43      	ldr	r2, [pc, #268]	@ (8013b04 <HAL_DMA_IRQHandler+0xa48>)
 80139f6:	4293      	cmp	r3, r2
 80139f8:	d022      	beq.n	8013a40 <HAL_DMA_IRQHandler+0x984>
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	4a42      	ldr	r2, [pc, #264]	@ (8013b08 <HAL_DMA_IRQHandler+0xa4c>)
 8013a00:	4293      	cmp	r3, r2
 8013a02:	d01d      	beq.n	8013a40 <HAL_DMA_IRQHandler+0x984>
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	4a40      	ldr	r2, [pc, #256]	@ (8013b0c <HAL_DMA_IRQHandler+0xa50>)
 8013a0a:	4293      	cmp	r3, r2
 8013a0c:	d018      	beq.n	8013a40 <HAL_DMA_IRQHandler+0x984>
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	4a3f      	ldr	r2, [pc, #252]	@ (8013b10 <HAL_DMA_IRQHandler+0xa54>)
 8013a14:	4293      	cmp	r3, r2
 8013a16:	d013      	beq.n	8013a40 <HAL_DMA_IRQHandler+0x984>
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	4a3d      	ldr	r2, [pc, #244]	@ (8013b14 <HAL_DMA_IRQHandler+0xa58>)
 8013a1e:	4293      	cmp	r3, r2
 8013a20:	d00e      	beq.n	8013a40 <HAL_DMA_IRQHandler+0x984>
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	4a3c      	ldr	r2, [pc, #240]	@ (8013b18 <HAL_DMA_IRQHandler+0xa5c>)
 8013a28:	4293      	cmp	r3, r2
 8013a2a:	d009      	beq.n	8013a40 <HAL_DMA_IRQHandler+0x984>
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	4a3a      	ldr	r2, [pc, #232]	@ (8013b1c <HAL_DMA_IRQHandler+0xa60>)
 8013a32:	4293      	cmp	r3, r2
 8013a34:	d004      	beq.n	8013a40 <HAL_DMA_IRQHandler+0x984>
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	4a39      	ldr	r2, [pc, #228]	@ (8013b20 <HAL_DMA_IRQHandler+0xa64>)
 8013a3c:	4293      	cmp	r3, r2
 8013a3e:	d101      	bne.n	8013a44 <HAL_DMA_IRQHandler+0x988>
 8013a40:	2301      	movs	r3, #1
 8013a42:	e000      	b.n	8013a46 <HAL_DMA_IRQHandler+0x98a>
 8013a44:	2300      	movs	r3, #0
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	f000 823f 	beq.w	8013eca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013a58:	f003 031f 	and.w	r3, r3, #31
 8013a5c:	2204      	movs	r2, #4
 8013a5e:	409a      	lsls	r2, r3
 8013a60:	697b      	ldr	r3, [r7, #20]
 8013a62:	4013      	ands	r3, r2
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	f000 80cd 	beq.w	8013c04 <HAL_DMA_IRQHandler+0xb48>
 8013a6a:	693b      	ldr	r3, [r7, #16]
 8013a6c:	f003 0304 	and.w	r3, r3, #4
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	f000 80c7 	beq.w	8013c04 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013a7a:	f003 031f 	and.w	r3, r3, #31
 8013a7e:	2204      	movs	r2, #4
 8013a80:	409a      	lsls	r2, r3
 8013a82:	69fb      	ldr	r3, [r7, #28]
 8013a84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8013a86:	693b      	ldr	r3, [r7, #16]
 8013a88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d049      	beq.n	8013b24 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8013a90:	693b      	ldr	r3, [r7, #16]
 8013a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d109      	bne.n	8013aae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	f000 8210 	beq.w	8013ec4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013aa8:	6878      	ldr	r0, [r7, #4]
 8013aaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8013aac:	e20a      	b.n	8013ec4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	f000 8206 	beq.w	8013ec4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013abc:	6878      	ldr	r0, [r7, #4]
 8013abe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8013ac0:	e200      	b.n	8013ec4 <HAL_DMA_IRQHandler+0xe08>
 8013ac2:	bf00      	nop
 8013ac4:	40020010 	.word	0x40020010
 8013ac8:	40020028 	.word	0x40020028
 8013acc:	40020040 	.word	0x40020040
 8013ad0:	40020058 	.word	0x40020058
 8013ad4:	40020070 	.word	0x40020070
 8013ad8:	40020088 	.word	0x40020088
 8013adc:	400200a0 	.word	0x400200a0
 8013ae0:	400200b8 	.word	0x400200b8
 8013ae4:	40020410 	.word	0x40020410
 8013ae8:	40020428 	.word	0x40020428
 8013aec:	40020440 	.word	0x40020440
 8013af0:	40020458 	.word	0x40020458
 8013af4:	40020470 	.word	0x40020470
 8013af8:	40020488 	.word	0x40020488
 8013afc:	400204a0 	.word	0x400204a0
 8013b00:	400204b8 	.word	0x400204b8
 8013b04:	58025408 	.word	0x58025408
 8013b08:	5802541c 	.word	0x5802541c
 8013b0c:	58025430 	.word	0x58025430
 8013b10:	58025444 	.word	0x58025444
 8013b14:	58025458 	.word	0x58025458
 8013b18:	5802546c 	.word	0x5802546c
 8013b1c:	58025480 	.word	0x58025480
 8013b20:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8013b24:	693b      	ldr	r3, [r7, #16]
 8013b26:	f003 0320 	and.w	r3, r3, #32
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d160      	bne.n	8013bf0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	4a7f      	ldr	r2, [pc, #508]	@ (8013d30 <HAL_DMA_IRQHandler+0xc74>)
 8013b34:	4293      	cmp	r3, r2
 8013b36:	d04a      	beq.n	8013bce <HAL_DMA_IRQHandler+0xb12>
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	4a7d      	ldr	r2, [pc, #500]	@ (8013d34 <HAL_DMA_IRQHandler+0xc78>)
 8013b3e:	4293      	cmp	r3, r2
 8013b40:	d045      	beq.n	8013bce <HAL_DMA_IRQHandler+0xb12>
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	4a7c      	ldr	r2, [pc, #496]	@ (8013d38 <HAL_DMA_IRQHandler+0xc7c>)
 8013b48:	4293      	cmp	r3, r2
 8013b4a:	d040      	beq.n	8013bce <HAL_DMA_IRQHandler+0xb12>
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	4a7a      	ldr	r2, [pc, #488]	@ (8013d3c <HAL_DMA_IRQHandler+0xc80>)
 8013b52:	4293      	cmp	r3, r2
 8013b54:	d03b      	beq.n	8013bce <HAL_DMA_IRQHandler+0xb12>
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	4a79      	ldr	r2, [pc, #484]	@ (8013d40 <HAL_DMA_IRQHandler+0xc84>)
 8013b5c:	4293      	cmp	r3, r2
 8013b5e:	d036      	beq.n	8013bce <HAL_DMA_IRQHandler+0xb12>
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	4a77      	ldr	r2, [pc, #476]	@ (8013d44 <HAL_DMA_IRQHandler+0xc88>)
 8013b66:	4293      	cmp	r3, r2
 8013b68:	d031      	beq.n	8013bce <HAL_DMA_IRQHandler+0xb12>
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	4a76      	ldr	r2, [pc, #472]	@ (8013d48 <HAL_DMA_IRQHandler+0xc8c>)
 8013b70:	4293      	cmp	r3, r2
 8013b72:	d02c      	beq.n	8013bce <HAL_DMA_IRQHandler+0xb12>
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	4a74      	ldr	r2, [pc, #464]	@ (8013d4c <HAL_DMA_IRQHandler+0xc90>)
 8013b7a:	4293      	cmp	r3, r2
 8013b7c:	d027      	beq.n	8013bce <HAL_DMA_IRQHandler+0xb12>
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	4a73      	ldr	r2, [pc, #460]	@ (8013d50 <HAL_DMA_IRQHandler+0xc94>)
 8013b84:	4293      	cmp	r3, r2
 8013b86:	d022      	beq.n	8013bce <HAL_DMA_IRQHandler+0xb12>
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	4a71      	ldr	r2, [pc, #452]	@ (8013d54 <HAL_DMA_IRQHandler+0xc98>)
 8013b8e:	4293      	cmp	r3, r2
 8013b90:	d01d      	beq.n	8013bce <HAL_DMA_IRQHandler+0xb12>
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	4a70      	ldr	r2, [pc, #448]	@ (8013d58 <HAL_DMA_IRQHandler+0xc9c>)
 8013b98:	4293      	cmp	r3, r2
 8013b9a:	d018      	beq.n	8013bce <HAL_DMA_IRQHandler+0xb12>
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	4a6e      	ldr	r2, [pc, #440]	@ (8013d5c <HAL_DMA_IRQHandler+0xca0>)
 8013ba2:	4293      	cmp	r3, r2
 8013ba4:	d013      	beq.n	8013bce <HAL_DMA_IRQHandler+0xb12>
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	4a6d      	ldr	r2, [pc, #436]	@ (8013d60 <HAL_DMA_IRQHandler+0xca4>)
 8013bac:	4293      	cmp	r3, r2
 8013bae:	d00e      	beq.n	8013bce <HAL_DMA_IRQHandler+0xb12>
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	4a6b      	ldr	r2, [pc, #428]	@ (8013d64 <HAL_DMA_IRQHandler+0xca8>)
 8013bb6:	4293      	cmp	r3, r2
 8013bb8:	d009      	beq.n	8013bce <HAL_DMA_IRQHandler+0xb12>
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	4a6a      	ldr	r2, [pc, #424]	@ (8013d68 <HAL_DMA_IRQHandler+0xcac>)
 8013bc0:	4293      	cmp	r3, r2
 8013bc2:	d004      	beq.n	8013bce <HAL_DMA_IRQHandler+0xb12>
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	4a68      	ldr	r2, [pc, #416]	@ (8013d6c <HAL_DMA_IRQHandler+0xcb0>)
 8013bca:	4293      	cmp	r3, r2
 8013bcc:	d108      	bne.n	8013be0 <HAL_DMA_IRQHandler+0xb24>
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	681a      	ldr	r2, [r3, #0]
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	f022 0208 	bic.w	r2, r2, #8
 8013bdc:	601a      	str	r2, [r3, #0]
 8013bde:	e007      	b.n	8013bf0 <HAL_DMA_IRQHandler+0xb34>
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	681a      	ldr	r2, [r3, #0]
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	f022 0204 	bic.w	r2, r2, #4
 8013bee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	f000 8165 	beq.w	8013ec4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bfe:	6878      	ldr	r0, [r7, #4]
 8013c00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8013c02:	e15f      	b.n	8013ec4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013c08:	f003 031f 	and.w	r3, r3, #31
 8013c0c:	2202      	movs	r2, #2
 8013c0e:	409a      	lsls	r2, r3
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	4013      	ands	r3, r2
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	f000 80c5 	beq.w	8013da4 <HAL_DMA_IRQHandler+0xce8>
 8013c1a:	693b      	ldr	r3, [r7, #16]
 8013c1c:	f003 0302 	and.w	r3, r3, #2
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	f000 80bf 	beq.w	8013da4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013c2a:	f003 031f 	and.w	r3, r3, #31
 8013c2e:	2202      	movs	r2, #2
 8013c30:	409a      	lsls	r2, r3
 8013c32:	69fb      	ldr	r3, [r7, #28]
 8013c34:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8013c36:	693b      	ldr	r3, [r7, #16]
 8013c38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d018      	beq.n	8013c72 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8013c40:	693b      	ldr	r3, [r7, #16]
 8013c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d109      	bne.n	8013c5e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	f000 813a 	beq.w	8013ec8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c58:	6878      	ldr	r0, [r7, #4]
 8013c5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8013c5c:	e134      	b.n	8013ec8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	f000 8130 	beq.w	8013ec8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c6c:	6878      	ldr	r0, [r7, #4]
 8013c6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8013c70:	e12a      	b.n	8013ec8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8013c72:	693b      	ldr	r3, [r7, #16]
 8013c74:	f003 0320 	and.w	r3, r3, #32
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	f040 8089 	bne.w	8013d90 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	4a2b      	ldr	r2, [pc, #172]	@ (8013d30 <HAL_DMA_IRQHandler+0xc74>)
 8013c84:	4293      	cmp	r3, r2
 8013c86:	d04a      	beq.n	8013d1e <HAL_DMA_IRQHandler+0xc62>
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	4a29      	ldr	r2, [pc, #164]	@ (8013d34 <HAL_DMA_IRQHandler+0xc78>)
 8013c8e:	4293      	cmp	r3, r2
 8013c90:	d045      	beq.n	8013d1e <HAL_DMA_IRQHandler+0xc62>
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	4a28      	ldr	r2, [pc, #160]	@ (8013d38 <HAL_DMA_IRQHandler+0xc7c>)
 8013c98:	4293      	cmp	r3, r2
 8013c9a:	d040      	beq.n	8013d1e <HAL_DMA_IRQHandler+0xc62>
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	4a26      	ldr	r2, [pc, #152]	@ (8013d3c <HAL_DMA_IRQHandler+0xc80>)
 8013ca2:	4293      	cmp	r3, r2
 8013ca4:	d03b      	beq.n	8013d1e <HAL_DMA_IRQHandler+0xc62>
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	4a25      	ldr	r2, [pc, #148]	@ (8013d40 <HAL_DMA_IRQHandler+0xc84>)
 8013cac:	4293      	cmp	r3, r2
 8013cae:	d036      	beq.n	8013d1e <HAL_DMA_IRQHandler+0xc62>
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	4a23      	ldr	r2, [pc, #140]	@ (8013d44 <HAL_DMA_IRQHandler+0xc88>)
 8013cb6:	4293      	cmp	r3, r2
 8013cb8:	d031      	beq.n	8013d1e <HAL_DMA_IRQHandler+0xc62>
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	4a22      	ldr	r2, [pc, #136]	@ (8013d48 <HAL_DMA_IRQHandler+0xc8c>)
 8013cc0:	4293      	cmp	r3, r2
 8013cc2:	d02c      	beq.n	8013d1e <HAL_DMA_IRQHandler+0xc62>
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	4a20      	ldr	r2, [pc, #128]	@ (8013d4c <HAL_DMA_IRQHandler+0xc90>)
 8013cca:	4293      	cmp	r3, r2
 8013ccc:	d027      	beq.n	8013d1e <HAL_DMA_IRQHandler+0xc62>
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8013d50 <HAL_DMA_IRQHandler+0xc94>)
 8013cd4:	4293      	cmp	r3, r2
 8013cd6:	d022      	beq.n	8013d1e <HAL_DMA_IRQHandler+0xc62>
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8013d54 <HAL_DMA_IRQHandler+0xc98>)
 8013cde:	4293      	cmp	r3, r2
 8013ce0:	d01d      	beq.n	8013d1e <HAL_DMA_IRQHandler+0xc62>
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8013d58 <HAL_DMA_IRQHandler+0xc9c>)
 8013ce8:	4293      	cmp	r3, r2
 8013cea:	d018      	beq.n	8013d1e <HAL_DMA_IRQHandler+0xc62>
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8013d5c <HAL_DMA_IRQHandler+0xca0>)
 8013cf2:	4293      	cmp	r3, r2
 8013cf4:	d013      	beq.n	8013d1e <HAL_DMA_IRQHandler+0xc62>
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	4a19      	ldr	r2, [pc, #100]	@ (8013d60 <HAL_DMA_IRQHandler+0xca4>)
 8013cfc:	4293      	cmp	r3, r2
 8013cfe:	d00e      	beq.n	8013d1e <HAL_DMA_IRQHandler+0xc62>
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	4a17      	ldr	r2, [pc, #92]	@ (8013d64 <HAL_DMA_IRQHandler+0xca8>)
 8013d06:	4293      	cmp	r3, r2
 8013d08:	d009      	beq.n	8013d1e <HAL_DMA_IRQHandler+0xc62>
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	4a16      	ldr	r2, [pc, #88]	@ (8013d68 <HAL_DMA_IRQHandler+0xcac>)
 8013d10:	4293      	cmp	r3, r2
 8013d12:	d004      	beq.n	8013d1e <HAL_DMA_IRQHandler+0xc62>
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	4a14      	ldr	r2, [pc, #80]	@ (8013d6c <HAL_DMA_IRQHandler+0xcb0>)
 8013d1a:	4293      	cmp	r3, r2
 8013d1c:	d128      	bne.n	8013d70 <HAL_DMA_IRQHandler+0xcb4>
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	681a      	ldr	r2, [r3, #0]
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	f022 0214 	bic.w	r2, r2, #20
 8013d2c:	601a      	str	r2, [r3, #0]
 8013d2e:	e027      	b.n	8013d80 <HAL_DMA_IRQHandler+0xcc4>
 8013d30:	40020010 	.word	0x40020010
 8013d34:	40020028 	.word	0x40020028
 8013d38:	40020040 	.word	0x40020040
 8013d3c:	40020058 	.word	0x40020058
 8013d40:	40020070 	.word	0x40020070
 8013d44:	40020088 	.word	0x40020088
 8013d48:	400200a0 	.word	0x400200a0
 8013d4c:	400200b8 	.word	0x400200b8
 8013d50:	40020410 	.word	0x40020410
 8013d54:	40020428 	.word	0x40020428
 8013d58:	40020440 	.word	0x40020440
 8013d5c:	40020458 	.word	0x40020458
 8013d60:	40020470 	.word	0x40020470
 8013d64:	40020488 	.word	0x40020488
 8013d68:	400204a0 	.word	0x400204a0
 8013d6c:	400204b8 	.word	0x400204b8
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	681a      	ldr	r2, [r3, #0]
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	f022 020a 	bic.w	r2, r2, #10
 8013d7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	2201      	movs	r2, #1
 8013d84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	f000 8097 	beq.w	8013ec8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013d9e:	6878      	ldr	r0, [r7, #4]
 8013da0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8013da2:	e091      	b.n	8013ec8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013da8:	f003 031f 	and.w	r3, r3, #31
 8013dac:	2208      	movs	r2, #8
 8013dae:	409a      	lsls	r2, r3
 8013db0:	697b      	ldr	r3, [r7, #20]
 8013db2:	4013      	ands	r3, r2
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	f000 8088 	beq.w	8013eca <HAL_DMA_IRQHandler+0xe0e>
 8013dba:	693b      	ldr	r3, [r7, #16]
 8013dbc:	f003 0308 	and.w	r3, r3, #8
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	f000 8082 	beq.w	8013eca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	4a41      	ldr	r2, [pc, #260]	@ (8013ed0 <HAL_DMA_IRQHandler+0xe14>)
 8013dcc:	4293      	cmp	r3, r2
 8013dce:	d04a      	beq.n	8013e66 <HAL_DMA_IRQHandler+0xdaa>
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	4a3f      	ldr	r2, [pc, #252]	@ (8013ed4 <HAL_DMA_IRQHandler+0xe18>)
 8013dd6:	4293      	cmp	r3, r2
 8013dd8:	d045      	beq.n	8013e66 <HAL_DMA_IRQHandler+0xdaa>
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	4a3e      	ldr	r2, [pc, #248]	@ (8013ed8 <HAL_DMA_IRQHandler+0xe1c>)
 8013de0:	4293      	cmp	r3, r2
 8013de2:	d040      	beq.n	8013e66 <HAL_DMA_IRQHandler+0xdaa>
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	4a3c      	ldr	r2, [pc, #240]	@ (8013edc <HAL_DMA_IRQHandler+0xe20>)
 8013dea:	4293      	cmp	r3, r2
 8013dec:	d03b      	beq.n	8013e66 <HAL_DMA_IRQHandler+0xdaa>
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	4a3b      	ldr	r2, [pc, #236]	@ (8013ee0 <HAL_DMA_IRQHandler+0xe24>)
 8013df4:	4293      	cmp	r3, r2
 8013df6:	d036      	beq.n	8013e66 <HAL_DMA_IRQHandler+0xdaa>
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	4a39      	ldr	r2, [pc, #228]	@ (8013ee4 <HAL_DMA_IRQHandler+0xe28>)
 8013dfe:	4293      	cmp	r3, r2
 8013e00:	d031      	beq.n	8013e66 <HAL_DMA_IRQHandler+0xdaa>
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	4a38      	ldr	r2, [pc, #224]	@ (8013ee8 <HAL_DMA_IRQHandler+0xe2c>)
 8013e08:	4293      	cmp	r3, r2
 8013e0a:	d02c      	beq.n	8013e66 <HAL_DMA_IRQHandler+0xdaa>
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	4a36      	ldr	r2, [pc, #216]	@ (8013eec <HAL_DMA_IRQHandler+0xe30>)
 8013e12:	4293      	cmp	r3, r2
 8013e14:	d027      	beq.n	8013e66 <HAL_DMA_IRQHandler+0xdaa>
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	4a35      	ldr	r2, [pc, #212]	@ (8013ef0 <HAL_DMA_IRQHandler+0xe34>)
 8013e1c:	4293      	cmp	r3, r2
 8013e1e:	d022      	beq.n	8013e66 <HAL_DMA_IRQHandler+0xdaa>
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	4a33      	ldr	r2, [pc, #204]	@ (8013ef4 <HAL_DMA_IRQHandler+0xe38>)
 8013e26:	4293      	cmp	r3, r2
 8013e28:	d01d      	beq.n	8013e66 <HAL_DMA_IRQHandler+0xdaa>
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	4a32      	ldr	r2, [pc, #200]	@ (8013ef8 <HAL_DMA_IRQHandler+0xe3c>)
 8013e30:	4293      	cmp	r3, r2
 8013e32:	d018      	beq.n	8013e66 <HAL_DMA_IRQHandler+0xdaa>
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	4a30      	ldr	r2, [pc, #192]	@ (8013efc <HAL_DMA_IRQHandler+0xe40>)
 8013e3a:	4293      	cmp	r3, r2
 8013e3c:	d013      	beq.n	8013e66 <HAL_DMA_IRQHandler+0xdaa>
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	4a2f      	ldr	r2, [pc, #188]	@ (8013f00 <HAL_DMA_IRQHandler+0xe44>)
 8013e44:	4293      	cmp	r3, r2
 8013e46:	d00e      	beq.n	8013e66 <HAL_DMA_IRQHandler+0xdaa>
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8013f04 <HAL_DMA_IRQHandler+0xe48>)
 8013e4e:	4293      	cmp	r3, r2
 8013e50:	d009      	beq.n	8013e66 <HAL_DMA_IRQHandler+0xdaa>
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	4a2c      	ldr	r2, [pc, #176]	@ (8013f08 <HAL_DMA_IRQHandler+0xe4c>)
 8013e58:	4293      	cmp	r3, r2
 8013e5a:	d004      	beq.n	8013e66 <HAL_DMA_IRQHandler+0xdaa>
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	4a2a      	ldr	r2, [pc, #168]	@ (8013f0c <HAL_DMA_IRQHandler+0xe50>)
 8013e62:	4293      	cmp	r3, r2
 8013e64:	d108      	bne.n	8013e78 <HAL_DMA_IRQHandler+0xdbc>
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	681a      	ldr	r2, [r3, #0]
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	f022 021c 	bic.w	r2, r2, #28
 8013e74:	601a      	str	r2, [r3, #0]
 8013e76:	e007      	b.n	8013e88 <HAL_DMA_IRQHandler+0xdcc>
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	681a      	ldr	r2, [r3, #0]
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	f022 020e 	bic.w	r2, r2, #14
 8013e86:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013e8c:	f003 031f 	and.w	r3, r3, #31
 8013e90:	2201      	movs	r2, #1
 8013e92:	409a      	lsls	r2, r3
 8013e94:	69fb      	ldr	r3, [r7, #28]
 8013e96:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	2201      	movs	r2, #1
 8013e9c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	2201      	movs	r2, #1
 8013ea2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	2200      	movs	r2, #0
 8013eaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d009      	beq.n	8013eca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	4798      	blx	r3
 8013ebe:	e004      	b.n	8013eca <HAL_DMA_IRQHandler+0xe0e>
          return;
 8013ec0:	bf00      	nop
 8013ec2:	e002      	b.n	8013eca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8013ec4:	bf00      	nop
 8013ec6:	e000      	b.n	8013eca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8013ec8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8013eca:	3728      	adds	r7, #40	@ 0x28
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	bd80      	pop	{r7, pc}
 8013ed0:	40020010 	.word	0x40020010
 8013ed4:	40020028 	.word	0x40020028
 8013ed8:	40020040 	.word	0x40020040
 8013edc:	40020058 	.word	0x40020058
 8013ee0:	40020070 	.word	0x40020070
 8013ee4:	40020088 	.word	0x40020088
 8013ee8:	400200a0 	.word	0x400200a0
 8013eec:	400200b8 	.word	0x400200b8
 8013ef0:	40020410 	.word	0x40020410
 8013ef4:	40020428 	.word	0x40020428
 8013ef8:	40020440 	.word	0x40020440
 8013efc:	40020458 	.word	0x40020458
 8013f00:	40020470 	.word	0x40020470
 8013f04:	40020488 	.word	0x40020488
 8013f08:	400204a0 	.word	0x400204a0
 8013f0c:	400204b8 	.word	0x400204b8

08013f10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8013f10:	b480      	push	{r7}
 8013f12:	b087      	sub	sp, #28
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	60f8      	str	r0, [r7, #12]
 8013f18:	60b9      	str	r1, [r7, #8]
 8013f1a:	607a      	str	r2, [r7, #4]
 8013f1c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013f22:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013f28:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	4a7f      	ldr	r2, [pc, #508]	@ (801412c <DMA_SetConfig+0x21c>)
 8013f30:	4293      	cmp	r3, r2
 8013f32:	d072      	beq.n	801401a <DMA_SetConfig+0x10a>
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	4a7d      	ldr	r2, [pc, #500]	@ (8014130 <DMA_SetConfig+0x220>)
 8013f3a:	4293      	cmp	r3, r2
 8013f3c:	d06d      	beq.n	801401a <DMA_SetConfig+0x10a>
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	4a7c      	ldr	r2, [pc, #496]	@ (8014134 <DMA_SetConfig+0x224>)
 8013f44:	4293      	cmp	r3, r2
 8013f46:	d068      	beq.n	801401a <DMA_SetConfig+0x10a>
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	4a7a      	ldr	r2, [pc, #488]	@ (8014138 <DMA_SetConfig+0x228>)
 8013f4e:	4293      	cmp	r3, r2
 8013f50:	d063      	beq.n	801401a <DMA_SetConfig+0x10a>
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	4a79      	ldr	r2, [pc, #484]	@ (801413c <DMA_SetConfig+0x22c>)
 8013f58:	4293      	cmp	r3, r2
 8013f5a:	d05e      	beq.n	801401a <DMA_SetConfig+0x10a>
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	4a77      	ldr	r2, [pc, #476]	@ (8014140 <DMA_SetConfig+0x230>)
 8013f62:	4293      	cmp	r3, r2
 8013f64:	d059      	beq.n	801401a <DMA_SetConfig+0x10a>
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	4a76      	ldr	r2, [pc, #472]	@ (8014144 <DMA_SetConfig+0x234>)
 8013f6c:	4293      	cmp	r3, r2
 8013f6e:	d054      	beq.n	801401a <DMA_SetConfig+0x10a>
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	4a74      	ldr	r2, [pc, #464]	@ (8014148 <DMA_SetConfig+0x238>)
 8013f76:	4293      	cmp	r3, r2
 8013f78:	d04f      	beq.n	801401a <DMA_SetConfig+0x10a>
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	4a73      	ldr	r2, [pc, #460]	@ (801414c <DMA_SetConfig+0x23c>)
 8013f80:	4293      	cmp	r3, r2
 8013f82:	d04a      	beq.n	801401a <DMA_SetConfig+0x10a>
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	4a71      	ldr	r2, [pc, #452]	@ (8014150 <DMA_SetConfig+0x240>)
 8013f8a:	4293      	cmp	r3, r2
 8013f8c:	d045      	beq.n	801401a <DMA_SetConfig+0x10a>
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	4a70      	ldr	r2, [pc, #448]	@ (8014154 <DMA_SetConfig+0x244>)
 8013f94:	4293      	cmp	r3, r2
 8013f96:	d040      	beq.n	801401a <DMA_SetConfig+0x10a>
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	4a6e      	ldr	r2, [pc, #440]	@ (8014158 <DMA_SetConfig+0x248>)
 8013f9e:	4293      	cmp	r3, r2
 8013fa0:	d03b      	beq.n	801401a <DMA_SetConfig+0x10a>
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	4a6d      	ldr	r2, [pc, #436]	@ (801415c <DMA_SetConfig+0x24c>)
 8013fa8:	4293      	cmp	r3, r2
 8013faa:	d036      	beq.n	801401a <DMA_SetConfig+0x10a>
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	4a6b      	ldr	r2, [pc, #428]	@ (8014160 <DMA_SetConfig+0x250>)
 8013fb2:	4293      	cmp	r3, r2
 8013fb4:	d031      	beq.n	801401a <DMA_SetConfig+0x10a>
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	4a6a      	ldr	r2, [pc, #424]	@ (8014164 <DMA_SetConfig+0x254>)
 8013fbc:	4293      	cmp	r3, r2
 8013fbe:	d02c      	beq.n	801401a <DMA_SetConfig+0x10a>
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	4a68      	ldr	r2, [pc, #416]	@ (8014168 <DMA_SetConfig+0x258>)
 8013fc6:	4293      	cmp	r3, r2
 8013fc8:	d027      	beq.n	801401a <DMA_SetConfig+0x10a>
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	4a67      	ldr	r2, [pc, #412]	@ (801416c <DMA_SetConfig+0x25c>)
 8013fd0:	4293      	cmp	r3, r2
 8013fd2:	d022      	beq.n	801401a <DMA_SetConfig+0x10a>
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	4a65      	ldr	r2, [pc, #404]	@ (8014170 <DMA_SetConfig+0x260>)
 8013fda:	4293      	cmp	r3, r2
 8013fdc:	d01d      	beq.n	801401a <DMA_SetConfig+0x10a>
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	4a64      	ldr	r2, [pc, #400]	@ (8014174 <DMA_SetConfig+0x264>)
 8013fe4:	4293      	cmp	r3, r2
 8013fe6:	d018      	beq.n	801401a <DMA_SetConfig+0x10a>
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	4a62      	ldr	r2, [pc, #392]	@ (8014178 <DMA_SetConfig+0x268>)
 8013fee:	4293      	cmp	r3, r2
 8013ff0:	d013      	beq.n	801401a <DMA_SetConfig+0x10a>
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	4a61      	ldr	r2, [pc, #388]	@ (801417c <DMA_SetConfig+0x26c>)
 8013ff8:	4293      	cmp	r3, r2
 8013ffa:	d00e      	beq.n	801401a <DMA_SetConfig+0x10a>
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	4a5f      	ldr	r2, [pc, #380]	@ (8014180 <DMA_SetConfig+0x270>)
 8014002:	4293      	cmp	r3, r2
 8014004:	d009      	beq.n	801401a <DMA_SetConfig+0x10a>
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	4a5e      	ldr	r2, [pc, #376]	@ (8014184 <DMA_SetConfig+0x274>)
 801400c:	4293      	cmp	r3, r2
 801400e:	d004      	beq.n	801401a <DMA_SetConfig+0x10a>
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	4a5c      	ldr	r2, [pc, #368]	@ (8014188 <DMA_SetConfig+0x278>)
 8014016:	4293      	cmp	r3, r2
 8014018:	d101      	bne.n	801401e <DMA_SetConfig+0x10e>
 801401a:	2301      	movs	r3, #1
 801401c:	e000      	b.n	8014020 <DMA_SetConfig+0x110>
 801401e:	2300      	movs	r3, #0
 8014020:	2b00      	cmp	r3, #0
 8014022:	d00d      	beq.n	8014040 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014028:	68fa      	ldr	r2, [r7, #12]
 801402a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801402c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014032:	2b00      	cmp	r3, #0
 8014034:	d004      	beq.n	8014040 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801403a:	68fa      	ldr	r2, [r7, #12]
 801403c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801403e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	4a39      	ldr	r2, [pc, #228]	@ (801412c <DMA_SetConfig+0x21c>)
 8014046:	4293      	cmp	r3, r2
 8014048:	d04a      	beq.n	80140e0 <DMA_SetConfig+0x1d0>
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	4a38      	ldr	r2, [pc, #224]	@ (8014130 <DMA_SetConfig+0x220>)
 8014050:	4293      	cmp	r3, r2
 8014052:	d045      	beq.n	80140e0 <DMA_SetConfig+0x1d0>
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	4a36      	ldr	r2, [pc, #216]	@ (8014134 <DMA_SetConfig+0x224>)
 801405a:	4293      	cmp	r3, r2
 801405c:	d040      	beq.n	80140e0 <DMA_SetConfig+0x1d0>
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	4a35      	ldr	r2, [pc, #212]	@ (8014138 <DMA_SetConfig+0x228>)
 8014064:	4293      	cmp	r3, r2
 8014066:	d03b      	beq.n	80140e0 <DMA_SetConfig+0x1d0>
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	4a33      	ldr	r2, [pc, #204]	@ (801413c <DMA_SetConfig+0x22c>)
 801406e:	4293      	cmp	r3, r2
 8014070:	d036      	beq.n	80140e0 <DMA_SetConfig+0x1d0>
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	4a32      	ldr	r2, [pc, #200]	@ (8014140 <DMA_SetConfig+0x230>)
 8014078:	4293      	cmp	r3, r2
 801407a:	d031      	beq.n	80140e0 <DMA_SetConfig+0x1d0>
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	4a30      	ldr	r2, [pc, #192]	@ (8014144 <DMA_SetConfig+0x234>)
 8014082:	4293      	cmp	r3, r2
 8014084:	d02c      	beq.n	80140e0 <DMA_SetConfig+0x1d0>
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	4a2f      	ldr	r2, [pc, #188]	@ (8014148 <DMA_SetConfig+0x238>)
 801408c:	4293      	cmp	r3, r2
 801408e:	d027      	beq.n	80140e0 <DMA_SetConfig+0x1d0>
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	4a2d      	ldr	r2, [pc, #180]	@ (801414c <DMA_SetConfig+0x23c>)
 8014096:	4293      	cmp	r3, r2
 8014098:	d022      	beq.n	80140e0 <DMA_SetConfig+0x1d0>
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	4a2c      	ldr	r2, [pc, #176]	@ (8014150 <DMA_SetConfig+0x240>)
 80140a0:	4293      	cmp	r3, r2
 80140a2:	d01d      	beq.n	80140e0 <DMA_SetConfig+0x1d0>
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	4a2a      	ldr	r2, [pc, #168]	@ (8014154 <DMA_SetConfig+0x244>)
 80140aa:	4293      	cmp	r3, r2
 80140ac:	d018      	beq.n	80140e0 <DMA_SetConfig+0x1d0>
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	4a29      	ldr	r2, [pc, #164]	@ (8014158 <DMA_SetConfig+0x248>)
 80140b4:	4293      	cmp	r3, r2
 80140b6:	d013      	beq.n	80140e0 <DMA_SetConfig+0x1d0>
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	4a27      	ldr	r2, [pc, #156]	@ (801415c <DMA_SetConfig+0x24c>)
 80140be:	4293      	cmp	r3, r2
 80140c0:	d00e      	beq.n	80140e0 <DMA_SetConfig+0x1d0>
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	4a26      	ldr	r2, [pc, #152]	@ (8014160 <DMA_SetConfig+0x250>)
 80140c8:	4293      	cmp	r3, r2
 80140ca:	d009      	beq.n	80140e0 <DMA_SetConfig+0x1d0>
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	4a24      	ldr	r2, [pc, #144]	@ (8014164 <DMA_SetConfig+0x254>)
 80140d2:	4293      	cmp	r3, r2
 80140d4:	d004      	beq.n	80140e0 <DMA_SetConfig+0x1d0>
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	4a23      	ldr	r2, [pc, #140]	@ (8014168 <DMA_SetConfig+0x258>)
 80140dc:	4293      	cmp	r3, r2
 80140de:	d101      	bne.n	80140e4 <DMA_SetConfig+0x1d4>
 80140e0:	2301      	movs	r3, #1
 80140e2:	e000      	b.n	80140e6 <DMA_SetConfig+0x1d6>
 80140e4:	2300      	movs	r3, #0
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d059      	beq.n	801419e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80140ee:	f003 031f 	and.w	r3, r3, #31
 80140f2:	223f      	movs	r2, #63	@ 0x3f
 80140f4:	409a      	lsls	r2, r3
 80140f6:	697b      	ldr	r3, [r7, #20]
 80140f8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	681a      	ldr	r2, [r3, #0]
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8014108:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	683a      	ldr	r2, [r7, #0]
 8014110:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	689b      	ldr	r3, [r3, #8]
 8014116:	2b40      	cmp	r3, #64	@ 0x40
 8014118:	d138      	bne.n	801418c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	687a      	ldr	r2, [r7, #4]
 8014120:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	68ba      	ldr	r2, [r7, #8]
 8014128:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 801412a:	e086      	b.n	801423a <DMA_SetConfig+0x32a>
 801412c:	40020010 	.word	0x40020010
 8014130:	40020028 	.word	0x40020028
 8014134:	40020040 	.word	0x40020040
 8014138:	40020058 	.word	0x40020058
 801413c:	40020070 	.word	0x40020070
 8014140:	40020088 	.word	0x40020088
 8014144:	400200a0 	.word	0x400200a0
 8014148:	400200b8 	.word	0x400200b8
 801414c:	40020410 	.word	0x40020410
 8014150:	40020428 	.word	0x40020428
 8014154:	40020440 	.word	0x40020440
 8014158:	40020458 	.word	0x40020458
 801415c:	40020470 	.word	0x40020470
 8014160:	40020488 	.word	0x40020488
 8014164:	400204a0 	.word	0x400204a0
 8014168:	400204b8 	.word	0x400204b8
 801416c:	58025408 	.word	0x58025408
 8014170:	5802541c 	.word	0x5802541c
 8014174:	58025430 	.word	0x58025430
 8014178:	58025444 	.word	0x58025444
 801417c:	58025458 	.word	0x58025458
 8014180:	5802546c 	.word	0x5802546c
 8014184:	58025480 	.word	0x58025480
 8014188:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	68ba      	ldr	r2, [r7, #8]
 8014192:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	687a      	ldr	r2, [r7, #4]
 801419a:	60da      	str	r2, [r3, #12]
}
 801419c:	e04d      	b.n	801423a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	4a29      	ldr	r2, [pc, #164]	@ (8014248 <DMA_SetConfig+0x338>)
 80141a4:	4293      	cmp	r3, r2
 80141a6:	d022      	beq.n	80141ee <DMA_SetConfig+0x2de>
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	4a27      	ldr	r2, [pc, #156]	@ (801424c <DMA_SetConfig+0x33c>)
 80141ae:	4293      	cmp	r3, r2
 80141b0:	d01d      	beq.n	80141ee <DMA_SetConfig+0x2de>
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	4a26      	ldr	r2, [pc, #152]	@ (8014250 <DMA_SetConfig+0x340>)
 80141b8:	4293      	cmp	r3, r2
 80141ba:	d018      	beq.n	80141ee <DMA_SetConfig+0x2de>
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	4a24      	ldr	r2, [pc, #144]	@ (8014254 <DMA_SetConfig+0x344>)
 80141c2:	4293      	cmp	r3, r2
 80141c4:	d013      	beq.n	80141ee <DMA_SetConfig+0x2de>
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	4a23      	ldr	r2, [pc, #140]	@ (8014258 <DMA_SetConfig+0x348>)
 80141cc:	4293      	cmp	r3, r2
 80141ce:	d00e      	beq.n	80141ee <DMA_SetConfig+0x2de>
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	4a21      	ldr	r2, [pc, #132]	@ (801425c <DMA_SetConfig+0x34c>)
 80141d6:	4293      	cmp	r3, r2
 80141d8:	d009      	beq.n	80141ee <DMA_SetConfig+0x2de>
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	4a20      	ldr	r2, [pc, #128]	@ (8014260 <DMA_SetConfig+0x350>)
 80141e0:	4293      	cmp	r3, r2
 80141e2:	d004      	beq.n	80141ee <DMA_SetConfig+0x2de>
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	4a1e      	ldr	r2, [pc, #120]	@ (8014264 <DMA_SetConfig+0x354>)
 80141ea:	4293      	cmp	r3, r2
 80141ec:	d101      	bne.n	80141f2 <DMA_SetConfig+0x2e2>
 80141ee:	2301      	movs	r3, #1
 80141f0:	e000      	b.n	80141f4 <DMA_SetConfig+0x2e4>
 80141f2:	2300      	movs	r3, #0
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d020      	beq.n	801423a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80141fc:	f003 031f 	and.w	r3, r3, #31
 8014200:	2201      	movs	r2, #1
 8014202:	409a      	lsls	r2, r3
 8014204:	693b      	ldr	r3, [r7, #16]
 8014206:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	683a      	ldr	r2, [r7, #0]
 801420e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	689b      	ldr	r3, [r3, #8]
 8014214:	2b40      	cmp	r3, #64	@ 0x40
 8014216:	d108      	bne.n	801422a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	687a      	ldr	r2, [r7, #4]
 801421e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	68ba      	ldr	r2, [r7, #8]
 8014226:	60da      	str	r2, [r3, #12]
}
 8014228:	e007      	b.n	801423a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	68ba      	ldr	r2, [r7, #8]
 8014230:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	687a      	ldr	r2, [r7, #4]
 8014238:	60da      	str	r2, [r3, #12]
}
 801423a:	bf00      	nop
 801423c:	371c      	adds	r7, #28
 801423e:	46bd      	mov	sp, r7
 8014240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014244:	4770      	bx	lr
 8014246:	bf00      	nop
 8014248:	58025408 	.word	0x58025408
 801424c:	5802541c 	.word	0x5802541c
 8014250:	58025430 	.word	0x58025430
 8014254:	58025444 	.word	0x58025444
 8014258:	58025458 	.word	0x58025458
 801425c:	5802546c 	.word	0x5802546c
 8014260:	58025480 	.word	0x58025480
 8014264:	58025494 	.word	0x58025494

08014268 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8014268:	b480      	push	{r7}
 801426a:	b085      	sub	sp, #20
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	4a42      	ldr	r2, [pc, #264]	@ (8014380 <DMA_CalcBaseAndBitshift+0x118>)
 8014276:	4293      	cmp	r3, r2
 8014278:	d04a      	beq.n	8014310 <DMA_CalcBaseAndBitshift+0xa8>
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	4a41      	ldr	r2, [pc, #260]	@ (8014384 <DMA_CalcBaseAndBitshift+0x11c>)
 8014280:	4293      	cmp	r3, r2
 8014282:	d045      	beq.n	8014310 <DMA_CalcBaseAndBitshift+0xa8>
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	4a3f      	ldr	r2, [pc, #252]	@ (8014388 <DMA_CalcBaseAndBitshift+0x120>)
 801428a:	4293      	cmp	r3, r2
 801428c:	d040      	beq.n	8014310 <DMA_CalcBaseAndBitshift+0xa8>
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	4a3e      	ldr	r2, [pc, #248]	@ (801438c <DMA_CalcBaseAndBitshift+0x124>)
 8014294:	4293      	cmp	r3, r2
 8014296:	d03b      	beq.n	8014310 <DMA_CalcBaseAndBitshift+0xa8>
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	4a3c      	ldr	r2, [pc, #240]	@ (8014390 <DMA_CalcBaseAndBitshift+0x128>)
 801429e:	4293      	cmp	r3, r2
 80142a0:	d036      	beq.n	8014310 <DMA_CalcBaseAndBitshift+0xa8>
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	4a3b      	ldr	r2, [pc, #236]	@ (8014394 <DMA_CalcBaseAndBitshift+0x12c>)
 80142a8:	4293      	cmp	r3, r2
 80142aa:	d031      	beq.n	8014310 <DMA_CalcBaseAndBitshift+0xa8>
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	4a39      	ldr	r2, [pc, #228]	@ (8014398 <DMA_CalcBaseAndBitshift+0x130>)
 80142b2:	4293      	cmp	r3, r2
 80142b4:	d02c      	beq.n	8014310 <DMA_CalcBaseAndBitshift+0xa8>
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	4a38      	ldr	r2, [pc, #224]	@ (801439c <DMA_CalcBaseAndBitshift+0x134>)
 80142bc:	4293      	cmp	r3, r2
 80142be:	d027      	beq.n	8014310 <DMA_CalcBaseAndBitshift+0xa8>
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	4a36      	ldr	r2, [pc, #216]	@ (80143a0 <DMA_CalcBaseAndBitshift+0x138>)
 80142c6:	4293      	cmp	r3, r2
 80142c8:	d022      	beq.n	8014310 <DMA_CalcBaseAndBitshift+0xa8>
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	4a35      	ldr	r2, [pc, #212]	@ (80143a4 <DMA_CalcBaseAndBitshift+0x13c>)
 80142d0:	4293      	cmp	r3, r2
 80142d2:	d01d      	beq.n	8014310 <DMA_CalcBaseAndBitshift+0xa8>
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	4a33      	ldr	r2, [pc, #204]	@ (80143a8 <DMA_CalcBaseAndBitshift+0x140>)
 80142da:	4293      	cmp	r3, r2
 80142dc:	d018      	beq.n	8014310 <DMA_CalcBaseAndBitshift+0xa8>
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	4a32      	ldr	r2, [pc, #200]	@ (80143ac <DMA_CalcBaseAndBitshift+0x144>)
 80142e4:	4293      	cmp	r3, r2
 80142e6:	d013      	beq.n	8014310 <DMA_CalcBaseAndBitshift+0xa8>
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	4a30      	ldr	r2, [pc, #192]	@ (80143b0 <DMA_CalcBaseAndBitshift+0x148>)
 80142ee:	4293      	cmp	r3, r2
 80142f0:	d00e      	beq.n	8014310 <DMA_CalcBaseAndBitshift+0xa8>
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	4a2f      	ldr	r2, [pc, #188]	@ (80143b4 <DMA_CalcBaseAndBitshift+0x14c>)
 80142f8:	4293      	cmp	r3, r2
 80142fa:	d009      	beq.n	8014310 <DMA_CalcBaseAndBitshift+0xa8>
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	4a2d      	ldr	r2, [pc, #180]	@ (80143b8 <DMA_CalcBaseAndBitshift+0x150>)
 8014302:	4293      	cmp	r3, r2
 8014304:	d004      	beq.n	8014310 <DMA_CalcBaseAndBitshift+0xa8>
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	4a2c      	ldr	r2, [pc, #176]	@ (80143bc <DMA_CalcBaseAndBitshift+0x154>)
 801430c:	4293      	cmp	r3, r2
 801430e:	d101      	bne.n	8014314 <DMA_CalcBaseAndBitshift+0xac>
 8014310:	2301      	movs	r3, #1
 8014312:	e000      	b.n	8014316 <DMA_CalcBaseAndBitshift+0xae>
 8014314:	2300      	movs	r3, #0
 8014316:	2b00      	cmp	r3, #0
 8014318:	d024      	beq.n	8014364 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	b2db      	uxtb	r3, r3
 8014320:	3b10      	subs	r3, #16
 8014322:	4a27      	ldr	r2, [pc, #156]	@ (80143c0 <DMA_CalcBaseAndBitshift+0x158>)
 8014324:	fba2 2303 	umull	r2, r3, r2, r3
 8014328:	091b      	lsrs	r3, r3, #4
 801432a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	f003 0307 	and.w	r3, r3, #7
 8014332:	4a24      	ldr	r2, [pc, #144]	@ (80143c4 <DMA_CalcBaseAndBitshift+0x15c>)
 8014334:	5cd3      	ldrb	r3, [r2, r3]
 8014336:	461a      	mov	r2, r3
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	2b03      	cmp	r3, #3
 8014340:	d908      	bls.n	8014354 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	461a      	mov	r2, r3
 8014348:	4b1f      	ldr	r3, [pc, #124]	@ (80143c8 <DMA_CalcBaseAndBitshift+0x160>)
 801434a:	4013      	ands	r3, r2
 801434c:	1d1a      	adds	r2, r3, #4
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	659a      	str	r2, [r3, #88]	@ 0x58
 8014352:	e00d      	b.n	8014370 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	461a      	mov	r2, r3
 801435a:	4b1b      	ldr	r3, [pc, #108]	@ (80143c8 <DMA_CalcBaseAndBitshift+0x160>)
 801435c:	4013      	ands	r3, r2
 801435e:	687a      	ldr	r2, [r7, #4]
 8014360:	6593      	str	r3, [r2, #88]	@ 0x58
 8014362:	e005      	b.n	8014370 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8014374:	4618      	mov	r0, r3
 8014376:	3714      	adds	r7, #20
 8014378:	46bd      	mov	sp, r7
 801437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437e:	4770      	bx	lr
 8014380:	40020010 	.word	0x40020010
 8014384:	40020028 	.word	0x40020028
 8014388:	40020040 	.word	0x40020040
 801438c:	40020058 	.word	0x40020058
 8014390:	40020070 	.word	0x40020070
 8014394:	40020088 	.word	0x40020088
 8014398:	400200a0 	.word	0x400200a0
 801439c:	400200b8 	.word	0x400200b8
 80143a0:	40020410 	.word	0x40020410
 80143a4:	40020428 	.word	0x40020428
 80143a8:	40020440 	.word	0x40020440
 80143ac:	40020458 	.word	0x40020458
 80143b0:	40020470 	.word	0x40020470
 80143b4:	40020488 	.word	0x40020488
 80143b8:	400204a0 	.word	0x400204a0
 80143bc:	400204b8 	.word	0x400204b8
 80143c0:	aaaaaaab 	.word	0xaaaaaaab
 80143c4:	08038298 	.word	0x08038298
 80143c8:	fffffc00 	.word	0xfffffc00

080143cc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80143cc:	b480      	push	{r7}
 80143ce:	b085      	sub	sp, #20
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80143d4:	2300      	movs	r3, #0
 80143d6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	699b      	ldr	r3, [r3, #24]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d120      	bne.n	8014422 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143e4:	2b03      	cmp	r3, #3
 80143e6:	d858      	bhi.n	801449a <DMA_CheckFifoParam+0xce>
 80143e8:	a201      	add	r2, pc, #4	@ (adr r2, 80143f0 <DMA_CheckFifoParam+0x24>)
 80143ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143ee:	bf00      	nop
 80143f0:	08014401 	.word	0x08014401
 80143f4:	08014413 	.word	0x08014413
 80143f8:	08014401 	.word	0x08014401
 80143fc:	0801449b 	.word	0x0801449b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014404:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8014408:	2b00      	cmp	r3, #0
 801440a:	d048      	beq.n	801449e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801440c:	2301      	movs	r3, #1
 801440e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8014410:	e045      	b.n	801449e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014416:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801441a:	d142      	bne.n	80144a2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801441c:	2301      	movs	r3, #1
 801441e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8014420:	e03f      	b.n	80144a2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	699b      	ldr	r3, [r3, #24]
 8014426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801442a:	d123      	bne.n	8014474 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014430:	2b03      	cmp	r3, #3
 8014432:	d838      	bhi.n	80144a6 <DMA_CheckFifoParam+0xda>
 8014434:	a201      	add	r2, pc, #4	@ (adr r2, 801443c <DMA_CheckFifoParam+0x70>)
 8014436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801443a:	bf00      	nop
 801443c:	0801444d 	.word	0x0801444d
 8014440:	08014453 	.word	0x08014453
 8014444:	0801444d 	.word	0x0801444d
 8014448:	08014465 	.word	0x08014465
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801444c:	2301      	movs	r3, #1
 801444e:	73fb      	strb	r3, [r7, #15]
        break;
 8014450:	e030      	b.n	80144b4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014456:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801445a:	2b00      	cmp	r3, #0
 801445c:	d025      	beq.n	80144aa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801445e:	2301      	movs	r3, #1
 8014460:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8014462:	e022      	b.n	80144aa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014468:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801446c:	d11f      	bne.n	80144ae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801446e:	2301      	movs	r3, #1
 8014470:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8014472:	e01c      	b.n	80144ae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014478:	2b02      	cmp	r3, #2
 801447a:	d902      	bls.n	8014482 <DMA_CheckFifoParam+0xb6>
 801447c:	2b03      	cmp	r3, #3
 801447e:	d003      	beq.n	8014488 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8014480:	e018      	b.n	80144b4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8014482:	2301      	movs	r3, #1
 8014484:	73fb      	strb	r3, [r7, #15]
        break;
 8014486:	e015      	b.n	80144b4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801448c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8014490:	2b00      	cmp	r3, #0
 8014492:	d00e      	beq.n	80144b2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8014494:	2301      	movs	r3, #1
 8014496:	73fb      	strb	r3, [r7, #15]
    break;
 8014498:	e00b      	b.n	80144b2 <DMA_CheckFifoParam+0xe6>
        break;
 801449a:	bf00      	nop
 801449c:	e00a      	b.n	80144b4 <DMA_CheckFifoParam+0xe8>
        break;
 801449e:	bf00      	nop
 80144a0:	e008      	b.n	80144b4 <DMA_CheckFifoParam+0xe8>
        break;
 80144a2:	bf00      	nop
 80144a4:	e006      	b.n	80144b4 <DMA_CheckFifoParam+0xe8>
        break;
 80144a6:	bf00      	nop
 80144a8:	e004      	b.n	80144b4 <DMA_CheckFifoParam+0xe8>
        break;
 80144aa:	bf00      	nop
 80144ac:	e002      	b.n	80144b4 <DMA_CheckFifoParam+0xe8>
        break;
 80144ae:	bf00      	nop
 80144b0:	e000      	b.n	80144b4 <DMA_CheckFifoParam+0xe8>
    break;
 80144b2:	bf00      	nop
    }
  }

  return status;
 80144b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80144b6:	4618      	mov	r0, r3
 80144b8:	3714      	adds	r7, #20
 80144ba:	46bd      	mov	sp, r7
 80144bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c0:	4770      	bx	lr
 80144c2:	bf00      	nop

080144c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80144c4:	b480      	push	{r7}
 80144c6:	b085      	sub	sp, #20
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	4a38      	ldr	r2, [pc, #224]	@ (80145b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80144d8:	4293      	cmp	r3, r2
 80144da:	d022      	beq.n	8014522 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	4a36      	ldr	r2, [pc, #216]	@ (80145bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80144e2:	4293      	cmp	r3, r2
 80144e4:	d01d      	beq.n	8014522 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	4a35      	ldr	r2, [pc, #212]	@ (80145c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80144ec:	4293      	cmp	r3, r2
 80144ee:	d018      	beq.n	8014522 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	4a33      	ldr	r2, [pc, #204]	@ (80145c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80144f6:	4293      	cmp	r3, r2
 80144f8:	d013      	beq.n	8014522 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	4a32      	ldr	r2, [pc, #200]	@ (80145c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8014500:	4293      	cmp	r3, r2
 8014502:	d00e      	beq.n	8014522 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	4a30      	ldr	r2, [pc, #192]	@ (80145cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801450a:	4293      	cmp	r3, r2
 801450c:	d009      	beq.n	8014522 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	4a2f      	ldr	r2, [pc, #188]	@ (80145d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8014514:	4293      	cmp	r3, r2
 8014516:	d004      	beq.n	8014522 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	4a2d      	ldr	r2, [pc, #180]	@ (80145d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801451e:	4293      	cmp	r3, r2
 8014520:	d101      	bne.n	8014526 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8014522:	2301      	movs	r3, #1
 8014524:	e000      	b.n	8014528 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8014526:	2300      	movs	r3, #0
 8014528:	2b00      	cmp	r3, #0
 801452a:	d01a      	beq.n	8014562 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	b2db      	uxtb	r3, r3
 8014532:	3b08      	subs	r3, #8
 8014534:	4a28      	ldr	r2, [pc, #160]	@ (80145d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8014536:	fba2 2303 	umull	r2, r3, r2, r3
 801453a:	091b      	lsrs	r3, r3, #4
 801453c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801453e:	68fa      	ldr	r2, [r7, #12]
 8014540:	4b26      	ldr	r3, [pc, #152]	@ (80145dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8014542:	4413      	add	r3, r2
 8014544:	009b      	lsls	r3, r3, #2
 8014546:	461a      	mov	r2, r3
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	4a24      	ldr	r2, [pc, #144]	@ (80145e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8014550:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	f003 031f 	and.w	r3, r3, #31
 8014558:	2201      	movs	r2, #1
 801455a:	409a      	lsls	r2, r3
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8014560:	e024      	b.n	80145ac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	b2db      	uxtb	r3, r3
 8014568:	3b10      	subs	r3, #16
 801456a:	4a1e      	ldr	r2, [pc, #120]	@ (80145e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801456c:	fba2 2303 	umull	r2, r3, r2, r3
 8014570:	091b      	lsrs	r3, r3, #4
 8014572:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	4a1c      	ldr	r2, [pc, #112]	@ (80145e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8014578:	4293      	cmp	r3, r2
 801457a:	d806      	bhi.n	801458a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801457c:	68bb      	ldr	r3, [r7, #8]
 801457e:	4a1b      	ldr	r2, [pc, #108]	@ (80145ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8014580:	4293      	cmp	r3, r2
 8014582:	d902      	bls.n	801458a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	3308      	adds	r3, #8
 8014588:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801458a:	68fa      	ldr	r2, [r7, #12]
 801458c:	4b18      	ldr	r3, [pc, #96]	@ (80145f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801458e:	4413      	add	r3, r2
 8014590:	009b      	lsls	r3, r3, #2
 8014592:	461a      	mov	r2, r3
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	4a16      	ldr	r2, [pc, #88]	@ (80145f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801459c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	f003 031f 	and.w	r3, r3, #31
 80145a4:	2201      	movs	r2, #1
 80145a6:	409a      	lsls	r2, r3
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80145ac:	bf00      	nop
 80145ae:	3714      	adds	r7, #20
 80145b0:	46bd      	mov	sp, r7
 80145b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b6:	4770      	bx	lr
 80145b8:	58025408 	.word	0x58025408
 80145bc:	5802541c 	.word	0x5802541c
 80145c0:	58025430 	.word	0x58025430
 80145c4:	58025444 	.word	0x58025444
 80145c8:	58025458 	.word	0x58025458
 80145cc:	5802546c 	.word	0x5802546c
 80145d0:	58025480 	.word	0x58025480
 80145d4:	58025494 	.word	0x58025494
 80145d8:	cccccccd 	.word	0xcccccccd
 80145dc:	16009600 	.word	0x16009600
 80145e0:	58025880 	.word	0x58025880
 80145e4:	aaaaaaab 	.word	0xaaaaaaab
 80145e8:	400204b8 	.word	0x400204b8
 80145ec:	4002040f 	.word	0x4002040f
 80145f0:	10008200 	.word	0x10008200
 80145f4:	40020880 	.word	0x40020880

080145f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80145f8:	b480      	push	{r7}
 80145fa:	b085      	sub	sp, #20
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	685b      	ldr	r3, [r3, #4]
 8014604:	b2db      	uxtb	r3, r3
 8014606:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d04a      	beq.n	80146a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	2b08      	cmp	r3, #8
 8014612:	d847      	bhi.n	80146a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	4a25      	ldr	r2, [pc, #148]	@ (80146b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801461a:	4293      	cmp	r3, r2
 801461c:	d022      	beq.n	8014664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	4a24      	ldr	r2, [pc, #144]	@ (80146b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8014624:	4293      	cmp	r3, r2
 8014626:	d01d      	beq.n	8014664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	4a22      	ldr	r2, [pc, #136]	@ (80146b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801462e:	4293      	cmp	r3, r2
 8014630:	d018      	beq.n	8014664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	4a21      	ldr	r2, [pc, #132]	@ (80146bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8014638:	4293      	cmp	r3, r2
 801463a:	d013      	beq.n	8014664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	4a1f      	ldr	r2, [pc, #124]	@ (80146c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8014642:	4293      	cmp	r3, r2
 8014644:	d00e      	beq.n	8014664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	4a1e      	ldr	r2, [pc, #120]	@ (80146c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801464c:	4293      	cmp	r3, r2
 801464e:	d009      	beq.n	8014664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	4a1c      	ldr	r2, [pc, #112]	@ (80146c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8014656:	4293      	cmp	r3, r2
 8014658:	d004      	beq.n	8014664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	4a1b      	ldr	r2, [pc, #108]	@ (80146cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8014660:	4293      	cmp	r3, r2
 8014662:	d101      	bne.n	8014668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8014664:	2301      	movs	r3, #1
 8014666:	e000      	b.n	801466a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8014668:	2300      	movs	r3, #0
 801466a:	2b00      	cmp	r3, #0
 801466c:	d00a      	beq.n	8014684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801466e:	68fa      	ldr	r2, [r7, #12]
 8014670:	4b17      	ldr	r3, [pc, #92]	@ (80146d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8014672:	4413      	add	r3, r2
 8014674:	009b      	lsls	r3, r3, #2
 8014676:	461a      	mov	r2, r3
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	4a15      	ldr	r2, [pc, #84]	@ (80146d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8014680:	671a      	str	r2, [r3, #112]	@ 0x70
 8014682:	e009      	b.n	8014698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8014684:	68fa      	ldr	r2, [r7, #12]
 8014686:	4b14      	ldr	r3, [pc, #80]	@ (80146d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8014688:	4413      	add	r3, r2
 801468a:	009b      	lsls	r3, r3, #2
 801468c:	461a      	mov	r2, r3
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	4a11      	ldr	r2, [pc, #68]	@ (80146dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8014696:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	3b01      	subs	r3, #1
 801469c:	2201      	movs	r2, #1
 801469e:	409a      	lsls	r2, r3
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80146a4:	bf00      	nop
 80146a6:	3714      	adds	r7, #20
 80146a8:	46bd      	mov	sp, r7
 80146aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ae:	4770      	bx	lr
 80146b0:	58025408 	.word	0x58025408
 80146b4:	5802541c 	.word	0x5802541c
 80146b8:	58025430 	.word	0x58025430
 80146bc:	58025444 	.word	0x58025444
 80146c0:	58025458 	.word	0x58025458
 80146c4:	5802546c 	.word	0x5802546c
 80146c8:	58025480 	.word	0x58025480
 80146cc:	58025494 	.word	0x58025494
 80146d0:	1600963f 	.word	0x1600963f
 80146d4:	58025940 	.word	0x58025940
 80146d8:	1000823f 	.word	0x1000823f
 80146dc:	40020940 	.word	0x40020940

080146e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80146e0:	b480      	push	{r7}
 80146e2:	b089      	sub	sp, #36	@ 0x24
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
 80146e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80146ea:	2300      	movs	r3, #0
 80146ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80146ee:	4b89      	ldr	r3, [pc, #548]	@ (8014914 <HAL_GPIO_Init+0x234>)
 80146f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80146f2:	e194      	b.n	8014a1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80146f4:	683b      	ldr	r3, [r7, #0]
 80146f6:	681a      	ldr	r2, [r3, #0]
 80146f8:	2101      	movs	r1, #1
 80146fa:	69fb      	ldr	r3, [r7, #28]
 80146fc:	fa01 f303 	lsl.w	r3, r1, r3
 8014700:	4013      	ands	r3, r2
 8014702:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8014704:	693b      	ldr	r3, [r7, #16]
 8014706:	2b00      	cmp	r3, #0
 8014708:	f000 8186 	beq.w	8014a18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801470c:	683b      	ldr	r3, [r7, #0]
 801470e:	685b      	ldr	r3, [r3, #4]
 8014710:	f003 0303 	and.w	r3, r3, #3
 8014714:	2b01      	cmp	r3, #1
 8014716:	d005      	beq.n	8014724 <HAL_GPIO_Init+0x44>
 8014718:	683b      	ldr	r3, [r7, #0]
 801471a:	685b      	ldr	r3, [r3, #4]
 801471c:	f003 0303 	and.w	r3, r3, #3
 8014720:	2b02      	cmp	r3, #2
 8014722:	d130      	bne.n	8014786 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	689b      	ldr	r3, [r3, #8]
 8014728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801472a:	69fb      	ldr	r3, [r7, #28]
 801472c:	005b      	lsls	r3, r3, #1
 801472e:	2203      	movs	r2, #3
 8014730:	fa02 f303 	lsl.w	r3, r2, r3
 8014734:	43db      	mvns	r3, r3
 8014736:	69ba      	ldr	r2, [r7, #24]
 8014738:	4013      	ands	r3, r2
 801473a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801473c:	683b      	ldr	r3, [r7, #0]
 801473e:	68da      	ldr	r2, [r3, #12]
 8014740:	69fb      	ldr	r3, [r7, #28]
 8014742:	005b      	lsls	r3, r3, #1
 8014744:	fa02 f303 	lsl.w	r3, r2, r3
 8014748:	69ba      	ldr	r2, [r7, #24]
 801474a:	4313      	orrs	r3, r2
 801474c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	69ba      	ldr	r2, [r7, #24]
 8014752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	685b      	ldr	r3, [r3, #4]
 8014758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801475a:	2201      	movs	r2, #1
 801475c:	69fb      	ldr	r3, [r7, #28]
 801475e:	fa02 f303 	lsl.w	r3, r2, r3
 8014762:	43db      	mvns	r3, r3
 8014764:	69ba      	ldr	r2, [r7, #24]
 8014766:	4013      	ands	r3, r2
 8014768:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801476a:	683b      	ldr	r3, [r7, #0]
 801476c:	685b      	ldr	r3, [r3, #4]
 801476e:	091b      	lsrs	r3, r3, #4
 8014770:	f003 0201 	and.w	r2, r3, #1
 8014774:	69fb      	ldr	r3, [r7, #28]
 8014776:	fa02 f303 	lsl.w	r3, r2, r3
 801477a:	69ba      	ldr	r2, [r7, #24]
 801477c:	4313      	orrs	r3, r2
 801477e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	69ba      	ldr	r2, [r7, #24]
 8014784:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8014786:	683b      	ldr	r3, [r7, #0]
 8014788:	685b      	ldr	r3, [r3, #4]
 801478a:	f003 0303 	and.w	r3, r3, #3
 801478e:	2b03      	cmp	r3, #3
 8014790:	d017      	beq.n	80147c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	68db      	ldr	r3, [r3, #12]
 8014796:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8014798:	69fb      	ldr	r3, [r7, #28]
 801479a:	005b      	lsls	r3, r3, #1
 801479c:	2203      	movs	r2, #3
 801479e:	fa02 f303 	lsl.w	r3, r2, r3
 80147a2:	43db      	mvns	r3, r3
 80147a4:	69ba      	ldr	r2, [r7, #24]
 80147a6:	4013      	ands	r3, r2
 80147a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80147aa:	683b      	ldr	r3, [r7, #0]
 80147ac:	689a      	ldr	r2, [r3, #8]
 80147ae:	69fb      	ldr	r3, [r7, #28]
 80147b0:	005b      	lsls	r3, r3, #1
 80147b2:	fa02 f303 	lsl.w	r3, r2, r3
 80147b6:	69ba      	ldr	r2, [r7, #24]
 80147b8:	4313      	orrs	r3, r2
 80147ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	69ba      	ldr	r2, [r7, #24]
 80147c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80147c2:	683b      	ldr	r3, [r7, #0]
 80147c4:	685b      	ldr	r3, [r3, #4]
 80147c6:	f003 0303 	and.w	r3, r3, #3
 80147ca:	2b02      	cmp	r3, #2
 80147cc:	d123      	bne.n	8014816 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80147ce:	69fb      	ldr	r3, [r7, #28]
 80147d0:	08da      	lsrs	r2, r3, #3
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	3208      	adds	r2, #8
 80147d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80147dc:	69fb      	ldr	r3, [r7, #28]
 80147de:	f003 0307 	and.w	r3, r3, #7
 80147e2:	009b      	lsls	r3, r3, #2
 80147e4:	220f      	movs	r2, #15
 80147e6:	fa02 f303 	lsl.w	r3, r2, r3
 80147ea:	43db      	mvns	r3, r3
 80147ec:	69ba      	ldr	r2, [r7, #24]
 80147ee:	4013      	ands	r3, r2
 80147f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	691a      	ldr	r2, [r3, #16]
 80147f6:	69fb      	ldr	r3, [r7, #28]
 80147f8:	f003 0307 	and.w	r3, r3, #7
 80147fc:	009b      	lsls	r3, r3, #2
 80147fe:	fa02 f303 	lsl.w	r3, r2, r3
 8014802:	69ba      	ldr	r2, [r7, #24]
 8014804:	4313      	orrs	r3, r2
 8014806:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8014808:	69fb      	ldr	r3, [r7, #28]
 801480a:	08da      	lsrs	r2, r3, #3
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	3208      	adds	r2, #8
 8014810:	69b9      	ldr	r1, [r7, #24]
 8014812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801481c:	69fb      	ldr	r3, [r7, #28]
 801481e:	005b      	lsls	r3, r3, #1
 8014820:	2203      	movs	r2, #3
 8014822:	fa02 f303 	lsl.w	r3, r2, r3
 8014826:	43db      	mvns	r3, r3
 8014828:	69ba      	ldr	r2, [r7, #24]
 801482a:	4013      	ands	r3, r2
 801482c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	685b      	ldr	r3, [r3, #4]
 8014832:	f003 0203 	and.w	r2, r3, #3
 8014836:	69fb      	ldr	r3, [r7, #28]
 8014838:	005b      	lsls	r3, r3, #1
 801483a:	fa02 f303 	lsl.w	r3, r2, r3
 801483e:	69ba      	ldr	r2, [r7, #24]
 8014840:	4313      	orrs	r3, r2
 8014842:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	69ba      	ldr	r2, [r7, #24]
 8014848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801484a:	683b      	ldr	r3, [r7, #0]
 801484c:	685b      	ldr	r3, [r3, #4]
 801484e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8014852:	2b00      	cmp	r3, #0
 8014854:	f000 80e0 	beq.w	8014a18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014858:	4b2f      	ldr	r3, [pc, #188]	@ (8014918 <HAL_GPIO_Init+0x238>)
 801485a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801485e:	4a2e      	ldr	r2, [pc, #184]	@ (8014918 <HAL_GPIO_Init+0x238>)
 8014860:	f043 0302 	orr.w	r3, r3, #2
 8014864:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8014868:	4b2b      	ldr	r3, [pc, #172]	@ (8014918 <HAL_GPIO_Init+0x238>)
 801486a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801486e:	f003 0302 	and.w	r3, r3, #2
 8014872:	60fb      	str	r3, [r7, #12]
 8014874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8014876:	4a29      	ldr	r2, [pc, #164]	@ (801491c <HAL_GPIO_Init+0x23c>)
 8014878:	69fb      	ldr	r3, [r7, #28]
 801487a:	089b      	lsrs	r3, r3, #2
 801487c:	3302      	adds	r3, #2
 801487e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8014884:	69fb      	ldr	r3, [r7, #28]
 8014886:	f003 0303 	and.w	r3, r3, #3
 801488a:	009b      	lsls	r3, r3, #2
 801488c:	220f      	movs	r2, #15
 801488e:	fa02 f303 	lsl.w	r3, r2, r3
 8014892:	43db      	mvns	r3, r3
 8014894:	69ba      	ldr	r2, [r7, #24]
 8014896:	4013      	ands	r3, r2
 8014898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	4a20      	ldr	r2, [pc, #128]	@ (8014920 <HAL_GPIO_Init+0x240>)
 801489e:	4293      	cmp	r3, r2
 80148a0:	d052      	beq.n	8014948 <HAL_GPIO_Init+0x268>
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	4a1f      	ldr	r2, [pc, #124]	@ (8014924 <HAL_GPIO_Init+0x244>)
 80148a6:	4293      	cmp	r3, r2
 80148a8:	d031      	beq.n	801490e <HAL_GPIO_Init+0x22e>
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	4a1e      	ldr	r2, [pc, #120]	@ (8014928 <HAL_GPIO_Init+0x248>)
 80148ae:	4293      	cmp	r3, r2
 80148b0:	d02b      	beq.n	801490a <HAL_GPIO_Init+0x22a>
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	4a1d      	ldr	r2, [pc, #116]	@ (801492c <HAL_GPIO_Init+0x24c>)
 80148b6:	4293      	cmp	r3, r2
 80148b8:	d025      	beq.n	8014906 <HAL_GPIO_Init+0x226>
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	4a1c      	ldr	r2, [pc, #112]	@ (8014930 <HAL_GPIO_Init+0x250>)
 80148be:	4293      	cmp	r3, r2
 80148c0:	d01f      	beq.n	8014902 <HAL_GPIO_Init+0x222>
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	4a1b      	ldr	r2, [pc, #108]	@ (8014934 <HAL_GPIO_Init+0x254>)
 80148c6:	4293      	cmp	r3, r2
 80148c8:	d019      	beq.n	80148fe <HAL_GPIO_Init+0x21e>
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	4a1a      	ldr	r2, [pc, #104]	@ (8014938 <HAL_GPIO_Init+0x258>)
 80148ce:	4293      	cmp	r3, r2
 80148d0:	d013      	beq.n	80148fa <HAL_GPIO_Init+0x21a>
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	4a19      	ldr	r2, [pc, #100]	@ (801493c <HAL_GPIO_Init+0x25c>)
 80148d6:	4293      	cmp	r3, r2
 80148d8:	d00d      	beq.n	80148f6 <HAL_GPIO_Init+0x216>
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	4a18      	ldr	r2, [pc, #96]	@ (8014940 <HAL_GPIO_Init+0x260>)
 80148de:	4293      	cmp	r3, r2
 80148e0:	d007      	beq.n	80148f2 <HAL_GPIO_Init+0x212>
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	4a17      	ldr	r2, [pc, #92]	@ (8014944 <HAL_GPIO_Init+0x264>)
 80148e6:	4293      	cmp	r3, r2
 80148e8:	d101      	bne.n	80148ee <HAL_GPIO_Init+0x20e>
 80148ea:	2309      	movs	r3, #9
 80148ec:	e02d      	b.n	801494a <HAL_GPIO_Init+0x26a>
 80148ee:	230a      	movs	r3, #10
 80148f0:	e02b      	b.n	801494a <HAL_GPIO_Init+0x26a>
 80148f2:	2308      	movs	r3, #8
 80148f4:	e029      	b.n	801494a <HAL_GPIO_Init+0x26a>
 80148f6:	2307      	movs	r3, #7
 80148f8:	e027      	b.n	801494a <HAL_GPIO_Init+0x26a>
 80148fa:	2306      	movs	r3, #6
 80148fc:	e025      	b.n	801494a <HAL_GPIO_Init+0x26a>
 80148fe:	2305      	movs	r3, #5
 8014900:	e023      	b.n	801494a <HAL_GPIO_Init+0x26a>
 8014902:	2304      	movs	r3, #4
 8014904:	e021      	b.n	801494a <HAL_GPIO_Init+0x26a>
 8014906:	2303      	movs	r3, #3
 8014908:	e01f      	b.n	801494a <HAL_GPIO_Init+0x26a>
 801490a:	2302      	movs	r3, #2
 801490c:	e01d      	b.n	801494a <HAL_GPIO_Init+0x26a>
 801490e:	2301      	movs	r3, #1
 8014910:	e01b      	b.n	801494a <HAL_GPIO_Init+0x26a>
 8014912:	bf00      	nop
 8014914:	58000080 	.word	0x58000080
 8014918:	58024400 	.word	0x58024400
 801491c:	58000400 	.word	0x58000400
 8014920:	58020000 	.word	0x58020000
 8014924:	58020400 	.word	0x58020400
 8014928:	58020800 	.word	0x58020800
 801492c:	58020c00 	.word	0x58020c00
 8014930:	58021000 	.word	0x58021000
 8014934:	58021400 	.word	0x58021400
 8014938:	58021800 	.word	0x58021800
 801493c:	58021c00 	.word	0x58021c00
 8014940:	58022000 	.word	0x58022000
 8014944:	58022400 	.word	0x58022400
 8014948:	2300      	movs	r3, #0
 801494a:	69fa      	ldr	r2, [r7, #28]
 801494c:	f002 0203 	and.w	r2, r2, #3
 8014950:	0092      	lsls	r2, r2, #2
 8014952:	4093      	lsls	r3, r2
 8014954:	69ba      	ldr	r2, [r7, #24]
 8014956:	4313      	orrs	r3, r2
 8014958:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801495a:	4938      	ldr	r1, [pc, #224]	@ (8014a3c <HAL_GPIO_Init+0x35c>)
 801495c:	69fb      	ldr	r3, [r7, #28]
 801495e:	089b      	lsrs	r3, r3, #2
 8014960:	3302      	adds	r3, #2
 8014962:	69ba      	ldr	r2, [r7, #24]
 8014964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8014968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8014970:	693b      	ldr	r3, [r7, #16]
 8014972:	43db      	mvns	r3, r3
 8014974:	69ba      	ldr	r2, [r7, #24]
 8014976:	4013      	ands	r3, r2
 8014978:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	685b      	ldr	r3, [r3, #4]
 801497e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8014982:	2b00      	cmp	r3, #0
 8014984:	d003      	beq.n	801498e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8014986:	69ba      	ldr	r2, [r7, #24]
 8014988:	693b      	ldr	r3, [r7, #16]
 801498a:	4313      	orrs	r3, r2
 801498c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801498e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014992:	69bb      	ldr	r3, [r7, #24]
 8014994:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8014996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801499a:	685b      	ldr	r3, [r3, #4]
 801499c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801499e:	693b      	ldr	r3, [r7, #16]
 80149a0:	43db      	mvns	r3, r3
 80149a2:	69ba      	ldr	r2, [r7, #24]
 80149a4:	4013      	ands	r3, r2
 80149a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80149a8:	683b      	ldr	r3, [r7, #0]
 80149aa:	685b      	ldr	r3, [r3, #4]
 80149ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d003      	beq.n	80149bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80149b4:	69ba      	ldr	r2, [r7, #24]
 80149b6:	693b      	ldr	r3, [r7, #16]
 80149b8:	4313      	orrs	r3, r2
 80149ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80149bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80149c0:	69bb      	ldr	r3, [r7, #24]
 80149c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80149c4:	697b      	ldr	r3, [r7, #20]
 80149c6:	685b      	ldr	r3, [r3, #4]
 80149c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80149ca:	693b      	ldr	r3, [r7, #16]
 80149cc:	43db      	mvns	r3, r3
 80149ce:	69ba      	ldr	r2, [r7, #24]
 80149d0:	4013      	ands	r3, r2
 80149d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80149d4:	683b      	ldr	r3, [r7, #0]
 80149d6:	685b      	ldr	r3, [r3, #4]
 80149d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d003      	beq.n	80149e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80149e0:	69ba      	ldr	r2, [r7, #24]
 80149e2:	693b      	ldr	r3, [r7, #16]
 80149e4:	4313      	orrs	r3, r2
 80149e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80149e8:	697b      	ldr	r3, [r7, #20]
 80149ea:	69ba      	ldr	r2, [r7, #24]
 80149ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80149ee:	697b      	ldr	r3, [r7, #20]
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80149f4:	693b      	ldr	r3, [r7, #16]
 80149f6:	43db      	mvns	r3, r3
 80149f8:	69ba      	ldr	r2, [r7, #24]
 80149fa:	4013      	ands	r3, r2
 80149fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80149fe:	683b      	ldr	r3, [r7, #0]
 8014a00:	685b      	ldr	r3, [r3, #4]
 8014a02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d003      	beq.n	8014a12 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8014a0a:	69ba      	ldr	r2, [r7, #24]
 8014a0c:	693b      	ldr	r3, [r7, #16]
 8014a0e:	4313      	orrs	r3, r2
 8014a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8014a12:	697b      	ldr	r3, [r7, #20]
 8014a14:	69ba      	ldr	r2, [r7, #24]
 8014a16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8014a18:	69fb      	ldr	r3, [r7, #28]
 8014a1a:	3301      	adds	r3, #1
 8014a1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8014a1e:	683b      	ldr	r3, [r7, #0]
 8014a20:	681a      	ldr	r2, [r3, #0]
 8014a22:	69fb      	ldr	r3, [r7, #28]
 8014a24:	fa22 f303 	lsr.w	r3, r2, r3
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	f47f ae63 	bne.w	80146f4 <HAL_GPIO_Init+0x14>
  }
}
 8014a2e:	bf00      	nop
 8014a30:	bf00      	nop
 8014a32:	3724      	adds	r7, #36	@ 0x24
 8014a34:	46bd      	mov	sp, r7
 8014a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3a:	4770      	bx	lr
 8014a3c:	58000400 	.word	0x58000400

08014a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8014a40:	b480      	push	{r7}
 8014a42:	b083      	sub	sp, #12
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
 8014a48:	460b      	mov	r3, r1
 8014a4a:	807b      	strh	r3, [r7, #2]
 8014a4c:	4613      	mov	r3, r2
 8014a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8014a50:	787b      	ldrb	r3, [r7, #1]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d003      	beq.n	8014a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8014a56:	887a      	ldrh	r2, [r7, #2]
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8014a5c:	e003      	b.n	8014a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8014a5e:	887b      	ldrh	r3, [r7, #2]
 8014a60:	041a      	lsls	r2, r3, #16
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	619a      	str	r2, [r3, #24]
}
 8014a66:	bf00      	nop
 8014a68:	370c      	adds	r7, #12
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a70:	4770      	bx	lr

08014a72 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8014a72:	b580      	push	{r7, lr}
 8014a74:	b082      	sub	sp, #8
 8014a76:	af00      	add	r7, sp, #0
 8014a78:	4603      	mov	r3, r0
 8014a7a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8014a7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014a80:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8014a84:	88fb      	ldrh	r3, [r7, #6]
 8014a86:	4013      	ands	r3, r2
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d008      	beq.n	8014a9e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8014a8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014a90:	88fb      	ldrh	r3, [r7, #6]
 8014a92:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8014a96:	88fb      	ldrh	r3, [r7, #6]
 8014a98:	4618      	mov	r0, r3
 8014a9a:	f7fc f8bd 	bl	8010c18 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8014a9e:	bf00      	nop
 8014aa0:	3708      	adds	r7, #8
 8014aa2:	46bd      	mov	sp, r7
 8014aa4:	bd80      	pop	{r7, pc}
	...

08014aa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b082      	sub	sp, #8
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d101      	bne.n	8014aba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8014ab6:	2301      	movs	r3, #1
 8014ab8:	e08b      	b.n	8014bd2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014ac0:	b2db      	uxtb	r3, r3
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d106      	bne.n	8014ad4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	2200      	movs	r2, #0
 8014aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8014ace:	6878      	ldr	r0, [r7, #4]
 8014ad0:	f7fc fa28 	bl	8010f24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	2224      	movs	r2, #36	@ 0x24
 8014ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	681a      	ldr	r2, [r3, #0]
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	f022 0201 	bic.w	r2, r2, #1
 8014aea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	685a      	ldr	r2, [r3, #4]
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8014af8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	689a      	ldr	r2, [r3, #8]
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8014b08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	68db      	ldr	r3, [r3, #12]
 8014b0e:	2b01      	cmp	r3, #1
 8014b10:	d107      	bne.n	8014b22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	689a      	ldr	r2, [r3, #8]
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8014b1e:	609a      	str	r2, [r3, #8]
 8014b20:	e006      	b.n	8014b30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	689a      	ldr	r2, [r3, #8]
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8014b2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	68db      	ldr	r3, [r3, #12]
 8014b34:	2b02      	cmp	r3, #2
 8014b36:	d108      	bne.n	8014b4a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	685a      	ldr	r2, [r3, #4]
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014b46:	605a      	str	r2, [r3, #4]
 8014b48:	e007      	b.n	8014b5a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	685a      	ldr	r2, [r3, #4]
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014b58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	6859      	ldr	r1, [r3, #4]
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	681a      	ldr	r2, [r3, #0]
 8014b64:	4b1d      	ldr	r3, [pc, #116]	@ (8014bdc <HAL_I2C_Init+0x134>)
 8014b66:	430b      	orrs	r3, r1
 8014b68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	68da      	ldr	r2, [r3, #12]
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8014b78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	691a      	ldr	r2, [r3, #16]
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	695b      	ldr	r3, [r3, #20]
 8014b82:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	699b      	ldr	r3, [r3, #24]
 8014b8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	430a      	orrs	r2, r1
 8014b92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	69d9      	ldr	r1, [r3, #28]
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	6a1a      	ldr	r2, [r3, #32]
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	430a      	orrs	r2, r1
 8014ba2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	681a      	ldr	r2, [r3, #0]
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	f042 0201 	orr.w	r2, r2, #1
 8014bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	2220      	movs	r2, #32
 8014bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	2200      	movs	r2, #0
 8014bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8014bd0:	2300      	movs	r3, #0
}
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	3708      	adds	r7, #8
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bd80      	pop	{r7, pc}
 8014bda:	bf00      	nop
 8014bdc:	02008000 	.word	0x02008000

08014be0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8014be0:	b480      	push	{r7}
 8014be2:	b083      	sub	sp, #12
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
 8014be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014bf0:	b2db      	uxtb	r3, r3
 8014bf2:	2b20      	cmp	r3, #32
 8014bf4:	d138      	bne.n	8014c68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8014bfc:	2b01      	cmp	r3, #1
 8014bfe:	d101      	bne.n	8014c04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8014c00:	2302      	movs	r3, #2
 8014c02:	e032      	b.n	8014c6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	2201      	movs	r2, #1
 8014c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	2224      	movs	r2, #36	@ 0x24
 8014c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	681a      	ldr	r2, [r3, #0]
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	f022 0201 	bic.w	r2, r2, #1
 8014c22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	681a      	ldr	r2, [r3, #0]
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8014c32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	6819      	ldr	r1, [r3, #0]
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	683a      	ldr	r2, [r7, #0]
 8014c40:	430a      	orrs	r2, r1
 8014c42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	681a      	ldr	r2, [r3, #0]
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	f042 0201 	orr.w	r2, r2, #1
 8014c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	2220      	movs	r2, #32
 8014c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	2200      	movs	r2, #0
 8014c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8014c64:	2300      	movs	r3, #0
 8014c66:	e000      	b.n	8014c6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8014c68:	2302      	movs	r3, #2
  }
}
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	370c      	adds	r7, #12
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c74:	4770      	bx	lr

08014c76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8014c76:	b480      	push	{r7}
 8014c78:	b085      	sub	sp, #20
 8014c7a:	af00      	add	r7, sp, #0
 8014c7c:	6078      	str	r0, [r7, #4]
 8014c7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014c86:	b2db      	uxtb	r3, r3
 8014c88:	2b20      	cmp	r3, #32
 8014c8a:	d139      	bne.n	8014d00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8014c92:	2b01      	cmp	r3, #1
 8014c94:	d101      	bne.n	8014c9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8014c96:	2302      	movs	r3, #2
 8014c98:	e033      	b.n	8014d02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	2201      	movs	r2, #1
 8014c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	2224      	movs	r2, #36	@ 0x24
 8014ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	681a      	ldr	r2, [r3, #0]
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	f022 0201 	bic.w	r2, r2, #1
 8014cb8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8014cc8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8014cca:	683b      	ldr	r3, [r7, #0]
 8014ccc:	021b      	lsls	r3, r3, #8
 8014cce:	68fa      	ldr	r2, [r7, #12]
 8014cd0:	4313      	orrs	r3, r2
 8014cd2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	68fa      	ldr	r2, [r7, #12]
 8014cda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	681a      	ldr	r2, [r3, #0]
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	f042 0201 	orr.w	r2, r2, #1
 8014cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	2220      	movs	r2, #32
 8014cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	e000      	b.n	8014d02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8014d00:	2302      	movs	r3, #2
  }
}
 8014d02:	4618      	mov	r0, r3
 8014d04:	3714      	adds	r7, #20
 8014d06:	46bd      	mov	sp, r7
 8014d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0c:	4770      	bx	lr
	...

08014d10 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b088      	sub	sp, #32
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d101      	bne.n	8014d22 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8014d1e:	2301      	movs	r3, #1
 8014d20:	e10d      	b.n	8014f3e <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8014d28:	b2db      	uxtb	r3, r3
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d106      	bne.n	8014d3c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	2200      	movs	r2, #0
 8014d32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8014d36:	6878      	ldr	r0, [r7, #4]
 8014d38:	f7fc f992 	bl	8011060 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	2202      	movs	r2, #2
 8014d40:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	f003 0301 	and.w	r3, r3, #1
 8014d4e:	2b01      	cmp	r3, #1
 8014d50:	d107      	bne.n	8014d62 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	681a      	ldr	r2, [r3, #0]
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	f022 0201 	bic.w	r2, r2, #1
 8014d60:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	2200      	movs	r2, #0
 8014d68:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	685b      	ldr	r3, [r3, #4]
 8014d6e:	2b04      	cmp	r3, #4
 8014d70:	d008      	beq.n	8014d84 <HAL_I2S_Init+0x74>
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	685b      	ldr	r3, [r3, #4]
 8014d76:	2b06      	cmp	r3, #6
 8014d78:	d004      	beq.n	8014d84 <HAL_I2S_Init+0x74>
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	685b      	ldr	r3, [r3, #4]
 8014d7e:	2b0a      	cmp	r3, #10
 8014d80:	f040 8087 	bne.w	8014e92 <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	695b      	ldr	r3, [r3, #20]
 8014d88:	2b02      	cmp	r3, #2
 8014d8a:	d05a      	beq.n	8014e42 <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	68db      	ldr	r3, [r3, #12]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d002      	beq.n	8014d9a <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8014d94:	2302      	movs	r3, #2
 8014d96:	617b      	str	r3, [r7, #20]
 8014d98:	e001      	b.n	8014d9e <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8014d9a:	2301      	movs	r3, #1
 8014d9c:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	689b      	ldr	r3, [r3, #8]
 8014da2:	2b30      	cmp	r3, #48	@ 0x30
 8014da4:	d003      	beq.n	8014dae <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8014daa:	2bb0      	cmp	r3, #176	@ 0xb0
 8014dac:	d102      	bne.n	8014db4 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8014dae:	2301      	movs	r3, #1
 8014db0:	60fb      	str	r3, [r7, #12]
 8014db2:	e001      	b.n	8014db8 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8014db4:	2300      	movs	r3, #0
 8014db6:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8014db8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8014dbc:	f04f 0100 	mov.w	r1, #0
 8014dc0:	f002 fc8e 	bl	80176e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8014dc4:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	691b      	ldr	r3, [r3, #16]
 8014dca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014dce:	d113      	bne.n	8014df8 <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8014dd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8014dda:	68ba      	ldr	r2, [r7, #8]
 8014ddc:	fbb2 f2f3 	udiv	r2, r2, r3
 8014de0:	4613      	mov	r3, r2
 8014de2:	009b      	lsls	r3, r3, #2
 8014de4:	4413      	add	r3, r2
 8014de6:	005b      	lsls	r3, r3, #1
 8014de8:	461a      	mov	r2, r3
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	695b      	ldr	r3, [r3, #20]
 8014dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8014df2:	3305      	adds	r3, #5
 8014df4:	613b      	str	r3, [r7, #16]
 8014df6:	e014      	b.n	8014e22 <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8014df8:	2220      	movs	r2, #32
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8014e00:	697a      	ldr	r2, [r7, #20]
 8014e02:	fb02 f303 	mul.w	r3, r2, r3
 8014e06:	68ba      	ldr	r2, [r7, #8]
 8014e08:	fbb2 f2f3 	udiv	r2, r2, r3
 8014e0c:	4613      	mov	r3, r2
 8014e0e:	009b      	lsls	r3, r3, #2
 8014e10:	4413      	add	r3, r2
 8014e12:	005b      	lsls	r3, r3, #1
 8014e14:	461a      	mov	r2, r3
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	695b      	ldr	r3, [r3, #20]
 8014e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e1e:	3305      	adds	r3, #5
 8014e20:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8014e22:	693b      	ldr	r3, [r7, #16]
 8014e24:	4a48      	ldr	r2, [pc, #288]	@ (8014f48 <HAL_I2S_Init+0x238>)
 8014e26:	fba2 2303 	umull	r2, r3, r2, r3
 8014e2a:	08db      	lsrs	r3, r3, #3
 8014e2c:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8014e2e:	693b      	ldr	r3, [r7, #16]
 8014e30:	f003 0301 	and.w	r3, r3, #1
 8014e34:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8014e36:	693a      	ldr	r2, [r7, #16]
 8014e38:	69bb      	ldr	r3, [r7, #24]
 8014e3a:	1ad3      	subs	r3, r2, r3
 8014e3c:	085b      	lsrs	r3, r3, #1
 8014e3e:	61fb      	str	r3, [r7, #28]
 8014e40:	e003      	b.n	8014e4a <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8014e42:	2302      	movs	r3, #2
 8014e44:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8014e46:	2300      	movs	r3, #0
 8014e48:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8014e4a:	69bb      	ldr	r3, [r7, #24]
 8014e4c:	2b01      	cmp	r3, #1
 8014e4e:	d102      	bne.n	8014e56 <HAL_I2S_Init+0x146>
 8014e50:	69fb      	ldr	r3, [r7, #28]
 8014e52:	2b01      	cmp	r3, #1
 8014e54:	d002      	beq.n	8014e5c <HAL_I2S_Init+0x14c>
 8014e56:	69fb      	ldr	r3, [r7, #28]
 8014e58:	2bff      	cmp	r3, #255	@ 0xff
 8014e5a:	d907      	bls.n	8014e6c <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014e60:	f043 0210 	orr.w	r2, r3, #16
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8014e68:	2301      	movs	r3, #1
 8014e6a:	e068      	b.n	8014f3e <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8014e6c:	69fb      	ldr	r3, [r7, #28]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d101      	bne.n	8014e76 <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 8014e72:	2301      	movs	r3, #1
 8014e74:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014e7c:	4b33      	ldr	r3, [pc, #204]	@ (8014f4c <HAL_I2S_Init+0x23c>)
 8014e7e:	4013      	ands	r3, r2
 8014e80:	69fa      	ldr	r2, [r7, #28]
 8014e82:	0411      	lsls	r1, r2, #16
 8014e84:	69ba      	ldr	r2, [r7, #24]
 8014e86:	0612      	lsls	r2, r2, #24
 8014e88:	4311      	orrs	r1, r2
 8014e8a:	687a      	ldr	r2, [r7, #4]
 8014e8c:	6812      	ldr	r2, [r2, #0]
 8014e8e:	430b      	orrs	r3, r1
 8014e90:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014e98:	4b2d      	ldr	r3, [pc, #180]	@ (8014f50 <HAL_I2S_Init+0x240>)
 8014e9a:	4013      	ands	r3, r2
 8014e9c:	687a      	ldr	r2, [r7, #4]
 8014e9e:	6851      	ldr	r1, [r2, #4]
 8014ea0:	687a      	ldr	r2, [r7, #4]
 8014ea2:	6892      	ldr	r2, [r2, #8]
 8014ea4:	4311      	orrs	r1, r2
 8014ea6:	687a      	ldr	r2, [r7, #4]
 8014ea8:	68d2      	ldr	r2, [r2, #12]
 8014eaa:	4311      	orrs	r1, r2
 8014eac:	687a      	ldr	r2, [r7, #4]
 8014eae:	6992      	ldr	r2, [r2, #24]
 8014eb0:	4311      	orrs	r1, r2
 8014eb2:	687a      	ldr	r2, [r7, #4]
 8014eb4:	6a12      	ldr	r2, [r2, #32]
 8014eb6:	4311      	orrs	r1, r2
 8014eb8:	687a      	ldr	r2, [r7, #4]
 8014eba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8014ebc:	4311      	orrs	r1, r2
 8014ebe:	687a      	ldr	r2, [r7, #4]
 8014ec0:	6912      	ldr	r2, [r2, #16]
 8014ec2:	430a      	orrs	r2, r1
 8014ec4:	431a      	orrs	r2, r3
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	f042 0201 	orr.w	r2, r2, #1
 8014ece:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8014ed8:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	681a      	ldr	r2, [r3, #0]
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8014ee8:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	68db      	ldr	r3, [r3, #12]
 8014ef0:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	69da      	ldr	r2, [r3, #28]
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	430a      	orrs	r2, r1
 8014efe:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	685b      	ldr	r3, [r3, #4]
 8014f04:	2b04      	cmp	r3, #4
 8014f06:	d007      	beq.n	8014f18 <HAL_I2S_Init+0x208>
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	685b      	ldr	r3, [r3, #4]
 8014f0c:	2b06      	cmp	r3, #6
 8014f0e:	d003      	beq.n	8014f18 <HAL_I2S_Init+0x208>
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	685b      	ldr	r3, [r3, #4]
 8014f14:	2b0a      	cmp	r3, #10
 8014f16:	d10a      	bne.n	8014f2e <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	68db      	ldr	r3, [r3, #12]
 8014f1e:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	430a      	orrs	r2, r1
 8014f2c:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	2200      	movs	r2, #0
 8014f32:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	2201      	movs	r2, #1
 8014f38:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8014f3c:	2300      	movs	r3, #0
}
 8014f3e:	4618      	mov	r0, r3
 8014f40:	3720      	adds	r7, #32
 8014f42:	46bd      	mov	sp, r7
 8014f44:	bd80      	pop	{r7, pc}
 8014f46:	bf00      	nop
 8014f48:	cccccccd 	.word	0xcccccccd
 8014f4c:	fe00ffff 	.word	0xfe00ffff
 8014f50:	fdff9040 	.word	0xfdff9040

08014f54 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b086      	sub	sp, #24
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	60f8      	str	r0, [r7, #12]
 8014f5c:	60b9      	str	r1, [r7, #8]
 8014f5e:	4613      	mov	r3, r2
 8014f60:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014f62:	2300      	movs	r3, #0
 8014f64:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8014f66:	68bb      	ldr	r3, [r7, #8]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d002      	beq.n	8014f72 <HAL_I2S_Receive_DMA+0x1e>
 8014f6c:	88fb      	ldrh	r3, [r7, #6]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d101      	bne.n	8014f76 <HAL_I2S_Receive_DMA+0x22>
  {
    return HAL_ERROR;
 8014f72:	2301      	movs	r3, #1
 8014f74:	e086      	b.n	8015084 <HAL_I2S_Receive_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8014f7c:	b2db      	uxtb	r3, r3
 8014f7e:	2b01      	cmp	r3, #1
 8014f80:	d001      	beq.n	8014f86 <HAL_I2S_Receive_DMA+0x32>
  {
    return HAL_BUSY;
 8014f82:	2302      	movs	r3, #2
 8014f84:	e07e      	b.n	8015084 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8014f8c:	b2db      	uxtb	r3, r3
 8014f8e:	2b01      	cmp	r3, #1
 8014f90:	d101      	bne.n	8014f96 <HAL_I2S_Receive_DMA+0x42>
 8014f92:	2302      	movs	r3, #2
 8014f94:	e076      	b.n	8015084 <HAL_I2S_Receive_DMA+0x130>
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	2201      	movs	r2, #1
 8014f9a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	2204      	movs	r2, #4
 8014fa2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	2200      	movs	r2, #0
 8014faa:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->pRxBuffPtr  = pData;
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	68ba      	ldr	r2, [r7, #8]
 8014fb0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2s->RxXferSize  = Size;
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	88fa      	ldrh	r2, [r7, #6]
 8014fb6:	871a      	strh	r2, [r3, #56]	@ 0x38
  hi2s->RxXferCount = Size;
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	88fa      	ldrh	r2, [r7, #6]
 8014fbc:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Init field not used in handle to zero */
  hi2s->pTxBuffPtr  = NULL;
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->TxXferSize  = (uint16_t)0UL;
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	861a      	strh	r2, [r3, #48]	@ 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	2200      	movs	r2, #0
 8014fce:	865a      	strh	r2, [r3, #50]	@ 0x32


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014fd4:	4a2d      	ldr	r2, [pc, #180]	@ (801508c <HAL_I2S_Receive_DMA+0x138>)
 8014fd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014fdc:	4a2c      	ldr	r2, [pc, #176]	@ (8015090 <HAL_I2S_Receive_DMA+0x13c>)
 8014fde:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014fe4:	4a2b      	ldr	r2, [pc, #172]	@ (8015094 <HAL_I2S_Receive_DMA+0x140>)
 8014fe6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	3330      	adds	r3, #48	@ 0x30
 8014ff2:	4619      	mov	r1, r3
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014ff8:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8014ffe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8015000:	f7fd fad4 	bl	80125ac <HAL_DMA_Start_IT>
 8015004:	4603      	mov	r3, r0
 8015006:	2b00      	cmp	r3, #0
 8015008:	d011      	beq.n	801502e <HAL_I2S_Receive_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801500e:	f043 0208 	orr.w	r2, r3, #8
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	651a      	str	r2, [r3, #80]	@ 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	2201      	movs	r2, #1
 801501a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    errorcode = HAL_ERROR;
 801501e:	2301      	movs	r3, #1
 8015020:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	2200      	movs	r2, #0
 8015026:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return errorcode;
 801502a:	7dfb      	ldrb	r3, [r7, #23]
 801502c:	e02a      	b.n	8015084 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	689b      	ldr	r3, [r3, #8]
 8015034:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8015038:	2b00      	cmp	r3, #0
 801503a:	d107      	bne.n	801504c <HAL_I2S_Receive_DMA+0xf8>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	689a      	ldr	r2, [r3, #8]
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801504a:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	f003 0301 	and.w	r3, r3, #1
 8015056:	2b00      	cmp	r3, #0
 8015058:	d107      	bne.n	801506a <HAL_I2S_Receive_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	681a      	ldr	r2, [r3, #0]
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	f042 0201 	orr.w	r2, r2, #1
 8015068:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	681a      	ldr	r2, [r3, #0]
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015078:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	2200      	movs	r2, #0
 801507e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  return errorcode;
 8015082:	7dfb      	ldrb	r3, [r7, #23]
}
 8015084:	4618      	mov	r0, r3
 8015086:	3718      	adds	r7, #24
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}
 801508c:	080151a1 	.word	0x080151a1
 8015090:	0801515f 	.word	0x0801515f
 8015094:	080151bd 	.word	0x080151bd

08015098 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b084      	sub	sp, #16
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80150a0:	2300      	movs	r3, #0
 80150a2:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  /* Disable the I2S Tx/Rx DMA requests */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	689a      	ldr	r2, [r3, #8]
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80150b2:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	689a      	ldr	r2, [r3, #8]
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80150c2:	609a      	str	r2, [r3, #8]

  /* Abort the I2S DMA tx Stream/Channel */
  if (hi2s->hdmatx != NULL)
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d00f      	beq.n	80150ec <HAL_I2S_DMAStop+0x54>
  {
    /* Disable the I2S DMA tx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80150d0:	4618      	mov	r0, r3
 80150d2:	f7fd fcd5 	bl	8012a80 <HAL_DMA_Abort>
 80150d6:	4603      	mov	r3, r0
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d007      	beq.n	80150ec <HAL_I2S_DMAStop+0x54>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80150e0:	f043 0208 	orr.w	r2, r3, #8
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	651a      	str	r2, [r3, #80]	@ 0x50
      errorcode = HAL_ERROR;
 80150e8:	2301      	movs	r3, #1
 80150ea:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Abort the I2S DMA rx Stream/Channel */
  if (hi2s->hdmarx != NULL)
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d00f      	beq.n	8015114 <HAL_I2S_DMAStop+0x7c>
  {
    /* Disable the I2S DMA rx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80150f8:	4618      	mov	r0, r3
 80150fa:	f7fd fcc1 	bl	8012a80 <HAL_DMA_Abort>
 80150fe:	4603      	mov	r3, r0
 8015100:	2b00      	cmp	r3, #0
 8015102:	d007      	beq.n	8015114 <HAL_I2S_DMAStop+0x7c>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015108:	f043 0208 	orr.w	r2, r3, #8
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	651a      	str	r2, [r3, #80]	@ 0x50
      errorcode = HAL_ERROR;
 8015110:	2301      	movs	r3, #1
 8015112:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	681a      	ldr	r2, [r3, #0]
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	f022 0201 	bic.w	r2, r2, #1
 8015122:	601a      	str	r2, [r3, #0]

  hi2s->State = HAL_I2S_STATE_READY;
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	2201      	movs	r2, #1
 8015128:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return errorcode;
 801512c:	7bfb      	ldrb	r3, [r7, #15]
}
 801512e:	4618      	mov	r0, r3
 8015130:	3710      	adds	r7, #16
 8015132:	46bd      	mov	sp, r7
 8015134:	bd80      	pop	{r7, pc}

08015136 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8015136:	b480      	push	{r7}
 8015138:	b083      	sub	sp, #12
 801513a:	af00      	add	r7, sp, #0
 801513c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 801513e:	bf00      	nop
 8015140:	370c      	adds	r7, #12
 8015142:	46bd      	mov	sp, r7
 8015144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015148:	4770      	bx	lr

0801514a <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 801514a:	b480      	push	{r7}
 801514c:	b083      	sub	sp, #12
 801514e:	af00      	add	r7, sp, #0
 8015150:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8015152:	bf00      	nop
 8015154:	370c      	adds	r7, #12
 8015156:	46bd      	mov	sp, r7
 8015158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801515c:	4770      	bx	lr

0801515e <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 801515e:	b580      	push	{r7, lr}
 8015160:	b084      	sub	sp, #16
 8015162:	af00      	add	r7, sp, #0
 8015164:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801516a:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	69db      	ldr	r3, [r3, #28]
 8015170:	2b00      	cmp	r3, #0
 8015172:	d10e      	bne.n	8015192 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	689a      	ldr	r2, [r3, #8]
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8015182:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	2200      	movs	r2, #0
 8015188:	875a      	strh	r2, [r3, #58]	@ 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	2201      	movs	r2, #1
 801518e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8015192:	68f8      	ldr	r0, [r7, #12]
 8015194:	f7fb fcec 	bl	8010b70 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8015198:	bf00      	nop
 801519a:	3710      	adds	r7, #16
 801519c:	46bd      	mov	sp, r7
 801519e:	bd80      	pop	{r7, pc}

080151a0 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b084      	sub	sp, #16
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80151ac:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80151ae:	68f8      	ldr	r0, [r7, #12]
 80151b0:	f7ff ffc1 	bl	8015136 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80151b4:	bf00      	nop
 80151b6:	3710      	adds	r7, #16
 80151b8:	46bd      	mov	sp, r7
 80151ba:	bd80      	pop	{r7, pc}

080151bc <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	b084      	sub	sp, #16
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80151c8:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	689a      	ldr	r2, [r3, #8]
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80151d8:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	2200      	movs	r2, #0
 80151de:	865a      	strh	r2, [r3, #50]	@ 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	2200      	movs	r2, #0
 80151e4:	875a      	strh	r2, [r3, #58]	@ 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	2201      	movs	r2, #1
 80151ea:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80151f2:	f043 0208 	orr.w	r2, r3, #8
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80151fa:	68f8      	ldr	r0, [r7, #12]
 80151fc:	f7ff ffa5 	bl	801514a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8015200:	bf00      	nop
 8015202:	3710      	adds	r7, #16
 8015204:	46bd      	mov	sp, r7
 8015206:	bd80      	pop	{r7, pc}

08015208 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b084      	sub	sp, #16
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8015210:	4b19      	ldr	r3, [pc, #100]	@ (8015278 <HAL_PWREx_ConfigSupply+0x70>)
 8015212:	68db      	ldr	r3, [r3, #12]
 8015214:	f003 0304 	and.w	r3, r3, #4
 8015218:	2b04      	cmp	r3, #4
 801521a:	d00a      	beq.n	8015232 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801521c:	4b16      	ldr	r3, [pc, #88]	@ (8015278 <HAL_PWREx_ConfigSupply+0x70>)
 801521e:	68db      	ldr	r3, [r3, #12]
 8015220:	f003 0307 	and.w	r3, r3, #7
 8015224:	687a      	ldr	r2, [r7, #4]
 8015226:	429a      	cmp	r2, r3
 8015228:	d001      	beq.n	801522e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801522a:	2301      	movs	r3, #1
 801522c:	e01f      	b.n	801526e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801522e:	2300      	movs	r3, #0
 8015230:	e01d      	b.n	801526e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8015232:	4b11      	ldr	r3, [pc, #68]	@ (8015278 <HAL_PWREx_ConfigSupply+0x70>)
 8015234:	68db      	ldr	r3, [r3, #12]
 8015236:	f023 0207 	bic.w	r2, r3, #7
 801523a:	490f      	ldr	r1, [pc, #60]	@ (8015278 <HAL_PWREx_ConfigSupply+0x70>)
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	4313      	orrs	r3, r2
 8015240:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8015242:	f7fc fcab 	bl	8011b9c <HAL_GetTick>
 8015246:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8015248:	e009      	b.n	801525e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801524a:	f7fc fca7 	bl	8011b9c <HAL_GetTick>
 801524e:	4602      	mov	r2, r0
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	1ad3      	subs	r3, r2, r3
 8015254:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8015258:	d901      	bls.n	801525e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801525a:	2301      	movs	r3, #1
 801525c:	e007      	b.n	801526e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801525e:	4b06      	ldr	r3, [pc, #24]	@ (8015278 <HAL_PWREx_ConfigSupply+0x70>)
 8015260:	685b      	ldr	r3, [r3, #4]
 8015262:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015266:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801526a:	d1ee      	bne.n	801524a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801526c:	2300      	movs	r3, #0
}
 801526e:	4618      	mov	r0, r3
 8015270:	3710      	adds	r7, #16
 8015272:	46bd      	mov	sp, r7
 8015274:	bd80      	pop	{r7, pc}
 8015276:	bf00      	nop
 8015278:	58024800 	.word	0x58024800

0801527c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b08c      	sub	sp, #48	@ 0x30
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d102      	bne.n	8015290 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801528a:	2301      	movs	r3, #1
 801528c:	f000 bc48 	b.w	8015b20 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	f003 0301 	and.w	r3, r3, #1
 8015298:	2b00      	cmp	r3, #0
 801529a:	f000 8088 	beq.w	80153ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801529e:	4b99      	ldr	r3, [pc, #612]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 80152a0:	691b      	ldr	r3, [r3, #16]
 80152a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80152a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80152a8:	4b96      	ldr	r3, [pc, #600]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 80152aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80152ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80152ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152b0:	2b10      	cmp	r3, #16
 80152b2:	d007      	beq.n	80152c4 <HAL_RCC_OscConfig+0x48>
 80152b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152b6:	2b18      	cmp	r3, #24
 80152b8:	d111      	bne.n	80152de <HAL_RCC_OscConfig+0x62>
 80152ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152bc:	f003 0303 	and.w	r3, r3, #3
 80152c0:	2b02      	cmp	r3, #2
 80152c2:	d10c      	bne.n	80152de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80152c4:	4b8f      	ldr	r3, [pc, #572]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d06d      	beq.n	80153ac <HAL_RCC_OscConfig+0x130>
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	685b      	ldr	r3, [r3, #4]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d169      	bne.n	80153ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80152d8:	2301      	movs	r3, #1
 80152da:	f000 bc21 	b.w	8015b20 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	685b      	ldr	r3, [r3, #4]
 80152e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80152e6:	d106      	bne.n	80152f6 <HAL_RCC_OscConfig+0x7a>
 80152e8:	4b86      	ldr	r3, [pc, #536]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	4a85      	ldr	r2, [pc, #532]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 80152ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80152f2:	6013      	str	r3, [r2, #0]
 80152f4:	e02e      	b.n	8015354 <HAL_RCC_OscConfig+0xd8>
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	685b      	ldr	r3, [r3, #4]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d10c      	bne.n	8015318 <HAL_RCC_OscConfig+0x9c>
 80152fe:	4b81      	ldr	r3, [pc, #516]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	4a80      	ldr	r2, [pc, #512]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 8015304:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8015308:	6013      	str	r3, [r2, #0]
 801530a:	4b7e      	ldr	r3, [pc, #504]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	4a7d      	ldr	r2, [pc, #500]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 8015310:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8015314:	6013      	str	r3, [r2, #0]
 8015316:	e01d      	b.n	8015354 <HAL_RCC_OscConfig+0xd8>
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	685b      	ldr	r3, [r3, #4]
 801531c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8015320:	d10c      	bne.n	801533c <HAL_RCC_OscConfig+0xc0>
 8015322:	4b78      	ldr	r3, [pc, #480]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	4a77      	ldr	r2, [pc, #476]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 8015328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801532c:	6013      	str	r3, [r2, #0]
 801532e:	4b75      	ldr	r3, [pc, #468]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	4a74      	ldr	r2, [pc, #464]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 8015334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8015338:	6013      	str	r3, [r2, #0]
 801533a:	e00b      	b.n	8015354 <HAL_RCC_OscConfig+0xd8>
 801533c:	4b71      	ldr	r3, [pc, #452]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	4a70      	ldr	r2, [pc, #448]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 8015342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8015346:	6013      	str	r3, [r2, #0]
 8015348:	4b6e      	ldr	r3, [pc, #440]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	4a6d      	ldr	r2, [pc, #436]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 801534e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8015352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	685b      	ldr	r3, [r3, #4]
 8015358:	2b00      	cmp	r3, #0
 801535a:	d013      	beq.n	8015384 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801535c:	f7fc fc1e 	bl	8011b9c <HAL_GetTick>
 8015360:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8015362:	e008      	b.n	8015376 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8015364:	f7fc fc1a 	bl	8011b9c <HAL_GetTick>
 8015368:	4602      	mov	r2, r0
 801536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801536c:	1ad3      	subs	r3, r2, r3
 801536e:	2b64      	cmp	r3, #100	@ 0x64
 8015370:	d901      	bls.n	8015376 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8015372:	2303      	movs	r3, #3
 8015374:	e3d4      	b.n	8015b20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8015376:	4b63      	ldr	r3, [pc, #396]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801537e:	2b00      	cmp	r3, #0
 8015380:	d0f0      	beq.n	8015364 <HAL_RCC_OscConfig+0xe8>
 8015382:	e014      	b.n	80153ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015384:	f7fc fc0a 	bl	8011b9c <HAL_GetTick>
 8015388:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801538a:	e008      	b.n	801539e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801538c:	f7fc fc06 	bl	8011b9c <HAL_GetTick>
 8015390:	4602      	mov	r2, r0
 8015392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015394:	1ad3      	subs	r3, r2, r3
 8015396:	2b64      	cmp	r3, #100	@ 0x64
 8015398:	d901      	bls.n	801539e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801539a:	2303      	movs	r3, #3
 801539c:	e3c0      	b.n	8015b20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801539e:	4b59      	ldr	r3, [pc, #356]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d1f0      	bne.n	801538c <HAL_RCC_OscConfig+0x110>
 80153aa:	e000      	b.n	80153ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80153ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	f003 0302 	and.w	r3, r3, #2
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	f000 80ca 	beq.w	8015550 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80153bc:	4b51      	ldr	r3, [pc, #324]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 80153be:	691b      	ldr	r3, [r3, #16]
 80153c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80153c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80153c6:	4b4f      	ldr	r3, [pc, #316]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 80153c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80153ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80153cc:	6a3b      	ldr	r3, [r7, #32]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d007      	beq.n	80153e2 <HAL_RCC_OscConfig+0x166>
 80153d2:	6a3b      	ldr	r3, [r7, #32]
 80153d4:	2b18      	cmp	r3, #24
 80153d6:	d156      	bne.n	8015486 <HAL_RCC_OscConfig+0x20a>
 80153d8:	69fb      	ldr	r3, [r7, #28]
 80153da:	f003 0303 	and.w	r3, r3, #3
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d151      	bne.n	8015486 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80153e2:	4b48      	ldr	r3, [pc, #288]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	f003 0304 	and.w	r3, r3, #4
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d005      	beq.n	80153fa <HAL_RCC_OscConfig+0x17e>
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	68db      	ldr	r3, [r3, #12]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d101      	bne.n	80153fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80153f6:	2301      	movs	r3, #1
 80153f8:	e392      	b.n	8015b20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80153fa:	4b42      	ldr	r3, [pc, #264]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	f023 0219 	bic.w	r2, r3, #25
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	68db      	ldr	r3, [r3, #12]
 8015406:	493f      	ldr	r1, [pc, #252]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 8015408:	4313      	orrs	r3, r2
 801540a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801540c:	f7fc fbc6 	bl	8011b9c <HAL_GetTick>
 8015410:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015412:	e008      	b.n	8015426 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8015414:	f7fc fbc2 	bl	8011b9c <HAL_GetTick>
 8015418:	4602      	mov	r2, r0
 801541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801541c:	1ad3      	subs	r3, r2, r3
 801541e:	2b02      	cmp	r3, #2
 8015420:	d901      	bls.n	8015426 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8015422:	2303      	movs	r3, #3
 8015424:	e37c      	b.n	8015b20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015426:	4b37      	ldr	r3, [pc, #220]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	f003 0304 	and.w	r3, r3, #4
 801542e:	2b00      	cmp	r3, #0
 8015430:	d0f0      	beq.n	8015414 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015432:	f7fc fbed 	bl	8011c10 <HAL_GetREVID>
 8015436:	4603      	mov	r3, r0
 8015438:	f241 0203 	movw	r2, #4099	@ 0x1003
 801543c:	4293      	cmp	r3, r2
 801543e:	d817      	bhi.n	8015470 <HAL_RCC_OscConfig+0x1f4>
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	691b      	ldr	r3, [r3, #16]
 8015444:	2b40      	cmp	r3, #64	@ 0x40
 8015446:	d108      	bne.n	801545a <HAL_RCC_OscConfig+0x1de>
 8015448:	4b2e      	ldr	r3, [pc, #184]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 801544a:	685b      	ldr	r3, [r3, #4]
 801544c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8015450:	4a2c      	ldr	r2, [pc, #176]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 8015452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015456:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8015458:	e07a      	b.n	8015550 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801545a:	4b2a      	ldr	r3, [pc, #168]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 801545c:	685b      	ldr	r3, [r3, #4]
 801545e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	691b      	ldr	r3, [r3, #16]
 8015466:	031b      	lsls	r3, r3, #12
 8015468:	4926      	ldr	r1, [pc, #152]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 801546a:	4313      	orrs	r3, r2
 801546c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801546e:	e06f      	b.n	8015550 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015470:	4b24      	ldr	r3, [pc, #144]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 8015472:	685b      	ldr	r3, [r3, #4]
 8015474:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	691b      	ldr	r3, [r3, #16]
 801547c:	061b      	lsls	r3, r3, #24
 801547e:	4921      	ldr	r1, [pc, #132]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 8015480:	4313      	orrs	r3, r2
 8015482:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8015484:	e064      	b.n	8015550 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	68db      	ldr	r3, [r3, #12]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d047      	beq.n	801551e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801548e:	4b1d      	ldr	r3, [pc, #116]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	f023 0219 	bic.w	r2, r3, #25
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	68db      	ldr	r3, [r3, #12]
 801549a:	491a      	ldr	r1, [pc, #104]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 801549c:	4313      	orrs	r3, r2
 801549e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80154a0:	f7fc fb7c 	bl	8011b9c <HAL_GetTick>
 80154a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80154a6:	e008      	b.n	80154ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80154a8:	f7fc fb78 	bl	8011b9c <HAL_GetTick>
 80154ac:	4602      	mov	r2, r0
 80154ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154b0:	1ad3      	subs	r3, r2, r3
 80154b2:	2b02      	cmp	r3, #2
 80154b4:	d901      	bls.n	80154ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80154b6:	2303      	movs	r3, #3
 80154b8:	e332      	b.n	8015b20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80154ba:	4b12      	ldr	r3, [pc, #72]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	f003 0304 	and.w	r3, r3, #4
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d0f0      	beq.n	80154a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80154c6:	f7fc fba3 	bl	8011c10 <HAL_GetREVID>
 80154ca:	4603      	mov	r3, r0
 80154cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80154d0:	4293      	cmp	r3, r2
 80154d2:	d819      	bhi.n	8015508 <HAL_RCC_OscConfig+0x28c>
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	691b      	ldr	r3, [r3, #16]
 80154d8:	2b40      	cmp	r3, #64	@ 0x40
 80154da:	d108      	bne.n	80154ee <HAL_RCC_OscConfig+0x272>
 80154dc:	4b09      	ldr	r3, [pc, #36]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 80154de:	685b      	ldr	r3, [r3, #4]
 80154e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80154e4:	4a07      	ldr	r2, [pc, #28]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 80154e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80154ea:	6053      	str	r3, [r2, #4]
 80154ec:	e030      	b.n	8015550 <HAL_RCC_OscConfig+0x2d4>
 80154ee:	4b05      	ldr	r3, [pc, #20]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 80154f0:	685b      	ldr	r3, [r3, #4]
 80154f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	691b      	ldr	r3, [r3, #16]
 80154fa:	031b      	lsls	r3, r3, #12
 80154fc:	4901      	ldr	r1, [pc, #4]	@ (8015504 <HAL_RCC_OscConfig+0x288>)
 80154fe:	4313      	orrs	r3, r2
 8015500:	604b      	str	r3, [r1, #4]
 8015502:	e025      	b.n	8015550 <HAL_RCC_OscConfig+0x2d4>
 8015504:	58024400 	.word	0x58024400
 8015508:	4b9a      	ldr	r3, [pc, #616]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 801550a:	685b      	ldr	r3, [r3, #4]
 801550c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	691b      	ldr	r3, [r3, #16]
 8015514:	061b      	lsls	r3, r3, #24
 8015516:	4997      	ldr	r1, [pc, #604]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 8015518:	4313      	orrs	r3, r2
 801551a:	604b      	str	r3, [r1, #4]
 801551c:	e018      	b.n	8015550 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801551e:	4b95      	ldr	r3, [pc, #596]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	4a94      	ldr	r2, [pc, #592]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 8015524:	f023 0301 	bic.w	r3, r3, #1
 8015528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801552a:	f7fc fb37 	bl	8011b9c <HAL_GetTick>
 801552e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8015530:	e008      	b.n	8015544 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8015532:	f7fc fb33 	bl	8011b9c <HAL_GetTick>
 8015536:	4602      	mov	r2, r0
 8015538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801553a:	1ad3      	subs	r3, r2, r3
 801553c:	2b02      	cmp	r3, #2
 801553e:	d901      	bls.n	8015544 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8015540:	2303      	movs	r3, #3
 8015542:	e2ed      	b.n	8015b20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8015544:	4b8b      	ldr	r3, [pc, #556]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	f003 0304 	and.w	r3, r3, #4
 801554c:	2b00      	cmp	r3, #0
 801554e:	d1f0      	bne.n	8015532 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	f003 0310 	and.w	r3, r3, #16
 8015558:	2b00      	cmp	r3, #0
 801555a:	f000 80a9 	beq.w	80156b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801555e:	4b85      	ldr	r3, [pc, #532]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 8015560:	691b      	ldr	r3, [r3, #16]
 8015562:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8015566:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8015568:	4b82      	ldr	r3, [pc, #520]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 801556a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801556c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801556e:	69bb      	ldr	r3, [r7, #24]
 8015570:	2b08      	cmp	r3, #8
 8015572:	d007      	beq.n	8015584 <HAL_RCC_OscConfig+0x308>
 8015574:	69bb      	ldr	r3, [r7, #24]
 8015576:	2b18      	cmp	r3, #24
 8015578:	d13a      	bne.n	80155f0 <HAL_RCC_OscConfig+0x374>
 801557a:	697b      	ldr	r3, [r7, #20]
 801557c:	f003 0303 	and.w	r3, r3, #3
 8015580:	2b01      	cmp	r3, #1
 8015582:	d135      	bne.n	80155f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8015584:	4b7b      	ldr	r3, [pc, #492]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801558c:	2b00      	cmp	r3, #0
 801558e:	d005      	beq.n	801559c <HAL_RCC_OscConfig+0x320>
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	69db      	ldr	r3, [r3, #28]
 8015594:	2b80      	cmp	r3, #128	@ 0x80
 8015596:	d001      	beq.n	801559c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8015598:	2301      	movs	r3, #1
 801559a:	e2c1      	b.n	8015b20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801559c:	f7fc fb38 	bl	8011c10 <HAL_GetREVID>
 80155a0:	4603      	mov	r3, r0
 80155a2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80155a6:	4293      	cmp	r3, r2
 80155a8:	d817      	bhi.n	80155da <HAL_RCC_OscConfig+0x35e>
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	6a1b      	ldr	r3, [r3, #32]
 80155ae:	2b20      	cmp	r3, #32
 80155b0:	d108      	bne.n	80155c4 <HAL_RCC_OscConfig+0x348>
 80155b2:	4b70      	ldr	r3, [pc, #448]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 80155b4:	685b      	ldr	r3, [r3, #4]
 80155b6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80155ba:	4a6e      	ldr	r2, [pc, #440]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 80155bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80155c0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80155c2:	e075      	b.n	80156b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80155c4:	4b6b      	ldr	r3, [pc, #428]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 80155c6:	685b      	ldr	r3, [r3, #4]
 80155c8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	6a1b      	ldr	r3, [r3, #32]
 80155d0:	069b      	lsls	r3, r3, #26
 80155d2:	4968      	ldr	r1, [pc, #416]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 80155d4:	4313      	orrs	r3, r2
 80155d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80155d8:	e06a      	b.n	80156b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80155da:	4b66      	ldr	r3, [pc, #408]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 80155dc:	68db      	ldr	r3, [r3, #12]
 80155de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	6a1b      	ldr	r3, [r3, #32]
 80155e6:	061b      	lsls	r3, r3, #24
 80155e8:	4962      	ldr	r1, [pc, #392]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 80155ea:	4313      	orrs	r3, r2
 80155ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80155ee:	e05f      	b.n	80156b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	69db      	ldr	r3, [r3, #28]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d042      	beq.n	801567e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80155f8:	4b5e      	ldr	r3, [pc, #376]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	4a5d      	ldr	r2, [pc, #372]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 80155fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015604:	f7fc faca 	bl	8011b9c <HAL_GetTick>
 8015608:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801560a:	e008      	b.n	801561e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801560c:	f7fc fac6 	bl	8011b9c <HAL_GetTick>
 8015610:	4602      	mov	r2, r0
 8015612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015614:	1ad3      	subs	r3, r2, r3
 8015616:	2b02      	cmp	r3, #2
 8015618:	d901      	bls.n	801561e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801561a:	2303      	movs	r3, #3
 801561c:	e280      	b.n	8015b20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801561e:	4b55      	ldr	r3, [pc, #340]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015626:	2b00      	cmp	r3, #0
 8015628:	d0f0      	beq.n	801560c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801562a:	f7fc faf1 	bl	8011c10 <HAL_GetREVID>
 801562e:	4603      	mov	r3, r0
 8015630:	f241 0203 	movw	r2, #4099	@ 0x1003
 8015634:	4293      	cmp	r3, r2
 8015636:	d817      	bhi.n	8015668 <HAL_RCC_OscConfig+0x3ec>
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	6a1b      	ldr	r3, [r3, #32]
 801563c:	2b20      	cmp	r3, #32
 801563e:	d108      	bne.n	8015652 <HAL_RCC_OscConfig+0x3d6>
 8015640:	4b4c      	ldr	r3, [pc, #304]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 8015642:	685b      	ldr	r3, [r3, #4]
 8015644:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8015648:	4a4a      	ldr	r2, [pc, #296]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 801564a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801564e:	6053      	str	r3, [r2, #4]
 8015650:	e02e      	b.n	80156b0 <HAL_RCC_OscConfig+0x434>
 8015652:	4b48      	ldr	r3, [pc, #288]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 8015654:	685b      	ldr	r3, [r3, #4]
 8015656:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	6a1b      	ldr	r3, [r3, #32]
 801565e:	069b      	lsls	r3, r3, #26
 8015660:	4944      	ldr	r1, [pc, #272]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 8015662:	4313      	orrs	r3, r2
 8015664:	604b      	str	r3, [r1, #4]
 8015666:	e023      	b.n	80156b0 <HAL_RCC_OscConfig+0x434>
 8015668:	4b42      	ldr	r3, [pc, #264]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 801566a:	68db      	ldr	r3, [r3, #12]
 801566c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	6a1b      	ldr	r3, [r3, #32]
 8015674:	061b      	lsls	r3, r3, #24
 8015676:	493f      	ldr	r1, [pc, #252]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 8015678:	4313      	orrs	r3, r2
 801567a:	60cb      	str	r3, [r1, #12]
 801567c:	e018      	b.n	80156b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801567e:	4b3d      	ldr	r3, [pc, #244]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	4a3c      	ldr	r2, [pc, #240]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 8015684:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801568a:	f7fc fa87 	bl	8011b9c <HAL_GetTick>
 801568e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8015690:	e008      	b.n	80156a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8015692:	f7fc fa83 	bl	8011b9c <HAL_GetTick>
 8015696:	4602      	mov	r2, r0
 8015698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801569a:	1ad3      	subs	r3, r2, r3
 801569c:	2b02      	cmp	r3, #2
 801569e:	d901      	bls.n	80156a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80156a0:	2303      	movs	r3, #3
 80156a2:	e23d      	b.n	8015b20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80156a4:	4b33      	ldr	r3, [pc, #204]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d1f0      	bne.n	8015692 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	f003 0308 	and.w	r3, r3, #8
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d036      	beq.n	801572a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	695b      	ldr	r3, [r3, #20]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d019      	beq.n	80156f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80156c4:	4b2b      	ldr	r3, [pc, #172]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 80156c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80156c8:	4a2a      	ldr	r2, [pc, #168]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 80156ca:	f043 0301 	orr.w	r3, r3, #1
 80156ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80156d0:	f7fc fa64 	bl	8011b9c <HAL_GetTick>
 80156d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80156d6:	e008      	b.n	80156ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80156d8:	f7fc fa60 	bl	8011b9c <HAL_GetTick>
 80156dc:	4602      	mov	r2, r0
 80156de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156e0:	1ad3      	subs	r3, r2, r3
 80156e2:	2b02      	cmp	r3, #2
 80156e4:	d901      	bls.n	80156ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80156e6:	2303      	movs	r3, #3
 80156e8:	e21a      	b.n	8015b20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80156ea:	4b22      	ldr	r3, [pc, #136]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 80156ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80156ee:	f003 0302 	and.w	r3, r3, #2
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d0f0      	beq.n	80156d8 <HAL_RCC_OscConfig+0x45c>
 80156f6:	e018      	b.n	801572a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80156f8:	4b1e      	ldr	r3, [pc, #120]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 80156fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80156fc:	4a1d      	ldr	r2, [pc, #116]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 80156fe:	f023 0301 	bic.w	r3, r3, #1
 8015702:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015704:	f7fc fa4a 	bl	8011b9c <HAL_GetTick>
 8015708:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801570a:	e008      	b.n	801571e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801570c:	f7fc fa46 	bl	8011b9c <HAL_GetTick>
 8015710:	4602      	mov	r2, r0
 8015712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015714:	1ad3      	subs	r3, r2, r3
 8015716:	2b02      	cmp	r3, #2
 8015718:	d901      	bls.n	801571e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801571a:	2303      	movs	r3, #3
 801571c:	e200      	b.n	8015b20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801571e:	4b15      	ldr	r3, [pc, #84]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 8015720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015722:	f003 0302 	and.w	r3, r3, #2
 8015726:	2b00      	cmp	r3, #0
 8015728:	d1f0      	bne.n	801570c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	f003 0320 	and.w	r3, r3, #32
 8015732:	2b00      	cmp	r3, #0
 8015734:	d039      	beq.n	80157aa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	699b      	ldr	r3, [r3, #24]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d01c      	beq.n	8015778 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801573e:	4b0d      	ldr	r3, [pc, #52]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	4a0c      	ldr	r2, [pc, #48]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 8015744:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8015748:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801574a:	f7fc fa27 	bl	8011b9c <HAL_GetTick>
 801574e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8015750:	e008      	b.n	8015764 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8015752:	f7fc fa23 	bl	8011b9c <HAL_GetTick>
 8015756:	4602      	mov	r2, r0
 8015758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801575a:	1ad3      	subs	r3, r2, r3
 801575c:	2b02      	cmp	r3, #2
 801575e:	d901      	bls.n	8015764 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8015760:	2303      	movs	r3, #3
 8015762:	e1dd      	b.n	8015b20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8015764:	4b03      	ldr	r3, [pc, #12]	@ (8015774 <HAL_RCC_OscConfig+0x4f8>)
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801576c:	2b00      	cmp	r3, #0
 801576e:	d0f0      	beq.n	8015752 <HAL_RCC_OscConfig+0x4d6>
 8015770:	e01b      	b.n	80157aa <HAL_RCC_OscConfig+0x52e>
 8015772:	bf00      	nop
 8015774:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8015778:	4b9b      	ldr	r3, [pc, #620]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	4a9a      	ldr	r2, [pc, #616]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 801577e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015782:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8015784:	f7fc fa0a 	bl	8011b9c <HAL_GetTick>
 8015788:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801578a:	e008      	b.n	801579e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801578c:	f7fc fa06 	bl	8011b9c <HAL_GetTick>
 8015790:	4602      	mov	r2, r0
 8015792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015794:	1ad3      	subs	r3, r2, r3
 8015796:	2b02      	cmp	r3, #2
 8015798:	d901      	bls.n	801579e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801579a:	2303      	movs	r3, #3
 801579c:	e1c0      	b.n	8015b20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801579e:	4b92      	ldr	r3, [pc, #584]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d1f0      	bne.n	801578c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	f003 0304 	and.w	r3, r3, #4
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	f000 8081 	beq.w	80158ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80157b8:	4b8c      	ldr	r3, [pc, #560]	@ (80159ec <HAL_RCC_OscConfig+0x770>)
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	4a8b      	ldr	r2, [pc, #556]	@ (80159ec <HAL_RCC_OscConfig+0x770>)
 80157be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80157c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80157c4:	f7fc f9ea 	bl	8011b9c <HAL_GetTick>
 80157c8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80157ca:	e008      	b.n	80157de <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80157cc:	f7fc f9e6 	bl	8011b9c <HAL_GetTick>
 80157d0:	4602      	mov	r2, r0
 80157d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157d4:	1ad3      	subs	r3, r2, r3
 80157d6:	2b64      	cmp	r3, #100	@ 0x64
 80157d8:	d901      	bls.n	80157de <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80157da:	2303      	movs	r3, #3
 80157dc:	e1a0      	b.n	8015b20 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80157de:	4b83      	ldr	r3, [pc, #524]	@ (80159ec <HAL_RCC_OscConfig+0x770>)
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d0f0      	beq.n	80157cc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	689b      	ldr	r3, [r3, #8]
 80157ee:	2b01      	cmp	r3, #1
 80157f0:	d106      	bne.n	8015800 <HAL_RCC_OscConfig+0x584>
 80157f2:	4b7d      	ldr	r3, [pc, #500]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 80157f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80157f6:	4a7c      	ldr	r2, [pc, #496]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 80157f8:	f043 0301 	orr.w	r3, r3, #1
 80157fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80157fe:	e02d      	b.n	801585c <HAL_RCC_OscConfig+0x5e0>
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	689b      	ldr	r3, [r3, #8]
 8015804:	2b00      	cmp	r3, #0
 8015806:	d10c      	bne.n	8015822 <HAL_RCC_OscConfig+0x5a6>
 8015808:	4b77      	ldr	r3, [pc, #476]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 801580a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801580c:	4a76      	ldr	r2, [pc, #472]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 801580e:	f023 0301 	bic.w	r3, r3, #1
 8015812:	6713      	str	r3, [r2, #112]	@ 0x70
 8015814:	4b74      	ldr	r3, [pc, #464]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 8015816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015818:	4a73      	ldr	r2, [pc, #460]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 801581a:	f023 0304 	bic.w	r3, r3, #4
 801581e:	6713      	str	r3, [r2, #112]	@ 0x70
 8015820:	e01c      	b.n	801585c <HAL_RCC_OscConfig+0x5e0>
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	689b      	ldr	r3, [r3, #8]
 8015826:	2b05      	cmp	r3, #5
 8015828:	d10c      	bne.n	8015844 <HAL_RCC_OscConfig+0x5c8>
 801582a:	4b6f      	ldr	r3, [pc, #444]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 801582c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801582e:	4a6e      	ldr	r2, [pc, #440]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 8015830:	f043 0304 	orr.w	r3, r3, #4
 8015834:	6713      	str	r3, [r2, #112]	@ 0x70
 8015836:	4b6c      	ldr	r3, [pc, #432]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 8015838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801583a:	4a6b      	ldr	r2, [pc, #428]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 801583c:	f043 0301 	orr.w	r3, r3, #1
 8015840:	6713      	str	r3, [r2, #112]	@ 0x70
 8015842:	e00b      	b.n	801585c <HAL_RCC_OscConfig+0x5e0>
 8015844:	4b68      	ldr	r3, [pc, #416]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 8015846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015848:	4a67      	ldr	r2, [pc, #412]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 801584a:	f023 0301 	bic.w	r3, r3, #1
 801584e:	6713      	str	r3, [r2, #112]	@ 0x70
 8015850:	4b65      	ldr	r3, [pc, #404]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 8015852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015854:	4a64      	ldr	r2, [pc, #400]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 8015856:	f023 0304 	bic.w	r3, r3, #4
 801585a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	689b      	ldr	r3, [r3, #8]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d015      	beq.n	8015890 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015864:	f7fc f99a 	bl	8011b9c <HAL_GetTick>
 8015868:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801586a:	e00a      	b.n	8015882 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801586c:	f7fc f996 	bl	8011b9c <HAL_GetTick>
 8015870:	4602      	mov	r2, r0
 8015872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015874:	1ad3      	subs	r3, r2, r3
 8015876:	f241 3288 	movw	r2, #5000	@ 0x1388
 801587a:	4293      	cmp	r3, r2
 801587c:	d901      	bls.n	8015882 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801587e:	2303      	movs	r3, #3
 8015880:	e14e      	b.n	8015b20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015882:	4b59      	ldr	r3, [pc, #356]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 8015884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015886:	f003 0302 	and.w	r3, r3, #2
 801588a:	2b00      	cmp	r3, #0
 801588c:	d0ee      	beq.n	801586c <HAL_RCC_OscConfig+0x5f0>
 801588e:	e014      	b.n	80158ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015890:	f7fc f984 	bl	8011b9c <HAL_GetTick>
 8015894:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8015896:	e00a      	b.n	80158ae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015898:	f7fc f980 	bl	8011b9c <HAL_GetTick>
 801589c:	4602      	mov	r2, r0
 801589e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158a0:	1ad3      	subs	r3, r2, r3
 80158a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80158a6:	4293      	cmp	r3, r2
 80158a8:	d901      	bls.n	80158ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80158aa:	2303      	movs	r3, #3
 80158ac:	e138      	b.n	8015b20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80158ae:	4b4e      	ldr	r3, [pc, #312]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 80158b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80158b2:	f003 0302 	and.w	r3, r3, #2
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d1ee      	bne.n	8015898 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80158be:	2b00      	cmp	r3, #0
 80158c0:	f000 812d 	beq.w	8015b1e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80158c4:	4b48      	ldr	r3, [pc, #288]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 80158c6:	691b      	ldr	r3, [r3, #16]
 80158c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80158cc:	2b18      	cmp	r3, #24
 80158ce:	f000 80bd 	beq.w	8015a4c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80158d6:	2b02      	cmp	r3, #2
 80158d8:	f040 809e 	bne.w	8015a18 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80158dc:	4b42      	ldr	r3, [pc, #264]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	4a41      	ldr	r2, [pc, #260]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 80158e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80158e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80158e8:	f7fc f958 	bl	8011b9c <HAL_GetTick>
 80158ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80158ee:	e008      	b.n	8015902 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80158f0:	f7fc f954 	bl	8011b9c <HAL_GetTick>
 80158f4:	4602      	mov	r2, r0
 80158f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158f8:	1ad3      	subs	r3, r2, r3
 80158fa:	2b02      	cmp	r3, #2
 80158fc:	d901      	bls.n	8015902 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80158fe:	2303      	movs	r3, #3
 8015900:	e10e      	b.n	8015b20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8015902:	4b39      	ldr	r3, [pc, #228]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801590a:	2b00      	cmp	r3, #0
 801590c:	d1f0      	bne.n	80158f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801590e:	4b36      	ldr	r3, [pc, #216]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 8015910:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015912:	4b37      	ldr	r3, [pc, #220]	@ (80159f0 <HAL_RCC_OscConfig+0x774>)
 8015914:	4013      	ands	r3, r2
 8015916:	687a      	ldr	r2, [r7, #4]
 8015918:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801591a:	687a      	ldr	r2, [r7, #4]
 801591c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801591e:	0112      	lsls	r2, r2, #4
 8015920:	430a      	orrs	r2, r1
 8015922:	4931      	ldr	r1, [pc, #196]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 8015924:	4313      	orrs	r3, r2
 8015926:	628b      	str	r3, [r1, #40]	@ 0x28
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801592c:	3b01      	subs	r3, #1
 801592e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015936:	3b01      	subs	r3, #1
 8015938:	025b      	lsls	r3, r3, #9
 801593a:	b29b      	uxth	r3, r3
 801593c:	431a      	orrs	r2, r3
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015942:	3b01      	subs	r3, #1
 8015944:	041b      	lsls	r3, r3, #16
 8015946:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801594a:	431a      	orrs	r2, r3
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015950:	3b01      	subs	r3, #1
 8015952:	061b      	lsls	r3, r3, #24
 8015954:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8015958:	4923      	ldr	r1, [pc, #140]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 801595a:	4313      	orrs	r3, r2
 801595c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801595e:	4b22      	ldr	r3, [pc, #136]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 8015960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015962:	4a21      	ldr	r2, [pc, #132]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 8015964:	f023 0301 	bic.w	r3, r3, #1
 8015968:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801596a:	4b1f      	ldr	r3, [pc, #124]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 801596c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801596e:	4b21      	ldr	r3, [pc, #132]	@ (80159f4 <HAL_RCC_OscConfig+0x778>)
 8015970:	4013      	ands	r3, r2
 8015972:	687a      	ldr	r2, [r7, #4]
 8015974:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8015976:	00d2      	lsls	r2, r2, #3
 8015978:	491b      	ldr	r1, [pc, #108]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 801597a:	4313      	orrs	r3, r2
 801597c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801597e:	4b1a      	ldr	r3, [pc, #104]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 8015980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015982:	f023 020c 	bic.w	r2, r3, #12
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801598a:	4917      	ldr	r1, [pc, #92]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 801598c:	4313      	orrs	r3, r2
 801598e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8015990:	4b15      	ldr	r3, [pc, #84]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 8015992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015994:	f023 0202 	bic.w	r2, r3, #2
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801599c:	4912      	ldr	r1, [pc, #72]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 801599e:	4313      	orrs	r3, r2
 80159a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80159a2:	4b11      	ldr	r3, [pc, #68]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 80159a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159a6:	4a10      	ldr	r2, [pc, #64]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 80159a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80159ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80159ae:	4b0e      	ldr	r3, [pc, #56]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 80159b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159b2:	4a0d      	ldr	r2, [pc, #52]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 80159b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80159b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80159ba:	4b0b      	ldr	r3, [pc, #44]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 80159bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159be:	4a0a      	ldr	r2, [pc, #40]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 80159c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80159c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80159c6:	4b08      	ldr	r3, [pc, #32]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 80159c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159ca:	4a07      	ldr	r2, [pc, #28]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 80159cc:	f043 0301 	orr.w	r3, r3, #1
 80159d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80159d2:	4b05      	ldr	r3, [pc, #20]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	4a04      	ldr	r2, [pc, #16]	@ (80159e8 <HAL_RCC_OscConfig+0x76c>)
 80159d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80159dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80159de:	f7fc f8dd 	bl	8011b9c <HAL_GetTick>
 80159e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80159e4:	e011      	b.n	8015a0a <HAL_RCC_OscConfig+0x78e>
 80159e6:	bf00      	nop
 80159e8:	58024400 	.word	0x58024400
 80159ec:	58024800 	.word	0x58024800
 80159f0:	fffffc0c 	.word	0xfffffc0c
 80159f4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80159f8:	f7fc f8d0 	bl	8011b9c <HAL_GetTick>
 80159fc:	4602      	mov	r2, r0
 80159fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a00:	1ad3      	subs	r3, r2, r3
 8015a02:	2b02      	cmp	r3, #2
 8015a04:	d901      	bls.n	8015a0a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8015a06:	2303      	movs	r3, #3
 8015a08:	e08a      	b.n	8015b20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8015a0a:	4b47      	ldr	r3, [pc, #284]	@ (8015b28 <HAL_RCC_OscConfig+0x8ac>)
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d0f0      	beq.n	80159f8 <HAL_RCC_OscConfig+0x77c>
 8015a16:	e082      	b.n	8015b1e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015a18:	4b43      	ldr	r3, [pc, #268]	@ (8015b28 <HAL_RCC_OscConfig+0x8ac>)
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	4a42      	ldr	r2, [pc, #264]	@ (8015b28 <HAL_RCC_OscConfig+0x8ac>)
 8015a1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8015a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015a24:	f7fc f8ba 	bl	8011b9c <HAL_GetTick>
 8015a28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8015a2a:	e008      	b.n	8015a3e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8015a2c:	f7fc f8b6 	bl	8011b9c <HAL_GetTick>
 8015a30:	4602      	mov	r2, r0
 8015a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a34:	1ad3      	subs	r3, r2, r3
 8015a36:	2b02      	cmp	r3, #2
 8015a38:	d901      	bls.n	8015a3e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8015a3a:	2303      	movs	r3, #3
 8015a3c:	e070      	b.n	8015b20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8015a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8015b28 <HAL_RCC_OscConfig+0x8ac>)
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d1f0      	bne.n	8015a2c <HAL_RCC_OscConfig+0x7b0>
 8015a4a:	e068      	b.n	8015b1e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8015a4c:	4b36      	ldr	r3, [pc, #216]	@ (8015b28 <HAL_RCC_OscConfig+0x8ac>)
 8015a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8015a52:	4b35      	ldr	r3, [pc, #212]	@ (8015b28 <HAL_RCC_OscConfig+0x8ac>)
 8015a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015a56:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a5c:	2b01      	cmp	r3, #1
 8015a5e:	d031      	beq.n	8015ac4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015a60:	693b      	ldr	r3, [r7, #16]
 8015a62:	f003 0203 	and.w	r2, r3, #3
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8015a6a:	429a      	cmp	r2, r3
 8015a6c:	d12a      	bne.n	8015ac4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8015a6e:	693b      	ldr	r3, [r7, #16]
 8015a70:	091b      	lsrs	r3, r3, #4
 8015a72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015a7a:	429a      	cmp	r2, r3
 8015a7c:	d122      	bne.n	8015ac4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015a88:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8015a8a:	429a      	cmp	r2, r3
 8015a8c:	d11a      	bne.n	8015ac4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	0a5b      	lsrs	r3, r3, #9
 8015a92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015a9a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8015a9c:	429a      	cmp	r2, r3
 8015a9e:	d111      	bne.n	8015ac4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	0c1b      	lsrs	r3, r3, #16
 8015aa4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015aac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8015aae:	429a      	cmp	r2, r3
 8015ab0:	d108      	bne.n	8015ac4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	0e1b      	lsrs	r3, r3, #24
 8015ab6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015abe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8015ac0:	429a      	cmp	r2, r3
 8015ac2:	d001      	beq.n	8015ac8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8015ac4:	2301      	movs	r3, #1
 8015ac6:	e02b      	b.n	8015b20 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8015ac8:	4b17      	ldr	r3, [pc, #92]	@ (8015b28 <HAL_RCC_OscConfig+0x8ac>)
 8015aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015acc:	08db      	lsrs	r3, r3, #3
 8015ace:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ad2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015ad8:	693a      	ldr	r2, [r7, #16]
 8015ada:	429a      	cmp	r2, r3
 8015adc:	d01f      	beq.n	8015b1e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8015ade:	4b12      	ldr	r3, [pc, #72]	@ (8015b28 <HAL_RCC_OscConfig+0x8ac>)
 8015ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ae2:	4a11      	ldr	r2, [pc, #68]	@ (8015b28 <HAL_RCC_OscConfig+0x8ac>)
 8015ae4:	f023 0301 	bic.w	r3, r3, #1
 8015ae8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8015aea:	f7fc f857 	bl	8011b9c <HAL_GetTick>
 8015aee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8015af0:	bf00      	nop
 8015af2:	f7fc f853 	bl	8011b9c <HAL_GetTick>
 8015af6:	4602      	mov	r2, r0
 8015af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015afa:	4293      	cmp	r3, r2
 8015afc:	d0f9      	beq.n	8015af2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8015afe:	4b0a      	ldr	r3, [pc, #40]	@ (8015b28 <HAL_RCC_OscConfig+0x8ac>)
 8015b00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015b02:	4b0a      	ldr	r3, [pc, #40]	@ (8015b2c <HAL_RCC_OscConfig+0x8b0>)
 8015b04:	4013      	ands	r3, r2
 8015b06:	687a      	ldr	r2, [r7, #4]
 8015b08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8015b0a:	00d2      	lsls	r2, r2, #3
 8015b0c:	4906      	ldr	r1, [pc, #24]	@ (8015b28 <HAL_RCC_OscConfig+0x8ac>)
 8015b0e:	4313      	orrs	r3, r2
 8015b10:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8015b12:	4b05      	ldr	r3, [pc, #20]	@ (8015b28 <HAL_RCC_OscConfig+0x8ac>)
 8015b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b16:	4a04      	ldr	r2, [pc, #16]	@ (8015b28 <HAL_RCC_OscConfig+0x8ac>)
 8015b18:	f043 0301 	orr.w	r3, r3, #1
 8015b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8015b1e:	2300      	movs	r3, #0
}
 8015b20:	4618      	mov	r0, r3
 8015b22:	3730      	adds	r7, #48	@ 0x30
 8015b24:	46bd      	mov	sp, r7
 8015b26:	bd80      	pop	{r7, pc}
 8015b28:	58024400 	.word	0x58024400
 8015b2c:	ffff0007 	.word	0xffff0007

08015b30 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b086      	sub	sp, #24
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	6078      	str	r0, [r7, #4]
 8015b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d101      	bne.n	8015b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8015b40:	2301      	movs	r3, #1
 8015b42:	e19c      	b.n	8015e7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8015b44:	4b8a      	ldr	r3, [pc, #552]	@ (8015d70 <HAL_RCC_ClockConfig+0x240>)
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	f003 030f 	and.w	r3, r3, #15
 8015b4c:	683a      	ldr	r2, [r7, #0]
 8015b4e:	429a      	cmp	r2, r3
 8015b50:	d910      	bls.n	8015b74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015b52:	4b87      	ldr	r3, [pc, #540]	@ (8015d70 <HAL_RCC_ClockConfig+0x240>)
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	f023 020f 	bic.w	r2, r3, #15
 8015b5a:	4985      	ldr	r1, [pc, #532]	@ (8015d70 <HAL_RCC_ClockConfig+0x240>)
 8015b5c:	683b      	ldr	r3, [r7, #0]
 8015b5e:	4313      	orrs	r3, r2
 8015b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015b62:	4b83      	ldr	r3, [pc, #524]	@ (8015d70 <HAL_RCC_ClockConfig+0x240>)
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	f003 030f 	and.w	r3, r3, #15
 8015b6a:	683a      	ldr	r2, [r7, #0]
 8015b6c:	429a      	cmp	r2, r3
 8015b6e:	d001      	beq.n	8015b74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8015b70:	2301      	movs	r3, #1
 8015b72:	e184      	b.n	8015e7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	f003 0304 	and.w	r3, r3, #4
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d010      	beq.n	8015ba2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	691a      	ldr	r2, [r3, #16]
 8015b84:	4b7b      	ldr	r3, [pc, #492]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015b86:	699b      	ldr	r3, [r3, #24]
 8015b88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8015b8c:	429a      	cmp	r2, r3
 8015b8e:	d908      	bls.n	8015ba2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8015b90:	4b78      	ldr	r3, [pc, #480]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015b92:	699b      	ldr	r3, [r3, #24]
 8015b94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	691b      	ldr	r3, [r3, #16]
 8015b9c:	4975      	ldr	r1, [pc, #468]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015b9e:	4313      	orrs	r3, r2
 8015ba0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	f003 0308 	and.w	r3, r3, #8
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d010      	beq.n	8015bd0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	695a      	ldr	r2, [r3, #20]
 8015bb2:	4b70      	ldr	r3, [pc, #448]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015bb4:	69db      	ldr	r3, [r3, #28]
 8015bb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8015bba:	429a      	cmp	r2, r3
 8015bbc:	d908      	bls.n	8015bd0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8015bbe:	4b6d      	ldr	r3, [pc, #436]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015bc0:	69db      	ldr	r3, [r3, #28]
 8015bc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	695b      	ldr	r3, [r3, #20]
 8015bca:	496a      	ldr	r1, [pc, #424]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015bcc:	4313      	orrs	r3, r2
 8015bce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	f003 0310 	and.w	r3, r3, #16
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d010      	beq.n	8015bfe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	699a      	ldr	r2, [r3, #24]
 8015be0:	4b64      	ldr	r3, [pc, #400]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015be2:	69db      	ldr	r3, [r3, #28]
 8015be4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015be8:	429a      	cmp	r2, r3
 8015bea:	d908      	bls.n	8015bfe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8015bec:	4b61      	ldr	r3, [pc, #388]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015bee:	69db      	ldr	r3, [r3, #28]
 8015bf0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	699b      	ldr	r3, [r3, #24]
 8015bf8:	495e      	ldr	r1, [pc, #376]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015bfa:	4313      	orrs	r3, r2
 8015bfc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	f003 0320 	and.w	r3, r3, #32
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d010      	beq.n	8015c2c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	69da      	ldr	r2, [r3, #28]
 8015c0e:	4b59      	ldr	r3, [pc, #356]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015c10:	6a1b      	ldr	r3, [r3, #32]
 8015c12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8015c16:	429a      	cmp	r2, r3
 8015c18:	d908      	bls.n	8015c2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8015c1a:	4b56      	ldr	r3, [pc, #344]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015c1c:	6a1b      	ldr	r3, [r3, #32]
 8015c1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	69db      	ldr	r3, [r3, #28]
 8015c26:	4953      	ldr	r1, [pc, #332]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015c28:	4313      	orrs	r3, r2
 8015c2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	f003 0302 	and.w	r3, r3, #2
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d010      	beq.n	8015c5a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	68da      	ldr	r2, [r3, #12]
 8015c3c:	4b4d      	ldr	r3, [pc, #308]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015c3e:	699b      	ldr	r3, [r3, #24]
 8015c40:	f003 030f 	and.w	r3, r3, #15
 8015c44:	429a      	cmp	r2, r3
 8015c46:	d908      	bls.n	8015c5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015c48:	4b4a      	ldr	r3, [pc, #296]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015c4a:	699b      	ldr	r3, [r3, #24]
 8015c4c:	f023 020f 	bic.w	r2, r3, #15
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	68db      	ldr	r3, [r3, #12]
 8015c54:	4947      	ldr	r1, [pc, #284]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015c56:	4313      	orrs	r3, r2
 8015c58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	f003 0301 	and.w	r3, r3, #1
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d055      	beq.n	8015d12 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8015c66:	4b43      	ldr	r3, [pc, #268]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015c68:	699b      	ldr	r3, [r3, #24]
 8015c6a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	689b      	ldr	r3, [r3, #8]
 8015c72:	4940      	ldr	r1, [pc, #256]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015c74:	4313      	orrs	r3, r2
 8015c76:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	685b      	ldr	r3, [r3, #4]
 8015c7c:	2b02      	cmp	r3, #2
 8015c7e:	d107      	bne.n	8015c90 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8015c80:	4b3c      	ldr	r3, [pc, #240]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d121      	bne.n	8015cd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8015c8c:	2301      	movs	r3, #1
 8015c8e:	e0f6      	b.n	8015e7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	685b      	ldr	r3, [r3, #4]
 8015c94:	2b03      	cmp	r3, #3
 8015c96:	d107      	bne.n	8015ca8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8015c98:	4b36      	ldr	r3, [pc, #216]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d115      	bne.n	8015cd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8015ca4:	2301      	movs	r3, #1
 8015ca6:	e0ea      	b.n	8015e7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	685b      	ldr	r3, [r3, #4]
 8015cac:	2b01      	cmp	r3, #1
 8015cae:	d107      	bne.n	8015cc0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8015cb0:	4b30      	ldr	r3, [pc, #192]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d109      	bne.n	8015cd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8015cbc:	2301      	movs	r3, #1
 8015cbe:	e0de      	b.n	8015e7e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015cc0:	4b2c      	ldr	r3, [pc, #176]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	f003 0304 	and.w	r3, r3, #4
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d101      	bne.n	8015cd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8015ccc:	2301      	movs	r3, #1
 8015cce:	e0d6      	b.n	8015e7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8015cd0:	4b28      	ldr	r3, [pc, #160]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015cd2:	691b      	ldr	r3, [r3, #16]
 8015cd4:	f023 0207 	bic.w	r2, r3, #7
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	685b      	ldr	r3, [r3, #4]
 8015cdc:	4925      	ldr	r1, [pc, #148]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015cde:	4313      	orrs	r3, r2
 8015ce0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015ce2:	f7fb ff5b 	bl	8011b9c <HAL_GetTick>
 8015ce6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015ce8:	e00a      	b.n	8015d00 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015cea:	f7fb ff57 	bl	8011b9c <HAL_GetTick>
 8015cee:	4602      	mov	r2, r0
 8015cf0:	697b      	ldr	r3, [r7, #20]
 8015cf2:	1ad3      	subs	r3, r2, r3
 8015cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015cf8:	4293      	cmp	r3, r2
 8015cfa:	d901      	bls.n	8015d00 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8015cfc:	2303      	movs	r3, #3
 8015cfe:	e0be      	b.n	8015e7e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015d00:	4b1c      	ldr	r3, [pc, #112]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015d02:	691b      	ldr	r3, [r3, #16]
 8015d04:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	685b      	ldr	r3, [r3, #4]
 8015d0c:	00db      	lsls	r3, r3, #3
 8015d0e:	429a      	cmp	r2, r3
 8015d10:	d1eb      	bne.n	8015cea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	f003 0302 	and.w	r3, r3, #2
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d010      	beq.n	8015d40 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	68da      	ldr	r2, [r3, #12]
 8015d22:	4b14      	ldr	r3, [pc, #80]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015d24:	699b      	ldr	r3, [r3, #24]
 8015d26:	f003 030f 	and.w	r3, r3, #15
 8015d2a:	429a      	cmp	r2, r3
 8015d2c:	d208      	bcs.n	8015d40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015d2e:	4b11      	ldr	r3, [pc, #68]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015d30:	699b      	ldr	r3, [r3, #24]
 8015d32:	f023 020f 	bic.w	r2, r3, #15
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	68db      	ldr	r3, [r3, #12]
 8015d3a:	490e      	ldr	r1, [pc, #56]	@ (8015d74 <HAL_RCC_ClockConfig+0x244>)
 8015d3c:	4313      	orrs	r3, r2
 8015d3e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8015d40:	4b0b      	ldr	r3, [pc, #44]	@ (8015d70 <HAL_RCC_ClockConfig+0x240>)
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	f003 030f 	and.w	r3, r3, #15
 8015d48:	683a      	ldr	r2, [r7, #0]
 8015d4a:	429a      	cmp	r2, r3
 8015d4c:	d214      	bcs.n	8015d78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015d4e:	4b08      	ldr	r3, [pc, #32]	@ (8015d70 <HAL_RCC_ClockConfig+0x240>)
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	f023 020f 	bic.w	r2, r3, #15
 8015d56:	4906      	ldr	r1, [pc, #24]	@ (8015d70 <HAL_RCC_ClockConfig+0x240>)
 8015d58:	683b      	ldr	r3, [r7, #0]
 8015d5a:	4313      	orrs	r3, r2
 8015d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015d5e:	4b04      	ldr	r3, [pc, #16]	@ (8015d70 <HAL_RCC_ClockConfig+0x240>)
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	f003 030f 	and.w	r3, r3, #15
 8015d66:	683a      	ldr	r2, [r7, #0]
 8015d68:	429a      	cmp	r2, r3
 8015d6a:	d005      	beq.n	8015d78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8015d6c:	2301      	movs	r3, #1
 8015d6e:	e086      	b.n	8015e7e <HAL_RCC_ClockConfig+0x34e>
 8015d70:	52002000 	.word	0x52002000
 8015d74:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	f003 0304 	and.w	r3, r3, #4
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d010      	beq.n	8015da6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	691a      	ldr	r2, [r3, #16]
 8015d88:	4b3f      	ldr	r3, [pc, #252]	@ (8015e88 <HAL_RCC_ClockConfig+0x358>)
 8015d8a:	699b      	ldr	r3, [r3, #24]
 8015d8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8015d90:	429a      	cmp	r2, r3
 8015d92:	d208      	bcs.n	8015da6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8015d94:	4b3c      	ldr	r3, [pc, #240]	@ (8015e88 <HAL_RCC_ClockConfig+0x358>)
 8015d96:	699b      	ldr	r3, [r3, #24]
 8015d98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	691b      	ldr	r3, [r3, #16]
 8015da0:	4939      	ldr	r1, [pc, #228]	@ (8015e88 <HAL_RCC_ClockConfig+0x358>)
 8015da2:	4313      	orrs	r3, r2
 8015da4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	f003 0308 	and.w	r3, r3, #8
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d010      	beq.n	8015dd4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	695a      	ldr	r2, [r3, #20]
 8015db6:	4b34      	ldr	r3, [pc, #208]	@ (8015e88 <HAL_RCC_ClockConfig+0x358>)
 8015db8:	69db      	ldr	r3, [r3, #28]
 8015dba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8015dbe:	429a      	cmp	r2, r3
 8015dc0:	d208      	bcs.n	8015dd4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8015dc2:	4b31      	ldr	r3, [pc, #196]	@ (8015e88 <HAL_RCC_ClockConfig+0x358>)
 8015dc4:	69db      	ldr	r3, [r3, #28]
 8015dc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	695b      	ldr	r3, [r3, #20]
 8015dce:	492e      	ldr	r1, [pc, #184]	@ (8015e88 <HAL_RCC_ClockConfig+0x358>)
 8015dd0:	4313      	orrs	r3, r2
 8015dd2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	f003 0310 	and.w	r3, r3, #16
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d010      	beq.n	8015e02 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	699a      	ldr	r2, [r3, #24]
 8015de4:	4b28      	ldr	r3, [pc, #160]	@ (8015e88 <HAL_RCC_ClockConfig+0x358>)
 8015de6:	69db      	ldr	r3, [r3, #28]
 8015de8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015dec:	429a      	cmp	r2, r3
 8015dee:	d208      	bcs.n	8015e02 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8015df0:	4b25      	ldr	r3, [pc, #148]	@ (8015e88 <HAL_RCC_ClockConfig+0x358>)
 8015df2:	69db      	ldr	r3, [r3, #28]
 8015df4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	699b      	ldr	r3, [r3, #24]
 8015dfc:	4922      	ldr	r1, [pc, #136]	@ (8015e88 <HAL_RCC_ClockConfig+0x358>)
 8015dfe:	4313      	orrs	r3, r2
 8015e00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	f003 0320 	and.w	r3, r3, #32
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d010      	beq.n	8015e30 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	69da      	ldr	r2, [r3, #28]
 8015e12:	4b1d      	ldr	r3, [pc, #116]	@ (8015e88 <HAL_RCC_ClockConfig+0x358>)
 8015e14:	6a1b      	ldr	r3, [r3, #32]
 8015e16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8015e1a:	429a      	cmp	r2, r3
 8015e1c:	d208      	bcs.n	8015e30 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8015e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8015e88 <HAL_RCC_ClockConfig+0x358>)
 8015e20:	6a1b      	ldr	r3, [r3, #32]
 8015e22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	69db      	ldr	r3, [r3, #28]
 8015e2a:	4917      	ldr	r1, [pc, #92]	@ (8015e88 <HAL_RCC_ClockConfig+0x358>)
 8015e2c:	4313      	orrs	r3, r2
 8015e2e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8015e30:	f000 f834 	bl	8015e9c <HAL_RCC_GetSysClockFreq>
 8015e34:	4602      	mov	r2, r0
 8015e36:	4b14      	ldr	r3, [pc, #80]	@ (8015e88 <HAL_RCC_ClockConfig+0x358>)
 8015e38:	699b      	ldr	r3, [r3, #24]
 8015e3a:	0a1b      	lsrs	r3, r3, #8
 8015e3c:	f003 030f 	and.w	r3, r3, #15
 8015e40:	4912      	ldr	r1, [pc, #72]	@ (8015e8c <HAL_RCC_ClockConfig+0x35c>)
 8015e42:	5ccb      	ldrb	r3, [r1, r3]
 8015e44:	f003 031f 	and.w	r3, r3, #31
 8015e48:	fa22 f303 	lsr.w	r3, r2, r3
 8015e4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8015e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8015e88 <HAL_RCC_ClockConfig+0x358>)
 8015e50:	699b      	ldr	r3, [r3, #24]
 8015e52:	f003 030f 	and.w	r3, r3, #15
 8015e56:	4a0d      	ldr	r2, [pc, #52]	@ (8015e8c <HAL_RCC_ClockConfig+0x35c>)
 8015e58:	5cd3      	ldrb	r3, [r2, r3]
 8015e5a:	f003 031f 	and.w	r3, r3, #31
 8015e5e:	693a      	ldr	r2, [r7, #16]
 8015e60:	fa22 f303 	lsr.w	r3, r2, r3
 8015e64:	4a0a      	ldr	r2, [pc, #40]	@ (8015e90 <HAL_RCC_ClockConfig+0x360>)
 8015e66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8015e68:	4a0a      	ldr	r2, [pc, #40]	@ (8015e94 <HAL_RCC_ClockConfig+0x364>)
 8015e6a:	693b      	ldr	r3, [r7, #16]
 8015e6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8015e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8015e98 <HAL_RCC_ClockConfig+0x368>)
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	4618      	mov	r0, r3
 8015e74:	f7fb fba6 	bl	80115c4 <HAL_InitTick>
 8015e78:	4603      	mov	r3, r0
 8015e7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8015e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e7e:	4618      	mov	r0, r3
 8015e80:	3718      	adds	r7, #24
 8015e82:	46bd      	mov	sp, r7
 8015e84:	bd80      	pop	{r7, pc}
 8015e86:	bf00      	nop
 8015e88:	58024400 	.word	0x58024400
 8015e8c:	08038288 	.word	0x08038288
 8015e90:	24000004 	.word	0x24000004
 8015e94:	24000000 	.word	0x24000000
 8015e98:	24000008 	.word	0x24000008

08015e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015e9c:	b480      	push	{r7}
 8015e9e:	b089      	sub	sp, #36	@ 0x24
 8015ea0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8015ea2:	4bb3      	ldr	r3, [pc, #716]	@ (8016170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015ea4:	691b      	ldr	r3, [r3, #16]
 8015ea6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8015eaa:	2b18      	cmp	r3, #24
 8015eac:	f200 8155 	bhi.w	801615a <HAL_RCC_GetSysClockFreq+0x2be>
 8015eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8015eb8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8015eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015eb6:	bf00      	nop
 8015eb8:	08015f1d 	.word	0x08015f1d
 8015ebc:	0801615b 	.word	0x0801615b
 8015ec0:	0801615b 	.word	0x0801615b
 8015ec4:	0801615b 	.word	0x0801615b
 8015ec8:	0801615b 	.word	0x0801615b
 8015ecc:	0801615b 	.word	0x0801615b
 8015ed0:	0801615b 	.word	0x0801615b
 8015ed4:	0801615b 	.word	0x0801615b
 8015ed8:	08015f43 	.word	0x08015f43
 8015edc:	0801615b 	.word	0x0801615b
 8015ee0:	0801615b 	.word	0x0801615b
 8015ee4:	0801615b 	.word	0x0801615b
 8015ee8:	0801615b 	.word	0x0801615b
 8015eec:	0801615b 	.word	0x0801615b
 8015ef0:	0801615b 	.word	0x0801615b
 8015ef4:	0801615b 	.word	0x0801615b
 8015ef8:	08015f49 	.word	0x08015f49
 8015efc:	0801615b 	.word	0x0801615b
 8015f00:	0801615b 	.word	0x0801615b
 8015f04:	0801615b 	.word	0x0801615b
 8015f08:	0801615b 	.word	0x0801615b
 8015f0c:	0801615b 	.word	0x0801615b
 8015f10:	0801615b 	.word	0x0801615b
 8015f14:	0801615b 	.word	0x0801615b
 8015f18:	08015f4f 	.word	0x08015f4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015f1c:	4b94      	ldr	r3, [pc, #592]	@ (8016170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	f003 0320 	and.w	r3, r3, #32
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d009      	beq.n	8015f3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015f28:	4b91      	ldr	r3, [pc, #580]	@ (8016170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	08db      	lsrs	r3, r3, #3
 8015f2e:	f003 0303 	and.w	r3, r3, #3
 8015f32:	4a90      	ldr	r2, [pc, #576]	@ (8016174 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8015f34:	fa22 f303 	lsr.w	r3, r2, r3
 8015f38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8015f3a:	e111      	b.n	8016160 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8015f3c:	4b8d      	ldr	r3, [pc, #564]	@ (8016174 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8015f3e:	61bb      	str	r3, [r7, #24]
      break;
 8015f40:	e10e      	b.n	8016160 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8015f42:	4b8d      	ldr	r3, [pc, #564]	@ (8016178 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8015f44:	61bb      	str	r3, [r7, #24]
      break;
 8015f46:	e10b      	b.n	8016160 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8015f48:	4b8c      	ldr	r3, [pc, #560]	@ (801617c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8015f4a:	61bb      	str	r3, [r7, #24]
      break;
 8015f4c:	e108      	b.n	8016160 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8015f4e:	4b88      	ldr	r3, [pc, #544]	@ (8016170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f52:	f003 0303 	and.w	r3, r3, #3
 8015f56:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8015f58:	4b85      	ldr	r3, [pc, #532]	@ (8016170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f5c:	091b      	lsrs	r3, r3, #4
 8015f5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015f62:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8015f64:	4b82      	ldr	r3, [pc, #520]	@ (8016170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f68:	f003 0301 	and.w	r3, r3, #1
 8015f6c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8015f6e:	4b80      	ldr	r3, [pc, #512]	@ (8016170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015f72:	08db      	lsrs	r3, r3, #3
 8015f74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f78:	68fa      	ldr	r2, [r7, #12]
 8015f7a:	fb02 f303 	mul.w	r3, r2, r3
 8015f7e:	ee07 3a90 	vmov	s15, r3
 8015f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015f86:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8015f8a:	693b      	ldr	r3, [r7, #16]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	f000 80e1 	beq.w	8016154 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8015f92:	697b      	ldr	r3, [r7, #20]
 8015f94:	2b02      	cmp	r3, #2
 8015f96:	f000 8083 	beq.w	80160a0 <HAL_RCC_GetSysClockFreq+0x204>
 8015f9a:	697b      	ldr	r3, [r7, #20]
 8015f9c:	2b02      	cmp	r3, #2
 8015f9e:	f200 80a1 	bhi.w	80160e4 <HAL_RCC_GetSysClockFreq+0x248>
 8015fa2:	697b      	ldr	r3, [r7, #20]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d003      	beq.n	8015fb0 <HAL_RCC_GetSysClockFreq+0x114>
 8015fa8:	697b      	ldr	r3, [r7, #20]
 8015faa:	2b01      	cmp	r3, #1
 8015fac:	d056      	beq.n	801605c <HAL_RCC_GetSysClockFreq+0x1c0>
 8015fae:	e099      	b.n	80160e4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015fb0:	4b6f      	ldr	r3, [pc, #444]	@ (8016170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	f003 0320 	and.w	r3, r3, #32
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d02d      	beq.n	8016018 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015fbc:	4b6c      	ldr	r3, [pc, #432]	@ (8016170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	08db      	lsrs	r3, r3, #3
 8015fc2:	f003 0303 	and.w	r3, r3, #3
 8015fc6:	4a6b      	ldr	r2, [pc, #428]	@ (8016174 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8015fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8015fcc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	ee07 3a90 	vmov	s15, r3
 8015fd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015fd8:	693b      	ldr	r3, [r7, #16]
 8015fda:	ee07 3a90 	vmov	s15, r3
 8015fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015fe6:	4b62      	ldr	r3, [pc, #392]	@ (8016170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015fee:	ee07 3a90 	vmov	s15, r3
 8015ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8015ffa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8016180 <HAL_RCC_GetSysClockFreq+0x2e4>
 8015ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801600a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801600e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016012:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8016016:	e087      	b.n	8016128 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8016018:	693b      	ldr	r3, [r7, #16]
 801601a:	ee07 3a90 	vmov	s15, r3
 801601e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016022:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8016184 <HAL_RCC_GetSysClockFreq+0x2e8>
 8016026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801602a:	4b51      	ldr	r3, [pc, #324]	@ (8016170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801602c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801602e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016032:	ee07 3a90 	vmov	s15, r3
 8016036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801603a:	ed97 6a02 	vldr	s12, [r7, #8]
 801603e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8016180 <HAL_RCC_GetSysClockFreq+0x2e4>
 8016042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801604a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801604e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016056:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801605a:	e065      	b.n	8016128 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801605c:	693b      	ldr	r3, [r7, #16]
 801605e:	ee07 3a90 	vmov	s15, r3
 8016062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016066:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8016188 <HAL_RCC_GetSysClockFreq+0x2ec>
 801606a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801606e:	4b40      	ldr	r3, [pc, #256]	@ (8016170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016076:	ee07 3a90 	vmov	s15, r3
 801607a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801607e:	ed97 6a02 	vldr	s12, [r7, #8]
 8016082:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8016180 <HAL_RCC_GetSysClockFreq+0x2e4>
 8016086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801608a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801608e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016096:	ee67 7a27 	vmul.f32	s15, s14, s15
 801609a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801609e:	e043      	b.n	8016128 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80160a0:	693b      	ldr	r3, [r7, #16]
 80160a2:	ee07 3a90 	vmov	s15, r3
 80160a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80160aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801618c <HAL_RCC_GetSysClockFreq+0x2f0>
 80160ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80160b2:	4b2f      	ldr	r3, [pc, #188]	@ (8016170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80160b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80160b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80160ba:	ee07 3a90 	vmov	s15, r3
 80160be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80160c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80160c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8016180 <HAL_RCC_GetSysClockFreq+0x2e4>
 80160ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80160ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80160d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80160d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80160da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80160de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80160e2:	e021      	b.n	8016128 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80160e4:	693b      	ldr	r3, [r7, #16]
 80160e6:	ee07 3a90 	vmov	s15, r3
 80160ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80160ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8016188 <HAL_RCC_GetSysClockFreq+0x2ec>
 80160f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80160f6:	4b1e      	ldr	r3, [pc, #120]	@ (8016170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80160f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80160fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80160fe:	ee07 3a90 	vmov	s15, r3
 8016102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016106:	ed97 6a02 	vldr	s12, [r7, #8]
 801610a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8016180 <HAL_RCC_GetSysClockFreq+0x2e4>
 801610e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801611a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801611e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016122:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8016126:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8016128:	4b11      	ldr	r3, [pc, #68]	@ (8016170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801612a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801612c:	0a5b      	lsrs	r3, r3, #9
 801612e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016132:	3301      	adds	r3, #1
 8016134:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8016136:	683b      	ldr	r3, [r7, #0]
 8016138:	ee07 3a90 	vmov	s15, r3
 801613c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016140:	edd7 6a07 	vldr	s13, [r7, #28]
 8016144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801614c:	ee17 3a90 	vmov	r3, s15
 8016150:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8016152:	e005      	b.n	8016160 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8016154:	2300      	movs	r3, #0
 8016156:	61bb      	str	r3, [r7, #24]
      break;
 8016158:	e002      	b.n	8016160 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801615a:	4b07      	ldr	r3, [pc, #28]	@ (8016178 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801615c:	61bb      	str	r3, [r7, #24]
      break;
 801615e:	bf00      	nop
  }

  return sysclockfreq;
 8016160:	69bb      	ldr	r3, [r7, #24]
}
 8016162:	4618      	mov	r0, r3
 8016164:	3724      	adds	r7, #36	@ 0x24
 8016166:	46bd      	mov	sp, r7
 8016168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801616c:	4770      	bx	lr
 801616e:	bf00      	nop
 8016170:	58024400 	.word	0x58024400
 8016174:	03d09000 	.word	0x03d09000
 8016178:	003d0900 	.word	0x003d0900
 801617c:	017d7840 	.word	0x017d7840
 8016180:	46000000 	.word	0x46000000
 8016184:	4c742400 	.word	0x4c742400
 8016188:	4a742400 	.word	0x4a742400
 801618c:	4bbebc20 	.word	0x4bbebc20

08016190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8016190:	b580      	push	{r7, lr}
 8016192:	b082      	sub	sp, #8
 8016194:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8016196:	f7ff fe81 	bl	8015e9c <HAL_RCC_GetSysClockFreq>
 801619a:	4602      	mov	r2, r0
 801619c:	4b10      	ldr	r3, [pc, #64]	@ (80161e0 <HAL_RCC_GetHCLKFreq+0x50>)
 801619e:	699b      	ldr	r3, [r3, #24]
 80161a0:	0a1b      	lsrs	r3, r3, #8
 80161a2:	f003 030f 	and.w	r3, r3, #15
 80161a6:	490f      	ldr	r1, [pc, #60]	@ (80161e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80161a8:	5ccb      	ldrb	r3, [r1, r3]
 80161aa:	f003 031f 	and.w	r3, r3, #31
 80161ae:	fa22 f303 	lsr.w	r3, r2, r3
 80161b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80161b4:	4b0a      	ldr	r3, [pc, #40]	@ (80161e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80161b6:	699b      	ldr	r3, [r3, #24]
 80161b8:	f003 030f 	and.w	r3, r3, #15
 80161bc:	4a09      	ldr	r2, [pc, #36]	@ (80161e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80161be:	5cd3      	ldrb	r3, [r2, r3]
 80161c0:	f003 031f 	and.w	r3, r3, #31
 80161c4:	687a      	ldr	r2, [r7, #4]
 80161c6:	fa22 f303 	lsr.w	r3, r2, r3
 80161ca:	4a07      	ldr	r2, [pc, #28]	@ (80161e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80161cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80161ce:	4a07      	ldr	r2, [pc, #28]	@ (80161ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80161d4:	4b04      	ldr	r3, [pc, #16]	@ (80161e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80161d6:	681b      	ldr	r3, [r3, #0]
}
 80161d8:	4618      	mov	r0, r3
 80161da:	3708      	adds	r7, #8
 80161dc:	46bd      	mov	sp, r7
 80161de:	bd80      	pop	{r7, pc}
 80161e0:	58024400 	.word	0x58024400
 80161e4:	08038288 	.word	0x08038288
 80161e8:	24000004 	.word	0x24000004
 80161ec:	24000000 	.word	0x24000000

080161f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80161f4:	f7ff ffcc 	bl	8016190 <HAL_RCC_GetHCLKFreq>
 80161f8:	4602      	mov	r2, r0
 80161fa:	4b06      	ldr	r3, [pc, #24]	@ (8016214 <HAL_RCC_GetPCLK1Freq+0x24>)
 80161fc:	69db      	ldr	r3, [r3, #28]
 80161fe:	091b      	lsrs	r3, r3, #4
 8016200:	f003 0307 	and.w	r3, r3, #7
 8016204:	4904      	ldr	r1, [pc, #16]	@ (8016218 <HAL_RCC_GetPCLK1Freq+0x28>)
 8016206:	5ccb      	ldrb	r3, [r1, r3]
 8016208:	f003 031f 	and.w	r3, r3, #31
 801620c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8016210:	4618      	mov	r0, r3
 8016212:	bd80      	pop	{r7, pc}
 8016214:	58024400 	.word	0x58024400
 8016218:	08038288 	.word	0x08038288

0801621c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801621c:	b580      	push	{r7, lr}
 801621e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8016220:	f7ff ffb6 	bl	8016190 <HAL_RCC_GetHCLKFreq>
 8016224:	4602      	mov	r2, r0
 8016226:	4b06      	ldr	r3, [pc, #24]	@ (8016240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8016228:	69db      	ldr	r3, [r3, #28]
 801622a:	0a1b      	lsrs	r3, r3, #8
 801622c:	f003 0307 	and.w	r3, r3, #7
 8016230:	4904      	ldr	r1, [pc, #16]	@ (8016244 <HAL_RCC_GetPCLK2Freq+0x28>)
 8016232:	5ccb      	ldrb	r3, [r1, r3]
 8016234:	f003 031f 	and.w	r3, r3, #31
 8016238:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801623c:	4618      	mov	r0, r3
 801623e:	bd80      	pop	{r7, pc}
 8016240:	58024400 	.word	0x58024400
 8016244:	08038288 	.word	0x08038288

08016248 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8016248:	b480      	push	{r7}
 801624a:	b083      	sub	sp, #12
 801624c:	af00      	add	r7, sp, #0
 801624e:	6078      	str	r0, [r7, #4]
 8016250:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	223f      	movs	r2, #63	@ 0x3f
 8016256:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8016258:	4b1a      	ldr	r3, [pc, #104]	@ (80162c4 <HAL_RCC_GetClockConfig+0x7c>)
 801625a:	691b      	ldr	r3, [r3, #16]
 801625c:	f003 0207 	and.w	r2, r3, #7
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8016264:	4b17      	ldr	r3, [pc, #92]	@ (80162c4 <HAL_RCC_GetClockConfig+0x7c>)
 8016266:	699b      	ldr	r3, [r3, #24]
 8016268:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8016270:	4b14      	ldr	r3, [pc, #80]	@ (80162c4 <HAL_RCC_GetClockConfig+0x7c>)
 8016272:	699b      	ldr	r3, [r3, #24]
 8016274:	f003 020f 	and.w	r2, r3, #15
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 801627c:	4b11      	ldr	r3, [pc, #68]	@ (80162c4 <HAL_RCC_GetClockConfig+0x7c>)
 801627e:	699b      	ldr	r3, [r3, #24]
 8016280:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8016288:	4b0e      	ldr	r3, [pc, #56]	@ (80162c4 <HAL_RCC_GetClockConfig+0x7c>)
 801628a:	69db      	ldr	r3, [r3, #28]
 801628c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8016294:	4b0b      	ldr	r3, [pc, #44]	@ (80162c4 <HAL_RCC_GetClockConfig+0x7c>)
 8016296:	69db      	ldr	r3, [r3, #28]
 8016298:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80162a0:	4b08      	ldr	r3, [pc, #32]	@ (80162c4 <HAL_RCC_GetClockConfig+0x7c>)
 80162a2:	6a1b      	ldr	r3, [r3, #32]
 80162a4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80162ac:	4b06      	ldr	r3, [pc, #24]	@ (80162c8 <HAL_RCC_GetClockConfig+0x80>)
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	f003 020f 	and.w	r2, r3, #15
 80162b4:	683b      	ldr	r3, [r7, #0]
 80162b6:	601a      	str	r2, [r3, #0]
}
 80162b8:	bf00      	nop
 80162ba:	370c      	adds	r7, #12
 80162bc:	46bd      	mov	sp, r7
 80162be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c2:	4770      	bx	lr
 80162c4:	58024400 	.word	0x58024400
 80162c8:	52002000 	.word	0x52002000

080162cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80162cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80162d0:	b0ca      	sub	sp, #296	@ 0x128
 80162d2:	af00      	add	r7, sp, #0
 80162d4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80162d8:	2300      	movs	r3, #0
 80162da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80162de:	2300      	movs	r3, #0
 80162e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80162e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80162e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80162f0:	2500      	movs	r5, #0
 80162f2:	ea54 0305 	orrs.w	r3, r4, r5
 80162f6:	d049      	beq.n	801638c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80162f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80162fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80162fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8016302:	d02f      	beq.n	8016364 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8016304:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8016308:	d828      	bhi.n	801635c <HAL_RCCEx_PeriphCLKConfig+0x90>
 801630a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801630e:	d01a      	beq.n	8016346 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8016310:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8016314:	d822      	bhi.n	801635c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8016316:	2b00      	cmp	r3, #0
 8016318:	d003      	beq.n	8016322 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801631a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801631e:	d007      	beq.n	8016330 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8016320:	e01c      	b.n	801635c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016322:	4bb8      	ldr	r3, [pc, #736]	@ (8016604 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8016324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016326:	4ab7      	ldr	r2, [pc, #732]	@ (8016604 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8016328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801632c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801632e:	e01a      	b.n	8016366 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8016330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016334:	3308      	adds	r3, #8
 8016336:	2102      	movs	r1, #2
 8016338:	4618      	mov	r0, r3
 801633a:	f002 fb61 	bl	8018a00 <RCCEx_PLL2_Config>
 801633e:	4603      	mov	r3, r0
 8016340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8016344:	e00f      	b.n	8016366 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8016346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801634a:	3328      	adds	r3, #40	@ 0x28
 801634c:	2102      	movs	r1, #2
 801634e:	4618      	mov	r0, r3
 8016350:	f002 fc08 	bl	8018b64 <RCCEx_PLL3_Config>
 8016354:	4603      	mov	r3, r0
 8016356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801635a:	e004      	b.n	8016366 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801635c:	2301      	movs	r3, #1
 801635e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016362:	e000      	b.n	8016366 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8016364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801636a:	2b00      	cmp	r3, #0
 801636c:	d10a      	bne.n	8016384 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801636e:	4ba5      	ldr	r3, [pc, #660]	@ (8016604 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8016370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016372:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8016376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801637a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801637c:	4aa1      	ldr	r2, [pc, #644]	@ (8016604 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801637e:	430b      	orrs	r3, r1
 8016380:	6513      	str	r3, [r2, #80]	@ 0x50
 8016382:	e003      	b.n	801638c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016384:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016388:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801638c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016394:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8016398:	f04f 0900 	mov.w	r9, #0
 801639c:	ea58 0309 	orrs.w	r3, r8, r9
 80163a0:	d047      	beq.n	8016432 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80163a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80163a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80163a8:	2b04      	cmp	r3, #4
 80163aa:	d82a      	bhi.n	8016402 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80163ac:	a201      	add	r2, pc, #4	@ (adr r2, 80163b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80163ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163b2:	bf00      	nop
 80163b4:	080163c9 	.word	0x080163c9
 80163b8:	080163d7 	.word	0x080163d7
 80163bc:	080163ed 	.word	0x080163ed
 80163c0:	0801640b 	.word	0x0801640b
 80163c4:	0801640b 	.word	0x0801640b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80163c8:	4b8e      	ldr	r3, [pc, #568]	@ (8016604 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80163ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163cc:	4a8d      	ldr	r2, [pc, #564]	@ (8016604 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80163ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80163d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80163d4:	e01a      	b.n	801640c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80163d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80163da:	3308      	adds	r3, #8
 80163dc:	2100      	movs	r1, #0
 80163de:	4618      	mov	r0, r3
 80163e0:	f002 fb0e 	bl	8018a00 <RCCEx_PLL2_Config>
 80163e4:	4603      	mov	r3, r0
 80163e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80163ea:	e00f      	b.n	801640c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80163ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80163f0:	3328      	adds	r3, #40	@ 0x28
 80163f2:	2100      	movs	r1, #0
 80163f4:	4618      	mov	r0, r3
 80163f6:	f002 fbb5 	bl	8018b64 <RCCEx_PLL3_Config>
 80163fa:	4603      	mov	r3, r0
 80163fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8016400:	e004      	b.n	801640c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016402:	2301      	movs	r3, #1
 8016404:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016408:	e000      	b.n	801640c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801640a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801640c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016410:	2b00      	cmp	r3, #0
 8016412:	d10a      	bne.n	801642a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8016414:	4b7b      	ldr	r3, [pc, #492]	@ (8016604 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8016416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016418:	f023 0107 	bic.w	r1, r3, #7
 801641c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016422:	4a78      	ldr	r2, [pc, #480]	@ (8016604 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8016424:	430b      	orrs	r3, r1
 8016426:	6513      	str	r3, [r2, #80]	@ 0x50
 8016428:	e003      	b.n	8016432 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801642a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801642e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8016432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801643a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801643e:	f04f 0b00 	mov.w	fp, #0
 8016442:	ea5a 030b 	orrs.w	r3, sl, fp
 8016446:	d04c      	beq.n	80164e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8016448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801644c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801644e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016452:	d030      	beq.n	80164b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8016454:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016458:	d829      	bhi.n	80164ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801645a:	2bc0      	cmp	r3, #192	@ 0xc0
 801645c:	d02d      	beq.n	80164ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801645e:	2bc0      	cmp	r3, #192	@ 0xc0
 8016460:	d825      	bhi.n	80164ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8016462:	2b80      	cmp	r3, #128	@ 0x80
 8016464:	d018      	beq.n	8016498 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8016466:	2b80      	cmp	r3, #128	@ 0x80
 8016468:	d821      	bhi.n	80164ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801646a:	2b00      	cmp	r3, #0
 801646c:	d002      	beq.n	8016474 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801646e:	2b40      	cmp	r3, #64	@ 0x40
 8016470:	d007      	beq.n	8016482 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8016472:	e01c      	b.n	80164ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016474:	4b63      	ldr	r3, [pc, #396]	@ (8016604 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8016476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016478:	4a62      	ldr	r2, [pc, #392]	@ (8016604 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801647a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801647e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8016480:	e01c      	b.n	80164bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8016482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016486:	3308      	adds	r3, #8
 8016488:	2100      	movs	r1, #0
 801648a:	4618      	mov	r0, r3
 801648c:	f002 fab8 	bl	8018a00 <RCCEx_PLL2_Config>
 8016490:	4603      	mov	r3, r0
 8016492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8016496:	e011      	b.n	80164bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8016498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801649c:	3328      	adds	r3, #40	@ 0x28
 801649e:	2100      	movs	r1, #0
 80164a0:	4618      	mov	r0, r3
 80164a2:	f002 fb5f 	bl	8018b64 <RCCEx_PLL3_Config>
 80164a6:	4603      	mov	r3, r0
 80164a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80164ac:	e006      	b.n	80164bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80164ae:	2301      	movs	r3, #1
 80164b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80164b4:	e002      	b.n	80164bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80164b6:	bf00      	nop
 80164b8:	e000      	b.n	80164bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80164ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80164bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d10a      	bne.n	80164da <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80164c4:	4b4f      	ldr	r3, [pc, #316]	@ (8016604 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80164c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80164c8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80164cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80164d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80164d2:	4a4c      	ldr	r2, [pc, #304]	@ (8016604 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80164d4:	430b      	orrs	r3, r1
 80164d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80164d8:	e003      	b.n	80164e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80164da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80164de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80164e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80164e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164ea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80164ee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80164f2:	2300      	movs	r3, #0
 80164f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80164f8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80164fc:	460b      	mov	r3, r1
 80164fe:	4313      	orrs	r3, r2
 8016500:	d053      	beq.n	80165aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8016502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016506:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801650a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801650e:	d035      	beq.n	801657c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8016510:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8016514:	d82e      	bhi.n	8016574 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8016516:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801651a:	d031      	beq.n	8016580 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801651c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8016520:	d828      	bhi.n	8016574 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8016522:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8016526:	d01a      	beq.n	801655e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8016528:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801652c:	d822      	bhi.n	8016574 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801652e:	2b00      	cmp	r3, #0
 8016530:	d003      	beq.n	801653a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8016532:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8016536:	d007      	beq.n	8016548 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8016538:	e01c      	b.n	8016574 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801653a:	4b32      	ldr	r3, [pc, #200]	@ (8016604 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801653c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801653e:	4a31      	ldr	r2, [pc, #196]	@ (8016604 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8016540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8016544:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8016546:	e01c      	b.n	8016582 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8016548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801654c:	3308      	adds	r3, #8
 801654e:	2100      	movs	r1, #0
 8016550:	4618      	mov	r0, r3
 8016552:	f002 fa55 	bl	8018a00 <RCCEx_PLL2_Config>
 8016556:	4603      	mov	r3, r0
 8016558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801655c:	e011      	b.n	8016582 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801655e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016562:	3328      	adds	r3, #40	@ 0x28
 8016564:	2100      	movs	r1, #0
 8016566:	4618      	mov	r0, r3
 8016568:	f002 fafc 	bl	8018b64 <RCCEx_PLL3_Config>
 801656c:	4603      	mov	r3, r0
 801656e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8016572:	e006      	b.n	8016582 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8016574:	2301      	movs	r3, #1
 8016576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801657a:	e002      	b.n	8016582 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801657c:	bf00      	nop
 801657e:	e000      	b.n	8016582 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8016580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016586:	2b00      	cmp	r3, #0
 8016588:	d10b      	bne.n	80165a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801658a:	4b1e      	ldr	r3, [pc, #120]	@ (8016604 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801658c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801658e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8016592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016596:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801659a:	4a1a      	ldr	r2, [pc, #104]	@ (8016604 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801659c:	430b      	orrs	r3, r1
 801659e:	6593      	str	r3, [r2, #88]	@ 0x58
 80165a0:	e003      	b.n	80165aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80165a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80165a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80165aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80165ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165b2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80165b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80165ba:	2300      	movs	r3, #0
 80165bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80165c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80165c4:	460b      	mov	r3, r1
 80165c6:	4313      	orrs	r3, r2
 80165c8:	d056      	beq.n	8016678 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80165ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80165ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80165d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80165d6:	d038      	beq.n	801664a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80165d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80165dc:	d831      	bhi.n	8016642 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80165de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80165e2:	d034      	beq.n	801664e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80165e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80165e8:	d82b      	bhi.n	8016642 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80165ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80165ee:	d01d      	beq.n	801662c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80165f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80165f4:	d825      	bhi.n	8016642 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d006      	beq.n	8016608 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80165fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80165fe:	d00a      	beq.n	8016616 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8016600:	e01f      	b.n	8016642 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8016602:	bf00      	nop
 8016604:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016608:	4ba2      	ldr	r3, [pc, #648]	@ (8016894 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801660a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801660c:	4aa1      	ldr	r2, [pc, #644]	@ (8016894 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801660e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8016612:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8016614:	e01c      	b.n	8016650 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8016616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801661a:	3308      	adds	r3, #8
 801661c:	2100      	movs	r1, #0
 801661e:	4618      	mov	r0, r3
 8016620:	f002 f9ee 	bl	8018a00 <RCCEx_PLL2_Config>
 8016624:	4603      	mov	r3, r0
 8016626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801662a:	e011      	b.n	8016650 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801662c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016630:	3328      	adds	r3, #40	@ 0x28
 8016632:	2100      	movs	r1, #0
 8016634:	4618      	mov	r0, r3
 8016636:	f002 fa95 	bl	8018b64 <RCCEx_PLL3_Config>
 801663a:	4603      	mov	r3, r0
 801663c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8016640:	e006      	b.n	8016650 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8016642:	2301      	movs	r3, #1
 8016644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016648:	e002      	b.n	8016650 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801664a:	bf00      	nop
 801664c:	e000      	b.n	8016650 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801664e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016654:	2b00      	cmp	r3, #0
 8016656:	d10b      	bne.n	8016670 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8016658:	4b8e      	ldr	r3, [pc, #568]	@ (8016894 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801665a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801665c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8016660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016664:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016668:	4a8a      	ldr	r2, [pc, #552]	@ (8016894 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801666a:	430b      	orrs	r3, r1
 801666c:	6593      	str	r3, [r2, #88]	@ 0x58
 801666e:	e003      	b.n	8016678 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016674:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8016678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016680:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8016684:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8016688:	2300      	movs	r3, #0
 801668a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801668e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8016692:	460b      	mov	r3, r1
 8016694:	4313      	orrs	r3, r2
 8016696:	d03a      	beq.n	801670e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8016698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801669c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801669e:	2b30      	cmp	r3, #48	@ 0x30
 80166a0:	d01f      	beq.n	80166e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80166a2:	2b30      	cmp	r3, #48	@ 0x30
 80166a4:	d819      	bhi.n	80166da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80166a6:	2b20      	cmp	r3, #32
 80166a8:	d00c      	beq.n	80166c4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80166aa:	2b20      	cmp	r3, #32
 80166ac:	d815      	bhi.n	80166da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d019      	beq.n	80166e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80166b2:	2b10      	cmp	r3, #16
 80166b4:	d111      	bne.n	80166da <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80166b6:	4b77      	ldr	r3, [pc, #476]	@ (8016894 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80166b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166ba:	4a76      	ldr	r2, [pc, #472]	@ (8016894 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80166bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80166c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80166c2:	e011      	b.n	80166e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80166c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80166c8:	3308      	adds	r3, #8
 80166ca:	2102      	movs	r1, #2
 80166cc:	4618      	mov	r0, r3
 80166ce:	f002 f997 	bl	8018a00 <RCCEx_PLL2_Config>
 80166d2:	4603      	mov	r3, r0
 80166d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80166d8:	e006      	b.n	80166e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80166da:	2301      	movs	r3, #1
 80166dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80166e0:	e002      	b.n	80166e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80166e2:	bf00      	nop
 80166e4:	e000      	b.n	80166e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80166e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80166e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d10a      	bne.n	8016706 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80166f0:	4b68      	ldr	r3, [pc, #416]	@ (8016894 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80166f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80166f4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80166f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80166fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80166fe:	4a65      	ldr	r2, [pc, #404]	@ (8016894 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8016700:	430b      	orrs	r3, r1
 8016702:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8016704:	e003      	b.n	801670e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016706:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801670a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801670e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016716:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801671a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801671e:	2300      	movs	r3, #0
 8016720:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8016724:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8016728:	460b      	mov	r3, r1
 801672a:	4313      	orrs	r3, r2
 801672c:	d051      	beq.n	80167d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801672e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016734:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016738:	d035      	beq.n	80167a6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801673a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801673e:	d82e      	bhi.n	801679e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8016740:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8016744:	d031      	beq.n	80167aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8016746:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801674a:	d828      	bhi.n	801679e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801674c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016750:	d01a      	beq.n	8016788 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8016752:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016756:	d822      	bhi.n	801679e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8016758:	2b00      	cmp	r3, #0
 801675a:	d003      	beq.n	8016764 <HAL_RCCEx_PeriphCLKConfig+0x498>
 801675c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016760:	d007      	beq.n	8016772 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8016762:	e01c      	b.n	801679e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016764:	4b4b      	ldr	r3, [pc, #300]	@ (8016894 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8016766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016768:	4a4a      	ldr	r2, [pc, #296]	@ (8016894 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801676a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801676e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8016770:	e01c      	b.n	80167ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8016772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016776:	3308      	adds	r3, #8
 8016778:	2100      	movs	r1, #0
 801677a:	4618      	mov	r0, r3
 801677c:	f002 f940 	bl	8018a00 <RCCEx_PLL2_Config>
 8016780:	4603      	mov	r3, r0
 8016782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8016786:	e011      	b.n	80167ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8016788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801678c:	3328      	adds	r3, #40	@ 0x28
 801678e:	2100      	movs	r1, #0
 8016790:	4618      	mov	r0, r3
 8016792:	f002 f9e7 	bl	8018b64 <RCCEx_PLL3_Config>
 8016796:	4603      	mov	r3, r0
 8016798:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801679c:	e006      	b.n	80167ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801679e:	2301      	movs	r3, #1
 80167a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80167a4:	e002      	b.n	80167ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80167a6:	bf00      	nop
 80167a8:	e000      	b.n	80167ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80167aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80167ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d10a      	bne.n	80167ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80167b4:	4b37      	ldr	r3, [pc, #220]	@ (8016894 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80167b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80167b8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80167bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80167c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80167c2:	4a34      	ldr	r2, [pc, #208]	@ (8016894 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80167c4:	430b      	orrs	r3, r1
 80167c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80167c8:	e003      	b.n	80167d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80167ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80167ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80167d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80167d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167da:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80167de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80167e2:	2300      	movs	r3, #0
 80167e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80167e8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80167ec:	460b      	mov	r3, r1
 80167ee:	4313      	orrs	r3, r2
 80167f0:	d056      	beq.n	80168a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80167f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80167f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80167f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80167fc:	d033      	beq.n	8016866 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80167fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8016802:	d82c      	bhi.n	801685e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8016804:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8016808:	d02f      	beq.n	801686a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801680a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801680e:	d826      	bhi.n	801685e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8016810:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8016814:	d02b      	beq.n	801686e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8016816:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801681a:	d820      	bhi.n	801685e <HAL_RCCEx_PeriphCLKConfig+0x592>
 801681c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016820:	d012      	beq.n	8016848 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8016822:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016826:	d81a      	bhi.n	801685e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8016828:	2b00      	cmp	r3, #0
 801682a:	d022      	beq.n	8016872 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801682c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016830:	d115      	bne.n	801685e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8016832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016836:	3308      	adds	r3, #8
 8016838:	2101      	movs	r1, #1
 801683a:	4618      	mov	r0, r3
 801683c:	f002 f8e0 	bl	8018a00 <RCCEx_PLL2_Config>
 8016840:	4603      	mov	r3, r0
 8016842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8016846:	e015      	b.n	8016874 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8016848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801684c:	3328      	adds	r3, #40	@ 0x28
 801684e:	2101      	movs	r1, #1
 8016850:	4618      	mov	r0, r3
 8016852:	f002 f987 	bl	8018b64 <RCCEx_PLL3_Config>
 8016856:	4603      	mov	r3, r0
 8016858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801685c:	e00a      	b.n	8016874 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801685e:	2301      	movs	r3, #1
 8016860:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016864:	e006      	b.n	8016874 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8016866:	bf00      	nop
 8016868:	e004      	b.n	8016874 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801686a:	bf00      	nop
 801686c:	e002      	b.n	8016874 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801686e:	bf00      	nop
 8016870:	e000      	b.n	8016874 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8016872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016874:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016878:	2b00      	cmp	r3, #0
 801687a:	d10d      	bne.n	8016898 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801687c:	4b05      	ldr	r3, [pc, #20]	@ (8016894 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801687e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016880:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8016884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016888:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801688a:	4a02      	ldr	r2, [pc, #8]	@ (8016894 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801688c:	430b      	orrs	r3, r1
 801688e:	6513      	str	r3, [r2, #80]	@ 0x50
 8016890:	e006      	b.n	80168a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8016892:	bf00      	nop
 8016894:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016898:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801689c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80168a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80168a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168a8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80168ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80168b0:	2300      	movs	r3, #0
 80168b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80168b6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80168ba:	460b      	mov	r3, r1
 80168bc:	4313      	orrs	r3, r2
 80168be:	d055      	beq.n	801696c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80168c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80168c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80168c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80168cc:	d033      	beq.n	8016936 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80168ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80168d2:	d82c      	bhi.n	801692e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80168d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80168d8:	d02f      	beq.n	801693a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80168da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80168de:	d826      	bhi.n	801692e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80168e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80168e4:	d02b      	beq.n	801693e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80168e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80168ea:	d820      	bhi.n	801692e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80168ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80168f0:	d012      	beq.n	8016918 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80168f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80168f6:	d81a      	bhi.n	801692e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d022      	beq.n	8016942 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80168fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016900:	d115      	bne.n	801692e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8016902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016906:	3308      	adds	r3, #8
 8016908:	2101      	movs	r1, #1
 801690a:	4618      	mov	r0, r3
 801690c:	f002 f878 	bl	8018a00 <RCCEx_PLL2_Config>
 8016910:	4603      	mov	r3, r0
 8016912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8016916:	e015      	b.n	8016944 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8016918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801691c:	3328      	adds	r3, #40	@ 0x28
 801691e:	2101      	movs	r1, #1
 8016920:	4618      	mov	r0, r3
 8016922:	f002 f91f 	bl	8018b64 <RCCEx_PLL3_Config>
 8016926:	4603      	mov	r3, r0
 8016928:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801692c:	e00a      	b.n	8016944 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801692e:	2301      	movs	r3, #1
 8016930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016934:	e006      	b.n	8016944 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8016936:	bf00      	nop
 8016938:	e004      	b.n	8016944 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801693a:	bf00      	nop
 801693c:	e002      	b.n	8016944 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801693e:	bf00      	nop
 8016940:	e000      	b.n	8016944 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8016942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016948:	2b00      	cmp	r3, #0
 801694a:	d10b      	bne.n	8016964 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801694c:	4ba3      	ldr	r3, [pc, #652]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801694e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016950:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8016954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016958:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801695c:	4a9f      	ldr	r2, [pc, #636]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801695e:	430b      	orrs	r3, r1
 8016960:	6593      	str	r3, [r2, #88]	@ 0x58
 8016962:	e003      	b.n	801696c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016968:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801696c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016974:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8016978:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801697c:	2300      	movs	r3, #0
 801697e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8016982:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8016986:	460b      	mov	r3, r1
 8016988:	4313      	orrs	r3, r2
 801698a:	d037      	beq.n	80169fc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801698c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016992:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016996:	d00e      	beq.n	80169b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8016998:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801699c:	d816      	bhi.n	80169cc <HAL_RCCEx_PeriphCLKConfig+0x700>
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d018      	beq.n	80169d4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80169a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80169a6:	d111      	bne.n	80169cc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80169a8:	4b8c      	ldr	r3, [pc, #560]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80169aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80169ac:	4a8b      	ldr	r2, [pc, #556]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80169ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80169b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80169b4:	e00f      	b.n	80169d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80169b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80169ba:	3308      	adds	r3, #8
 80169bc:	2101      	movs	r1, #1
 80169be:	4618      	mov	r0, r3
 80169c0:	f002 f81e 	bl	8018a00 <RCCEx_PLL2_Config>
 80169c4:	4603      	mov	r3, r0
 80169c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80169ca:	e004      	b.n	80169d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80169cc:	2301      	movs	r3, #1
 80169ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80169d2:	e000      	b.n	80169d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80169d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80169d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d10a      	bne.n	80169f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80169de:	4b7f      	ldr	r3, [pc, #508]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80169e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80169e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80169e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80169ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80169ec:	4a7b      	ldr	r2, [pc, #492]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80169ee:	430b      	orrs	r3, r1
 80169f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80169f2:	e003      	b.n	80169fc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80169f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80169f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80169fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a04:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8016a08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8016a0c:	2300      	movs	r3, #0
 8016a0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8016a12:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8016a16:	460b      	mov	r3, r1
 8016a18:	4313      	orrs	r3, r2
 8016a1a:	d039      	beq.n	8016a90 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8016a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016a22:	2b03      	cmp	r3, #3
 8016a24:	d81c      	bhi.n	8016a60 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8016a26:	a201      	add	r2, pc, #4	@ (adr r2, 8016a2c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8016a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a2c:	08016a69 	.word	0x08016a69
 8016a30:	08016a3d 	.word	0x08016a3d
 8016a34:	08016a4b 	.word	0x08016a4b
 8016a38:	08016a69 	.word	0x08016a69
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016a3c:	4b67      	ldr	r3, [pc, #412]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016a40:	4a66      	ldr	r2, [pc, #408]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016a42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8016a46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8016a48:	e00f      	b.n	8016a6a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8016a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016a4e:	3308      	adds	r3, #8
 8016a50:	2102      	movs	r1, #2
 8016a52:	4618      	mov	r0, r3
 8016a54:	f001 ffd4 	bl	8018a00 <RCCEx_PLL2_Config>
 8016a58:	4603      	mov	r3, r0
 8016a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8016a5e:	e004      	b.n	8016a6a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8016a60:	2301      	movs	r3, #1
 8016a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016a66:	e000      	b.n	8016a6a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8016a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d10a      	bne.n	8016a88 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8016a72:	4b5a      	ldr	r3, [pc, #360]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016a76:	f023 0103 	bic.w	r1, r3, #3
 8016a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016a80:	4a56      	ldr	r2, [pc, #344]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016a82:	430b      	orrs	r3, r1
 8016a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8016a86:	e003      	b.n	8016a90 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016a88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016a8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8016a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a98:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8016a9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8016aa6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8016aaa:	460b      	mov	r3, r1
 8016aac:	4313      	orrs	r3, r2
 8016aae:	f000 809f 	beq.w	8016bf0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8016ab2:	4b4b      	ldr	r3, [pc, #300]	@ (8016be0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	4a4a      	ldr	r2, [pc, #296]	@ (8016be0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8016ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016abc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8016abe:	f7fb f86d 	bl	8011b9c <HAL_GetTick>
 8016ac2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8016ac6:	e00b      	b.n	8016ae0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8016ac8:	f7fb f868 	bl	8011b9c <HAL_GetTick>
 8016acc:	4602      	mov	r2, r0
 8016ace:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8016ad2:	1ad3      	subs	r3, r2, r3
 8016ad4:	2b64      	cmp	r3, #100	@ 0x64
 8016ad6:	d903      	bls.n	8016ae0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8016ad8:	2303      	movs	r3, #3
 8016ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016ade:	e005      	b.n	8016aec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8016ae0:	4b3f      	ldr	r3, [pc, #252]	@ (8016be0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d0ed      	beq.n	8016ac8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8016aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d179      	bne.n	8016be8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8016af4:	4b39      	ldr	r3, [pc, #228]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016af6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8016af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016afc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8016b00:	4053      	eors	r3, r2
 8016b02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d015      	beq.n	8016b36 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8016b0a:	4b34      	ldr	r3, [pc, #208]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016b12:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8016b16:	4b31      	ldr	r3, [pc, #196]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b1a:	4a30      	ldr	r2, [pc, #192]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8016b20:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8016b22:	4b2e      	ldr	r3, [pc, #184]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b26:	4a2d      	ldr	r2, [pc, #180]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016b28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8016b2c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8016b2e:	4a2b      	ldr	r2, [pc, #172]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016b30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016b34:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8016b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016b3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8016b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016b42:	d118      	bne.n	8016b76 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016b44:	f7fb f82a 	bl	8011b9c <HAL_GetTick>
 8016b48:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8016b4c:	e00d      	b.n	8016b6a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016b4e:	f7fb f825 	bl	8011b9c <HAL_GetTick>
 8016b52:	4602      	mov	r2, r0
 8016b54:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8016b58:	1ad2      	subs	r2, r2, r3
 8016b5a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8016b5e:	429a      	cmp	r2, r3
 8016b60:	d903      	bls.n	8016b6a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8016b62:	2303      	movs	r3, #3
 8016b64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8016b68:	e005      	b.n	8016b76 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8016b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b6e:	f003 0302 	and.w	r3, r3, #2
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d0eb      	beq.n	8016b4e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8016b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d129      	bne.n	8016bd2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8016b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016b82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8016b86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016b8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016b8e:	d10e      	bne.n	8016bae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8016b90:	4b12      	ldr	r3, [pc, #72]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016b92:	691b      	ldr	r3, [r3, #16]
 8016b94:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8016b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016b9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8016ba0:	091a      	lsrs	r2, r3, #4
 8016ba2:	4b10      	ldr	r3, [pc, #64]	@ (8016be4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8016ba4:	4013      	ands	r3, r2
 8016ba6:	4a0d      	ldr	r2, [pc, #52]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016ba8:	430b      	orrs	r3, r1
 8016baa:	6113      	str	r3, [r2, #16]
 8016bac:	e005      	b.n	8016bba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8016bae:	4b0b      	ldr	r3, [pc, #44]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016bb0:	691b      	ldr	r3, [r3, #16]
 8016bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016bb4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8016bb8:	6113      	str	r3, [r2, #16]
 8016bba:	4b08      	ldr	r3, [pc, #32]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016bbc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8016bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016bc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8016bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016bca:	4a04      	ldr	r2, [pc, #16]	@ (8016bdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016bcc:	430b      	orrs	r3, r1
 8016bce:	6713      	str	r3, [r2, #112]	@ 0x70
 8016bd0:	e00e      	b.n	8016bf0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8016bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016bd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8016bda:	e009      	b.n	8016bf0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8016bdc:	58024400 	.word	0x58024400
 8016be0:	58024800 	.word	0x58024800
 8016be4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016be8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016bec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8016bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bf8:	f002 0301 	and.w	r3, r2, #1
 8016bfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8016c00:	2300      	movs	r3, #0
 8016c02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8016c06:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8016c0a:	460b      	mov	r3, r1
 8016c0c:	4313      	orrs	r3, r2
 8016c0e:	f000 8089 	beq.w	8016d24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8016c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016c16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016c18:	2b28      	cmp	r3, #40	@ 0x28
 8016c1a:	d86b      	bhi.n	8016cf4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8016c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8016c24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8016c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c22:	bf00      	nop
 8016c24:	08016cfd 	.word	0x08016cfd
 8016c28:	08016cf5 	.word	0x08016cf5
 8016c2c:	08016cf5 	.word	0x08016cf5
 8016c30:	08016cf5 	.word	0x08016cf5
 8016c34:	08016cf5 	.word	0x08016cf5
 8016c38:	08016cf5 	.word	0x08016cf5
 8016c3c:	08016cf5 	.word	0x08016cf5
 8016c40:	08016cf5 	.word	0x08016cf5
 8016c44:	08016cc9 	.word	0x08016cc9
 8016c48:	08016cf5 	.word	0x08016cf5
 8016c4c:	08016cf5 	.word	0x08016cf5
 8016c50:	08016cf5 	.word	0x08016cf5
 8016c54:	08016cf5 	.word	0x08016cf5
 8016c58:	08016cf5 	.word	0x08016cf5
 8016c5c:	08016cf5 	.word	0x08016cf5
 8016c60:	08016cf5 	.word	0x08016cf5
 8016c64:	08016cdf 	.word	0x08016cdf
 8016c68:	08016cf5 	.word	0x08016cf5
 8016c6c:	08016cf5 	.word	0x08016cf5
 8016c70:	08016cf5 	.word	0x08016cf5
 8016c74:	08016cf5 	.word	0x08016cf5
 8016c78:	08016cf5 	.word	0x08016cf5
 8016c7c:	08016cf5 	.word	0x08016cf5
 8016c80:	08016cf5 	.word	0x08016cf5
 8016c84:	08016cfd 	.word	0x08016cfd
 8016c88:	08016cf5 	.word	0x08016cf5
 8016c8c:	08016cf5 	.word	0x08016cf5
 8016c90:	08016cf5 	.word	0x08016cf5
 8016c94:	08016cf5 	.word	0x08016cf5
 8016c98:	08016cf5 	.word	0x08016cf5
 8016c9c:	08016cf5 	.word	0x08016cf5
 8016ca0:	08016cf5 	.word	0x08016cf5
 8016ca4:	08016cfd 	.word	0x08016cfd
 8016ca8:	08016cf5 	.word	0x08016cf5
 8016cac:	08016cf5 	.word	0x08016cf5
 8016cb0:	08016cf5 	.word	0x08016cf5
 8016cb4:	08016cf5 	.word	0x08016cf5
 8016cb8:	08016cf5 	.word	0x08016cf5
 8016cbc:	08016cf5 	.word	0x08016cf5
 8016cc0:	08016cf5 	.word	0x08016cf5
 8016cc4:	08016cfd 	.word	0x08016cfd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8016cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016ccc:	3308      	adds	r3, #8
 8016cce:	2101      	movs	r1, #1
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f001 fe95 	bl	8018a00 <RCCEx_PLL2_Config>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8016cdc:	e00f      	b.n	8016cfe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8016cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016ce2:	3328      	adds	r3, #40	@ 0x28
 8016ce4:	2101      	movs	r1, #1
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	f001 ff3c 	bl	8018b64 <RCCEx_PLL3_Config>
 8016cec:	4603      	mov	r3, r0
 8016cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8016cf2:	e004      	b.n	8016cfe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016cf4:	2301      	movs	r3, #1
 8016cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016cfa:	e000      	b.n	8016cfe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8016cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d10a      	bne.n	8016d1c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8016d06:	4bbf      	ldr	r3, [pc, #764]	@ (8017004 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8016d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016d0a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8016d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016d12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016d14:	4abb      	ldr	r2, [pc, #748]	@ (8017004 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8016d16:	430b      	orrs	r3, r1
 8016d18:	6553      	str	r3, [r2, #84]	@ 0x54
 8016d1a:	e003      	b.n	8016d24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016d20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8016d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d2c:	f002 0302 	and.w	r3, r2, #2
 8016d30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8016d34:	2300      	movs	r3, #0
 8016d36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8016d3a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8016d3e:	460b      	mov	r3, r1
 8016d40:	4313      	orrs	r3, r2
 8016d42:	d041      	beq.n	8016dc8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8016d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016d48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016d4a:	2b05      	cmp	r3, #5
 8016d4c:	d824      	bhi.n	8016d98 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8016d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8016d54 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8016d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d54:	08016da1 	.word	0x08016da1
 8016d58:	08016d6d 	.word	0x08016d6d
 8016d5c:	08016d83 	.word	0x08016d83
 8016d60:	08016da1 	.word	0x08016da1
 8016d64:	08016da1 	.word	0x08016da1
 8016d68:	08016da1 	.word	0x08016da1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8016d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016d70:	3308      	adds	r3, #8
 8016d72:	2101      	movs	r1, #1
 8016d74:	4618      	mov	r0, r3
 8016d76:	f001 fe43 	bl	8018a00 <RCCEx_PLL2_Config>
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8016d80:	e00f      	b.n	8016da2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8016d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016d86:	3328      	adds	r3, #40	@ 0x28
 8016d88:	2101      	movs	r1, #1
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	f001 feea 	bl	8018b64 <RCCEx_PLL3_Config>
 8016d90:	4603      	mov	r3, r0
 8016d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8016d96:	e004      	b.n	8016da2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016d98:	2301      	movs	r3, #1
 8016d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016d9e:	e000      	b.n	8016da2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8016da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d10a      	bne.n	8016dc0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8016daa:	4b96      	ldr	r3, [pc, #600]	@ (8017004 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8016dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016dae:	f023 0107 	bic.w	r1, r3, #7
 8016db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016db6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016db8:	4a92      	ldr	r2, [pc, #584]	@ (8017004 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8016dba:	430b      	orrs	r3, r1
 8016dbc:	6553      	str	r3, [r2, #84]	@ 0x54
 8016dbe:	e003      	b.n	8016dc8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016dc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8016dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dd0:	f002 0304 	and.w	r3, r2, #4
 8016dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8016dd8:	2300      	movs	r3, #0
 8016dda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8016dde:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8016de2:	460b      	mov	r3, r1
 8016de4:	4313      	orrs	r3, r2
 8016de6:	d044      	beq.n	8016e72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8016de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8016df0:	2b05      	cmp	r3, #5
 8016df2:	d825      	bhi.n	8016e40 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8016df4:	a201      	add	r2, pc, #4	@ (adr r2, 8016dfc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8016df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016dfa:	bf00      	nop
 8016dfc:	08016e49 	.word	0x08016e49
 8016e00:	08016e15 	.word	0x08016e15
 8016e04:	08016e2b 	.word	0x08016e2b
 8016e08:	08016e49 	.word	0x08016e49
 8016e0c:	08016e49 	.word	0x08016e49
 8016e10:	08016e49 	.word	0x08016e49
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8016e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016e18:	3308      	adds	r3, #8
 8016e1a:	2101      	movs	r1, #1
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	f001 fdef 	bl	8018a00 <RCCEx_PLL2_Config>
 8016e22:	4603      	mov	r3, r0
 8016e24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8016e28:	e00f      	b.n	8016e4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8016e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016e2e:	3328      	adds	r3, #40	@ 0x28
 8016e30:	2101      	movs	r1, #1
 8016e32:	4618      	mov	r0, r3
 8016e34:	f001 fe96 	bl	8018b64 <RCCEx_PLL3_Config>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8016e3e:	e004      	b.n	8016e4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016e40:	2301      	movs	r3, #1
 8016e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016e46:	e000      	b.n	8016e4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8016e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d10b      	bne.n	8016e6a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8016e52:	4b6c      	ldr	r3, [pc, #432]	@ (8017004 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8016e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016e56:	f023 0107 	bic.w	r1, r3, #7
 8016e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8016e62:	4a68      	ldr	r2, [pc, #416]	@ (8017004 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8016e64:	430b      	orrs	r3, r1
 8016e66:	6593      	str	r3, [r2, #88]	@ 0x58
 8016e68:	e003      	b.n	8016e72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016e6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8016e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e7a:	f002 0320 	and.w	r3, r2, #32
 8016e7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8016e82:	2300      	movs	r3, #0
 8016e84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8016e88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8016e8c:	460b      	mov	r3, r1
 8016e8e:	4313      	orrs	r3, r2
 8016e90:	d055      	beq.n	8016f3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8016e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8016e9e:	d033      	beq.n	8016f08 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8016ea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8016ea4:	d82c      	bhi.n	8016f00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8016ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016eaa:	d02f      	beq.n	8016f0c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8016eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016eb0:	d826      	bhi.n	8016f00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8016eb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8016eb6:	d02b      	beq.n	8016f10 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8016eb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8016ebc:	d820      	bhi.n	8016f00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8016ebe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016ec2:	d012      	beq.n	8016eea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8016ec4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016ec8:	d81a      	bhi.n	8016f00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d022      	beq.n	8016f14 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8016ece:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016ed2:	d115      	bne.n	8016f00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8016ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016ed8:	3308      	adds	r3, #8
 8016eda:	2100      	movs	r1, #0
 8016edc:	4618      	mov	r0, r3
 8016ede:	f001 fd8f 	bl	8018a00 <RCCEx_PLL2_Config>
 8016ee2:	4603      	mov	r3, r0
 8016ee4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8016ee8:	e015      	b.n	8016f16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8016eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016eee:	3328      	adds	r3, #40	@ 0x28
 8016ef0:	2102      	movs	r1, #2
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	f001 fe36 	bl	8018b64 <RCCEx_PLL3_Config>
 8016ef8:	4603      	mov	r3, r0
 8016efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8016efe:	e00a      	b.n	8016f16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016f00:	2301      	movs	r3, #1
 8016f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016f06:	e006      	b.n	8016f16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8016f08:	bf00      	nop
 8016f0a:	e004      	b.n	8016f16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8016f0c:	bf00      	nop
 8016f0e:	e002      	b.n	8016f16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8016f10:	bf00      	nop
 8016f12:	e000      	b.n	8016f16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8016f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d10b      	bne.n	8016f36 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8016f1e:	4b39      	ldr	r3, [pc, #228]	@ (8017004 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8016f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016f22:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8016f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016f2e:	4a35      	ldr	r2, [pc, #212]	@ (8017004 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8016f30:	430b      	orrs	r3, r1
 8016f32:	6553      	str	r3, [r2, #84]	@ 0x54
 8016f34:	e003      	b.n	8016f3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016f3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8016f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f46:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8016f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8016f4e:	2300      	movs	r3, #0
 8016f50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8016f54:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8016f58:	460b      	mov	r3, r1
 8016f5a:	4313      	orrs	r3, r2
 8016f5c:	d058      	beq.n	8017010 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8016f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8016f66:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8016f6a:	d033      	beq.n	8016fd4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8016f6c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8016f70:	d82c      	bhi.n	8016fcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8016f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016f76:	d02f      	beq.n	8016fd8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8016f78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016f7c:	d826      	bhi.n	8016fcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8016f7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8016f82:	d02b      	beq.n	8016fdc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8016f84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8016f88:	d820      	bhi.n	8016fcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8016f8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016f8e:	d012      	beq.n	8016fb6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8016f90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016f94:	d81a      	bhi.n	8016fcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d022      	beq.n	8016fe0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8016f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016f9e:	d115      	bne.n	8016fcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8016fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016fa4:	3308      	adds	r3, #8
 8016fa6:	2100      	movs	r1, #0
 8016fa8:	4618      	mov	r0, r3
 8016faa:	f001 fd29 	bl	8018a00 <RCCEx_PLL2_Config>
 8016fae:	4603      	mov	r3, r0
 8016fb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8016fb4:	e015      	b.n	8016fe2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8016fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016fba:	3328      	adds	r3, #40	@ 0x28
 8016fbc:	2102      	movs	r1, #2
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	f001 fdd0 	bl	8018b64 <RCCEx_PLL3_Config>
 8016fc4:	4603      	mov	r3, r0
 8016fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8016fca:	e00a      	b.n	8016fe2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016fcc:	2301      	movs	r3, #1
 8016fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016fd2:	e006      	b.n	8016fe2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8016fd4:	bf00      	nop
 8016fd6:	e004      	b.n	8016fe2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8016fd8:	bf00      	nop
 8016fda:	e002      	b.n	8016fe2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8016fdc:	bf00      	nop
 8016fde:	e000      	b.n	8016fe2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8016fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d10e      	bne.n	8017008 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8016fea:	4b06      	ldr	r3, [pc, #24]	@ (8017004 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8016fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016fee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8016ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8016ffa:	4a02      	ldr	r2, [pc, #8]	@ (8017004 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8016ffc:	430b      	orrs	r3, r1
 8016ffe:	6593      	str	r3, [r2, #88]	@ 0x58
 8017000:	e006      	b.n	8017010 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8017002:	bf00      	nop
 8017004:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017008:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801700c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8017010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017018:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801701c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8017020:	2300      	movs	r3, #0
 8017022:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8017026:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801702a:	460b      	mov	r3, r1
 801702c:	4313      	orrs	r3, r2
 801702e:	d055      	beq.n	80170dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8017030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017034:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8017038:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801703c:	d033      	beq.n	80170a6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801703e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8017042:	d82c      	bhi.n	801709e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8017044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017048:	d02f      	beq.n	80170aa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801704a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801704e:	d826      	bhi.n	801709e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8017050:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8017054:	d02b      	beq.n	80170ae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8017056:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801705a:	d820      	bhi.n	801709e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801705c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017060:	d012      	beq.n	8017088 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8017062:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017066:	d81a      	bhi.n	801709e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8017068:	2b00      	cmp	r3, #0
 801706a:	d022      	beq.n	80170b2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801706c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017070:	d115      	bne.n	801709e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8017072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017076:	3308      	adds	r3, #8
 8017078:	2100      	movs	r1, #0
 801707a:	4618      	mov	r0, r3
 801707c:	f001 fcc0 	bl	8018a00 <RCCEx_PLL2_Config>
 8017080:	4603      	mov	r3, r0
 8017082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8017086:	e015      	b.n	80170b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8017088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801708c:	3328      	adds	r3, #40	@ 0x28
 801708e:	2102      	movs	r1, #2
 8017090:	4618      	mov	r0, r3
 8017092:	f001 fd67 	bl	8018b64 <RCCEx_PLL3_Config>
 8017096:	4603      	mov	r3, r0
 8017098:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801709c:	e00a      	b.n	80170b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801709e:	2301      	movs	r3, #1
 80170a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80170a4:	e006      	b.n	80170b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80170a6:	bf00      	nop
 80170a8:	e004      	b.n	80170b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80170aa:	bf00      	nop
 80170ac:	e002      	b.n	80170b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80170ae:	bf00      	nop
 80170b0:	e000      	b.n	80170b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80170b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80170b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d10b      	bne.n	80170d4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80170bc:	4ba1      	ldr	r3, [pc, #644]	@ (8017344 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80170be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80170c0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80170c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80170c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80170cc:	4a9d      	ldr	r2, [pc, #628]	@ (8017344 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80170ce:	430b      	orrs	r3, r1
 80170d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80170d2:	e003      	b.n	80170dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80170d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80170d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80170dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80170e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170e4:	f002 0308 	and.w	r3, r2, #8
 80170e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80170ec:	2300      	movs	r3, #0
 80170ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80170f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80170f6:	460b      	mov	r3, r1
 80170f8:	4313      	orrs	r3, r2
 80170fa:	d01e      	beq.n	801713a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80170fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017100:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017108:	d10c      	bne.n	8017124 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801710a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801710e:	3328      	adds	r3, #40	@ 0x28
 8017110:	2102      	movs	r1, #2
 8017112:	4618      	mov	r0, r3
 8017114:	f001 fd26 	bl	8018b64 <RCCEx_PLL3_Config>
 8017118:	4603      	mov	r3, r0
 801711a:	2b00      	cmp	r3, #0
 801711c:	d002      	beq.n	8017124 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801711e:	2301      	movs	r3, #1
 8017120:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8017124:	4b87      	ldr	r3, [pc, #540]	@ (8017344 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8017126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017128:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801712c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017130:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017134:	4a83      	ldr	r2, [pc, #524]	@ (8017344 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8017136:	430b      	orrs	r3, r1
 8017138:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801713a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801713e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017142:	f002 0310 	and.w	r3, r2, #16
 8017146:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801714a:	2300      	movs	r3, #0
 801714c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8017150:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8017154:	460b      	mov	r3, r1
 8017156:	4313      	orrs	r3, r2
 8017158:	d01e      	beq.n	8017198 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801715a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801715e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8017162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017166:	d10c      	bne.n	8017182 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8017168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801716c:	3328      	adds	r3, #40	@ 0x28
 801716e:	2102      	movs	r1, #2
 8017170:	4618      	mov	r0, r3
 8017172:	f001 fcf7 	bl	8018b64 <RCCEx_PLL3_Config>
 8017176:	4603      	mov	r3, r0
 8017178:	2b00      	cmp	r3, #0
 801717a:	d002      	beq.n	8017182 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801717c:	2301      	movs	r3, #1
 801717e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8017182:	4b70      	ldr	r3, [pc, #448]	@ (8017344 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8017184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017186:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801718a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801718e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8017192:	4a6c      	ldr	r2, [pc, #432]	@ (8017344 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8017194:	430b      	orrs	r3, r1
 8017196:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8017198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801719c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171a0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80171a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80171a8:	2300      	movs	r3, #0
 80171aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80171ae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80171b2:	460b      	mov	r3, r1
 80171b4:	4313      	orrs	r3, r2
 80171b6:	d03e      	beq.n	8017236 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80171b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80171bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80171c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80171c4:	d022      	beq.n	801720c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80171c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80171ca:	d81b      	bhi.n	8017204 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d003      	beq.n	80171d8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80171d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80171d4:	d00b      	beq.n	80171ee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80171d6:	e015      	b.n	8017204 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80171d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80171dc:	3308      	adds	r3, #8
 80171de:	2100      	movs	r1, #0
 80171e0:	4618      	mov	r0, r3
 80171e2:	f001 fc0d 	bl	8018a00 <RCCEx_PLL2_Config>
 80171e6:	4603      	mov	r3, r0
 80171e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80171ec:	e00f      	b.n	801720e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80171ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80171f2:	3328      	adds	r3, #40	@ 0x28
 80171f4:	2102      	movs	r1, #2
 80171f6:	4618      	mov	r0, r3
 80171f8:	f001 fcb4 	bl	8018b64 <RCCEx_PLL3_Config>
 80171fc:	4603      	mov	r3, r0
 80171fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8017202:	e004      	b.n	801720e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8017204:	2301      	movs	r3, #1
 8017206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801720a:	e000      	b.n	801720e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801720c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801720e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017212:	2b00      	cmp	r3, #0
 8017214:	d10b      	bne.n	801722e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8017216:	4b4b      	ldr	r3, [pc, #300]	@ (8017344 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8017218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801721a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801721e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017222:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8017226:	4a47      	ldr	r2, [pc, #284]	@ (8017344 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8017228:	430b      	orrs	r3, r1
 801722a:	6593      	str	r3, [r2, #88]	@ 0x58
 801722c:	e003      	b.n	8017236 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801722e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017232:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8017236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801723e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8017242:	67bb      	str	r3, [r7, #120]	@ 0x78
 8017244:	2300      	movs	r3, #0
 8017246:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8017248:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801724c:	460b      	mov	r3, r1
 801724e:	4313      	orrs	r3, r2
 8017250:	d03b      	beq.n	80172ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8017252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801725a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801725e:	d01f      	beq.n	80172a0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8017260:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8017264:	d818      	bhi.n	8017298 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8017266:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801726a:	d003      	beq.n	8017274 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801726c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8017270:	d007      	beq.n	8017282 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8017272:	e011      	b.n	8017298 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8017274:	4b33      	ldr	r3, [pc, #204]	@ (8017344 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8017276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017278:	4a32      	ldr	r2, [pc, #200]	@ (8017344 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801727a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801727e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8017280:	e00f      	b.n	80172a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8017282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017286:	3328      	adds	r3, #40	@ 0x28
 8017288:	2101      	movs	r1, #1
 801728a:	4618      	mov	r0, r3
 801728c:	f001 fc6a 	bl	8018b64 <RCCEx_PLL3_Config>
 8017290:	4603      	mov	r3, r0
 8017292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8017296:	e004      	b.n	80172a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8017298:	2301      	movs	r3, #1
 801729a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801729e:	e000      	b.n	80172a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80172a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80172a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d10b      	bne.n	80172c2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80172aa:	4b26      	ldr	r3, [pc, #152]	@ (8017344 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80172ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80172ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80172b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80172b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80172ba:	4a22      	ldr	r2, [pc, #136]	@ (8017344 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80172bc:	430b      	orrs	r3, r1
 80172be:	6553      	str	r3, [r2, #84]	@ 0x54
 80172c0:	e003      	b.n	80172ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80172c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80172c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80172ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80172ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172d2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80172d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80172d8:	2300      	movs	r3, #0
 80172da:	677b      	str	r3, [r7, #116]	@ 0x74
 80172dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80172e0:	460b      	mov	r3, r1
 80172e2:	4313      	orrs	r3, r2
 80172e4:	d034      	beq.n	8017350 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80172e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80172ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d003      	beq.n	80172f8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80172f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80172f4:	d007      	beq.n	8017306 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80172f6:	e011      	b.n	801731c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80172f8:	4b12      	ldr	r3, [pc, #72]	@ (8017344 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80172fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80172fc:	4a11      	ldr	r2, [pc, #68]	@ (8017344 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80172fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8017302:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8017304:	e00e      	b.n	8017324 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8017306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801730a:	3308      	adds	r3, #8
 801730c:	2102      	movs	r1, #2
 801730e:	4618      	mov	r0, r3
 8017310:	f001 fb76 	bl	8018a00 <RCCEx_PLL2_Config>
 8017314:	4603      	mov	r3, r0
 8017316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801731a:	e003      	b.n	8017324 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801731c:	2301      	movs	r3, #1
 801731e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8017322:	bf00      	nop
    }

    if (ret == HAL_OK)
 8017324:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017328:	2b00      	cmp	r3, #0
 801732a:	d10d      	bne.n	8017348 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801732c:	4b05      	ldr	r3, [pc, #20]	@ (8017344 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801732e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017330:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8017334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801733a:	4a02      	ldr	r2, [pc, #8]	@ (8017344 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801733c:	430b      	orrs	r3, r1
 801733e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8017340:	e006      	b.n	8017350 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8017342:	bf00      	nop
 8017344:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801734c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8017350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017358:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801735c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801735e:	2300      	movs	r3, #0
 8017360:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8017362:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8017366:	460b      	mov	r3, r1
 8017368:	4313      	orrs	r3, r2
 801736a:	d00c      	beq.n	8017386 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801736c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017370:	3328      	adds	r3, #40	@ 0x28
 8017372:	2102      	movs	r1, #2
 8017374:	4618      	mov	r0, r3
 8017376:	f001 fbf5 	bl	8018b64 <RCCEx_PLL3_Config>
 801737a:	4603      	mov	r3, r0
 801737c:	2b00      	cmp	r3, #0
 801737e:	d002      	beq.n	8017386 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8017380:	2301      	movs	r3, #1
 8017382:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8017386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801738e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8017392:	663b      	str	r3, [r7, #96]	@ 0x60
 8017394:	2300      	movs	r3, #0
 8017396:	667b      	str	r3, [r7, #100]	@ 0x64
 8017398:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801739c:	460b      	mov	r3, r1
 801739e:	4313      	orrs	r3, r2
 80173a0:	d038      	beq.n	8017414 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80173a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80173a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80173aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80173ae:	d018      	beq.n	80173e2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80173b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80173b4:	d811      	bhi.n	80173da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80173b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80173ba:	d014      	beq.n	80173e6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80173bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80173c0:	d80b      	bhi.n	80173da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d011      	beq.n	80173ea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80173c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80173ca:	d106      	bne.n	80173da <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80173cc:	4bc3      	ldr	r3, [pc, #780]	@ (80176dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80173ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80173d0:	4ac2      	ldr	r2, [pc, #776]	@ (80176dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80173d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80173d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80173d8:	e008      	b.n	80173ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80173da:	2301      	movs	r3, #1
 80173dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80173e0:	e004      	b.n	80173ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80173e2:	bf00      	nop
 80173e4:	e002      	b.n	80173ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80173e6:	bf00      	nop
 80173e8:	e000      	b.n	80173ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80173ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80173ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d10b      	bne.n	801740c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80173f4:	4bb9      	ldr	r3, [pc, #740]	@ (80176dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80173f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80173f8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80173fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017400:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017404:	4ab5      	ldr	r2, [pc, #724]	@ (80176dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8017406:	430b      	orrs	r3, r1
 8017408:	6553      	str	r3, [r2, #84]	@ 0x54
 801740a:	e003      	b.n	8017414 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801740c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017410:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8017414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801741c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8017420:	65bb      	str	r3, [r7, #88]	@ 0x58
 8017422:	2300      	movs	r3, #0
 8017424:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017426:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801742a:	460b      	mov	r3, r1
 801742c:	4313      	orrs	r3, r2
 801742e:	d009      	beq.n	8017444 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8017430:	4baa      	ldr	r3, [pc, #680]	@ (80176dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8017432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017434:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8017438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801743c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801743e:	4aa7      	ldr	r2, [pc, #668]	@ (80176dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8017440:	430b      	orrs	r3, r1
 8017442:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8017444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801744c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8017450:	653b      	str	r3, [r7, #80]	@ 0x50
 8017452:	2300      	movs	r3, #0
 8017454:	657b      	str	r3, [r7, #84]	@ 0x54
 8017456:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801745a:	460b      	mov	r3, r1
 801745c:	4313      	orrs	r3, r2
 801745e:	d00a      	beq.n	8017476 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8017460:	4b9e      	ldr	r3, [pc, #632]	@ (80176dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8017462:	691b      	ldr	r3, [r3, #16]
 8017464:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8017468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801746c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017470:	4a9a      	ldr	r2, [pc, #616]	@ (80176dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8017472:	430b      	orrs	r3, r1
 8017474:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8017476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801747e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8017482:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017484:	2300      	movs	r3, #0
 8017486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017488:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801748c:	460b      	mov	r3, r1
 801748e:	4313      	orrs	r3, r2
 8017490:	d009      	beq.n	80174a6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8017492:	4b92      	ldr	r3, [pc, #584]	@ (80176dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8017494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017496:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801749a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801749e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80174a0:	4a8e      	ldr	r2, [pc, #568]	@ (80176dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80174a2:	430b      	orrs	r3, r1
 80174a4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80174a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80174aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174ae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80174b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80174b4:	2300      	movs	r3, #0
 80174b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80174b8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80174bc:	460b      	mov	r3, r1
 80174be:	4313      	orrs	r3, r2
 80174c0:	d00e      	beq.n	80174e0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80174c2:	4b86      	ldr	r3, [pc, #536]	@ (80176dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80174c4:	691b      	ldr	r3, [r3, #16]
 80174c6:	4a85      	ldr	r2, [pc, #532]	@ (80176dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80174c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80174cc:	6113      	str	r3, [r2, #16]
 80174ce:	4b83      	ldr	r3, [pc, #524]	@ (80176dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80174d0:	6919      	ldr	r1, [r3, #16]
 80174d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80174d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80174da:	4a80      	ldr	r2, [pc, #512]	@ (80176dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80174dc:	430b      	orrs	r3, r1
 80174de:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80174e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80174e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174e8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80174ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80174ee:	2300      	movs	r3, #0
 80174f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80174f2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80174f6:	460b      	mov	r3, r1
 80174f8:	4313      	orrs	r3, r2
 80174fa:	d009      	beq.n	8017510 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80174fc:	4b77      	ldr	r3, [pc, #476]	@ (80176dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80174fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017500:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8017504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801750a:	4a74      	ldr	r2, [pc, #464]	@ (80176dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801750c:	430b      	orrs	r3, r1
 801750e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8017510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017518:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801751c:	633b      	str	r3, [r7, #48]	@ 0x30
 801751e:	2300      	movs	r3, #0
 8017520:	637b      	str	r3, [r7, #52]	@ 0x34
 8017522:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8017526:	460b      	mov	r3, r1
 8017528:	4313      	orrs	r3, r2
 801752a:	d00a      	beq.n	8017542 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801752c:	4b6b      	ldr	r3, [pc, #428]	@ (80176dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801752e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017530:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8017534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017538:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801753c:	4a67      	ldr	r2, [pc, #412]	@ (80176dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801753e:	430b      	orrs	r3, r1
 8017540:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8017542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801754a:	2100      	movs	r1, #0
 801754c:	62b9      	str	r1, [r7, #40]	@ 0x28
 801754e:	f003 0301 	and.w	r3, r3, #1
 8017552:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017554:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8017558:	460b      	mov	r3, r1
 801755a:	4313      	orrs	r3, r2
 801755c:	d011      	beq.n	8017582 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801755e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017562:	3308      	adds	r3, #8
 8017564:	2100      	movs	r1, #0
 8017566:	4618      	mov	r0, r3
 8017568:	f001 fa4a 	bl	8018a00 <RCCEx_PLL2_Config>
 801756c:	4603      	mov	r3, r0
 801756e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8017572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017576:	2b00      	cmp	r3, #0
 8017578:	d003      	beq.n	8017582 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801757a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801757e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8017582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801758a:	2100      	movs	r1, #0
 801758c:	6239      	str	r1, [r7, #32]
 801758e:	f003 0302 	and.w	r3, r3, #2
 8017592:	627b      	str	r3, [r7, #36]	@ 0x24
 8017594:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8017598:	460b      	mov	r3, r1
 801759a:	4313      	orrs	r3, r2
 801759c:	d011      	beq.n	80175c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801759e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80175a2:	3308      	adds	r3, #8
 80175a4:	2101      	movs	r1, #1
 80175a6:	4618      	mov	r0, r3
 80175a8:	f001 fa2a 	bl	8018a00 <RCCEx_PLL2_Config>
 80175ac:	4603      	mov	r3, r0
 80175ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80175b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d003      	beq.n	80175c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80175ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80175be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80175c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80175c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175ca:	2100      	movs	r1, #0
 80175cc:	61b9      	str	r1, [r7, #24]
 80175ce:	f003 0304 	and.w	r3, r3, #4
 80175d2:	61fb      	str	r3, [r7, #28]
 80175d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80175d8:	460b      	mov	r3, r1
 80175da:	4313      	orrs	r3, r2
 80175dc:	d011      	beq.n	8017602 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80175de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80175e2:	3308      	adds	r3, #8
 80175e4:	2102      	movs	r1, #2
 80175e6:	4618      	mov	r0, r3
 80175e8:	f001 fa0a 	bl	8018a00 <RCCEx_PLL2_Config>
 80175ec:	4603      	mov	r3, r0
 80175ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80175f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d003      	beq.n	8017602 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80175fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80175fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8017602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801760a:	2100      	movs	r1, #0
 801760c:	6139      	str	r1, [r7, #16]
 801760e:	f003 0308 	and.w	r3, r3, #8
 8017612:	617b      	str	r3, [r7, #20]
 8017614:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8017618:	460b      	mov	r3, r1
 801761a:	4313      	orrs	r3, r2
 801761c:	d011      	beq.n	8017642 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801761e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017622:	3328      	adds	r3, #40	@ 0x28
 8017624:	2100      	movs	r1, #0
 8017626:	4618      	mov	r0, r3
 8017628:	f001 fa9c 	bl	8018b64 <RCCEx_PLL3_Config>
 801762c:	4603      	mov	r3, r0
 801762e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8017632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017636:	2b00      	cmp	r3, #0
 8017638:	d003      	beq.n	8017642 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801763a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801763e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8017642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801764a:	2100      	movs	r1, #0
 801764c:	60b9      	str	r1, [r7, #8]
 801764e:	f003 0310 	and.w	r3, r3, #16
 8017652:	60fb      	str	r3, [r7, #12]
 8017654:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8017658:	460b      	mov	r3, r1
 801765a:	4313      	orrs	r3, r2
 801765c:	d011      	beq.n	8017682 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801765e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017662:	3328      	adds	r3, #40	@ 0x28
 8017664:	2101      	movs	r1, #1
 8017666:	4618      	mov	r0, r3
 8017668:	f001 fa7c 	bl	8018b64 <RCCEx_PLL3_Config>
 801766c:	4603      	mov	r3, r0
 801766e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8017672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017676:	2b00      	cmp	r3, #0
 8017678:	d003      	beq.n	8017682 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801767a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801767e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8017682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801768a:	2100      	movs	r1, #0
 801768c:	6039      	str	r1, [r7, #0]
 801768e:	f003 0320 	and.w	r3, r3, #32
 8017692:	607b      	str	r3, [r7, #4]
 8017694:	e9d7 1200 	ldrd	r1, r2, [r7]
 8017698:	460b      	mov	r3, r1
 801769a:	4313      	orrs	r3, r2
 801769c:	d011      	beq.n	80176c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801769e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80176a2:	3328      	adds	r3, #40	@ 0x28
 80176a4:	2102      	movs	r1, #2
 80176a6:	4618      	mov	r0, r3
 80176a8:	f001 fa5c 	bl	8018b64 <RCCEx_PLL3_Config>
 80176ac:	4603      	mov	r3, r0
 80176ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80176b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d003      	beq.n	80176c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80176ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80176be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80176c2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d101      	bne.n	80176ce <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80176ca:	2300      	movs	r3, #0
 80176cc:	e000      	b.n	80176d0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80176ce:	2301      	movs	r3, #1
}
 80176d0:	4618      	mov	r0, r3
 80176d2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80176d6:	46bd      	mov	sp, r7
 80176d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80176dc:	58024400 	.word	0x58024400

080176e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80176e0:	b580      	push	{r7, lr}
 80176e2:	b090      	sub	sp, #64	@ 0x40
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80176ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80176ee:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80176f2:	430b      	orrs	r3, r1
 80176f4:	f040 8094 	bne.w	8017820 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80176f8:	4b9e      	ldr	r3, [pc, #632]	@ (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80176fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80176fc:	f003 0307 	and.w	r3, r3, #7
 8017700:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8017702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017704:	2b04      	cmp	r3, #4
 8017706:	f200 8087 	bhi.w	8017818 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801770a:	a201      	add	r2, pc, #4	@ (adr r2, 8017710 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 801770c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017710:	08017725 	.word	0x08017725
 8017714:	0801774d 	.word	0x0801774d
 8017718:	08017775 	.word	0x08017775
 801771c:	08017811 	.word	0x08017811
 8017720:	0801779d 	.word	0x0801779d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8017724:	4b93      	ldr	r3, [pc, #588]	@ (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801772c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017730:	d108      	bne.n	8017744 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8017732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017736:	4618      	mov	r0, r3
 8017738:	f001 f810 	bl	801875c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801773c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801773e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017740:	f000 bd45 	b.w	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017744:	2300      	movs	r3, #0
 8017746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017748:	f000 bd41 	b.w	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801774c:	4b89      	ldr	r3, [pc, #548]	@ (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017754:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017758:	d108      	bne.n	801776c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801775a:	f107 0318 	add.w	r3, r7, #24
 801775e:	4618      	mov	r0, r3
 8017760:	f000 fd54 	bl	801820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8017764:	69bb      	ldr	r3, [r7, #24]
 8017766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017768:	f000 bd31 	b.w	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801776c:	2300      	movs	r3, #0
 801776e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017770:	f000 bd2d 	b.w	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8017774:	4b7f      	ldr	r3, [pc, #508]	@ (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801777c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017780:	d108      	bne.n	8017794 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017782:	f107 030c 	add.w	r3, r7, #12
 8017786:	4618      	mov	r0, r3
 8017788:	f000 fe94 	bl	80184b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801778c:	68fb      	ldr	r3, [r7, #12]
 801778e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017790:	f000 bd1d 	b.w	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017794:	2300      	movs	r3, #0
 8017796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017798:	f000 bd19 	b.w	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801779c:	4b75      	ldr	r3, [pc, #468]	@ (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801779e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80177a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80177a4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80177a6:	4b73      	ldr	r3, [pc, #460]	@ (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	f003 0304 	and.w	r3, r3, #4
 80177ae:	2b04      	cmp	r3, #4
 80177b0:	d10c      	bne.n	80177cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80177b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d109      	bne.n	80177cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80177b8:	4b6e      	ldr	r3, [pc, #440]	@ (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	08db      	lsrs	r3, r3, #3
 80177be:	f003 0303 	and.w	r3, r3, #3
 80177c2:	4a6d      	ldr	r2, [pc, #436]	@ (8017978 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80177c4:	fa22 f303 	lsr.w	r3, r2, r3
 80177c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80177ca:	e01f      	b.n	801780c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80177cc:	4b69      	ldr	r3, [pc, #420]	@ (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80177d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80177d8:	d106      	bne.n	80177e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80177da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80177dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80177e0:	d102      	bne.n	80177e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80177e2:	4b66      	ldr	r3, [pc, #408]	@ (801797c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80177e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80177e6:	e011      	b.n	801780c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80177e8:	4b62      	ldr	r3, [pc, #392]	@ (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80177f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80177f4:	d106      	bne.n	8017804 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80177f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80177f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80177fc:	d102      	bne.n	8017804 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80177fe:	4b60      	ldr	r3, [pc, #384]	@ (8017980 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8017800:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017802:	e003      	b.n	801780c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8017804:	2300      	movs	r3, #0
 8017806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8017808:	f000 bce1 	b.w	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801780c:	f000 bcdf 	b.w	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8017810:	4b5c      	ldr	r3, [pc, #368]	@ (8017984 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8017812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017814:	f000 bcdb 	b.w	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8017818:	2300      	movs	r3, #0
 801781a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801781c:	f000 bcd7 	b.w	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8017820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017824:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8017828:	430b      	orrs	r3, r1
 801782a:	f040 80ad 	bne.w	8017988 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 801782e:	4b51      	ldr	r3, [pc, #324]	@ (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017832:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8017836:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8017838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801783a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801783e:	d056      	beq.n	80178ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8017840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017846:	f200 8090 	bhi.w	801796a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801784a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801784c:	2bc0      	cmp	r3, #192	@ 0xc0
 801784e:	f000 8088 	beq.w	8017962 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8017852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017854:	2bc0      	cmp	r3, #192	@ 0xc0
 8017856:	f200 8088 	bhi.w	801796a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801785a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801785c:	2b80      	cmp	r3, #128	@ 0x80
 801785e:	d032      	beq.n	80178c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8017860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017862:	2b80      	cmp	r3, #128	@ 0x80
 8017864:	f200 8081 	bhi.w	801796a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8017868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801786a:	2b00      	cmp	r3, #0
 801786c:	d003      	beq.n	8017876 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 801786e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017870:	2b40      	cmp	r3, #64	@ 0x40
 8017872:	d014      	beq.n	801789e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8017874:	e079      	b.n	801796a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8017876:	4b3f      	ldr	r3, [pc, #252]	@ (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801787e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017882:	d108      	bne.n	8017896 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8017884:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017888:	4618      	mov	r0, r3
 801788a:	f000 ff67 	bl	801875c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801788e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017892:	f000 bc9c 	b.w	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017896:	2300      	movs	r3, #0
 8017898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801789a:	f000 bc98 	b.w	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801789e:	4b35      	ldr	r3, [pc, #212]	@ (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80178a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80178aa:	d108      	bne.n	80178be <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80178ac:	f107 0318 	add.w	r3, r7, #24
 80178b0:	4618      	mov	r0, r3
 80178b2:	f000 fcab 	bl	801820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80178b6:	69bb      	ldr	r3, [r7, #24]
 80178b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80178ba:	f000 bc88 	b.w	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80178be:	2300      	movs	r3, #0
 80178c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80178c2:	f000 bc84 	b.w	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80178c6:	4b2b      	ldr	r3, [pc, #172]	@ (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80178ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80178d2:	d108      	bne.n	80178e6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80178d4:	f107 030c 	add.w	r3, r7, #12
 80178d8:	4618      	mov	r0, r3
 80178da:	f000 fdeb 	bl	80184b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80178e2:	f000 bc74 	b.w	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80178e6:	2300      	movs	r3, #0
 80178e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80178ea:	f000 bc70 	b.w	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80178ee:	4b21      	ldr	r3, [pc, #132]	@ (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80178f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80178f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80178f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80178f8:	4b1e      	ldr	r3, [pc, #120]	@ (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	f003 0304 	and.w	r3, r3, #4
 8017900:	2b04      	cmp	r3, #4
 8017902:	d10c      	bne.n	801791e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8017904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017906:	2b00      	cmp	r3, #0
 8017908:	d109      	bne.n	801791e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801790a:	4b1a      	ldr	r3, [pc, #104]	@ (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	08db      	lsrs	r3, r3, #3
 8017910:	f003 0303 	and.w	r3, r3, #3
 8017914:	4a18      	ldr	r2, [pc, #96]	@ (8017978 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8017916:	fa22 f303 	lsr.w	r3, r2, r3
 801791a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801791c:	e01f      	b.n	801795e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801791e:	4b15      	ldr	r3, [pc, #84]	@ (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801792a:	d106      	bne.n	801793a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 801792c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801792e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017932:	d102      	bne.n	801793a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8017934:	4b11      	ldr	r3, [pc, #68]	@ (801797c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8017936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017938:	e011      	b.n	801795e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801793a:	4b0e      	ldr	r3, [pc, #56]	@ (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017942:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017946:	d106      	bne.n	8017956 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8017948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801794a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801794e:	d102      	bne.n	8017956 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8017950:	4b0b      	ldr	r3, [pc, #44]	@ (8017980 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8017952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017954:	e003      	b.n	801795e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8017956:	2300      	movs	r3, #0
 8017958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801795a:	f000 bc38 	b.w	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801795e:	f000 bc36 	b.w	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8017962:	4b08      	ldr	r3, [pc, #32]	@ (8017984 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8017964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017966:	f000 bc32 	b.w	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801796a:	2300      	movs	r3, #0
 801796c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801796e:	f000 bc2e 	b.w	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8017972:	bf00      	nop
 8017974:	58024400 	.word	0x58024400
 8017978:	03d09000 	.word	0x03d09000
 801797c:	003d0900 	.word	0x003d0900
 8017980:	017d7840 	.word	0x017d7840
 8017984:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8017988:	e9d7 2300 	ldrd	r2, r3, [r7]
 801798c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8017990:	430b      	orrs	r3, r1
 8017992:	f040 809c 	bne.w	8017ace <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8017996:	4b9e      	ldr	r3, [pc, #632]	@ (8017c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801799a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 801799e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80179a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80179a6:	d054      	beq.n	8017a52 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80179a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80179ae:	f200 808b 	bhi.w	8017ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80179b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80179b8:	f000 8083 	beq.w	8017ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80179bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80179c2:	f200 8081 	bhi.w	8017ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80179c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80179cc:	d02f      	beq.n	8017a2e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80179ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80179d4:	d878      	bhi.n	8017ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80179d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d004      	beq.n	80179e6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80179dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80179e2:	d012      	beq.n	8017a0a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80179e4:	e070      	b.n	8017ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80179e6:	4b8a      	ldr	r3, [pc, #552]	@ (8017c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80179ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80179f2:	d107      	bne.n	8017a04 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80179f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80179f8:	4618      	mov	r0, r3
 80179fa:	f000 feaf 	bl	801875c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80179fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017a02:	e3e4      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017a04:	2300      	movs	r3, #0
 8017a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017a08:	e3e1      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8017a0a:	4b81      	ldr	r3, [pc, #516]	@ (8017c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017a12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017a16:	d107      	bne.n	8017a28 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017a18:	f107 0318 	add.w	r3, r7, #24
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	f000 fbf5 	bl	801820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8017a22:	69bb      	ldr	r3, [r7, #24]
 8017a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017a26:	e3d2      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017a28:	2300      	movs	r3, #0
 8017a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017a2c:	e3cf      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8017a2e:	4b78      	ldr	r3, [pc, #480]	@ (8017c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8017a36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017a3a:	d107      	bne.n	8017a4c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017a3c:	f107 030c 	add.w	r3, r7, #12
 8017a40:	4618      	mov	r0, r3
 8017a42:	f000 fd37 	bl	80184b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017a4a:	e3c0      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017a4c:	2300      	movs	r3, #0
 8017a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017a50:	e3bd      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8017a52:	4b6f      	ldr	r3, [pc, #444]	@ (8017c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017a56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8017a5a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8017a5c:	4b6c      	ldr	r3, [pc, #432]	@ (8017c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	f003 0304 	and.w	r3, r3, #4
 8017a64:	2b04      	cmp	r3, #4
 8017a66:	d10c      	bne.n	8017a82 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8017a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d109      	bne.n	8017a82 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8017a6e:	4b68      	ldr	r3, [pc, #416]	@ (8017c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	08db      	lsrs	r3, r3, #3
 8017a74:	f003 0303 	and.w	r3, r3, #3
 8017a78:	4a66      	ldr	r2, [pc, #408]	@ (8017c14 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8017a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8017a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017a80:	e01e      	b.n	8017ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8017a82:	4b63      	ldr	r3, [pc, #396]	@ (8017c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017a8e:	d106      	bne.n	8017a9e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8017a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017a92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017a96:	d102      	bne.n	8017a9e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8017a98:	4b5f      	ldr	r3, [pc, #380]	@ (8017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8017a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017a9c:	e010      	b.n	8017ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8017a9e:	4b5c      	ldr	r3, [pc, #368]	@ (8017c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017aa0:	681b      	ldr	r3, [r3, #0]
 8017aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017aa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017aaa:	d106      	bne.n	8017aba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8017aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017aae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017ab2:	d102      	bne.n	8017aba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8017ab4:	4b59      	ldr	r3, [pc, #356]	@ (8017c1c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8017ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017ab8:	e002      	b.n	8017ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8017aba:	2300      	movs	r3, #0
 8017abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8017abe:	e386      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8017ac0:	e385      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8017ac2:	4b57      	ldr	r3, [pc, #348]	@ (8017c20 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8017ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017ac6:	e382      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8017ac8:	2300      	movs	r3, #0
 8017aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017acc:	e37f      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8017ace:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017ad2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8017ad6:	430b      	orrs	r3, r1
 8017ad8:	f040 80a7 	bne.w	8017c2a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8017adc:	4b4c      	ldr	r3, [pc, #304]	@ (8017c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017ae0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8017ae4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8017ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ae8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8017aec:	d055      	beq.n	8017b9a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8017aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017af0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8017af4:	f200 8096 	bhi.w	8017c24 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8017af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017afa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8017afe:	f000 8084 	beq.w	8017c0a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8017b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b04:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8017b08:	f200 808c 	bhi.w	8017c24 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8017b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017b12:	d030      	beq.n	8017b76 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8017b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017b1a:	f200 8083 	bhi.w	8017c24 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8017b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d004      	beq.n	8017b2e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8017b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017b2a:	d012      	beq.n	8017b52 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8017b2c:	e07a      	b.n	8017c24 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8017b2e:	4b38      	ldr	r3, [pc, #224]	@ (8017c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017b36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017b3a:	d107      	bne.n	8017b4c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8017b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017b40:	4618      	mov	r0, r3
 8017b42:	f000 fe0b 	bl	801875c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8017b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017b4a:	e340      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017b4c:	2300      	movs	r3, #0
 8017b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017b50:	e33d      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8017b52:	4b2f      	ldr	r3, [pc, #188]	@ (8017c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017b5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017b5e:	d107      	bne.n	8017b70 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017b60:	f107 0318 	add.w	r3, r7, #24
 8017b64:	4618      	mov	r0, r3
 8017b66:	f000 fb51 	bl	801820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8017b6a:	69bb      	ldr	r3, [r7, #24]
 8017b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017b6e:	e32e      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017b70:	2300      	movs	r3, #0
 8017b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017b74:	e32b      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8017b76:	4b26      	ldr	r3, [pc, #152]	@ (8017c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017b78:	681b      	ldr	r3, [r3, #0]
 8017b7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8017b7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017b82:	d107      	bne.n	8017b94 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017b84:	f107 030c 	add.w	r3, r7, #12
 8017b88:	4618      	mov	r0, r3
 8017b8a:	f000 fc93 	bl	80184b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017b92:	e31c      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017b94:	2300      	movs	r3, #0
 8017b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017b98:	e319      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8017b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8017c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017b9e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8017ba2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8017ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8017c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	f003 0304 	and.w	r3, r3, #4
 8017bac:	2b04      	cmp	r3, #4
 8017bae:	d10c      	bne.n	8017bca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8017bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d109      	bne.n	8017bca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8017bb6:	4b16      	ldr	r3, [pc, #88]	@ (8017c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	08db      	lsrs	r3, r3, #3
 8017bbc:	f003 0303 	and.w	r3, r3, #3
 8017bc0:	4a14      	ldr	r2, [pc, #80]	@ (8017c14 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8017bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8017bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017bc8:	e01e      	b.n	8017c08 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8017bca:	4b11      	ldr	r3, [pc, #68]	@ (8017c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017bd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017bd6:	d106      	bne.n	8017be6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8017bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017bda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017bde:	d102      	bne.n	8017be6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8017be0:	4b0d      	ldr	r3, [pc, #52]	@ (8017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8017be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017be4:	e010      	b.n	8017c08 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8017be6:	4b0a      	ldr	r3, [pc, #40]	@ (8017c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017bee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017bf2:	d106      	bne.n	8017c02 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8017bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017bf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017bfa:	d102      	bne.n	8017c02 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8017bfc:	4b07      	ldr	r3, [pc, #28]	@ (8017c1c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8017bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017c00:	e002      	b.n	8017c08 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8017c02:	2300      	movs	r3, #0
 8017c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8017c06:	e2e2      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8017c08:	e2e1      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8017c0a:	4b05      	ldr	r3, [pc, #20]	@ (8017c20 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8017c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017c0e:	e2de      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8017c10:	58024400 	.word	0x58024400
 8017c14:	03d09000 	.word	0x03d09000
 8017c18:	003d0900 	.word	0x003d0900
 8017c1c:	017d7840 	.word	0x017d7840
 8017c20:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8017c24:	2300      	movs	r3, #0
 8017c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017c28:	e2d1      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8017c2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017c2e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8017c32:	430b      	orrs	r3, r1
 8017c34:	f040 809c 	bne.w	8017d70 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8017c38:	4b93      	ldr	r3, [pc, #588]	@ (8017e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8017c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017c3c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8017c40:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8017c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017c48:	d054      	beq.n	8017cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8017c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017c50:	f200 808b 	bhi.w	8017d6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8017c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8017c5a:	f000 8083 	beq.w	8017d64 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8017c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8017c64:	f200 8081 	bhi.w	8017d6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8017c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017c6e:	d02f      	beq.n	8017cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8017c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017c76:	d878      	bhi.n	8017d6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8017c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d004      	beq.n	8017c88 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8017c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017c84:	d012      	beq.n	8017cac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8017c86:	e070      	b.n	8017d6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8017c88:	4b7f      	ldr	r3, [pc, #508]	@ (8017e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017c90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017c94:	d107      	bne.n	8017ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8017c96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	f000 fd5e 	bl	801875c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8017ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017ca4:	e293      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017ca6:	2300      	movs	r3, #0
 8017ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017caa:	e290      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8017cac:	4b76      	ldr	r3, [pc, #472]	@ (8017e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017cb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017cb8:	d107      	bne.n	8017cca <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017cba:	f107 0318 	add.w	r3, r7, #24
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	f000 faa4 	bl	801820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8017cc4:	69bb      	ldr	r3, [r7, #24]
 8017cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017cc8:	e281      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017cca:	2300      	movs	r3, #0
 8017ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017cce:	e27e      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8017cd0:	4b6d      	ldr	r3, [pc, #436]	@ (8017e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8017cd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017cdc:	d107      	bne.n	8017cee <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017cde:	f107 030c 	add.w	r3, r7, #12
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	f000 fbe6 	bl	80184b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017cec:	e26f      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017cee:	2300      	movs	r3, #0
 8017cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017cf2:	e26c      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8017cf4:	4b64      	ldr	r3, [pc, #400]	@ (8017e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8017cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017cf8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8017cfc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8017cfe:	4b62      	ldr	r3, [pc, #392]	@ (8017e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	f003 0304 	and.w	r3, r3, #4
 8017d06:	2b04      	cmp	r3, #4
 8017d08:	d10c      	bne.n	8017d24 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8017d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d109      	bne.n	8017d24 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8017d10:	4b5d      	ldr	r3, [pc, #372]	@ (8017e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	08db      	lsrs	r3, r3, #3
 8017d16:	f003 0303 	and.w	r3, r3, #3
 8017d1a:	4a5c      	ldr	r2, [pc, #368]	@ (8017e8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8017d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8017d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017d22:	e01e      	b.n	8017d62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8017d24:	4b58      	ldr	r3, [pc, #352]	@ (8017e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017d2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017d30:	d106      	bne.n	8017d40 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8017d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017d38:	d102      	bne.n	8017d40 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8017d3a:	4b55      	ldr	r3, [pc, #340]	@ (8017e90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8017d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017d3e:	e010      	b.n	8017d62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8017d40:	4b51      	ldr	r3, [pc, #324]	@ (8017e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017d48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017d4c:	d106      	bne.n	8017d5c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8017d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017d54:	d102      	bne.n	8017d5c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8017d56:	4b4f      	ldr	r3, [pc, #316]	@ (8017e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8017d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017d5a:	e002      	b.n	8017d62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8017d60:	e235      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8017d62:	e234      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8017d64:	4b4c      	ldr	r3, [pc, #304]	@ (8017e98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8017d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017d68:	e231      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017d6e:	e22e      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8017d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017d74:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8017d78:	430b      	orrs	r3, r1
 8017d7a:	f040 808f 	bne.w	8017e9c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8017d7e:	4b42      	ldr	r3, [pc, #264]	@ (8017e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8017d80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017d82:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8017d86:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8017d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8017d8e:	d06b      	beq.n	8017e68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8017d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8017d96:	d874      	bhi.n	8017e82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8017d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8017d9e:	d056      	beq.n	8017e4e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8017da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017da2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8017da6:	d86c      	bhi.n	8017e82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8017da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017daa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8017dae:	d03b      	beq.n	8017e28 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8017db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017db2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8017db6:	d864      	bhi.n	8017e82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8017db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017dba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017dbe:	d021      	beq.n	8017e04 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8017dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017dc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017dc6:	d85c      	bhi.n	8017e82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8017dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d004      	beq.n	8017dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8017dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017dd4:	d004      	beq.n	8017de0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8017dd6:	e054      	b.n	8017e82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8017dd8:	f7fe fa0a 	bl	80161f0 <HAL_RCC_GetPCLK1Freq>
 8017ddc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8017dde:	e1f6      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8017de0:	4b29      	ldr	r3, [pc, #164]	@ (8017e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017de8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017dec:	d107      	bne.n	8017dfe <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017dee:	f107 0318 	add.w	r3, r7, #24
 8017df2:	4618      	mov	r0, r3
 8017df4:	f000 fa0a 	bl	801820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8017df8:	69fb      	ldr	r3, [r7, #28]
 8017dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017dfc:	e1e7      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017dfe:	2300      	movs	r3, #0
 8017e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017e02:	e1e4      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8017e04:	4b20      	ldr	r3, [pc, #128]	@ (8017e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8017e0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017e10:	d107      	bne.n	8017e22 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017e12:	f107 030c 	add.w	r3, r7, #12
 8017e16:	4618      	mov	r0, r3
 8017e18:	f000 fb4c 	bl	80184b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8017e1c:	693b      	ldr	r3, [r7, #16]
 8017e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017e20:	e1d5      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017e22:	2300      	movs	r3, #0
 8017e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017e26:	e1d2      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8017e28:	4b17      	ldr	r3, [pc, #92]	@ (8017e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	f003 0304 	and.w	r3, r3, #4
 8017e30:	2b04      	cmp	r3, #4
 8017e32:	d109      	bne.n	8017e48 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8017e34:	4b14      	ldr	r3, [pc, #80]	@ (8017e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	08db      	lsrs	r3, r3, #3
 8017e3a:	f003 0303 	and.w	r3, r3, #3
 8017e3e:	4a13      	ldr	r2, [pc, #76]	@ (8017e8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8017e40:	fa22 f303 	lsr.w	r3, r2, r3
 8017e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017e46:	e1c2      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017e48:	2300      	movs	r3, #0
 8017e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017e4c:	e1bf      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8017e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8017e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017e56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017e5a:	d102      	bne.n	8017e62 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8017e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8017e90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8017e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017e60:	e1b5      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017e62:	2300      	movs	r3, #0
 8017e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017e66:	e1b2      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8017e68:	4b07      	ldr	r3, [pc, #28]	@ (8017e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017e70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017e74:	d102      	bne.n	8017e7c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8017e76:	4b07      	ldr	r3, [pc, #28]	@ (8017e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8017e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017e7a:	e1a8      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017e7c:	2300      	movs	r3, #0
 8017e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017e80:	e1a5      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8017e82:	2300      	movs	r3, #0
 8017e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017e86:	e1a2      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8017e88:	58024400 	.word	0x58024400
 8017e8c:	03d09000 	.word	0x03d09000
 8017e90:	003d0900 	.word	0x003d0900
 8017e94:	017d7840 	.word	0x017d7840
 8017e98:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8017e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017ea0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8017ea4:	430b      	orrs	r3, r1
 8017ea6:	d173      	bne.n	8017f90 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8017ea8:	4b9c      	ldr	r3, [pc, #624]	@ (801811c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8017eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017eac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8017eb0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8017eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017eb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017eb8:	d02f      	beq.n	8017f1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8017eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ebc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017ec0:	d863      	bhi.n	8017f8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8017ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d004      	beq.n	8017ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8017ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017eca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017ece:	d012      	beq.n	8017ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8017ed0:	e05b      	b.n	8017f8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8017ed2:	4b92      	ldr	r3, [pc, #584]	@ (801811c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8017ed4:	681b      	ldr	r3, [r3, #0]
 8017ed6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017eda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017ede:	d107      	bne.n	8017ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017ee0:	f107 0318 	add.w	r3, r7, #24
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	f000 f991 	bl	801820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8017eea:	69bb      	ldr	r3, [r7, #24]
 8017eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017eee:	e16e      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017ef0:	2300      	movs	r3, #0
 8017ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017ef4:	e16b      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8017ef6:	4b89      	ldr	r3, [pc, #548]	@ (801811c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8017efe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017f02:	d107      	bne.n	8017f14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017f04:	f107 030c 	add.w	r3, r7, #12
 8017f08:	4618      	mov	r0, r3
 8017f0a:	f000 fad3 	bl	80184b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8017f0e:	697b      	ldr	r3, [r7, #20]
 8017f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017f12:	e15c      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017f14:	2300      	movs	r3, #0
 8017f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017f18:	e159      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8017f1a:	4b80      	ldr	r3, [pc, #512]	@ (801811c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8017f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017f1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8017f22:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8017f24:	4b7d      	ldr	r3, [pc, #500]	@ (801811c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	f003 0304 	and.w	r3, r3, #4
 8017f2c:	2b04      	cmp	r3, #4
 8017f2e:	d10c      	bne.n	8017f4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8017f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d109      	bne.n	8017f4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8017f36:	4b79      	ldr	r3, [pc, #484]	@ (801811c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	08db      	lsrs	r3, r3, #3
 8017f3c:	f003 0303 	and.w	r3, r3, #3
 8017f40:	4a77      	ldr	r2, [pc, #476]	@ (8018120 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8017f42:	fa22 f303 	lsr.w	r3, r2, r3
 8017f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017f48:	e01e      	b.n	8017f88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8017f4a:	4b74      	ldr	r3, [pc, #464]	@ (801811c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017f56:	d106      	bne.n	8017f66 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8017f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017f5e:	d102      	bne.n	8017f66 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8017f60:	4b70      	ldr	r3, [pc, #448]	@ (8018124 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8017f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017f64:	e010      	b.n	8017f88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8017f66:	4b6d      	ldr	r3, [pc, #436]	@ (801811c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017f6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017f72:	d106      	bne.n	8017f82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8017f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017f7a:	d102      	bne.n	8017f82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8017f7c:	4b6a      	ldr	r3, [pc, #424]	@ (8018128 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8017f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017f80:	e002      	b.n	8017f88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8017f82:	2300      	movs	r3, #0
 8017f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8017f86:	e122      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8017f88:	e121      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8017f8a:	2300      	movs	r3, #0
 8017f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017f8e:	e11e      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8017f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017f94:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8017f98:	430b      	orrs	r3, r1
 8017f9a:	d133      	bne.n	8018004 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8017f9c:	4b5f      	ldr	r3, [pc, #380]	@ (801811c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8017f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8017fa4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8017fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d004      	beq.n	8017fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8017fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017fb2:	d012      	beq.n	8017fda <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8017fb4:	e023      	b.n	8017ffe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8017fb6:	4b59      	ldr	r3, [pc, #356]	@ (801811c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017fbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017fc2:	d107      	bne.n	8017fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8017fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017fc8:	4618      	mov	r0, r3
 8017fca:	f000 fbc7 	bl	801875c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8017fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017fd2:	e0fc      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017fd4:	2300      	movs	r3, #0
 8017fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017fd8:	e0f9      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8017fda:	4b50      	ldr	r3, [pc, #320]	@ (801811c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017fe2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017fe6:	d107      	bne.n	8017ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017fe8:	f107 0318 	add.w	r3, r7, #24
 8017fec:	4618      	mov	r0, r3
 8017fee:	f000 f90d 	bl	801820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8017ff2:	6a3b      	ldr	r3, [r7, #32]
 8017ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017ff6:	e0ea      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017ff8:	2300      	movs	r3, #0
 8017ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017ffc:	e0e7      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8017ffe:	2300      	movs	r3, #0
 8018000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018002:	e0e4      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8018004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018008:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 801800c:	430b      	orrs	r3, r1
 801800e:	f040 808d 	bne.w	801812c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8018012:	4b42      	ldr	r3, [pc, #264]	@ (801811c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8018014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018016:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 801801a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801801c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801801e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8018022:	d06b      	beq.n	80180fc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8018024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801802a:	d874      	bhi.n	8018116 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801802c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801802e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018032:	d056      	beq.n	80180e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8018034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801803a:	d86c      	bhi.n	8018116 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801803c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801803e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8018042:	d03b      	beq.n	80180bc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8018044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018046:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801804a:	d864      	bhi.n	8018116 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801804c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801804e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8018052:	d021      	beq.n	8018098 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8018054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018056:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801805a:	d85c      	bhi.n	8018116 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801805c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801805e:	2b00      	cmp	r3, #0
 8018060:	d004      	beq.n	801806c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8018062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018064:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018068:	d004      	beq.n	8018074 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 801806a:	e054      	b.n	8018116 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801806c:	f000 f8b8 	bl	80181e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8018070:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018072:	e0ac      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8018074:	4b29      	ldr	r3, [pc, #164]	@ (801811c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8018076:	681b      	ldr	r3, [r3, #0]
 8018078:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801807c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8018080:	d107      	bne.n	8018092 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018082:	f107 0318 	add.w	r3, r7, #24
 8018086:	4618      	mov	r0, r3
 8018088:	f000 f8c0 	bl	801820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801808c:	69fb      	ldr	r3, [r7, #28]
 801808e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8018090:	e09d      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8018092:	2300      	movs	r3, #0
 8018094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018096:	e09a      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8018098:	4b20      	ldr	r3, [pc, #128]	@ (801811c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80180a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80180a4:	d107      	bne.n	80180b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80180a6:	f107 030c 	add.w	r3, r7, #12
 80180aa:	4618      	mov	r0, r3
 80180ac:	f000 fa02 	bl	80184b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80180b0:	693b      	ldr	r3, [r7, #16]
 80180b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80180b4:	e08b      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80180b6:	2300      	movs	r3, #0
 80180b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80180ba:	e088      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80180bc:	4b17      	ldr	r3, [pc, #92]	@ (801811c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	f003 0304 	and.w	r3, r3, #4
 80180c4:	2b04      	cmp	r3, #4
 80180c6:	d109      	bne.n	80180dc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80180c8:	4b14      	ldr	r3, [pc, #80]	@ (801811c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	08db      	lsrs	r3, r3, #3
 80180ce:	f003 0303 	and.w	r3, r3, #3
 80180d2:	4a13      	ldr	r2, [pc, #76]	@ (8018120 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80180d4:	fa22 f303 	lsr.w	r3, r2, r3
 80180d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80180da:	e078      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80180dc:	2300      	movs	r3, #0
 80180de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80180e0:	e075      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80180e2:	4b0e      	ldr	r3, [pc, #56]	@ (801811c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80180e4:	681b      	ldr	r3, [r3, #0]
 80180e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80180ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80180ee:	d102      	bne.n	80180f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80180f0:	4b0c      	ldr	r3, [pc, #48]	@ (8018124 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80180f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80180f4:	e06b      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80180f6:	2300      	movs	r3, #0
 80180f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80180fa:	e068      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80180fc:	4b07      	ldr	r3, [pc, #28]	@ (801811c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018104:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8018108:	d102      	bne.n	8018110 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 801810a:	4b07      	ldr	r3, [pc, #28]	@ (8018128 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801810c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801810e:	e05e      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8018110:	2300      	movs	r3, #0
 8018112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018114:	e05b      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8018116:	2300      	movs	r3, #0
 8018118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801811a:	e058      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801811c:	58024400 	.word	0x58024400
 8018120:	03d09000 	.word	0x03d09000
 8018124:	003d0900 	.word	0x003d0900
 8018128:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801812c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018130:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8018134:	430b      	orrs	r3, r1
 8018136:	d148      	bne.n	80181ca <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8018138:	4b27      	ldr	r3, [pc, #156]	@ (80181d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801813a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801813c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8018140:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8018142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8018148:	d02a      	beq.n	80181a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 801814a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801814c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8018150:	d838      	bhi.n	80181c4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8018152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018154:	2b00      	cmp	r3, #0
 8018156:	d004      	beq.n	8018162 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8018158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801815a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801815e:	d00d      	beq.n	801817c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8018160:	e030      	b.n	80181c4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8018162:	4b1d      	ldr	r3, [pc, #116]	@ (80181d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801816a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801816e:	d102      	bne.n	8018176 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8018170:	4b1a      	ldr	r3, [pc, #104]	@ (80181dc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8018172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8018174:	e02b      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8018176:	2300      	movs	r3, #0
 8018178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801817a:	e028      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801817c:	4b16      	ldr	r3, [pc, #88]	@ (80181d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8018184:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8018188:	d107      	bne.n	801819a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801818a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801818e:	4618      	mov	r0, r3
 8018190:	f000 fae4 	bl	801875c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8018194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8018198:	e019      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801819a:	2300      	movs	r3, #0
 801819c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801819e:	e016      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80181a0:	4b0d      	ldr	r3, [pc, #52]	@ (80181d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80181a2:	681b      	ldr	r3, [r3, #0]
 80181a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80181a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80181ac:	d107      	bne.n	80181be <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80181ae:	f107 0318 	add.w	r3, r7, #24
 80181b2:	4618      	mov	r0, r3
 80181b4:	f000 f82a 	bl	801820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80181b8:	69fb      	ldr	r3, [r7, #28]
 80181ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80181bc:	e007      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80181be:	2300      	movs	r3, #0
 80181c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80181c2:	e004      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80181c4:	2300      	movs	r3, #0
 80181c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80181c8:	e001      	b.n	80181ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80181ca:	2300      	movs	r3, #0
 80181cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80181ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80181d0:	4618      	mov	r0, r3
 80181d2:	3740      	adds	r7, #64	@ 0x40
 80181d4:	46bd      	mov	sp, r7
 80181d6:	bd80      	pop	{r7, pc}
 80181d8:	58024400 	.word	0x58024400
 80181dc:	017d7840 	.word	0x017d7840

080181e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80181e4:	f7fd ffd4 	bl	8016190 <HAL_RCC_GetHCLKFreq>
 80181e8:	4602      	mov	r2, r0
 80181ea:	4b06      	ldr	r3, [pc, #24]	@ (8018204 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80181ec:	6a1b      	ldr	r3, [r3, #32]
 80181ee:	091b      	lsrs	r3, r3, #4
 80181f0:	f003 0307 	and.w	r3, r3, #7
 80181f4:	4904      	ldr	r1, [pc, #16]	@ (8018208 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80181f6:	5ccb      	ldrb	r3, [r1, r3]
 80181f8:	f003 031f 	and.w	r3, r3, #31
 80181fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8018200:	4618      	mov	r0, r3
 8018202:	bd80      	pop	{r7, pc}
 8018204:	58024400 	.word	0x58024400
 8018208:	08038288 	.word	0x08038288

0801820c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801820c:	b480      	push	{r7}
 801820e:	b089      	sub	sp, #36	@ 0x24
 8018210:	af00      	add	r7, sp, #0
 8018212:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8018214:	4ba1      	ldr	r3, [pc, #644]	@ (801849c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8018216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018218:	f003 0303 	and.w	r3, r3, #3
 801821c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801821e:	4b9f      	ldr	r3, [pc, #636]	@ (801849c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8018220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018222:	0b1b      	lsrs	r3, r3, #12
 8018224:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018228:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801822a:	4b9c      	ldr	r3, [pc, #624]	@ (801849c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801822c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801822e:	091b      	lsrs	r3, r3, #4
 8018230:	f003 0301 	and.w	r3, r3, #1
 8018234:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8018236:	4b99      	ldr	r3, [pc, #612]	@ (801849c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8018238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801823a:	08db      	lsrs	r3, r3, #3
 801823c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018240:	693a      	ldr	r2, [r7, #16]
 8018242:	fb02 f303 	mul.w	r3, r2, r3
 8018246:	ee07 3a90 	vmov	s15, r3
 801824a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801824e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8018252:	697b      	ldr	r3, [r7, #20]
 8018254:	2b00      	cmp	r3, #0
 8018256:	f000 8111 	beq.w	801847c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801825a:	69bb      	ldr	r3, [r7, #24]
 801825c:	2b02      	cmp	r3, #2
 801825e:	f000 8083 	beq.w	8018368 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8018262:	69bb      	ldr	r3, [r7, #24]
 8018264:	2b02      	cmp	r3, #2
 8018266:	f200 80a1 	bhi.w	80183ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801826a:	69bb      	ldr	r3, [r7, #24]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d003      	beq.n	8018278 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8018270:	69bb      	ldr	r3, [r7, #24]
 8018272:	2b01      	cmp	r3, #1
 8018274:	d056      	beq.n	8018324 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8018276:	e099      	b.n	80183ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018278:	4b88      	ldr	r3, [pc, #544]	@ (801849c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	f003 0320 	and.w	r3, r3, #32
 8018280:	2b00      	cmp	r3, #0
 8018282:	d02d      	beq.n	80182e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8018284:	4b85      	ldr	r3, [pc, #532]	@ (801849c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	08db      	lsrs	r3, r3, #3
 801828a:	f003 0303 	and.w	r3, r3, #3
 801828e:	4a84      	ldr	r2, [pc, #528]	@ (80184a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8018290:	fa22 f303 	lsr.w	r3, r2, r3
 8018294:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8018296:	68bb      	ldr	r3, [r7, #8]
 8018298:	ee07 3a90 	vmov	s15, r3
 801829c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80182a0:	697b      	ldr	r3, [r7, #20]
 80182a2:	ee07 3a90 	vmov	s15, r3
 80182a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80182aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80182ae:	4b7b      	ldr	r3, [pc, #492]	@ (801849c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80182b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80182b6:	ee07 3a90 	vmov	s15, r3
 80182ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80182be:	ed97 6a03 	vldr	s12, [r7, #12]
 80182c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80184a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80182c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80182ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80182ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80182d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80182d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80182da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80182de:	e087      	b.n	80183f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80182e0:	697b      	ldr	r3, [r7, #20]
 80182e2:	ee07 3a90 	vmov	s15, r3
 80182e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80182ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80184a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80182ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80182f2:	4b6a      	ldr	r3, [pc, #424]	@ (801849c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80182f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80182fa:	ee07 3a90 	vmov	s15, r3
 80182fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018302:	ed97 6a03 	vldr	s12, [r7, #12]
 8018306:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80184a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801830a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801830e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801831a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801831e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8018322:	e065      	b.n	80183f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8018324:	697b      	ldr	r3, [r7, #20]
 8018326:	ee07 3a90 	vmov	s15, r3
 801832a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801832e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80184ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8018332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018336:	4b59      	ldr	r3, [pc, #356]	@ (801849c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8018338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801833a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801833e:	ee07 3a90 	vmov	s15, r3
 8018342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018346:	ed97 6a03 	vldr	s12, [r7, #12]
 801834a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80184a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801834e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8018352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801835a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801835e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8018366:	e043      	b.n	80183f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8018368:	697b      	ldr	r3, [r7, #20]
 801836a:	ee07 3a90 	vmov	s15, r3
 801836e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018372:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80184b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8018376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801837a:	4b48      	ldr	r3, [pc, #288]	@ (801849c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801837c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801837e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018382:	ee07 3a90 	vmov	s15, r3
 8018386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801838a:	ed97 6a03 	vldr	s12, [r7, #12]
 801838e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80184a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8018392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8018396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801839a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801839e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80183a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80183a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80183aa:	e021      	b.n	80183f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80183ac:	697b      	ldr	r3, [r7, #20]
 80183ae:	ee07 3a90 	vmov	s15, r3
 80183b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80183b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80184ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80183ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80183be:	4b37      	ldr	r3, [pc, #220]	@ (801849c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80183c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80183c6:	ee07 3a90 	vmov	s15, r3
 80183ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80183ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80183d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80184a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80183d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80183da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80183de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80183e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80183e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80183ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80183ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80183f0:	4b2a      	ldr	r3, [pc, #168]	@ (801849c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80183f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183f4:	0a5b      	lsrs	r3, r3, #9
 80183f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80183fa:	ee07 3a90 	vmov	s15, r3
 80183fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018402:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018406:	ee37 7a87 	vadd.f32	s14, s15, s14
 801840a:	edd7 6a07 	vldr	s13, [r7, #28]
 801840e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018416:	ee17 2a90 	vmov	r2, s15
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801841e:	4b1f      	ldr	r3, [pc, #124]	@ (801849c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8018420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018422:	0c1b      	lsrs	r3, r3, #16
 8018424:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018428:	ee07 3a90 	vmov	s15, r3
 801842c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018430:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018434:	ee37 7a87 	vadd.f32	s14, s15, s14
 8018438:	edd7 6a07 	vldr	s13, [r7, #28]
 801843c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018444:	ee17 2a90 	vmov	r2, s15
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801844c:	4b13      	ldr	r3, [pc, #76]	@ (801849c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801844e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018450:	0e1b      	lsrs	r3, r3, #24
 8018452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018456:	ee07 3a90 	vmov	s15, r3
 801845a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801845e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018462:	ee37 7a87 	vadd.f32	s14, s15, s14
 8018466:	edd7 6a07 	vldr	s13, [r7, #28]
 801846a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801846e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018472:	ee17 2a90 	vmov	r2, s15
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801847a:	e008      	b.n	801848e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	2200      	movs	r2, #0
 8018480:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	2200      	movs	r2, #0
 8018486:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	2200      	movs	r2, #0
 801848c:	609a      	str	r2, [r3, #8]
}
 801848e:	bf00      	nop
 8018490:	3724      	adds	r7, #36	@ 0x24
 8018492:	46bd      	mov	sp, r7
 8018494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018498:	4770      	bx	lr
 801849a:	bf00      	nop
 801849c:	58024400 	.word	0x58024400
 80184a0:	03d09000 	.word	0x03d09000
 80184a4:	46000000 	.word	0x46000000
 80184a8:	4c742400 	.word	0x4c742400
 80184ac:	4a742400 	.word	0x4a742400
 80184b0:	4bbebc20 	.word	0x4bbebc20

080184b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80184b4:	b480      	push	{r7}
 80184b6:	b089      	sub	sp, #36	@ 0x24
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80184bc:	4ba1      	ldr	r3, [pc, #644]	@ (8018744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80184be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80184c0:	f003 0303 	and.w	r3, r3, #3
 80184c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80184c6:	4b9f      	ldr	r3, [pc, #636]	@ (8018744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80184c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80184ca:	0d1b      	lsrs	r3, r3, #20
 80184cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80184d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80184d2:	4b9c      	ldr	r3, [pc, #624]	@ (8018744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80184d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80184d6:	0a1b      	lsrs	r3, r3, #8
 80184d8:	f003 0301 	and.w	r3, r3, #1
 80184dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80184de:	4b99      	ldr	r3, [pc, #612]	@ (8018744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80184e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80184e2:	08db      	lsrs	r3, r3, #3
 80184e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80184e8:	693a      	ldr	r2, [r7, #16]
 80184ea:	fb02 f303 	mul.w	r3, r2, r3
 80184ee:	ee07 3a90 	vmov	s15, r3
 80184f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80184f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80184fa:	697b      	ldr	r3, [r7, #20]
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	f000 8111 	beq.w	8018724 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8018502:	69bb      	ldr	r3, [r7, #24]
 8018504:	2b02      	cmp	r3, #2
 8018506:	f000 8083 	beq.w	8018610 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801850a:	69bb      	ldr	r3, [r7, #24]
 801850c:	2b02      	cmp	r3, #2
 801850e:	f200 80a1 	bhi.w	8018654 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8018512:	69bb      	ldr	r3, [r7, #24]
 8018514:	2b00      	cmp	r3, #0
 8018516:	d003      	beq.n	8018520 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8018518:	69bb      	ldr	r3, [r7, #24]
 801851a:	2b01      	cmp	r3, #1
 801851c:	d056      	beq.n	80185cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801851e:	e099      	b.n	8018654 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018520:	4b88      	ldr	r3, [pc, #544]	@ (8018744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	f003 0320 	and.w	r3, r3, #32
 8018528:	2b00      	cmp	r3, #0
 801852a:	d02d      	beq.n	8018588 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801852c:	4b85      	ldr	r3, [pc, #532]	@ (8018744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	08db      	lsrs	r3, r3, #3
 8018532:	f003 0303 	and.w	r3, r3, #3
 8018536:	4a84      	ldr	r2, [pc, #528]	@ (8018748 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8018538:	fa22 f303 	lsr.w	r3, r2, r3
 801853c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801853e:	68bb      	ldr	r3, [r7, #8]
 8018540:	ee07 3a90 	vmov	s15, r3
 8018544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018548:	697b      	ldr	r3, [r7, #20]
 801854a:	ee07 3a90 	vmov	s15, r3
 801854e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018556:	4b7b      	ldr	r3, [pc, #492]	@ (8018744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8018558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801855a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801855e:	ee07 3a90 	vmov	s15, r3
 8018562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018566:	ed97 6a03 	vldr	s12, [r7, #12]
 801856a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801874c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801856e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8018572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801857a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801857e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018582:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8018586:	e087      	b.n	8018698 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8018588:	697b      	ldr	r3, [r7, #20]
 801858a:	ee07 3a90 	vmov	s15, r3
 801858e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018592:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8018750 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8018596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801859a:	4b6a      	ldr	r3, [pc, #424]	@ (8018744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801859c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801859e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80185a2:	ee07 3a90 	vmov	s15, r3
 80185a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80185aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80185ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801874c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80185b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80185b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80185ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80185be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80185c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80185c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80185ca:	e065      	b.n	8018698 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80185cc:	697b      	ldr	r3, [r7, #20]
 80185ce:	ee07 3a90 	vmov	s15, r3
 80185d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80185d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8018754 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80185da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80185de:	4b59      	ldr	r3, [pc, #356]	@ (8018744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80185e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80185e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80185e6:	ee07 3a90 	vmov	s15, r3
 80185ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80185ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80185f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801874c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80185f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80185fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80185fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018606:	ee67 7a27 	vmul.f32	s15, s14, s15
 801860a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801860e:	e043      	b.n	8018698 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8018610:	697b      	ldr	r3, [r7, #20]
 8018612:	ee07 3a90 	vmov	s15, r3
 8018616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801861a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8018758 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801861e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018622:	4b48      	ldr	r3, [pc, #288]	@ (8018744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8018624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801862a:	ee07 3a90 	vmov	s15, r3
 801862e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018632:	ed97 6a03 	vldr	s12, [r7, #12]
 8018636:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801874c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801863a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801863e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801864a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801864e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8018652:	e021      	b.n	8018698 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8018654:	697b      	ldr	r3, [r7, #20]
 8018656:	ee07 3a90 	vmov	s15, r3
 801865a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801865e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8018754 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8018662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018666:	4b37      	ldr	r3, [pc, #220]	@ (8018744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8018668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801866a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801866e:	ee07 3a90 	vmov	s15, r3
 8018672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018676:	ed97 6a03 	vldr	s12, [r7, #12]
 801867a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801874c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801867e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8018682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801868a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801868e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8018696:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8018698:	4b2a      	ldr	r3, [pc, #168]	@ (8018744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801869a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801869c:	0a5b      	lsrs	r3, r3, #9
 801869e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80186a2:	ee07 3a90 	vmov	s15, r3
 80186a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80186aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80186ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80186b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80186b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80186ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80186be:	ee17 2a90 	vmov	r2, s15
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80186c6:	4b1f      	ldr	r3, [pc, #124]	@ (8018744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80186c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80186ca:	0c1b      	lsrs	r3, r3, #16
 80186cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80186d0:	ee07 3a90 	vmov	s15, r3
 80186d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80186d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80186dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80186e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80186e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80186e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80186ec:	ee17 2a90 	vmov	r2, s15
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80186f4:	4b13      	ldr	r3, [pc, #76]	@ (8018744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80186f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80186f8:	0e1b      	lsrs	r3, r3, #24
 80186fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80186fe:	ee07 3a90 	vmov	s15, r3
 8018702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018706:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801870a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801870e:	edd7 6a07 	vldr	s13, [r7, #28]
 8018712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801871a:	ee17 2a90 	vmov	r2, s15
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8018722:	e008      	b.n	8018736 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	2200      	movs	r2, #0
 8018728:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	2200      	movs	r2, #0
 801872e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	2200      	movs	r2, #0
 8018734:	609a      	str	r2, [r3, #8]
}
 8018736:	bf00      	nop
 8018738:	3724      	adds	r7, #36	@ 0x24
 801873a:	46bd      	mov	sp, r7
 801873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018740:	4770      	bx	lr
 8018742:	bf00      	nop
 8018744:	58024400 	.word	0x58024400
 8018748:	03d09000 	.word	0x03d09000
 801874c:	46000000 	.word	0x46000000
 8018750:	4c742400 	.word	0x4c742400
 8018754:	4a742400 	.word	0x4a742400
 8018758:	4bbebc20 	.word	0x4bbebc20

0801875c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801875c:	b480      	push	{r7}
 801875e:	b089      	sub	sp, #36	@ 0x24
 8018760:	af00      	add	r7, sp, #0
 8018762:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8018764:	4ba0      	ldr	r3, [pc, #640]	@ (80189e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8018766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018768:	f003 0303 	and.w	r3, r3, #3
 801876c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801876e:	4b9e      	ldr	r3, [pc, #632]	@ (80189e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8018770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018772:	091b      	lsrs	r3, r3, #4
 8018774:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018778:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801877a:	4b9b      	ldr	r3, [pc, #620]	@ (80189e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801877c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801877e:	f003 0301 	and.w	r3, r3, #1
 8018782:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8018784:	4b98      	ldr	r3, [pc, #608]	@ (80189e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8018786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018788:	08db      	lsrs	r3, r3, #3
 801878a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801878e:	693a      	ldr	r2, [r7, #16]
 8018790:	fb02 f303 	mul.w	r3, r2, r3
 8018794:	ee07 3a90 	vmov	s15, r3
 8018798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801879c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80187a0:	697b      	ldr	r3, [r7, #20]
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	f000 8111 	beq.w	80189ca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80187a8:	69bb      	ldr	r3, [r7, #24]
 80187aa:	2b02      	cmp	r3, #2
 80187ac:	f000 8083 	beq.w	80188b6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80187b0:	69bb      	ldr	r3, [r7, #24]
 80187b2:	2b02      	cmp	r3, #2
 80187b4:	f200 80a1 	bhi.w	80188fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80187b8:	69bb      	ldr	r3, [r7, #24]
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d003      	beq.n	80187c6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80187be:	69bb      	ldr	r3, [r7, #24]
 80187c0:	2b01      	cmp	r3, #1
 80187c2:	d056      	beq.n	8018872 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80187c4:	e099      	b.n	80188fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80187c6:	4b88      	ldr	r3, [pc, #544]	@ (80189e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	f003 0320 	and.w	r3, r3, #32
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d02d      	beq.n	801882e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80187d2:	4b85      	ldr	r3, [pc, #532]	@ (80189e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	08db      	lsrs	r3, r3, #3
 80187d8:	f003 0303 	and.w	r3, r3, #3
 80187dc:	4a83      	ldr	r2, [pc, #524]	@ (80189ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80187de:	fa22 f303 	lsr.w	r3, r2, r3
 80187e2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80187e4:	68bb      	ldr	r3, [r7, #8]
 80187e6:	ee07 3a90 	vmov	s15, r3
 80187ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80187ee:	697b      	ldr	r3, [r7, #20]
 80187f0:	ee07 3a90 	vmov	s15, r3
 80187f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80187f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80187fc:	4b7a      	ldr	r3, [pc, #488]	@ (80189e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80187fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018804:	ee07 3a90 	vmov	s15, r3
 8018808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801880c:	ed97 6a03 	vldr	s12, [r7, #12]
 8018810:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80189f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8018814:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8018818:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801881c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018820:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018828:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801882c:	e087      	b.n	801893e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801882e:	697b      	ldr	r3, [r7, #20]
 8018830:	ee07 3a90 	vmov	s15, r3
 8018834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018838:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80189f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801883c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018840:	4b69      	ldr	r3, [pc, #420]	@ (80189e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8018842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018848:	ee07 3a90 	vmov	s15, r3
 801884c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018850:	ed97 6a03 	vldr	s12, [r7, #12]
 8018854:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80189f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8018858:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801885c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018860:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018864:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018868:	ee67 7a27 	vmul.f32	s15, s14, s15
 801886c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8018870:	e065      	b.n	801893e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8018872:	697b      	ldr	r3, [r7, #20]
 8018874:	ee07 3a90 	vmov	s15, r3
 8018878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801887c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80189f8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8018880:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018884:	4b58      	ldr	r3, [pc, #352]	@ (80189e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8018886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801888c:	ee07 3a90 	vmov	s15, r3
 8018890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018894:	ed97 6a03 	vldr	s12, [r7, #12]
 8018898:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80189f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801889c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80188a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80188a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80188a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80188ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80188b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80188b4:	e043      	b.n	801893e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80188b6:	697b      	ldr	r3, [r7, #20]
 80188b8:	ee07 3a90 	vmov	s15, r3
 80188bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80188c0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80189fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80188c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80188c8:	4b47      	ldr	r3, [pc, #284]	@ (80189e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80188ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80188cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80188d0:	ee07 3a90 	vmov	s15, r3
 80188d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80188d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80188dc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80189f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80188e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80188e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80188e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80188ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80188f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80188f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80188f8:	e021      	b.n	801893e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80188fa:	697b      	ldr	r3, [r7, #20]
 80188fc:	ee07 3a90 	vmov	s15, r3
 8018900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018904:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80189f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8018908:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801890c:	4b36      	ldr	r3, [pc, #216]	@ (80189e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801890e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018914:	ee07 3a90 	vmov	s15, r3
 8018918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801891c:	ed97 6a03 	vldr	s12, [r7, #12]
 8018920:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80189f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8018924:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8018928:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801892c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018930:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018938:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801893c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801893e:	4b2a      	ldr	r3, [pc, #168]	@ (80189e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8018940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018942:	0a5b      	lsrs	r3, r3, #9
 8018944:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018948:	ee07 3a90 	vmov	s15, r3
 801894c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018950:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018954:	ee37 7a87 	vadd.f32	s14, s15, s14
 8018958:	edd7 6a07 	vldr	s13, [r7, #28]
 801895c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018964:	ee17 2a90 	vmov	r2, s15
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801896c:	4b1e      	ldr	r3, [pc, #120]	@ (80189e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801896e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018970:	0c1b      	lsrs	r3, r3, #16
 8018972:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018976:	ee07 3a90 	vmov	s15, r3
 801897a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801897e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018982:	ee37 7a87 	vadd.f32	s14, s15, s14
 8018986:	edd7 6a07 	vldr	s13, [r7, #28]
 801898a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801898e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018992:	ee17 2a90 	vmov	r2, s15
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801899a:	4b13      	ldr	r3, [pc, #76]	@ (80189e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801899c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801899e:	0e1b      	lsrs	r3, r3, #24
 80189a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80189a4:	ee07 3a90 	vmov	s15, r3
 80189a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80189ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80189b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80189b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80189b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80189bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80189c0:	ee17 2a90 	vmov	r2, s15
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80189c8:	e008      	b.n	80189dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	2200      	movs	r2, #0
 80189ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	2200      	movs	r2, #0
 80189d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	2200      	movs	r2, #0
 80189da:	609a      	str	r2, [r3, #8]
}
 80189dc:	bf00      	nop
 80189de:	3724      	adds	r7, #36	@ 0x24
 80189e0:	46bd      	mov	sp, r7
 80189e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e6:	4770      	bx	lr
 80189e8:	58024400 	.word	0x58024400
 80189ec:	03d09000 	.word	0x03d09000
 80189f0:	46000000 	.word	0x46000000
 80189f4:	4c742400 	.word	0x4c742400
 80189f8:	4a742400 	.word	0x4a742400
 80189fc:	4bbebc20 	.word	0x4bbebc20

08018a00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8018a00:	b580      	push	{r7, lr}
 8018a02:	b084      	sub	sp, #16
 8018a04:	af00      	add	r7, sp, #0
 8018a06:	6078      	str	r0, [r7, #4]
 8018a08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8018a0a:	2300      	movs	r3, #0
 8018a0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8018a0e:	4b53      	ldr	r3, [pc, #332]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a12:	f003 0303 	and.w	r3, r3, #3
 8018a16:	2b03      	cmp	r3, #3
 8018a18:	d101      	bne.n	8018a1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8018a1a:	2301      	movs	r3, #1
 8018a1c:	e099      	b.n	8018b52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8018a1e:	4b4f      	ldr	r3, [pc, #316]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	4a4e      	ldr	r2, [pc, #312]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018a24:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8018a28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018a2a:	f7f9 f8b7 	bl	8011b9c <HAL_GetTick>
 8018a2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8018a30:	e008      	b.n	8018a44 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8018a32:	f7f9 f8b3 	bl	8011b9c <HAL_GetTick>
 8018a36:	4602      	mov	r2, r0
 8018a38:	68bb      	ldr	r3, [r7, #8]
 8018a3a:	1ad3      	subs	r3, r2, r3
 8018a3c:	2b02      	cmp	r3, #2
 8018a3e:	d901      	bls.n	8018a44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8018a40:	2303      	movs	r3, #3
 8018a42:	e086      	b.n	8018b52 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8018a44:	4b45      	ldr	r3, [pc, #276]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d1f0      	bne.n	8018a32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8018a50:	4b42      	ldr	r3, [pc, #264]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a54:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	681b      	ldr	r3, [r3, #0]
 8018a5c:	031b      	lsls	r3, r3, #12
 8018a5e:	493f      	ldr	r1, [pc, #252]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018a60:	4313      	orrs	r3, r2
 8018a62:	628b      	str	r3, [r1, #40]	@ 0x28
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	685b      	ldr	r3, [r3, #4]
 8018a68:	3b01      	subs	r3, #1
 8018a6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	689b      	ldr	r3, [r3, #8]
 8018a72:	3b01      	subs	r3, #1
 8018a74:	025b      	lsls	r3, r3, #9
 8018a76:	b29b      	uxth	r3, r3
 8018a78:	431a      	orrs	r2, r3
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	68db      	ldr	r3, [r3, #12]
 8018a7e:	3b01      	subs	r3, #1
 8018a80:	041b      	lsls	r3, r3, #16
 8018a82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8018a86:	431a      	orrs	r2, r3
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	691b      	ldr	r3, [r3, #16]
 8018a8c:	3b01      	subs	r3, #1
 8018a8e:	061b      	lsls	r3, r3, #24
 8018a90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8018a94:	4931      	ldr	r1, [pc, #196]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018a96:	4313      	orrs	r3, r2
 8018a98:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8018a9a:	4b30      	ldr	r3, [pc, #192]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	695b      	ldr	r3, [r3, #20]
 8018aa6:	492d      	ldr	r1, [pc, #180]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018aa8:	4313      	orrs	r3, r2
 8018aaa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8018aac:	4b2b      	ldr	r3, [pc, #172]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ab0:	f023 0220 	bic.w	r2, r3, #32
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	699b      	ldr	r3, [r3, #24]
 8018ab8:	4928      	ldr	r1, [pc, #160]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018aba:	4313      	orrs	r3, r2
 8018abc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8018abe:	4b27      	ldr	r3, [pc, #156]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ac2:	4a26      	ldr	r2, [pc, #152]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018ac4:	f023 0310 	bic.w	r3, r3, #16
 8018ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8018aca:	4b24      	ldr	r3, [pc, #144]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018acc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018ace:	4b24      	ldr	r3, [pc, #144]	@ (8018b60 <RCCEx_PLL2_Config+0x160>)
 8018ad0:	4013      	ands	r3, r2
 8018ad2:	687a      	ldr	r2, [r7, #4]
 8018ad4:	69d2      	ldr	r2, [r2, #28]
 8018ad6:	00d2      	lsls	r2, r2, #3
 8018ad8:	4920      	ldr	r1, [pc, #128]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018ada:	4313      	orrs	r3, r2
 8018adc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8018ade:	4b1f      	ldr	r3, [pc, #124]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018ae4:	f043 0310 	orr.w	r3, r3, #16
 8018ae8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8018aea:	683b      	ldr	r3, [r7, #0]
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d106      	bne.n	8018afe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8018af0:	4b1a      	ldr	r3, [pc, #104]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018af4:	4a19      	ldr	r2, [pc, #100]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018af6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8018afa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8018afc:	e00f      	b.n	8018b1e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8018afe:	683b      	ldr	r3, [r7, #0]
 8018b00:	2b01      	cmp	r3, #1
 8018b02:	d106      	bne.n	8018b12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8018b04:	4b15      	ldr	r3, [pc, #84]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018b08:	4a14      	ldr	r2, [pc, #80]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018b0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8018b10:	e005      	b.n	8018b1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8018b12:	4b12      	ldr	r3, [pc, #72]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018b16:	4a11      	ldr	r2, [pc, #68]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018b18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8018b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8018b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	4a0e      	ldr	r2, [pc, #56]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018b24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8018b28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018b2a:	f7f9 f837 	bl	8011b9c <HAL_GetTick>
 8018b2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8018b30:	e008      	b.n	8018b44 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8018b32:	f7f9 f833 	bl	8011b9c <HAL_GetTick>
 8018b36:	4602      	mov	r2, r0
 8018b38:	68bb      	ldr	r3, [r7, #8]
 8018b3a:	1ad3      	subs	r3, r2, r3
 8018b3c:	2b02      	cmp	r3, #2
 8018b3e:	d901      	bls.n	8018b44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8018b40:	2303      	movs	r3, #3
 8018b42:	e006      	b.n	8018b52 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8018b44:	4b05      	ldr	r3, [pc, #20]	@ (8018b5c <RCCEx_PLL2_Config+0x15c>)
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d0f0      	beq.n	8018b32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8018b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b52:	4618      	mov	r0, r3
 8018b54:	3710      	adds	r7, #16
 8018b56:	46bd      	mov	sp, r7
 8018b58:	bd80      	pop	{r7, pc}
 8018b5a:	bf00      	nop
 8018b5c:	58024400 	.word	0x58024400
 8018b60:	ffff0007 	.word	0xffff0007

08018b64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8018b64:	b580      	push	{r7, lr}
 8018b66:	b084      	sub	sp, #16
 8018b68:	af00      	add	r7, sp, #0
 8018b6a:	6078      	str	r0, [r7, #4]
 8018b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8018b6e:	2300      	movs	r3, #0
 8018b70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8018b72:	4b53      	ldr	r3, [pc, #332]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b76:	f003 0303 	and.w	r3, r3, #3
 8018b7a:	2b03      	cmp	r3, #3
 8018b7c:	d101      	bne.n	8018b82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8018b7e:	2301      	movs	r3, #1
 8018b80:	e099      	b.n	8018cb6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8018b82:	4b4f      	ldr	r3, [pc, #316]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	4a4e      	ldr	r2, [pc, #312]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018b88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8018b8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018b8e:	f7f9 f805 	bl	8011b9c <HAL_GetTick>
 8018b92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8018b94:	e008      	b.n	8018ba8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8018b96:	f7f9 f801 	bl	8011b9c <HAL_GetTick>
 8018b9a:	4602      	mov	r2, r0
 8018b9c:	68bb      	ldr	r3, [r7, #8]
 8018b9e:	1ad3      	subs	r3, r2, r3
 8018ba0:	2b02      	cmp	r3, #2
 8018ba2:	d901      	bls.n	8018ba8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8018ba4:	2303      	movs	r3, #3
 8018ba6:	e086      	b.n	8018cb6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8018ba8:	4b45      	ldr	r3, [pc, #276]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d1f0      	bne.n	8018b96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8018bb4:	4b42      	ldr	r3, [pc, #264]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018bb8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	051b      	lsls	r3, r3, #20
 8018bc2:	493f      	ldr	r1, [pc, #252]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018bc4:	4313      	orrs	r3, r2
 8018bc6:	628b      	str	r3, [r1, #40]	@ 0x28
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	685b      	ldr	r3, [r3, #4]
 8018bcc:	3b01      	subs	r3, #1
 8018bce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	689b      	ldr	r3, [r3, #8]
 8018bd6:	3b01      	subs	r3, #1
 8018bd8:	025b      	lsls	r3, r3, #9
 8018bda:	b29b      	uxth	r3, r3
 8018bdc:	431a      	orrs	r2, r3
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	68db      	ldr	r3, [r3, #12]
 8018be2:	3b01      	subs	r3, #1
 8018be4:	041b      	lsls	r3, r3, #16
 8018be6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8018bea:	431a      	orrs	r2, r3
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	691b      	ldr	r3, [r3, #16]
 8018bf0:	3b01      	subs	r3, #1
 8018bf2:	061b      	lsls	r3, r3, #24
 8018bf4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8018bf8:	4931      	ldr	r1, [pc, #196]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018bfa:	4313      	orrs	r3, r2
 8018bfc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8018bfe:	4b30      	ldr	r3, [pc, #192]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c02:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	695b      	ldr	r3, [r3, #20]
 8018c0a:	492d      	ldr	r1, [pc, #180]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018c0c:	4313      	orrs	r3, r2
 8018c0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8018c10:	4b2b      	ldr	r3, [pc, #172]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c14:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	699b      	ldr	r3, [r3, #24]
 8018c1c:	4928      	ldr	r1, [pc, #160]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018c1e:	4313      	orrs	r3, r2
 8018c20:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8018c22:	4b27      	ldr	r3, [pc, #156]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c26:	4a26      	ldr	r2, [pc, #152]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018c28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8018c2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8018c2e:	4b24      	ldr	r3, [pc, #144]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018c30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018c32:	4b24      	ldr	r3, [pc, #144]	@ (8018cc4 <RCCEx_PLL3_Config+0x160>)
 8018c34:	4013      	ands	r3, r2
 8018c36:	687a      	ldr	r2, [r7, #4]
 8018c38:	69d2      	ldr	r2, [r2, #28]
 8018c3a:	00d2      	lsls	r2, r2, #3
 8018c3c:	4920      	ldr	r1, [pc, #128]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018c3e:	4313      	orrs	r3, r2
 8018c40:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8018c42:	4b1f      	ldr	r3, [pc, #124]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c46:	4a1e      	ldr	r2, [pc, #120]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8018c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8018c4e:	683b      	ldr	r3, [r7, #0]
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d106      	bne.n	8018c62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8018c54:	4b1a      	ldr	r3, [pc, #104]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c58:	4a19      	ldr	r2, [pc, #100]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018c5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8018c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8018c60:	e00f      	b.n	8018c82 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8018c62:	683b      	ldr	r3, [r7, #0]
 8018c64:	2b01      	cmp	r3, #1
 8018c66:	d106      	bne.n	8018c76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8018c68:	4b15      	ldr	r3, [pc, #84]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c6c:	4a14      	ldr	r2, [pc, #80]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018c6e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8018c72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8018c74:	e005      	b.n	8018c82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8018c76:	4b12      	ldr	r3, [pc, #72]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c7a:	4a11      	ldr	r2, [pc, #68]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018c7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8018c80:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8018c82:	4b0f      	ldr	r3, [pc, #60]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	4a0e      	ldr	r2, [pc, #56]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8018c8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018c8e:	f7f8 ff85 	bl	8011b9c <HAL_GetTick>
 8018c92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8018c94:	e008      	b.n	8018ca8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8018c96:	f7f8 ff81 	bl	8011b9c <HAL_GetTick>
 8018c9a:	4602      	mov	r2, r0
 8018c9c:	68bb      	ldr	r3, [r7, #8]
 8018c9e:	1ad3      	subs	r3, r2, r3
 8018ca0:	2b02      	cmp	r3, #2
 8018ca2:	d901      	bls.n	8018ca8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8018ca4:	2303      	movs	r3, #3
 8018ca6:	e006      	b.n	8018cb6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8018ca8:	4b05      	ldr	r3, [pc, #20]	@ (8018cc0 <RCCEx_PLL3_Config+0x15c>)
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d0f0      	beq.n	8018c96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8018cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8018cb6:	4618      	mov	r0, r3
 8018cb8:	3710      	adds	r7, #16
 8018cba:	46bd      	mov	sp, r7
 8018cbc:	bd80      	pop	{r7, pc}
 8018cbe:	bf00      	nop
 8018cc0:	58024400 	.word	0x58024400
 8018cc4:	ffff0007 	.word	0xffff0007

08018cc8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8018cc8:	b580      	push	{r7, lr}
 8018cca:	b084      	sub	sp, #16
 8018ccc:	af00      	add	r7, sp, #0
 8018cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8018cd0:	2301      	movs	r3, #1
 8018cd2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d071      	beq.n	8018dbe <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8018ce0:	b2db      	uxtb	r3, r3
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d106      	bne.n	8018cf4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	2200      	movs	r2, #0
 8018cea:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8018cee:	6878      	ldr	r0, [r7, #4]
 8018cf0:	f7f8 fc1c 	bl	801152c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	2202      	movs	r2, #2
 8018cf8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	68db      	ldr	r3, [r3, #12]
 8018d02:	f003 0310 	and.w	r3, r3, #16
 8018d06:	2b10      	cmp	r3, #16
 8018d08:	d050      	beq.n	8018dac <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	22ca      	movs	r2, #202	@ 0xca
 8018d10:	625a      	str	r2, [r3, #36]	@ 0x24
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	2253      	movs	r2, #83	@ 0x53
 8018d18:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8018d1a:	6878      	ldr	r0, [r7, #4]
 8018d1c:	f000 f87a 	bl	8018e14 <RTC_EnterInitMode>
 8018d20:	4603      	mov	r3, r0
 8018d22:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8018d24:	7bfb      	ldrb	r3, [r7, #15]
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d124      	bne.n	8018d74 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	6899      	ldr	r1, [r3, #8]
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	681a      	ldr	r2, [r3, #0]
 8018d34:	4b24      	ldr	r3, [pc, #144]	@ (8018dc8 <HAL_RTC_Init+0x100>)
 8018d36:	400b      	ands	r3, r1
 8018d38:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	6899      	ldr	r1, [r3, #8]
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	685a      	ldr	r2, [r3, #4]
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	691b      	ldr	r3, [r3, #16]
 8018d48:	431a      	orrs	r2, r3
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	699b      	ldr	r3, [r3, #24]
 8018d4e:	431a      	orrs	r2, r3
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	430a      	orrs	r2, r1
 8018d56:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	689b      	ldr	r3, [r3, #8]
 8018d5c:	0419      	lsls	r1, r3, #16
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	68da      	ldr	r2, [r3, #12]
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	681b      	ldr	r3, [r3, #0]
 8018d66:	430a      	orrs	r2, r1
 8018d68:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8018d6a:	6878      	ldr	r0, [r7, #4]
 8018d6c:	f000 f886 	bl	8018e7c <RTC_ExitInitMode>
 8018d70:	4603      	mov	r3, r0
 8018d72:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8018d74:	7bfb      	ldrb	r3, [r7, #15]
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d113      	bne.n	8018da2 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	681b      	ldr	r3, [r3, #0]
 8018d7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	f022 0203 	bic.w	r2, r2, #3
 8018d88:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	681b      	ldr	r3, [r3, #0]
 8018d8e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	69da      	ldr	r2, [r3, #28]
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	695b      	ldr	r3, [r3, #20]
 8018d98:	431a      	orrs	r2, r3
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	430a      	orrs	r2, r1
 8018da0:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	22ff      	movs	r2, #255	@ 0xff
 8018da8:	625a      	str	r2, [r3, #36]	@ 0x24
 8018daa:	e001      	b.n	8018db0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8018dac:	2300      	movs	r3, #0
 8018dae:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8018db0:	7bfb      	ldrb	r3, [r7, #15]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d103      	bne.n	8018dbe <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	2201      	movs	r2, #1
 8018dba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8018dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8018dc0:	4618      	mov	r0, r3
 8018dc2:	3710      	adds	r7, #16
 8018dc4:	46bd      	mov	sp, r7
 8018dc6:	bd80      	pop	{r7, pc}
 8018dc8:	ff8fffbf 	.word	0xff8fffbf

08018dcc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8018dcc:	b580      	push	{r7, lr}
 8018dce:	b084      	sub	sp, #16
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8018e10 <HAL_RTC_WaitForSynchro+0x44>)
 8018dda:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8018ddc:	f7f8 fede 	bl	8011b9c <HAL_GetTick>
 8018de0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8018de2:	e009      	b.n	8018df8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018de4:	f7f8 feda 	bl	8011b9c <HAL_GetTick>
 8018de8:	4602      	mov	r2, r0
 8018dea:	68fb      	ldr	r3, [r7, #12]
 8018dec:	1ad3      	subs	r3, r2, r3
 8018dee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018df2:	d901      	bls.n	8018df8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8018df4:	2303      	movs	r3, #3
 8018df6:	e007      	b.n	8018e08 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	681b      	ldr	r3, [r3, #0]
 8018dfc:	68db      	ldr	r3, [r3, #12]
 8018dfe:	f003 0320 	and.w	r3, r3, #32
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d0ee      	beq.n	8018de4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8018e06:	2300      	movs	r3, #0
}
 8018e08:	4618      	mov	r0, r3
 8018e0a:	3710      	adds	r7, #16
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	bd80      	pop	{r7, pc}
 8018e10:	0003ff5f 	.word	0x0003ff5f

08018e14 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8018e14:	b580      	push	{r7, lr}
 8018e16:	b084      	sub	sp, #16
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	681b      	ldr	r3, [r3, #0]
 8018e24:	68db      	ldr	r3, [r3, #12]
 8018e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d120      	bne.n	8018e70 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	f04f 32ff 	mov.w	r2, #4294967295
 8018e36:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8018e38:	f7f8 feb0 	bl	8011b9c <HAL_GetTick>
 8018e3c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8018e3e:	e00d      	b.n	8018e5c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8018e40:	f7f8 feac 	bl	8011b9c <HAL_GetTick>
 8018e44:	4602      	mov	r2, r0
 8018e46:	68bb      	ldr	r3, [r7, #8]
 8018e48:	1ad3      	subs	r3, r2, r3
 8018e4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018e4e:	d905      	bls.n	8018e5c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8018e50:	2303      	movs	r3, #3
 8018e52:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	2203      	movs	r2, #3
 8018e58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	68db      	ldr	r3, [r3, #12]
 8018e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d102      	bne.n	8018e70 <RTC_EnterInitMode+0x5c>
 8018e6a:	7bfb      	ldrb	r3, [r7, #15]
 8018e6c:	2b03      	cmp	r3, #3
 8018e6e:	d1e7      	bne.n	8018e40 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8018e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8018e72:	4618      	mov	r0, r3
 8018e74:	3710      	adds	r7, #16
 8018e76:	46bd      	mov	sp, r7
 8018e78:	bd80      	pop	{r7, pc}
	...

08018e7c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8018e7c:	b580      	push	{r7, lr}
 8018e7e:	b084      	sub	sp, #16
 8018e80:	af00      	add	r7, sp, #0
 8018e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018e84:	2300      	movs	r3, #0
 8018e86:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8018e88:	4b1a      	ldr	r3, [pc, #104]	@ (8018ef4 <RTC_ExitInitMode+0x78>)
 8018e8a:	68db      	ldr	r3, [r3, #12]
 8018e8c:	4a19      	ldr	r2, [pc, #100]	@ (8018ef4 <RTC_ExitInitMode+0x78>)
 8018e8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018e92:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8018e94:	4b17      	ldr	r3, [pc, #92]	@ (8018ef4 <RTC_ExitInitMode+0x78>)
 8018e96:	689b      	ldr	r3, [r3, #8]
 8018e98:	f003 0320 	and.w	r3, r3, #32
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d10c      	bne.n	8018eba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8018ea0:	6878      	ldr	r0, [r7, #4]
 8018ea2:	f7ff ff93 	bl	8018dcc <HAL_RTC_WaitForSynchro>
 8018ea6:	4603      	mov	r3, r0
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d01e      	beq.n	8018eea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	2203      	movs	r2, #3
 8018eb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8018eb4:	2303      	movs	r3, #3
 8018eb6:	73fb      	strb	r3, [r7, #15]
 8018eb8:	e017      	b.n	8018eea <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8018eba:	4b0e      	ldr	r3, [pc, #56]	@ (8018ef4 <RTC_ExitInitMode+0x78>)
 8018ebc:	689b      	ldr	r3, [r3, #8]
 8018ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8018ef4 <RTC_ExitInitMode+0x78>)
 8018ec0:	f023 0320 	bic.w	r3, r3, #32
 8018ec4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8018ec6:	6878      	ldr	r0, [r7, #4]
 8018ec8:	f7ff ff80 	bl	8018dcc <HAL_RTC_WaitForSynchro>
 8018ecc:	4603      	mov	r3, r0
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d005      	beq.n	8018ede <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	2203      	movs	r2, #3
 8018ed6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8018eda:	2303      	movs	r3, #3
 8018edc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8018ede:	4b05      	ldr	r3, [pc, #20]	@ (8018ef4 <RTC_ExitInitMode+0x78>)
 8018ee0:	689b      	ldr	r3, [r3, #8]
 8018ee2:	4a04      	ldr	r2, [pc, #16]	@ (8018ef4 <RTC_ExitInitMode+0x78>)
 8018ee4:	f043 0320 	orr.w	r3, r3, #32
 8018ee8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8018eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8018eec:	4618      	mov	r0, r3
 8018eee:	3710      	adds	r7, #16
 8018ef0:	46bd      	mov	sp, r7
 8018ef2:	bd80      	pop	{r7, pc}
 8018ef4:	58004000 	.word	0x58004000

08018ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8018ef8:	b580      	push	{r7, lr}
 8018efa:	b082      	sub	sp, #8
 8018efc:	af00      	add	r7, sp, #0
 8018efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d101      	bne.n	8018f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8018f06:	2301      	movs	r3, #1
 8018f08:	e049      	b.n	8018f9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8018f10:	b2db      	uxtb	r3, r3
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d106      	bne.n	8018f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	2200      	movs	r2, #0
 8018f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8018f1e:	6878      	ldr	r0, [r7, #4]
 8018f20:	f000 f841 	bl	8018fa6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	2202      	movs	r2, #2
 8018f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	681a      	ldr	r2, [r3, #0]
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	3304      	adds	r3, #4
 8018f34:	4619      	mov	r1, r3
 8018f36:	4610      	mov	r0, r2
 8018f38:	f000 f9e8 	bl	801930c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	2201      	movs	r2, #1
 8018f40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	2201      	movs	r2, #1
 8018f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	2201      	movs	r2, #1
 8018f50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	2201      	movs	r2, #1
 8018f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	2201      	movs	r2, #1
 8018f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	2201      	movs	r2, #1
 8018f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	2201      	movs	r2, #1
 8018f70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	2201      	movs	r2, #1
 8018f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	2201      	movs	r2, #1
 8018f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	2201      	movs	r2, #1
 8018f88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	2201      	movs	r2, #1
 8018f90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	2201      	movs	r2, #1
 8018f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8018f9c:	2300      	movs	r3, #0
}
 8018f9e:	4618      	mov	r0, r3
 8018fa0:	3708      	adds	r7, #8
 8018fa2:	46bd      	mov	sp, r7
 8018fa4:	bd80      	pop	{r7, pc}

08018fa6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8018fa6:	b480      	push	{r7}
 8018fa8:	b083      	sub	sp, #12
 8018faa:	af00      	add	r7, sp, #0
 8018fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8018fae:	bf00      	nop
 8018fb0:	370c      	adds	r7, #12
 8018fb2:	46bd      	mov	sp, r7
 8018fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fb8:	4770      	bx	lr
	...

08018fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8018fbc:	b480      	push	{r7}
 8018fbe:	b085      	sub	sp, #20
 8018fc0:	af00      	add	r7, sp, #0
 8018fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8018fca:	b2db      	uxtb	r3, r3
 8018fcc:	2b01      	cmp	r3, #1
 8018fce:	d001      	beq.n	8018fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8018fd0:	2301      	movs	r3, #1
 8018fd2:	e054      	b.n	801907e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	2202      	movs	r2, #2
 8018fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	68da      	ldr	r2, [r3, #12]
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	f042 0201 	orr.w	r2, r2, #1
 8018fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	4a26      	ldr	r2, [pc, #152]	@ (801908c <HAL_TIM_Base_Start_IT+0xd0>)
 8018ff2:	4293      	cmp	r3, r2
 8018ff4:	d022      	beq.n	801903c <HAL_TIM_Base_Start_IT+0x80>
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018ffe:	d01d      	beq.n	801903c <HAL_TIM_Base_Start_IT+0x80>
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	4a22      	ldr	r2, [pc, #136]	@ (8019090 <HAL_TIM_Base_Start_IT+0xd4>)
 8019006:	4293      	cmp	r3, r2
 8019008:	d018      	beq.n	801903c <HAL_TIM_Base_Start_IT+0x80>
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	4a21      	ldr	r2, [pc, #132]	@ (8019094 <HAL_TIM_Base_Start_IT+0xd8>)
 8019010:	4293      	cmp	r3, r2
 8019012:	d013      	beq.n	801903c <HAL_TIM_Base_Start_IT+0x80>
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	681b      	ldr	r3, [r3, #0]
 8019018:	4a1f      	ldr	r2, [pc, #124]	@ (8019098 <HAL_TIM_Base_Start_IT+0xdc>)
 801901a:	4293      	cmp	r3, r2
 801901c:	d00e      	beq.n	801903c <HAL_TIM_Base_Start_IT+0x80>
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	4a1e      	ldr	r2, [pc, #120]	@ (801909c <HAL_TIM_Base_Start_IT+0xe0>)
 8019024:	4293      	cmp	r3, r2
 8019026:	d009      	beq.n	801903c <HAL_TIM_Base_Start_IT+0x80>
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	4a1c      	ldr	r2, [pc, #112]	@ (80190a0 <HAL_TIM_Base_Start_IT+0xe4>)
 801902e:	4293      	cmp	r3, r2
 8019030:	d004      	beq.n	801903c <HAL_TIM_Base_Start_IT+0x80>
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	4a1b      	ldr	r2, [pc, #108]	@ (80190a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8019038:	4293      	cmp	r3, r2
 801903a:	d115      	bne.n	8019068 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	681b      	ldr	r3, [r3, #0]
 8019040:	689a      	ldr	r2, [r3, #8]
 8019042:	4b19      	ldr	r3, [pc, #100]	@ (80190a8 <HAL_TIM_Base_Start_IT+0xec>)
 8019044:	4013      	ands	r3, r2
 8019046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	2b06      	cmp	r3, #6
 801904c:	d015      	beq.n	801907a <HAL_TIM_Base_Start_IT+0xbe>
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019054:	d011      	beq.n	801907a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	681a      	ldr	r2, [r3, #0]
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	f042 0201 	orr.w	r2, r2, #1
 8019064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019066:	e008      	b.n	801907a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	681a      	ldr	r2, [r3, #0]
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	f042 0201 	orr.w	r2, r2, #1
 8019076:	601a      	str	r2, [r3, #0]
 8019078:	e000      	b.n	801907c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801907a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801907c:	2300      	movs	r3, #0
}
 801907e:	4618      	mov	r0, r3
 8019080:	3714      	adds	r7, #20
 8019082:	46bd      	mov	sp, r7
 8019084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019088:	4770      	bx	lr
 801908a:	bf00      	nop
 801908c:	40010000 	.word	0x40010000
 8019090:	40000400 	.word	0x40000400
 8019094:	40000800 	.word	0x40000800
 8019098:	40000c00 	.word	0x40000c00
 801909c:	40010400 	.word	0x40010400
 80190a0:	40001800 	.word	0x40001800
 80190a4:	40014000 	.word	0x40014000
 80190a8:	00010007 	.word	0x00010007

080190ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80190ac:	b580      	push	{r7, lr}
 80190ae:	b084      	sub	sp, #16
 80190b0:	af00      	add	r7, sp, #0
 80190b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	68db      	ldr	r3, [r3, #12]
 80190ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	691b      	ldr	r3, [r3, #16]
 80190c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80190c4:	68bb      	ldr	r3, [r7, #8]
 80190c6:	f003 0302 	and.w	r3, r3, #2
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d020      	beq.n	8019110 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	f003 0302 	and.w	r3, r3, #2
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d01b      	beq.n	8019110 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	f06f 0202 	mvn.w	r2, #2
 80190e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	2201      	movs	r2, #1
 80190e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	699b      	ldr	r3, [r3, #24]
 80190ee:	f003 0303 	and.w	r3, r3, #3
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	d003      	beq.n	80190fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80190f6:	6878      	ldr	r0, [r7, #4]
 80190f8:	f000 f8e9 	bl	80192ce <HAL_TIM_IC_CaptureCallback>
 80190fc:	e005      	b.n	801910a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80190fe:	6878      	ldr	r0, [r7, #4]
 8019100:	f000 f8db 	bl	80192ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019104:	6878      	ldr	r0, [r7, #4]
 8019106:	f000 f8ec 	bl	80192e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	2200      	movs	r2, #0
 801910e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8019110:	68bb      	ldr	r3, [r7, #8]
 8019112:	f003 0304 	and.w	r3, r3, #4
 8019116:	2b00      	cmp	r3, #0
 8019118:	d020      	beq.n	801915c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	f003 0304 	and.w	r3, r3, #4
 8019120:	2b00      	cmp	r3, #0
 8019122:	d01b      	beq.n	801915c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	681b      	ldr	r3, [r3, #0]
 8019128:	f06f 0204 	mvn.w	r2, #4
 801912c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	2202      	movs	r2, #2
 8019132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	699b      	ldr	r3, [r3, #24]
 801913a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801913e:	2b00      	cmp	r3, #0
 8019140:	d003      	beq.n	801914a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019142:	6878      	ldr	r0, [r7, #4]
 8019144:	f000 f8c3 	bl	80192ce <HAL_TIM_IC_CaptureCallback>
 8019148:	e005      	b.n	8019156 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801914a:	6878      	ldr	r0, [r7, #4]
 801914c:	f000 f8b5 	bl	80192ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019150:	6878      	ldr	r0, [r7, #4]
 8019152:	f000 f8c6 	bl	80192e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	2200      	movs	r2, #0
 801915a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801915c:	68bb      	ldr	r3, [r7, #8]
 801915e:	f003 0308 	and.w	r3, r3, #8
 8019162:	2b00      	cmp	r3, #0
 8019164:	d020      	beq.n	80191a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8019166:	68fb      	ldr	r3, [r7, #12]
 8019168:	f003 0308 	and.w	r3, r3, #8
 801916c:	2b00      	cmp	r3, #0
 801916e:	d01b      	beq.n	80191a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	f06f 0208 	mvn.w	r2, #8
 8019178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	2204      	movs	r2, #4
 801917e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	69db      	ldr	r3, [r3, #28]
 8019186:	f003 0303 	and.w	r3, r3, #3
 801918a:	2b00      	cmp	r3, #0
 801918c:	d003      	beq.n	8019196 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801918e:	6878      	ldr	r0, [r7, #4]
 8019190:	f000 f89d 	bl	80192ce <HAL_TIM_IC_CaptureCallback>
 8019194:	e005      	b.n	80191a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019196:	6878      	ldr	r0, [r7, #4]
 8019198:	f000 f88f 	bl	80192ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801919c:	6878      	ldr	r0, [r7, #4]
 801919e:	f000 f8a0 	bl	80192e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	2200      	movs	r2, #0
 80191a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80191a8:	68bb      	ldr	r3, [r7, #8]
 80191aa:	f003 0310 	and.w	r3, r3, #16
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d020      	beq.n	80191f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80191b2:	68fb      	ldr	r3, [r7, #12]
 80191b4:	f003 0310 	and.w	r3, r3, #16
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	d01b      	beq.n	80191f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	f06f 0210 	mvn.w	r2, #16
 80191c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	2208      	movs	r2, #8
 80191ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	69db      	ldr	r3, [r3, #28]
 80191d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d003      	beq.n	80191e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80191da:	6878      	ldr	r0, [r7, #4]
 80191dc:	f000 f877 	bl	80192ce <HAL_TIM_IC_CaptureCallback>
 80191e0:	e005      	b.n	80191ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80191e2:	6878      	ldr	r0, [r7, #4]
 80191e4:	f000 f869 	bl	80192ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80191e8:	6878      	ldr	r0, [r7, #4]
 80191ea:	f000 f87a 	bl	80192e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	2200      	movs	r2, #0
 80191f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80191f4:	68bb      	ldr	r3, [r7, #8]
 80191f6:	f003 0301 	and.w	r3, r3, #1
 80191fa:	2b00      	cmp	r3, #0
 80191fc:	d00c      	beq.n	8019218 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80191fe:	68fb      	ldr	r3, [r7, #12]
 8019200:	f003 0301 	and.w	r3, r3, #1
 8019204:	2b00      	cmp	r3, #0
 8019206:	d007      	beq.n	8019218 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	f06f 0201 	mvn.w	r2, #1
 8019210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8019212:	6878      	ldr	r0, [r7, #4]
 8019214:	f7f8 f94a 	bl	80114ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8019218:	68bb      	ldr	r3, [r7, #8]
 801921a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801921e:	2b00      	cmp	r3, #0
 8019220:	d104      	bne.n	801922c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8019222:	68bb      	ldr	r3, [r7, #8]
 8019224:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8019228:	2b00      	cmp	r3, #0
 801922a:	d00c      	beq.n	8019246 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801922c:	68fb      	ldr	r3, [r7, #12]
 801922e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019232:	2b00      	cmp	r3, #0
 8019234:	d007      	beq.n	8019246 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801923e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8019240:	6878      	ldr	r0, [r7, #4]
 8019242:	f000 f90d 	bl	8019460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8019246:	68bb      	ldr	r3, [r7, #8]
 8019248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801924c:	2b00      	cmp	r3, #0
 801924e:	d00c      	beq.n	801926a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8019250:	68fb      	ldr	r3, [r7, #12]
 8019252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019256:	2b00      	cmp	r3, #0
 8019258:	d007      	beq.n	801926a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	681b      	ldr	r3, [r3, #0]
 801925e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8019262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8019264:	6878      	ldr	r0, [r7, #4]
 8019266:	f000 f905 	bl	8019474 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801926a:	68bb      	ldr	r3, [r7, #8]
 801926c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019270:	2b00      	cmp	r3, #0
 8019272:	d00c      	beq.n	801928e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801927a:	2b00      	cmp	r3, #0
 801927c:	d007      	beq.n	801928e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8019286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8019288:	6878      	ldr	r0, [r7, #4]
 801928a:	f000 f834 	bl	80192f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801928e:	68bb      	ldr	r3, [r7, #8]
 8019290:	f003 0320 	and.w	r3, r3, #32
 8019294:	2b00      	cmp	r3, #0
 8019296:	d00c      	beq.n	80192b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8019298:	68fb      	ldr	r3, [r7, #12]
 801929a:	f003 0320 	and.w	r3, r3, #32
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d007      	beq.n	80192b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	f06f 0220 	mvn.w	r2, #32
 80192aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80192ac:	6878      	ldr	r0, [r7, #4]
 80192ae:	f000 f8cd 	bl	801944c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80192b2:	bf00      	nop
 80192b4:	3710      	adds	r7, #16
 80192b6:	46bd      	mov	sp, r7
 80192b8:	bd80      	pop	{r7, pc}

080192ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80192ba:	b480      	push	{r7}
 80192bc:	b083      	sub	sp, #12
 80192be:	af00      	add	r7, sp, #0
 80192c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80192c2:	bf00      	nop
 80192c4:	370c      	adds	r7, #12
 80192c6:	46bd      	mov	sp, r7
 80192c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192cc:	4770      	bx	lr

080192ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80192ce:	b480      	push	{r7}
 80192d0:	b083      	sub	sp, #12
 80192d2:	af00      	add	r7, sp, #0
 80192d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80192d6:	bf00      	nop
 80192d8:	370c      	adds	r7, #12
 80192da:	46bd      	mov	sp, r7
 80192dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192e0:	4770      	bx	lr

080192e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80192e2:	b480      	push	{r7}
 80192e4:	b083      	sub	sp, #12
 80192e6:	af00      	add	r7, sp, #0
 80192e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80192ea:	bf00      	nop
 80192ec:	370c      	adds	r7, #12
 80192ee:	46bd      	mov	sp, r7
 80192f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192f4:	4770      	bx	lr

080192f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80192f6:	b480      	push	{r7}
 80192f8:	b083      	sub	sp, #12
 80192fa:	af00      	add	r7, sp, #0
 80192fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80192fe:	bf00      	nop
 8019300:	370c      	adds	r7, #12
 8019302:	46bd      	mov	sp, r7
 8019304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019308:	4770      	bx	lr
	...

0801930c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801930c:	b480      	push	{r7}
 801930e:	b085      	sub	sp, #20
 8019310:	af00      	add	r7, sp, #0
 8019312:	6078      	str	r0, [r7, #4]
 8019314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	4a43      	ldr	r2, [pc, #268]	@ (801942c <TIM_Base_SetConfig+0x120>)
 8019320:	4293      	cmp	r3, r2
 8019322:	d013      	beq.n	801934c <TIM_Base_SetConfig+0x40>
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801932a:	d00f      	beq.n	801934c <TIM_Base_SetConfig+0x40>
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	4a40      	ldr	r2, [pc, #256]	@ (8019430 <TIM_Base_SetConfig+0x124>)
 8019330:	4293      	cmp	r3, r2
 8019332:	d00b      	beq.n	801934c <TIM_Base_SetConfig+0x40>
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	4a3f      	ldr	r2, [pc, #252]	@ (8019434 <TIM_Base_SetConfig+0x128>)
 8019338:	4293      	cmp	r3, r2
 801933a:	d007      	beq.n	801934c <TIM_Base_SetConfig+0x40>
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	4a3e      	ldr	r2, [pc, #248]	@ (8019438 <TIM_Base_SetConfig+0x12c>)
 8019340:	4293      	cmp	r3, r2
 8019342:	d003      	beq.n	801934c <TIM_Base_SetConfig+0x40>
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	4a3d      	ldr	r2, [pc, #244]	@ (801943c <TIM_Base_SetConfig+0x130>)
 8019348:	4293      	cmp	r3, r2
 801934a:	d108      	bne.n	801935e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801934c:	68fb      	ldr	r3, [r7, #12]
 801934e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8019352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8019354:	683b      	ldr	r3, [r7, #0]
 8019356:	685b      	ldr	r3, [r3, #4]
 8019358:	68fa      	ldr	r2, [r7, #12]
 801935a:	4313      	orrs	r3, r2
 801935c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	4a32      	ldr	r2, [pc, #200]	@ (801942c <TIM_Base_SetConfig+0x120>)
 8019362:	4293      	cmp	r3, r2
 8019364:	d01f      	beq.n	80193a6 <TIM_Base_SetConfig+0x9a>
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801936c:	d01b      	beq.n	80193a6 <TIM_Base_SetConfig+0x9a>
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	4a2f      	ldr	r2, [pc, #188]	@ (8019430 <TIM_Base_SetConfig+0x124>)
 8019372:	4293      	cmp	r3, r2
 8019374:	d017      	beq.n	80193a6 <TIM_Base_SetConfig+0x9a>
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	4a2e      	ldr	r2, [pc, #184]	@ (8019434 <TIM_Base_SetConfig+0x128>)
 801937a:	4293      	cmp	r3, r2
 801937c:	d013      	beq.n	80193a6 <TIM_Base_SetConfig+0x9a>
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	4a2d      	ldr	r2, [pc, #180]	@ (8019438 <TIM_Base_SetConfig+0x12c>)
 8019382:	4293      	cmp	r3, r2
 8019384:	d00f      	beq.n	80193a6 <TIM_Base_SetConfig+0x9a>
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	4a2c      	ldr	r2, [pc, #176]	@ (801943c <TIM_Base_SetConfig+0x130>)
 801938a:	4293      	cmp	r3, r2
 801938c:	d00b      	beq.n	80193a6 <TIM_Base_SetConfig+0x9a>
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	4a2b      	ldr	r2, [pc, #172]	@ (8019440 <TIM_Base_SetConfig+0x134>)
 8019392:	4293      	cmp	r3, r2
 8019394:	d007      	beq.n	80193a6 <TIM_Base_SetConfig+0x9a>
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	4a2a      	ldr	r2, [pc, #168]	@ (8019444 <TIM_Base_SetConfig+0x138>)
 801939a:	4293      	cmp	r3, r2
 801939c:	d003      	beq.n	80193a6 <TIM_Base_SetConfig+0x9a>
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	4a29      	ldr	r2, [pc, #164]	@ (8019448 <TIM_Base_SetConfig+0x13c>)
 80193a2:	4293      	cmp	r3, r2
 80193a4:	d108      	bne.n	80193b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80193a6:	68fb      	ldr	r3, [r7, #12]
 80193a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80193ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80193ae:	683b      	ldr	r3, [r7, #0]
 80193b0:	68db      	ldr	r3, [r3, #12]
 80193b2:	68fa      	ldr	r2, [r7, #12]
 80193b4:	4313      	orrs	r3, r2
 80193b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80193be:	683b      	ldr	r3, [r7, #0]
 80193c0:	695b      	ldr	r3, [r3, #20]
 80193c2:	4313      	orrs	r3, r2
 80193c4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80193c6:	683b      	ldr	r3, [r7, #0]
 80193c8:	689a      	ldr	r2, [r3, #8]
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80193ce:	683b      	ldr	r3, [r7, #0]
 80193d0:	681a      	ldr	r2, [r3, #0]
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	4a14      	ldr	r2, [pc, #80]	@ (801942c <TIM_Base_SetConfig+0x120>)
 80193da:	4293      	cmp	r3, r2
 80193dc:	d00f      	beq.n	80193fe <TIM_Base_SetConfig+0xf2>
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	4a16      	ldr	r2, [pc, #88]	@ (801943c <TIM_Base_SetConfig+0x130>)
 80193e2:	4293      	cmp	r3, r2
 80193e4:	d00b      	beq.n	80193fe <TIM_Base_SetConfig+0xf2>
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	4a15      	ldr	r2, [pc, #84]	@ (8019440 <TIM_Base_SetConfig+0x134>)
 80193ea:	4293      	cmp	r3, r2
 80193ec:	d007      	beq.n	80193fe <TIM_Base_SetConfig+0xf2>
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	4a14      	ldr	r2, [pc, #80]	@ (8019444 <TIM_Base_SetConfig+0x138>)
 80193f2:	4293      	cmp	r3, r2
 80193f4:	d003      	beq.n	80193fe <TIM_Base_SetConfig+0xf2>
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	4a13      	ldr	r2, [pc, #76]	@ (8019448 <TIM_Base_SetConfig+0x13c>)
 80193fa:	4293      	cmp	r3, r2
 80193fc:	d103      	bne.n	8019406 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80193fe:	683b      	ldr	r3, [r7, #0]
 8019400:	691a      	ldr	r2, [r3, #16]
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	f043 0204 	orr.w	r2, r3, #4
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	2201      	movs	r2, #1
 8019416:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	68fa      	ldr	r2, [r7, #12]
 801941c:	601a      	str	r2, [r3, #0]
}
 801941e:	bf00      	nop
 8019420:	3714      	adds	r7, #20
 8019422:	46bd      	mov	sp, r7
 8019424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019428:	4770      	bx	lr
 801942a:	bf00      	nop
 801942c:	40010000 	.word	0x40010000
 8019430:	40000400 	.word	0x40000400
 8019434:	40000800 	.word	0x40000800
 8019438:	40000c00 	.word	0x40000c00
 801943c:	40010400 	.word	0x40010400
 8019440:	40014000 	.word	0x40014000
 8019444:	40014400 	.word	0x40014400
 8019448:	40014800 	.word	0x40014800

0801944c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801944c:	b480      	push	{r7}
 801944e:	b083      	sub	sp, #12
 8019450:	af00      	add	r7, sp, #0
 8019452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8019454:	bf00      	nop
 8019456:	370c      	adds	r7, #12
 8019458:	46bd      	mov	sp, r7
 801945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801945e:	4770      	bx	lr

08019460 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8019460:	b480      	push	{r7}
 8019462:	b083      	sub	sp, #12
 8019464:	af00      	add	r7, sp, #0
 8019466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8019468:	bf00      	nop
 801946a:	370c      	adds	r7, #12
 801946c:	46bd      	mov	sp, r7
 801946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019472:	4770      	bx	lr

08019474 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8019474:	b480      	push	{r7}
 8019476:	b083      	sub	sp, #12
 8019478:	af00      	add	r7, sp, #0
 801947a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801947c:	bf00      	nop
 801947e:	370c      	adds	r7, #12
 8019480:	46bd      	mov	sp, r7
 8019482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019486:	4770      	bx	lr

08019488 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8019488:	b580      	push	{r7, lr}
 801948a:	b082      	sub	sp, #8
 801948c:	af00      	add	r7, sp, #0
 801948e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	2b00      	cmp	r3, #0
 8019494:	d101      	bne.n	801949a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8019496:	2301      	movs	r3, #1
 8019498:	e042      	b.n	8019520 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d106      	bne.n	80194b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	2200      	movs	r2, #0
 80194a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80194ac:	6878      	ldr	r0, [r7, #4]
 80194ae:	f7f8 fa8f 	bl	80119d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	2224      	movs	r2, #36	@ 0x24
 80194b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	681b      	ldr	r3, [r3, #0]
 80194be:	681a      	ldr	r2, [r3, #0]
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	681b      	ldr	r3, [r3, #0]
 80194c4:	f022 0201 	bic.w	r2, r2, #1
 80194c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d002      	beq.n	80194d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80194d2:	6878      	ldr	r0, [r7, #4]
 80194d4:	f000 fee6 	bl	801a2a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80194d8:	6878      	ldr	r0, [r7, #4]
 80194da:	f000 f97b 	bl	80197d4 <UART_SetConfig>
 80194de:	4603      	mov	r3, r0
 80194e0:	2b01      	cmp	r3, #1
 80194e2:	d101      	bne.n	80194e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80194e4:	2301      	movs	r3, #1
 80194e6:	e01b      	b.n	8019520 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	685a      	ldr	r2, [r3, #4]
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80194f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	689a      	ldr	r2, [r3, #8]
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8019506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	681a      	ldr	r2, [r3, #0]
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	f042 0201 	orr.w	r2, r2, #1
 8019516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8019518:	6878      	ldr	r0, [r7, #4]
 801951a:	f000 ff65 	bl	801a3e8 <UART_CheckIdleState>
 801951e:	4603      	mov	r3, r0
}
 8019520:	4618      	mov	r0, r3
 8019522:	3708      	adds	r7, #8
 8019524:	46bd      	mov	sp, r7
 8019526:	bd80      	pop	{r7, pc}

08019528 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8019528:	b580      	push	{r7, lr}
 801952a:	b08a      	sub	sp, #40	@ 0x28
 801952c:	af02      	add	r7, sp, #8
 801952e:	60f8      	str	r0, [r7, #12]
 8019530:	60b9      	str	r1, [r7, #8]
 8019532:	603b      	str	r3, [r7, #0]
 8019534:	4613      	mov	r3, r2
 8019536:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8019538:	68fb      	ldr	r3, [r7, #12]
 801953a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801953e:	2b20      	cmp	r3, #32
 8019540:	d17b      	bne.n	801963a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8019542:	68bb      	ldr	r3, [r7, #8]
 8019544:	2b00      	cmp	r3, #0
 8019546:	d002      	beq.n	801954e <HAL_UART_Transmit+0x26>
 8019548:	88fb      	ldrh	r3, [r7, #6]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d101      	bne.n	8019552 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801954e:	2301      	movs	r3, #1
 8019550:	e074      	b.n	801963c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019552:	68fb      	ldr	r3, [r7, #12]
 8019554:	2200      	movs	r2, #0
 8019556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801955a:	68fb      	ldr	r3, [r7, #12]
 801955c:	2221      	movs	r2, #33	@ 0x21
 801955e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8019562:	f7f8 fb1b 	bl	8011b9c <HAL_GetTick>
 8019566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8019568:	68fb      	ldr	r3, [r7, #12]
 801956a:	88fa      	ldrh	r2, [r7, #6]
 801956c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	88fa      	ldrh	r2, [r7, #6]
 8019574:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019578:	68fb      	ldr	r3, [r7, #12]
 801957a:	689b      	ldr	r3, [r3, #8]
 801957c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019580:	d108      	bne.n	8019594 <HAL_UART_Transmit+0x6c>
 8019582:	68fb      	ldr	r3, [r7, #12]
 8019584:	691b      	ldr	r3, [r3, #16]
 8019586:	2b00      	cmp	r3, #0
 8019588:	d104      	bne.n	8019594 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801958a:	2300      	movs	r3, #0
 801958c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801958e:	68bb      	ldr	r3, [r7, #8]
 8019590:	61bb      	str	r3, [r7, #24]
 8019592:	e003      	b.n	801959c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8019594:	68bb      	ldr	r3, [r7, #8]
 8019596:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8019598:	2300      	movs	r3, #0
 801959a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801959c:	e030      	b.n	8019600 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801959e:	683b      	ldr	r3, [r7, #0]
 80195a0:	9300      	str	r3, [sp, #0]
 80195a2:	697b      	ldr	r3, [r7, #20]
 80195a4:	2200      	movs	r2, #0
 80195a6:	2180      	movs	r1, #128	@ 0x80
 80195a8:	68f8      	ldr	r0, [r7, #12]
 80195aa:	f000 ffc7 	bl	801a53c <UART_WaitOnFlagUntilTimeout>
 80195ae:	4603      	mov	r3, r0
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d005      	beq.n	80195c0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80195b4:	68fb      	ldr	r3, [r7, #12]
 80195b6:	2220      	movs	r2, #32
 80195b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80195bc:	2303      	movs	r3, #3
 80195be:	e03d      	b.n	801963c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80195c0:	69fb      	ldr	r3, [r7, #28]
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d10b      	bne.n	80195de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80195c6:	69bb      	ldr	r3, [r7, #24]
 80195c8:	881b      	ldrh	r3, [r3, #0]
 80195ca:	461a      	mov	r2, r3
 80195cc:	68fb      	ldr	r3, [r7, #12]
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80195d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80195d6:	69bb      	ldr	r3, [r7, #24]
 80195d8:	3302      	adds	r3, #2
 80195da:	61bb      	str	r3, [r7, #24]
 80195dc:	e007      	b.n	80195ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80195de:	69fb      	ldr	r3, [r7, #28]
 80195e0:	781a      	ldrb	r2, [r3, #0]
 80195e2:	68fb      	ldr	r3, [r7, #12]
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80195e8:	69fb      	ldr	r3, [r7, #28]
 80195ea:	3301      	adds	r3, #1
 80195ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80195f4:	b29b      	uxth	r3, r3
 80195f6:	3b01      	subs	r3, #1
 80195f8:	b29a      	uxth	r2, r3
 80195fa:	68fb      	ldr	r3, [r7, #12]
 80195fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8019600:	68fb      	ldr	r3, [r7, #12]
 8019602:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019606:	b29b      	uxth	r3, r3
 8019608:	2b00      	cmp	r3, #0
 801960a:	d1c8      	bne.n	801959e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801960c:	683b      	ldr	r3, [r7, #0]
 801960e:	9300      	str	r3, [sp, #0]
 8019610:	697b      	ldr	r3, [r7, #20]
 8019612:	2200      	movs	r2, #0
 8019614:	2140      	movs	r1, #64	@ 0x40
 8019616:	68f8      	ldr	r0, [r7, #12]
 8019618:	f000 ff90 	bl	801a53c <UART_WaitOnFlagUntilTimeout>
 801961c:	4603      	mov	r3, r0
 801961e:	2b00      	cmp	r3, #0
 8019620:	d005      	beq.n	801962e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8019622:	68fb      	ldr	r3, [r7, #12]
 8019624:	2220      	movs	r2, #32
 8019626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801962a:	2303      	movs	r3, #3
 801962c:	e006      	b.n	801963c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	2220      	movs	r2, #32
 8019632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8019636:	2300      	movs	r3, #0
 8019638:	e000      	b.n	801963c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801963a:	2302      	movs	r3, #2
  }
}
 801963c:	4618      	mov	r0, r3
 801963e:	3720      	adds	r7, #32
 8019640:	46bd      	mov	sp, r7
 8019642:	bd80      	pop	{r7, pc}

08019644 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8019644:	b580      	push	{r7, lr}
 8019646:	b08a      	sub	sp, #40	@ 0x28
 8019648:	af02      	add	r7, sp, #8
 801964a:	60f8      	str	r0, [r7, #12]
 801964c:	60b9      	str	r1, [r7, #8]
 801964e:	603b      	str	r3, [r7, #0]
 8019650:	4613      	mov	r3, r2
 8019652:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8019654:	68fb      	ldr	r3, [r7, #12]
 8019656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801965a:	2b20      	cmp	r3, #32
 801965c:	f040 80b5 	bne.w	80197ca <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8019660:	68bb      	ldr	r3, [r7, #8]
 8019662:	2b00      	cmp	r3, #0
 8019664:	d002      	beq.n	801966c <HAL_UART_Receive+0x28>
 8019666:	88fb      	ldrh	r3, [r7, #6]
 8019668:	2b00      	cmp	r3, #0
 801966a:	d101      	bne.n	8019670 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 801966c:	2301      	movs	r3, #1
 801966e:	e0ad      	b.n	80197cc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	2200      	movs	r2, #0
 8019674:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8019678:	68fb      	ldr	r3, [r7, #12]
 801967a:	2222      	movs	r2, #34	@ 0x22
 801967c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	2200      	movs	r2, #0
 8019684:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8019686:	f7f8 fa89 	bl	8011b9c <HAL_GetTick>
 801968a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801968c:	68fb      	ldr	r3, [r7, #12]
 801968e:	88fa      	ldrh	r2, [r7, #6]
 8019690:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8019694:	68fb      	ldr	r3, [r7, #12]
 8019696:	88fa      	ldrh	r2, [r7, #6]
 8019698:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	689b      	ldr	r3, [r3, #8]
 80196a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80196a4:	d10e      	bne.n	80196c4 <HAL_UART_Receive+0x80>
 80196a6:	68fb      	ldr	r3, [r7, #12]
 80196a8:	691b      	ldr	r3, [r3, #16]
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d105      	bne.n	80196ba <HAL_UART_Receive+0x76>
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80196b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80196b8:	e02d      	b.n	8019716 <HAL_UART_Receive+0xd2>
 80196ba:	68fb      	ldr	r3, [r7, #12]
 80196bc:	22ff      	movs	r2, #255	@ 0xff
 80196be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80196c2:	e028      	b.n	8019716 <HAL_UART_Receive+0xd2>
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	689b      	ldr	r3, [r3, #8]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d10d      	bne.n	80196e8 <HAL_UART_Receive+0xa4>
 80196cc:	68fb      	ldr	r3, [r7, #12]
 80196ce:	691b      	ldr	r3, [r3, #16]
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d104      	bne.n	80196de <HAL_UART_Receive+0x9a>
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	22ff      	movs	r2, #255	@ 0xff
 80196d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80196dc:	e01b      	b.n	8019716 <HAL_UART_Receive+0xd2>
 80196de:	68fb      	ldr	r3, [r7, #12]
 80196e0:	227f      	movs	r2, #127	@ 0x7f
 80196e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80196e6:	e016      	b.n	8019716 <HAL_UART_Receive+0xd2>
 80196e8:	68fb      	ldr	r3, [r7, #12]
 80196ea:	689b      	ldr	r3, [r3, #8]
 80196ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80196f0:	d10d      	bne.n	801970e <HAL_UART_Receive+0xca>
 80196f2:	68fb      	ldr	r3, [r7, #12]
 80196f4:	691b      	ldr	r3, [r3, #16]
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	d104      	bne.n	8019704 <HAL_UART_Receive+0xc0>
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	227f      	movs	r2, #127	@ 0x7f
 80196fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019702:	e008      	b.n	8019716 <HAL_UART_Receive+0xd2>
 8019704:	68fb      	ldr	r3, [r7, #12]
 8019706:	223f      	movs	r2, #63	@ 0x3f
 8019708:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801970c:	e003      	b.n	8019716 <HAL_UART_Receive+0xd2>
 801970e:	68fb      	ldr	r3, [r7, #12]
 8019710:	2200      	movs	r2, #0
 8019712:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8019716:	68fb      	ldr	r3, [r7, #12]
 8019718:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801971c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801971e:	68fb      	ldr	r3, [r7, #12]
 8019720:	689b      	ldr	r3, [r3, #8]
 8019722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019726:	d108      	bne.n	801973a <HAL_UART_Receive+0xf6>
 8019728:	68fb      	ldr	r3, [r7, #12]
 801972a:	691b      	ldr	r3, [r3, #16]
 801972c:	2b00      	cmp	r3, #0
 801972e:	d104      	bne.n	801973a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8019730:	2300      	movs	r3, #0
 8019732:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8019734:	68bb      	ldr	r3, [r7, #8]
 8019736:	61bb      	str	r3, [r7, #24]
 8019738:	e003      	b.n	8019742 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801973a:	68bb      	ldr	r3, [r7, #8]
 801973c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801973e:	2300      	movs	r3, #0
 8019740:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8019742:	e036      	b.n	80197b2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8019744:	683b      	ldr	r3, [r7, #0]
 8019746:	9300      	str	r3, [sp, #0]
 8019748:	697b      	ldr	r3, [r7, #20]
 801974a:	2200      	movs	r2, #0
 801974c:	2120      	movs	r1, #32
 801974e:	68f8      	ldr	r0, [r7, #12]
 8019750:	f000 fef4 	bl	801a53c <UART_WaitOnFlagUntilTimeout>
 8019754:	4603      	mov	r3, r0
 8019756:	2b00      	cmp	r3, #0
 8019758:	d005      	beq.n	8019766 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801975a:	68fb      	ldr	r3, [r7, #12]
 801975c:	2220      	movs	r2, #32
 801975e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8019762:	2303      	movs	r3, #3
 8019764:	e032      	b.n	80197cc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8019766:	69fb      	ldr	r3, [r7, #28]
 8019768:	2b00      	cmp	r3, #0
 801976a:	d10c      	bne.n	8019786 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019772:	b29a      	uxth	r2, r3
 8019774:	8a7b      	ldrh	r3, [r7, #18]
 8019776:	4013      	ands	r3, r2
 8019778:	b29a      	uxth	r2, r3
 801977a:	69bb      	ldr	r3, [r7, #24]
 801977c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 801977e:	69bb      	ldr	r3, [r7, #24]
 8019780:	3302      	adds	r3, #2
 8019782:	61bb      	str	r3, [r7, #24]
 8019784:	e00c      	b.n	80197a0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8019786:	68fb      	ldr	r3, [r7, #12]
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801978c:	b2da      	uxtb	r2, r3
 801978e:	8a7b      	ldrh	r3, [r7, #18]
 8019790:	b2db      	uxtb	r3, r3
 8019792:	4013      	ands	r3, r2
 8019794:	b2da      	uxtb	r2, r3
 8019796:	69fb      	ldr	r3, [r7, #28]
 8019798:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801979a:	69fb      	ldr	r3, [r7, #28]
 801979c:	3301      	adds	r3, #1
 801979e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80197a6:	b29b      	uxth	r3, r3
 80197a8:	3b01      	subs	r3, #1
 80197aa:	b29a      	uxth	r2, r3
 80197ac:	68fb      	ldr	r3, [r7, #12]
 80197ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80197b2:	68fb      	ldr	r3, [r7, #12]
 80197b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80197b8:	b29b      	uxth	r3, r3
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d1c2      	bne.n	8019744 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	2220      	movs	r2, #32
 80197c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80197c6:	2300      	movs	r3, #0
 80197c8:	e000      	b.n	80197cc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80197ca:	2302      	movs	r3, #2
  }
}
 80197cc:	4618      	mov	r0, r3
 80197ce:	3720      	adds	r7, #32
 80197d0:	46bd      	mov	sp, r7
 80197d2:	bd80      	pop	{r7, pc}

080197d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80197d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80197d8:	b092      	sub	sp, #72	@ 0x48
 80197da:	af00      	add	r7, sp, #0
 80197dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80197de:	2300      	movs	r3, #0
 80197e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80197e4:	697b      	ldr	r3, [r7, #20]
 80197e6:	689a      	ldr	r2, [r3, #8]
 80197e8:	697b      	ldr	r3, [r7, #20]
 80197ea:	691b      	ldr	r3, [r3, #16]
 80197ec:	431a      	orrs	r2, r3
 80197ee:	697b      	ldr	r3, [r7, #20]
 80197f0:	695b      	ldr	r3, [r3, #20]
 80197f2:	431a      	orrs	r2, r3
 80197f4:	697b      	ldr	r3, [r7, #20]
 80197f6:	69db      	ldr	r3, [r3, #28]
 80197f8:	4313      	orrs	r3, r2
 80197fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80197fc:	697b      	ldr	r3, [r7, #20]
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	681a      	ldr	r2, [r3, #0]
 8019802:	4bbe      	ldr	r3, [pc, #760]	@ (8019afc <UART_SetConfig+0x328>)
 8019804:	4013      	ands	r3, r2
 8019806:	697a      	ldr	r2, [r7, #20]
 8019808:	6812      	ldr	r2, [r2, #0]
 801980a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801980c:	430b      	orrs	r3, r1
 801980e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8019810:	697b      	ldr	r3, [r7, #20]
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	685b      	ldr	r3, [r3, #4]
 8019816:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801981a:	697b      	ldr	r3, [r7, #20]
 801981c:	68da      	ldr	r2, [r3, #12]
 801981e:	697b      	ldr	r3, [r7, #20]
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	430a      	orrs	r2, r1
 8019824:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8019826:	697b      	ldr	r3, [r7, #20]
 8019828:	699b      	ldr	r3, [r3, #24]
 801982a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801982c:	697b      	ldr	r3, [r7, #20]
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	4ab3      	ldr	r2, [pc, #716]	@ (8019b00 <UART_SetConfig+0x32c>)
 8019832:	4293      	cmp	r3, r2
 8019834:	d004      	beq.n	8019840 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8019836:	697b      	ldr	r3, [r7, #20]
 8019838:	6a1b      	ldr	r3, [r3, #32]
 801983a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801983c:	4313      	orrs	r3, r2
 801983e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8019840:	697b      	ldr	r3, [r7, #20]
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	689a      	ldr	r2, [r3, #8]
 8019846:	4baf      	ldr	r3, [pc, #700]	@ (8019b04 <UART_SetConfig+0x330>)
 8019848:	4013      	ands	r3, r2
 801984a:	697a      	ldr	r2, [r7, #20]
 801984c:	6812      	ldr	r2, [r2, #0]
 801984e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8019850:	430b      	orrs	r3, r1
 8019852:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8019854:	697b      	ldr	r3, [r7, #20]
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801985a:	f023 010f 	bic.w	r1, r3, #15
 801985e:	697b      	ldr	r3, [r7, #20]
 8019860:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019862:	697b      	ldr	r3, [r7, #20]
 8019864:	681b      	ldr	r3, [r3, #0]
 8019866:	430a      	orrs	r2, r1
 8019868:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801986a:	697b      	ldr	r3, [r7, #20]
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	4aa6      	ldr	r2, [pc, #664]	@ (8019b08 <UART_SetConfig+0x334>)
 8019870:	4293      	cmp	r3, r2
 8019872:	d177      	bne.n	8019964 <UART_SetConfig+0x190>
 8019874:	4ba5      	ldr	r3, [pc, #660]	@ (8019b0c <UART_SetConfig+0x338>)
 8019876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019878:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801987c:	2b28      	cmp	r3, #40	@ 0x28
 801987e:	d86d      	bhi.n	801995c <UART_SetConfig+0x188>
 8019880:	a201      	add	r2, pc, #4	@ (adr r2, 8019888 <UART_SetConfig+0xb4>)
 8019882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019886:	bf00      	nop
 8019888:	0801992d 	.word	0x0801992d
 801988c:	0801995d 	.word	0x0801995d
 8019890:	0801995d 	.word	0x0801995d
 8019894:	0801995d 	.word	0x0801995d
 8019898:	0801995d 	.word	0x0801995d
 801989c:	0801995d 	.word	0x0801995d
 80198a0:	0801995d 	.word	0x0801995d
 80198a4:	0801995d 	.word	0x0801995d
 80198a8:	08019935 	.word	0x08019935
 80198ac:	0801995d 	.word	0x0801995d
 80198b0:	0801995d 	.word	0x0801995d
 80198b4:	0801995d 	.word	0x0801995d
 80198b8:	0801995d 	.word	0x0801995d
 80198bc:	0801995d 	.word	0x0801995d
 80198c0:	0801995d 	.word	0x0801995d
 80198c4:	0801995d 	.word	0x0801995d
 80198c8:	0801993d 	.word	0x0801993d
 80198cc:	0801995d 	.word	0x0801995d
 80198d0:	0801995d 	.word	0x0801995d
 80198d4:	0801995d 	.word	0x0801995d
 80198d8:	0801995d 	.word	0x0801995d
 80198dc:	0801995d 	.word	0x0801995d
 80198e0:	0801995d 	.word	0x0801995d
 80198e4:	0801995d 	.word	0x0801995d
 80198e8:	08019945 	.word	0x08019945
 80198ec:	0801995d 	.word	0x0801995d
 80198f0:	0801995d 	.word	0x0801995d
 80198f4:	0801995d 	.word	0x0801995d
 80198f8:	0801995d 	.word	0x0801995d
 80198fc:	0801995d 	.word	0x0801995d
 8019900:	0801995d 	.word	0x0801995d
 8019904:	0801995d 	.word	0x0801995d
 8019908:	0801994d 	.word	0x0801994d
 801990c:	0801995d 	.word	0x0801995d
 8019910:	0801995d 	.word	0x0801995d
 8019914:	0801995d 	.word	0x0801995d
 8019918:	0801995d 	.word	0x0801995d
 801991c:	0801995d 	.word	0x0801995d
 8019920:	0801995d 	.word	0x0801995d
 8019924:	0801995d 	.word	0x0801995d
 8019928:	08019955 	.word	0x08019955
 801992c:	2301      	movs	r3, #1
 801992e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019932:	e222      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019934:	2304      	movs	r3, #4
 8019936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801993a:	e21e      	b.n	8019d7a <UART_SetConfig+0x5a6>
 801993c:	2308      	movs	r3, #8
 801993e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019942:	e21a      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019944:	2310      	movs	r3, #16
 8019946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801994a:	e216      	b.n	8019d7a <UART_SetConfig+0x5a6>
 801994c:	2320      	movs	r3, #32
 801994e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019952:	e212      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019954:	2340      	movs	r3, #64	@ 0x40
 8019956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801995a:	e20e      	b.n	8019d7a <UART_SetConfig+0x5a6>
 801995c:	2380      	movs	r3, #128	@ 0x80
 801995e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019962:	e20a      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019964:	697b      	ldr	r3, [r7, #20]
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	4a69      	ldr	r2, [pc, #420]	@ (8019b10 <UART_SetConfig+0x33c>)
 801996a:	4293      	cmp	r3, r2
 801996c:	d130      	bne.n	80199d0 <UART_SetConfig+0x1fc>
 801996e:	4b67      	ldr	r3, [pc, #412]	@ (8019b0c <UART_SetConfig+0x338>)
 8019970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019972:	f003 0307 	and.w	r3, r3, #7
 8019976:	2b05      	cmp	r3, #5
 8019978:	d826      	bhi.n	80199c8 <UART_SetConfig+0x1f4>
 801997a:	a201      	add	r2, pc, #4	@ (adr r2, 8019980 <UART_SetConfig+0x1ac>)
 801997c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019980:	08019999 	.word	0x08019999
 8019984:	080199a1 	.word	0x080199a1
 8019988:	080199a9 	.word	0x080199a9
 801998c:	080199b1 	.word	0x080199b1
 8019990:	080199b9 	.word	0x080199b9
 8019994:	080199c1 	.word	0x080199c1
 8019998:	2300      	movs	r3, #0
 801999a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801999e:	e1ec      	b.n	8019d7a <UART_SetConfig+0x5a6>
 80199a0:	2304      	movs	r3, #4
 80199a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80199a6:	e1e8      	b.n	8019d7a <UART_SetConfig+0x5a6>
 80199a8:	2308      	movs	r3, #8
 80199aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80199ae:	e1e4      	b.n	8019d7a <UART_SetConfig+0x5a6>
 80199b0:	2310      	movs	r3, #16
 80199b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80199b6:	e1e0      	b.n	8019d7a <UART_SetConfig+0x5a6>
 80199b8:	2320      	movs	r3, #32
 80199ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80199be:	e1dc      	b.n	8019d7a <UART_SetConfig+0x5a6>
 80199c0:	2340      	movs	r3, #64	@ 0x40
 80199c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80199c6:	e1d8      	b.n	8019d7a <UART_SetConfig+0x5a6>
 80199c8:	2380      	movs	r3, #128	@ 0x80
 80199ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80199ce:	e1d4      	b.n	8019d7a <UART_SetConfig+0x5a6>
 80199d0:	697b      	ldr	r3, [r7, #20]
 80199d2:	681b      	ldr	r3, [r3, #0]
 80199d4:	4a4f      	ldr	r2, [pc, #316]	@ (8019b14 <UART_SetConfig+0x340>)
 80199d6:	4293      	cmp	r3, r2
 80199d8:	d130      	bne.n	8019a3c <UART_SetConfig+0x268>
 80199da:	4b4c      	ldr	r3, [pc, #304]	@ (8019b0c <UART_SetConfig+0x338>)
 80199dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80199de:	f003 0307 	and.w	r3, r3, #7
 80199e2:	2b05      	cmp	r3, #5
 80199e4:	d826      	bhi.n	8019a34 <UART_SetConfig+0x260>
 80199e6:	a201      	add	r2, pc, #4	@ (adr r2, 80199ec <UART_SetConfig+0x218>)
 80199e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80199ec:	08019a05 	.word	0x08019a05
 80199f0:	08019a0d 	.word	0x08019a0d
 80199f4:	08019a15 	.word	0x08019a15
 80199f8:	08019a1d 	.word	0x08019a1d
 80199fc:	08019a25 	.word	0x08019a25
 8019a00:	08019a2d 	.word	0x08019a2d
 8019a04:	2300      	movs	r3, #0
 8019a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a0a:	e1b6      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019a0c:	2304      	movs	r3, #4
 8019a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a12:	e1b2      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019a14:	2308      	movs	r3, #8
 8019a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a1a:	e1ae      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019a1c:	2310      	movs	r3, #16
 8019a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a22:	e1aa      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019a24:	2320      	movs	r3, #32
 8019a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a2a:	e1a6      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019a2c:	2340      	movs	r3, #64	@ 0x40
 8019a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a32:	e1a2      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019a34:	2380      	movs	r3, #128	@ 0x80
 8019a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a3a:	e19e      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019a3c:	697b      	ldr	r3, [r7, #20]
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	4a35      	ldr	r2, [pc, #212]	@ (8019b18 <UART_SetConfig+0x344>)
 8019a42:	4293      	cmp	r3, r2
 8019a44:	d130      	bne.n	8019aa8 <UART_SetConfig+0x2d4>
 8019a46:	4b31      	ldr	r3, [pc, #196]	@ (8019b0c <UART_SetConfig+0x338>)
 8019a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019a4a:	f003 0307 	and.w	r3, r3, #7
 8019a4e:	2b05      	cmp	r3, #5
 8019a50:	d826      	bhi.n	8019aa0 <UART_SetConfig+0x2cc>
 8019a52:	a201      	add	r2, pc, #4	@ (adr r2, 8019a58 <UART_SetConfig+0x284>)
 8019a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a58:	08019a71 	.word	0x08019a71
 8019a5c:	08019a79 	.word	0x08019a79
 8019a60:	08019a81 	.word	0x08019a81
 8019a64:	08019a89 	.word	0x08019a89
 8019a68:	08019a91 	.word	0x08019a91
 8019a6c:	08019a99 	.word	0x08019a99
 8019a70:	2300      	movs	r3, #0
 8019a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a76:	e180      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019a78:	2304      	movs	r3, #4
 8019a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a7e:	e17c      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019a80:	2308      	movs	r3, #8
 8019a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a86:	e178      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019a88:	2310      	movs	r3, #16
 8019a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a8e:	e174      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019a90:	2320      	movs	r3, #32
 8019a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a96:	e170      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019a98:	2340      	movs	r3, #64	@ 0x40
 8019a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a9e:	e16c      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019aa0:	2380      	movs	r3, #128	@ 0x80
 8019aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019aa6:	e168      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019aa8:	697b      	ldr	r3, [r7, #20]
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	4a1b      	ldr	r2, [pc, #108]	@ (8019b1c <UART_SetConfig+0x348>)
 8019aae:	4293      	cmp	r3, r2
 8019ab0:	d142      	bne.n	8019b38 <UART_SetConfig+0x364>
 8019ab2:	4b16      	ldr	r3, [pc, #88]	@ (8019b0c <UART_SetConfig+0x338>)
 8019ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019ab6:	f003 0307 	and.w	r3, r3, #7
 8019aba:	2b05      	cmp	r3, #5
 8019abc:	d838      	bhi.n	8019b30 <UART_SetConfig+0x35c>
 8019abe:	a201      	add	r2, pc, #4	@ (adr r2, 8019ac4 <UART_SetConfig+0x2f0>)
 8019ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ac4:	08019add 	.word	0x08019add
 8019ac8:	08019ae5 	.word	0x08019ae5
 8019acc:	08019aed 	.word	0x08019aed
 8019ad0:	08019af5 	.word	0x08019af5
 8019ad4:	08019b21 	.word	0x08019b21
 8019ad8:	08019b29 	.word	0x08019b29
 8019adc:	2300      	movs	r3, #0
 8019ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019ae2:	e14a      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019ae4:	2304      	movs	r3, #4
 8019ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019aea:	e146      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019aec:	2308      	movs	r3, #8
 8019aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019af2:	e142      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019af4:	2310      	movs	r3, #16
 8019af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019afa:	e13e      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019afc:	cfff69f3 	.word	0xcfff69f3
 8019b00:	58000c00 	.word	0x58000c00
 8019b04:	11fff4ff 	.word	0x11fff4ff
 8019b08:	40011000 	.word	0x40011000
 8019b0c:	58024400 	.word	0x58024400
 8019b10:	40004400 	.word	0x40004400
 8019b14:	40004800 	.word	0x40004800
 8019b18:	40004c00 	.word	0x40004c00
 8019b1c:	40005000 	.word	0x40005000
 8019b20:	2320      	movs	r3, #32
 8019b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019b26:	e128      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019b28:	2340      	movs	r3, #64	@ 0x40
 8019b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019b2e:	e124      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019b30:	2380      	movs	r3, #128	@ 0x80
 8019b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019b36:	e120      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019b38:	697b      	ldr	r3, [r7, #20]
 8019b3a:	681b      	ldr	r3, [r3, #0]
 8019b3c:	4acb      	ldr	r2, [pc, #812]	@ (8019e6c <UART_SetConfig+0x698>)
 8019b3e:	4293      	cmp	r3, r2
 8019b40:	d176      	bne.n	8019c30 <UART_SetConfig+0x45c>
 8019b42:	4bcb      	ldr	r3, [pc, #812]	@ (8019e70 <UART_SetConfig+0x69c>)
 8019b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019b46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8019b4a:	2b28      	cmp	r3, #40	@ 0x28
 8019b4c:	d86c      	bhi.n	8019c28 <UART_SetConfig+0x454>
 8019b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8019b54 <UART_SetConfig+0x380>)
 8019b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b54:	08019bf9 	.word	0x08019bf9
 8019b58:	08019c29 	.word	0x08019c29
 8019b5c:	08019c29 	.word	0x08019c29
 8019b60:	08019c29 	.word	0x08019c29
 8019b64:	08019c29 	.word	0x08019c29
 8019b68:	08019c29 	.word	0x08019c29
 8019b6c:	08019c29 	.word	0x08019c29
 8019b70:	08019c29 	.word	0x08019c29
 8019b74:	08019c01 	.word	0x08019c01
 8019b78:	08019c29 	.word	0x08019c29
 8019b7c:	08019c29 	.word	0x08019c29
 8019b80:	08019c29 	.word	0x08019c29
 8019b84:	08019c29 	.word	0x08019c29
 8019b88:	08019c29 	.word	0x08019c29
 8019b8c:	08019c29 	.word	0x08019c29
 8019b90:	08019c29 	.word	0x08019c29
 8019b94:	08019c09 	.word	0x08019c09
 8019b98:	08019c29 	.word	0x08019c29
 8019b9c:	08019c29 	.word	0x08019c29
 8019ba0:	08019c29 	.word	0x08019c29
 8019ba4:	08019c29 	.word	0x08019c29
 8019ba8:	08019c29 	.word	0x08019c29
 8019bac:	08019c29 	.word	0x08019c29
 8019bb0:	08019c29 	.word	0x08019c29
 8019bb4:	08019c11 	.word	0x08019c11
 8019bb8:	08019c29 	.word	0x08019c29
 8019bbc:	08019c29 	.word	0x08019c29
 8019bc0:	08019c29 	.word	0x08019c29
 8019bc4:	08019c29 	.word	0x08019c29
 8019bc8:	08019c29 	.word	0x08019c29
 8019bcc:	08019c29 	.word	0x08019c29
 8019bd0:	08019c29 	.word	0x08019c29
 8019bd4:	08019c19 	.word	0x08019c19
 8019bd8:	08019c29 	.word	0x08019c29
 8019bdc:	08019c29 	.word	0x08019c29
 8019be0:	08019c29 	.word	0x08019c29
 8019be4:	08019c29 	.word	0x08019c29
 8019be8:	08019c29 	.word	0x08019c29
 8019bec:	08019c29 	.word	0x08019c29
 8019bf0:	08019c29 	.word	0x08019c29
 8019bf4:	08019c21 	.word	0x08019c21
 8019bf8:	2301      	movs	r3, #1
 8019bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019bfe:	e0bc      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019c00:	2304      	movs	r3, #4
 8019c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019c06:	e0b8      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019c08:	2308      	movs	r3, #8
 8019c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019c0e:	e0b4      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019c10:	2310      	movs	r3, #16
 8019c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019c16:	e0b0      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019c18:	2320      	movs	r3, #32
 8019c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019c1e:	e0ac      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019c20:	2340      	movs	r3, #64	@ 0x40
 8019c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019c26:	e0a8      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019c28:	2380      	movs	r3, #128	@ 0x80
 8019c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019c2e:	e0a4      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019c30:	697b      	ldr	r3, [r7, #20]
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	4a8f      	ldr	r2, [pc, #572]	@ (8019e74 <UART_SetConfig+0x6a0>)
 8019c36:	4293      	cmp	r3, r2
 8019c38:	d130      	bne.n	8019c9c <UART_SetConfig+0x4c8>
 8019c3a:	4b8d      	ldr	r3, [pc, #564]	@ (8019e70 <UART_SetConfig+0x69c>)
 8019c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019c3e:	f003 0307 	and.w	r3, r3, #7
 8019c42:	2b05      	cmp	r3, #5
 8019c44:	d826      	bhi.n	8019c94 <UART_SetConfig+0x4c0>
 8019c46:	a201      	add	r2, pc, #4	@ (adr r2, 8019c4c <UART_SetConfig+0x478>)
 8019c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c4c:	08019c65 	.word	0x08019c65
 8019c50:	08019c6d 	.word	0x08019c6d
 8019c54:	08019c75 	.word	0x08019c75
 8019c58:	08019c7d 	.word	0x08019c7d
 8019c5c:	08019c85 	.word	0x08019c85
 8019c60:	08019c8d 	.word	0x08019c8d
 8019c64:	2300      	movs	r3, #0
 8019c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019c6a:	e086      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019c6c:	2304      	movs	r3, #4
 8019c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019c72:	e082      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019c74:	2308      	movs	r3, #8
 8019c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019c7a:	e07e      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019c7c:	2310      	movs	r3, #16
 8019c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019c82:	e07a      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019c84:	2320      	movs	r3, #32
 8019c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019c8a:	e076      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019c8c:	2340      	movs	r3, #64	@ 0x40
 8019c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019c92:	e072      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019c94:	2380      	movs	r3, #128	@ 0x80
 8019c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019c9a:	e06e      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019c9c:	697b      	ldr	r3, [r7, #20]
 8019c9e:	681b      	ldr	r3, [r3, #0]
 8019ca0:	4a75      	ldr	r2, [pc, #468]	@ (8019e78 <UART_SetConfig+0x6a4>)
 8019ca2:	4293      	cmp	r3, r2
 8019ca4:	d130      	bne.n	8019d08 <UART_SetConfig+0x534>
 8019ca6:	4b72      	ldr	r3, [pc, #456]	@ (8019e70 <UART_SetConfig+0x69c>)
 8019ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019caa:	f003 0307 	and.w	r3, r3, #7
 8019cae:	2b05      	cmp	r3, #5
 8019cb0:	d826      	bhi.n	8019d00 <UART_SetConfig+0x52c>
 8019cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8019cb8 <UART_SetConfig+0x4e4>)
 8019cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019cb8:	08019cd1 	.word	0x08019cd1
 8019cbc:	08019cd9 	.word	0x08019cd9
 8019cc0:	08019ce1 	.word	0x08019ce1
 8019cc4:	08019ce9 	.word	0x08019ce9
 8019cc8:	08019cf1 	.word	0x08019cf1
 8019ccc:	08019cf9 	.word	0x08019cf9
 8019cd0:	2300      	movs	r3, #0
 8019cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019cd6:	e050      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019cd8:	2304      	movs	r3, #4
 8019cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019cde:	e04c      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019ce0:	2308      	movs	r3, #8
 8019ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019ce6:	e048      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019ce8:	2310      	movs	r3, #16
 8019cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019cee:	e044      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019cf0:	2320      	movs	r3, #32
 8019cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019cf6:	e040      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019cf8:	2340      	movs	r3, #64	@ 0x40
 8019cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019cfe:	e03c      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019d00:	2380      	movs	r3, #128	@ 0x80
 8019d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019d06:	e038      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019d08:	697b      	ldr	r3, [r7, #20]
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	4a5b      	ldr	r2, [pc, #364]	@ (8019e7c <UART_SetConfig+0x6a8>)
 8019d0e:	4293      	cmp	r3, r2
 8019d10:	d130      	bne.n	8019d74 <UART_SetConfig+0x5a0>
 8019d12:	4b57      	ldr	r3, [pc, #348]	@ (8019e70 <UART_SetConfig+0x69c>)
 8019d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019d16:	f003 0307 	and.w	r3, r3, #7
 8019d1a:	2b05      	cmp	r3, #5
 8019d1c:	d826      	bhi.n	8019d6c <UART_SetConfig+0x598>
 8019d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8019d24 <UART_SetConfig+0x550>)
 8019d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d24:	08019d3d 	.word	0x08019d3d
 8019d28:	08019d45 	.word	0x08019d45
 8019d2c:	08019d4d 	.word	0x08019d4d
 8019d30:	08019d55 	.word	0x08019d55
 8019d34:	08019d5d 	.word	0x08019d5d
 8019d38:	08019d65 	.word	0x08019d65
 8019d3c:	2302      	movs	r3, #2
 8019d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019d42:	e01a      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019d44:	2304      	movs	r3, #4
 8019d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019d4a:	e016      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019d4c:	2308      	movs	r3, #8
 8019d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019d52:	e012      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019d54:	2310      	movs	r3, #16
 8019d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019d5a:	e00e      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019d5c:	2320      	movs	r3, #32
 8019d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019d62:	e00a      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019d64:	2340      	movs	r3, #64	@ 0x40
 8019d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019d6a:	e006      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019d6c:	2380      	movs	r3, #128	@ 0x80
 8019d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019d72:	e002      	b.n	8019d7a <UART_SetConfig+0x5a6>
 8019d74:	2380      	movs	r3, #128	@ 0x80
 8019d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8019d7a:	697b      	ldr	r3, [r7, #20]
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	4a3f      	ldr	r2, [pc, #252]	@ (8019e7c <UART_SetConfig+0x6a8>)
 8019d80:	4293      	cmp	r3, r2
 8019d82:	f040 80f8 	bne.w	8019f76 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8019d86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019d8a:	2b20      	cmp	r3, #32
 8019d8c:	dc46      	bgt.n	8019e1c <UART_SetConfig+0x648>
 8019d8e:	2b02      	cmp	r3, #2
 8019d90:	f2c0 8082 	blt.w	8019e98 <UART_SetConfig+0x6c4>
 8019d94:	3b02      	subs	r3, #2
 8019d96:	2b1e      	cmp	r3, #30
 8019d98:	d87e      	bhi.n	8019e98 <UART_SetConfig+0x6c4>
 8019d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8019da0 <UART_SetConfig+0x5cc>)
 8019d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019da0:	08019e23 	.word	0x08019e23
 8019da4:	08019e99 	.word	0x08019e99
 8019da8:	08019e2b 	.word	0x08019e2b
 8019dac:	08019e99 	.word	0x08019e99
 8019db0:	08019e99 	.word	0x08019e99
 8019db4:	08019e99 	.word	0x08019e99
 8019db8:	08019e3b 	.word	0x08019e3b
 8019dbc:	08019e99 	.word	0x08019e99
 8019dc0:	08019e99 	.word	0x08019e99
 8019dc4:	08019e99 	.word	0x08019e99
 8019dc8:	08019e99 	.word	0x08019e99
 8019dcc:	08019e99 	.word	0x08019e99
 8019dd0:	08019e99 	.word	0x08019e99
 8019dd4:	08019e99 	.word	0x08019e99
 8019dd8:	08019e4b 	.word	0x08019e4b
 8019ddc:	08019e99 	.word	0x08019e99
 8019de0:	08019e99 	.word	0x08019e99
 8019de4:	08019e99 	.word	0x08019e99
 8019de8:	08019e99 	.word	0x08019e99
 8019dec:	08019e99 	.word	0x08019e99
 8019df0:	08019e99 	.word	0x08019e99
 8019df4:	08019e99 	.word	0x08019e99
 8019df8:	08019e99 	.word	0x08019e99
 8019dfc:	08019e99 	.word	0x08019e99
 8019e00:	08019e99 	.word	0x08019e99
 8019e04:	08019e99 	.word	0x08019e99
 8019e08:	08019e99 	.word	0x08019e99
 8019e0c:	08019e99 	.word	0x08019e99
 8019e10:	08019e99 	.word	0x08019e99
 8019e14:	08019e99 	.word	0x08019e99
 8019e18:	08019e8b 	.word	0x08019e8b
 8019e1c:	2b40      	cmp	r3, #64	@ 0x40
 8019e1e:	d037      	beq.n	8019e90 <UART_SetConfig+0x6bc>
 8019e20:	e03a      	b.n	8019e98 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8019e22:	f7fe f9dd 	bl	80181e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8019e26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019e28:	e03c      	b.n	8019ea4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8019e2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019e2e:	4618      	mov	r0, r3
 8019e30:	f7fe f9ec 	bl	801820c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8019e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019e38:	e034      	b.n	8019ea4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019e3a:	f107 0318 	add.w	r3, r7, #24
 8019e3e:	4618      	mov	r0, r3
 8019e40:	f7fe fb38 	bl	80184b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8019e44:	69fb      	ldr	r3, [r7, #28]
 8019e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019e48:	e02c      	b.n	8019ea4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019e4a:	4b09      	ldr	r3, [pc, #36]	@ (8019e70 <UART_SetConfig+0x69c>)
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	f003 0320 	and.w	r3, r3, #32
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d016      	beq.n	8019e84 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8019e56:	4b06      	ldr	r3, [pc, #24]	@ (8019e70 <UART_SetConfig+0x69c>)
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	08db      	lsrs	r3, r3, #3
 8019e5c:	f003 0303 	and.w	r3, r3, #3
 8019e60:	4a07      	ldr	r2, [pc, #28]	@ (8019e80 <UART_SetConfig+0x6ac>)
 8019e62:	fa22 f303 	lsr.w	r3, r2, r3
 8019e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8019e68:	e01c      	b.n	8019ea4 <UART_SetConfig+0x6d0>
 8019e6a:	bf00      	nop
 8019e6c:	40011400 	.word	0x40011400
 8019e70:	58024400 	.word	0x58024400
 8019e74:	40007800 	.word	0x40007800
 8019e78:	40007c00 	.word	0x40007c00
 8019e7c:	58000c00 	.word	0x58000c00
 8019e80:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8019e84:	4b9d      	ldr	r3, [pc, #628]	@ (801a0fc <UART_SetConfig+0x928>)
 8019e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019e88:	e00c      	b.n	8019ea4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8019e8a:	4b9d      	ldr	r3, [pc, #628]	@ (801a100 <UART_SetConfig+0x92c>)
 8019e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019e8e:	e009      	b.n	8019ea4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019e90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019e96:	e005      	b.n	8019ea4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8019e98:	2300      	movs	r3, #0
 8019e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8019e9c:	2301      	movs	r3, #1
 8019e9e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8019ea2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8019ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	f000 81de 	beq.w	801a268 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8019eac:	697b      	ldr	r3, [r7, #20]
 8019eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019eb0:	4a94      	ldr	r2, [pc, #592]	@ (801a104 <UART_SetConfig+0x930>)
 8019eb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019eb6:	461a      	mov	r2, r3
 8019eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019eba:	fbb3 f3f2 	udiv	r3, r3, r2
 8019ebe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8019ec0:	697b      	ldr	r3, [r7, #20]
 8019ec2:	685a      	ldr	r2, [r3, #4]
 8019ec4:	4613      	mov	r3, r2
 8019ec6:	005b      	lsls	r3, r3, #1
 8019ec8:	4413      	add	r3, r2
 8019eca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019ecc:	429a      	cmp	r2, r3
 8019ece:	d305      	bcc.n	8019edc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8019ed0:	697b      	ldr	r3, [r7, #20]
 8019ed2:	685b      	ldr	r3, [r3, #4]
 8019ed4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8019ed6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019ed8:	429a      	cmp	r2, r3
 8019eda:	d903      	bls.n	8019ee4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8019edc:	2301      	movs	r3, #1
 8019ede:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8019ee2:	e1c1      	b.n	801a268 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019ee6:	2200      	movs	r2, #0
 8019ee8:	60bb      	str	r3, [r7, #8]
 8019eea:	60fa      	str	r2, [r7, #12]
 8019eec:	697b      	ldr	r3, [r7, #20]
 8019eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ef0:	4a84      	ldr	r2, [pc, #528]	@ (801a104 <UART_SetConfig+0x930>)
 8019ef2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019ef6:	b29b      	uxth	r3, r3
 8019ef8:	2200      	movs	r2, #0
 8019efa:	603b      	str	r3, [r7, #0]
 8019efc:	607a      	str	r2, [r7, #4]
 8019efe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019f02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8019f06:	f7f6 fbbd 	bl	8010684 <__aeabi_uldivmod>
 8019f0a:	4602      	mov	r2, r0
 8019f0c:	460b      	mov	r3, r1
 8019f0e:	4610      	mov	r0, r2
 8019f10:	4619      	mov	r1, r3
 8019f12:	f04f 0200 	mov.w	r2, #0
 8019f16:	f04f 0300 	mov.w	r3, #0
 8019f1a:	020b      	lsls	r3, r1, #8
 8019f1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8019f20:	0202      	lsls	r2, r0, #8
 8019f22:	6979      	ldr	r1, [r7, #20]
 8019f24:	6849      	ldr	r1, [r1, #4]
 8019f26:	0849      	lsrs	r1, r1, #1
 8019f28:	2000      	movs	r0, #0
 8019f2a:	460c      	mov	r4, r1
 8019f2c:	4605      	mov	r5, r0
 8019f2e:	eb12 0804 	adds.w	r8, r2, r4
 8019f32:	eb43 0905 	adc.w	r9, r3, r5
 8019f36:	697b      	ldr	r3, [r7, #20]
 8019f38:	685b      	ldr	r3, [r3, #4]
 8019f3a:	2200      	movs	r2, #0
 8019f3c:	469a      	mov	sl, r3
 8019f3e:	4693      	mov	fp, r2
 8019f40:	4652      	mov	r2, sl
 8019f42:	465b      	mov	r3, fp
 8019f44:	4640      	mov	r0, r8
 8019f46:	4649      	mov	r1, r9
 8019f48:	f7f6 fb9c 	bl	8010684 <__aeabi_uldivmod>
 8019f4c:	4602      	mov	r2, r0
 8019f4e:	460b      	mov	r3, r1
 8019f50:	4613      	mov	r3, r2
 8019f52:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8019f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8019f5a:	d308      	bcc.n	8019f6e <UART_SetConfig+0x79a>
 8019f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019f62:	d204      	bcs.n	8019f6e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8019f64:	697b      	ldr	r3, [r7, #20]
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019f6a:	60da      	str	r2, [r3, #12]
 8019f6c:	e17c      	b.n	801a268 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8019f6e:	2301      	movs	r3, #1
 8019f70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8019f74:	e178      	b.n	801a268 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8019f76:	697b      	ldr	r3, [r7, #20]
 8019f78:	69db      	ldr	r3, [r3, #28]
 8019f7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019f7e:	f040 80c5 	bne.w	801a10c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8019f82:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019f86:	2b20      	cmp	r3, #32
 8019f88:	dc48      	bgt.n	801a01c <UART_SetConfig+0x848>
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	db7b      	blt.n	801a086 <UART_SetConfig+0x8b2>
 8019f8e:	2b20      	cmp	r3, #32
 8019f90:	d879      	bhi.n	801a086 <UART_SetConfig+0x8b2>
 8019f92:	a201      	add	r2, pc, #4	@ (adr r2, 8019f98 <UART_SetConfig+0x7c4>)
 8019f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019f98:	0801a023 	.word	0x0801a023
 8019f9c:	0801a02b 	.word	0x0801a02b
 8019fa0:	0801a087 	.word	0x0801a087
 8019fa4:	0801a087 	.word	0x0801a087
 8019fa8:	0801a033 	.word	0x0801a033
 8019fac:	0801a087 	.word	0x0801a087
 8019fb0:	0801a087 	.word	0x0801a087
 8019fb4:	0801a087 	.word	0x0801a087
 8019fb8:	0801a043 	.word	0x0801a043
 8019fbc:	0801a087 	.word	0x0801a087
 8019fc0:	0801a087 	.word	0x0801a087
 8019fc4:	0801a087 	.word	0x0801a087
 8019fc8:	0801a087 	.word	0x0801a087
 8019fcc:	0801a087 	.word	0x0801a087
 8019fd0:	0801a087 	.word	0x0801a087
 8019fd4:	0801a087 	.word	0x0801a087
 8019fd8:	0801a053 	.word	0x0801a053
 8019fdc:	0801a087 	.word	0x0801a087
 8019fe0:	0801a087 	.word	0x0801a087
 8019fe4:	0801a087 	.word	0x0801a087
 8019fe8:	0801a087 	.word	0x0801a087
 8019fec:	0801a087 	.word	0x0801a087
 8019ff0:	0801a087 	.word	0x0801a087
 8019ff4:	0801a087 	.word	0x0801a087
 8019ff8:	0801a087 	.word	0x0801a087
 8019ffc:	0801a087 	.word	0x0801a087
 801a000:	0801a087 	.word	0x0801a087
 801a004:	0801a087 	.word	0x0801a087
 801a008:	0801a087 	.word	0x0801a087
 801a00c:	0801a087 	.word	0x0801a087
 801a010:	0801a087 	.word	0x0801a087
 801a014:	0801a087 	.word	0x0801a087
 801a018:	0801a079 	.word	0x0801a079
 801a01c:	2b40      	cmp	r3, #64	@ 0x40
 801a01e:	d02e      	beq.n	801a07e <UART_SetConfig+0x8aa>
 801a020:	e031      	b.n	801a086 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a022:	f7fc f8e5 	bl	80161f0 <HAL_RCC_GetPCLK1Freq>
 801a026:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801a028:	e033      	b.n	801a092 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a02a:	f7fc f8f7 	bl	801621c <HAL_RCC_GetPCLK2Freq>
 801a02e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801a030:	e02f      	b.n	801a092 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801a032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a036:	4618      	mov	r0, r3
 801a038:	f7fe f8e8 	bl	801820c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801a03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a03e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a040:	e027      	b.n	801a092 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801a042:	f107 0318 	add.w	r3, r7, #24
 801a046:	4618      	mov	r0, r3
 801a048:	f7fe fa34 	bl	80184b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801a04c:	69fb      	ldr	r3, [r7, #28]
 801a04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a050:	e01f      	b.n	801a092 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a052:	4b2d      	ldr	r3, [pc, #180]	@ (801a108 <UART_SetConfig+0x934>)
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	f003 0320 	and.w	r3, r3, #32
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d009      	beq.n	801a072 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801a05e:	4b2a      	ldr	r3, [pc, #168]	@ (801a108 <UART_SetConfig+0x934>)
 801a060:	681b      	ldr	r3, [r3, #0]
 801a062:	08db      	lsrs	r3, r3, #3
 801a064:	f003 0303 	and.w	r3, r3, #3
 801a068:	4a24      	ldr	r2, [pc, #144]	@ (801a0fc <UART_SetConfig+0x928>)
 801a06a:	fa22 f303 	lsr.w	r3, r2, r3
 801a06e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801a070:	e00f      	b.n	801a092 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801a072:	4b22      	ldr	r3, [pc, #136]	@ (801a0fc <UART_SetConfig+0x928>)
 801a074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a076:	e00c      	b.n	801a092 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801a078:	4b21      	ldr	r3, [pc, #132]	@ (801a100 <UART_SetConfig+0x92c>)
 801a07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a07c:	e009      	b.n	801a092 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a07e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a084:	e005      	b.n	801a092 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801a086:	2300      	movs	r3, #0
 801a088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801a08a:	2301      	movs	r3, #1
 801a08c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801a090:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801a092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a094:	2b00      	cmp	r3, #0
 801a096:	f000 80e7 	beq.w	801a268 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a09a:	697b      	ldr	r3, [r7, #20]
 801a09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a09e:	4a19      	ldr	r2, [pc, #100]	@ (801a104 <UART_SetConfig+0x930>)
 801a0a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a0a4:	461a      	mov	r2, r3
 801a0a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a0a8:	fbb3 f3f2 	udiv	r3, r3, r2
 801a0ac:	005a      	lsls	r2, r3, #1
 801a0ae:	697b      	ldr	r3, [r7, #20]
 801a0b0:	685b      	ldr	r3, [r3, #4]
 801a0b2:	085b      	lsrs	r3, r3, #1
 801a0b4:	441a      	add	r2, r3
 801a0b6:	697b      	ldr	r3, [r7, #20]
 801a0b8:	685b      	ldr	r3, [r3, #4]
 801a0ba:	fbb2 f3f3 	udiv	r3, r2, r3
 801a0be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a0c2:	2b0f      	cmp	r3, #15
 801a0c4:	d916      	bls.n	801a0f4 <UART_SetConfig+0x920>
 801a0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a0c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a0cc:	d212      	bcs.n	801a0f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801a0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a0d0:	b29b      	uxth	r3, r3
 801a0d2:	f023 030f 	bic.w	r3, r3, #15
 801a0d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801a0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a0da:	085b      	lsrs	r3, r3, #1
 801a0dc:	b29b      	uxth	r3, r3
 801a0de:	f003 0307 	and.w	r3, r3, #7
 801a0e2:	b29a      	uxth	r2, r3
 801a0e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801a0e6:	4313      	orrs	r3, r2
 801a0e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801a0ea:	697b      	ldr	r3, [r7, #20]
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801a0f0:	60da      	str	r2, [r3, #12]
 801a0f2:	e0b9      	b.n	801a268 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801a0f4:	2301      	movs	r3, #1
 801a0f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801a0fa:	e0b5      	b.n	801a268 <UART_SetConfig+0xa94>
 801a0fc:	03d09000 	.word	0x03d09000
 801a100:	003d0900 	.word	0x003d0900
 801a104:	080382a0 	.word	0x080382a0
 801a108:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801a10c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801a110:	2b20      	cmp	r3, #32
 801a112:	dc49      	bgt.n	801a1a8 <UART_SetConfig+0x9d4>
 801a114:	2b00      	cmp	r3, #0
 801a116:	db7c      	blt.n	801a212 <UART_SetConfig+0xa3e>
 801a118:	2b20      	cmp	r3, #32
 801a11a:	d87a      	bhi.n	801a212 <UART_SetConfig+0xa3e>
 801a11c:	a201      	add	r2, pc, #4	@ (adr r2, 801a124 <UART_SetConfig+0x950>)
 801a11e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a122:	bf00      	nop
 801a124:	0801a1af 	.word	0x0801a1af
 801a128:	0801a1b7 	.word	0x0801a1b7
 801a12c:	0801a213 	.word	0x0801a213
 801a130:	0801a213 	.word	0x0801a213
 801a134:	0801a1bf 	.word	0x0801a1bf
 801a138:	0801a213 	.word	0x0801a213
 801a13c:	0801a213 	.word	0x0801a213
 801a140:	0801a213 	.word	0x0801a213
 801a144:	0801a1cf 	.word	0x0801a1cf
 801a148:	0801a213 	.word	0x0801a213
 801a14c:	0801a213 	.word	0x0801a213
 801a150:	0801a213 	.word	0x0801a213
 801a154:	0801a213 	.word	0x0801a213
 801a158:	0801a213 	.word	0x0801a213
 801a15c:	0801a213 	.word	0x0801a213
 801a160:	0801a213 	.word	0x0801a213
 801a164:	0801a1df 	.word	0x0801a1df
 801a168:	0801a213 	.word	0x0801a213
 801a16c:	0801a213 	.word	0x0801a213
 801a170:	0801a213 	.word	0x0801a213
 801a174:	0801a213 	.word	0x0801a213
 801a178:	0801a213 	.word	0x0801a213
 801a17c:	0801a213 	.word	0x0801a213
 801a180:	0801a213 	.word	0x0801a213
 801a184:	0801a213 	.word	0x0801a213
 801a188:	0801a213 	.word	0x0801a213
 801a18c:	0801a213 	.word	0x0801a213
 801a190:	0801a213 	.word	0x0801a213
 801a194:	0801a213 	.word	0x0801a213
 801a198:	0801a213 	.word	0x0801a213
 801a19c:	0801a213 	.word	0x0801a213
 801a1a0:	0801a213 	.word	0x0801a213
 801a1a4:	0801a205 	.word	0x0801a205
 801a1a8:	2b40      	cmp	r3, #64	@ 0x40
 801a1aa:	d02e      	beq.n	801a20a <UART_SetConfig+0xa36>
 801a1ac:	e031      	b.n	801a212 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a1ae:	f7fc f81f 	bl	80161f0 <HAL_RCC_GetPCLK1Freq>
 801a1b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801a1b4:	e033      	b.n	801a21e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a1b6:	f7fc f831 	bl	801621c <HAL_RCC_GetPCLK2Freq>
 801a1ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801a1bc:	e02f      	b.n	801a21e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801a1be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a1c2:	4618      	mov	r0, r3
 801a1c4:	f7fe f822 	bl	801820c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801a1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a1cc:	e027      	b.n	801a21e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801a1ce:	f107 0318 	add.w	r3, r7, #24
 801a1d2:	4618      	mov	r0, r3
 801a1d4:	f7fe f96e 	bl	80184b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801a1d8:	69fb      	ldr	r3, [r7, #28]
 801a1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a1dc:	e01f      	b.n	801a21e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a1de:	4b2d      	ldr	r3, [pc, #180]	@ (801a294 <UART_SetConfig+0xac0>)
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	f003 0320 	and.w	r3, r3, #32
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	d009      	beq.n	801a1fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801a1ea:	4b2a      	ldr	r3, [pc, #168]	@ (801a294 <UART_SetConfig+0xac0>)
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	08db      	lsrs	r3, r3, #3
 801a1f0:	f003 0303 	and.w	r3, r3, #3
 801a1f4:	4a28      	ldr	r2, [pc, #160]	@ (801a298 <UART_SetConfig+0xac4>)
 801a1f6:	fa22 f303 	lsr.w	r3, r2, r3
 801a1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801a1fc:	e00f      	b.n	801a21e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801a1fe:	4b26      	ldr	r3, [pc, #152]	@ (801a298 <UART_SetConfig+0xac4>)
 801a200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a202:	e00c      	b.n	801a21e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801a204:	4b25      	ldr	r3, [pc, #148]	@ (801a29c <UART_SetConfig+0xac8>)
 801a206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a208:	e009      	b.n	801a21e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a20a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a210:	e005      	b.n	801a21e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801a212:	2300      	movs	r3, #0
 801a214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801a216:	2301      	movs	r3, #1
 801a218:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801a21c:	bf00      	nop
    }

    if (pclk != 0U)
 801a21e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a220:	2b00      	cmp	r3, #0
 801a222:	d021      	beq.n	801a268 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a224:	697b      	ldr	r3, [r7, #20]
 801a226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a228:	4a1d      	ldr	r2, [pc, #116]	@ (801a2a0 <UART_SetConfig+0xacc>)
 801a22a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a22e:	461a      	mov	r2, r3
 801a230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a232:	fbb3 f2f2 	udiv	r2, r3, r2
 801a236:	697b      	ldr	r3, [r7, #20]
 801a238:	685b      	ldr	r3, [r3, #4]
 801a23a:	085b      	lsrs	r3, r3, #1
 801a23c:	441a      	add	r2, r3
 801a23e:	697b      	ldr	r3, [r7, #20]
 801a240:	685b      	ldr	r3, [r3, #4]
 801a242:	fbb2 f3f3 	udiv	r3, r2, r3
 801a246:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a24a:	2b0f      	cmp	r3, #15
 801a24c:	d909      	bls.n	801a262 <UART_SetConfig+0xa8e>
 801a24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a254:	d205      	bcs.n	801a262 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801a256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a258:	b29a      	uxth	r2, r3
 801a25a:	697b      	ldr	r3, [r7, #20]
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	60da      	str	r2, [r3, #12]
 801a260:	e002      	b.n	801a268 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801a262:	2301      	movs	r3, #1
 801a264:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801a268:	697b      	ldr	r3, [r7, #20]
 801a26a:	2201      	movs	r2, #1
 801a26c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801a270:	697b      	ldr	r3, [r7, #20]
 801a272:	2201      	movs	r2, #1
 801a274:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801a278:	697b      	ldr	r3, [r7, #20]
 801a27a:	2200      	movs	r2, #0
 801a27c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801a27e:	697b      	ldr	r3, [r7, #20]
 801a280:	2200      	movs	r2, #0
 801a282:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801a284:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801a288:	4618      	mov	r0, r3
 801a28a:	3748      	adds	r7, #72	@ 0x48
 801a28c:	46bd      	mov	sp, r7
 801a28e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a292:	bf00      	nop
 801a294:	58024400 	.word	0x58024400
 801a298:	03d09000 	.word	0x03d09000
 801a29c:	003d0900 	.word	0x003d0900
 801a2a0:	080382a0 	.word	0x080382a0

0801a2a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801a2a4:	b480      	push	{r7}
 801a2a6:	b083      	sub	sp, #12
 801a2a8:	af00      	add	r7, sp, #0
 801a2aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a2b0:	f003 0308 	and.w	r3, r3, #8
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d00a      	beq.n	801a2ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	681b      	ldr	r3, [r3, #0]
 801a2bc:	685b      	ldr	r3, [r3, #4]
 801a2be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	430a      	orrs	r2, r1
 801a2cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a2d2:	f003 0301 	and.w	r3, r3, #1
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d00a      	beq.n	801a2f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	685b      	ldr	r3, [r3, #4]
 801a2e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	681b      	ldr	r3, [r3, #0]
 801a2ec:	430a      	orrs	r2, r1
 801a2ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a2f4:	f003 0302 	and.w	r3, r3, #2
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d00a      	beq.n	801a312 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	685b      	ldr	r3, [r3, #4]
 801a302:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	681b      	ldr	r3, [r3, #0]
 801a30e:	430a      	orrs	r2, r1
 801a310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a316:	f003 0304 	and.w	r3, r3, #4
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	d00a      	beq.n	801a334 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	685b      	ldr	r3, [r3, #4]
 801a324:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	430a      	orrs	r2, r1
 801a332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a338:	f003 0310 	and.w	r3, r3, #16
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d00a      	beq.n	801a356 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	681b      	ldr	r3, [r3, #0]
 801a344:	689b      	ldr	r3, [r3, #8]
 801a346:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	430a      	orrs	r2, r1
 801a354:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a35a:	f003 0320 	and.w	r3, r3, #32
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d00a      	beq.n	801a378 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	689b      	ldr	r3, [r3, #8]
 801a368:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	430a      	orrs	r2, r1
 801a376:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a37c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a380:	2b00      	cmp	r3, #0
 801a382:	d01a      	beq.n	801a3ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	681b      	ldr	r3, [r3, #0]
 801a388:	685b      	ldr	r3, [r3, #4]
 801a38a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	430a      	orrs	r2, r1
 801a398:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a39e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801a3a2:	d10a      	bne.n	801a3ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	685b      	ldr	r3, [r3, #4]
 801a3aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	430a      	orrs	r2, r1
 801a3b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a3be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	d00a      	beq.n	801a3dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	685b      	ldr	r3, [r3, #4]
 801a3cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	430a      	orrs	r2, r1
 801a3da:	605a      	str	r2, [r3, #4]
  }
}
 801a3dc:	bf00      	nop
 801a3de:	370c      	adds	r7, #12
 801a3e0:	46bd      	mov	sp, r7
 801a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3e6:	4770      	bx	lr

0801a3e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801a3e8:	b580      	push	{r7, lr}
 801a3ea:	b098      	sub	sp, #96	@ 0x60
 801a3ec:	af02      	add	r7, sp, #8
 801a3ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	2200      	movs	r2, #0
 801a3f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801a3f8:	f7f7 fbd0 	bl	8011b9c <HAL_GetTick>
 801a3fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	681b      	ldr	r3, [r3, #0]
 801a404:	f003 0308 	and.w	r3, r3, #8
 801a408:	2b08      	cmp	r3, #8
 801a40a:	d12f      	bne.n	801a46c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a40c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801a410:	9300      	str	r3, [sp, #0]
 801a412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a414:	2200      	movs	r2, #0
 801a416:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801a41a:	6878      	ldr	r0, [r7, #4]
 801a41c:	f000 f88e 	bl	801a53c <UART_WaitOnFlagUntilTimeout>
 801a420:	4603      	mov	r3, r0
 801a422:	2b00      	cmp	r3, #0
 801a424:	d022      	beq.n	801a46c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a42e:	e853 3f00 	ldrex	r3, [r3]
 801a432:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a436:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a43a:	653b      	str	r3, [r7, #80]	@ 0x50
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	461a      	mov	r2, r3
 801a442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a444:	647b      	str	r3, [r7, #68]	@ 0x44
 801a446:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a448:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a44a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a44c:	e841 2300 	strex	r3, r2, [r1]
 801a450:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a454:	2b00      	cmp	r3, #0
 801a456:	d1e6      	bne.n	801a426 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	2220      	movs	r2, #32
 801a45c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	2200      	movs	r2, #0
 801a464:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a468:	2303      	movs	r3, #3
 801a46a:	e063      	b.n	801a534 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	f003 0304 	and.w	r3, r3, #4
 801a476:	2b04      	cmp	r3, #4
 801a478:	d149      	bne.n	801a50e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a47a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801a47e:	9300      	str	r3, [sp, #0]
 801a480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a482:	2200      	movs	r2, #0
 801a484:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801a488:	6878      	ldr	r0, [r7, #4]
 801a48a:	f000 f857 	bl	801a53c <UART_WaitOnFlagUntilTimeout>
 801a48e:	4603      	mov	r3, r0
 801a490:	2b00      	cmp	r3, #0
 801a492:	d03c      	beq.n	801a50e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a49c:	e853 3f00 	ldrex	r3, [r3]
 801a4a0:	623b      	str	r3, [r7, #32]
   return(result);
 801a4a2:	6a3b      	ldr	r3, [r7, #32]
 801a4a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a4a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	461a      	mov	r2, r3
 801a4b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a4b2:	633b      	str	r3, [r7, #48]	@ 0x30
 801a4b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a4b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a4b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a4ba:	e841 2300 	strex	r3, r2, [r1]
 801a4be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	d1e6      	bne.n	801a494 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	3308      	adds	r3, #8
 801a4cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a4ce:	693b      	ldr	r3, [r7, #16]
 801a4d0:	e853 3f00 	ldrex	r3, [r3]
 801a4d4:	60fb      	str	r3, [r7, #12]
   return(result);
 801a4d6:	68fb      	ldr	r3, [r7, #12]
 801a4d8:	f023 0301 	bic.w	r3, r3, #1
 801a4dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	3308      	adds	r3, #8
 801a4e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a4e6:	61fa      	str	r2, [r7, #28]
 801a4e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a4ea:	69b9      	ldr	r1, [r7, #24]
 801a4ec:	69fa      	ldr	r2, [r7, #28]
 801a4ee:	e841 2300 	strex	r3, r2, [r1]
 801a4f2:	617b      	str	r3, [r7, #20]
   return(result);
 801a4f4:	697b      	ldr	r3, [r7, #20]
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d1e5      	bne.n	801a4c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	2220      	movs	r2, #32
 801a4fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	2200      	movs	r2, #0
 801a506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a50a:	2303      	movs	r3, #3
 801a50c:	e012      	b.n	801a534 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	2220      	movs	r2, #32
 801a512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	2220      	movs	r2, #32
 801a51a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	2200      	movs	r2, #0
 801a522:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	2200      	movs	r2, #0
 801a528:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	2200      	movs	r2, #0
 801a52e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a532:	2300      	movs	r3, #0
}
 801a534:	4618      	mov	r0, r3
 801a536:	3758      	adds	r7, #88	@ 0x58
 801a538:	46bd      	mov	sp, r7
 801a53a:	bd80      	pop	{r7, pc}

0801a53c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801a53c:	b580      	push	{r7, lr}
 801a53e:	b084      	sub	sp, #16
 801a540:	af00      	add	r7, sp, #0
 801a542:	60f8      	str	r0, [r7, #12]
 801a544:	60b9      	str	r1, [r7, #8]
 801a546:	603b      	str	r3, [r7, #0]
 801a548:	4613      	mov	r3, r2
 801a54a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a54c:	e04f      	b.n	801a5ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a54e:	69bb      	ldr	r3, [r7, #24]
 801a550:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a554:	d04b      	beq.n	801a5ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a556:	f7f7 fb21 	bl	8011b9c <HAL_GetTick>
 801a55a:	4602      	mov	r2, r0
 801a55c:	683b      	ldr	r3, [r7, #0]
 801a55e:	1ad3      	subs	r3, r2, r3
 801a560:	69ba      	ldr	r2, [r7, #24]
 801a562:	429a      	cmp	r2, r3
 801a564:	d302      	bcc.n	801a56c <UART_WaitOnFlagUntilTimeout+0x30>
 801a566:	69bb      	ldr	r3, [r7, #24]
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d101      	bne.n	801a570 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801a56c:	2303      	movs	r3, #3
 801a56e:	e04e      	b.n	801a60e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	f003 0304 	and.w	r3, r3, #4
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d037      	beq.n	801a5ee <UART_WaitOnFlagUntilTimeout+0xb2>
 801a57e:	68bb      	ldr	r3, [r7, #8]
 801a580:	2b80      	cmp	r3, #128	@ 0x80
 801a582:	d034      	beq.n	801a5ee <UART_WaitOnFlagUntilTimeout+0xb2>
 801a584:	68bb      	ldr	r3, [r7, #8]
 801a586:	2b40      	cmp	r3, #64	@ 0x40
 801a588:	d031      	beq.n	801a5ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801a58a:	68fb      	ldr	r3, [r7, #12]
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	69db      	ldr	r3, [r3, #28]
 801a590:	f003 0308 	and.w	r3, r3, #8
 801a594:	2b08      	cmp	r3, #8
 801a596:	d110      	bne.n	801a5ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801a598:	68fb      	ldr	r3, [r7, #12]
 801a59a:	681b      	ldr	r3, [r3, #0]
 801a59c:	2208      	movs	r2, #8
 801a59e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801a5a0:	68f8      	ldr	r0, [r7, #12]
 801a5a2:	f000 f839 	bl	801a618 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801a5a6:	68fb      	ldr	r3, [r7, #12]
 801a5a8:	2208      	movs	r2, #8
 801a5aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	2200      	movs	r2, #0
 801a5b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801a5b6:	2301      	movs	r3, #1
 801a5b8:	e029      	b.n	801a60e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801a5ba:	68fb      	ldr	r3, [r7, #12]
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	69db      	ldr	r3, [r3, #28]
 801a5c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801a5c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801a5c8:	d111      	bne.n	801a5ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801a5ca:	68fb      	ldr	r3, [r7, #12]
 801a5cc:	681b      	ldr	r3, [r3, #0]
 801a5ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a5d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801a5d4:	68f8      	ldr	r0, [r7, #12]
 801a5d6:	f000 f81f 	bl	801a618 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801a5da:	68fb      	ldr	r3, [r7, #12]
 801a5dc:	2220      	movs	r2, #32
 801a5de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801a5e2:	68fb      	ldr	r3, [r7, #12]
 801a5e4:	2200      	movs	r2, #0
 801a5e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801a5ea:	2303      	movs	r3, #3
 801a5ec:	e00f      	b.n	801a60e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a5ee:	68fb      	ldr	r3, [r7, #12]
 801a5f0:	681b      	ldr	r3, [r3, #0]
 801a5f2:	69da      	ldr	r2, [r3, #28]
 801a5f4:	68bb      	ldr	r3, [r7, #8]
 801a5f6:	4013      	ands	r3, r2
 801a5f8:	68ba      	ldr	r2, [r7, #8]
 801a5fa:	429a      	cmp	r2, r3
 801a5fc:	bf0c      	ite	eq
 801a5fe:	2301      	moveq	r3, #1
 801a600:	2300      	movne	r3, #0
 801a602:	b2db      	uxtb	r3, r3
 801a604:	461a      	mov	r2, r3
 801a606:	79fb      	ldrb	r3, [r7, #7]
 801a608:	429a      	cmp	r2, r3
 801a60a:	d0a0      	beq.n	801a54e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801a60c:	2300      	movs	r3, #0
}
 801a60e:	4618      	mov	r0, r3
 801a610:	3710      	adds	r7, #16
 801a612:	46bd      	mov	sp, r7
 801a614:	bd80      	pop	{r7, pc}
	...

0801a618 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801a618:	b480      	push	{r7}
 801a61a:	b095      	sub	sp, #84	@ 0x54
 801a61c:	af00      	add	r7, sp, #0
 801a61e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a628:	e853 3f00 	ldrex	r3, [r3]
 801a62c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a630:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a634:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	461a      	mov	r2, r3
 801a63c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a63e:	643b      	str	r3, [r7, #64]	@ 0x40
 801a640:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a642:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a644:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a646:	e841 2300 	strex	r3, r2, [r1]
 801a64a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a64e:	2b00      	cmp	r3, #0
 801a650:	d1e6      	bne.n	801a620 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	3308      	adds	r3, #8
 801a658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a65a:	6a3b      	ldr	r3, [r7, #32]
 801a65c:	e853 3f00 	ldrex	r3, [r3]
 801a660:	61fb      	str	r3, [r7, #28]
   return(result);
 801a662:	69fa      	ldr	r2, [r7, #28]
 801a664:	4b1e      	ldr	r3, [pc, #120]	@ (801a6e0 <UART_EndRxTransfer+0xc8>)
 801a666:	4013      	ands	r3, r2
 801a668:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	681b      	ldr	r3, [r3, #0]
 801a66e:	3308      	adds	r3, #8
 801a670:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a672:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a674:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a676:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a67a:	e841 2300 	strex	r3, r2, [r1]
 801a67e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a682:	2b00      	cmp	r3, #0
 801a684:	d1e5      	bne.n	801a652 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a68a:	2b01      	cmp	r3, #1
 801a68c:	d118      	bne.n	801a6c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	681b      	ldr	r3, [r3, #0]
 801a692:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a694:	68fb      	ldr	r3, [r7, #12]
 801a696:	e853 3f00 	ldrex	r3, [r3]
 801a69a:	60bb      	str	r3, [r7, #8]
   return(result);
 801a69c:	68bb      	ldr	r3, [r7, #8]
 801a69e:	f023 0310 	bic.w	r3, r3, #16
 801a6a2:	647b      	str	r3, [r7, #68]	@ 0x44
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	461a      	mov	r2, r3
 801a6aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a6ac:	61bb      	str	r3, [r7, #24]
 801a6ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a6b0:	6979      	ldr	r1, [r7, #20]
 801a6b2:	69ba      	ldr	r2, [r7, #24]
 801a6b4:	e841 2300 	strex	r3, r2, [r1]
 801a6b8:	613b      	str	r3, [r7, #16]
   return(result);
 801a6ba:	693b      	ldr	r3, [r7, #16]
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d1e6      	bne.n	801a68e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	2220      	movs	r2, #32
 801a6c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	2200      	movs	r2, #0
 801a6cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	2200      	movs	r2, #0
 801a6d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801a6d4:	bf00      	nop
 801a6d6:	3754      	adds	r7, #84	@ 0x54
 801a6d8:	46bd      	mov	sp, r7
 801a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6de:	4770      	bx	lr
 801a6e0:	effffffe 	.word	0xeffffffe

0801a6e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801a6e4:	b480      	push	{r7}
 801a6e6:	b085      	sub	sp, #20
 801a6e8:	af00      	add	r7, sp, #0
 801a6ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a6f2:	2b01      	cmp	r3, #1
 801a6f4:	d101      	bne.n	801a6fa <HAL_UARTEx_DisableFifoMode+0x16>
 801a6f6:	2302      	movs	r3, #2
 801a6f8:	e027      	b.n	801a74a <HAL_UARTEx_DisableFifoMode+0x66>
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	2201      	movs	r2, #1
 801a6fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	2224      	movs	r2, #36	@ 0x24
 801a706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	681b      	ldr	r3, [r3, #0]
 801a70e:	681b      	ldr	r3, [r3, #0]
 801a710:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	681b      	ldr	r3, [r3, #0]
 801a716:	681a      	ldr	r2, [r3, #0]
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	681b      	ldr	r3, [r3, #0]
 801a71c:	f022 0201 	bic.w	r2, r2, #1
 801a720:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801a722:	68fb      	ldr	r3, [r7, #12]
 801a724:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801a728:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	2200      	movs	r2, #0
 801a72e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	68fa      	ldr	r2, [r7, #12]
 801a736:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	2220      	movs	r2, #32
 801a73c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a740:	687b      	ldr	r3, [r7, #4]
 801a742:	2200      	movs	r2, #0
 801a744:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a748:	2300      	movs	r3, #0
}
 801a74a:	4618      	mov	r0, r3
 801a74c:	3714      	adds	r7, #20
 801a74e:	46bd      	mov	sp, r7
 801a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a754:	4770      	bx	lr

0801a756 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a756:	b580      	push	{r7, lr}
 801a758:	b084      	sub	sp, #16
 801a75a:	af00      	add	r7, sp, #0
 801a75c:	6078      	str	r0, [r7, #4]
 801a75e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a766:	2b01      	cmp	r3, #1
 801a768:	d101      	bne.n	801a76e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801a76a:	2302      	movs	r3, #2
 801a76c:	e02d      	b.n	801a7ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	2201      	movs	r2, #1
 801a772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	2224      	movs	r2, #36	@ 0x24
 801a77a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	681b      	ldr	r3, [r3, #0]
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	681b      	ldr	r3, [r3, #0]
 801a78a:	681a      	ldr	r2, [r3, #0]
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	681b      	ldr	r3, [r3, #0]
 801a790:	f022 0201 	bic.w	r2, r2, #1
 801a794:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	689b      	ldr	r3, [r3, #8]
 801a79c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	681b      	ldr	r3, [r3, #0]
 801a7a4:	683a      	ldr	r2, [r7, #0]
 801a7a6:	430a      	orrs	r2, r1
 801a7a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a7aa:	6878      	ldr	r0, [r7, #4]
 801a7ac:	f000 f850 	bl	801a850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	68fa      	ldr	r2, [r7, #12]
 801a7b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	2220      	movs	r2, #32
 801a7bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	2200      	movs	r2, #0
 801a7c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a7c8:	2300      	movs	r3, #0
}
 801a7ca:	4618      	mov	r0, r3
 801a7cc:	3710      	adds	r7, #16
 801a7ce:	46bd      	mov	sp, r7
 801a7d0:	bd80      	pop	{r7, pc}

0801a7d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a7d2:	b580      	push	{r7, lr}
 801a7d4:	b084      	sub	sp, #16
 801a7d6:	af00      	add	r7, sp, #0
 801a7d8:	6078      	str	r0, [r7, #4]
 801a7da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a7e2:	2b01      	cmp	r3, #1
 801a7e4:	d101      	bne.n	801a7ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801a7e6:	2302      	movs	r3, #2
 801a7e8:	e02d      	b.n	801a846 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	2201      	movs	r2, #1
 801a7ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	2224      	movs	r2, #36	@ 0x24
 801a7f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	681b      	ldr	r3, [r3, #0]
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	681a      	ldr	r2, [r3, #0]
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	f022 0201 	bic.w	r2, r2, #1
 801a810:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	689b      	ldr	r3, [r3, #8]
 801a818:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	683a      	ldr	r2, [r7, #0]
 801a822:	430a      	orrs	r2, r1
 801a824:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a826:	6878      	ldr	r0, [r7, #4]
 801a828:	f000 f812 	bl	801a850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	68fa      	ldr	r2, [r7, #12]
 801a832:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	2220      	movs	r2, #32
 801a838:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	2200      	movs	r2, #0
 801a840:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a844:	2300      	movs	r3, #0
}
 801a846:	4618      	mov	r0, r3
 801a848:	3710      	adds	r7, #16
 801a84a:	46bd      	mov	sp, r7
 801a84c:	bd80      	pop	{r7, pc}
	...

0801a850 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801a850:	b480      	push	{r7}
 801a852:	b085      	sub	sp, #20
 801a854:	af00      	add	r7, sp, #0
 801a856:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d108      	bne.n	801a872 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	2201      	movs	r2, #1
 801a864:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	2201      	movs	r2, #1
 801a86c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801a870:	e031      	b.n	801a8d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801a872:	2310      	movs	r3, #16
 801a874:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801a876:	2310      	movs	r3, #16
 801a878:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	689b      	ldr	r3, [r3, #8]
 801a880:	0e5b      	lsrs	r3, r3, #25
 801a882:	b2db      	uxtb	r3, r3
 801a884:	f003 0307 	and.w	r3, r3, #7
 801a888:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	689b      	ldr	r3, [r3, #8]
 801a890:	0f5b      	lsrs	r3, r3, #29
 801a892:	b2db      	uxtb	r3, r3
 801a894:	f003 0307 	and.w	r3, r3, #7
 801a898:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a89a:	7bbb      	ldrb	r3, [r7, #14]
 801a89c:	7b3a      	ldrb	r2, [r7, #12]
 801a89e:	4911      	ldr	r1, [pc, #68]	@ (801a8e4 <UARTEx_SetNbDataToProcess+0x94>)
 801a8a0:	5c8a      	ldrb	r2, [r1, r2]
 801a8a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801a8a6:	7b3a      	ldrb	r2, [r7, #12]
 801a8a8:	490f      	ldr	r1, [pc, #60]	@ (801a8e8 <UARTEx_SetNbDataToProcess+0x98>)
 801a8aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a8ac:	fb93 f3f2 	sdiv	r3, r3, r2
 801a8b0:	b29a      	uxth	r2, r3
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a8b8:	7bfb      	ldrb	r3, [r7, #15]
 801a8ba:	7b7a      	ldrb	r2, [r7, #13]
 801a8bc:	4909      	ldr	r1, [pc, #36]	@ (801a8e4 <UARTEx_SetNbDataToProcess+0x94>)
 801a8be:	5c8a      	ldrb	r2, [r1, r2]
 801a8c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801a8c4:	7b7a      	ldrb	r2, [r7, #13]
 801a8c6:	4908      	ldr	r1, [pc, #32]	@ (801a8e8 <UARTEx_SetNbDataToProcess+0x98>)
 801a8c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a8ca:	fb93 f3f2 	sdiv	r3, r3, r2
 801a8ce:	b29a      	uxth	r2, r3
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801a8d6:	bf00      	nop
 801a8d8:	3714      	adds	r7, #20
 801a8da:	46bd      	mov	sp, r7
 801a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8e0:	4770      	bx	lr
 801a8e2:	bf00      	nop
 801a8e4:	080382b8 	.word	0x080382b8
 801a8e8:	080382c0 	.word	0x080382c0

0801a8ec <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 801a8ec:	b580      	push	{r7, lr}
 801a8ee:	b082      	sub	sp, #8
 801a8f0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 801a8f2:	4b26      	ldr	r3, [pc, #152]	@ (801a98c <_DoInit+0xa0>)
 801a8f4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 801a8f6:	22a8      	movs	r2, #168	@ 0xa8
 801a8f8:	2100      	movs	r1, #0
 801a8fa:	6838      	ldr	r0, [r7, #0]
 801a8fc:	f019 fac9 	bl	8033e92 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 801a900:	683b      	ldr	r3, [r7, #0]
 801a902:	2203      	movs	r2, #3
 801a904:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 801a906:	683b      	ldr	r3, [r7, #0]
 801a908:	2203      	movs	r2, #3
 801a90a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 801a90c:	683b      	ldr	r3, [r7, #0]
 801a90e:	4a20      	ldr	r2, [pc, #128]	@ (801a990 <_DoInit+0xa4>)
 801a910:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 801a912:	683b      	ldr	r3, [r7, #0]
 801a914:	4a1f      	ldr	r2, [pc, #124]	@ (801a994 <_DoInit+0xa8>)
 801a916:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 801a918:	683b      	ldr	r3, [r7, #0]
 801a91a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801a91e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 801a920:	683b      	ldr	r3, [r7, #0]
 801a922:	2200      	movs	r2, #0
 801a924:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 801a926:	683b      	ldr	r3, [r7, #0]
 801a928:	2200      	movs	r2, #0
 801a92a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 801a92c:	683b      	ldr	r3, [r7, #0]
 801a92e:	2200      	movs	r2, #0
 801a930:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 801a932:	683b      	ldr	r3, [r7, #0]
 801a934:	4a16      	ldr	r2, [pc, #88]	@ (801a990 <_DoInit+0xa4>)
 801a936:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 801a938:	683b      	ldr	r3, [r7, #0]
 801a93a:	4a17      	ldr	r2, [pc, #92]	@ (801a998 <_DoInit+0xac>)
 801a93c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 801a93e:	683b      	ldr	r3, [r7, #0]
 801a940:	2210      	movs	r2, #16
 801a942:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 801a944:	683b      	ldr	r3, [r7, #0]
 801a946:	2200      	movs	r2, #0
 801a948:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 801a94a:	683b      	ldr	r3, [r7, #0]
 801a94c:	2200      	movs	r2, #0
 801a94e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 801a950:	683b      	ldr	r3, [r7, #0]
 801a952:	2200      	movs	r2, #0
 801a954:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 801a956:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 801a95a:	2300      	movs	r3, #0
 801a95c:	607b      	str	r3, [r7, #4]
 801a95e:	e00c      	b.n	801a97a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	f1c3 030f 	rsb	r3, r3, #15
 801a966:	4a0d      	ldr	r2, [pc, #52]	@ (801a99c <_DoInit+0xb0>)
 801a968:	5cd1      	ldrb	r1, [r2, r3]
 801a96a:	683a      	ldr	r2, [r7, #0]
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	4413      	add	r3, r2
 801a970:	460a      	mov	r2, r1
 801a972:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	3301      	adds	r3, #1
 801a978:	607b      	str	r3, [r7, #4]
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	2b0f      	cmp	r3, #15
 801a97e:	d9ef      	bls.n	801a960 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 801a980:	f3bf 8f5f 	dmb	sy
}
 801a984:	bf00      	nop
 801a986:	3708      	adds	r7, #8
 801a988:	46bd      	mov	sp, r7
 801a98a:	bd80      	pop	{r7, pc}
 801a98c:	24031628 	.word	0x24031628
 801a990:	080377c8 	.word	0x080377c8
 801a994:	240316d0 	.word	0x240316d0
 801a998:	24031ad0 	.word	0x24031ad0
 801a99c:	080382c8 	.word	0x080382c8

0801a9a0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 801a9a0:	b580      	push	{r7, lr}
 801a9a2:	b08a      	sub	sp, #40	@ 0x28
 801a9a4:	af00      	add	r7, sp, #0
 801a9a6:	60f8      	str	r0, [r7, #12]
 801a9a8:	60b9      	str	r1, [r7, #8]
 801a9aa:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 801a9ac:	2300      	movs	r3, #0
 801a9ae:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 801a9b0:	68fb      	ldr	r3, [r7, #12]
 801a9b2:	68db      	ldr	r3, [r3, #12]
 801a9b4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	691b      	ldr	r3, [r3, #16]
 801a9ba:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 801a9bc:	69ba      	ldr	r2, [r7, #24]
 801a9be:	69fb      	ldr	r3, [r7, #28]
 801a9c0:	429a      	cmp	r2, r3
 801a9c2:	d905      	bls.n	801a9d0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 801a9c4:	69ba      	ldr	r2, [r7, #24]
 801a9c6:	69fb      	ldr	r3, [r7, #28]
 801a9c8:	1ad3      	subs	r3, r2, r3
 801a9ca:	3b01      	subs	r3, #1
 801a9cc:	627b      	str	r3, [r7, #36]	@ 0x24
 801a9ce:	e007      	b.n	801a9e0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 801a9d0:	68fb      	ldr	r3, [r7, #12]
 801a9d2:	689a      	ldr	r2, [r3, #8]
 801a9d4:	69b9      	ldr	r1, [r7, #24]
 801a9d6:	69fb      	ldr	r3, [r7, #28]
 801a9d8:	1acb      	subs	r3, r1, r3
 801a9da:	4413      	add	r3, r2
 801a9dc:	3b01      	subs	r3, #1
 801a9de:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 801a9e0:	68fb      	ldr	r3, [r7, #12]
 801a9e2:	689a      	ldr	r2, [r3, #8]
 801a9e4:	69fb      	ldr	r3, [r7, #28]
 801a9e6:	1ad3      	subs	r3, r2, r3
 801a9e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a9ea:	4293      	cmp	r3, r2
 801a9ec:	bf28      	it	cs
 801a9ee:	4613      	movcs	r3, r2
 801a9f0:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 801a9f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	4293      	cmp	r3, r2
 801a9f8:	bf28      	it	cs
 801a9fa:	4613      	movcs	r3, r2
 801a9fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 801a9fe:	68fb      	ldr	r3, [r7, #12]
 801aa00:	685a      	ldr	r2, [r3, #4]
 801aa02:	69fb      	ldr	r3, [r7, #28]
 801aa04:	4413      	add	r3, r2
 801aa06:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 801aa08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801aa0a:	68b9      	ldr	r1, [r7, #8]
 801aa0c:	6978      	ldr	r0, [r7, #20]
 801aa0e:	f019 fae2 	bl	8033fd6 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 801aa12:	6a3a      	ldr	r2, [r7, #32]
 801aa14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa16:	4413      	add	r3, r2
 801aa18:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 801aa1a:	68ba      	ldr	r2, [r7, #8]
 801aa1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa1e:	4413      	add	r3, r2
 801aa20:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 801aa22:	687a      	ldr	r2, [r7, #4]
 801aa24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa26:	1ad3      	subs	r3, r2, r3
 801aa28:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 801aa2a:	69fa      	ldr	r2, [r7, #28]
 801aa2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa2e:	4413      	add	r3, r2
 801aa30:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 801aa32:	68fb      	ldr	r3, [r7, #12]
 801aa34:	689b      	ldr	r3, [r3, #8]
 801aa36:	69fa      	ldr	r2, [r7, #28]
 801aa38:	429a      	cmp	r2, r3
 801aa3a:	d101      	bne.n	801aa40 <_WriteBlocking+0xa0>
      WrOff = 0u;
 801aa3c:	2300      	movs	r3, #0
 801aa3e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 801aa40:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 801aa44:	68fb      	ldr	r3, [r7, #12]
 801aa46:	69fa      	ldr	r2, [r7, #28]
 801aa48:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	2b00      	cmp	r3, #0
 801aa4e:	d1b2      	bne.n	801a9b6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 801aa50:	6a3b      	ldr	r3, [r7, #32]
}
 801aa52:	4618      	mov	r0, r3
 801aa54:	3728      	adds	r7, #40	@ 0x28
 801aa56:	46bd      	mov	sp, r7
 801aa58:	bd80      	pop	{r7, pc}

0801aa5a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 801aa5a:	b580      	push	{r7, lr}
 801aa5c:	b088      	sub	sp, #32
 801aa5e:	af00      	add	r7, sp, #0
 801aa60:	60f8      	str	r0, [r7, #12]
 801aa62:	60b9      	str	r1, [r7, #8]
 801aa64:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 801aa66:	68fb      	ldr	r3, [r7, #12]
 801aa68:	68db      	ldr	r3, [r3, #12]
 801aa6a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 801aa6c:	68fb      	ldr	r3, [r7, #12]
 801aa6e:	689a      	ldr	r2, [r3, #8]
 801aa70:	69fb      	ldr	r3, [r7, #28]
 801aa72:	1ad3      	subs	r3, r2, r3
 801aa74:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 801aa76:	69ba      	ldr	r2, [r7, #24]
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	429a      	cmp	r2, r3
 801aa7c:	d911      	bls.n	801aaa2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 801aa7e:	68fb      	ldr	r3, [r7, #12]
 801aa80:	685a      	ldr	r2, [r3, #4]
 801aa82:	69fb      	ldr	r3, [r7, #28]
 801aa84:	4413      	add	r3, r2
 801aa86:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 801aa88:	687a      	ldr	r2, [r7, #4]
 801aa8a:	68b9      	ldr	r1, [r7, #8]
 801aa8c:	6938      	ldr	r0, [r7, #16]
 801aa8e:	f019 faa2 	bl	8033fd6 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 801aa92:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 801aa96:	69fa      	ldr	r2, [r7, #28]
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	441a      	add	r2, r3
 801aa9c:	68fb      	ldr	r3, [r7, #12]
 801aa9e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 801aaa0:	e01f      	b.n	801aae2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 801aaa2:	69bb      	ldr	r3, [r7, #24]
 801aaa4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 801aaa6:	68fb      	ldr	r3, [r7, #12]
 801aaa8:	685a      	ldr	r2, [r3, #4]
 801aaaa:	69fb      	ldr	r3, [r7, #28]
 801aaac:	4413      	add	r3, r2
 801aaae:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 801aab0:	697a      	ldr	r2, [r7, #20]
 801aab2:	68b9      	ldr	r1, [r7, #8]
 801aab4:	6938      	ldr	r0, [r7, #16]
 801aab6:	f019 fa8e 	bl	8033fd6 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 801aaba:	687a      	ldr	r2, [r7, #4]
 801aabc:	69bb      	ldr	r3, [r7, #24]
 801aabe:	1ad3      	subs	r3, r2, r3
 801aac0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 801aac2:	68fb      	ldr	r3, [r7, #12]
 801aac4:	685b      	ldr	r3, [r3, #4]
 801aac6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 801aac8:	68ba      	ldr	r2, [r7, #8]
 801aaca:	69bb      	ldr	r3, [r7, #24]
 801aacc:	4413      	add	r3, r2
 801aace:	697a      	ldr	r2, [r7, #20]
 801aad0:	4619      	mov	r1, r3
 801aad2:	6938      	ldr	r0, [r7, #16]
 801aad4:	f019 fa7f 	bl	8033fd6 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 801aad8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 801aadc:	68fb      	ldr	r3, [r7, #12]
 801aade:	697a      	ldr	r2, [r7, #20]
 801aae0:	60da      	str	r2, [r3, #12]
}
 801aae2:	bf00      	nop
 801aae4:	3720      	adds	r7, #32
 801aae6:	46bd      	mov	sp, r7
 801aae8:	bd80      	pop	{r7, pc}

0801aaea <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 801aaea:	b480      	push	{r7}
 801aaec:	b087      	sub	sp, #28
 801aaee:	af00      	add	r7, sp, #0
 801aaf0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	691b      	ldr	r3, [r3, #16]
 801aaf6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	68db      	ldr	r3, [r3, #12]
 801aafc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 801aafe:	693a      	ldr	r2, [r7, #16]
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	429a      	cmp	r2, r3
 801ab04:	d808      	bhi.n	801ab18 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	689a      	ldr	r2, [r3, #8]
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	1ad2      	subs	r2, r2, r3
 801ab0e:	693b      	ldr	r3, [r7, #16]
 801ab10:	4413      	add	r3, r2
 801ab12:	3b01      	subs	r3, #1
 801ab14:	617b      	str	r3, [r7, #20]
 801ab16:	e004      	b.n	801ab22 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 801ab18:	693a      	ldr	r2, [r7, #16]
 801ab1a:	68fb      	ldr	r3, [r7, #12]
 801ab1c:	1ad3      	subs	r3, r2, r3
 801ab1e:	3b01      	subs	r3, #1
 801ab20:	617b      	str	r3, [r7, #20]
  }
  return r;
 801ab22:	697b      	ldr	r3, [r7, #20]
}
 801ab24:	4618      	mov	r0, r3
 801ab26:	371c      	adds	r7, #28
 801ab28:	46bd      	mov	sp, r7
 801ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab2e:	4770      	bx	lr

0801ab30 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 801ab30:	b580      	push	{r7, lr}
 801ab32:	b088      	sub	sp, #32
 801ab34:	af00      	add	r7, sp, #0
 801ab36:	60f8      	str	r0, [r7, #12]
 801ab38:	60b9      	str	r1, [r7, #8]
 801ab3a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 801ab3c:	68bb      	ldr	r3, [r7, #8]
 801ab3e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 801ab40:	68fb      	ldr	r3, [r7, #12]
 801ab42:	1c5a      	adds	r2, r3, #1
 801ab44:	4613      	mov	r3, r2
 801ab46:	005b      	lsls	r3, r3, #1
 801ab48:	4413      	add	r3, r2
 801ab4a:	00db      	lsls	r3, r3, #3
 801ab4c:	4a1f      	ldr	r2, [pc, #124]	@ (801abcc <SEGGER_RTT_WriteNoLock+0x9c>)
 801ab4e:	4413      	add	r3, r2
 801ab50:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 801ab52:	697b      	ldr	r3, [r7, #20]
 801ab54:	695b      	ldr	r3, [r3, #20]
 801ab56:	2b02      	cmp	r3, #2
 801ab58:	d029      	beq.n	801abae <SEGGER_RTT_WriteNoLock+0x7e>
 801ab5a:	2b02      	cmp	r3, #2
 801ab5c:	d82e      	bhi.n	801abbc <SEGGER_RTT_WriteNoLock+0x8c>
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	d002      	beq.n	801ab68 <SEGGER_RTT_WriteNoLock+0x38>
 801ab62:	2b01      	cmp	r3, #1
 801ab64:	d013      	beq.n	801ab8e <SEGGER_RTT_WriteNoLock+0x5e>
 801ab66:	e029      	b.n	801abbc <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 801ab68:	6978      	ldr	r0, [r7, #20]
 801ab6a:	f7ff ffbe 	bl	801aaea <_GetAvailWriteSpace>
 801ab6e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 801ab70:	693a      	ldr	r2, [r7, #16]
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	429a      	cmp	r2, r3
 801ab76:	d202      	bcs.n	801ab7e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 801ab78:	2300      	movs	r3, #0
 801ab7a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 801ab7c:	e021      	b.n	801abc2 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 801ab82:	687a      	ldr	r2, [r7, #4]
 801ab84:	69b9      	ldr	r1, [r7, #24]
 801ab86:	6978      	ldr	r0, [r7, #20]
 801ab88:	f7ff ff67 	bl	801aa5a <_WriteNoCheck>
    break;
 801ab8c:	e019      	b.n	801abc2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 801ab8e:	6978      	ldr	r0, [r7, #20]
 801ab90:	f7ff ffab 	bl	801aaea <_GetAvailWriteSpace>
 801ab94:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 801ab96:	687a      	ldr	r2, [r7, #4]
 801ab98:	693b      	ldr	r3, [r7, #16]
 801ab9a:	4293      	cmp	r3, r2
 801ab9c:	bf28      	it	cs
 801ab9e:	4613      	movcs	r3, r2
 801aba0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 801aba2:	69fa      	ldr	r2, [r7, #28]
 801aba4:	69b9      	ldr	r1, [r7, #24]
 801aba6:	6978      	ldr	r0, [r7, #20]
 801aba8:	f7ff ff57 	bl	801aa5a <_WriteNoCheck>
    break;
 801abac:	e009      	b.n	801abc2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 801abae:	687a      	ldr	r2, [r7, #4]
 801abb0:	69b9      	ldr	r1, [r7, #24]
 801abb2:	6978      	ldr	r0, [r7, #20]
 801abb4:	f7ff fef4 	bl	801a9a0 <_WriteBlocking>
 801abb8:	61f8      	str	r0, [r7, #28]
    break;
 801abba:	e002      	b.n	801abc2 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 801abbc:	2300      	movs	r3, #0
 801abbe:	61fb      	str	r3, [r7, #28]
    break;
 801abc0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 801abc2:	69fb      	ldr	r3, [r7, #28]
}
 801abc4:	4618      	mov	r0, r3
 801abc6:	3720      	adds	r7, #32
 801abc8:	46bd      	mov	sp, r7
 801abca:	bd80      	pop	{r7, pc}
 801abcc:	24031628 	.word	0x24031628

0801abd0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 801abd0:	b580      	push	{r7, lr}
 801abd2:	b088      	sub	sp, #32
 801abd4:	af00      	add	r7, sp, #0
 801abd6:	60f8      	str	r0, [r7, #12]
 801abd8:	60b9      	str	r1, [r7, #8]
 801abda:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 801abdc:	4b0e      	ldr	r3, [pc, #56]	@ (801ac18 <SEGGER_RTT_Write+0x48>)
 801abde:	61fb      	str	r3, [r7, #28]
 801abe0:	69fb      	ldr	r3, [r7, #28]
 801abe2:	781b      	ldrb	r3, [r3, #0]
 801abe4:	b2db      	uxtb	r3, r3
 801abe6:	2b53      	cmp	r3, #83	@ 0x53
 801abe8:	d001      	beq.n	801abee <SEGGER_RTT_Write+0x1e>
 801abea:	f7ff fe7f 	bl	801a8ec <_DoInit>
  SEGGER_RTT_LOCK();
 801abee:	f3ef 8311 	mrs	r3, BASEPRI
 801abf2:	f04f 0120 	mov.w	r1, #32
 801abf6:	f381 8811 	msr	BASEPRI, r1
 801abfa:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 801abfc:	687a      	ldr	r2, [r7, #4]
 801abfe:	68b9      	ldr	r1, [r7, #8]
 801ac00:	68f8      	ldr	r0, [r7, #12]
 801ac02:	f7ff ff95 	bl	801ab30 <SEGGER_RTT_WriteNoLock>
 801ac06:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 801ac08:	69bb      	ldr	r3, [r7, #24]
 801ac0a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 801ac0e:	697b      	ldr	r3, [r7, #20]
}
 801ac10:	4618      	mov	r0, r3
 801ac12:	3720      	adds	r7, #32
 801ac14:	46bd      	mov	sp, r7
 801ac16:	bd80      	pop	{r7, pc}
 801ac18:	24031628 	.word	0x24031628

0801ac1c <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 801ac1c:	b580      	push	{r7, lr}
 801ac1e:	af00      	add	r7, sp, #0
  _DoInit();
 801ac20:	f7ff fe64 	bl	801a8ec <_DoInit>
}
 801ac24:	bf00      	nop
 801ac26:	bd80      	pop	{r7, pc}

0801ac28 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 801ac28:	b580      	push	{r7, lr}
 801ac2a:	b084      	sub	sp, #16
 801ac2c:	af00      	add	r7, sp, #0
 801ac2e:	6078      	str	r0, [r7, #4]
 801ac30:	460b      	mov	r3, r1
 801ac32:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	689b      	ldr	r3, [r3, #8]
 801ac38:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 801ac3a:	68fb      	ldr	r3, [r7, #12]
 801ac3c:	1c5a      	adds	r2, r3, #1
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	685b      	ldr	r3, [r3, #4]
 801ac42:	429a      	cmp	r2, r3
 801ac44:	d80e      	bhi.n	801ac64 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	681a      	ldr	r2, [r3, #0]
 801ac4a:	68fb      	ldr	r3, [r7, #12]
 801ac4c:	4413      	add	r3, r2
 801ac4e:	78fa      	ldrb	r2, [r7, #3]
 801ac50:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 801ac52:	68fb      	ldr	r3, [r7, #12]
 801ac54:	1c5a      	adds	r2, r3, #1
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	68db      	ldr	r3, [r3, #12]
 801ac5e:	1c5a      	adds	r2, r3, #1
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	689a      	ldr	r2, [r3, #8]
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	685b      	ldr	r3, [r3, #4]
 801ac6c:	429a      	cmp	r2, r3
 801ac6e:	d115      	bne.n	801ac9c <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	6918      	ldr	r0, [r3, #16]
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	6819      	ldr	r1, [r3, #0]
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	689b      	ldr	r3, [r3, #8]
 801ac7c:	461a      	mov	r2, r3
 801ac7e:	f7ff ffa7 	bl	801abd0 <SEGGER_RTT_Write>
 801ac82:	4602      	mov	r2, r0
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	689b      	ldr	r3, [r3, #8]
 801ac88:	429a      	cmp	r2, r3
 801ac8a:	d004      	beq.n	801ac96 <_StoreChar+0x6e>
      p->ReturnValue = -1;
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	f04f 32ff 	mov.w	r2, #4294967295
 801ac92:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 801ac94:	e002      	b.n	801ac9c <_StoreChar+0x74>
      p->Cnt = 0u;
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	2200      	movs	r2, #0
 801ac9a:	609a      	str	r2, [r3, #8]
}
 801ac9c:	bf00      	nop
 801ac9e:	3710      	adds	r7, #16
 801aca0:	46bd      	mov	sp, r7
 801aca2:	bd80      	pop	{r7, pc}

0801aca4 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 801aca4:	b580      	push	{r7, lr}
 801aca6:	b08a      	sub	sp, #40	@ 0x28
 801aca8:	af00      	add	r7, sp, #0
 801acaa:	60f8      	str	r0, [r7, #12]
 801acac:	60b9      	str	r1, [r7, #8]
 801acae:	607a      	str	r2, [r7, #4]
 801acb0:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 801acb2:	68bb      	ldr	r3, [r7, #8]
 801acb4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 801acb6:	2301      	movs	r3, #1
 801acb8:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 801acba:	2301      	movs	r3, #1
 801acbc:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 801acbe:	e007      	b.n	801acd0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 801acc0:	6a3a      	ldr	r2, [r7, #32]
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	fbb2 f3f3 	udiv	r3, r2, r3
 801acc8:	623b      	str	r3, [r7, #32]
    Width++;
 801acca:	69fb      	ldr	r3, [r7, #28]
 801accc:	3301      	adds	r3, #1
 801acce:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 801acd0:	6a3a      	ldr	r2, [r7, #32]
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	429a      	cmp	r2, r3
 801acd6:	d2f3      	bcs.n	801acc0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 801acd8:	683a      	ldr	r2, [r7, #0]
 801acda:	69fb      	ldr	r3, [r7, #28]
 801acdc:	429a      	cmp	r2, r3
 801acde:	d901      	bls.n	801ace4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 801ace0:	683b      	ldr	r3, [r7, #0]
 801ace2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 801ace4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ace6:	f003 0301 	and.w	r3, r3, #1
 801acea:	2b00      	cmp	r3, #0
 801acec:	d125      	bne.n	801ad3a <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 801acee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801acf0:	2b00      	cmp	r3, #0
 801acf2:	d022      	beq.n	801ad3a <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 801acf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801acf6:	f003 0302 	and.w	r3, r3, #2
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	d005      	beq.n	801ad0a <_PrintUnsigned+0x66>
 801acfe:	683b      	ldr	r3, [r7, #0]
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	d102      	bne.n	801ad0a <_PrintUnsigned+0x66>
        c = '0';
 801ad04:	2330      	movs	r3, #48	@ 0x30
 801ad06:	76fb      	strb	r3, [r7, #27]
 801ad08:	e001      	b.n	801ad0e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 801ad0a:	2320      	movs	r3, #32
 801ad0c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 801ad0e:	e00b      	b.n	801ad28 <_PrintUnsigned+0x84>
        FieldWidth--;
 801ad10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad12:	3b01      	subs	r3, #1
 801ad14:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 801ad16:	7efb      	ldrb	r3, [r7, #27]
 801ad18:	4619      	mov	r1, r3
 801ad1a:	68f8      	ldr	r0, [r7, #12]
 801ad1c:	f7ff ff84 	bl	801ac28 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 801ad20:	68fb      	ldr	r3, [r7, #12]
 801ad22:	68db      	ldr	r3, [r3, #12]
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	db07      	blt.n	801ad38 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 801ad28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	d005      	beq.n	801ad3a <_PrintUnsigned+0x96>
 801ad2e:	69fa      	ldr	r2, [r7, #28]
 801ad30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad32:	429a      	cmp	r2, r3
 801ad34:	d3ec      	bcc.n	801ad10 <_PrintUnsigned+0x6c>
 801ad36:	e000      	b.n	801ad3a <_PrintUnsigned+0x96>
          break;
 801ad38:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 801ad3a:	68fb      	ldr	r3, [r7, #12]
 801ad3c:	68db      	ldr	r3, [r3, #12]
 801ad3e:	2b00      	cmp	r3, #0
 801ad40:	db55      	blt.n	801adee <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 801ad42:	683b      	ldr	r3, [r7, #0]
 801ad44:	2b01      	cmp	r3, #1
 801ad46:	d903      	bls.n	801ad50 <_PrintUnsigned+0xac>
        NumDigits--;
 801ad48:	683b      	ldr	r3, [r7, #0]
 801ad4a:	3b01      	subs	r3, #1
 801ad4c:	603b      	str	r3, [r7, #0]
 801ad4e:	e009      	b.n	801ad64 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 801ad50:	68ba      	ldr	r2, [r7, #8]
 801ad52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad54:	fbb2 f3f3 	udiv	r3, r2, r3
 801ad58:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 801ad5a:	697a      	ldr	r2, [r7, #20]
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	429a      	cmp	r2, r3
 801ad60:	d200      	bcs.n	801ad64 <_PrintUnsigned+0xc0>
          break;
 801ad62:	e005      	b.n	801ad70 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 801ad64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad66:	687a      	ldr	r2, [r7, #4]
 801ad68:	fb02 f303 	mul.w	r3, r2, r3
 801ad6c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 801ad6e:	e7e8      	b.n	801ad42 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 801ad70:	68ba      	ldr	r2, [r7, #8]
 801ad72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad74:	fbb2 f3f3 	udiv	r3, r2, r3
 801ad78:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 801ad7a:	697b      	ldr	r3, [r7, #20]
 801ad7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ad7e:	fb02 f303 	mul.w	r3, r2, r3
 801ad82:	68ba      	ldr	r2, [r7, #8]
 801ad84:	1ad3      	subs	r3, r2, r3
 801ad86:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 801ad88:	4a1b      	ldr	r2, [pc, #108]	@ (801adf8 <_PrintUnsigned+0x154>)
 801ad8a:	697b      	ldr	r3, [r7, #20]
 801ad8c:	4413      	add	r3, r2
 801ad8e:	781b      	ldrb	r3, [r3, #0]
 801ad90:	4619      	mov	r1, r3
 801ad92:	68f8      	ldr	r0, [r7, #12]
 801ad94:	f7ff ff48 	bl	801ac28 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	68db      	ldr	r3, [r3, #12]
 801ad9c:	2b00      	cmp	r3, #0
 801ad9e:	db08      	blt.n	801adb2 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 801ada0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	fbb2 f3f3 	udiv	r3, r2, r3
 801ada8:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 801adaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801adac:	2b00      	cmp	r3, #0
 801adae:	d1df      	bne.n	801ad70 <_PrintUnsigned+0xcc>
 801adb0:	e000      	b.n	801adb4 <_PrintUnsigned+0x110>
        break;
 801adb2:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 801adb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801adb6:	f003 0301 	and.w	r3, r3, #1
 801adba:	2b00      	cmp	r3, #0
 801adbc:	d017      	beq.n	801adee <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 801adbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d014      	beq.n	801adee <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 801adc4:	e00a      	b.n	801addc <_PrintUnsigned+0x138>
          FieldWidth--;
 801adc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801adc8:	3b01      	subs	r3, #1
 801adca:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 801adcc:	2120      	movs	r1, #32
 801adce:	68f8      	ldr	r0, [r7, #12]
 801add0:	f7ff ff2a 	bl	801ac28 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 801add4:	68fb      	ldr	r3, [r7, #12]
 801add6:	68db      	ldr	r3, [r3, #12]
 801add8:	2b00      	cmp	r3, #0
 801adda:	db07      	blt.n	801adec <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 801addc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d005      	beq.n	801adee <_PrintUnsigned+0x14a>
 801ade2:	69fa      	ldr	r2, [r7, #28]
 801ade4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ade6:	429a      	cmp	r2, r3
 801ade8:	d3ed      	bcc.n	801adc6 <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 801adea:	e000      	b.n	801adee <_PrintUnsigned+0x14a>
            break;
 801adec:	bf00      	nop
}
 801adee:	bf00      	nop
 801adf0:	3728      	adds	r7, #40	@ 0x28
 801adf2:	46bd      	mov	sp, r7
 801adf4:	bd80      	pop	{r7, pc}
 801adf6:	bf00      	nop
 801adf8:	080382dc 	.word	0x080382dc

0801adfc <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 801adfc:	b580      	push	{r7, lr}
 801adfe:	b088      	sub	sp, #32
 801ae00:	af02      	add	r7, sp, #8
 801ae02:	60f8      	str	r0, [r7, #12]
 801ae04:	60b9      	str	r1, [r7, #8]
 801ae06:	607a      	str	r2, [r7, #4]
 801ae08:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 801ae0a:	68bb      	ldr	r3, [r7, #8]
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	bfb8      	it	lt
 801ae10:	425b      	neglt	r3, r3
 801ae12:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 801ae14:	2301      	movs	r3, #1
 801ae16:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 801ae18:	e007      	b.n	801ae2a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	693a      	ldr	r2, [r7, #16]
 801ae1e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ae22:	613b      	str	r3, [r7, #16]
    Width++;
 801ae24:	697b      	ldr	r3, [r7, #20]
 801ae26:	3301      	adds	r3, #1
 801ae28:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 801ae2a:	687b      	ldr	r3, [r7, #4]
 801ae2c:	693a      	ldr	r2, [r7, #16]
 801ae2e:	429a      	cmp	r2, r3
 801ae30:	daf3      	bge.n	801ae1a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 801ae32:	683a      	ldr	r2, [r7, #0]
 801ae34:	697b      	ldr	r3, [r7, #20]
 801ae36:	429a      	cmp	r2, r3
 801ae38:	d901      	bls.n	801ae3e <_PrintInt+0x42>
    Width = NumDigits;
 801ae3a:	683b      	ldr	r3, [r7, #0]
 801ae3c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 801ae3e:	6a3b      	ldr	r3, [r7, #32]
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d00a      	beq.n	801ae5a <_PrintInt+0x5e>
 801ae44:	68bb      	ldr	r3, [r7, #8]
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	db04      	blt.n	801ae54 <_PrintInt+0x58>
 801ae4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae4c:	f003 0304 	and.w	r3, r3, #4
 801ae50:	2b00      	cmp	r3, #0
 801ae52:	d002      	beq.n	801ae5a <_PrintInt+0x5e>
    FieldWidth--;
 801ae54:	6a3b      	ldr	r3, [r7, #32]
 801ae56:	3b01      	subs	r3, #1
 801ae58:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 801ae5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae5c:	f003 0302 	and.w	r3, r3, #2
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	d002      	beq.n	801ae6a <_PrintInt+0x6e>
 801ae64:	683b      	ldr	r3, [r7, #0]
 801ae66:	2b00      	cmp	r3, #0
 801ae68:	d01c      	beq.n	801aea4 <_PrintInt+0xa8>
 801ae6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae6c:	f003 0301 	and.w	r3, r3, #1
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d117      	bne.n	801aea4 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 801ae74:	6a3b      	ldr	r3, [r7, #32]
 801ae76:	2b00      	cmp	r3, #0
 801ae78:	d014      	beq.n	801aea4 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 801ae7a:	e00a      	b.n	801ae92 <_PrintInt+0x96>
        FieldWidth--;
 801ae7c:	6a3b      	ldr	r3, [r7, #32]
 801ae7e:	3b01      	subs	r3, #1
 801ae80:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 801ae82:	2120      	movs	r1, #32
 801ae84:	68f8      	ldr	r0, [r7, #12]
 801ae86:	f7ff fecf 	bl	801ac28 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 801ae8a:	68fb      	ldr	r3, [r7, #12]
 801ae8c:	68db      	ldr	r3, [r3, #12]
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	db07      	blt.n	801aea2 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 801ae92:	6a3b      	ldr	r3, [r7, #32]
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	d005      	beq.n	801aea4 <_PrintInt+0xa8>
 801ae98:	697a      	ldr	r2, [r7, #20]
 801ae9a:	6a3b      	ldr	r3, [r7, #32]
 801ae9c:	429a      	cmp	r2, r3
 801ae9e:	d3ed      	bcc.n	801ae7c <_PrintInt+0x80>
 801aea0:	e000      	b.n	801aea4 <_PrintInt+0xa8>
          break;
 801aea2:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 801aea4:	68fb      	ldr	r3, [r7, #12]
 801aea6:	68db      	ldr	r3, [r3, #12]
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	db4a      	blt.n	801af42 <_PrintInt+0x146>
    if (v < 0) {
 801aeac:	68bb      	ldr	r3, [r7, #8]
 801aeae:	2b00      	cmp	r3, #0
 801aeb0:	da07      	bge.n	801aec2 <_PrintInt+0xc6>
      v = -v;
 801aeb2:	68bb      	ldr	r3, [r7, #8]
 801aeb4:	425b      	negs	r3, r3
 801aeb6:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 801aeb8:	212d      	movs	r1, #45	@ 0x2d
 801aeba:	68f8      	ldr	r0, [r7, #12]
 801aebc:	f7ff feb4 	bl	801ac28 <_StoreChar>
 801aec0:	e008      	b.n	801aed4 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 801aec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aec4:	f003 0304 	and.w	r3, r3, #4
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	d003      	beq.n	801aed4 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 801aecc:	212b      	movs	r1, #43	@ 0x2b
 801aece:	68f8      	ldr	r0, [r7, #12]
 801aed0:	f7ff feaa 	bl	801ac28 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 801aed4:	68fb      	ldr	r3, [r7, #12]
 801aed6:	68db      	ldr	r3, [r3, #12]
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	db32      	blt.n	801af42 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 801aedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aede:	f003 0302 	and.w	r3, r3, #2
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	d01f      	beq.n	801af26 <_PrintInt+0x12a>
 801aee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aee8:	f003 0301 	and.w	r3, r3, #1
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d11a      	bne.n	801af26 <_PrintInt+0x12a>
 801aef0:	683b      	ldr	r3, [r7, #0]
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d117      	bne.n	801af26 <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 801aef6:	6a3b      	ldr	r3, [r7, #32]
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d014      	beq.n	801af26 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 801aefc:	e00a      	b.n	801af14 <_PrintInt+0x118>
            FieldWidth--;
 801aefe:	6a3b      	ldr	r3, [r7, #32]
 801af00:	3b01      	subs	r3, #1
 801af02:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 801af04:	2130      	movs	r1, #48	@ 0x30
 801af06:	68f8      	ldr	r0, [r7, #12]
 801af08:	f7ff fe8e 	bl	801ac28 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 801af0c:	68fb      	ldr	r3, [r7, #12]
 801af0e:	68db      	ldr	r3, [r3, #12]
 801af10:	2b00      	cmp	r3, #0
 801af12:	db07      	blt.n	801af24 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 801af14:	6a3b      	ldr	r3, [r7, #32]
 801af16:	2b00      	cmp	r3, #0
 801af18:	d005      	beq.n	801af26 <_PrintInt+0x12a>
 801af1a:	697a      	ldr	r2, [r7, #20]
 801af1c:	6a3b      	ldr	r3, [r7, #32]
 801af1e:	429a      	cmp	r2, r3
 801af20:	d3ed      	bcc.n	801aefe <_PrintInt+0x102>
 801af22:	e000      	b.n	801af26 <_PrintInt+0x12a>
              break;
 801af24:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 801af26:	68fb      	ldr	r3, [r7, #12]
 801af28:	68db      	ldr	r3, [r3, #12]
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	db09      	blt.n	801af42 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 801af2e:	68b9      	ldr	r1, [r7, #8]
 801af30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af32:	9301      	str	r3, [sp, #4]
 801af34:	6a3b      	ldr	r3, [r7, #32]
 801af36:	9300      	str	r3, [sp, #0]
 801af38:	683b      	ldr	r3, [r7, #0]
 801af3a:	687a      	ldr	r2, [r7, #4]
 801af3c:	68f8      	ldr	r0, [r7, #12]
 801af3e:	f7ff feb1 	bl	801aca4 <_PrintUnsigned>
      }
    }
  }
}
 801af42:	bf00      	nop
 801af44:	3718      	adds	r7, #24
 801af46:	46bd      	mov	sp, r7
 801af48:	bd80      	pop	{r7, pc}
	...

0801af4c <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 801af4c:	b580      	push	{r7, lr}
 801af4e:	b0a4      	sub	sp, #144	@ 0x90
 801af50:	af02      	add	r7, sp, #8
 801af52:	60f8      	str	r0, [r7, #12]
 801af54:	60b9      	str	r1, [r7, #8]
 801af56:	607a      	str	r2, [r7, #4]
  unsigned Precision;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 801af58:	f107 0314 	add.w	r3, r7, #20
 801af5c:	657b      	str	r3, [r7, #84]	@ 0x54
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 801af5e:	2340      	movs	r3, #64	@ 0x40
 801af60:	65bb      	str	r3, [r7, #88]	@ 0x58
  BufferDesc.Cnt            = 0u;
 801af62:	2300      	movs	r3, #0
 801af64:	65fb      	str	r3, [r7, #92]	@ 0x5c
  BufferDesc.RTTBufferIndex = BufferIndex;
 801af66:	68fb      	ldr	r3, [r7, #12]
 801af68:	667b      	str	r3, [r7, #100]	@ 0x64
  BufferDesc.ReturnValue    = 0;
 801af6a:	2300      	movs	r3, #0
 801af6c:	663b      	str	r3, [r7, #96]	@ 0x60

  do {
    c = *sFormat;
 801af6e:	68bb      	ldr	r3, [r7, #8]
 801af70:	781b      	ldrb	r3, [r3, #0]
 801af72:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    sFormat++;
 801af76:	68bb      	ldr	r3, [r7, #8]
 801af78:	3301      	adds	r3, #1
 801af7a:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 801af7c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 801af80:	2b00      	cmp	r3, #0
 801af82:	f000 81d9 	beq.w	801b338 <SEGGER_RTT_vprintf+0x3ec>
      break;
    }
    if (c == '%') {
 801af86:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 801af8a:	2b25      	cmp	r3, #37	@ 0x25
 801af8c:	f040 81c7 	bne.w	801b31e <SEGGER_RTT_vprintf+0x3d2>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 801af90:	2300      	movs	r3, #0
 801af92:	677b      	str	r3, [r7, #116]	@ 0x74
      v = 1;
 801af94:	2301      	movs	r3, #1
 801af96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      do {
        c = *sFormat;
 801af9a:	68bb      	ldr	r3, [r7, #8]
 801af9c:	781b      	ldrb	r3, [r3, #0]
 801af9e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        switch (c) {
 801afa2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 801afa6:	3b23      	subs	r3, #35	@ 0x23
 801afa8:	2b0d      	cmp	r3, #13
 801afaa:	d83f      	bhi.n	801b02c <SEGGER_RTT_vprintf+0xe0>
 801afac:	a201      	add	r2, pc, #4	@ (adr r2, 801afb4 <SEGGER_RTT_vprintf+0x68>)
 801afae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801afb2:	bf00      	nop
 801afb4:	0801b01d 	.word	0x0801b01d
 801afb8:	0801b02d 	.word	0x0801b02d
 801afbc:	0801b02d 	.word	0x0801b02d
 801afc0:	0801b02d 	.word	0x0801b02d
 801afc4:	0801b02d 	.word	0x0801b02d
 801afc8:	0801b02d 	.word	0x0801b02d
 801afcc:	0801b02d 	.word	0x0801b02d
 801afd0:	0801b02d 	.word	0x0801b02d
 801afd4:	0801b00d 	.word	0x0801b00d
 801afd8:	0801b02d 	.word	0x0801b02d
 801afdc:	0801afed 	.word	0x0801afed
 801afe0:	0801b02d 	.word	0x0801b02d
 801afe4:	0801b02d 	.word	0x0801b02d
 801afe8:	0801affd 	.word	0x0801affd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 801afec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801afee:	f043 0301 	orr.w	r3, r3, #1
 801aff2:	677b      	str	r3, [r7, #116]	@ 0x74
 801aff4:	68bb      	ldr	r3, [r7, #8]
 801aff6:	3301      	adds	r3, #1
 801aff8:	60bb      	str	r3, [r7, #8]
 801affa:	e01b      	b.n	801b034 <SEGGER_RTT_vprintf+0xe8>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 801affc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801affe:	f043 0302 	orr.w	r3, r3, #2
 801b002:	677b      	str	r3, [r7, #116]	@ 0x74
 801b004:	68bb      	ldr	r3, [r7, #8]
 801b006:	3301      	adds	r3, #1
 801b008:	60bb      	str	r3, [r7, #8]
 801b00a:	e013      	b.n	801b034 <SEGGER_RTT_vprintf+0xe8>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 801b00c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b00e:	f043 0304 	orr.w	r3, r3, #4
 801b012:	677b      	str	r3, [r7, #116]	@ 0x74
 801b014:	68bb      	ldr	r3, [r7, #8]
 801b016:	3301      	adds	r3, #1
 801b018:	60bb      	str	r3, [r7, #8]
 801b01a:	e00b      	b.n	801b034 <SEGGER_RTT_vprintf+0xe8>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 801b01c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b01e:	f043 0308 	orr.w	r3, r3, #8
 801b022:	677b      	str	r3, [r7, #116]	@ 0x74
 801b024:	68bb      	ldr	r3, [r7, #8]
 801b026:	3301      	adds	r3, #1
 801b028:	60bb      	str	r3, [r7, #8]
 801b02a:	e003      	b.n	801b034 <SEGGER_RTT_vprintf+0xe8>
        default:  v = 0; break;
 801b02c:	2300      	movs	r3, #0
 801b02e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801b032:	bf00      	nop
        }
      } while (v);
 801b034:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d1ae      	bne.n	801af9a <SEGGER_RTT_vprintf+0x4e>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 801b03c:	2300      	movs	r3, #0
 801b03e:	673b      	str	r3, [r7, #112]	@ 0x70
      do {
        c = *sFormat;
 801b040:	68bb      	ldr	r3, [r7, #8]
 801b042:	781b      	ldrb	r3, [r3, #0]
 801b044:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        if ((c < '0') || (c > '9')) {
 801b048:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 801b04c:	2b2f      	cmp	r3, #47	@ 0x2f
 801b04e:	d912      	bls.n	801b076 <SEGGER_RTT_vprintf+0x12a>
 801b050:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 801b054:	2b39      	cmp	r3, #57	@ 0x39
 801b056:	d80e      	bhi.n	801b076 <SEGGER_RTT_vprintf+0x12a>
          break;
        }
        sFormat++;
 801b058:	68bb      	ldr	r3, [r7, #8]
 801b05a:	3301      	adds	r3, #1
 801b05c:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 801b05e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801b060:	4613      	mov	r3, r2
 801b062:	009b      	lsls	r3, r3, #2
 801b064:	4413      	add	r3, r2
 801b066:	005b      	lsls	r3, r3, #1
 801b068:	461a      	mov	r2, r3
 801b06a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 801b06e:	4413      	add	r3, r2
 801b070:	3b30      	subs	r3, #48	@ 0x30
 801b072:	673b      	str	r3, [r7, #112]	@ 0x70
        c = *sFormat;
 801b074:	e7e4      	b.n	801b040 <SEGGER_RTT_vprintf+0xf4>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      PrecisionSet = 0;
 801b076:	2300      	movs	r3, #0
 801b078:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      Precision = 0u;
 801b07c:	2300      	movs	r3, #0
 801b07e:	67bb      	str	r3, [r7, #120]	@ 0x78
      c = *sFormat;
 801b080:	68bb      	ldr	r3, [r7, #8]
 801b082:	781b      	ldrb	r3, [r3, #0]
 801b084:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      if (c == '.') {
 801b088:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 801b08c:	2b2e      	cmp	r3, #46	@ 0x2e
 801b08e:	d132      	bne.n	801b0f6 <SEGGER_RTT_vprintf+0x1aa>
        sFormat++;
 801b090:	68bb      	ldr	r3, [r7, #8]
 801b092:	3301      	adds	r3, #1
 801b094:	60bb      	str	r3, [r7, #8]
        if (*sFormat == '*') {
 801b096:	68bb      	ldr	r3, [r7, #8]
 801b098:	781b      	ldrb	r3, [r3, #0]
 801b09a:	2b2a      	cmp	r3, #42	@ 0x2a
 801b09c:	d10d      	bne.n	801b0ba <SEGGER_RTT_vprintf+0x16e>
          sFormat++;
 801b09e:	68bb      	ldr	r3, [r7, #8]
 801b0a0:	3301      	adds	r3, #1
 801b0a2:	60bb      	str	r3, [r7, #8]
          PrecisionSet = 1;
 801b0a4:	2301      	movs	r3, #1
 801b0a6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          Precision = va_arg(*pParamList, int);
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	681b      	ldr	r3, [r3, #0]
 801b0ae:	1d19      	adds	r1, r3, #4
 801b0b0:	687a      	ldr	r2, [r7, #4]
 801b0b2:	6011      	str	r1, [r2, #0]
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 801b0b8:	e01d      	b.n	801b0f6 <SEGGER_RTT_vprintf+0x1aa>
        } else {
          do {
            c = *sFormat;
 801b0ba:	68bb      	ldr	r3, [r7, #8]
 801b0bc:	781b      	ldrb	r3, [r3, #0]
 801b0be:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            if ((c < '0') || (c > '9')) {
 801b0c2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 801b0c6:	2b2f      	cmp	r3, #47	@ 0x2f
 801b0c8:	d915      	bls.n	801b0f6 <SEGGER_RTT_vprintf+0x1aa>
 801b0ca:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 801b0ce:	2b39      	cmp	r3, #57	@ 0x39
 801b0d0:	d811      	bhi.n	801b0f6 <SEGGER_RTT_vprintf+0x1aa>
              break;
            }
            PrecisionSet = 1;
 801b0d2:	2301      	movs	r3, #1
 801b0d4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            sFormat++;
 801b0d8:	68bb      	ldr	r3, [r7, #8]
 801b0da:	3301      	adds	r3, #1
 801b0dc:	60bb      	str	r3, [r7, #8]
            Precision = Precision * 10u + ((unsigned)c - '0');
 801b0de:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801b0e0:	4613      	mov	r3, r2
 801b0e2:	009b      	lsls	r3, r3, #2
 801b0e4:	4413      	add	r3, r2
 801b0e6:	005b      	lsls	r3, r3, #1
 801b0e8:	461a      	mov	r2, r3
 801b0ea:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 801b0ee:	4413      	add	r3, r2
 801b0f0:	3b30      	subs	r3, #48	@ 0x30
 801b0f2:	67bb      	str	r3, [r7, #120]	@ 0x78
            c = *sFormat;
 801b0f4:	e7e1      	b.n	801b0ba <SEGGER_RTT_vprintf+0x16e>
        }
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 801b0f6:	68bb      	ldr	r3, [r7, #8]
 801b0f8:	781b      	ldrb	r3, [r3, #0]
 801b0fa:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
 801b0fe:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 801b102:	2b6c      	cmp	r3, #108	@ 0x6c
 801b104:	d003      	beq.n	801b10e <SEGGER_RTT_vprintf+0x1c2>
 801b106:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 801b10a:	2b68      	cmp	r3, #104	@ 0x68
 801b10c:	d107      	bne.n	801b11e <SEGGER_RTT_vprintf+0x1d2>
          sFormat++;
 801b10e:	68bb      	ldr	r3, [r7, #8]
 801b110:	3301      	adds	r3, #1
 801b112:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 801b114:	68bb      	ldr	r3, [r7, #8]
 801b116:	781b      	ldrb	r3, [r3, #0]
 801b118:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        if ((c == 'l') || (c == 'h')) {
 801b11c:	e7ef      	b.n	801b0fe <SEGGER_RTT_vprintf+0x1b2>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 801b11e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 801b122:	2b25      	cmp	r3, #37	@ 0x25
 801b124:	f000 80ef 	beq.w	801b306 <SEGGER_RTT_vprintf+0x3ba>
 801b128:	2b25      	cmp	r3, #37	@ 0x25
 801b12a:	f2c0 80f3 	blt.w	801b314 <SEGGER_RTT_vprintf+0x3c8>
 801b12e:	2b78      	cmp	r3, #120	@ 0x78
 801b130:	f300 80f0 	bgt.w	801b314 <SEGGER_RTT_vprintf+0x3c8>
 801b134:	2b58      	cmp	r3, #88	@ 0x58
 801b136:	f2c0 80ed 	blt.w	801b314 <SEGGER_RTT_vprintf+0x3c8>
 801b13a:	3b58      	subs	r3, #88	@ 0x58
 801b13c:	2b20      	cmp	r3, #32
 801b13e:	f200 80e9 	bhi.w	801b314 <SEGGER_RTT_vprintf+0x3c8>
 801b142:	a201      	add	r2, pc, #4	@ (adr r2, 801b148 <SEGGER_RTT_vprintf+0x1fc>)
 801b144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b148:	0801b24b 	.word	0x0801b24b
 801b14c:	0801b315 	.word	0x0801b315
 801b150:	0801b315 	.word	0x0801b315
 801b154:	0801b315 	.word	0x0801b315
 801b158:	0801b315 	.word	0x0801b315
 801b15c:	0801b315 	.word	0x0801b315
 801b160:	0801b315 	.word	0x0801b315
 801b164:	0801b315 	.word	0x0801b315
 801b168:	0801b315 	.word	0x0801b315
 801b16c:	0801b315 	.word	0x0801b315
 801b170:	0801b315 	.word	0x0801b315
 801b174:	0801b1cd 	.word	0x0801b1cd
 801b178:	0801b1f7 	.word	0x0801b1f7
 801b17c:	0801b315 	.word	0x0801b315
 801b180:	0801b315 	.word	0x0801b315
 801b184:	0801b315 	.word	0x0801b315
 801b188:	0801b315 	.word	0x0801b315
 801b18c:	0801b315 	.word	0x0801b315
 801b190:	0801b315 	.word	0x0801b315
 801b194:	0801b315 	.word	0x0801b315
 801b198:	0801b315 	.word	0x0801b315
 801b19c:	0801b315 	.word	0x0801b315
 801b1a0:	0801b315 	.word	0x0801b315
 801b1a4:	0801b315 	.word	0x0801b315
 801b1a8:	0801b2dd 	.word	0x0801b2dd
 801b1ac:	0801b315 	.word	0x0801b315
 801b1b0:	0801b315 	.word	0x0801b315
 801b1b4:	0801b275 	.word	0x0801b275
 801b1b8:	0801b315 	.word	0x0801b315
 801b1bc:	0801b221 	.word	0x0801b221
 801b1c0:	0801b315 	.word	0x0801b315
 801b1c4:	0801b315 	.word	0x0801b315
 801b1c8:	0801b24b 	.word	0x0801b24b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	1d19      	adds	r1, r3, #4
 801b1d2:	687a      	ldr	r2, [r7, #4]
 801b1d4:	6011      	str	r1, [r2, #0]
 801b1d6:	681b      	ldr	r3, [r3, #0]
 801b1d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        c0 = (char)v;
 801b1dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801b1e0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
        _StoreChar(&BufferDesc, c0);
 801b1e4:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 801b1e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801b1ec:	4611      	mov	r1, r2
 801b1ee:	4618      	mov	r0, r3
 801b1f0:	f7ff fd1a 	bl	801ac28 <_StoreChar>
        break;
 801b1f4:	e08f      	b.n	801b316 <SEGGER_RTT_vprintf+0x3ca>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	681b      	ldr	r3, [r3, #0]
 801b1fa:	1d19      	adds	r1, r3, #4
 801b1fc:	687a      	ldr	r2, [r7, #4]
 801b1fe:	6011      	str	r1, [r2, #0]
 801b200:	681b      	ldr	r3, [r3, #0]
 801b202:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintInt(&BufferDesc, v, 10u, Precision, FieldWidth, FormatFlags);
 801b206:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801b20a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b20c:	9301      	str	r3, [sp, #4]
 801b20e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b210:	9300      	str	r3, [sp, #0]
 801b212:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b214:	220a      	movs	r2, #10
 801b216:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801b21a:	f7ff fdef 	bl	801adfc <_PrintInt>
        break;
 801b21e:	e07a      	b.n	801b316 <SEGGER_RTT_vprintf+0x3ca>
      case 'u':
        v = va_arg(*pParamList, int);
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	681b      	ldr	r3, [r3, #0]
 801b224:	1d19      	adds	r1, r3, #4
 801b226:	687a      	ldr	r2, [r7, #4]
 801b228:	6011      	str	r1, [r2, #0]
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, Precision, FieldWidth, FormatFlags);
 801b230:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801b234:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801b238:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b23a:	9301      	str	r3, [sp, #4]
 801b23c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b23e:	9300      	str	r3, [sp, #0]
 801b240:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b242:	220a      	movs	r2, #10
 801b244:	f7ff fd2e 	bl	801aca4 <_PrintUnsigned>
        break;
 801b248:	e065      	b.n	801b316 <SEGGER_RTT_vprintf+0x3ca>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	681b      	ldr	r3, [r3, #0]
 801b24e:	1d19      	adds	r1, r3, #4
 801b250:	687a      	ldr	r2, [r7, #4]
 801b252:	6011      	str	r1, [r2, #0]
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, Precision, FieldWidth, FormatFlags);
 801b25a:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801b25e:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801b262:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b264:	9301      	str	r3, [sp, #4]
 801b266:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b268:	9300      	str	r3, [sp, #0]
 801b26a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b26c:	2210      	movs	r2, #16
 801b26e:	f7ff fd19 	bl	801aca4 <_PrintUnsigned>
        break;
 801b272:	e050      	b.n	801b316 <SEGGER_RTT_vprintf+0x3ca>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	681b      	ldr	r3, [r3, #0]
 801b278:	1d19      	adds	r1, r3, #4
 801b27a:	687a      	ldr	r2, [r7, #4]
 801b27c:	6011      	str	r1, [r2, #0]
 801b27e:	681b      	ldr	r3, [r3, #0]
 801b280:	66fb      	str	r3, [r7, #108]	@ 0x6c
          if (s == NULL) {
 801b282:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b284:	2b00      	cmp	r3, #0
 801b286:	d104      	bne.n	801b292 <SEGGER_RTT_vprintf+0x346>
            s = "(NULL)";     // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
 801b288:	4b37      	ldr	r3, [pc, #220]	@ (801b368 <SEGGER_RTT_vprintf+0x41c>)
 801b28a:	66fb      	str	r3, [r7, #108]	@ 0x6c
            PrecisionSet = 0; // Make sure (NULL) is printed, even when precision was set.
 801b28c:	2300      	movs	r3, #0
 801b28e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          }
          do {
            c = *s;
 801b292:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b294:	781b      	ldrb	r3, [r3, #0]
 801b296:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            s++;
 801b29a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b29c:	3301      	adds	r3, #1
 801b29e:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if (c == '\0') {
 801b2a0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 801b2a4:	2b00      	cmp	r3, #0
 801b2a6:	d015      	beq.n	801b2d4 <SEGGER_RTT_vprintf+0x388>
              break;
            }
            if ((PrecisionSet != 0) && (Precision == 0)) {
 801b2a8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d002      	beq.n	801b2b6 <SEGGER_RTT_vprintf+0x36a>
 801b2b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	d010      	beq.n	801b2d8 <SEGGER_RTT_vprintf+0x38c>
              break;
            }
            _StoreChar(&BufferDesc, c);
 801b2b6:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 801b2ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801b2be:	4611      	mov	r1, r2
 801b2c0:	4618      	mov	r0, r3
 801b2c2:	f7ff fcb1 	bl	801ac28 <_StoreChar>
            Precision--;
 801b2c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b2c8:	3b01      	subs	r3, #1
 801b2ca:	67bb      	str	r3, [r7, #120]	@ 0x78
          } while (BufferDesc.ReturnValue >= 0);
 801b2cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	dadf      	bge.n	801b292 <SEGGER_RTT_vprintf+0x346>
        }
        break;
 801b2d2:	e020      	b.n	801b316 <SEGGER_RTT_vprintf+0x3ca>
              break;
 801b2d4:	bf00      	nop
 801b2d6:	e01e      	b.n	801b316 <SEGGER_RTT_vprintf+0x3ca>
              break;
 801b2d8:	bf00      	nop
        break;
 801b2da:	e01c      	b.n	801b316 <SEGGER_RTT_vprintf+0x3ca>
      case 'p':
        v = va_arg(*pParamList, int);
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	681b      	ldr	r3, [r3, #0]
 801b2e0:	1d19      	adds	r1, r3, #4
 801b2e2:	687a      	ldr	r2, [r7, #4]
 801b2e4:	6011      	str	r1, [r2, #0]
 801b2e6:	681b      	ldr	r3, [r3, #0]
 801b2e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 801b2ec:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801b2f0:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801b2f4:	2300      	movs	r3, #0
 801b2f6:	9301      	str	r3, [sp, #4]
 801b2f8:	2308      	movs	r3, #8
 801b2fa:	9300      	str	r3, [sp, #0]
 801b2fc:	2308      	movs	r3, #8
 801b2fe:	2210      	movs	r2, #16
 801b300:	f7ff fcd0 	bl	801aca4 <_PrintUnsigned>
        break;
 801b304:	e007      	b.n	801b316 <SEGGER_RTT_vprintf+0x3ca>
      case '%':
        _StoreChar(&BufferDesc, '%');
 801b306:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801b30a:	2125      	movs	r1, #37	@ 0x25
 801b30c:	4618      	mov	r0, r3
 801b30e:	f7ff fc8b 	bl	801ac28 <_StoreChar>
        break;
 801b312:	e000      	b.n	801b316 <SEGGER_RTT_vprintf+0x3ca>
      default:
        break;
 801b314:	bf00      	nop
      }
      sFormat++;
 801b316:	68bb      	ldr	r3, [r7, #8]
 801b318:	3301      	adds	r3, #1
 801b31a:	60bb      	str	r3, [r7, #8]
 801b31c:	e007      	b.n	801b32e <SEGGER_RTT_vprintf+0x3e2>
    } else {
      _StoreChar(&BufferDesc, c);
 801b31e:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 801b322:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801b326:	4611      	mov	r1, r2
 801b328:	4618      	mov	r0, r3
 801b32a:	f7ff fc7d 	bl	801ac28 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 801b32e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b330:	2b00      	cmp	r3, #0
 801b332:	f6bf ae1c 	bge.w	801af6e <SEGGER_RTT_vprintf+0x22>
 801b336:	e000      	b.n	801b33a <SEGGER_RTT_vprintf+0x3ee>
      break;
 801b338:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 801b33a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	dd0d      	ble.n	801b35c <SEGGER_RTT_vprintf+0x410>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 801b340:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b342:	2b00      	cmp	r3, #0
 801b344:	d006      	beq.n	801b354 <SEGGER_RTT_vprintf+0x408>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 801b346:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b348:	f107 0314 	add.w	r3, r7, #20
 801b34c:	4619      	mov	r1, r3
 801b34e:	68f8      	ldr	r0, [r7, #12]
 801b350:	f7ff fc3e 	bl	801abd0 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 801b354:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b356:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b358:	4413      	add	r3, r2
 801b35a:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  return BufferDesc.ReturnValue;
 801b35c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
}
 801b35e:	4618      	mov	r0, r3
 801b360:	3788      	adds	r7, #136	@ 0x88
 801b362:	46bd      	mov	sp, r7
 801b364:	bd80      	pop	{r7, pc}
 801b366:	bf00      	nop
 801b368:	080377d4 	.word	0x080377d4

0801b36c <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 801b36c:	b40e      	push	{r1, r2, r3}
 801b36e:	b580      	push	{r7, lr}
 801b370:	b085      	sub	sp, #20
 801b372:	af00      	add	r7, sp, #0
 801b374:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 801b376:	f107 0320 	add.w	r3, r7, #32
 801b37a:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 801b37c:	f107 0308 	add.w	r3, r7, #8
 801b380:	461a      	mov	r2, r3
 801b382:	69f9      	ldr	r1, [r7, #28]
 801b384:	6878      	ldr	r0, [r7, #4]
 801b386:	f7ff fde1 	bl	801af4c <SEGGER_RTT_vprintf>
 801b38a:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 801b38c:	68fb      	ldr	r3, [r7, #12]
}
 801b38e:	4618      	mov	r0, r3
 801b390:	3714      	adds	r7, #20
 801b392:	46bd      	mov	sp, r7
 801b394:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b398:	b003      	add	sp, #12
 801b39a:	4770      	bx	lr

0801b39c <write_packet>:
static struct o_packet {
  uint8_t pw;
  uint8_t payload[_PACKET_PAYLOAD_IN_SIZE];
} o_packet;

static bool write_packet(void) {
 801b39c:	b580      	push	{r7, lr}
 801b39e:	af00      	add	r7, sp, #0
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 801b3a0:	2121      	movs	r1, #33	@ 0x21
 801b3a2:	4803      	ldr	r0, [pc, #12]	@ (801b3b0 <write_packet+0x14>)
 801b3a4:	f001 f8c4 	bl	801c530 <ioRawWriteBuffer>
 801b3a8:	4603      	mov	r3, r0
}
 801b3aa:	4618      	mov	r0, r3
 801b3ac:	bd80      	pop	{r7, pc}
 801b3ae:	bf00      	nop
 801b3b0:	24031ae0 	.word	0x24031ae0

0801b3b4 <pb_io_flush_ostream>:

void pb_io_flush_ostream(void)
{
 801b3b4:	b580      	push	{r7, lr}
 801b3b6:	af00      	add	r7, sp, #0
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 801b3b8:	4b06      	ldr	r3, [pc, #24]	@ (801b3d4 <pb_io_flush_ostream+0x20>)
 801b3ba:	781b      	ldrb	r3, [r3, #0]
 801b3bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801b3c0:	b2da      	uxtb	r2, r3
 801b3c2:	4b04      	ldr	r3, [pc, #16]	@ (801b3d4 <pb_io_flush_ostream+0x20>)
 801b3c4:	701a      	strb	r2, [r3, #0]
  write_packet();
 801b3c6:	f7ff ffe9 	bl	801b39c <write_packet>
  o_packet.pw = 0;
 801b3ca:	4b02      	ldr	r3, [pc, #8]	@ (801b3d4 <pb_io_flush_ostream+0x20>)
 801b3cc:	2200      	movs	r2, #0
 801b3ce:	701a      	strb	r2, [r3, #0]
}
 801b3d0:	bf00      	nop
 801b3d2:	bd80      	pop	{r7, pc}
 801b3d4:	24031ae0 	.word	0x24031ae0

0801b3d8 <write_callback>:

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
    size_t count)
{
 801b3d8:	b580      	push	{r7, lr}
 801b3da:	b086      	sub	sp, #24
 801b3dc:	af00      	add	r7, sp, #0
 801b3de:	60f8      	str	r0, [r7, #12]
 801b3e0:	60b9      	str	r1, [r7, #8]
 801b3e2:	607a      	str	r2, [r7, #4]
  bool res = true;
 801b3e4:	2301      	movs	r3, #1
 801b3e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pr = (uint8_t *)buf;
 801b3e8:	68bb      	ldr	r3, [r7, #8]
 801b3ea:	613b      	str	r3, [r7, #16]

  UNUSED(stream);

  while (count) {
 801b3ec:	e025      	b.n	801b43a <write_callback+0x62>
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
      o_packet.payload[o_packet.pw] = *pr;
 801b3ee:	4b17      	ldr	r3, [pc, #92]	@ (801b44c <write_callback+0x74>)
 801b3f0:	781b      	ldrb	r3, [r3, #0]
 801b3f2:	4619      	mov	r1, r3
 801b3f4:	693b      	ldr	r3, [r7, #16]
 801b3f6:	781a      	ldrb	r2, [r3, #0]
 801b3f8:	4b14      	ldr	r3, [pc, #80]	@ (801b44c <write_callback+0x74>)
 801b3fa:	440b      	add	r3, r1
 801b3fc:	705a      	strb	r2, [r3, #1]
      pr++;
 801b3fe:	693b      	ldr	r3, [r7, #16]
 801b400:	3301      	adds	r3, #1
 801b402:	613b      	str	r3, [r7, #16]
      count--;
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	3b01      	subs	r3, #1
 801b408:	607b      	str	r3, [r7, #4]
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 801b40a:	4b10      	ldr	r3, [pc, #64]	@ (801b44c <write_callback+0x74>)
 801b40c:	781b      	ldrb	r3, [r3, #0]
 801b40e:	3301      	adds	r3, #1
 801b410:	b2da      	uxtb	r2, r3
 801b412:	4b0e      	ldr	r3, [pc, #56]	@ (801b44c <write_callback+0x74>)
 801b414:	701a      	strb	r2, [r3, #0]
 801b416:	4b0d      	ldr	r3, [pc, #52]	@ (801b44c <write_callback+0x74>)
 801b418:	781b      	ldrb	r3, [r3, #0]
 801b41a:	2b1f      	cmp	r3, #31
 801b41c:	d802      	bhi.n	801b424 <write_callback+0x4c>
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	2b00      	cmp	r3, #0
 801b422:	d1e4      	bne.n	801b3ee <write_callback+0x16>
    }
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 801b424:	4b09      	ldr	r3, [pc, #36]	@ (801b44c <write_callback+0x74>)
 801b426:	781b      	ldrb	r3, [r3, #0]
 801b428:	2b20      	cmp	r3, #32
 801b42a:	d106      	bne.n	801b43a <write_callback+0x62>
      res = write_packet();
 801b42c:	f7ff ffb6 	bl	801b39c <write_packet>
 801b430:	4603      	mov	r3, r0
 801b432:	75fb      	strb	r3, [r7, #23]
      o_packet.pw = 0;
 801b434:	4b05      	ldr	r3, [pc, #20]	@ (801b44c <write_callback+0x74>)
 801b436:	2200      	movs	r2, #0
 801b438:	701a      	strb	r2, [r3, #0]
  while (count) {
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	d1ea      	bne.n	801b416 <write_callback+0x3e>
    }
  }
  return res;
 801b440:	7dfb      	ldrb	r3, [r7, #23]
}
 801b442:	4618      	mov	r0, r3
 801b444:	3718      	adds	r7, #24
 801b446:	46bd      	mov	sp, r7
 801b448:	bd80      	pop	{r7, pc}
 801b44a:	bf00      	nop
 801b44c:	24031ae0 	.word	0x24031ae0

0801b450 <read_packet>:
  uint8_t payload[_PACKET_PAYLOAD_OUT_SIZE];
} i_packet;

static int i_ridx = 0;

static bool read_packet(void) {
 801b450:	b580      	push	{r7, lr}
 801b452:	b082      	sub	sp, #8
 801b454:	af00      	add	r7, sp, #0
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 801b456:	2121      	movs	r1, #33	@ 0x21
 801b458:	4806      	ldr	r0, [pc, #24]	@ (801b474 <read_packet+0x24>)
 801b45a:	f001 f877 	bl	801c54c <ioRawReadBuffer>
 801b45e:	4603      	mov	r3, r0
 801b460:	71fb      	strb	r3, [r7, #7]
      _PACKET_PAYLOAD_OUT_SIZE + 1);
  i_ridx = 0;
 801b462:	4b05      	ldr	r3, [pc, #20]	@ (801b478 <read_packet+0x28>)
 801b464:	2200      	movs	r2, #0
 801b466:	601a      	str	r2, [r3, #0]
  return res;
 801b468:	79fb      	ldrb	r3, [r7, #7]
}
 801b46a:	4618      	mov	r0, r3
 801b46c:	3708      	adds	r7, #8
 801b46e:	46bd      	mov	sp, r7
 801b470:	bd80      	pop	{r7, pc}
 801b472:	bf00      	nop
 801b474:	24031b04 	.word	0x24031b04
 801b478:	24031b28 	.word	0x24031b28

0801b47c <pb_io_flush_istream>:

void pb_io_flush_istream(void)
{
 801b47c:	b480      	push	{r7}
 801b47e:	af00      	add	r7, sp, #0
  i_packet.pr = 0xFF;
 801b480:	4b05      	ldr	r3, [pc, #20]	@ (801b498 <pb_io_flush_istream+0x1c>)
 801b482:	22ff      	movs	r2, #255	@ 0xff
 801b484:	701a      	strb	r2, [r3, #0]
  i_ridx = 0;
 801b486:	4b05      	ldr	r3, [pc, #20]	@ (801b49c <pb_io_flush_istream+0x20>)
 801b488:	2200      	movs	r2, #0
 801b48a:	601a      	str	r2, [r3, #0]
}
 801b48c:	bf00      	nop
 801b48e:	46bd      	mov	sp, r7
 801b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b494:	4770      	bx	lr
 801b496:	bf00      	nop
 801b498:	24031b04 	.word	0x24031b04
 801b49c:	24031b28 	.word	0x24031b28

0801b4a0 <read_callback>:

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 801b4a0:	b580      	push	{r7, lr}
 801b4a2:	b088      	sub	sp, #32
 801b4a4:	af00      	add	r7, sp, #0
 801b4a6:	60f8      	str	r0, [r7, #12]
 801b4a8:	60b9      	str	r1, [r7, #8]
 801b4aa:	607a      	str	r2, [r7, #4]
  bool res = true;
 801b4ac:	2301      	movs	r3, #1
 801b4ae:	77fb      	strb	r3, [r7, #31]
  uint8_t *pw = (uint8_t *)buf;
 801b4b0:	68bb      	ldr	r3, [r7, #8]
 801b4b2:	61bb      	str	r3, [r7, #24]

  UNUSED(stream);

  if (count == 0)
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d101      	bne.n	801b4be <read_callback+0x1e>
    return true;
 801b4ba:	2301      	movs	r3, #1
 801b4bc:	e043      	b.n	801b546 <read_callback+0xa6>

  if (i_packet.pr == 0xFF)
 801b4be:	4b24      	ldr	r3, [pc, #144]	@ (801b550 <read_callback+0xb0>)
 801b4c0:	781b      	ldrb	r3, [r3, #0]
 801b4c2:	2bff      	cmp	r3, #255	@ 0xff
 801b4c4:	d103      	bne.n	801b4ce <read_callback+0x2e>
    res = read_packet();
 801b4c6:	f7ff ffc3 	bl	801b450 <read_packet>
 801b4ca:	4603      	mov	r3, r0
 801b4cc:	77fb      	strb	r3, [r7, #31]

  if (res == false)
 801b4ce:	7ffb      	ldrb	r3, [r7, #31]
 801b4d0:	f083 0301 	eor.w	r3, r3, #1
 801b4d4:	b2db      	uxtb	r3, r3
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	d031      	beq.n	801b53e <read_callback+0x9e>
    return res;
 801b4da:	7ffb      	ldrb	r3, [r7, #31]
 801b4dc:	e033      	b.n	801b546 <read_callback+0xa6>

  while (count) {
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
      *pw = i_packet.payload[i_ridx];
 801b4de:	4b1d      	ldr	r3, [pc, #116]	@ (801b554 <read_callback+0xb4>)
 801b4e0:	681b      	ldr	r3, [r3, #0]
 801b4e2:	4a1b      	ldr	r2, [pc, #108]	@ (801b550 <read_callback+0xb0>)
 801b4e4:	4413      	add	r3, r2
 801b4e6:	785a      	ldrb	r2, [r3, #1]
 801b4e8:	69bb      	ldr	r3, [r7, #24]
 801b4ea:	701a      	strb	r2, [r3, #0]
      pw++;
 801b4ec:	69bb      	ldr	r3, [r7, #24]
 801b4ee:	3301      	adds	r3, #1
 801b4f0:	61bb      	str	r3, [r7, #24]
      count--;
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	3b01      	subs	r3, #1
 801b4f6:	607b      	str	r3, [r7, #4]
      i_ridx++;
 801b4f8:	4b16      	ldr	r3, [pc, #88]	@ (801b554 <read_callback+0xb4>)
 801b4fa:	681b      	ldr	r3, [r3, #0]
 801b4fc:	3301      	adds	r3, #1
 801b4fe:	4a15      	ldr	r2, [pc, #84]	@ (801b554 <read_callback+0xb4>)
 801b500:	6013      	str	r3, [r2, #0]
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 801b502:	4b13      	ldr	r3, [pc, #76]	@ (801b550 <read_callback+0xb0>)
 801b504:	781b      	ldrb	r3, [r3, #0]
 801b506:	3b01      	subs	r3, #1
 801b508:	b2da      	uxtb	r2, r3
 801b50a:	4b11      	ldr	r3, [pc, #68]	@ (801b550 <read_callback+0xb0>)
 801b50c:	701a      	strb	r2, [r3, #0]
 801b50e:	4b10      	ldr	r3, [pc, #64]	@ (801b550 <read_callback+0xb0>)
 801b510:	781b      	ldrb	r3, [r3, #0]
 801b512:	2b00      	cmp	r3, #0
 801b514:	d002      	beq.n	801b51c <read_callback+0x7c>
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	2b00      	cmp	r3, #0
 801b51a:	d1e0      	bne.n	801b4de <read_callback+0x3e>
    }
    if (count && i_packet.pr == 0) {
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	2b00      	cmp	r3, #0
 801b520:	d00d      	beq.n	801b53e <read_callback+0x9e>
 801b522:	4b0b      	ldr	r3, [pc, #44]	@ (801b550 <read_callback+0xb0>)
 801b524:	781b      	ldrb	r3, [r3, #0]
 801b526:	2b00      	cmp	r3, #0
 801b528:	d109      	bne.n	801b53e <read_callback+0x9e>
      uint8_t sync = 0xAA;
 801b52a:	23aa      	movs	r3, #170	@ 0xaa
 801b52c:	75fb      	strb	r3, [r7, #23]
      ioRawWriteBuffer(&sync, 1);
 801b52e:	f107 0317 	add.w	r3, r7, #23
 801b532:	2101      	movs	r1, #1
 801b534:	4618      	mov	r0, r3
 801b536:	f000 fffb 	bl	801c530 <ioRawWriteBuffer>
      read_packet();
 801b53a:	f7ff ff89 	bl	801b450 <read_packet>
  while (count) {
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	2b00      	cmp	r3, #0
 801b542:	d1e4      	bne.n	801b50e <read_callback+0x6e>
    }
  }

  return res;
 801b544:	7ffb      	ldrb	r3, [r7, #31]
}
 801b546:	4618      	mov	r0, r3
 801b548:	3720      	adds	r7, #32
 801b54a:	46bd      	mov	sp, r7
 801b54c:	bd80      	pop	{r7, pc}
 801b54e:	bf00      	nop
 801b550:	24031b04 	.word	0x24031b04
 801b554:	24031b28 	.word	0x24031b28

0801b558 <pb_io_ostream>:

pb_ostream_t pb_io_ostream(int fd)
{
 801b558:	b490      	push	{r4, r7}
 801b55a:	b086      	sub	sp, #24
 801b55c:	af00      	add	r7, sp, #0
 801b55e:	6078      	str	r0, [r7, #4]
 801b560:	6039      	str	r1, [r7, #0]
#ifndef PB_NO_ERRMSG
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0, NULL};
#else
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
 801b562:	4b0a      	ldr	r3, [pc, #40]	@ (801b58c <pb_io_ostream+0x34>)
 801b564:	60bb      	str	r3, [r7, #8]
 801b566:	683b      	ldr	r3, [r7, #0]
 801b568:	60fb      	str	r3, [r7, #12]
 801b56a:	f04f 33ff 	mov.w	r3, #4294967295
 801b56e:	613b      	str	r3, [r7, #16]
 801b570:	2300      	movs	r3, #0
 801b572:	617b      	str	r3, [r7, #20]
#endif
  return stream;
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	461c      	mov	r4, r3
 801b578:	f107 0308 	add.w	r3, r7, #8
 801b57c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b57e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801b582:	6878      	ldr	r0, [r7, #4]
 801b584:	3718      	adds	r7, #24
 801b586:	46bd      	mov	sp, r7
 801b588:	bc90      	pop	{r4, r7}
 801b58a:	4770      	bx	lr
 801b58c:	0801b3d9 	.word	0x0801b3d9

0801b590 <pb_io_istream>:

pb_istream_t pb_io_istream(int fd)
{
 801b590:	b490      	push	{r4, r7}
 801b592:	b086      	sub	sp, #24
 801b594:	af00      	add	r7, sp, #0
 801b596:	6078      	str	r0, [r7, #4]
 801b598:	6039      	str	r1, [r7, #0]
#ifndef PB_NO_ERRMSG
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX, NULL};
#else
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
 801b59a:	4b0a      	ldr	r3, [pc, #40]	@ (801b5c4 <pb_io_istream+0x34>)
 801b59c:	60fb      	str	r3, [r7, #12]
 801b59e:	683b      	ldr	r3, [r7, #0]
 801b5a0:	613b      	str	r3, [r7, #16]
 801b5a2:	f04f 33ff 	mov.w	r3, #4294967295
 801b5a6:	617b      	str	r3, [r7, #20]
#endif
  return stream;
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	461c      	mov	r4, r3
 801b5ac:	f107 030c 	add.w	r3, r7, #12
 801b5b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b5b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801b5b8:	6878      	ldr	r0, [r7, #4]
 801b5ba:	3718      	adds	r7, #24
 801b5bc:	46bd      	mov	sp, r7
 801b5be:	bc90      	pop	{r4, r7}
 801b5c0:	4770      	bx	lr
 801b5c2:	bf00      	nop
 801b5c4:	0801b4a1 	.word	0x0801b4a1

0801b5c8 <pb_io_stream_init>:

int pb_io_stream_init(void)
{
 801b5c8:	b580      	push	{r7, lr}
 801b5ca:	af00      	add	r7, sp, #0
  ioRawDisableLLWrite();
 801b5cc:	f000 ffcc 	bl	801c568 <ioRawDisableLLWrite>
  return 0;
 801b5d0:	2300      	movs	r3, #0
}
 801b5d2:	4618      	mov	r0, r3
 801b5d4:	bd80      	pop	{r7, pc}
	...

0801b5d8 <aiPbMgrInit>:
  respMsg resp;
  pbMgrState state;
} pbContextMgr;

void aiPbMgrInit(const aiPbCmdFunc *funcs)
{
 801b5d8:	b590      	push	{r4, r7, lr}
 801b5da:	b089      	sub	sp, #36	@ 0x24
 801b5dc:	af00      	add	r7, sp, #0
 801b5de:	6178      	str	r0, [r7, #20]
  const aiPbCmdFunc *cfunc;

  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 801b5e0:	f44f 72ec 	mov.w	r2, #472	@ 0x1d8
 801b5e4:	2100      	movs	r1, #0
 801b5e6:	481f      	ldr	r0, [pc, #124]	@ (801b664 <aiPbMgrInit+0x8c>)
 801b5e8:	f018 fc53 	bl	8033e92 <memset>

  pb_io_stream_init();
 801b5ec:	f7ff ffec 	bl	801b5c8 <pb_io_stream_init>

  pbContextMgr.input = pb_io_istream(0);
 801b5f0:	4c1c      	ldr	r4, [pc, #112]	@ (801b664 <aiPbMgrInit+0x8c>)
 801b5f2:	463b      	mov	r3, r7
 801b5f4:	2100      	movs	r1, #0
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	f7ff ffca 	bl	801b590 <pb_io_istream>
 801b5fc:	463b      	mov	r3, r7
 801b5fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b602:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pbContextMgr.output = pb_io_ostream(0);
 801b606:	4c17      	ldr	r4, [pc, #92]	@ (801b664 <aiPbMgrInit+0x8c>)
 801b608:	463b      	mov	r3, r7
 801b60a:	2100      	movs	r1, #0
 801b60c:	4618      	mov	r0, r3
 801b60e:	f7ff ffa3 	bl	801b558 <pb_io_ostream>
 801b612:	340c      	adds	r4, #12
 801b614:	463b      	mov	r3, r7
 801b616:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b618:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  pbContextMgr.n_func = 0;
 801b61c:	4b11      	ldr	r3, [pc, #68]	@ (801b664 <aiPbMgrInit+0x8c>)
 801b61e:	2200      	movs	r2, #0
 801b620:	621a      	str	r2, [r3, #32]
  pbContextMgr.funcs = NULL;
 801b622:	4b10      	ldr	r3, [pc, #64]	@ (801b664 <aiPbMgrInit+0x8c>)
 801b624:	2200      	movs	r2, #0
 801b626:	61da      	str	r2, [r3, #28]

  if (funcs) {
 801b628:	697b      	ldr	r3, [r7, #20]
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	d011      	beq.n	801b652 <aiPbMgrInit+0x7a>
    cfunc = funcs;
 801b62e:	697b      	ldr	r3, [r7, #20]
 801b630:	61fb      	str	r3, [r7, #28]
    while (cfunc->process) {
 801b632:	e007      	b.n	801b644 <aiPbMgrInit+0x6c>
      pbContextMgr.n_func++;
 801b634:	4b0b      	ldr	r3, [pc, #44]	@ (801b664 <aiPbMgrInit+0x8c>)
 801b636:	6a1b      	ldr	r3, [r3, #32]
 801b638:	3301      	adds	r3, #1
 801b63a:	4a0a      	ldr	r2, [pc, #40]	@ (801b664 <aiPbMgrInit+0x8c>)
 801b63c:	6213      	str	r3, [r2, #32]
      cfunc++;
 801b63e:	69fb      	ldr	r3, [r7, #28]
 801b640:	330c      	adds	r3, #12
 801b642:	61fb      	str	r3, [r7, #28]
    while (cfunc->process) {
 801b644:	69fb      	ldr	r3, [r7, #28]
 801b646:	685b      	ldr	r3, [r3, #4]
 801b648:	2b00      	cmp	r3, #0
 801b64a:	d1f3      	bne.n	801b634 <aiPbMgrInit+0x5c>
    }
    pbContextMgr.funcs = funcs;
 801b64c:	4a05      	ldr	r2, [pc, #20]	@ (801b664 <aiPbMgrInit+0x8c>)
 801b64e:	697b      	ldr	r3, [r7, #20]
 801b650:	61d3      	str	r3, [r2, #28]
  }

  pbContextMgr.state = PB_MGR_READY;
 801b652:	4b04      	ldr	r3, [pc, #16]	@ (801b664 <aiPbMgrInit+0x8c>)
 801b654:	2201      	movs	r2, #1
 801b656:	f883 21d0 	strb.w	r2, [r3, #464]	@ 0x1d0
}
 801b65a:	bf00      	nop
 801b65c:	3724      	adds	r7, #36	@ 0x24
 801b65e:	46bd      	mov	sp, r7
 801b660:	bd90      	pop	{r4, r7, pc}
 801b662:	bf00      	nop
 801b664:	24031b30 	.word	0x24031b30

0801b668 <aiPbMgrWaitAndProcess>:

int aiPbMgrWaitAndProcess(void)
{
 801b668:	b580      	push	{r7, lr}
 801b66a:	b084      	sub	sp, #16
 801b66c:	af02      	add	r7, sp, #8
  uint32_t idx;
  const aiPbCmdFunc *cfunc;

  pb_io_flush_istream();
 801b66e:	f7ff ff05 	bl	801b47c <pb_io_flush_istream>
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 801b672:	4a24      	ldr	r2, [pc, #144]	@ (801b704 <aiPbMgrWaitAndProcess+0x9c>)
 801b674:	4924      	ldr	r1, [pc, #144]	@ (801b708 <aiPbMgrWaitAndProcess+0xa0>)
 801b676:	4825      	ldr	r0, [pc, #148]	@ (801b70c <aiPbMgrWaitAndProcess+0xa4>)
 801b678:	f005 ff0c 	bl	8021494 <pb_decode_delimited>
 801b67c:	4603      	mov	r3, r0
 801b67e:	2b00      	cmp	r3, #0
 801b680:	d039      	beq.n	801b6f6 <aiPbMgrWaitAndProcess+0x8e>
    pb_io_flush_istream();
 801b682:	f7ff fefb 	bl	801b47c <pb_io_flush_istream>
    pbContextMgr.state = PB_MGR_ON_GOING;
 801b686:	4b21      	ldr	r3, [pc, #132]	@ (801b70c <aiPbMgrWaitAndProcess+0xa4>)
 801b688:	2202      	movs	r2, #2
 801b68a:	f883 21d0 	strb.w	r2, [r3, #464]	@ 0x1d0
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 801b68e:	2300      	movs	r3, #0
 801b690:	607b      	str	r3, [r7, #4]
 801b692:	e01a      	b.n	801b6ca <aiPbMgrWaitAndProcess+0x62>
      cfunc = &pbContextMgr.funcs[idx];
 801b694:	4b1d      	ldr	r3, [pc, #116]	@ (801b70c <aiPbMgrWaitAndProcess+0xa4>)
 801b696:	69d9      	ldr	r1, [r3, #28]
 801b698:	687a      	ldr	r2, [r7, #4]
 801b69a:	4613      	mov	r3, r2
 801b69c:	005b      	lsls	r3, r3, #1
 801b69e:	4413      	add	r3, r2
 801b6a0:	009b      	lsls	r3, r3, #2
 801b6a2:	440b      	add	r3, r1
 801b6a4:	603b      	str	r3, [r7, #0]
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 801b6a6:	683b      	ldr	r3, [r7, #0]
 801b6a8:	781a      	ldrb	r2, [r3, #0]
 801b6aa:	4b18      	ldr	r3, [pc, #96]	@ (801b70c <aiPbMgrWaitAndProcess+0xa4>)
 801b6ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801b6b0:	429a      	cmp	r2, r3
 801b6b2:	d107      	bne.n	801b6c4 <aiPbMgrWaitAndProcess+0x5c>
        cfunc->process(&(pbContextMgr.req), &(pbContextMgr.resp), cfunc->param);
 801b6b4:	683b      	ldr	r3, [r7, #0]
 801b6b6:	685b      	ldr	r3, [r3, #4]
 801b6b8:	683a      	ldr	r2, [r7, #0]
 801b6ba:	6892      	ldr	r2, [r2, #8]
 801b6bc:	4914      	ldr	r1, [pc, #80]	@ (801b710 <aiPbMgrWaitAndProcess+0xa8>)
 801b6be:	4811      	ldr	r0, [pc, #68]	@ (801b704 <aiPbMgrWaitAndProcess+0x9c>)
 801b6c0:	4798      	blx	r3
        break;
 801b6c2:	e007      	b.n	801b6d4 <aiPbMgrWaitAndProcess+0x6c>
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	3301      	adds	r3, #1
 801b6c8:	607b      	str	r3, [r7, #4]
 801b6ca:	4b10      	ldr	r3, [pc, #64]	@ (801b70c <aiPbMgrWaitAndProcess+0xa4>)
 801b6cc:	6a1b      	ldr	r3, [r3, #32]
 801b6ce:	687a      	ldr	r2, [r7, #4]
 801b6d0:	429a      	cmp	r2, r3
 801b6d2:	d3df      	bcc.n	801b694 <aiPbMgrWaitAndProcess+0x2c>
      }
    }
    if (idx == pbContextMgr.n_func) {
 801b6d4:	4b0d      	ldr	r3, [pc, #52]	@ (801b70c <aiPbMgrWaitAndProcess+0xa4>)
 801b6d6:	6a1b      	ldr	r3, [r3, #32]
 801b6d8:	687a      	ldr	r2, [r7, #4]
 801b6da:	429a      	cmp	r2, r3
 801b6dc:	d107      	bne.n	801b6ee <aiPbMgrWaitAndProcess+0x86>
      aiPbMgrSendAck(&(pbContextMgr.req), &(pbContextMgr.resp), EnumState_S_ERROR,
 801b6de:	2304      	movs	r3, #4
 801b6e0:	9300      	str	r3, [sp, #0]
 801b6e2:	2304      	movs	r3, #4
 801b6e4:	2204      	movs	r2, #4
 801b6e6:	490a      	ldr	r1, [pc, #40]	@ (801b710 <aiPbMgrWaitAndProcess+0xa8>)
 801b6e8:	4806      	ldr	r0, [pc, #24]	@ (801b704 <aiPbMgrWaitAndProcess+0x9c>)
 801b6ea:	f000 f98b 	bl	801ba04 <aiPbMgrSendAck>
          EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
    }
    pbContextMgr.state = PB_MGR_READY;
 801b6ee:	4b07      	ldr	r3, [pc, #28]	@ (801b70c <aiPbMgrWaitAndProcess+0xa4>)
 801b6f0:	2201      	movs	r2, #1
 801b6f2:	f883 21d0 	strb.w	r2, [r3, #464]	@ 0x1d0
  }

  pb_io_flush_istream();
 801b6f6:	f7ff fec1 	bl	801b47c <pb_io_flush_istream>

  return 0;
 801b6fa:	2300      	movs	r3, #0
}
 801b6fc:	4618      	mov	r0, r3
 801b6fe:	3708      	adds	r7, #8
 801b700:	46bd      	mov	sp, r7
 801b702:	bd80      	pop	{r7, pc}
 801b704:	24031b54 	.word	0x24031b54
 801b708:	08072188 	.word	0x08072188
 801b70c:	24031b30 	.word	0x24031b30
 801b710:	24031ba8 	.word	0x24031ba8

0801b714 <aiPbStrCopy>:
  }
  return fmt;
}

void aiPbStrCopy(const char *src, char *dst, uint32_t max)
{
 801b714:	b580      	push	{r7, lr}
 801b716:	b088      	sub	sp, #32
 801b718:	af00      	add	r7, sp, #0
 801b71a:	60f8      	str	r0, [r7, #12]
 801b71c:	60b9      	str	r1, [r7, #8]
 801b71e:	607a      	str	r2, [r7, #4]
  const char undef[] = "UNDEFINED";
 801b720:	4a17      	ldr	r2, [pc, #92]	@ (801b780 <aiPbStrCopy+0x6c>)
 801b722:	f107 0310 	add.w	r3, r7, #16
 801b726:	ca07      	ldmia	r2, {r0, r1, r2}
 801b728:	c303      	stmia	r3!, {r0, r1}
 801b72a:	801a      	strh	r2, [r3, #0]
  size_t l = strlen(src);
 801b72c:	68f8      	ldr	r0, [r7, #12]
 801b72e:	f7f4 fcd7 	bl	80100e0 <strlen>
 801b732:	61f8      	str	r0, [r7, #28]

  if (l > max)
 801b734:	69fa      	ldr	r2, [r7, #28]
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	429a      	cmp	r2, r3
 801b73a:	d902      	bls.n	801b742 <aiPbStrCopy+0x2e>
    l = max-1;
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	3b01      	subs	r3, #1
 801b740:	61fb      	str	r3, [r7, #28]

  if (!dst)
 801b742:	68bb      	ldr	r3, [r7, #8]
 801b744:	2b00      	cmp	r3, #0
 801b746:	d017      	beq.n	801b778 <aiPbStrCopy+0x64>
    return;

  if (src && l)
 801b748:	68fb      	ldr	r3, [r7, #12]
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	d00a      	beq.n	801b764 <aiPbStrCopy+0x50>
 801b74e:	69fb      	ldr	r3, [r7, #28]
 801b750:	2b00      	cmp	r3, #0
 801b752:	d007      	beq.n	801b764 <aiPbStrCopy+0x50>
    memcpy(dst, src, l+1);
 801b754:	69fb      	ldr	r3, [r7, #28]
 801b756:	3301      	adds	r3, #1
 801b758:	461a      	mov	r2, r3
 801b75a:	68f9      	ldr	r1, [r7, #12]
 801b75c:	68b8      	ldr	r0, [r7, #8]
 801b75e:	f018 fc3a 	bl	8033fd6 <memcpy>
 801b762:	e00a      	b.n	801b77a <aiPbStrCopy+0x66>
  else
    memcpy(dst, undef, strlen(undef)+1);
 801b764:	68bb      	ldr	r3, [r7, #8]
 801b766:	461a      	mov	r2, r3
 801b768:	f107 0310 	add.w	r3, r7, #16
 801b76c:	cb03      	ldmia	r3!, {r0, r1}
 801b76e:	6010      	str	r0, [r2, #0]
 801b770:	6051      	str	r1, [r2, #4]
 801b772:	881b      	ldrh	r3, [r3, #0]
 801b774:	8113      	strh	r3, [r2, #8]
 801b776:	e000      	b.n	801b77a <aiPbStrCopy+0x66>
    return;
 801b778:	bf00      	nop
}
 801b77a:	3720      	adds	r7, #32
 801b77c:	46bd      	mov	sp, r7
 801b77e:	bd80      	pop	{r7, pc}
 801b780:	080377dc 	.word	0x080377dc

0801b784 <encode_uint32>:
/*
 * Callback function to encode array of uint32
 */
bool encode_uint32(pb_ostream_t *stream, const pb_field_t *field,
                   void * const *arg)
{
 801b784:	b5b0      	push	{r4, r5, r7, lr}
 801b786:	b088      	sub	sp, #32
 801b788:	af00      	add	r7, sp, #0
 801b78a:	60f8      	str	r0, [r7, #12]
 801b78c:	60b9      	str	r1, [r7, #8]
 801b78e:	607a      	str	r2, [r7, #4]
  struct _encode_uint32* array = (struct _encode_uint32 *)*arg;
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	681b      	ldr	r3, [r3, #0]
 801b794:	617b      	str	r3, [r7, #20]
  int offset = (array->offset == 0)?4:array->offset;
 801b796:	697b      	ldr	r3, [r7, #20]
 801b798:	689b      	ldr	r3, [r3, #8]
 801b79a:	2b00      	cmp	r3, #0
 801b79c:	d002      	beq.n	801b7a4 <encode_uint32+0x20>
 801b79e:	697b      	ldr	r3, [r7, #20]
 801b7a0:	689b      	ldr	r3, [r3, #8]
 801b7a2:	e000      	b.n	801b7a6 <encode_uint32+0x22>
 801b7a4:	2304      	movs	r3, #4
 801b7a6:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < array->size; i++)
 801b7a8:	2300      	movs	r3, #0
 801b7aa:	61fb      	str	r3, [r7, #28]
 801b7ac:	e037      	b.n	801b81e <encode_uint32+0x9a>
  {
    if (!pb_encode_tag_for_field(stream, field))
 801b7ae:	68b9      	ldr	r1, [r7, #8]
 801b7b0:	68f8      	ldr	r0, [r7, #12]
 801b7b2:	f006 ff2d 	bl	8022610 <pb_encode_tag_for_field>
 801b7b6:	4603      	mov	r3, r0
 801b7b8:	f083 0301 	eor.w	r3, r3, #1
 801b7bc:	b2db      	uxtb	r3, r3
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d001      	beq.n	801b7c6 <encode_uint32+0x42>
      return false;
 801b7c2:	2300      	movs	r3, #0
 801b7c4:	e031      	b.n	801b82a <encode_uint32+0xa6>
    uint32_t c_val = 0;
 801b7c6:	2300      	movs	r3, #0
 801b7c8:	61bb      	str	r3, [r7, #24]
    if (offset == 2)
 801b7ca:	693b      	ldr	r3, [r7, #16]
 801b7cc:	2b02      	cmp	r3, #2
 801b7ce:	d109      	bne.n	801b7e4 <encode_uint32+0x60>
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 801b7d0:	697b      	ldr	r3, [r7, #20]
 801b7d2:	685a      	ldr	r2, [r3, #4]
 801b7d4:	693b      	ldr	r3, [r7, #16]
 801b7d6:	69f9      	ldr	r1, [r7, #28]
 801b7d8:	fb01 f303 	mul.w	r3, r1, r3
 801b7dc:	4413      	add	r3, r2
 801b7de:	881b      	ldrh	r3, [r3, #0]
 801b7e0:	61bb      	str	r3, [r7, #24]
 801b7e2:	e008      	b.n	801b7f6 <encode_uint32+0x72>
    else
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
 801b7e4:	697b      	ldr	r3, [r7, #20]
 801b7e6:	685a      	ldr	r2, [r3, #4]
 801b7e8:	693b      	ldr	r3, [r7, #16]
 801b7ea:	69f9      	ldr	r1, [r7, #28]
 801b7ec:	fb01 f303 	mul.w	r3, r1, r3
 801b7f0:	4413      	add	r3, r2
 801b7f2:	681b      	ldr	r3, [r3, #0]
 801b7f4:	61bb      	str	r3, [r7, #24]
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 801b7f6:	69bb      	ldr	r3, [r7, #24]
 801b7f8:	17da      	asrs	r2, r3, #31
 801b7fa:	461c      	mov	r4, r3
 801b7fc:	4615      	mov	r5, r2
 801b7fe:	4622      	mov	r2, r4
 801b800:	462b      	mov	r3, r5
 801b802:	68f8      	ldr	r0, [r7, #12]
 801b804:	f006 fdd7 	bl	80223b6 <pb_encode_varint>
 801b808:	4603      	mov	r3, r0
 801b80a:	f083 0301 	eor.w	r3, r3, #1
 801b80e:	b2db      	uxtb	r3, r3
 801b810:	2b00      	cmp	r3, #0
 801b812:	d001      	beq.n	801b818 <encode_uint32+0x94>
      return false;
 801b814:	2300      	movs	r3, #0
 801b816:	e008      	b.n	801b82a <encode_uint32+0xa6>
  for (size_t i = 0; i < array->size; i++)
 801b818:	69fb      	ldr	r3, [r7, #28]
 801b81a:	3301      	adds	r3, #1
 801b81c:	61fb      	str	r3, [r7, #28]
 801b81e:	697b      	ldr	r3, [r7, #20]
 801b820:	681b      	ldr	r3, [r3, #0]
 801b822:	69fa      	ldr	r2, [r7, #28]
 801b824:	429a      	cmp	r2, r3
 801b826:	d3c2      	bcc.n	801b7ae <encode_uint32+0x2a>
  }
  return true;
 801b828:	2301      	movs	r3, #1
}
 801b82a:	4618      	mov	r0, r3
 801b82c:	3720      	adds	r7, #32
 801b82e:	46bd      	mov	sp, r7
 801b830:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801b834 <encode_tensor_desc>:
/*
 * Callback function to encode multiple aiTensorDescMsg
 */
bool encode_tensor_desc(pb_ostream_t *stream, const pb_field_t *field,
                        void * const *arg)
{
 801b834:	b590      	push	{r4, r7, lr}
 801b836:	b0a3      	sub	sp, #140	@ 0x8c
 801b838:	af00      	add	r7, sp, #0
 801b83a:	60f8      	str	r0, [r7, #12]
 801b83c:	60b9      	str	r1, [r7, #8]
 801b83e:	607a      	str	r2, [r7, #4]
  struct _encode_tensor_desc* tensors = (struct _encode_tensor_desc *)*arg;
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	681b      	ldr	r3, [r3, #0]
 801b844:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  for (size_t i = 0; i < tensors->size; i++)
 801b848:	2300      	movs	r3, #0
 801b84a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801b84e:	e038      	b.n	801b8c2 <encode_tensor_desc+0x8e>
  {
    aiTensorDescMsg msg = aiTensorDescMsg_init_zero;
 801b850:	f107 0310 	add.w	r3, r7, #16
 801b854:	2264      	movs	r2, #100	@ 0x64
 801b856:	2100      	movs	r1, #0
 801b858:	4618      	mov	r0, r3
 801b85a:	f018 fb1a 	bl	8033e92 <memset>
    struct _encode_uint32 array_u32;
    tensors->cb(i, tensors->data, &msg, &array_u32);
 801b85e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801b862:	681c      	ldr	r4, [r3, #0]
 801b864:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801b868:	6899      	ldr	r1, [r3, #8]
 801b86a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801b86e:	f107 0210 	add.w	r2, r7, #16
 801b872:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 801b876:	47a0      	blx	r4

    msg.dims.funcs.encode = encode_uint32;
 801b878:	4b18      	ldr	r3, [pc, #96]	@ (801b8dc <encode_tensor_desc+0xa8>)
 801b87a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    msg.dims.arg = &array_u32;
 801b87c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801b880:	663b      	str	r3, [r7, #96]	@ 0x60

    if (!pb_encode_tag_for_field(stream, field))
 801b882:	68b9      	ldr	r1, [r7, #8]
 801b884:	68f8      	ldr	r0, [r7, #12]
 801b886:	f006 fec3 	bl	8022610 <pb_encode_tag_for_field>
 801b88a:	4603      	mov	r3, r0
 801b88c:	f083 0301 	eor.w	r3, r3, #1
 801b890:	b2db      	uxtb	r3, r3
 801b892:	2b00      	cmp	r3, #0
 801b894:	d001      	beq.n	801b89a <encode_tensor_desc+0x66>
      return false;
 801b896:	2300      	movs	r3, #0
 801b898:	e01b      	b.n	801b8d2 <encode_tensor_desc+0x9e>

    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 801b89a:	f107 0310 	add.w	r3, r7, #16
 801b89e:	461a      	mov	r2, r3
 801b8a0:	490f      	ldr	r1, [pc, #60]	@ (801b8e0 <encode_tensor_desc+0xac>)
 801b8a2:	68f8      	ldr	r0, [r7, #12]
 801b8a4:	f006 ff13 	bl	80226ce <pb_encode_submessage>
 801b8a8:	4603      	mov	r3, r0
 801b8aa:	f083 0301 	eor.w	r3, r3, #1
 801b8ae:	b2db      	uxtb	r3, r3
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	d001      	beq.n	801b8b8 <encode_tensor_desc+0x84>
      return false;
 801b8b4:	2300      	movs	r3, #0
 801b8b6:	e00c      	b.n	801b8d2 <encode_tensor_desc+0x9e>
  for (size_t i = 0; i < tensors->size; i++)
 801b8b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801b8bc:	3301      	adds	r3, #1
 801b8be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801b8c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801b8c6:	685b      	ldr	r3, [r3, #4]
 801b8c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801b8cc:	429a      	cmp	r2, r3
 801b8ce:	d3bf      	bcc.n	801b850 <encode_tensor_desc+0x1c>
  }
  return true;
 801b8d0:	2301      	movs	r3, #1
}
 801b8d2:	4618      	mov	r0, r3
 801b8d4:	378c      	adds	r7, #140	@ 0x8c
 801b8d6:	46bd      	mov	sp, r7
 801b8d8:	bd90      	pop	{r4, r7, pc}
 801b8da:	bf00      	nop
 801b8dc:	0801b785 	.word	0x0801b785
 801b8e0:	080721e8 	.word	0x080721e8

0801b8e4 <decode_data_cb>:
/*
 * Local callback function to decode datas field from aiDataMsg msg
 */
static bool decode_data_cb(pb_istream_t *stream, const pb_field_t *field,
    void **arg)
{
 801b8e4:	b580      	push	{r7, lr}
 801b8e6:	b08a      	sub	sp, #40	@ 0x28
 801b8e8:	af00      	add	r7, sp, #0
 801b8ea:	60f8      	str	r0, [r7, #12]
 801b8ec:	60b9      	str	r1, [r7, #8]
 801b8ee:	607a      	str	r2, [r7, #4]
  UNUSED(field);
  aiPbData *data = (aiPbData *)*arg;
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	681b      	ldr	r3, [r3, #0]
 801b8f4:	61fb      	str	r3, [r7, #28]

  int maxr = data->size;
 801b8f6:	69fb      	ldr	r3, [r7, #28]
 801b8f8:	685b      	ldr	r3, [r3, #4]
 801b8fa:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t itsize = 1;
 801b8fc:	2301      	movs	r3, #1
 801b8fe:	61bb      	str	r3, [r7, #24]
  uint8_t *pw = (uint8_t *)data->addr;
 801b900:	69fb      	ldr	r3, [r7, #28]
 801b902:	689b      	ldr	r3, [r3, #8]
 801b904:	623b      	str	r3, [r7, #32]
  data->nb_read = 0;
 801b906:	69fb      	ldr	r3, [r7, #28]
 801b908:	2200      	movs	r2, #0
 801b90a:	60da      	str	r2, [r3, #12]

  /* Read data */
  while (stream->bytes_left) {
 801b90c:	e026      	b.n	801b95c <decode_data_cb+0x78>
    uint64_t number;
    if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 801b90e:	f107 0310 	add.w	r3, r7, #16
 801b912:	69ba      	ldr	r2, [r7, #24]
 801b914:	4619      	mov	r1, r3
 801b916:	68f8      	ldr	r0, [r7, #12]
 801b918:	f004 fe9e 	bl	8020658 <pb_read>
 801b91c:	4603      	mov	r3, r0
 801b91e:	f083 0301 	eor.w	r3, r3, #1
 801b922:	b2db      	uxtb	r3, r3
 801b924:	2b00      	cmp	r3, #0
 801b926:	d001      	beq.n	801b92c <decode_data_cb+0x48>
      return false;
 801b928:	2300      	movs	r3, #0
 801b92a:	e01c      	b.n	801b966 <decode_data_cb+0x82>
    if ((pw) && (maxr > 0)) /* additional data are skipped */
 801b92c:	6a3b      	ldr	r3, [r7, #32]
 801b92e:	2b00      	cmp	r3, #0
 801b930:	d00e      	beq.n	801b950 <decode_data_cb+0x6c>
 801b932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b934:	2b00      	cmp	r3, #0
 801b936:	dd0b      	ble.n	801b950 <decode_data_cb+0x6c>
    {
      *pw = *(uint8_t *)&number;
 801b938:	f107 0310 	add.w	r3, r7, #16
 801b93c:	781a      	ldrb	r2, [r3, #0]
 801b93e:	6a3b      	ldr	r3, [r7, #32]
 801b940:	701a      	strb	r2, [r3, #0]
      pw += itsize;
 801b942:	6a3a      	ldr	r2, [r7, #32]
 801b944:	69bb      	ldr	r3, [r7, #24]
 801b946:	4413      	add	r3, r2
 801b948:	623b      	str	r3, [r7, #32]
      maxr--;
 801b94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b94c:	3b01      	subs	r3, #1
 801b94e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    data->nb_read += itsize;
 801b950:	69fb      	ldr	r3, [r7, #28]
 801b952:	68da      	ldr	r2, [r3, #12]
 801b954:	69bb      	ldr	r3, [r7, #24]
 801b956:	441a      	add	r2, r3
 801b958:	69fb      	ldr	r3, [r7, #28]
 801b95a:	60da      	str	r2, [r3, #12]
  while (stream->bytes_left) {
 801b95c:	68fb      	ldr	r3, [r7, #12]
 801b95e:	689b      	ldr	r3, [r3, #8]
 801b960:	2b00      	cmp	r3, #0
 801b962:	d1d4      	bne.n	801b90e <decode_data_cb+0x2a>
  }

  return true;
 801b964:	2301      	movs	r3, #1
}
 801b966:	4618      	mov	r0, r3
 801b968:	3728      	adds	r7, #40	@ 0x28
 801b96a:	46bd      	mov	sp, r7
 801b96c:	bd80      	pop	{r7, pc}

0801b96e <encode_data_cb>:
/*
 * Local callback function to encode datas field from aiDataMsg msg
 */
bool encode_data_cb(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
 801b96e:	b580      	push	{r7, lr}
 801b970:	b086      	sub	sp, #24
 801b972:	af00      	add	r7, sp, #0
 801b974:	60f8      	str	r0, [r7, #12]
 801b976:	60b9      	str	r1, [r7, #8]
 801b978:	607a      	str	r2, [r7, #4]
  aiPbData *data = (aiPbData *)*arg;
 801b97a:	687b      	ldr	r3, [r7, #4]
 801b97c:	681b      	ldr	r3, [r3, #0]
 801b97e:	617b      	str	r3, [r7, #20]

  pb_byte_t *pr = (pb_byte_t *)data->addr;
 801b980:	697b      	ldr	r3, [r7, #20]
 801b982:	689b      	ldr	r3, [r3, #8]
 801b984:	613b      	str	r3, [r7, #16]

  if (!pb_encode_tag_for_field(stream, field))
 801b986:	68b9      	ldr	r1, [r7, #8]
 801b988:	68f8      	ldr	r0, [r7, #12]
 801b98a:	f006 fe41 	bl	8022610 <pb_encode_tag_for_field>
 801b98e:	4603      	mov	r3, r0
 801b990:	f083 0301 	eor.w	r3, r3, #1
 801b994:	b2db      	uxtb	r3, r3
 801b996:	2b00      	cmp	r3, #0
 801b998:	d001      	beq.n	801b99e <encode_data_cb+0x30>
    return false;
 801b99a:	2300      	movs	r3, #0
 801b99c:	e00f      	b.n	801b9be <encode_data_cb+0x50>

  if (!pb_encode_string(stream, pr, data->size))
 801b99e:	697b      	ldr	r3, [r7, #20]
 801b9a0:	685b      	ldr	r3, [r3, #4]
 801b9a2:	461a      	mov	r2, r3
 801b9a4:	6939      	ldr	r1, [r7, #16]
 801b9a6:	68f8      	ldr	r0, [r7, #12]
 801b9a8:	f006 fe70 	bl	802268c <pb_encode_string>
 801b9ac:	4603      	mov	r3, r0
 801b9ae:	f083 0301 	eor.w	r3, r3, #1
 801b9b2:	b2db      	uxtb	r3, r3
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	d001      	beq.n	801b9bc <encode_data_cb+0x4e>
    return false;
 801b9b8:	2300      	movs	r3, #0
 801b9ba:	e000      	b.n	801b9be <encode_data_cb+0x50>

  return true;
 801b9bc:	2301      	movs	r3, #1
}
 801b9be:	4618      	mov	r0, r3
 801b9c0:	3718      	adds	r7, #24
 801b9c2:	46bd      	mov	sp, r7
 801b9c4:	bd80      	pop	{r7, pc}
	...

0801b9c8 <aiPbMgrSendResp>:

/*---------------------------------------------------------------------------*/

void aiPbMgrSendResp(const reqMsg *req, respMsg *resp,
    EnumState state)
{
 801b9c8:	b580      	push	{r7, lr}
 801b9ca:	b084      	sub	sp, #16
 801b9cc:	af00      	add	r7, sp, #0
 801b9ce:	60f8      	str	r0, [r7, #12]
 801b9d0:	60b9      	str	r1, [r7, #8]
 801b9d2:	4613      	mov	r3, r2
 801b9d4:	71fb      	strb	r3, [r7, #7]
  resp->reqid = req->reqid;
 801b9d6:	68fb      	ldr	r3, [r7, #12]
 801b9d8:	681a      	ldr	r2, [r3, #0]
 801b9da:	68bb      	ldr	r3, [r7, #8]
 801b9dc:	601a      	str	r2, [r3, #0]
  resp->state = state;
 801b9de:	68bb      	ldr	r3, [r7, #8]
 801b9e0:	79fa      	ldrb	r2, [r7, #7]
 801b9e2:	711a      	strb	r2, [r3, #4]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 801b9e4:	68ba      	ldr	r2, [r7, #8]
 801b9e6:	4905      	ldr	r1, [pc, #20]	@ (801b9fc <aiPbMgrSendResp+0x34>)
 801b9e8:	4805      	ldr	r0, [pc, #20]	@ (801ba00 <aiPbMgrSendResp+0x38>)
 801b9ea:	f006 fc9d 	bl	8022328 <pb_encode>
  pb_io_flush_ostream();
 801b9ee:	f7ff fce1 	bl	801b3b4 <pb_io_flush_ostream>
}
 801b9f2:	bf00      	nop
 801b9f4:	3710      	adds	r7, #16
 801b9f6:	46bd      	mov	sp, r7
 801b9f8:	bd80      	pop	{r7, pc}
 801b9fa:	bf00      	nop
 801b9fc:	080725b8 	.word	0x080725b8
 801ba00:	24031b3c 	.word	0x24031b3c

0801ba04 <aiPbMgrSendAck>:

void aiPbMgrSendAck(const reqMsg *req, respMsg *resp,
    EnumState state, uint32_t param, EnumError error)
{
 801ba04:	b580      	push	{r7, lr}
 801ba06:	b084      	sub	sp, #16
 801ba08:	af00      	add	r7, sp, #0
 801ba0a:	60f8      	str	r0, [r7, #12]
 801ba0c:	60b9      	str	r1, [r7, #8]
 801ba0e:	603b      	str	r3, [r7, #0]
 801ba10:	4613      	mov	r3, r2
 801ba12:	71fb      	strb	r3, [r7, #7]
  resp->which_payload = respMsg_ack_tag;
 801ba14:	68bb      	ldr	r3, [r7, #8]
 801ba16:	220c      	movs	r2, #12
 801ba18:	80da      	strh	r2, [r3, #6]
  resp->payload.ack.param = param;
 801ba1a:	68bb      	ldr	r3, [r7, #8]
 801ba1c:	683a      	ldr	r2, [r7, #0]
 801ba1e:	609a      	str	r2, [r3, #8]
  resp->payload.ack.error = error;
 801ba20:	68bb      	ldr	r3, [r7, #8]
 801ba22:	7e3a      	ldrb	r2, [r7, #24]
 801ba24:	731a      	strb	r2, [r3, #12]
  aiPbMgrSendResp(req, resp, state);
 801ba26:	79fb      	ldrb	r3, [r7, #7]
 801ba28:	461a      	mov	r2, r3
 801ba2a:	68b9      	ldr	r1, [r7, #8]
 801ba2c:	68f8      	ldr	r0, [r7, #12]
 801ba2e:	f7ff ffcb 	bl	801b9c8 <aiPbMgrSendResp>
}
 801ba32:	bf00      	nop
 801ba34:	3710      	adds	r7, #16
 801ba36:	46bd      	mov	sp, r7
 801ba38:	bd80      	pop	{r7, pc}
	...

0801ba3c <aiPbMgrWaitAck>:

bool aiPbMgrWaitAck(void)
{
 801ba3c:	b580      	push	{r7, lr}
 801ba3e:	b084      	sub	sp, #16
 801ba40:	af00      	add	r7, sp, #0
  bool res;
  ackMsg ack = ackMsg_init_default;
 801ba42:	2300      	movs	r3, #0
 801ba44:	607b      	str	r3, [r7, #4]
 801ba46:	2300      	movs	r3, #0
 801ba48:	723b      	strb	r3, [r7, #8]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 801ba4a:	1d3b      	adds	r3, r7, #4
 801ba4c:	461a      	mov	r2, r3
 801ba4e:	4906      	ldr	r1, [pc, #24]	@ (801ba68 <aiPbMgrWaitAck+0x2c>)
 801ba50:	4806      	ldr	r0, [pc, #24]	@ (801ba6c <aiPbMgrWaitAck+0x30>)
 801ba52:	f005 fd1f 	bl	8021494 <pb_decode_delimited>
 801ba56:	4603      	mov	r3, r0
 801ba58:	73fb      	strb	r3, [r7, #15]
  pb_io_flush_istream();
 801ba5a:	f7ff fd0f 	bl	801b47c <pb_io_flush_istream>
  return res;
 801ba5e:	7bfb      	ldrb	r3, [r7, #15]
}
 801ba60:	4618      	mov	r0, r3
 801ba62:	3710      	adds	r7, #16
 801ba64:	46bd      	mov	sp, r7
 801ba66:	bd80      	pop	{r7, pc}
 801ba68:	08072558 	.word	0x08072558
 801ba6c:	24031b30 	.word	0x24031b30

0801ba70 <aiPbMgrSendLogV2>:
  pb_io_flush_istream();
  return res;
}

bool aiPbMgrSendLogV2(EnumState state, uint32_t lvl, const char *str)
{
 801ba70:	b580      	push	{r7, lr}
 801ba72:	b088      	sub	sp, #32
 801ba74:	af00      	add	r7, sp, #0
 801ba76:	4603      	mov	r3, r0
 801ba78:	60b9      	str	r1, [r7, #8]
 801ba7a:	607a      	str	r2, [r7, #4]
 801ba7c:	73fb      	strb	r3, [r7, #15]
  bool res;
  ackMsg ack = ackMsg_init_default;
 801ba7e:	2300      	movs	r3, #0
 801ba80:	613b      	str	r3, [r7, #16]
 801ba82:	2300      	movs	r3, #0
 801ba84:	753b      	strb	r3, [r7, #20]

  if (pbContextMgr.state != PB_MGR_ON_GOING)
 801ba86:	4b1a      	ldr	r3, [pc, #104]	@ (801baf0 <aiPbMgrSendLogV2+0x80>)
 801ba88:	f893 31d0 	ldrb.w	r3, [r3, #464]	@ 0x1d0
 801ba8c:	2b02      	cmp	r3, #2
 801ba8e:	d001      	beq.n	801ba94 <aiPbMgrSendLogV2+0x24>
    return false;
 801ba90:	2300      	movs	r3, #0
 801ba92:	e029      	b.n	801bae8 <aiPbMgrSendLogV2+0x78>

  size_t len = strlen(str);
 801ba94:	6878      	ldr	r0, [r7, #4]
 801ba96:	f7f4 fb23 	bl	80100e0 <strlen>
 801ba9a:	61f8      	str	r0, [r7, #28]

  pbContextMgr.resp.which_payload = respMsg_log_tag;
 801ba9c:	4b14      	ldr	r3, [pc, #80]	@ (801baf0 <aiPbMgrSendLogV2+0x80>)
 801ba9e:	220d      	movs	r2, #13
 801baa0:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
  pbContextMgr.resp.payload.log.level = lvl;
 801baa4:	4a12      	ldr	r2, [pc, #72]	@ (801baf0 <aiPbMgrSendLogV2+0x80>)
 801baa6:	68bb      	ldr	r3, [r7, #8]
 801baa8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  if (len >= sizeof(pbContextMgr.resp.payload.log.str))
 801baac:	69fb      	ldr	r3, [r7, #28]
 801baae:	2b7f      	cmp	r3, #127	@ 0x7f
 801bab0:	d901      	bls.n	801bab6 <aiPbMgrSendLogV2+0x46>
    len = sizeof(pbContextMgr.resp.payload.log.str) - 1;
 801bab2:	237f      	movs	r3, #127	@ 0x7f
 801bab4:	61fb      	str	r3, [r7, #28]

  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 801bab6:	69fb      	ldr	r3, [r7, #28]
 801bab8:	3301      	adds	r3, #1
 801baba:	461a      	mov	r2, r3
 801babc:	6879      	ldr	r1, [r7, #4]
 801babe:	480d      	ldr	r0, [pc, #52]	@ (801baf4 <aiPbMgrSendLogV2+0x84>)
 801bac0:	f018 fa89 	bl	8033fd6 <memcpy>

  aiPbMgrSendResp(&(pbContextMgr.req), &(pbContextMgr.resp), state);
 801bac4:	7bfb      	ldrb	r3, [r7, #15]
 801bac6:	461a      	mov	r2, r3
 801bac8:	490b      	ldr	r1, [pc, #44]	@ (801baf8 <aiPbMgrSendLogV2+0x88>)
 801baca:	480c      	ldr	r0, [pc, #48]	@ (801bafc <aiPbMgrSendLogV2+0x8c>)
 801bacc:	f7ff ff7c 	bl	801b9c8 <aiPbMgrSendResp>

  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 801bad0:	f107 0310 	add.w	r3, r7, #16
 801bad4:	461a      	mov	r2, r3
 801bad6:	490a      	ldr	r1, [pc, #40]	@ (801bb00 <aiPbMgrSendLogV2+0x90>)
 801bad8:	4805      	ldr	r0, [pc, #20]	@ (801baf0 <aiPbMgrSendLogV2+0x80>)
 801bada:	f005 fcdb 	bl	8021494 <pb_decode_delimited>
 801bade:	4603      	mov	r3, r0
 801bae0:	76fb      	strb	r3, [r7, #27]
  pb_io_flush_istream();
 801bae2:	f7ff fccb 	bl	801b47c <pb_io_flush_istream>
  return res;
 801bae6:	7efb      	ldrb	r3, [r7, #27]
}
 801bae8:	4618      	mov	r0, r3
 801baea:	3720      	adds	r7, #32
 801baec:	46bd      	mov	sp, r7
 801baee:	bd80      	pop	{r7, pc}
 801baf0:	24031b30 	.word	0x24031b30
 801baf4:	24031bb4 	.word	0x24031bb4
 801baf8:	24031ba8 	.word	0x24031ba8
 801bafc:	24031b54 	.word	0x24031b54
 801bb00:	08072558 	.word	0x08072558

0801bb04 <aiPbMgrReceiveData>:

bool aiPbMgrReceiveData(aiPbData *data)
{
 801bb04:	b580      	push	{r7, lr}
 801bb06:	b088      	sub	sp, #32
 801bb08:	af00      	add	r7, sp, #0
 801bb0a:	6078      	str	r0, [r7, #4]
  aiDataMsg msg;

  msg.datas.funcs.decode = &decode_data_cb;
 801bb0c:	4b0b      	ldr	r3, [pc, #44]	@ (801bb3c <aiPbMgrReceiveData+0x38>)
 801bb0e:	61bb      	str	r3, [r7, #24]
  msg.datas.arg = (void *)data;
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	61fb      	str	r3, [r7, #28]

  /* Waiting and decoding aiDataMsg message */
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 801bb14:	f107 030c 	add.w	r3, r7, #12
 801bb18:	461a      	mov	r2, r3
 801bb1a:	4909      	ldr	r1, [pc, #36]	@ (801bb40 <aiPbMgrReceiveData+0x3c>)
 801bb1c:	4809      	ldr	r0, [pc, #36]	@ (801bb44 <aiPbMgrReceiveData+0x40>)
 801bb1e:	f005 fcb9 	bl	8021494 <pb_decode_delimited>
  pb_io_flush_istream();
 801bb22:	f7ff fcab 	bl	801b47c <pb_io_flush_istream>

  data->type = msg.type;
 801bb26:	68fa      	ldr	r2, [r7, #12]
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	601a      	str	r2, [r3, #0]
  data->addr = msg.addr;
 801bb2c:	697a      	ldr	r2, [r7, #20]
 801bb2e:	687b      	ldr	r3, [r7, #4]
 801bb30:	609a      	str	r2, [r3, #8]

  return true;
 801bb32:	2301      	movs	r3, #1
}
 801bb34:	4618      	mov	r0, r3
 801bb36:	3720      	adds	r7, #32
 801bb38:	46bd      	mov	sp, r7
 801bb3a:	bd80      	pop	{r7, pc}
 801bb3c:	0801b8e5 	.word	0x0801b8e5
 801bb40:	08072288 	.word	0x08072288
 801bb44:	24031b30 	.word	0x24031b30

0801bb48 <aiPbMgrSendOperator>:


bool aiPbMgrSendOperator(const reqMsg *req, respMsg *resp,
    EnumState state, const char *name, const uint32_t type, const uint32_t id,
    aiOpPerf *perf)
{
 801bb48:	b580      	push	{r7, lr}
 801bb4a:	b088      	sub	sp, #32
 801bb4c:	af00      	add	r7, sp, #0
 801bb4e:	60f8      	str	r0, [r7, #12]
 801bb50:	60b9      	str	r1, [r7, #8]
 801bb52:	603b      	str	r3, [r7, #0]
 801bb54:	4613      	mov	r3, r2
 801bb56:	71fb      	strb	r3, [r7, #7]
  struct _encode_uint32 array;
  resp->which_payload = respMsg_op_tag;
 801bb58:	68bb      	ldr	r3, [r7, #8]
 801bb5a:	2210      	movs	r2, #16
 801bb5c:	80da      	strh	r2, [r3, #6]
  if (name)
 801bb5e:	683b      	ldr	r3, [r7, #0]
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	d007      	beq.n	801bb74 <aiPbMgrSendOperator+0x2c>
    aiPbStrCopy(name, &resp->payload.op.name[0], sizeof(resp->payload.op.name));
 801bb64:	68bb      	ldr	r3, [r7, #8]
 801bb66:	3308      	adds	r3, #8
 801bb68:	2240      	movs	r2, #64	@ 0x40
 801bb6a:	4619      	mov	r1, r3
 801bb6c:	6838      	ldr	r0, [r7, #0]
 801bb6e:	f7ff fdd1 	bl	801b714 <aiPbStrCopy>
 801bb72:	e002      	b.n	801bb7a <aiPbMgrSendOperator+0x32>
  else
    resp->payload.op.name[0] = 0;
 801bb74:	68bb      	ldr	r3, [r7, #8]
 801bb76:	2200      	movs	r2, #0
 801bb78:	721a      	strb	r2, [r3, #8]
  resp->payload.op.type = type;
 801bb7a:	68bb      	ldr	r3, [r7, #8]
 801bb7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801bb7e:	649a      	str	r2, [r3, #72]	@ 0x48
  resp->payload.op.id = id;
 801bb80:	68bb      	ldr	r3, [r7, #8]
 801bb82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bb84:	64da      	str	r2, [r3, #76]	@ 0x4c

  if (perf) {
 801bb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	d027      	beq.n	801bbdc <aiPbMgrSendOperator+0x94>
    resp->payload.op.stack_used = perf->stack_usage;
 801bb8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bb8e:	691a      	ldr	r2, [r3, #16]
 801bb90:	68bb      	ldr	r3, [r7, #8]
 801bb92:	661a      	str	r2, [r3, #96]	@ 0x60
    resp->payload.op.heap_used = perf->heap_usage;
 801bb94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bb96:	695a      	ldr	r2, [r3, #20]
 801bb98:	68bb      	ldr	r3, [r7, #8]
 801bb9a:	665a      	str	r2, [r3, #100]	@ 0x64
    resp->payload.op.duration = perf->duration;
 801bb9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bb9e:	681a      	ldr	r2, [r3, #0]
 801bba0:	68bb      	ldr	r3, [r7, #8]
 801bba2:	651a      	str	r2, [r3, #80]	@ 0x50
    resp->payload.op.counter_type = perf->counter_type;
 801bba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bba6:	685a      	ldr	r2, [r3, #4]
 801bba8:	68bb      	ldr	r3, [r7, #8]
 801bbaa:	655a      	str	r2, [r3, #84]	@ 0x54
    if (perf->counters) {
 801bbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bbae:	68db      	ldr	r3, [r3, #12]
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	d00f      	beq.n	801bbd4 <aiPbMgrSendOperator+0x8c>
      array.size = perf->counter_n;
 801bbb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bbb6:	689b      	ldr	r3, [r3, #8]
 801bbb8:	617b      	str	r3, [r7, #20]
	  array.data = (void *)perf->counters;
 801bbba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bbbc:	68db      	ldr	r3, [r3, #12]
 801bbbe:	61bb      	str	r3, [r7, #24]
	  array.offset = 4;
 801bbc0:	2304      	movs	r3, #4
 801bbc2:	61fb      	str	r3, [r7, #28]
      resp->payload.op.counters.funcs.encode = encode_uint32;
 801bbc4:	68bb      	ldr	r3, [r7, #8]
 801bbc6:	4a10      	ldr	r2, [pc, #64]	@ (801bc08 <aiPbMgrSendOperator+0xc0>)
 801bbc8:	659a      	str	r2, [r3, #88]	@ 0x58
      resp->payload.op.counters.arg = &array;
 801bbca:	68bb      	ldr	r3, [r7, #8]
 801bbcc:	f107 0214 	add.w	r2, r7, #20
 801bbd0:	65da      	str	r2, [r3, #92]	@ 0x5c
 801bbd2:	e00d      	b.n	801bbf0 <aiPbMgrSendOperator+0xa8>
    } else {
      resp->payload.op.counters.funcs.encode = NULL;
 801bbd4:	68bb      	ldr	r3, [r7, #8]
 801bbd6:	2200      	movs	r2, #0
 801bbd8:	659a      	str	r2, [r3, #88]	@ 0x58
 801bbda:	e009      	b.n	801bbf0 <aiPbMgrSendOperator+0xa8>
    }
  }
  else {
    resp->payload.op.duration = 0.0f;
 801bbdc:	68bb      	ldr	r3, [r7, #8]
 801bbde:	f04f 0200 	mov.w	r2, #0
 801bbe2:	651a      	str	r2, [r3, #80]	@ 0x50
    resp->payload.op.counter_type = 0;
 801bbe4:	68bb      	ldr	r3, [r7, #8]
 801bbe6:	2200      	movs	r2, #0
 801bbe8:	655a      	str	r2, [r3, #84]	@ 0x54
    resp->payload.op.counters.funcs.encode = NULL;
 801bbea:	68bb      	ldr	r3, [r7, #8]
 801bbec:	2200      	movs	r2, #0
 801bbee:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  aiPbMgrSendResp(req, resp, state);
 801bbf0:	79fb      	ldrb	r3, [r7, #7]
 801bbf2:	461a      	mov	r2, r3
 801bbf4:	68b9      	ldr	r1, [r7, #8]
 801bbf6:	68f8      	ldr	r0, [r7, #12]
 801bbf8:	f7ff fee6 	bl	801b9c8 <aiPbMgrSendResp>
  // aiPbMgrWaitAck();

  return true;
 801bbfc:	2301      	movs	r3, #1
}
 801bbfe:	4618      	mov	r0, r3
 801bc00:	3720      	adds	r7, #32
 801bc02:	46bd      	mov	sp, r7
 801bc04:	bd80      	pop	{r7, pc}
 801bc06:	bf00      	nop
 801bc08:	0801b785 	.word	0x0801b785

0801bc0c <aiPbCmdSync>:
#if defined(_IS_GHS_COMPILER) && _IS_GHS_COMPILER
#define _ARM_TOOLS_ID       EnumTools_AI_GHS
#endif

void aiPbCmdSync(const reqMsg *req, respMsg *resp, void *param)
{
 801bc0c:	b580      	push	{r7, lr}
 801bc0e:	b084      	sub	sp, #16
 801bc10:	af00      	add	r7, sp, #0
 801bc12:	60f8      	str	r0, [r7, #12]
 801bc14:	60b9      	str	r1, [r7, #8]
 801bc16:	607a      	str	r2, [r7, #4]
  resp->which_payload = respMsg_sync_tag;
 801bc18:	68bb      	ldr	r3, [r7, #8]
 801bc1a:	220a      	movs	r2, #10
 801bc1c:	80da      	strh	r2, [r3, #6]
  resp->payload.sync.version =
 801bc1e:	68bb      	ldr	r3, [r7, #8]
 801bc20:	f240 3201 	movw	r2, #769	@ 0x301
 801bc24:	609a      	str	r2, [r3, #8]
      EnumVersion_P_VERSION_MAJOR << 8 |
      EnumVersion_P_VERSION_MINOR;

  resp->payload.sync.capability = 0;
 801bc26:	68bb      	ldr	r3, [r7, #8]
 801bc28:	2200      	movs	r2, #0
 801bc2a:	60da      	str	r2, [r3, #12]
   *  b7..b0   8b : RT ID (EnumAiRuntime value)
   *  b15..b8  8b : API variant (EnumAiApiRuntime value)
   *  b23..b16 8b : TOOL-CHAIN ID (EnumTools value)
   */

  resp->payload.sync.rtid = ((uint32_t)param >> 16) & 0xFFFF;
 801bc2c:	687b      	ldr	r3, [r7, #4]
 801bc2e:	0c1a      	lsrs	r2, r3, #16
 801bc30:	68bb      	ldr	r3, [r7, #8]
 801bc32:	611a      	str	r2, [r3, #16]
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 801bc34:	68bb      	ldr	r3, [r7, #8]
 801bc36:	68da      	ldr	r2, [r3, #12]
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	b29b      	uxth	r3, r3
 801bc3c:	431a      	orrs	r2, r3
 801bc3e:	68bb      	ldr	r3, [r7, #8]
 801bc40:	60da      	str	r2, [r3, #12]

  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << EnumTools_AI_TOOLS_POS);
 801bc42:	68bb      	ldr	r3, [r7, #8]
 801bc44:	691b      	ldr	r3, [r3, #16]
 801bc46:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801bc4a:	68bb      	ldr	r3, [r7, #8]
 801bc4c:	611a      	str	r2, [r3, #16]

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 801bc4e:	2200      	movs	r2, #0
 801bc50:	68b9      	ldr	r1, [r7, #8]
 801bc52:	68f8      	ldr	r0, [r7, #12]
 801bc54:	f7ff feb8 	bl	801b9c8 <aiPbMgrSendResp>
}
 801bc58:	bf00      	nop
 801bc5a:	3710      	adds	r7, #16
 801bc5c:	46bd      	mov	sp, r7
 801bc5e:	bd80      	pop	{r7, pc}

0801bc60 <aiPlatformVersion>:
#include <aiTestUtility.h>
#include <ai_platform_interface.h>


void aiPlatformVersion(void)
{
 801bc60:	b580      	push	{r7, lr}
 801bc62:	b088      	sub	sp, #32
 801bc64:	af02      	add	r7, sp, #8
  stai_runtime_info netrt_info;
  stai_runtime_get_info(&netrt_info);
 801bc66:	463b      	mov	r3, r7
 801bc68:	4618      	mov	r0, r3
 801bc6a:	f006 ff2b 	bl	8022ac4 <stai_runtime_get_info>

  LC_PRINT("\r\n");
 801bc6e:	4814      	ldr	r0, [pc, #80]	@ (801bcc0 <aiPlatformVersion+0x60>)
 801bc70:	f000 fd52 	bl	801c718 <lc_print>
  LC_PRINT("ST.AI RT\r\n");
 801bc74:	4813      	ldr	r0, [pc, #76]	@ (801bcc4 <aiPlatformVersion+0x64>)
 801bc76:	f000 fd4f 	bl	801c718 <lc_print>
  LC_PRINT("--------------------------------------------------\r\n");
 801bc7a:	4813      	ldr	r0, [pc, #76]	@ (801bcc8 <aiPlatformVersion+0x68>)
 801bc7c:	f000 fd4c 	bl	801c718 <lc_print>
  LC_PRINT(" tools version   : v%d.%d.%d\r\n", (int)netrt_info.tools_version.major,
 801bc80:	7a3b      	ldrb	r3, [r7, #8]
 801bc82:	4619      	mov	r1, r3
 801bc84:	7a7b      	ldrb	r3, [r7, #9]
 801bc86:	461a      	mov	r2, r3
 801bc88:	7abb      	ldrb	r3, [r7, #10]
 801bc8a:	4810      	ldr	r0, [pc, #64]	@ (801bccc <aiPlatformVersion+0x6c>)
 801bc8c:	f000 fd44 	bl	801c718 <lc_print>
      (int)netrt_info.tools_version.minor,
      (int)netrt_info.tools_version.micro);
  LC_PRINT(" network rt lib  : v%d.%d.%d-%x\r\n", (int)netrt_info.runtime_version.major,
 801bc90:	793b      	ldrb	r3, [r7, #4]
 801bc92:	4619      	mov	r1, r3
 801bc94:	797b      	ldrb	r3, [r7, #5]
 801bc96:	461a      	mov	r2, r3
 801bc98:	79bb      	ldrb	r3, [r7, #6]
 801bc9a:	4618      	mov	r0, r3
 801bc9c:	68fb      	ldr	r3, [r7, #12]
 801bc9e:	9300      	str	r3, [sp, #0]
 801bca0:	4603      	mov	r3, r0
 801bca2:	480b      	ldr	r0, [pc, #44]	@ (801bcd0 <aiPlatformVersion+0x70>)
 801bca4:	f000 fd38 	bl	801c718 <lc_print>
      (int)netrt_info.runtime_version.minor,
      (int)netrt_info.runtime_version.micro,
      (int)netrt_info.runtime_build);
  LC_PRINT("   compiled with : %s\r\n", netrt_info.compiler_desc);
 801bca8:	697b      	ldr	r3, [r7, #20]
 801bcaa:	4619      	mov	r1, r3
 801bcac:	4809      	ldr	r0, [pc, #36]	@ (801bcd4 <aiPlatformVersion+0x74>)
 801bcae:	f000 fd33 	bl	801c718 <lc_print>
  LC_PRINT("\r\n");
 801bcb2:	4803      	ldr	r0, [pc, #12]	@ (801bcc0 <aiPlatformVersion+0x60>)
 801bcb4:	f000 fd30 	bl	801c718 <lc_print>
}
 801bcb8:	bf00      	nop
 801bcba:	3718      	adds	r7, #24
 801bcbc:	46bd      	mov	sp, r7
 801bcbe:	bd80      	pop	{r7, pc}
 801bcc0:	080377e8 	.word	0x080377e8
 801bcc4:	080377ec 	.word	0x080377ec
 801bcc8:	080377f8 	.word	0x080377f8
 801bccc:	08037830 	.word	0x08037830
 801bcd0:	08037850 	.word	0x08037850
 801bcd4:	08037874 	.word	0x08037874

0801bcd8 <aiLogErr>:

void aiLogErr(const ai_error err, const char *fct)
{
 801bcd8:	b580      	push	{r7, lr}
 801bcda:	b082      	sub	sp, #8
 801bcdc:	af00      	add	r7, sp, #0
 801bcde:	6078      	str	r0, [r7, #4]
 801bce0:	6039      	str	r1, [r7, #0]
  if (fct)
 801bce2:	683b      	ldr	r3, [r7, #0]
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	d009      	beq.n	801bcfc <aiLogErr+0x24>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 801bce8:	793b      	ldrb	r3, [r7, #4]
 801bcea:	461a      	mov	r2, r3
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801bcf2:	6839      	ldr	r1, [r7, #0]
 801bcf4:	4808      	ldr	r0, [pc, #32]	@ (801bd18 <aiLogErr+0x40>)
 801bcf6:	f000 fd0f 	bl	801c718 <lc_print>
        err.type, err.code);
  else
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 801bcfa:	e008      	b.n	801bd0e <aiLogErr+0x36>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 801bcfc:	793b      	ldrb	r3, [r7, #4]
 801bcfe:	4619      	mov	r1, r3
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801bd06:	461a      	mov	r2, r3
 801bd08:	4804      	ldr	r0, [pc, #16]	@ (801bd1c <aiLogErr+0x44>)
 801bd0a:	f000 fd05 	bl	801c718 <lc_print>
}
 801bd0e:	bf00      	nop
 801bd10:	3708      	adds	r7, #8
 801bd12:	46bd      	mov	sp, r7
 801bd14:	bd80      	pop	{r7, pc}
 801bd16:	bf00      	nop
 801bd18:	0803788c 	.word	0x0803788c
 801bd1c:	080378bc 	.word	0x080378bc

0801bd20 <aiPrintDataType>:


static inline void aiPrintDataType(const ai_buffer_format fmt)
{
 801bd20:	b580      	push	{r7, lr}
 801bd22:	b082      	sub	sp, #8
 801bd24:	af00      	add	r7, sp, #0
 801bd26:	6078      	str	r0, [r7, #4]
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 801bd2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801bd32:	d108      	bne.n	801bd46 <aiPrintDataType+0x26>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 801bd34:	687b      	ldr	r3, [r7, #4]
 801bd36:	11db      	asrs	r3, r3, #7
 801bd38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801bd3c:	4619      	mov	r1, r3
 801bd3e:	4813      	ldr	r0, [pc, #76]	@ (801bd8c <aiPrintDataType+0x6c>)
 801bd40:	f000 fcea 	bl	801c718 <lc_print>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
    } else { /* integer type */
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
            (int)AI_BUFFER_FMT_GET_BITS(fmt));
    }
}
 801bd44:	e01e      	b.n	801bd84 <aiPrintDataType+0x64>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 801bd4c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 801bd50:	d108      	bne.n	801bd64 <aiPrintDataType+0x44>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 801bd52:	687b      	ldr	r3, [r7, #4]
 801bd54:	11db      	asrs	r3, r3, #7
 801bd56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801bd5a:	4619      	mov	r1, r3
 801bd5c:	480c      	ldr	r0, [pc, #48]	@ (801bd90 <aiPrintDataType+0x70>)
 801bd5e:	f000 fcdb 	bl	801c718 <lc_print>
}
 801bd62:	e00f      	b.n	801bd84 <aiPrintDataType+0x64>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	d001      	beq.n	801bd72 <aiPrintDataType+0x52>
 801bd6e:	4909      	ldr	r1, [pc, #36]	@ (801bd94 <aiPrintDataType+0x74>)
 801bd70:	e000      	b.n	801bd74 <aiPrintDataType+0x54>
 801bd72:	4909      	ldr	r1, [pc, #36]	@ (801bd98 <aiPrintDataType+0x78>)
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	11db      	asrs	r3, r3, #7
 801bd78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801bd7c:	461a      	mov	r2, r3
 801bd7e:	4807      	ldr	r0, [pc, #28]	@ (801bd9c <aiPrintDataType+0x7c>)
 801bd80:	f000 fcca 	bl	801c718 <lc_print>
}
 801bd84:	bf00      	nop
 801bd86:	3708      	adds	r7, #8
 801bd88:	46bd      	mov	sp, r7
 801bd8a:	bd80      	pop	{r7, pc}
 801bd8c:	080378e4 	.word	0x080378e4
 801bd90:	080378ec 	.word	0x080378ec
 801bd94:	080378f4 	.word	0x080378f4
 801bd98:	080378f8 	.word	0x080378f8
 801bd9c:	080378fc 	.word	0x080378fc

0801bda0 <aiPrintBufferInfo>:


void aiPrintBufferInfo(const ai_buffer *buffer)
{
 801bda0:	b590      	push	{r4, r7, lr}
 801bda2:	b08b      	sub	sp, #44	@ 0x2c
 801bda4:	af02      	add	r7, sp, #8
 801bda6:	6078      	str	r0, [r7, #4]
  const ai_buffer_format fmt = buffer->format;
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	61bb      	str	r3, [r7, #24]

  /* shape + nb elem */
  LC_PRINT("(%d,%d,%d,",
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	699b      	ldr	r3, [r3, #24]
 801bdb2:	681b      	ldr	r3, [r3, #0]
 801bdb4:	4619      	mov	r1, r3
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	699b      	ldr	r3, [r3, #24]
 801bdba:	330c      	adds	r3, #12
 801bdbc:	681b      	ldr	r3, [r3, #0]
 801bdbe:	461a      	mov	r2, r3
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	699b      	ldr	r3, [r3, #24]
 801bdc4:	3308      	adds	r3, #8
 801bdc6:	681b      	ldr	r3, [r3, #0]
 801bdc8:	487c      	ldr	r0, [pc, #496]	@ (801bfbc <aiPrintBufferInfo+0x21c>)
 801bdca:	f000 fca5 	bl	801c718 <lc_print>
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH),
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_HEIGHT),
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_WIDTH));

  if (AI_BUFFER_SHAPE_SIZE(buffer) == 5)
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	2b00      	cmp	r3, #0
 801bdd2:	d014      	beq.n	801bdfe <aiPrintBufferInfo+0x5e>
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	695b      	ldr	r3, [r3, #20]
 801bdd8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801bddc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801bde0:	d10d      	bne.n	801bdfe <aiPrintBufferInfo+0x5e>
  {
    LC_PRINT("%d,%d)",
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	699b      	ldr	r3, [r3, #24]
 801bde6:	3310      	adds	r3, #16
 801bde8:	681b      	ldr	r3, [r3, #0]
 801bdea:	4619      	mov	r1, r3
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	699b      	ldr	r3, [r3, #24]
 801bdf0:	3304      	adds	r3, #4
 801bdf2:	681b      	ldr	r3, [r3, #0]
 801bdf4:	461a      	mov	r2, r3
 801bdf6:	4872      	ldr	r0, [pc, #456]	@ (801bfc0 <aiPrintBufferInfo+0x220>)
 801bdf8:	f000 fc8e 	bl	801c718 <lc_print>
 801bdfc:	e023      	b.n	801be46 <aiPrintBufferInfo+0xa6>
        (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_DEPTH),
        (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
  }
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	2b00      	cmp	r3, #0
 801be02:	d018      	beq.n	801be36 <aiPrintBufferInfo+0x96>
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	695b      	ldr	r3, [r3, #20]
 801be08:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801be0c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 801be10:	d111      	bne.n	801be36 <aiPrintBufferInfo+0x96>
  {
    LC_PRINT("%d,%d,%d)",
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	699b      	ldr	r3, [r3, #24]
 801be16:	3310      	adds	r3, #16
 801be18:	681b      	ldr	r3, [r3, #0]
 801be1a:	4619      	mov	r1, r3
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	699b      	ldr	r3, [r3, #24]
 801be20:	3314      	adds	r3, #20
 801be22:	681b      	ldr	r3, [r3, #0]
 801be24:	461a      	mov	r2, r3
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	699b      	ldr	r3, [r3, #24]
 801be2a:	3304      	adds	r3, #4
 801be2c:	681b      	ldr	r3, [r3, #0]
 801be2e:	4865      	ldr	r0, [pc, #404]	@ (801bfc4 <aiPrintBufferInfo+0x224>)
 801be30:	f000 fc72 	bl	801c718 <lc_print>
 801be34:	e007      	b.n	801be46 <aiPrintBufferInfo+0xa6>
        (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_DEPTH),
        (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_EXTENSION),
        (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
  } else
  {
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	699b      	ldr	r3, [r3, #24]
 801be3a:	3304      	adds	r3, #4
 801be3c:	681b      	ldr	r3, [r3, #0]
 801be3e:	4619      	mov	r1, r3
 801be40:	4861      	ldr	r0, [pc, #388]	@ (801bfc8 <aiPrintBufferInfo+0x228>)
 801be42:	f000 fc69 	bl	801c718 <lc_print>
  }

  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 801be46:	2101      	movs	r1, #1
 801be48:	6878      	ldr	r0, [r7, #4]
 801be4a:	f006 fe95 	bl	8022b78 <ai_buffer_get_size>
 801be4e:	4603      	mov	r3, r0
 801be50:	4619      	mov	r1, r3
 801be52:	485e      	ldr	r0, [pc, #376]	@ (801bfcc <aiPrintBufferInfo+0x22c>)
 801be54:	f000 fc60 	bl	801c718 <lc_print>

  /* type (+meta_data) */
  aiPrintDataType(fmt);
 801be58:	69b8      	ldr	r0, [r7, #24]
 801be5a:	f7ff ff61 	bl	801bd20 <aiPrintDataType>
  /* quantized info if available */
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 801be5e:	69bb      	ldr	r3, [r7, #24]
 801be60:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 801be64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801be68:	f040 81d8 	bne.w	801c21c <aiPrintBufferInfo+0x47c>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	689b      	ldr	r3, [r3, #8]
 801be70:	2b00      	cmp	r3, #0
 801be72:	f000 81ac 	beq.w	801c1ce <aiPrintBufferInfo+0x42e>
 801be76:	687b      	ldr	r3, [r7, #4]
 801be78:	689b      	ldr	r3, [r3, #8]
 801be7a:	681b      	ldr	r3, [r3, #0]
 801be7c:	f003 0301 	and.w	r3, r3, #1
 801be80:	2b00      	cmp	r3, #0
 801be82:	f000 81a4 	beq.w	801c1ce <aiPrintBufferInfo+0x42e>
 801be86:	687b      	ldr	r3, [r7, #4]
 801be88:	689b      	ldr	r3, [r3, #8]
 801be8a:	685b      	ldr	r3, [r3, #4]
 801be8c:	2b00      	cmp	r3, #0
 801be8e:	f000 819e 	beq.w	801c1ce <aiPrintBufferInfo+0x42e>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	689b      	ldr	r3, [r3, #8]
 801be96:	2b00      	cmp	r3, #0
 801be98:	d01d      	beq.n	801bed6 <aiPrintBufferInfo+0x136>
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	689b      	ldr	r3, [r3, #8]
 801be9e:	681b      	ldr	r3, [r3, #0]
 801bea0:	f003 0301 	and.w	r3, r3, #1
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	d016      	beq.n	801bed6 <aiPrintBufferInfo+0x136>
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	689b      	ldr	r3, [r3, #8]
 801beac:	685b      	ldr	r3, [r3, #4]
 801beae:	2b00      	cmp	r3, #0
 801beb0:	d011      	beq.n	801bed6 <aiPrintBufferInfo+0x136>
 801beb2:	687b      	ldr	r3, [r7, #4]
 801beb4:	689b      	ldr	r3, [r3, #8]
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	d00a      	beq.n	801bed0 <aiPrintBufferInfo+0x130>
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	689b      	ldr	r3, [r3, #8]
 801bebe:	681b      	ldr	r3, [r3, #0]
 801bec0:	f003 0301 	and.w	r3, r3, #1
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	d003      	beq.n	801bed0 <aiPrintBufferInfo+0x130>
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	689b      	ldr	r3, [r3, #8]
 801becc:	685b      	ldr	r3, [r3, #4]
 801bece:	e000      	b.n	801bed2 <aiPrintBufferInfo+0x132>
 801bed0:	2300      	movs	r3, #0
 801bed2:	885b      	ldrh	r3, [r3, #2]
 801bed4:	e000      	b.n	801bed8 <aiPrintBufferInfo+0x138>
 801bed6:	2300      	movs	r3, #0
 801bed8:	82fb      	strh	r3, [r7, #22]
      const int max_ = s_> 4?4:s_;
 801beda:	8afb      	ldrh	r3, [r7, #22]
 801bedc:	2b04      	cmp	r3, #4
 801bede:	bf28      	it	cs
 801bee0:	2304      	movcs	r3, #4
 801bee2:	b29b      	uxth	r3, r3
 801bee4:	613b      	str	r3, [r7, #16]
      LC_PRINT(" %d:", s_);
 801bee6:	8afb      	ldrh	r3, [r7, #22]
 801bee8:	4619      	mov	r1, r3
 801beea:	4839      	ldr	r0, [pc, #228]	@ (801bfd0 <aiPrintBufferInfo+0x230>)
 801beec:	f000 fc14 	bl	801c718 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 801bef0:	2300      	movs	r3, #0
 801bef2:	61fb      	str	r3, [r7, #28]
 801bef4:	e15b      	b.n	801c1ae <aiPrintBufferInfo+0x40e>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	689b      	ldr	r3, [r3, #8]
 801befa:	2b00      	cmp	r3, #0
 801befc:	d06a      	beq.n	801bfd4 <aiPrintBufferInfo+0x234>
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	689b      	ldr	r3, [r3, #8]
 801bf02:	681b      	ldr	r3, [r3, #0]
 801bf04:	f003 0301 	and.w	r3, r3, #1
 801bf08:	2b00      	cmp	r3, #0
 801bf0a:	d063      	beq.n	801bfd4 <aiPrintBufferInfo+0x234>
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	689b      	ldr	r3, [r3, #8]
 801bf10:	685b      	ldr	r3, [r3, #4]
 801bf12:	2b00      	cmp	r3, #0
 801bf14:	d05e      	beq.n	801bfd4 <aiPrintBufferInfo+0x234>
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	689b      	ldr	r3, [r3, #8]
 801bf1a:	2b00      	cmp	r3, #0
 801bf1c:	d04a      	beq.n	801bfb4 <aiPrintBufferInfo+0x214>
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	689b      	ldr	r3, [r3, #8]
 801bf22:	681b      	ldr	r3, [r3, #0]
 801bf24:	f003 0301 	and.w	r3, r3, #1
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	d043      	beq.n	801bfb4 <aiPrintBufferInfo+0x214>
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	689b      	ldr	r3, [r3, #8]
 801bf30:	685b      	ldr	r3, [r3, #4]
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d03e      	beq.n	801bfb4 <aiPrintBufferInfo+0x214>
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	689b      	ldr	r3, [r3, #8]
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	d00a      	beq.n	801bf54 <aiPrintBufferInfo+0x1b4>
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	689b      	ldr	r3, [r3, #8]
 801bf42:	681b      	ldr	r3, [r3, #0]
 801bf44:	f003 0301 	and.w	r3, r3, #1
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	d003      	beq.n	801bf54 <aiPrintBufferInfo+0x1b4>
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	689b      	ldr	r3, [r3, #8]
 801bf50:	685b      	ldr	r3, [r3, #4]
 801bf52:	e000      	b.n	801bf56 <aiPrintBufferInfo+0x1b6>
 801bf54:	2300      	movs	r3, #0
 801bf56:	685b      	ldr	r3, [r3, #4]
 801bf58:	2b00      	cmp	r3, #0
 801bf5a:	d02b      	beq.n	801bfb4 <aiPrintBufferInfo+0x214>
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	689b      	ldr	r3, [r3, #8]
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d00a      	beq.n	801bf7a <aiPrintBufferInfo+0x1da>
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	689b      	ldr	r3, [r3, #8]
 801bf68:	681b      	ldr	r3, [r3, #0]
 801bf6a:	f003 0301 	and.w	r3, r3, #1
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	d003      	beq.n	801bf7a <aiPrintBufferInfo+0x1da>
 801bf72:	687b      	ldr	r3, [r7, #4]
 801bf74:	689b      	ldr	r3, [r3, #8]
 801bf76:	685b      	ldr	r3, [r3, #4]
 801bf78:	e000      	b.n	801bf7c <aiPrintBufferInfo+0x1dc>
 801bf7a:	2300      	movs	r3, #0
 801bf7c:	885b      	ldrh	r3, [r3, #2]
 801bf7e:	461a      	mov	r2, r3
 801bf80:	69fb      	ldr	r3, [r7, #28]
 801bf82:	4293      	cmp	r3, r2
 801bf84:	da16      	bge.n	801bfb4 <aiPrintBufferInfo+0x214>
 801bf86:	687b      	ldr	r3, [r7, #4]
 801bf88:	689b      	ldr	r3, [r3, #8]
 801bf8a:	2b00      	cmp	r3, #0
 801bf8c:	d00a      	beq.n	801bfa4 <aiPrintBufferInfo+0x204>
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	689b      	ldr	r3, [r3, #8]
 801bf92:	681b      	ldr	r3, [r3, #0]
 801bf94:	f003 0301 	and.w	r3, r3, #1
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	d003      	beq.n	801bfa4 <aiPrintBufferInfo+0x204>
 801bf9c:	687b      	ldr	r3, [r7, #4]
 801bf9e:	689b      	ldr	r3, [r3, #8]
 801bfa0:	685b      	ldr	r3, [r3, #4]
 801bfa2:	e000      	b.n	801bfa6 <aiPrintBufferInfo+0x206>
 801bfa4:	2300      	movs	r3, #0
 801bfa6:	685b      	ldr	r3, [r3, #4]
 801bfa8:	681a      	ldr	r2, [r3, #0]
 801bfaa:	69fb      	ldr	r3, [r7, #28]
 801bfac:	009b      	lsls	r3, r3, #2
 801bfae:	4413      	add	r3, r2
 801bfb0:	681b      	ldr	r3, [r3, #0]
 801bfb2:	e011      	b.n	801bfd8 <aiPrintBufferInfo+0x238>
 801bfb4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801bfb8:	e00e      	b.n	801bfd8 <aiPrintBufferInfo+0x238>
 801bfba:	bf00      	nop
 801bfbc:	08037904 	.word	0x08037904
 801bfc0:	08037910 	.word	0x08037910
 801bfc4:	08037918 	.word	0x08037918
 801bfc8:	08037924 	.word	0x08037924
 801bfcc:	08037928 	.word	0x08037928
 801bfd0:	0803792c 	.word	0x0803792c
 801bfd4:	f04f 0300 	mov.w	r3, #0
 801bfd8:	60fb      	str	r3, [r7, #12]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	689b      	ldr	r3, [r3, #8]
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	f000 80d5 	beq.w	801c18e <aiPrintBufferInfo+0x3ee>
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	689b      	ldr	r3, [r3, #8]
 801bfe8:	681b      	ldr	r3, [r3, #0]
 801bfea:	f003 0301 	and.w	r3, r3, #1
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	f000 80cd 	beq.w	801c18e <aiPrintBufferInfo+0x3ee>
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	689b      	ldr	r3, [r3, #8]
 801bff8:	685b      	ldr	r3, [r3, #4]
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	f000 80c7 	beq.w	801c18e <aiPrintBufferInfo+0x3ee>
 801c000:	687b      	ldr	r3, [r7, #4]
 801c002:	689b      	ldr	r3, [r3, #8]
 801c004:	2b00      	cmp	r3, #0
 801c006:	d070      	beq.n	801c0ea <aiPrintBufferInfo+0x34a>
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	689b      	ldr	r3, [r3, #8]
 801c00c:	681b      	ldr	r3, [r3, #0]
 801c00e:	f003 0301 	and.w	r3, r3, #1
 801c012:	2b00      	cmp	r3, #0
 801c014:	d069      	beq.n	801c0ea <aiPrintBufferInfo+0x34a>
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	689b      	ldr	r3, [r3, #8]
 801c01a:	685b      	ldr	r3, [r3, #4]
 801c01c:	2b00      	cmp	r3, #0
 801c01e:	d064      	beq.n	801c0ea <aiPrintBufferInfo+0x34a>
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	689b      	ldr	r3, [r3, #8]
 801c024:	2b00      	cmp	r3, #0
 801c026:	d00a      	beq.n	801c03e <aiPrintBufferInfo+0x29e>
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	689b      	ldr	r3, [r3, #8]
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	f003 0301 	and.w	r3, r3, #1
 801c032:	2b00      	cmp	r3, #0
 801c034:	d003      	beq.n	801c03e <aiPrintBufferInfo+0x29e>
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	689b      	ldr	r3, [r3, #8]
 801c03a:	685b      	ldr	r3, [r3, #4]
 801c03c:	e000      	b.n	801c040 <aiPrintBufferInfo+0x2a0>
 801c03e:	2300      	movs	r3, #0
 801c040:	881b      	ldrh	r3, [r3, #0]
 801c042:	f003 0302 	and.w	r3, r3, #2
 801c046:	2b00      	cmp	r3, #0
 801c048:	d04f      	beq.n	801c0ea <aiPrintBufferInfo+0x34a>
 801c04a:	687b      	ldr	r3, [r7, #4]
 801c04c:	689b      	ldr	r3, [r3, #8]
 801c04e:	2b00      	cmp	r3, #0
 801c050:	d049      	beq.n	801c0e6 <aiPrintBufferInfo+0x346>
 801c052:	687b      	ldr	r3, [r7, #4]
 801c054:	689b      	ldr	r3, [r3, #8]
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	f003 0301 	and.w	r3, r3, #1
 801c05c:	2b00      	cmp	r3, #0
 801c05e:	d042      	beq.n	801c0e6 <aiPrintBufferInfo+0x346>
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	689b      	ldr	r3, [r3, #8]
 801c064:	685b      	ldr	r3, [r3, #4]
 801c066:	2b00      	cmp	r3, #0
 801c068:	d03d      	beq.n	801c0e6 <aiPrintBufferInfo+0x346>
 801c06a:	687b      	ldr	r3, [r7, #4]
 801c06c:	689b      	ldr	r3, [r3, #8]
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d00a      	beq.n	801c088 <aiPrintBufferInfo+0x2e8>
 801c072:	687b      	ldr	r3, [r7, #4]
 801c074:	689b      	ldr	r3, [r3, #8]
 801c076:	681b      	ldr	r3, [r3, #0]
 801c078:	f003 0301 	and.w	r3, r3, #1
 801c07c:	2b00      	cmp	r3, #0
 801c07e:	d003      	beq.n	801c088 <aiPrintBufferInfo+0x2e8>
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	689b      	ldr	r3, [r3, #8]
 801c084:	685b      	ldr	r3, [r3, #4]
 801c086:	e000      	b.n	801c08a <aiPrintBufferInfo+0x2ea>
 801c088:	2300      	movs	r3, #0
 801c08a:	685b      	ldr	r3, [r3, #4]
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	d02a      	beq.n	801c0e6 <aiPrintBufferInfo+0x346>
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	689b      	ldr	r3, [r3, #8]
 801c094:	2b00      	cmp	r3, #0
 801c096:	d00a      	beq.n	801c0ae <aiPrintBufferInfo+0x30e>
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	689b      	ldr	r3, [r3, #8]
 801c09c:	681b      	ldr	r3, [r3, #0]
 801c09e:	f003 0301 	and.w	r3, r3, #1
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	d003      	beq.n	801c0ae <aiPrintBufferInfo+0x30e>
 801c0a6:	687b      	ldr	r3, [r7, #4]
 801c0a8:	689b      	ldr	r3, [r3, #8]
 801c0aa:	685b      	ldr	r3, [r3, #4]
 801c0ac:	e000      	b.n	801c0b0 <aiPrintBufferInfo+0x310>
 801c0ae:	2300      	movs	r3, #0
 801c0b0:	885b      	ldrh	r3, [r3, #2]
 801c0b2:	461a      	mov	r2, r3
 801c0b4:	69fb      	ldr	r3, [r7, #28]
 801c0b6:	4293      	cmp	r3, r2
 801c0b8:	da15      	bge.n	801c0e6 <aiPrintBufferInfo+0x346>
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	689b      	ldr	r3, [r3, #8]
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d00a      	beq.n	801c0d8 <aiPrintBufferInfo+0x338>
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	689b      	ldr	r3, [r3, #8]
 801c0c6:	681b      	ldr	r3, [r3, #0]
 801c0c8:	f003 0301 	and.w	r3, r3, #1
 801c0cc:	2b00      	cmp	r3, #0
 801c0ce:	d003      	beq.n	801c0d8 <aiPrintBufferInfo+0x338>
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	689b      	ldr	r3, [r3, #8]
 801c0d4:	685b      	ldr	r3, [r3, #4]
 801c0d6:	e000      	b.n	801c0da <aiPrintBufferInfo+0x33a>
 801c0d8:	2300      	movs	r3, #0
 801c0da:	685b      	ldr	r3, [r3, #4]
 801c0dc:	685a      	ldr	r2, [r3, #4]
 801c0de:	69fb      	ldr	r3, [r7, #28]
 801c0e0:	4413      	add	r3, r2
 801c0e2:	781b      	ldrb	r3, [r3, #0]
 801c0e4:	e052      	b.n	801c18c <aiPrintBufferInfo+0x3ec>
 801c0e6:	2300      	movs	r3, #0
 801c0e8:	e050      	b.n	801c18c <aiPrintBufferInfo+0x3ec>
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	689b      	ldr	r3, [r3, #8]
 801c0ee:	2b00      	cmp	r3, #0
 801c0f0:	d04a      	beq.n	801c188 <aiPrintBufferInfo+0x3e8>
 801c0f2:	687b      	ldr	r3, [r7, #4]
 801c0f4:	689b      	ldr	r3, [r3, #8]
 801c0f6:	681b      	ldr	r3, [r3, #0]
 801c0f8:	f003 0301 	and.w	r3, r3, #1
 801c0fc:	2b00      	cmp	r3, #0
 801c0fe:	d043      	beq.n	801c188 <aiPrintBufferInfo+0x3e8>
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	689b      	ldr	r3, [r3, #8]
 801c104:	685b      	ldr	r3, [r3, #4]
 801c106:	2b00      	cmp	r3, #0
 801c108:	d03e      	beq.n	801c188 <aiPrintBufferInfo+0x3e8>
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	689b      	ldr	r3, [r3, #8]
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d00a      	beq.n	801c128 <aiPrintBufferInfo+0x388>
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	689b      	ldr	r3, [r3, #8]
 801c116:	681b      	ldr	r3, [r3, #0]
 801c118:	f003 0301 	and.w	r3, r3, #1
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	d003      	beq.n	801c128 <aiPrintBufferInfo+0x388>
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	689b      	ldr	r3, [r3, #8]
 801c124:	685b      	ldr	r3, [r3, #4]
 801c126:	e000      	b.n	801c12a <aiPrintBufferInfo+0x38a>
 801c128:	2300      	movs	r3, #0
 801c12a:	685b      	ldr	r3, [r3, #4]
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d02b      	beq.n	801c188 <aiPrintBufferInfo+0x3e8>
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	689b      	ldr	r3, [r3, #8]
 801c134:	2b00      	cmp	r3, #0
 801c136:	d00a      	beq.n	801c14e <aiPrintBufferInfo+0x3ae>
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	689b      	ldr	r3, [r3, #8]
 801c13c:	681b      	ldr	r3, [r3, #0]
 801c13e:	f003 0301 	and.w	r3, r3, #1
 801c142:	2b00      	cmp	r3, #0
 801c144:	d003      	beq.n	801c14e <aiPrintBufferInfo+0x3ae>
 801c146:	687b      	ldr	r3, [r7, #4]
 801c148:	689b      	ldr	r3, [r3, #8]
 801c14a:	685b      	ldr	r3, [r3, #4]
 801c14c:	e000      	b.n	801c150 <aiPrintBufferInfo+0x3b0>
 801c14e:	2300      	movs	r3, #0
 801c150:	885b      	ldrh	r3, [r3, #2]
 801c152:	461a      	mov	r2, r3
 801c154:	69fb      	ldr	r3, [r7, #28]
 801c156:	4293      	cmp	r3, r2
 801c158:	da16      	bge.n	801c188 <aiPrintBufferInfo+0x3e8>
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	689b      	ldr	r3, [r3, #8]
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d00a      	beq.n	801c178 <aiPrintBufferInfo+0x3d8>
 801c162:	687b      	ldr	r3, [r7, #4]
 801c164:	689b      	ldr	r3, [r3, #8]
 801c166:	681b      	ldr	r3, [r3, #0]
 801c168:	f003 0301 	and.w	r3, r3, #1
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d003      	beq.n	801c178 <aiPrintBufferInfo+0x3d8>
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	689b      	ldr	r3, [r3, #8]
 801c174:	685b      	ldr	r3, [r3, #4]
 801c176:	e000      	b.n	801c17a <aiPrintBufferInfo+0x3da>
 801c178:	2300      	movs	r3, #0
 801c17a:	685b      	ldr	r3, [r3, #4]
 801c17c:	685a      	ldr	r2, [r3, #4]
 801c17e:	69fb      	ldr	r3, [r7, #28]
 801c180:	4413      	add	r3, r2
 801c182:	f993 3000 	ldrsb.w	r3, [r3]
 801c186:	e001      	b.n	801c18c <aiPrintBufferInfo+0x3ec>
 801c188:	2300      	movs	r3, #0
 801c18a:	e001      	b.n	801c190 <aiPrintBufferInfo+0x3f0>
 801c18c:	e000      	b.n	801c190 <aiPrintBufferInfo+0x3f0>
 801c18e:	2300      	movs	r3, #0
 801c190:	60bb      	str	r3, [r7, #8]
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 801c192:	edd7 7a03 	vldr	s15, [r7, #12]
 801c196:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801c19a:	68bb      	ldr	r3, [r7, #8]
 801c19c:	9300      	str	r3, [sp, #0]
 801c19e:	ec53 2b17 	vmov	r2, r3, d7
 801c1a2:	4833      	ldr	r0, [pc, #204]	@ (801c270 <aiPrintBufferInfo+0x4d0>)
 801c1a4:	f000 fab8 	bl	801c718 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 801c1a8:	69fb      	ldr	r3, [r7, #28]
 801c1aa:	3301      	adds	r3, #1
 801c1ac:	61fb      	str	r3, [r7, #28]
 801c1ae:	69fa      	ldr	r2, [r7, #28]
 801c1b0:	693b      	ldr	r3, [r7, #16]
 801c1b2:	429a      	cmp	r2, r3
 801c1b4:	f6ff ae9f 	blt.w	801bef6 <aiPrintBufferInfo+0x156>
      }
      LC_PRINT((s_ > max_)?"..":"");
 801c1b8:	8afb      	ldrh	r3, [r7, #22]
 801c1ba:	693a      	ldr	r2, [r7, #16]
 801c1bc:	429a      	cmp	r2, r3
 801c1be:	da01      	bge.n	801c1c4 <aiPrintBufferInfo+0x424>
 801c1c0:	4b2c      	ldr	r3, [pc, #176]	@ (801c274 <aiPrintBufferInfo+0x4d4>)
 801c1c2:	e000      	b.n	801c1c6 <aiPrintBufferInfo+0x426>
 801c1c4:	4b2c      	ldr	r3, [pc, #176]	@ (801c278 <aiPrintBufferInfo+0x4d8>)
 801c1c6:	4618      	mov	r0, r3
 801c1c8:	f000 faa6 	bl	801c718 <lc_print>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 801c1cc:	e026      	b.n	801c21c <aiPrintBufferInfo+0x47c>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 801c1ce:	69bb      	ldr	r3, [r7, #24]
 801c1d0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 801c1d4:	2b00      	cmp	r3, #0
 801c1d6:	d108      	bne.n	801c1ea <aiPrintBufferInfo+0x44a>
      /* lower of 8b format */
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 801c1d8:	69bb      	ldr	r3, [r7, #24]
 801c1da:	11db      	asrs	r3, r3, #7
 801c1dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c1e0:	4619      	mov	r1, r3
 801c1e2:	4826      	ldr	r0, [pc, #152]	@ (801c27c <aiPrintBufferInfo+0x4dc>)
 801c1e4:	f000 fa98 	bl	801c718 <lc_print>
 801c1e8:	e018      	b.n	801c21c <aiPrintBufferInfo+0x47c>
    } else {
      LC_PRINT(" Q%d.%d",
 801c1ea:	69bb      	ldr	r3, [r7, #24]
 801c1ec:	11db      	asrs	r3, r3, #7
 801c1ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801c1f2:	69bb      	ldr	r3, [r7, #24]
 801c1f4:	b2db      	uxtb	r3, r3
 801c1f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c1fa:	f1a3 0140 	sub.w	r1, r3, #64	@ 0x40
 801c1fe:	69bb      	ldr	r3, [r7, #24]
 801c200:	15db      	asrs	r3, r3, #23
 801c202:	f003 0301 	and.w	r3, r3, #1
 801c206:	440b      	add	r3, r1
 801c208:	1ad1      	subs	r1, r2, r3
 801c20a:	69bb      	ldr	r3, [r7, #24]
 801c20c:	b2db      	uxtb	r3, r3
 801c20e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c212:	3b40      	subs	r3, #64	@ 0x40
 801c214:	461a      	mov	r2, r3
 801c216:	481a      	ldr	r0, [pc, #104]	@ (801c280 <aiPrintBufferInfo+0x4e0>)
 801c218:	f000 fa7e 	bl	801c718 <lc_print>
          AI_BUFFER_FMT_GET_FBITS(fmt)
      );
    }
  }
  /* @ + size in bytes */
  if (buffer->data)
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	685b      	ldr	r3, [r3, #4]
 801c220:	2b00      	cmp	r3, #0
 801c222:	d012      	beq.n	801c24a <aiPrintBufferInfo+0x4aa>
    LC_PRINT(" @0x%X/%d",
 801c224:	687b      	ldr	r3, [r7, #4]
 801c226:	685b      	ldr	r3, [r3, #4]
 801c228:	461c      	mov	r4, r3
 801c22a:	2101      	movs	r1, #1
 801c22c:	6878      	ldr	r0, [r7, #4]
 801c22e:	f006 fca3 	bl	8022b78 <ai_buffer_get_size>
 801c232:	4603      	mov	r3, r0
 801c234:	69b9      	ldr	r1, [r7, #24]
 801c236:	4618      	mov	r0, r3
 801c238:	f006 fcd2 	bl	8022be0 <ai_buffer_get_byte_size>
 801c23c:	4603      	mov	r3, r0
 801c23e:	461a      	mov	r2, r3
 801c240:	4621      	mov	r1, r4
 801c242:	4810      	ldr	r0, [pc, #64]	@ (801c284 <aiPrintBufferInfo+0x4e4>)
 801c244:	f000 fa68 	bl	801c718 <lc_print>
    );
  else
    LC_PRINT(" (User Domain)/%d",
        (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
    );
}
 801c248:	e00d      	b.n	801c266 <aiPrintBufferInfo+0x4c6>
    LC_PRINT(" (User Domain)/%d",
 801c24a:	2101      	movs	r1, #1
 801c24c:	6878      	ldr	r0, [r7, #4]
 801c24e:	f006 fc93 	bl	8022b78 <ai_buffer_get_size>
 801c252:	4603      	mov	r3, r0
 801c254:	69b9      	ldr	r1, [r7, #24]
 801c256:	4618      	mov	r0, r3
 801c258:	f006 fcc2 	bl	8022be0 <ai_buffer_get_byte_size>
 801c25c:	4603      	mov	r3, r0
 801c25e:	4619      	mov	r1, r3
 801c260:	4809      	ldr	r0, [pc, #36]	@ (801c288 <aiPrintBufferInfo+0x4e8>)
 801c262:	f000 fa59 	bl	801c718 <lc_print>
}
 801c266:	bf00      	nop
 801c268:	3724      	adds	r7, #36	@ 0x24
 801c26a:	46bd      	mov	sp, r7
 801c26c:	bd90      	pop	{r4, r7, pc}
 801c26e:	bf00      	nop
 801c270:	08037934 	.word	0x08037934
 801c274:	08037940 	.word	0x08037940
 801c278:	08037944 	.word	0x08037944
 801c27c:	08037948 	.word	0x08037948
 801c280:	08037954 	.word	0x08037954
 801c284:	0803795c 	.word	0x0803795c
 801c288:	08037968 	.word	0x08037968

0801c28c <_aiPrintDataInfo>:


static void _aiPrintDataInfo(const int idx, const ai_buffer *buffer)
{
 801c28c:	b590      	push	{r4, r7, lr}
 801c28e:	b085      	sub	sp, #20
 801c290:	af00      	add	r7, sp, #0
 801c292:	6078      	str	r0, [r7, #4]
 801c294:	6039      	str	r1, [r7, #0]
  const ai_buffer_format fmt = buffer->format;
 801c296:	683b      	ldr	r3, [r7, #0]
 801c298:	681b      	ldr	r3, [r3, #0]
 801c29a:	60fb      	str	r3, [r7, #12]
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 801c29c:	683b      	ldr	r3, [r7, #0]
 801c29e:	685b      	ldr	r3, [r3, #4]
 801c2a0:	461c      	mov	r4, r3
 801c2a2:	2101      	movs	r1, #1
 801c2a4:	6838      	ldr	r0, [r7, #0]
 801c2a6:	f006 fc67 	bl	8022b78 <ai_buffer_get_size>
 801c2aa:	4603      	mov	r3, r0
 801c2ac:	68f9      	ldr	r1, [r7, #12]
 801c2ae:	4618      	mov	r0, r3
 801c2b0:	f006 fc96 	bl	8022be0 <ai_buffer_get_byte_size>
 801c2b4:	4603      	mov	r3, r0
 801c2b6:	4622      	mov	r2, r4
 801c2b8:	6879      	ldr	r1, [r7, #4]
 801c2ba:	4803      	ldr	r0, [pc, #12]	@ (801c2c8 <_aiPrintDataInfo+0x3c>)
 801c2bc:	f000 fa2c 	bl	801c718 <lc_print>
      idx,
      (int)buffer->data,
      (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
  );
}
 801c2c0:	bf00      	nop
 801c2c2:	3714      	adds	r7, #20
 801c2c4:	46bd      	mov	sp, r7
 801c2c6:	bd90      	pop	{r4, r7, pc}
 801c2c8:	0803797c 	.word	0x0803797c

0801c2cc <aiPrintNetworkInfo>:


void aiPrintNetworkInfo(const ai_network_report* report)
{
 801c2cc:	b580      	push	{r7, lr}
 801c2ce:	b088      	sub	sp, #32
 801c2d0:	af00      	add	r7, sp, #0
 801c2d2:	6078      	str	r0, [r7, #4]
  LC_PRINT("Network informations...\r\n");
 801c2d4:	486a      	ldr	r0, [pc, #424]	@ (801c480 <aiPrintNetworkInfo+0x1b4>)
 801c2d6:	f000 fa1f 	bl	801c718 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	681b      	ldr	r3, [r3, #0]
 801c2de:	4619      	mov	r1, r3
 801c2e0:	4868      	ldr	r0, [pc, #416]	@ (801c484 <aiPrintNetworkInfo+0x1b8>)
 801c2e2:	f000 fa19 	bl	801c718 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	685b      	ldr	r3, [r3, #4]
 801c2ea:	4619      	mov	r1, r3
 801c2ec:	4866      	ldr	r0, [pc, #408]	@ (801c488 <aiPrintNetworkInfo+0x1bc>)
 801c2ee:	f000 fa13 	bl	801c718 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	689b      	ldr	r3, [r3, #8]
 801c2f6:	4619      	mov	r1, r3
 801c2f8:	4864      	ldr	r0, [pc, #400]	@ (801c48c <aiPrintNetworkInfo+0x1c0>)
 801c2fa:	f000 fa0d 	bl	801c718 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	68db      	ldr	r3, [r3, #12]
 801c302:	4619      	mov	r1, r3
 801c304:	4862      	ldr	r0, [pc, #392]	@ (801c490 <aiPrintNetworkInfo+0x1c4>)
 801c306:	f000 fa07 	bl	801c718 <lc_print>

  if (report->tool_revision[0])
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	699b      	ldr	r3, [r3, #24]
 801c30e:	781b      	ldrb	r3, [r3, #0]
 801c310:	2b00      	cmp	r3, #0
 801c312:	d00c      	beq.n	801c32e <aiPrintNetworkInfo+0x62>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	699b      	ldr	r3, [r3, #24]
 801c318:	781b      	ldrb	r3, [r3, #0]
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	d002      	beq.n	801c324 <aiPrintNetworkInfo+0x58>
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	699b      	ldr	r3, [r3, #24]
 801c322:	e000      	b.n	801c326 <aiPrintNetworkInfo+0x5a>
 801c324:	4b5b      	ldr	r3, [pc, #364]	@ (801c494 <aiPrintNetworkInfo+0x1c8>)
 801c326:	4619      	mov	r1, r3
 801c328:	485b      	ldr	r0, [pc, #364]	@ (801c498 <aiPrintNetworkInfo+0x1cc>)
 801c32a:	f000 f9f5 	bl	801c718 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	7f1b      	ldrb	r3, [r3, #28]
 801c332:	4619      	mov	r1, r3
 801c334:	687b      	ldr	r3, [r7, #4]
 801c336:	7f5b      	ldrb	r3, [r3, #29]
 801c338:	461a      	mov	r2, r3
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	7f9b      	ldrb	r3, [r3, #30]
 801c33e:	4857      	ldr	r0, [pc, #348]	@ (801c49c <aiPrintNetworkInfo+0x1d0>)
 801c340:	f000 f9ea 	bl	801c718 <lc_print>
      report->tool_version.major,
      report->tool_version.minor,
      report->tool_version.micro);
  LC_PRINT(" complexity         : %s MACC\r\n", uint64ToDecimal(report->n_macc));
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 801c34a:	4610      	mov	r0, r2
 801c34c:	4619      	mov	r1, r3
 801c34e:	f000 f947 	bl	801c5e0 <uint64ToDecimal>
 801c352:	4603      	mov	r3, r0
 801c354:	4619      	mov	r1, r3
 801c356:	4852      	ldr	r0, [pc, #328]	@ (801c4a0 <aiPrintNetworkInfo+0x1d4>)
 801c358:	f000 f9de 	bl	801c718 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c360:	4619      	mov	r1, r3
 801c362:	4850      	ldr	r0, [pc, #320]	@ (801c4a4 <aiPrintNetworkInfo+0x1d8>)
 801c364:	f000 f9d8 	bl	801c718 <lc_print>

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801c36e:	4619      	mov	r1, r3
 801c370:	484d      	ldr	r0, [pc, #308]	@ (801c4a8 <aiPrintNetworkInfo+0x1dc>)
 801c372:	f000 f9d1 	bl	801c718 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 801c376:	2300      	movs	r3, #0
 801c378:	61fb      	str	r3, [r7, #28]
 801c37a:	e00f      	b.n	801c39c <aiPrintNetworkInfo+0xd0>
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801c380:	69fa      	ldr	r2, [r7, #28]
 801c382:	4613      	mov	r3, r2
 801c384:	00db      	lsls	r3, r3, #3
 801c386:	1a9b      	subs	r3, r3, r2
 801c388:	009b      	lsls	r3, r3, #2
 801c38a:	440b      	add	r3, r1
 801c38c:	60bb      	str	r3, [r7, #8]
      _aiPrintDataInfo(idx, buffer);
 801c38e:	68b9      	ldr	r1, [r7, #8]
 801c390:	69f8      	ldr	r0, [r7, #28]
 801c392:	f7ff ff7b 	bl	801c28c <_aiPrintDataInfo>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 801c396:	69fb      	ldr	r3, [r7, #28]
 801c398:	3301      	adds	r3, #1
 801c39a:	61fb      	str	r3, [r7, #28]
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801c3a2:	461a      	mov	r2, r3
 801c3a4:	69fb      	ldr	r3, [r7, #28]
 801c3a6:	4293      	cmp	r3, r2
 801c3a8:	dbe8      	blt.n	801c37c <aiPrintNetworkInfo+0xb0>
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801c3b0:	4619      	mov	r1, r3
 801c3b2:	483e      	ldr	r0, [pc, #248]	@ (801c4ac <aiPrintNetworkInfo+0x1e0>)
 801c3b4:	f000 f9b0 	bl	801c718 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 801c3b8:	2300      	movs	r3, #0
 801c3ba:	61bb      	str	r3, [r7, #24]
 801c3bc:	e00f      	b.n	801c3de <aiPrintNetworkInfo+0x112>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801c3c2:	69ba      	ldr	r2, [r7, #24]
 801c3c4:	4613      	mov	r3, r2
 801c3c6:	00db      	lsls	r3, r3, #3
 801c3c8:	1a9b      	subs	r3, r3, r2
 801c3ca:	009b      	lsls	r3, r3, #2
 801c3cc:	440b      	add	r3, r1
 801c3ce:	60fb      	str	r3, [r7, #12]
      _aiPrintDataInfo(idx, buffer);
 801c3d0:	68f9      	ldr	r1, [r7, #12]
 801c3d2:	69b8      	ldr	r0, [r7, #24]
 801c3d4:	f7ff ff5a 	bl	801c28c <_aiPrintDataInfo>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 801c3d8:	69bb      	ldr	r3, [r7, #24]
 801c3da:	3301      	adds	r3, #1
 801c3dc:	61bb      	str	r3, [r7, #24]
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801c3e4:	461a      	mov	r2, r3
 801c3e6:	69bb      	ldr	r3, [r7, #24]
 801c3e8:	4293      	cmp	r3, r2
 801c3ea:	dbe8      	blt.n	801c3be <aiPrintNetworkInfo+0xf2>
  }

  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 801c3ec:	687b      	ldr	r3, [r7, #4]
 801c3ee:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801c3f0:	4619      	mov	r1, r3
 801c3f2:	687b      	ldr	r3, [r7, #4]
 801c3f4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 801c3f6:	461a      	mov	r2, r3
 801c3f8:	482d      	ldr	r0, [pc, #180]	@ (801c4b0 <aiPrintNetworkInfo+0x1e4>)
 801c3fa:	f000 f98d 	bl	801c718 <lc_print>
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
 801c3fe:	2300      	movs	r3, #0
 801c400:	617b      	str	r3, [r7, #20]
 801c402:	e014      	b.n	801c42e <aiPrintNetworkInfo+0x162>
    LC_PRINT("  I[%d] ", i);
 801c404:	6979      	ldr	r1, [r7, #20]
 801c406:	482b      	ldr	r0, [pc, #172]	@ (801c4b4 <aiPrintNetworkInfo+0x1e8>)
 801c408:	f000 f986 	bl	801c718 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 801c410:	697a      	ldr	r2, [r7, #20]
 801c412:	4613      	mov	r3, r2
 801c414:	00db      	lsls	r3, r3, #3
 801c416:	1a9b      	subs	r3, r3, r2
 801c418:	009b      	lsls	r3, r3, #2
 801c41a:	440b      	add	r3, r1
 801c41c:	4618      	mov	r0, r3
 801c41e:	f7ff fcbf 	bl	801bda0 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 801c422:	4825      	ldr	r0, [pc, #148]	@ (801c4b8 <aiPrintNetworkInfo+0x1ec>)
 801c424:	f000 f978 	bl	801c718 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 801c428:	697b      	ldr	r3, [r7, #20]
 801c42a:	3301      	adds	r3, #1
 801c42c:	617b      	str	r3, [r7, #20]
 801c42e:	687b      	ldr	r3, [r7, #4]
 801c430:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801c432:	461a      	mov	r2, r3
 801c434:	697b      	ldr	r3, [r7, #20]
 801c436:	4293      	cmp	r3, r2
 801c438:	dbe4      	blt.n	801c404 <aiPrintNetworkInfo+0x138>
  }

  for (int i=0; i<report->n_outputs; i++) {
 801c43a:	2300      	movs	r3, #0
 801c43c:	613b      	str	r3, [r7, #16]
 801c43e:	e014      	b.n	801c46a <aiPrintNetworkInfo+0x19e>
    LC_PRINT("  O[%d] ", i);
 801c440:	6939      	ldr	r1, [r7, #16]
 801c442:	481e      	ldr	r0, [pc, #120]	@ (801c4bc <aiPrintNetworkInfo+0x1f0>)
 801c444:	f000 f968 	bl	801c718 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 801c44c:	693a      	ldr	r2, [r7, #16]
 801c44e:	4613      	mov	r3, r2
 801c450:	00db      	lsls	r3, r3, #3
 801c452:	1a9b      	subs	r3, r3, r2
 801c454:	009b      	lsls	r3, r3, #2
 801c456:	440b      	add	r3, r1
 801c458:	4618      	mov	r0, r3
 801c45a:	f7ff fca1 	bl	801bda0 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 801c45e:	4816      	ldr	r0, [pc, #88]	@ (801c4b8 <aiPrintNetworkInfo+0x1ec>)
 801c460:	f000 f95a 	bl	801c718 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 801c464:	693b      	ldr	r3, [r7, #16]
 801c466:	3301      	adds	r3, #1
 801c468:	613b      	str	r3, [r7, #16]
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 801c46e:	461a      	mov	r2, r3
 801c470:	693b      	ldr	r3, [r7, #16]
 801c472:	4293      	cmp	r3, r2
 801c474:	dbe4      	blt.n	801c440 <aiPrintNetworkInfo+0x174>
  }
}
 801c476:	bf00      	nop
 801c478:	bf00      	nop
 801c47a:	3720      	adds	r7, #32
 801c47c:	46bd      	mov	sp, r7
 801c47e:	bd80      	pop	{r7, pc}
 801c480:	08037990 	.word	0x08037990
 801c484:	080379ac 	.word	0x080379ac
 801c488:	080379c8 	.word	0x080379c8
 801c48c:	080379e4 	.word	0x080379e4
 801c490:	08037a00 	.word	0x08037a00
 801c494:	08037944 	.word	0x08037944
 801c498:	08037a1c 	.word	0x08037a1c
 801c49c:	08037a38 	.word	0x08037a38
 801c4a0:	08037a5c 	.word	0x08037a5c
 801c4a4:	08037a7c 	.word	0x08037a7c
 801c4a8:	08037a98 	.word	0x08037a98
 801c4ac:	08037ab4 	.word	0x08037ab4
 801c4b0:	08037ad0 	.word	0x08037ad0
 801c4b4:	08037af0 	.word	0x08037af0
 801c4b8:	080377e8 	.word	0x080377e8
 801c4bc:	08037afc 	.word	0x08037afc

0801c4c0 <port_io_write>:

  return (status == HAL_OK);
}

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
 801c4c0:	b580      	push	{r7, lr}
 801c4c2:	b084      	sub	sp, #16
 801c4c4:	af00      	add	r7, sp, #0
 801c4c6:	6078      	str	r0, [r7, #4]
 801c4c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 801c4ca:	683b      	ldr	r3, [r7, #0]
 801c4cc:	b29a      	uxth	r2, r3
 801c4ce:	f04f 33ff 	mov.w	r3, #4294967295
 801c4d2:	6879      	ldr	r1, [r7, #4]
 801c4d4:	4807      	ldr	r0, [pc, #28]	@ (801c4f4 <port_io_write+0x34>)
 801c4d6:	f7fd f827 	bl	8019528 <HAL_UART_Transmit>
 801c4da:	4603      	mov	r3, r0
 801c4dc:	73fb      	strb	r3, [r7, #15]

  return (status == HAL_OK);
 801c4de:	7bfb      	ldrb	r3, [r7, #15]
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	bf0c      	ite	eq
 801c4e4:	2301      	moveq	r3, #1
 801c4e6:	2300      	movne	r3, #0
 801c4e8:	b2db      	uxtb	r3, r3
}
 801c4ea:	4618      	mov	r0, r3
 801c4ec:	3710      	adds	r7, #16
 801c4ee:	46bd      	mov	sp, r7
 801c4f0:	bd80      	pop	{r7, pc}
 801c4f2:	bf00      	nop
 801c4f4:	24031590 	.word	0x24031590

0801c4f8 <port_io_read>:

__STATIC_INLINE bool port_io_read(uint8_t *buff, int count)
{
 801c4f8:	b580      	push	{r7, lr}
 801c4fa:	b084      	sub	sp, #16
 801c4fc:	af00      	add	r7, sp, #0
 801c4fe:	6078      	str	r0, [r7, #4]
 801c500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;

  status = HAL_UART_Receive(&UartHandle, buff, count, HAL_MAX_DELAY);
 801c502:	683b      	ldr	r3, [r7, #0]
 801c504:	b29a      	uxth	r2, r3
 801c506:	f04f 33ff 	mov.w	r3, #4294967295
 801c50a:	6879      	ldr	r1, [r7, #4]
 801c50c:	4807      	ldr	r0, [pc, #28]	@ (801c52c <port_io_read+0x34>)
 801c50e:	f7fd f899 	bl	8019644 <HAL_UART_Receive>
 801c512:	4603      	mov	r3, r0
 801c514:	73fb      	strb	r3, [r7, #15]

  return (status == HAL_OK);
 801c516:	7bfb      	ldrb	r3, [r7, #15]
 801c518:	2b00      	cmp	r3, #0
 801c51a:	bf0c      	ite	eq
 801c51c:	2301      	moveq	r3, #1
 801c51e:	2300      	movne	r3, #0
 801c520:	b2db      	uxtb	r3, r3
}
 801c522:	4618      	mov	r0, r3
 801c524:	3710      	adds	r7, #16
 801c526:	46bd      	mov	sp, r7
 801c528:	bd80      	pop	{r7, pc}
 801c52a:	bf00      	nop
 801c52c:	24031590 	.word	0x24031590

0801c530 <ioRawWriteBuffer>:
}

#else /* defined(USE_USB_CDC_CLASS) */

bool ioRawWriteBuffer(uint8_t *buff, int count)
{
 801c530:	b580      	push	{r7, lr}
 801c532:	b082      	sub	sp, #8
 801c534:	af00      	add	r7, sp, #0
 801c536:	6078      	str	r0, [r7, #4]
 801c538:	6039      	str	r1, [r7, #0]
  return port_io_write(buff, count);
 801c53a:	6839      	ldr	r1, [r7, #0]
 801c53c:	6878      	ldr	r0, [r7, #4]
 801c53e:	f7ff ffbf 	bl	801c4c0 <port_io_write>
 801c542:	4603      	mov	r3, r0
}
 801c544:	4618      	mov	r0, r3
 801c546:	3708      	adds	r7, #8
 801c548:	46bd      	mov	sp, r7
 801c54a:	bd80      	pop	{r7, pc}

0801c54c <ioRawReadBuffer>:

bool ioRawReadBuffer(uint8_t *buff, int count)
{
 801c54c:	b580      	push	{r7, lr}
 801c54e:	b082      	sub	sp, #8
 801c550:	af00      	add	r7, sp, #0
 801c552:	6078      	str	r0, [r7, #4]
 801c554:	6039      	str	r1, [r7, #0]
  return port_io_read(buff, count);
 801c556:	6839      	ldr	r1, [r7, #0]
 801c558:	6878      	ldr	r0, [r7, #4]
 801c55a:	f7ff ffcd 	bl	801c4f8 <port_io_read>
 801c55e:	4603      	mov	r3, r0
}
 801c560:	4618      	mov	r0, r3
 801c562:	3708      	adds	r7, #8
 801c564:	46bd      	mov	sp, r7
 801c566:	bd80      	pop	{r7, pc}

0801c568 <ioRawDisableLLWrite>:

void ioRawDisableLLWrite(void)
{
 801c568:	b480      	push	{r7}
 801c56a:	af00      	add	r7, sp, #0
  _ioWriteAllowed = false;
 801c56c:	4b03      	ldr	r3, [pc, #12]	@ (801c57c <ioRawDisableLLWrite+0x14>)
 801c56e:	2200      	movs	r2, #0
 801c570:	701a      	strb	r2, [r3, #0]
}
 801c572:	bf00      	nop
 801c574:	46bd      	mov	sp, r7
 801c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c57a:	4770      	bx	lr
 801c57c:	2400000d 	.word	0x2400000d

0801c580 <_write>:
#if defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER

int _write(int fd, const void *buff, int count);

int _write(int fd, const void *buff, int count)
{
 801c580:	b580      	push	{r7, lr}
 801c582:	b086      	sub	sp, #24
 801c584:	af00      	add	r7, sp, #0
 801c586:	60f8      	str	r0, [r7, #12]
 801c588:	60b9      	str	r1, [r7, #8]
 801c58a:	607a      	str	r2, [r7, #4]
  bool status = true;
 801c58c:	2301      	movs	r3, #1
 801c58e:	75fb      	strb	r3, [r7, #23]

  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	2b00      	cmp	r3, #0
 801c594:	da0d      	bge.n	801c5b2 <_write+0x32>
 801c596:	68fb      	ldr	r3, [r7, #12]
 801c598:	2b01      	cmp	r3, #1
 801c59a:	d00a      	beq.n	801c5b2 <_write+0x32>
 801c59c:	68fb      	ldr	r3, [r7, #12]
 801c59e:	2b02      	cmp	r3, #2
 801c5a0:	d007      	beq.n	801c5b2 <_write+0x32>
    errno = EBADF;
 801c5a2:	f017 fceb 	bl	8033f7c <__errno>
 801c5a6:	4603      	mov	r3, r0
 801c5a8:	2209      	movs	r2, #9
 801c5aa:	601a      	str	r2, [r3, #0]
    return -1;
 801c5ac:	f04f 33ff 	mov.w	r3, #4294967295
 801c5b0:	e00f      	b.n	801c5d2 <_write+0x52>
  }

#if defined(HAS_DEDICATED_PRINT_PORT) && HAS_DEDICATED_PRINT_PORT == 1
  status = port_io_dedicated_write((uint8_t *)buff, count);
#else /* HAS_DEDICATED_PRINT_PORT */
  if (_ioWriteAllowed)
 801c5b2:	4b0a      	ldr	r3, [pc, #40]	@ (801c5dc <_write+0x5c>)
 801c5b4:	781b      	ldrb	r3, [r3, #0]
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d005      	beq.n	801c5c6 <_write+0x46>
      }
    }
    status = count;
  }
#endif /* SWO_OUTPUT */
  status = port_io_write((uint8_t *)buff, count);
 801c5ba:	6879      	ldr	r1, [r7, #4]
 801c5bc:	68b8      	ldr	r0, [r7, #8]
 801c5be:	f7ff ff7f 	bl	801c4c0 <port_io_write>
 801c5c2:	4603      	mov	r3, r0
 801c5c4:	75fb      	strb	r3, [r7, #23]
#endif /* !HAS_DEDICATED_PRINT_PORT */

  return (status ? count : 0);
 801c5c6:	7dfb      	ldrb	r3, [r7, #23]
 801c5c8:	2b00      	cmp	r3, #0
 801c5ca:	d001      	beq.n	801c5d0 <_write+0x50>
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	e000      	b.n	801c5d2 <_write+0x52>
 801c5d0:	2300      	movs	r3, #0
}
 801c5d2:	4618      	mov	r0, r3
 801c5d4:	3718      	adds	r7, #24
 801c5d6:	46bd      	mov	sp, r7
 801c5d8:	bd80      	pop	{r7, pc}
 801c5da:	bf00      	nop
 801c5dc:	2400000d 	.word	0x2400000d

0801c5e0 <uint64ToDecimal>:
 */

static char bfr[20+1];

char* uint64ToDecimal(uint64_t v)
{ /* see https://www.eevblog.com/forum/microcontrollers/printf-uint64_t-with-arm-gcc/ */
 801c5e0:	b580      	push	{r7, lr}
 801c5e2:	b086      	sub	sp, #24
 801c5e4:	af00      	add	r7, sp, #0
 801c5e6:	e9c7 0100 	strd	r0, r1, [r7]
  char* p = bfr + sizeof(bfr);
 801c5ea:	4b1c      	ldr	r3, [pc, #112]	@ (801c65c <uint64ToDecimal+0x7c>)
 801c5ec:	617b      	str	r3, [r7, #20]
  *(--p) = '\0';
 801c5ee:	697b      	ldr	r3, [r7, #20]
 801c5f0:	3b01      	subs	r3, #1
 801c5f2:	617b      	str	r3, [r7, #20]
 801c5f4:	697b      	ldr	r3, [r7, #20]
 801c5f6:	2200      	movs	r2, #0
 801c5f8:	701a      	strb	r2, [r3, #0]
  for (bool first = true; v || first; first = false) {
 801c5fa:	2301      	movs	r3, #1
 801c5fc:	74fb      	strb	r3, [r7, #19]
 801c5fe:	e021      	b.n	801c644 <uint64ToDecimal+0x64>
    const uint32_t digit = v % 10;
 801c600:	e9d7 0100 	ldrd	r0, r1, [r7]
 801c604:	f04f 020a 	mov.w	r2, #10
 801c608:	f04f 0300 	mov.w	r3, #0
 801c60c:	f7f4 f83a 	bl	8010684 <__aeabi_uldivmod>
 801c610:	4613      	mov	r3, r2
 801c612:	60fb      	str	r3, [r7, #12]
    const char c = '0' + digit;
 801c614:	68fb      	ldr	r3, [r7, #12]
 801c616:	b2db      	uxtb	r3, r3
 801c618:	3330      	adds	r3, #48	@ 0x30
 801c61a:	72fb      	strb	r3, [r7, #11]
    *(--p) = c;
 801c61c:	697b      	ldr	r3, [r7, #20]
 801c61e:	3b01      	subs	r3, #1
 801c620:	617b      	str	r3, [r7, #20]
 801c622:	697b      	ldr	r3, [r7, #20]
 801c624:	7afa      	ldrb	r2, [r7, #11]
 801c626:	701a      	strb	r2, [r3, #0]
    v = v / 10;
 801c628:	e9d7 0100 	ldrd	r0, r1, [r7]
 801c62c:	f04f 020a 	mov.w	r2, #10
 801c630:	f04f 0300 	mov.w	r3, #0
 801c634:	f7f4 f826 	bl	8010684 <__aeabi_uldivmod>
 801c638:	4602      	mov	r2, r0
 801c63a:	460b      	mov	r3, r1
 801c63c:	e9c7 2300 	strd	r2, r3, [r7]
  for (bool first = true; v || first; first = false) {
 801c640:	2300      	movs	r3, #0
 801c642:	74fb      	strb	r3, [r7, #19]
 801c644:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c648:	4313      	orrs	r3, r2
 801c64a:	d1d9      	bne.n	801c600 <uint64ToDecimal+0x20>
 801c64c:	7cfb      	ldrb	r3, [r7, #19]
 801c64e:	2b00      	cmp	r3, #0
 801c650:	d1d6      	bne.n	801c600 <uint64ToDecimal+0x20>
  }
  return p;
 801c652:	697b      	ldr	r3, [r7, #20]
}
 801c654:	4618      	mov	r0, r3
 801c656:	3718      	adds	r7, #24
 801c658:	46bd      	mov	sp, r7
 801c65a:	bd80      	pop	{r7, pc}
 801c65c:	24031d1d 	.word	0x24031d1d

0801c660 <uint32_to_str>:

void uint32_to_str(uint32_t val, char* dest, int max)
{
 801c660:	b480      	push	{r7}
 801c662:	b087      	sub	sp, #28
 801c664:	af00      	add	r7, sp, #0
 801c666:	60f8      	str	r0, [r7, #12]
 801c668:	60b9      	str	r1, [r7, #8]
 801c66a:	607a      	str	r2, [r7, #4]
  int i;
  dest[0] = ' ';
 801c66c:	68bb      	ldr	r3, [r7, #8]
 801c66e:	2220      	movs	r2, #32
 801c670:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 8; i++)
 801c672:	2300      	movs	r3, #0
 801c674:	617b      	str	r3, [r7, #20]
 801c676:	e028      	b.n	801c6ca <uint32_to_str+0x6a>
  {
    int off = (val >> ((7 - i) * 4)) & 0xF;
 801c678:	697b      	ldr	r3, [r7, #20]
 801c67a:	f1c3 0307 	rsb	r3, r3, #7
 801c67e:	009b      	lsls	r3, r3, #2
 801c680:	68fa      	ldr	r2, [r7, #12]
 801c682:	fa22 f303 	lsr.w	r3, r2, r3
 801c686:	f003 030f 	and.w	r3, r3, #15
 801c68a:	613b      	str	r3, [r7, #16]
    max -= 1;
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	3b01      	subs	r3, #1
 801c690:	607b      	str	r3, [r7, #4]
    if (max < 2)
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	2b01      	cmp	r3, #1
 801c696:	dd1c      	ble.n	801c6d2 <uint32_to_str+0x72>
      break;
    if (off > 9) {
 801c698:	693b      	ldr	r3, [r7, #16]
 801c69a:	2b09      	cmp	r3, #9
 801c69c:	dd09      	ble.n	801c6b2 <uint32_to_str+0x52>
      dest[i+1] = 'A' + (off - 10);
 801c69e:	693b      	ldr	r3, [r7, #16]
 801c6a0:	b2da      	uxtb	r2, r3
 801c6a2:	697b      	ldr	r3, [r7, #20]
 801c6a4:	3301      	adds	r3, #1
 801c6a6:	68b9      	ldr	r1, [r7, #8]
 801c6a8:	440b      	add	r3, r1
 801c6aa:	3237      	adds	r2, #55	@ 0x37
 801c6ac:	b2d2      	uxtb	r2, r2
 801c6ae:	701a      	strb	r2, [r3, #0]
 801c6b0:	e008      	b.n	801c6c4 <uint32_to_str+0x64>
    }
    else {
      dest[i+1] = '0' + off;
 801c6b2:	693b      	ldr	r3, [r7, #16]
 801c6b4:	b2da      	uxtb	r2, r3
 801c6b6:	697b      	ldr	r3, [r7, #20]
 801c6b8:	3301      	adds	r3, #1
 801c6ba:	68b9      	ldr	r1, [r7, #8]
 801c6bc:	440b      	add	r3, r1
 801c6be:	3230      	adds	r2, #48	@ 0x30
 801c6c0:	b2d2      	uxtb	r2, r2
 801c6c2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 8; i++)
 801c6c4:	697b      	ldr	r3, [r7, #20]
 801c6c6:	3301      	adds	r3, #1
 801c6c8:	617b      	str	r3, [r7, #20]
 801c6ca:	697b      	ldr	r3, [r7, #20]
 801c6cc:	2b07      	cmp	r3, #7
 801c6ce:	ddd3      	ble.n	801c678 <uint32_to_str+0x18>
 801c6d0:	e000      	b.n	801c6d4 <uint32_to_str+0x74>
      break;
 801c6d2:	bf00      	nop
    }
  }
  dest[i+1] = 0;
 801c6d4:	697b      	ldr	r3, [r7, #20]
 801c6d6:	3301      	adds	r3, #1
 801c6d8:	68ba      	ldr	r2, [r7, #8]
 801c6da:	4413      	add	r3, r2
 801c6dc:	2200      	movs	r2, #0
 801c6de:	701a      	strb	r2, [r3, #0]
}
 801c6e0:	bf00      	nop
 801c6e2:	371c      	adds	r7, #28
 801c6e4:	46bd      	mov	sp, r7
 801c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6ea:	4770      	bx	lr

0801c6ec <_put_c_driver>:
#if !defined(USE_PRINTF_FROM_TOOL) || USE_PRINTF_FROM_TOOL != 1

#include "lc_print.h"

static void _put_c_driver(void *user, const char c)
{
 801c6ec:	b580      	push	{r7, lr}
 801c6ee:	b082      	sub	sp, #8
 801c6f0:	af00      	add	r7, sp, #0
 801c6f2:	6078      	str	r0, [r7, #4]
 801c6f4:	460b      	mov	r3, r1
 801c6f6:	70fb      	strb	r3, [r7, #3]
#if defined(HAS_DEDICATED_PRINT_PORT) && HAS_DEDICATED_PRINT_PORT == 1
  port_io_dedicated_putc(c);
#else
  if (_ioWriteAllowed)
 801c6f8:	4b06      	ldr	r3, [pc, #24]	@ (801c714 <_put_c_driver+0x28>)
 801c6fa:	781b      	ldrb	r3, [r3, #0]
 801c6fc:	2b00      	cmp	r3, #0
 801c6fe:	d004      	beq.n	801c70a <_put_c_driver+0x1e>
  {
    port_io_write((uint8_t *)&c, 1);
 801c700:	1cfb      	adds	r3, r7, #3
 801c702:	2101      	movs	r1, #1
 801c704:	4618      	mov	r0, r3
 801c706:	f7ff fedb 	bl	801c4c0 <port_io_write>
  }
#ifdef SWO_OUTPUT
  ITM_SendChar(c);
#endif 
#endif
}
 801c70a:	bf00      	nop
 801c70c:	3708      	adds	r7, #8
 801c70e:	46bd      	mov	sp, r7
 801c710:	bd80      	pop	{r7, pc}
 801c712:	bf00      	nop
 801c714:	2400000d 	.word	0x2400000d

0801c718 <lc_print>:

void lc_print(const char* fmt, ... )
{
 801c718:	b40f      	push	{r0, r1, r2, r3}
 801c71a:	b580      	push	{r7, lr}
 801c71c:	b082      	sub	sp, #8
 801c71e:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 801c720:	f107 0314 	add.w	r3, r7, #20
 801c724:	607b      	str	r3, [r7, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	693a      	ldr	r2, [r7, #16]
 801c72a:	2100      	movs	r1, #0
 801c72c:	4804      	ldr	r0, [pc, #16]	@ (801c740 <lc_print+0x28>)
 801c72e:	f002 fe69 	bl	801f404 <vlc_print>
  va_end(ap);
}
 801c732:	bf00      	nop
 801c734:	3708      	adds	r7, #8
 801c736:	46bd      	mov	sp, r7
 801c738:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c73c:	b004      	add	sp, #16
 801c73e:	4770      	bx	lr
 801c740:	0801c6ed 	.word	0x0801c6ed

0801c744 <_put_c_buffer_cb>:
  size_t size;
  size_t pos;
};

static void _put_c_buffer_cb(void *user, const char c)
{
 801c744:	b480      	push	{r7}
 801c746:	b085      	sub	sp, #20
 801c748:	af00      	add	r7, sp, #0
 801c74a:	6078      	str	r0, [r7, #4]
 801c74c:	460b      	mov	r3, r1
 801c74e:	70fb      	strb	r3, [r7, #3]
  struct _buffer *buffer = (struct _buffer *)user;
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	60fb      	str	r3, [r7, #12]
  if (buffer->pos < (buffer->size - 1)) {
 801c754:	68fb      	ldr	r3, [r7, #12]
 801c756:	689a      	ldr	r2, [r3, #8]
 801c758:	68fb      	ldr	r3, [r7, #12]
 801c75a:	685b      	ldr	r3, [r3, #4]
 801c75c:	3b01      	subs	r3, #1
 801c75e:	429a      	cmp	r2, r3
 801c760:	d212      	bcs.n	801c788 <_put_c_buffer_cb+0x44>
    buffer->buffer[buffer->pos] = c;
 801c762:	68fb      	ldr	r3, [r7, #12]
 801c764:	681a      	ldr	r2, [r3, #0]
 801c766:	68fb      	ldr	r3, [r7, #12]
 801c768:	689b      	ldr	r3, [r3, #8]
 801c76a:	4413      	add	r3, r2
 801c76c:	78fa      	ldrb	r2, [r7, #3]
 801c76e:	701a      	strb	r2, [r3, #0]
    buffer->pos++;
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	689b      	ldr	r3, [r3, #8]
 801c774:	1c5a      	adds	r2, r3, #1
 801c776:	68fb      	ldr	r3, [r7, #12]
 801c778:	609a      	str	r2, [r3, #8]
    buffer->buffer[buffer->pos] = 0;
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	681a      	ldr	r2, [r3, #0]
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	689b      	ldr	r3, [r3, #8]
 801c782:	4413      	add	r3, r2
 801c784:	2200      	movs	r2, #0
 801c786:	701a      	strb	r2, [r3, #0]
  }
}
 801c788:	bf00      	nop
 801c78a:	3714      	adds	r7, #20
 801c78c:	46bd      	mov	sp, r7
 801c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c792:	4770      	bx	lr

0801c794 <lc_vsnprint>:

size_t lc_vsnprint(char *buff, size_t size, const char* fmt, va_list vlist)
{
 801c794:	b580      	push	{r7, lr}
 801c796:	b088      	sub	sp, #32
 801c798:	af00      	add	r7, sp, #0
 801c79a:	60f8      	str	r0, [r7, #12]
 801c79c:	60b9      	str	r1, [r7, #8]
 801c79e:	607a      	str	r2, [r7, #4]
 801c7a0:	603b      	str	r3, [r7, #0]
  struct _buffer buffer = {buff, size, 0};
 801c7a2:	68fb      	ldr	r3, [r7, #12]
 801c7a4:	617b      	str	r3, [r7, #20]
 801c7a6:	68bb      	ldr	r3, [r7, #8]
 801c7a8:	61bb      	str	r3, [r7, #24]
 801c7aa:	2300      	movs	r3, #0
 801c7ac:	61fb      	str	r3, [r7, #28]
  vlc_print(&_put_c_buffer_cb, &buffer, fmt, vlist);
 801c7ae:	f107 0114 	add.w	r1, r7, #20
 801c7b2:	683b      	ldr	r3, [r7, #0]
 801c7b4:	687a      	ldr	r2, [r7, #4]
 801c7b6:	4804      	ldr	r0, [pc, #16]	@ (801c7c8 <lc_vsnprint+0x34>)
 801c7b8:	f002 fe24 	bl	801f404 <vlc_print>
  return buffer.pos - 1;
 801c7bc:	69fb      	ldr	r3, [r7, #28]
 801c7be:	3b01      	subs	r3, #1
}
 801c7c0:	4618      	mov	r0, r3
 801c7c2:	3720      	adds	r7, #32
 801c7c4:	46bd      	mov	sp, r7
 801c7c6:	bd80      	pop	{r7, pc}
 801c7c8:	0801c745 	.word	0x0801c745

0801c7cc <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 801c7cc:	b580      	push	{r7, lr}
 801c7ce:	b084      	sub	sp, #16
 801c7d0:	af00      	add	r7, sp, #0
 801c7d2:	6078      	str	r0, [r7, #4]
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 801c7d4:	4b25      	ldr	r3, [pc, #148]	@ (801c86c <__wrap_malloc+0xa0>)
 801c7d6:	681b      	ldr	r3, [r3, #0]
 801c7d8:	f043 0302 	orr.w	r3, r3, #2
 801c7dc:	4a23      	ldr	r2, [pc, #140]	@ (801c86c <__wrap_malloc+0xa0>)
 801c7de:	6013      	str	r3, [r2, #0]

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	3303      	adds	r3, #3
 801c7e4:	f023 0303 	bic.w	r3, r3, #3
 801c7e8:	607b      	str	r3, [r7, #4]

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 801c7ea:	687b      	ldr	r3, [r7, #4]
 801c7ec:	3308      	adds	r3, #8
 801c7ee:	4618      	mov	r0, r3
 801c7f0:	f016 fae6 	bl	8032dc0 <malloc>
 801c7f4:	60f8      	str	r0, [r7, #12]

  /* remember size */
  if (ptr) {
 801c7f6:	68fb      	ldr	r3, [r7, #12]
 801c7f8:	2b00      	cmp	r3, #0
 801c7fa:	d008      	beq.n	801c80e <__wrap_malloc+0x42>
    *((uint32_t*)ptr) = bytes;
 801c7fc:	68fb      	ldr	r3, [r7, #12]
 801c7fe:	687a      	ldr	r2, [r7, #4]
 801c800:	601a      	str	r2, [r3, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 801c802:	687b      	ldr	r3, [r7, #4]
 801c804:	3304      	adds	r3, #4
 801c806:	68fa      	ldr	r2, [r7, #12]
 801c808:	4413      	add	r3, r2
 801c80a:	4a19      	ldr	r2, [pc, #100]	@ (801c870 <__wrap_malloc+0xa4>)
 801c80c:	601a      	str	r2, [r3, #0]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 801c80e:	68fb      	ldr	r3, [r7, #12]
 801c810:	2b00      	cmp	r3, #0
 801c812:	d020      	beq.n	801c856 <__wrap_malloc+0x8a>
 801c814:	4b15      	ldr	r3, [pc, #84]	@ (801c86c <__wrap_malloc+0xa0>)
 801c816:	681b      	ldr	r3, [r3, #0]
 801c818:	f003 0301 	and.w	r3, r3, #1
 801c81c:	2b00      	cmp	r3, #0
 801c81e:	d01a      	beq.n	801c856 <__wrap_malloc+0x8a>
    io_malloc.alloc_req++;
 801c820:	4b12      	ldr	r3, [pc, #72]	@ (801c86c <__wrap_malloc+0xa0>)
 801c822:	68db      	ldr	r3, [r3, #12]
 801c824:	3301      	adds	r3, #1
 801c826:	4a11      	ldr	r2, [pc, #68]	@ (801c86c <__wrap_malloc+0xa0>)
 801c828:	60d3      	str	r3, [r2, #12]
    io_malloc.alloc += bytes;
 801c82a:	4b10      	ldr	r3, [pc, #64]	@ (801c86c <__wrap_malloc+0xa0>)
 801c82c:	685a      	ldr	r2, [r3, #4]
 801c82e:	687b      	ldr	r3, [r7, #4]
 801c830:	4413      	add	r3, r2
 801c832:	4a0e      	ldr	r2, [pc, #56]	@ (801c86c <__wrap_malloc+0xa0>)
 801c834:	6053      	str	r3, [r2, #4]

    io_malloc.used += bytes;
 801c836:	4b0d      	ldr	r3, [pc, #52]	@ (801c86c <__wrap_malloc+0xa0>)
 801c838:	699a      	ldr	r2, [r3, #24]
 801c83a:	687b      	ldr	r3, [r7, #4]
 801c83c:	4413      	add	r3, r2
 801c83e:	4a0b      	ldr	r2, [pc, #44]	@ (801c86c <__wrap_malloc+0xa0>)
 801c840:	6193      	str	r3, [r2, #24]

    if (io_malloc.used > io_malloc.max) {
 801c842:	4b0a      	ldr	r3, [pc, #40]	@ (801c86c <__wrap_malloc+0xa0>)
 801c844:	699a      	ldr	r2, [r3, #24]
 801c846:	4b09      	ldr	r3, [pc, #36]	@ (801c86c <__wrap_malloc+0xa0>)
 801c848:	695b      	ldr	r3, [r3, #20]
 801c84a:	429a      	cmp	r2, r3
 801c84c:	d903      	bls.n	801c856 <__wrap_malloc+0x8a>
      io_malloc.max = io_malloc.used;
 801c84e:	4b07      	ldr	r3, [pc, #28]	@ (801c86c <__wrap_malloc+0xa0>)
 801c850:	699b      	ldr	r3, [r3, #24]
 801c852:	4a06      	ldr	r2, [pc, #24]	@ (801c86c <__wrap_malloc+0xa0>)
 801c854:	6153      	str	r3, [r2, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 801c856:	68fb      	ldr	r3, [r7, #12]
 801c858:	2b00      	cmp	r3, #0
 801c85a:	d002      	beq.n	801c862 <__wrap_malloc+0x96>
 801c85c:	68fb      	ldr	r3, [r7, #12]
 801c85e:	3304      	adds	r3, #4
 801c860:	e000      	b.n	801c864 <__wrap_malloc+0x98>
 801c862:	2300      	movs	r3, #0
}
 801c864:	4618      	mov	r0, r3
 801c866:	3710      	adds	r7, #16
 801c868:	46bd      	mov	sp, r7
 801c86a:	bd80      	pop	{r7, pc}
 801c86c:	24031d20 	.word	0x24031d20
 801c870:	efdcba98 	.word	0xefdcba98

0801c874 <__wrap_free>:

void __wrap_free(void *ptr)
{
 801c874:	b580      	push	{r7, lr}
 801c876:	b084      	sub	sp, #16
 801c878:	af00      	add	r7, sp, #0
 801c87a:	6078      	str	r0, [r7, #4]
  uint8_t* p;
  uint32_t bytes;

  io_malloc.cfg |= 1 << 2;
 801c87c:	4b1d      	ldr	r3, [pc, #116]	@ (801c8f4 <__wrap_free+0x80>)
 801c87e:	681b      	ldr	r3, [r3, #0]
 801c880:	f043 0304 	orr.w	r3, r3, #4
 801c884:	4a1b      	ldr	r2, [pc, #108]	@ (801c8f4 <__wrap_free+0x80>)
 801c886:	6013      	str	r3, [r2, #0]

  if (!ptr)
 801c888:	687b      	ldr	r3, [r7, #4]
 801c88a:	2b00      	cmp	r3, #0
 801c88c:	d02e      	beq.n	801c8ec <__wrap_free+0x78>
    return;

  p = (uint8_t*)ptr - 4;
 801c88e:	687b      	ldr	r3, [r7, #4]
 801c890:	3b04      	subs	r3, #4
 801c892:	60fb      	str	r3, [r7, #12]
  bytes = *((uint32_t*)p);
 801c894:	68fb      	ldr	r3, [r7, #12]
 801c896:	681b      	ldr	r3, [r3, #0]
 801c898:	60bb      	str	r3, [r7, #8]

  if (*((uint32_t*)(p + 4 + bytes)) == MAGIC_MALLOC_NUMBER) {
 801c89a:	68bb      	ldr	r3, [r7, #8]
 801c89c:	3304      	adds	r3, #4
 801c89e:	68fa      	ldr	r2, [r7, #12]
 801c8a0:	4413      	add	r3, r2
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	4a14      	ldr	r2, [pc, #80]	@ (801c8f8 <__wrap_free+0x84>)
 801c8a6:	4293      	cmp	r3, r2
 801c8a8:	d105      	bne.n	801c8b6 <__wrap_free+0x42>
    *((uint32_t*)(p + 4 + bytes)) = 0;
 801c8aa:	68bb      	ldr	r3, [r7, #8]
 801c8ac:	3304      	adds	r3, #4
 801c8ae:	68fa      	ldr	r2, [r7, #12]
 801c8b0:	4413      	add	r3, r2
 801c8b2:	2200      	movs	r2, #0
 801c8b4:	601a      	str	r2, [r3, #0]
  }

  if (io_malloc.cfg & 1UL) {
 801c8b6:	4b0f      	ldr	r3, [pc, #60]	@ (801c8f4 <__wrap_free+0x80>)
 801c8b8:	681b      	ldr	r3, [r3, #0]
 801c8ba:	f003 0301 	and.w	r3, r3, #1
 801c8be:	2b00      	cmp	r3, #0
 801c8c0:	d010      	beq.n	801c8e4 <__wrap_free+0x70>
    io_malloc.free_req++;
 801c8c2:	4b0c      	ldr	r3, [pc, #48]	@ (801c8f4 <__wrap_free+0x80>)
 801c8c4:	691b      	ldr	r3, [r3, #16]
 801c8c6:	3301      	adds	r3, #1
 801c8c8:	4a0a      	ldr	r2, [pc, #40]	@ (801c8f4 <__wrap_free+0x80>)
 801c8ca:	6113      	str	r3, [r2, #16]
    io_malloc.free += bytes;
 801c8cc:	4b09      	ldr	r3, [pc, #36]	@ (801c8f4 <__wrap_free+0x80>)
 801c8ce:	689a      	ldr	r2, [r3, #8]
 801c8d0:	68bb      	ldr	r3, [r7, #8]
 801c8d2:	4413      	add	r3, r2
 801c8d4:	4a07      	ldr	r2, [pc, #28]	@ (801c8f4 <__wrap_free+0x80>)
 801c8d6:	6093      	str	r3, [r2, #8]
    io_malloc.used -= bytes;
 801c8d8:	4b06      	ldr	r3, [pc, #24]	@ (801c8f4 <__wrap_free+0x80>)
 801c8da:	699a      	ldr	r2, [r3, #24]
 801c8dc:	68bb      	ldr	r3, [r7, #8]
 801c8de:	1ad3      	subs	r3, r2, r3
 801c8e0:	4a04      	ldr	r2, [pc, #16]	@ (801c8f4 <__wrap_free+0x80>)
 801c8e2:	6193      	str	r3, [r2, #24]

    if (io_malloc.f_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.f_idx = 0;
#endif
  }
  __real_free(p);
 801c8e4:	68f8      	ldr	r0, [r7, #12]
 801c8e6:	f016 fa73 	bl	8032dd0 <free>
 801c8ea:	e000      	b.n	801c8ee <__wrap_free+0x7a>
    return;
 801c8ec:	bf00      	nop
}
 801c8ee:	3710      	adds	r7, #16
 801c8f0:	46bd      	mov	sp, r7
 801c8f2:	bd80      	pop	{r7, pc}
 801c8f4:	24031d20 	.word	0x24031d20
 801c8f8:	efdcba98 	.word	0xefdcba98

0801c8fc <stackMonInit>:
struct io_stack io_stack;

#if defined(_APP_STACK_MONITOR_) && _APP_STACK_MONITOR_ == 1 && defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER

void stackMonInit(uint32_t ctrl, uint32_t cstack, uint32_t msize)
{
 801c8fc:	b580      	push	{r7, lr}
 801c8fe:	b084      	sub	sp, #16
 801c900:	af00      	add	r7, sp, #0
 801c902:	60f8      	str	r0, [r7, #12]
 801c904:	60b9      	str	r1, [r7, #8]
 801c906:	607a      	str	r2, [r7, #4]
  memset(&io_stack, 0, sizeof(struct io_stack));
 801c908:	2220      	movs	r2, #32
 801c90a:	2100      	movs	r1, #0
 801c90c:	4822      	ldr	r0, [pc, #136]	@ (801c998 <stackMonInit+0x9c>)
 801c90e:	f017 fac0 	bl	8033e92 <memset>

  /* Reading ARM Core registers */
  io_stack.ctrl = ctrl;
 801c912:	4a21      	ldr	r2, [pc, #132]	@ (801c998 <stackMonInit+0x9c>)
 801c914:	68fb      	ldr	r3, [r7, #12]
 801c916:	6013      	str	r3, [r2, #0]
  io_stack.cstack = cstack;
 801c918:	4a1f      	ldr	r2, [pc, #124]	@ (801c998 <stackMonInit+0x9c>)
 801c91a:	68bb      	ldr	r3, [r7, #8]
 801c91c:	6193      	str	r3, [r2, #24]

#if defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  io_stack.estack = (uint32_t)_estack;
 801c91e:	4a1f      	ldr	r2, [pc, #124]	@ (801c99c <stackMonInit+0xa0>)
 801c920:	4b1d      	ldr	r3, [pc, #116]	@ (801c998 <stackMonInit+0x9c>)
 801c922:	611a      	str	r2, [r3, #16]
  io_stack.bstack = io_stack.estack - msize;
 801c924:	4b1c      	ldr	r3, [pc, #112]	@ (801c998 <stackMonInit+0x9c>)
 801c926:	691a      	ldr	r2, [r3, #16]
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	1ad3      	subs	r3, r2, r3
 801c92c:	4a1a      	ldr	r2, [pc, #104]	@ (801c998 <stackMonInit+0x9c>)
 801c92e:	61d3      	str	r3, [r2, #28]
  io_stack.mstack_size = msize;
 801c930:	4a19      	ldr	r2, [pc, #100]	@ (801c998 <stackMonInit+0x9c>)
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	6153      	str	r3, [r2, #20]
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  (void)msize;
#endif

  /* Check that MSP is the active stack */
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 801c936:	4b18      	ldr	r3, [pc, #96]	@ (801c998 <stackMonInit+0x9c>)
 801c938:	681b      	ldr	r3, [r3, #0]
 801c93a:	f003 0302 	and.w	r3, r3, #2
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d006      	beq.n	801c950 <stackMonInit+0x54>
    LC_PRINT("E: MSP is not the active stack (stack monitoring is disabled)\r\n");
 801c942:	4817      	ldr	r0, [pc, #92]	@ (801c9a0 <stackMonInit+0xa4>)
 801c944:	f7ff fee8 	bl	801c718 <lc_print>
    io_stack.stack_mon = false;
 801c948:	4b13      	ldr	r3, [pc, #76]	@ (801c998 <stackMonInit+0x9c>)
 801c94a:	2200      	movs	r2, #0
 801c94c:	711a      	strb	r2, [r3, #4]
 801c94e:	e002      	b.n	801c956 <stackMonInit+0x5a>
  } else
    io_stack.stack_mon = true;
 801c950:	4b11      	ldr	r3, [pc, #68]	@ (801c998 <stackMonInit+0x9c>)
 801c952:	2201      	movs	r2, #1
 801c954:	711a      	strb	r2, [r3, #4]

  /* Calculating used stack before test */
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 801c956:	4b10      	ldr	r3, [pc, #64]	@ (801c998 <stackMonInit+0x9c>)
 801c958:	691a      	ldr	r2, [r3, #16]
 801c95a:	4b0f      	ldr	r3, [pc, #60]	@ (801c998 <stackMonInit+0x9c>)
 801c95c:	699b      	ldr	r3, [r3, #24]
 801c95e:	1ad3      	subs	r3, r2, r3
 801c960:	4a0d      	ldr	r2, [pc, #52]	@ (801c998 <stackMonInit+0x9c>)
 801c962:	60d3      	str	r3, [r2, #12]

  if ((io_stack.stack_mon) && (io_stack.ustack_size > io_stack.mstack_size)) {
 801c964:	4b0c      	ldr	r3, [pc, #48]	@ (801c998 <stackMonInit+0x9c>)
 801c966:	791b      	ldrb	r3, [r3, #4]
 801c968:	2b00      	cmp	r3, #0
 801c96a:	d011      	beq.n	801c990 <stackMonInit+0x94>
 801c96c:	4b0a      	ldr	r3, [pc, #40]	@ (801c998 <stackMonInit+0x9c>)
 801c96e:	68da      	ldr	r2, [r3, #12]
 801c970:	4b09      	ldr	r3, [pc, #36]	@ (801c998 <stackMonInit+0x9c>)
 801c972:	695b      	ldr	r3, [r3, #20]
 801c974:	429a      	cmp	r2, r3
 801c976:	d90b      	bls.n	801c990 <stackMonInit+0x94>
    LC_PRINT("E: !stack overflow detected %d > %d\r\n", (int)io_stack.ustack_size,
 801c978:	4b07      	ldr	r3, [pc, #28]	@ (801c998 <stackMonInit+0x9c>)
 801c97a:	68db      	ldr	r3, [r3, #12]
 801c97c:	4619      	mov	r1, r3
 801c97e:	4b06      	ldr	r3, [pc, #24]	@ (801c998 <stackMonInit+0x9c>)
 801c980:	695b      	ldr	r3, [r3, #20]
 801c982:	461a      	mov	r2, r3
 801c984:	4807      	ldr	r0, [pc, #28]	@ (801c9a4 <stackMonInit+0xa8>)
 801c986:	f7ff fec7 	bl	801c718 <lc_print>
        (int)io_stack.mstack_size);
    io_stack.stack_mon = false;
 801c98a:	4b03      	ldr	r3, [pc, #12]	@ (801c998 <stackMonInit+0x9c>)
 801c98c:	2200      	movs	r2, #0
 801c98e:	711a      	strb	r2, [r3, #4]
  }
}
 801c990:	bf00      	nop
 801c992:	3710      	adds	r7, #16
 801c994:	46bd      	mov	sp, r7
 801c996:	bd80      	pop	{r7, pc}
 801c998:	24031d3c 	.word	0x24031d3c
 801c99c:	24080000 	.word	0x24080000
 801c9a0:	08037b08 	.word	0x08037b08
 801c9a4:	08037b48 	.word	0x08037b48

0801c9a8 <dwtCyclesToTime>:
 */

struct cyclesCount cyclesCount;

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 801c9a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c9ac:	b0ae      	sub	sp, #184	@ 0xb8
 801c9ae:	af00      	add	r7, sp, #0
 801c9b0:	e9c7 0124 	strd	r0, r1, [r7, #144]	@ 0x90
 801c9b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
  if (!t)
 801c9b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	d102      	bne.n	801c9c6 <dwtCyclesToTime+0x1e>
    return -1;
 801c9c0:	f04f 33ff 	mov.w	r3, #4294967295
 801c9c4:	e193      	b.n	801ccee <dwtCyclesToTime+0x346>
  uint32_t fcpu = port_hal_get_frequency();
 801c9c6:	f7f9 fa69 	bl	8015e9c <HAL_RCC_GetSysClockFreq>
 801c9ca:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
  uint64_t s  = clks / fcpu;
 801c9ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801c9d2:	2200      	movs	r2, #0
 801c9d4:	461c      	mov	r4, r3
 801c9d6:	4615      	mov	r5, r2
 801c9d8:	4622      	mov	r2, r4
 801c9da:	462b      	mov	r3, r5
 801c9dc:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 801c9e0:	f7f3 fe50 	bl	8010684 <__aeabi_uldivmod>
 801c9e4:	4602      	mov	r2, r0
 801c9e6:	460b      	mov	r3, r1
 801c9e8:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
  uint64_t ms = (clks * 1000) / fcpu;
 801c9ec:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801c9f0:	4622      	mov	r2, r4
 801c9f2:	462b      	mov	r3, r5
 801c9f4:	f04f 0000 	mov.w	r0, #0
 801c9f8:	f04f 0100 	mov.w	r1, #0
 801c9fc:	0159      	lsls	r1, r3, #5
 801c9fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801ca02:	0150      	lsls	r0, r2, #5
 801ca04:	4602      	mov	r2, r0
 801ca06:	460b      	mov	r3, r1
 801ca08:	ebb2 0804 	subs.w	r8, r2, r4
 801ca0c:	eb63 0905 	sbc.w	r9, r3, r5
 801ca10:	f04f 0200 	mov.w	r2, #0
 801ca14:	f04f 0300 	mov.w	r3, #0
 801ca18:	ea4f 0389 	mov.w	r3, r9, lsl #2
 801ca1c:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 801ca20:	ea4f 0288 	mov.w	r2, r8, lsl #2
 801ca24:	4690      	mov	r8, r2
 801ca26:	4699      	mov	r9, r3
 801ca28:	eb18 0304 	adds.w	r3, r8, r4
 801ca2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801ca2e:	eb49 0305 	adc.w	r3, r9, r5
 801ca32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ca34:	f04f 0200 	mov.w	r2, #0
 801ca38:	f04f 0300 	mov.w	r3, #0
 801ca3c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 801ca40:	4629      	mov	r1, r5
 801ca42:	00cb      	lsls	r3, r1, #3
 801ca44:	4621      	mov	r1, r4
 801ca46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801ca4a:	4621      	mov	r1, r4
 801ca4c:	00ca      	lsls	r2, r1, #3
 801ca4e:	4610      	mov	r0, r2
 801ca50:	4619      	mov	r1, r3
 801ca52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801ca56:	2200      	movs	r2, #0
 801ca58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801ca5c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801ca60:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801ca64:	f7f3 fe0e 	bl	8010684 <__aeabi_uldivmod>
 801ca68:	4602      	mov	r2, r0
 801ca6a:	460b      	mov	r3, r1
 801ca6c:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 801ca70:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801ca74:	4622      	mov	r2, r4
 801ca76:	462b      	mov	r3, r5
 801ca78:	f04f 0000 	mov.w	r0, #0
 801ca7c:	f04f 0100 	mov.w	r1, #0
 801ca80:	0159      	lsls	r1, r3, #5
 801ca82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801ca86:	0150      	lsls	r0, r2, #5
 801ca88:	4602      	mov	r2, r0
 801ca8a:	460b      	mov	r3, r1
 801ca8c:	ebb2 0a04 	subs.w	sl, r2, r4
 801ca90:	eb63 0b05 	sbc.w	fp, r3, r5
 801ca94:	f04f 0200 	mov.w	r2, #0
 801ca98:	f04f 0300 	mov.w	r3, #0
 801ca9c:	ea4f 234b 	mov.w	r3, fp, lsl #9
 801caa0:	ea43 53da 	orr.w	r3, r3, sl, lsr #23
 801caa4:	ea4f 224a 	mov.w	r2, sl, lsl #9
 801caa8:	4692      	mov	sl, r2
 801caaa:	469b      	mov	fp, r3
 801caac:	eb1a 0304 	adds.w	r3, sl, r4
 801cab0:	653b      	str	r3, [r7, #80]	@ 0x50
 801cab2:	eb4b 0305 	adc.w	r3, fp, r5
 801cab6:	657b      	str	r3, [r7, #84]	@ 0x54
 801cab8:	f04f 0200 	mov.w	r2, #0
 801cabc:	f04f 0300 	mov.w	r3, #0
 801cac0:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 801cac4:	4649      	mov	r1, r9
 801cac6:	018b      	lsls	r3, r1, #6
 801cac8:	4641      	mov	r1, r8
 801caca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801cace:	4641      	mov	r1, r8
 801cad0:	018a      	lsls	r2, r1, #6
 801cad2:	4641      	mov	r1, r8
 801cad4:	1a51      	subs	r1, r2, r1
 801cad6:	64b9      	str	r1, [r7, #72]	@ 0x48
 801cad8:	4649      	mov	r1, r9
 801cada:	eb63 0301 	sbc.w	r3, r3, r1
 801cade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801cae0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801cae4:	460b      	mov	r3, r1
 801cae6:	191b      	adds	r3, r3, r4
 801cae8:	67bb      	str	r3, [r7, #120]	@ 0x78
 801caea:	4613      	mov	r3, r2
 801caec:	eb45 0303 	adc.w	r3, r5, r3
 801caf0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801caf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801caf6:	2200      	movs	r2, #0
 801caf8:	673b      	str	r3, [r7, #112]	@ 0x70
 801cafa:	677a      	str	r2, [r7, #116]	@ 0x74
 801cafc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 801cb00:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 801cb04:	f7f3 fdbe 	bl	8010684 <__aeabi_uldivmod>
 801cb08:	4602      	mov	r2, r0
 801cb0a:	460b      	mov	r3, r1
 801cb0c:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
  ms -= (s * 1000);
 801cb10:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 801cb14:	4622      	mov	r2, r4
 801cb16:	462b      	mov	r3, r5
 801cb18:	f04f 0000 	mov.w	r0, #0
 801cb1c:	f04f 0100 	mov.w	r1, #0
 801cb20:	0159      	lsls	r1, r3, #5
 801cb22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801cb26:	0150      	lsls	r0, r2, #5
 801cb28:	4602      	mov	r2, r0
 801cb2a:	460b      	mov	r3, r1
 801cb2c:	1b11      	subs	r1, r2, r4
 801cb2e:	6439      	str	r1, [r7, #64]	@ 0x40
 801cb30:	eb63 0305 	sbc.w	r3, r3, r5
 801cb34:	647b      	str	r3, [r7, #68]	@ 0x44
 801cb36:	f04f 0200 	mov.w	r2, #0
 801cb3a:	f04f 0300 	mov.w	r3, #0
 801cb3e:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 801cb42:	4649      	mov	r1, r9
 801cb44:	008b      	lsls	r3, r1, #2
 801cb46:	4641      	mov	r1, r8
 801cb48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801cb4c:	4641      	mov	r1, r8
 801cb4e:	008a      	lsls	r2, r1, #2
 801cb50:	4611      	mov	r1, r2
 801cb52:	461a      	mov	r2, r3
 801cb54:	460b      	mov	r3, r1
 801cb56:	191b      	adds	r3, r3, r4
 801cb58:	63bb      	str	r3, [r7, #56]	@ 0x38
 801cb5a:	4613      	mov	r3, r2
 801cb5c:	eb45 0303 	adc.w	r3, r5, r3
 801cb60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cb62:	f04f 0200 	mov.w	r2, #0
 801cb66:	f04f 0300 	mov.w	r3, #0
 801cb6a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 801cb6e:	4629      	mov	r1, r5
 801cb70:	00cb      	lsls	r3, r1, #3
 801cb72:	4621      	mov	r1, r4
 801cb74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801cb78:	4621      	mov	r1, r4
 801cb7a:	00ca      	lsls	r2, r1, #3
 801cb7c:	4610      	mov	r0, r2
 801cb7e:	4619      	mov	r1, r3
 801cb80:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 801cb84:	1a14      	subs	r4, r2, r0
 801cb86:	633c      	str	r4, [r7, #48]	@ 0x30
 801cb88:	eb63 0301 	sbc.w	r3, r3, r1
 801cb8c:	637b      	str	r3, [r7, #52]	@ 0x34
 801cb8e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 801cb92:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
  us -= (ms * 1000 + s * 1000000);
 801cb96:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 801cb9a:	4622      	mov	r2, r4
 801cb9c:	462b      	mov	r3, r5
 801cb9e:	f04f 0000 	mov.w	r0, #0
 801cba2:	f04f 0100 	mov.w	r1, #0
 801cba6:	0159      	lsls	r1, r3, #5
 801cba8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801cbac:	0150      	lsls	r0, r2, #5
 801cbae:	4602      	mov	r2, r0
 801cbb0:	460b      	mov	r3, r1
 801cbb2:	1b11      	subs	r1, r2, r4
 801cbb4:	62b9      	str	r1, [r7, #40]	@ 0x28
 801cbb6:	eb63 0305 	sbc.w	r3, r3, r5
 801cbba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cbbc:	f04f 0200 	mov.w	r2, #0
 801cbc0:	f04f 0300 	mov.w	r3, #0
 801cbc4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 801cbc8:	4649      	mov	r1, r9
 801cbca:	008b      	lsls	r3, r1, #2
 801cbcc:	4641      	mov	r1, r8
 801cbce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801cbd2:	4641      	mov	r1, r8
 801cbd4:	008a      	lsls	r2, r1, #2
 801cbd6:	4611      	mov	r1, r2
 801cbd8:	461a      	mov	r2, r3
 801cbda:	460b      	mov	r3, r1
 801cbdc:	191b      	adds	r3, r3, r4
 801cbde:	623b      	str	r3, [r7, #32]
 801cbe0:	4613      	mov	r3, r2
 801cbe2:	eb45 0303 	adc.w	r3, r5, r3
 801cbe6:	627b      	str	r3, [r7, #36]	@ 0x24
 801cbe8:	f04f 0200 	mov.w	r2, #0
 801cbec:	f04f 0300 	mov.w	r3, #0
 801cbf0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 801cbf4:	4629      	mov	r1, r5
 801cbf6:	00cb      	lsls	r3, r1, #3
 801cbf8:	4621      	mov	r1, r4
 801cbfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801cbfe:	4621      	mov	r1, r4
 801cc00:	00ca      	lsls	r2, r1, #3
 801cc02:	4690      	mov	r8, r2
 801cc04:	4699      	mov	r9, r3
 801cc06:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 801cc0a:	4622      	mov	r2, r4
 801cc0c:	462b      	mov	r3, r5
 801cc0e:	f04f 0000 	mov.w	r0, #0
 801cc12:	f04f 0100 	mov.w	r1, #0
 801cc16:	0159      	lsls	r1, r3, #5
 801cc18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801cc1c:	0150      	lsls	r0, r2, #5
 801cc1e:	4602      	mov	r2, r0
 801cc20:	460b      	mov	r3, r1
 801cc22:	1b11      	subs	r1, r2, r4
 801cc24:	61b9      	str	r1, [r7, #24]
 801cc26:	eb63 0305 	sbc.w	r3, r3, r5
 801cc2a:	61fb      	str	r3, [r7, #28]
 801cc2c:	f04f 0200 	mov.w	r2, #0
 801cc30:	f04f 0300 	mov.w	r3, #0
 801cc34:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 801cc38:	4659      	mov	r1, fp
 801cc3a:	024b      	lsls	r3, r1, #9
 801cc3c:	4651      	mov	r1, sl
 801cc3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801cc42:	4651      	mov	r1, sl
 801cc44:	024a      	lsls	r2, r1, #9
 801cc46:	4611      	mov	r1, r2
 801cc48:	461a      	mov	r2, r3
 801cc4a:	460b      	mov	r3, r1
 801cc4c:	191b      	adds	r3, r3, r4
 801cc4e:	613b      	str	r3, [r7, #16]
 801cc50:	4613      	mov	r3, r2
 801cc52:	eb45 0303 	adc.w	r3, r5, r3
 801cc56:	617b      	str	r3, [r7, #20]
 801cc58:	f04f 0200 	mov.w	r2, #0
 801cc5c:	f04f 0300 	mov.w	r3, #0
 801cc60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801cc64:	4659      	mov	r1, fp
 801cc66:	018b      	lsls	r3, r1, #6
 801cc68:	4651      	mov	r1, sl
 801cc6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801cc6e:	4651      	mov	r1, sl
 801cc70:	018a      	lsls	r2, r1, #6
 801cc72:	4651      	mov	r1, sl
 801cc74:	1a51      	subs	r1, r2, r1
 801cc76:	60b9      	str	r1, [r7, #8]
 801cc78:	4659      	mov	r1, fp
 801cc7a:	eb63 0301 	sbc.w	r3, r3, r1
 801cc7e:	60fb      	str	r3, [r7, #12]
 801cc80:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801cc84:	460b      	mov	r3, r1
 801cc86:	191b      	adds	r3, r3, r4
 801cc88:	66bb      	str	r3, [r7, #104]	@ 0x68
 801cc8a:	4613      	mov	r3, r2
 801cc8c:	eb45 0303 	adc.w	r3, r5, r3
 801cc90:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801cc92:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801cc96:	460b      	mov	r3, r1
 801cc98:	eb18 0303 	adds.w	r3, r8, r3
 801cc9c:	663b      	str	r3, [r7, #96]	@ 0x60
 801cc9e:	4613      	mov	r3, r2
 801cca0:	eb49 0303 	adc.w	r3, r9, r3
 801cca4:	667b      	str	r3, [r7, #100]	@ 0x64
 801cca6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 801ccaa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 801ccae:	4621      	mov	r1, r4
 801ccb0:	1a51      	subs	r1, r2, r1
 801ccb2:	6039      	str	r1, [r7, #0]
 801ccb4:	4629      	mov	r1, r5
 801ccb6:	eb63 0301 	sbc.w	r3, r3, r1
 801ccba:	607b      	str	r3, [r7, #4]
 801ccbc:	e9d7 3400 	ldrd	r3, r4, [r7]
 801ccc0:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
  t->fcpu = fcpu;
 801ccc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801ccc8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801cccc:	601a      	str	r2, [r3, #0]
  t->s = s;
 801ccce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801ccd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801ccd6:	605a      	str	r2, [r3, #4]
  t->ms = ms;
 801ccd8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801ccdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801cce0:	609a      	str	r2, [r3, #8]
  t->us = us;
 801cce2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801cce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801ccea:	60da      	str	r2, [r3, #12]
  return 0;
 801ccec:	2300      	movs	r3, #0
}
 801ccee:	4618      	mov	r0, r3
 801ccf0:	37b8      	adds	r7, #184	@ 0xb8
 801ccf2:	46bd      	mov	sp, r7
 801ccf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801ccf8 <dwtCyclesToFloatMs>:

float dwtCyclesToFloatMs(uint64_t clks)
{
 801ccf8:	b580      	push	{r7, lr}
 801ccfa:	b084      	sub	sp, #16
 801ccfc:	af00      	add	r7, sp, #0
 801ccfe:	e9c7 0100 	strd	r0, r1, [r7]
  float res;
  float fcpu = (float)port_hal_get_frequency();
 801cd02:	f7f9 f8cb 	bl	8015e9c <HAL_RCC_GetSysClockFreq>
 801cd06:	ee07 0a90 	vmov	s15, r0
 801cd0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cd0e:	edc7 7a03 	vstr	s15, [r7, #12]
  res = ((float)clks * (float)1000.0) / fcpu;
 801cd12:	e9d7 0100 	ldrd	r0, r1, [r7]
 801cd16:	f7f3 fc6f 	bl	80105f8 <__aeabi_ul2f>
 801cd1a:	ee07 0a10 	vmov	s14, r0
 801cd1e:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801cd44 <dwtCyclesToFloatMs+0x4c>
 801cd22:	ee67 6a27 	vmul.f32	s13, s14, s15
 801cd26:	ed97 7a03 	vldr	s14, [r7, #12]
 801cd2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801cd2e:	edc7 7a02 	vstr	s15, [r7, #8]
  return res;
 801cd32:	68bb      	ldr	r3, [r7, #8]
 801cd34:	ee07 3a90 	vmov	s15, r3
}
 801cd38:	eeb0 0a67 	vmov.f32	s0, s15
 801cd3c:	3710      	adds	r7, #16
 801cd3e:	46bd      	mov	sp, r7
 801cd40:	bd80      	pop	{r7, pc}
 801cd42:	bf00      	nop
 801cd44:	447a0000 	.word	0x447a0000

0801cd48 <devIdToStr>:

static const char *devIdToStr(uint16_t dev_id)
{
 801cd48:	b480      	push	{r7}
 801cd4a:	b085      	sub	sp, #20
 801cd4c:	af00      	add	r7, sp, #0
 801cd4e:	4603      	mov	r3, r0
 801cd50:	80fb      	strh	r3, [r7, #6]
  /* DEV_ID field from DBGMCU register (see BZ119679)*/
  const char *str;
  switch (dev_id) {
 801cd52:	88fb      	ldrh	r3, [r7, #6]
 801cd54:	f240 4283 	movw	r2, #1155	@ 0x483
 801cd58:	4293      	cmp	r3, r2
 801cd5a:	d010      	beq.n	801cd7e <devIdToStr+0x36>
 801cd5c:	f240 4283 	movw	r2, #1155	@ 0x483
 801cd60:	4293      	cmp	r3, r2
 801cd62:	dc0f      	bgt.n	801cd84 <devIdToStr+0x3c>
 801cd64:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 801cd68:	d003      	beq.n	801cd72 <devIdToStr+0x2a>
 801cd6a:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 801cd6e:	d003      	beq.n	801cd78 <devIdToStr+0x30>
 801cd70:	e008      	b.n	801cd84 <devIdToStr+0x3c>
#elif defined(STM32F7)
  case 0x451: str = "STM32F76x/F77x"; break; /* BigBirdie */
  case 0x449: str = "STM32F746"; break;      /* Birdie */
  case 0x452: str = "STM32F72x/F73x"; break; /* LittleBirdie */
#elif defined(STM32H7)
  case 0x450: str = "STM32H743/53/50xx and STM32H745/55/47/57xx"; break; /* Shark2M - see RM0433 & RM0399 */
 801cd72:	4b09      	ldr	r3, [pc, #36]	@ (801cd98 <devIdToStr+0x50>)
 801cd74:	60fb      	str	r3, [r7, #12]
 801cd76:	e007      	b.n	801cd88 <devIdToStr+0x40>
  case 0x480: str = "STM32H7A/7B"; break;  /* TinyShark2M */
 801cd78:	4b08      	ldr	r3, [pc, #32]	@ (801cd9c <devIdToStr+0x54>)
 801cd7a:	60fb      	str	r3, [r7, #12]
 801cd7c:	e004      	b.n	801cd88 <devIdToStr+0x40>
  case 0x483: str = "STM32H7[2,3]x"; break;  /* LittleShark1M */
 801cd7e:	4b08      	ldr	r3, [pc, #32]	@ (801cda0 <devIdToStr+0x58>)
 801cd80:	60fb      	str	r3, [r7, #12]
 801cd82:	e001      	b.n	801cd88 <devIdToStr+0x40>
#elif defined(SR5E1) /* STELLAR-E device */
  case 0x2511: str = "SR5E1x"; break;  /* see RM0483 */
#elif defined(SR6X) /* STELLAR P & G devices */
  case 0x2643: str = "SR6P3"; break;  /* see RM0509 */
#endif
  default:    str = "UNKNOWN";
 801cd84:	4b07      	ldr	r3, [pc, #28]	@ (801cda4 <devIdToStr+0x5c>)
 801cd86:	60fb      	str	r3, [r7, #12]
  }
  return str;
 801cd88:	68fb      	ldr	r3, [r7, #12]
}
 801cd8a:	4618      	mov	r0, r3
 801cd8c:	3714      	adds	r7, #20
 801cd8e:	46bd      	mov	sp, r7
 801cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd94:	4770      	bx	lr
 801cd96:	bf00      	nop
 801cd98:	08037b70 	.word	0x08037b70
 801cd9c:	08037b9c 	.word	0x08037b9c
 801cda0:	08037ba8 	.word	0x08037ba8
 801cda4:	08037bb8 	.word	0x08037bb8

0801cda8 <bitToStr>:
#define _STM32H7_DUAL_CORE_CM4
#endif

#if !defined(STM32F0) && !defined(STM32L0) && !defined(STM32G0) && !defined(STM32C0) && !defined(STM32F3) && !defined(STM32MP1) && !defined(_STM32H7_DUAL_CORE_CM4)
__STATIC_INLINE const char* bitToStr(uint32_t val)
{
 801cda8:	b480      	push	{r7}
 801cdaa:	b083      	sub	sp, #12
 801cdac:	af00      	add	r7, sp, #0
 801cdae:	6078      	str	r0, [r7, #4]
  if (val)
 801cdb0:	687b      	ldr	r3, [r7, #4]
 801cdb2:	2b00      	cmp	r3, #0
 801cdb4:	d001      	beq.n	801cdba <bitToStr+0x12>
    return "True";
 801cdb6:	4b04      	ldr	r3, [pc, #16]	@ (801cdc8 <bitToStr+0x20>)
 801cdb8:	e000      	b.n	801cdbc <bitToStr+0x14>
  else
    return "False";
 801cdba:	4b04      	ldr	r3, [pc, #16]	@ (801cdcc <bitToStr+0x24>)
}
 801cdbc:	4618      	mov	r0, r3
 801cdbe:	370c      	adds	r7, #12
 801cdc0:	46bd      	mov	sp, r7
 801cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdc6:	4770      	bx	lr
 801cdc8:	08037bc0 	.word	0x08037bc0
 801cdcc:	08037bc8 	.word	0x08037bc8

0801cdd0 <getSysConf>:
#endif


void getSysConf(struct mcu_conf *conf)
{
 801cdd0:	b580      	push	{r7, lr}
 801cdd2:	b082      	sub	sp, #8
 801cdd4:	af00      	add	r7, sp, #0
 801cdd6:	6078      	str	r0, [r7, #4]
  if (!conf)
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	d019      	beq.n	801ce12 <getSysConf+0x42>
    return;

  conf->sclk = port_hal_get_cpu_freq();
 801cdde:	f7f9 f85d 	bl	8015e9c <HAL_RCC_GetSysClockFreq>
 801cde2:	4602      	mov	r2, r0
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	601a      	str	r2, [r3, #0]
  conf->hclk = port_hal_get_sys_freq();
 801cde8:	f7f9 f9d2 	bl	8016190 <HAL_RCC_GetHCLKFreq>
 801cdec:	4602      	mov	r2, r0
 801cdee:	687b      	ldr	r3, [r7, #4]
 801cdf0:	605a      	str	r2, [r3, #4]
  conf->conf = getFlashCacheConf();
 801cdf2:	f000 f813 	bl	801ce1c <getFlashCacheConf>
 801cdf6:	4602      	mov	r2, r0
 801cdf8:	687b      	ldr	r3, [r7, #4]
 801cdfa:	609a      	str	r2, [r3, #8]
  conf->devid = port_hal_get_dev_id();
 801cdfc:	f7f4 ff14 	bl	8011c28 <HAL_GetDEVID>
 801ce00:	4602      	mov	r2, r0
 801ce02:	687b      	ldr	r3, [r7, #4]
 801ce04:	60da      	str	r2, [r3, #12]
  conf->revid = port_hal_get_rev_id();
 801ce06:	f7f4 ff03 	bl	8011c10 <HAL_GetREVID>
 801ce0a:	4602      	mov	r2, r0
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	611a      	str	r2, [r3, #16]
 801ce10:	e000      	b.n	801ce14 <getSysConf+0x44>
    return;
 801ce12:	bf00      	nop

#if defined(HAS_EXTRA_CONF) && HAS_EXTRA_CONF > 1
  port_hal_set_extra_conf(&conf->extra[0]);
#endif

}
 801ce14:	3708      	adds	r7, #8
 801ce16:	46bd      	mov	sp, r7
 801ce18:	bd80      	pop	{r7, pc}
	...

0801ce1c <getFlashCacheConf>:
#define MCONF_ART_EN        (1 << 9)
#define MCONF_ART_PREF      (1 << 8)


uint32_t getFlashCacheConf(void)
{
 801ce1c:	b480      	push	{r7}
 801ce1e:	b085      	sub	sp, #20
 801ce20:	af00      	add	r7, sp, #0
  uint32_t mconf = 0;
 801ce22:	2300      	movs	r3, #0
 801ce24:	60fb      	str	r3, [r7, #12]

#endif

#if defined(STM32H7) || defined(STM32H7RS)

  mconf |= MCONF_H7;
 801ce26:	68fb      	ldr	r3, [r7, #12]
 801ce28:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 801ce2c:	60fb      	str	r3, [r7, #12]

  __I uint32_t acr = FLASH->ACR;
 801ce2e:	4b14      	ldr	r3, [pc, #80]	@ (801ce80 <getFlashCacheConf+0x64>)
 801ce30:	681b      	ldr	r3, [r3, #0]
 801ce32:	60bb      	str	r3, [r7, #8]

  mconf |= (acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos;
 801ce34:	68bb      	ldr	r3, [r7, #8]
 801ce36:	f003 030f 	and.w	r3, r3, #15
 801ce3a:	68fa      	ldr	r2, [r7, #12]
 801ce3c:	4313      	orrs	r3, r2
 801ce3e:	60fb      	str	r3, [r7, #12]
#if !defined(CORE_CM4)
  __I uint32_t ccr = SCB->CCR;
 801ce40:	4b10      	ldr	r3, [pc, #64]	@ (801ce84 <getFlashCacheConf+0x68>)
 801ce42:	695b      	ldr	r3, [r3, #20]
 801ce44:	607b      	str	r3, [r7, #4]

  if (ccr & SCB_CCR_IC_Msk)
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ce4c:	2b00      	cmp	r3, #0
 801ce4e:	d003      	beq.n	801ce58 <getFlashCacheConf+0x3c>
    mconf |= MCONF_CORE_ICACHE;
 801ce50:	68fb      	ldr	r3, [r7, #12]
 801ce52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801ce56:	60fb      	str	r3, [r7, #12]
  if (ccr & SCB_CCR_DC_Msk)
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	d003      	beq.n	801ce6a <getFlashCacheConf+0x4e>
    mconf |= MCONF_CORE_DCACHE;
 801ce62:	68fb      	ldr	r3, [r7, #12]
 801ce64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801ce68:	60fb      	str	r3, [r7, #12]
#if defined(STM32N6)
  mconf |= MCONF_N6;
#endif

#if (__FPU_PRESENT == 1) && __FPU_USED
  mconf |= MCONF_FPU;  /* FPU present and used */
 801ce6a:	68fb      	ldr	r3, [r7, #12]
 801ce6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ce70:	60fb      	str	r3, [r7, #12]
  mconf |= MCONF_CORE_ICACHE;
  mconf |= MCONF_CORE_DCACHE;

#endif

  return mconf;
 801ce72:	68fb      	ldr	r3, [r7, #12]
}
 801ce74:	4618      	mov	r0, r3
 801ce76:	3714      	adds	r7, #20
 801ce78:	46bd      	mov	sp, r7
 801ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce7e:	4770      	bx	lr
 801ce80:	52002000 	.word	0x52002000
 801ce84:	e000ed00 	.word	0xe000ed00

0801ce88 <systemSettingLog>:

void systemSettingLog(void)
{
 801ce88:	b590      	push	{r4, r7, lr}
 801ce8a:	b089      	sub	sp, #36	@ 0x24
 801ce8c:	af00      	add	r7, sp, #0
  LC_PRINT("Compiled with GHS-ARM Compiler %d\r\n", __GHS_VERSION_NUMBER);
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  LC_PRINT("Compiled with HIGHTEC Clang %d.%d.%d\r\n", __clang_major__, __clang_minor__,
      __clang_patchlevel__);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 801ce8e:	2301      	movs	r3, #1
 801ce90:	2203      	movs	r2, #3
 801ce92:	210d      	movs	r1, #13
 801ce94:	482f      	ldr	r0, [pc, #188]	@ (801cf54 <systemSettingLog+0xcc>)
 801ce96:	f7ff fc3f 	bl	801c718 <lc_print>
  LC_PRINT("Compiled with MDK-ARM Keil %d\r\n", __ARMCC_VERSION);
#endif


  /* Display Device configuration */
  getSysConf(&sys_conf);
 801ce9a:	1d3b      	adds	r3, r7, #4
 801ce9c:	4618      	mov	r0, r3
 801ce9e:	f7ff ff97 	bl	801cdd0 <getSysConf>

  LC_PRINT(DEVICE_FAMILY " device configuration...\r\n");
 801cea2:	482d      	ldr	r0, [pc, #180]	@ (801cf58 <systemSettingLog+0xd0>)
 801cea4:	f7ff fc38 	bl	801c718 <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 801cea8:	693b      	ldr	r3, [r7, #16]
 801ceaa:	461c      	mov	r4, r3
 801ceac:	693b      	ldr	r3, [r7, #16]
 801ceae:	b29b      	uxth	r3, r3
 801ceb0:	4618      	mov	r0, r3
 801ceb2:	f7ff ff49 	bl	801cd48 <devIdToStr>
 801ceb6:	4602      	mov	r2, r0
 801ceb8:	697b      	ldr	r3, [r7, #20]
 801ceba:	4621      	mov	r1, r4
 801cebc:	4827      	ldr	r0, [pc, #156]	@ (801cf5c <systemSettingLog+0xd4>)
 801cebe:	f7ff fc2b 	bl	801c718 <lc_print>
      (int)sys_conf.revid
  );

#if (__FPU_PRESENT == 1)
#if !defined(SR6X)
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 801cec2:	4b27      	ldr	r3, [pc, #156]	@ (801cf60 <systemSettingLog+0xd8>)
 801cec4:	4a27      	ldr	r2, [pc, #156]	@ (801cf64 <systemSettingLog+0xdc>)
 801cec6:	2107      	movs	r1, #7
 801cec8:	4827      	ldr	r0, [pc, #156]	@ (801cf68 <systemSettingLog+0xe0>)
 801ceca:	f7ff fc25 	bl	801c718 <lc_print>
#if defined(SR5E1)
  LC_PRINT(" ESDK version : %s\r\n", (char*)port_hal_get_hal_version());
#elif defined(SR6X)
  LC_PRINT(" SDK version  : %s\r\n", (char*)port_hal_get_hal_version());
#else
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 801cece:	f7f4 fe95 	bl	8011bfc <HAL_GetHalVersion>
 801ced2:	4603      	mov	r3, r0
 801ced4:	4619      	mov	r1, r3
 801ced6:	4825      	ldr	r0, [pc, #148]	@ (801cf6c <systemSettingLog+0xe4>)
 801ced8:	f7ff fc1e 	bl	801c718 <lc_print>
#endif


  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	4a24      	ldr	r2, [pc, #144]	@ (801cf70 <systemSettingLog+0xe8>)
 801cee0:	fb82 1203 	smull	r1, r2, r2, r3
 801cee4:	1492      	asrs	r2, r2, #18
 801cee6:	17db      	asrs	r3, r3, #31
 801cee8:	1ad3      	subs	r3, r2, r3
 801ceea:	4619      	mov	r1, r3
 801ceec:	4821      	ldr	r0, [pc, #132]	@ (801cf74 <systemSettingLog+0xec>)
 801ceee:	f7ff fc13 	bl	801c718 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 801cef2:	68bb      	ldr	r3, [r7, #8]
 801cef4:	4a1e      	ldr	r2, [pc, #120]	@ (801cf70 <systemSettingLog+0xe8>)
 801cef6:	fb82 1203 	smull	r1, r2, r2, r3
 801cefa:	1492      	asrs	r2, r2, #18
 801cefc:	17db      	asrs	r3, r3, #31
 801cefe:	1ad3      	subs	r3, r2, r3
 801cf00:	4619      	mov	r1, r3
 801cf02:	481d      	ldr	r0, [pc, #116]	@ (801cf78 <systemSettingLog+0xf0>)
 801cf04:	f7ff fc08 	bl	801c718 <lc_print>
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

#if defined(STM32H7) || defined(STM32H7RS)
  uint32_t acr = FLASH->ACR;
 801cf08:	4b1c      	ldr	r3, [pc, #112]	@ (801cf7c <systemSettingLog+0xf4>)
 801cf0a:	681b      	ldr	r3, [r3, #0]
 801cf0c:	61fb      	str	r3, [r7, #28]
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
 801cf0e:	69f9      	ldr	r1, [r7, #28]
 801cf10:	69fb      	ldr	r3, [r7, #28]
 801cf12:	f003 030f 	and.w	r3, r3, #15
 801cf16:	461a      	mov	r2, r3
 801cf18:	4819      	ldr	r0, [pc, #100]	@ (801cf80 <systemSettingLog+0xf8>)
 801cf1a:	f7ff fbfd 	bl	801c718 <lc_print>
      (int)acr,
      (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
#if !defined(CORE_CM4)
  uint32_t ccr = SCB->CCR;
 801cf1e:	4b19      	ldr	r3, [pc, #100]	@ (801cf84 <systemSettingLog+0xfc>)
 801cf20:	695b      	ldr	r3, [r3, #20]
 801cf22:	61bb      	str	r3, [r7, #24]
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 801cf24:	69bb      	ldr	r3, [r7, #24]
 801cf26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cf2a:	4618      	mov	r0, r3
 801cf2c:	f7ff ff3c 	bl	801cda8 <bitToStr>
 801cf30:	4604      	mov	r4, r0
 801cf32:	69bb      	ldr	r3, [r7, #24]
 801cf34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801cf38:	4618      	mov	r0, r3
 801cf3a:	f7ff ff35 	bl	801cda8 <bitToStr>
 801cf3e:	4603      	mov	r3, r0
 801cf40:	461a      	mov	r2, r3
 801cf42:	4621      	mov	r1, r4
 801cf44:	4810      	ldr	r0, [pc, #64]	@ (801cf88 <systemSettingLog+0x100>)
 801cf46:	f7ff fbe7 	bl	801c718 <lc_print>
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(sys_conf.conf & MCONF_CORE_ICACHE),
      bitToStr(sys_conf.conf & MCONF_CORE_DCACHE));
#endif

}
 801cf4a:	bf00      	nop
 801cf4c:	3724      	adds	r7, #36	@ 0x24
 801cf4e:	46bd      	mov	sp, r7
 801cf50:	bd90      	pop	{r4, r7, pc}
 801cf52:	bf00      	nop
 801cf54:	08037bd0 	.word	0x08037bd0
 801cf58:	08037bf0 	.word	0x08037bf0
 801cf5c:	08037c10 	.word	0x08037c10
 801cf60:	08037c44 	.word	0x08037c44
 801cf64:	08037c4c 	.word	0x08037c4c
 801cf68:	08037c54 	.word	0x08037c54
 801cf6c:	08037c74 	.word	0x08037c74
 801cf70:	431bde83 	.word	0x431bde83
 801cf74:	08037c90 	.word	0x08037c90
 801cf78:	08037cac 	.word	0x08037cac
 801cf7c:	52002000 	.word	0x52002000
 801cf80:	08037cc8 	.word	0x08037cc8
 801cf84:	e000ed00 	.word	0xe000ed00
 801cf88:	08037cf4 	.word	0x08037cf4

0801cf8c <_mon_alloc_reset>:

#include <stdlib.h>

#pragma GCC push_options
#pragma GCC optimize ("O0")
static inline void _mon_alloc_reset(void) {
 801cf8c:	b580      	push	{r7, lr}
 801cf8e:	af00      	add	r7, sp, #0
    memset((void *)&io_malloc, 0, sizeof(struct io_malloc));
 801cf90:	221c      	movs	r2, #28
 801cf92:	2100      	movs	r1, #0
 801cf94:	4805      	ldr	r0, [pc, #20]	@ (801cfac <_mon_alloc_reset+0x20>)
 801cf96:	f016 ff7c 	bl	8033e92 <memset>
    /* force a call of wrap functions */\
    free(malloc(10));
 801cf9a:	200a      	movs	r0, #10
 801cf9c:	f7ff fc16 	bl	801c7cc <__wrap_malloc>
 801cfa0:	4603      	mov	r3, r0
 801cfa2:	4618      	mov	r0, r3
 801cfa4:	f7ff fc66 	bl	801c874 <__wrap_free>
}
 801cfa8:	bf00      	nop
 801cfaa:	bd80      	pop	{r7, pc}
 801cfac:	24031d20 	.word	0x24031d20

0801cfb0 <cyclesCounterInit>:
};

extern struct cyclesCount cyclesCount;

__STATIC_INLINE void cyclesCounterInit(void)
{
 801cfb0:	b5b0      	push	{r4, r5, r7, lr}
 801cfb2:	b086      	sub	sp, #24
 801cfb4:	af00      	add	r7, sp, #0
  cyclesCount.count_start = port_get_time_value();
#else /* USE_SYSTICK_ONLY */
  struct dwtTime t;
  uint32_t st;

  port_dwt_init();
 801cfb6:	f001 fd3d 	bl	801ea34 <port_dwt_init_imp>
  port_dwt_reset();
 801cfba:	4b1d      	ldr	r3, [pc, #116]	@ (801d030 <cyclesCounterInit+0x80>)
 801cfbc:	2200      	movs	r2, #0
 801cfbe:	605a      	str	r2, [r3, #4]
  port_hal_delay(100);
 801cfc0:	2064      	movs	r0, #100	@ 0x64
 801cfc2:	f7f4 fdf7 	bl	8011bb4 <HAL_Delay>
  st = port_dwt_get_cycles();
 801cfc6:	4b1a      	ldr	r3, [pc, #104]	@ (801d030 <cyclesCounterInit+0x80>)
 801cfc8:	685b      	ldr	r3, [r3, #4]
 801cfca:	617b      	str	r3, [r7, #20]
  dwtCyclesToTime(st/100, &t);
 801cfcc:	697b      	ldr	r3, [r7, #20]
 801cfce:	4a19      	ldr	r2, [pc, #100]	@ (801d034 <cyclesCounterInit+0x84>)
 801cfd0:	fba2 2303 	umull	r2, r3, r2, r3
 801cfd4:	095b      	lsrs	r3, r3, #5
 801cfd6:	2200      	movs	r2, #0
 801cfd8:	461c      	mov	r4, r3
 801cfda:	4615      	mov	r5, r2
 801cfdc:	1d3b      	adds	r3, r7, #4
 801cfde:	461a      	mov	r2, r3
 801cfe0:	4620      	mov	r0, r4
 801cfe2:	4629      	mov	r1, r5
 801cfe4:	f7ff fce0 	bl	801c9a8 <dwtCyclesToTime>

#if USE_CORE_CLOCK_ONLY == 1
  LC_PRINT(" Timestamp    : DWT only (delay(1)=%d.%03d ms)\r\n",
           t.s * 100 + t.ms, t.us);
#else /* USE_CORE_CLOCK_ONLY == 1 */
  LC_PRINT(" Timestamp    : SysTick + DWT (delay(1)=%d.%03d ms)\r\n",
 801cfe8:	68bb      	ldr	r3, [r7, #8]
 801cfea:	2264      	movs	r2, #100	@ 0x64
 801cfec:	fb03 f202 	mul.w	r2, r3, r2
 801cff0:	68fb      	ldr	r3, [r7, #12]
 801cff2:	4413      	add	r3, r2
 801cff4:	693a      	ldr	r2, [r7, #16]
 801cff6:	4619      	mov	r1, r3
 801cff8:	480f      	ldr	r0, [pc, #60]	@ (801d038 <cyclesCounterInit+0x88>)
 801cffa:	f7ff fb8d 	bl	801c718 <lc_print>
           t.s * 100 + t.ms, t.us);
  dwtCyclesToTime(UINT32_MAX, &t);
 801cffe:	1d3b      	adds	r3, r7, #4
 801d000:	461a      	mov	r2, r3
 801d002:	f04f 30ff 	mov.w	r0, #4294967295
 801d006:	f04f 0100 	mov.w	r1, #0
 801d00a:	f7ff fccd 	bl	801c9a8 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 801d00e:	68bb      	ldr	r3, [r7, #8]
 801d010:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801d014:	fb03 f202 	mul.w	r2, r3, r2
 801d018:	68fb      	ldr	r3, [r7, #12]
 801d01a:	4413      	add	r3, r2
 801d01c:	461a      	mov	r2, r3
 801d01e:	4b07      	ldr	r3, [pc, #28]	@ (801d03c <cyclesCounterInit+0x8c>)
 801d020:	601a      	str	r2, [r3, #0]
#endif /* !USE_CORE_CLOCK_ONLY != 1 */
  port_dwt_init();
 801d022:	f001 fd07 	bl	801ea34 <port_dwt_init_imp>
#endif /* !USE_SYSTICK_ONLY */
}
 801d026:	bf00      	nop
 801d028:	3718      	adds	r7, #24
 801d02a:	46bd      	mov	sp, r7
 801d02c:	bdb0      	pop	{r4, r5, r7, pc}
 801d02e:	bf00      	nop
 801d030:	e0001000 	.word	0xe0001000
 801d034:	51eb851f 	.word	0x51eb851f
 801d038:	08037d14 	.word	0x08037d14
 801d03c:	24031d5c 	.word	0x24031d5c

0801d040 <cyclesCounterStart>:

__STATIC_INLINE void cyclesCounterStart(void)
{
 801d040:	b580      	push	{r7, lr}
 801d042:	af00      	add	r7, sp, #0
#else
#if USE_CORE_CLOCK_ONLY == 1
  port_dwt_reset();
  cyclesCount.dwt_start = port_dwt_get_cycles();
#else
  cyclesCount.tick_start = port_hal_get_tick();
 801d044:	f7f4 fdaa 	bl	8011b9c <HAL_GetTick>
 801d048:	4603      	mov	r3, r0
 801d04a:	4a05      	ldr	r2, [pc, #20]	@ (801d060 <cyclesCounterStart+0x20>)
 801d04c:	6093      	str	r3, [r2, #8]
  port_dwt_reset();
 801d04e:	4b05      	ldr	r3, [pc, #20]	@ (801d064 <cyclesCounterStart+0x24>)
 801d050:	2200      	movs	r2, #0
 801d052:	605a      	str	r2, [r3, #4]
  cyclesCount.dwt_start = port_dwt_get_cycles();
 801d054:	4b03      	ldr	r3, [pc, #12]	@ (801d064 <cyclesCounterStart+0x24>)
 801d056:	685b      	ldr	r3, [r3, #4]
 801d058:	4a01      	ldr	r2, [pc, #4]	@ (801d060 <cyclesCounterStart+0x20>)
 801d05a:	6053      	str	r3, [r2, #4]
#endif
#endif
}
 801d05c:	bf00      	nop
 801d05e:	bd80      	pop	{r7, pc}
 801d060:	24031d5c 	.word	0x24031d5c
 801d064:	e0001000 	.word	0xe0001000

0801d068 <cyclesCounterEnd>:

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 801d068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d06c:	b08c      	sub	sp, #48	@ 0x30
 801d06e:	af00      	add	r7, sp, #0
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(port_dwt_get_cycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = port_dwt_get_cycles() - cyclesCount.dwt_start;
 801d070:	4b30      	ldr	r3, [pc, #192]	@ (801d134 <cyclesCounterEnd+0xcc>)
 801d072:	685a      	ldr	r2, [r3, #4]
 801d074:	4b30      	ldr	r3, [pc, #192]	@ (801d138 <cyclesCounterEnd+0xd0>)
 801d076:	685b      	ldr	r3, [r3, #4]
 801d078:	1ad3      	subs	r3, r2, r3
 801d07a:	2200      	movs	r2, #0
 801d07c:	4618      	mov	r0, r3
 801d07e:	4611      	mov	r1, r2
 801d080:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 801d084:	f7f4 fd8a 	bl	8011b9c <HAL_GetTick>
 801d088:	4602      	mov	r2, r0
 801d08a:	4b2b      	ldr	r3, [pc, #172]	@ (801d138 <cyclesCounterEnd+0xd0>)
 801d08c:	689b      	ldr	r3, [r3, #8]
 801d08e:	1ad3      	subs	r3, r2, r3
 801d090:	2200      	movs	r2, #0
 801d092:	613b      	str	r3, [r7, #16]
 801d094:	617a      	str	r2, [r7, #20]
 801d096:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801d09a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  if (tick_e > cyclesCount.dwt_max) {
 801d09e:	4b26      	ldr	r3, [pc, #152]	@ (801d138 <cyclesCounterEnd+0xd0>)
 801d0a0:	681b      	ldr	r3, [r3, #0]
 801d0a2:	2200      	movs	r2, #0
 801d0a4:	461c      	mov	r4, r3
 801d0a6:	4615      	mov	r5, r2
 801d0a8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d0ac:	4294      	cmp	r4, r2
 801d0ae:	eb75 0303 	sbcs.w	r3, r5, r3
 801d0b2:	d236      	bcs.n	801d122 <cyclesCounterEnd+0xba>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 801d0b4:	4b20      	ldr	r3, [pc, #128]	@ (801d138 <cyclesCounterEnd+0xd0>)
 801d0b6:	681b      	ldr	r3, [r3, #0]
 801d0b8:	2200      	movs	r2, #0
 801d0ba:	61bb      	str	r3, [r7, #24]
 801d0bc:	61fa      	str	r2, [r7, #28]
 801d0be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801d0c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801d0c6:	f7f3 fadd 	bl	8010684 <__aeabi_uldivmod>
 801d0ca:	4602      	mov	r2, r0
 801d0cc:	460b      	mov	r3, r1
 801d0ce:	4610      	mov	r0, r2
 801d0d0:	4619      	mov	r1, r3
 801d0d2:	4602      	mov	r2, r0
 801d0d4:	460b      	mov	r3, r1
 801d0d6:	f04f 0400 	mov.w	r4, #0
 801d0da:	f04f 0500 	mov.w	r5, #0
 801d0de:	07dd      	lsls	r5, r3, #31
 801d0e0:	ea45 0552 	orr.w	r5, r5, r2, lsr #1
 801d0e4:	07d4      	lsls	r4, r2, #31
 801d0e6:	4622      	mov	r2, r4
 801d0e8:	462b      	mov	r3, r5
 801d0ea:	ebb2 0800 	subs.w	r8, r2, r0
 801d0ee:	eb63 0901 	sbc.w	r9, r3, r1
 801d0f2:	eb18 0308 	adds.w	r3, r8, r8
 801d0f6:	60bb      	str	r3, [r7, #8]
 801d0f8:	eb49 0309 	adc.w	r3, r9, r9
 801d0fc:	60fb      	str	r3, [r7, #12]
 801d0fe:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 801d102:	eb18 0a00 	adds.w	sl, r8, r0
 801d106:	eb49 0b01 	adc.w	fp, r9, r1
 801d10a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801d10e:	eb12 010a 	adds.w	r1, r2, sl
 801d112:	6039      	str	r1, [r7, #0]
 801d114:	eb43 030b 	adc.w	r3, r3, fp
 801d118:	607b      	str	r3, [r7, #4]
 801d11a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801d11e:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
  }
  return dwt_e;
 801d122:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
#endif
#endif
}
 801d126:	4610      	mov	r0, r2
 801d128:	4619      	mov	r1, r3
 801d12a:	3730      	adds	r7, #48	@ 0x30
 801d12c:	46bd      	mov	sp, r7
 801d12e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d132:	bf00      	nop
 801d134:	e0001000 	.word	0xe0001000
 801d138:	24031d5c 	.word	0x24031d5c

0801d13c <_get_buffer_size>:
 * Helper functions
 * -----------------------------------------------------------------------------
 */

static size_t _get_buffer_size(const ai_buffer* buffer)
{
 801d13c:	b580      	push	{r7, lr}
 801d13e:	b084      	sub	sp, #16
 801d140:	af00      	add	r7, sp, #0
 801d142:	6078      	str	r0, [r7, #4]
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 801d144:	687b      	ldr	r3, [r7, #4]
 801d146:	699b      	ldr	r3, [r3, #24]
 801d148:	681b      	ldr	r3, [r3, #0]
 801d14a:	60fb      	str	r3, [r7, #12]
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 801d14c:	2101      	movs	r1, #1
 801d14e:	6878      	ldr	r0, [r7, #4]
 801d150:	f005 fd12 	bl	8022b78 <ai_buffer_get_size>
 801d154:	4602      	mov	r2, r0
 801d156:	68fb      	ldr	r3, [r7, #12]
 801d158:	fb03 f202 	mul.w	r2, r3, r2
 801d15c:	687b      	ldr	r3, [r7, #4]
 801d15e:	681b      	ldr	r3, [r3, #0]
 801d160:	4619      	mov	r1, r3
 801d162:	4610      	mov	r0, r2
 801d164:	f005 fd3c 	bl	8022be0 <ai_buffer_get_byte_size>
 801d168:	4603      	mov	r3, r0
}
 801d16a:	4618      	mov	r0, r3
 801d16c:	3710      	adds	r7, #16
 801d16e:	46bd      	mov	sp, r7
 801d170:	bd80      	pop	{r7, pc}

0801d172 <_get_buffer_element_size>:

static size_t _get_buffer_element_size(const ai_buffer* buffer)
{
 801d172:	b580      	push	{r7, lr}
 801d174:	b084      	sub	sp, #16
 801d176:	af00      	add	r7, sp, #0
 801d178:	6078      	str	r0, [r7, #4]
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 801d17a:	687b      	ldr	r3, [r7, #4]
 801d17c:	699b      	ldr	r3, [r3, #24]
 801d17e:	681b      	ldr	r3, [r3, #0]
 801d180:	60fb      	str	r3, [r7, #12]
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 801d182:	2101      	movs	r1, #1
 801d184:	6878      	ldr	r0, [r7, #4]
 801d186:	f005 fcf7 	bl	8022b78 <ai_buffer_get_size>
 801d18a:	4602      	mov	r2, r0
 801d18c:	68fb      	ldr	r3, [r7, #12]
 801d18e:	fb02 f303 	mul.w	r3, r2, r3
}
 801d192:	4618      	mov	r0, r3
 801d194:	3710      	adds	r7, #16
 801d196:	46bd      	mov	sp, r7
 801d198:	bd80      	pop	{r7, pc}
	...

0801d19c <_get_element_size>:

static size_t _get_element_size(const ai_buffer* buffer)
{
 801d19c:	b580      	push	{r7, lr}
 801d19e:	b084      	sub	sp, #16
 801d1a0:	af00      	add	r7, sp, #0
 801d1a2:	6078      	str	r0, [r7, #4]
  const ai_bool is_binary = (AI_BUFFER_FMT_SAME(AI_BUFFER_FORMAT(buffer), AI_BUFFER_FORMAT_S1) ||
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	681b      	ldr	r3, [r3, #0]
 801d1a8:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 801d1ac:	4a11      	ldr	r2, [pc, #68]	@ (801d1f4 <_get_element_size+0x58>)
 801d1ae:	4293      	cmp	r3, r2
 801d1b0:	d006      	beq.n	801d1c0 <_get_element_size+0x24>
      AI_BUFFER_FMT_SAME(AI_BUFFER_FORMAT(buffer), AI_BUFFER_FORMAT_U1));
 801d1b2:	687b      	ldr	r3, [r7, #4]
 801d1b4:	681b      	ldr	r3, [r3, #0]
 801d1b6:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
  const ai_bool is_binary = (AI_BUFFER_FMT_SAME(AI_BUFFER_FORMAT(buffer), AI_BUFFER_FORMAT_S1) ||
 801d1ba:	4a0f      	ldr	r2, [pc, #60]	@ (801d1f8 <_get_element_size+0x5c>)
 801d1bc:	4293      	cmp	r3, r2
 801d1be:	d101      	bne.n	801d1c4 <_get_element_size+0x28>
 801d1c0:	2301      	movs	r3, #1
 801d1c2:	e000      	b.n	801d1c6 <_get_element_size+0x2a>
 801d1c4:	2300      	movs	r3, #0
 801d1c6:	73fb      	strb	r3, [r7, #15]
 801d1c8:	7bfb      	ldrb	r3, [r7, #15]
 801d1ca:	f003 0301 	and.w	r3, r3, #1
 801d1ce:	73fb      	strb	r3, [r7, #15]
  if (is_binary)
 801d1d0:	7bfb      	ldrb	r3, [r7, #15]
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d001      	beq.n	801d1da <_get_element_size+0x3e>
    return 4;
 801d1d6:	2304      	movs	r3, #4
 801d1d8:	e007      	b.n	801d1ea <_get_element_size+0x4e>

  return (size_t)AI_BUFFER_BYTE_SIZE(1, buffer->format);
 801d1da:	687b      	ldr	r3, [r7, #4]
 801d1dc:	681b      	ldr	r3, [r3, #0]
 801d1de:	4619      	mov	r1, r3
 801d1e0:	2001      	movs	r0, #1
 801d1e2:	f005 fcfd 	bl	8022be0 <ai_buffer_get_byte_size>
 801d1e6:	4603      	mov	r3, r0
 801d1e8:	bf00      	nop
}
 801d1ea:	4618      	mov	r0, r3
 801d1ec:	3710      	adds	r7, #16
 801d1ee:	46bd      	mov	sp, r7
 801d1f0:	bd80      	pop	{r7, pc}
 801d1f2:	bf00      	nop
 801d1f4:	008400c0 	.word	0x008400c0
 801d1f8:	000400c0 	.word	0x000400c0

0801d1fc <_ai_version_to_uint32>:

static uint32_t _ai_version_to_uint32(const ai_platform_version *version)
{
 801d1fc:	b480      	push	{r7}
 801d1fe:	b083      	sub	sp, #12
 801d200:	af00      	add	r7, sp, #0
 801d202:	6078      	str	r0, [r7, #4]
  return version->major << 24 | version->minor << 16 | version->micro << 8 | version->reserved;
 801d204:	687b      	ldr	r3, [r7, #4]
 801d206:	781b      	ldrb	r3, [r3, #0]
 801d208:	061a      	lsls	r2, r3, #24
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	785b      	ldrb	r3, [r3, #1]
 801d20e:	041b      	lsls	r3, r3, #16
 801d210:	431a      	orrs	r2, r3
 801d212:	687b      	ldr	r3, [r7, #4]
 801d214:	789b      	ldrb	r3, [r3, #2]
 801d216:	021b      	lsls	r3, r3, #8
 801d218:	4313      	orrs	r3, r2
 801d21a:	687a      	ldr	r2, [r7, #4]
 801d21c:	78d2      	ldrb	r2, [r2, #3]
 801d21e:	4313      	orrs	r3, r2
}
 801d220:	4618      	mov	r0, r3
 801d222:	370c      	adds	r7, #12
 801d224:	46bd      	mov	sp, r7
 801d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d22a:	4770      	bx	lr

0801d22c <_shape_to_n_dims>:
};

/* ---- Protobuf IO port adaptations ---- */

static uint32_t _shape_to_n_dims(const ai_buffer* buff)
{
 801d22c:	b480      	push	{r7}
 801d22e:	b085      	sub	sp, #20
 801d230:	af00      	add	r7, sp, #0
 801d232:	6078      	str	r0, [r7, #4]
  uint32_t n_dims;
  uint8_t shape_fmt;
  if (buff->shape.type == AI_SHAPE_BCWH)
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	7d1b      	ldrb	r3, [r3, #20]
 801d238:	2b01      	cmp	r3, #1
 801d23a:	d102      	bne.n	801d242 <_shape_to_n_dims+0x16>
    shape_fmt = EnumShapeFmt_F_SHAPE_FMT_BCWH;
 801d23c:	2301      	movs	r3, #1
 801d23e:	73fb      	strb	r3, [r7, #15]
 801d240:	e001      	b.n	801d246 <_shape_to_n_dims+0x1a>
  else
    shape_fmt = EnumShapeFmt_F_SHAPE_FMT_UND;
 801d242:	2300      	movs	r3, #0
 801d244:	73fb      	strb	r3, [r7, #15]
  n_dims = shape_fmt << EnumShapeFmt_F_SHAPE_FMT_POS | buff->shape.size;
 801d246:	7bfb      	ldrb	r3, [r7, #15]
 801d248:	061b      	lsls	r3, r3, #24
 801d24a:	687a      	ldr	r2, [r7, #4]
 801d24c:	6952      	ldr	r2, [r2, #20]
 801d24e:	f3c2 2217 	ubfx	r2, r2, #8, #24
 801d252:	4313      	orrs	r3, r2
 801d254:	60bb      	str	r3, [r7, #8]
  return n_dims;
 801d256:	68bb      	ldr	r3, [r7, #8]
}
 801d258:	4618      	mov	r0, r3
 801d25a:	3714      	adds	r7, #20
 801d25c:	46bd      	mov	sp, r7
 801d25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d262:	4770      	bx	lr

0801d264 <fill_tensor_desc_msg>:
                                 struct _encode_uint32 *array_u32,
                                 uint32_t flags,
                                 float scale,
                                 int32_t zero_point
                                 )
{
 801d264:	b580      	push	{r7, lr}
 801d266:	b088      	sub	sp, #32
 801d268:	af00      	add	r7, sp, #0
 801d26a:	6178      	str	r0, [r7, #20]
 801d26c:	6139      	str	r1, [r7, #16]
 801d26e:	60fa      	str	r2, [r7, #12]
 801d270:	60bb      	str	r3, [r7, #8]
 801d272:	ed87 0a01 	vstr	s0, [r7, #4]
  array_u32->size = buff->shape.size;
 801d276:	697b      	ldr	r3, [r7, #20]
 801d278:	695b      	ldr	r3, [r3, #20]
 801d27a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801d27e:	461a      	mov	r2, r3
 801d280:	68fb      	ldr	r3, [r7, #12]
 801d282:	601a      	str	r2, [r3, #0]
  array_u32->data = (uint32_t *)buff->shape.data;
 801d284:	697b      	ldr	r3, [r7, #20]
 801d286:	699a      	ldr	r2, [r3, #24]
 801d288:	68fb      	ldr	r3, [r7, #12]
 801d28a:	605a      	str	r2, [r3, #4]
  array_u32->offset = sizeof(buff->shape.data[0]);
 801d28c:	68fb      	ldr	r3, [r7, #12]
 801d28e:	2204      	movs	r2, #4
 801d290:	609a      	str	r2, [r3, #8]

  msg->name[0] = 0;
 801d292:	693b      	ldr	r3, [r7, #16]
 801d294:	2200      	movs	r2, #0
 801d296:	701a      	strb	r2, [r3, #0]
  msg->format = (uint32_t)buff->format;
 801d298:	697b      	ldr	r3, [r7, #20]
 801d29a:	681b      	ldr	r3, [r3, #0]
 801d29c:	461a      	mov	r2, r3
 801d29e:	693b      	ldr	r3, [r7, #16]
 801d2a0:	641a      	str	r2, [r3, #64]	@ 0x40
  msg->flags = flags;
 801d2a2:	693b      	ldr	r3, [r7, #16]
 801d2a4:	68ba      	ldr	r2, [r7, #8]
 801d2a6:	661a      	str	r2, [r3, #96]	@ 0x60

  msg->n_dims = _shape_to_n_dims(buff);
 801d2a8:	6978      	ldr	r0, [r7, #20]
 801d2aa:	f7ff ffbf 	bl	801d22c <_shape_to_n_dims>
 801d2ae:	4602      	mov	r2, r0
 801d2b0:	693b      	ldr	r3, [r7, #16]
 801d2b2:	649a      	str	r2, [r3, #72]	@ 0x48

  msg->size = _get_buffer_element_size(buff);
 801d2b4:	6978      	ldr	r0, [r7, #20]
 801d2b6:	f7ff ff5c 	bl	801d172 <_get_buffer_element_size>
 801d2ba:	4602      	mov	r2, r0
 801d2bc:	693b      	ldr	r3, [r7, #16]
 801d2be:	645a      	str	r2, [r3, #68]	@ 0x44

  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buff);
 801d2c0:	697b      	ldr	r3, [r7, #20]
 801d2c2:	689b      	ldr	r3, [r3, #8]
 801d2c4:	61fb      	str	r3, [r7, #28]

  msg->scale = scale;
 801d2c6:	693b      	ldr	r3, [r7, #16]
 801d2c8:	687a      	ldr	r2, [r7, #4]
 801d2ca:	655a      	str	r2, [r3, #84]	@ 0x54
  msg->zeropoint = zero_point;
 801d2cc:	693b      	ldr	r3, [r7, #16]
 801d2ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d2d0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (AI_BUFFER_META_INFO_INTQ(meta_info)) {
 801d2d2:	69fb      	ldr	r3, [r7, #28]
 801d2d4:	2b00      	cmp	r3, #0
 801d2d6:	f000 8111 	beq.w	801d4fc <fill_tensor_desc_msg+0x298>
 801d2da:	69fb      	ldr	r3, [r7, #28]
 801d2dc:	681b      	ldr	r3, [r3, #0]
 801d2de:	f003 0301 	and.w	r3, r3, #1
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	f000 810a 	beq.w	801d4fc <fill_tensor_desc_msg+0x298>
 801d2e8:	69fb      	ldr	r3, [r7, #28]
 801d2ea:	685b      	ldr	r3, [r3, #4]
 801d2ec:	2b00      	cmp	r3, #0
 801d2ee:	f000 8105 	beq.w	801d4fc <fill_tensor_desc_msg+0x298>
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 801d2f2:	69fb      	ldr	r3, [r7, #28]
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	d04a      	beq.n	801d38e <fill_tensor_desc_msg+0x12a>
 801d2f8:	69fb      	ldr	r3, [r7, #28]
 801d2fa:	681b      	ldr	r3, [r3, #0]
 801d2fc:	f003 0301 	and.w	r3, r3, #1
 801d300:	2b00      	cmp	r3, #0
 801d302:	d044      	beq.n	801d38e <fill_tensor_desc_msg+0x12a>
 801d304:	69fb      	ldr	r3, [r7, #28]
 801d306:	685b      	ldr	r3, [r3, #4]
 801d308:	2b00      	cmp	r3, #0
 801d30a:	d040      	beq.n	801d38e <fill_tensor_desc_msg+0x12a>
 801d30c:	69fb      	ldr	r3, [r7, #28]
 801d30e:	2b00      	cmp	r3, #0
 801d310:	d03a      	beq.n	801d388 <fill_tensor_desc_msg+0x124>
 801d312:	69fb      	ldr	r3, [r7, #28]
 801d314:	681b      	ldr	r3, [r3, #0]
 801d316:	f003 0301 	and.w	r3, r3, #1
 801d31a:	2b00      	cmp	r3, #0
 801d31c:	d034      	beq.n	801d388 <fill_tensor_desc_msg+0x124>
 801d31e:	69fb      	ldr	r3, [r7, #28]
 801d320:	685b      	ldr	r3, [r3, #4]
 801d322:	2b00      	cmp	r3, #0
 801d324:	d030      	beq.n	801d388 <fill_tensor_desc_msg+0x124>
 801d326:	69fb      	ldr	r3, [r7, #28]
 801d328:	2b00      	cmp	r3, #0
 801d32a:	d008      	beq.n	801d33e <fill_tensor_desc_msg+0xda>
 801d32c:	69fb      	ldr	r3, [r7, #28]
 801d32e:	681b      	ldr	r3, [r3, #0]
 801d330:	f003 0301 	and.w	r3, r3, #1
 801d334:	2b00      	cmp	r3, #0
 801d336:	d002      	beq.n	801d33e <fill_tensor_desc_msg+0xda>
 801d338:	69fb      	ldr	r3, [r7, #28]
 801d33a:	685b      	ldr	r3, [r3, #4]
 801d33c:	e000      	b.n	801d340 <fill_tensor_desc_msg+0xdc>
 801d33e:	2300      	movs	r3, #0
 801d340:	685b      	ldr	r3, [r3, #4]
 801d342:	2b00      	cmp	r3, #0
 801d344:	d020      	beq.n	801d388 <fill_tensor_desc_msg+0x124>
 801d346:	69fb      	ldr	r3, [r7, #28]
 801d348:	2b00      	cmp	r3, #0
 801d34a:	d008      	beq.n	801d35e <fill_tensor_desc_msg+0xfa>
 801d34c:	69fb      	ldr	r3, [r7, #28]
 801d34e:	681b      	ldr	r3, [r3, #0]
 801d350:	f003 0301 	and.w	r3, r3, #1
 801d354:	2b00      	cmp	r3, #0
 801d356:	d002      	beq.n	801d35e <fill_tensor_desc_msg+0xfa>
 801d358:	69fb      	ldr	r3, [r7, #28]
 801d35a:	685b      	ldr	r3, [r3, #4]
 801d35c:	e000      	b.n	801d360 <fill_tensor_desc_msg+0xfc>
 801d35e:	2300      	movs	r3, #0
 801d360:	885b      	ldrh	r3, [r3, #2]
 801d362:	2b00      	cmp	r3, #0
 801d364:	d010      	beq.n	801d388 <fill_tensor_desc_msg+0x124>
 801d366:	69fb      	ldr	r3, [r7, #28]
 801d368:	2b00      	cmp	r3, #0
 801d36a:	d008      	beq.n	801d37e <fill_tensor_desc_msg+0x11a>
 801d36c:	69fb      	ldr	r3, [r7, #28]
 801d36e:	681b      	ldr	r3, [r3, #0]
 801d370:	f003 0301 	and.w	r3, r3, #1
 801d374:	2b00      	cmp	r3, #0
 801d376:	d002      	beq.n	801d37e <fill_tensor_desc_msg+0x11a>
 801d378:	69fb      	ldr	r3, [r7, #28]
 801d37a:	685b      	ldr	r3, [r3, #4]
 801d37c:	e000      	b.n	801d380 <fill_tensor_desc_msg+0x11c>
 801d37e:	2300      	movs	r3, #0
 801d380:	685b      	ldr	r3, [r3, #4]
 801d382:	681b      	ldr	r3, [r3, #0]
 801d384:	681b      	ldr	r3, [r3, #0]
 801d386:	e004      	b.n	801d392 <fill_tensor_desc_msg+0x12e>
 801d388:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801d38c:	e001      	b.n	801d392 <fill_tensor_desc_msg+0x12e>
 801d38e:	f04f 0300 	mov.w	r3, #0
 801d392:	693a      	ldr	r2, [r7, #16]
 801d394:	6553      	str	r3, [r2, #84]	@ 0x54
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 801d396:	69fb      	ldr	r3, [r7, #28]
 801d398:	2b00      	cmp	r3, #0
 801d39a:	f000 80ac 	beq.w	801d4f6 <fill_tensor_desc_msg+0x292>
 801d39e:	69fb      	ldr	r3, [r7, #28]
 801d3a0:	681b      	ldr	r3, [r3, #0]
 801d3a2:	f003 0301 	and.w	r3, r3, #1
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	f000 80a5 	beq.w	801d4f6 <fill_tensor_desc_msg+0x292>
 801d3ac:	69fb      	ldr	r3, [r7, #28]
 801d3ae:	685b      	ldr	r3, [r3, #4]
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	f000 80a0 	beq.w	801d4f6 <fill_tensor_desc_msg+0x292>
 801d3b6:	69fb      	ldr	r3, [r7, #28]
 801d3b8:	2b00      	cmp	r3, #0
 801d3ba:	d05b      	beq.n	801d474 <fill_tensor_desc_msg+0x210>
 801d3bc:	69fb      	ldr	r3, [r7, #28]
 801d3be:	681b      	ldr	r3, [r3, #0]
 801d3c0:	f003 0301 	and.w	r3, r3, #1
 801d3c4:	2b00      	cmp	r3, #0
 801d3c6:	d055      	beq.n	801d474 <fill_tensor_desc_msg+0x210>
 801d3c8:	69fb      	ldr	r3, [r7, #28]
 801d3ca:	685b      	ldr	r3, [r3, #4]
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	d051      	beq.n	801d474 <fill_tensor_desc_msg+0x210>
 801d3d0:	69fb      	ldr	r3, [r7, #28]
 801d3d2:	2b00      	cmp	r3, #0
 801d3d4:	d008      	beq.n	801d3e8 <fill_tensor_desc_msg+0x184>
 801d3d6:	69fb      	ldr	r3, [r7, #28]
 801d3d8:	681b      	ldr	r3, [r3, #0]
 801d3da:	f003 0301 	and.w	r3, r3, #1
 801d3de:	2b00      	cmp	r3, #0
 801d3e0:	d002      	beq.n	801d3e8 <fill_tensor_desc_msg+0x184>
 801d3e2:	69fb      	ldr	r3, [r7, #28]
 801d3e4:	685b      	ldr	r3, [r3, #4]
 801d3e6:	e000      	b.n	801d3ea <fill_tensor_desc_msg+0x186>
 801d3e8:	2300      	movs	r3, #0
 801d3ea:	881b      	ldrh	r3, [r3, #0]
 801d3ec:	f003 0302 	and.w	r3, r3, #2
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	d03f      	beq.n	801d474 <fill_tensor_desc_msg+0x210>
 801d3f4:	69fb      	ldr	r3, [r7, #28]
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	d03a      	beq.n	801d470 <fill_tensor_desc_msg+0x20c>
 801d3fa:	69fb      	ldr	r3, [r7, #28]
 801d3fc:	681b      	ldr	r3, [r3, #0]
 801d3fe:	f003 0301 	and.w	r3, r3, #1
 801d402:	2b00      	cmp	r3, #0
 801d404:	d034      	beq.n	801d470 <fill_tensor_desc_msg+0x20c>
 801d406:	69fb      	ldr	r3, [r7, #28]
 801d408:	685b      	ldr	r3, [r3, #4]
 801d40a:	2b00      	cmp	r3, #0
 801d40c:	d030      	beq.n	801d470 <fill_tensor_desc_msg+0x20c>
 801d40e:	69fb      	ldr	r3, [r7, #28]
 801d410:	2b00      	cmp	r3, #0
 801d412:	d008      	beq.n	801d426 <fill_tensor_desc_msg+0x1c2>
 801d414:	69fb      	ldr	r3, [r7, #28]
 801d416:	681b      	ldr	r3, [r3, #0]
 801d418:	f003 0301 	and.w	r3, r3, #1
 801d41c:	2b00      	cmp	r3, #0
 801d41e:	d002      	beq.n	801d426 <fill_tensor_desc_msg+0x1c2>
 801d420:	69fb      	ldr	r3, [r7, #28]
 801d422:	685b      	ldr	r3, [r3, #4]
 801d424:	e000      	b.n	801d428 <fill_tensor_desc_msg+0x1c4>
 801d426:	2300      	movs	r3, #0
 801d428:	685b      	ldr	r3, [r3, #4]
 801d42a:	2b00      	cmp	r3, #0
 801d42c:	d020      	beq.n	801d470 <fill_tensor_desc_msg+0x20c>
 801d42e:	69fb      	ldr	r3, [r7, #28]
 801d430:	2b00      	cmp	r3, #0
 801d432:	d008      	beq.n	801d446 <fill_tensor_desc_msg+0x1e2>
 801d434:	69fb      	ldr	r3, [r7, #28]
 801d436:	681b      	ldr	r3, [r3, #0]
 801d438:	f003 0301 	and.w	r3, r3, #1
 801d43c:	2b00      	cmp	r3, #0
 801d43e:	d002      	beq.n	801d446 <fill_tensor_desc_msg+0x1e2>
 801d440:	69fb      	ldr	r3, [r7, #28]
 801d442:	685b      	ldr	r3, [r3, #4]
 801d444:	e000      	b.n	801d448 <fill_tensor_desc_msg+0x1e4>
 801d446:	2300      	movs	r3, #0
 801d448:	885b      	ldrh	r3, [r3, #2]
 801d44a:	2b00      	cmp	r3, #0
 801d44c:	d010      	beq.n	801d470 <fill_tensor_desc_msg+0x20c>
 801d44e:	69fb      	ldr	r3, [r7, #28]
 801d450:	2b00      	cmp	r3, #0
 801d452:	d008      	beq.n	801d466 <fill_tensor_desc_msg+0x202>
 801d454:	69fb      	ldr	r3, [r7, #28]
 801d456:	681b      	ldr	r3, [r3, #0]
 801d458:	f003 0301 	and.w	r3, r3, #1
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	d002      	beq.n	801d466 <fill_tensor_desc_msg+0x202>
 801d460:	69fb      	ldr	r3, [r7, #28]
 801d462:	685b      	ldr	r3, [r3, #4]
 801d464:	e000      	b.n	801d468 <fill_tensor_desc_msg+0x204>
 801d466:	2300      	movs	r3, #0
 801d468:	685b      	ldr	r3, [r3, #4]
 801d46a:	685b      	ldr	r3, [r3, #4]
 801d46c:	781b      	ldrb	r3, [r3, #0]
 801d46e:	e043      	b.n	801d4f8 <fill_tensor_desc_msg+0x294>
 801d470:	2300      	movs	r3, #0
 801d472:	e041      	b.n	801d4f8 <fill_tensor_desc_msg+0x294>
 801d474:	69fb      	ldr	r3, [r7, #28]
 801d476:	2b00      	cmp	r3, #0
 801d478:	d03b      	beq.n	801d4f2 <fill_tensor_desc_msg+0x28e>
 801d47a:	69fb      	ldr	r3, [r7, #28]
 801d47c:	681b      	ldr	r3, [r3, #0]
 801d47e:	f003 0301 	and.w	r3, r3, #1
 801d482:	2b00      	cmp	r3, #0
 801d484:	d035      	beq.n	801d4f2 <fill_tensor_desc_msg+0x28e>
 801d486:	69fb      	ldr	r3, [r7, #28]
 801d488:	685b      	ldr	r3, [r3, #4]
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	d031      	beq.n	801d4f2 <fill_tensor_desc_msg+0x28e>
 801d48e:	69fb      	ldr	r3, [r7, #28]
 801d490:	2b00      	cmp	r3, #0
 801d492:	d008      	beq.n	801d4a6 <fill_tensor_desc_msg+0x242>
 801d494:	69fb      	ldr	r3, [r7, #28]
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	f003 0301 	and.w	r3, r3, #1
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	d002      	beq.n	801d4a6 <fill_tensor_desc_msg+0x242>
 801d4a0:	69fb      	ldr	r3, [r7, #28]
 801d4a2:	685b      	ldr	r3, [r3, #4]
 801d4a4:	e000      	b.n	801d4a8 <fill_tensor_desc_msg+0x244>
 801d4a6:	2300      	movs	r3, #0
 801d4a8:	685b      	ldr	r3, [r3, #4]
 801d4aa:	2b00      	cmp	r3, #0
 801d4ac:	d021      	beq.n	801d4f2 <fill_tensor_desc_msg+0x28e>
 801d4ae:	69fb      	ldr	r3, [r7, #28]
 801d4b0:	2b00      	cmp	r3, #0
 801d4b2:	d008      	beq.n	801d4c6 <fill_tensor_desc_msg+0x262>
 801d4b4:	69fb      	ldr	r3, [r7, #28]
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	f003 0301 	and.w	r3, r3, #1
 801d4bc:	2b00      	cmp	r3, #0
 801d4be:	d002      	beq.n	801d4c6 <fill_tensor_desc_msg+0x262>
 801d4c0:	69fb      	ldr	r3, [r7, #28]
 801d4c2:	685b      	ldr	r3, [r3, #4]
 801d4c4:	e000      	b.n	801d4c8 <fill_tensor_desc_msg+0x264>
 801d4c6:	2300      	movs	r3, #0
 801d4c8:	885b      	ldrh	r3, [r3, #2]
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	d011      	beq.n	801d4f2 <fill_tensor_desc_msg+0x28e>
 801d4ce:	69fb      	ldr	r3, [r7, #28]
 801d4d0:	2b00      	cmp	r3, #0
 801d4d2:	d008      	beq.n	801d4e6 <fill_tensor_desc_msg+0x282>
 801d4d4:	69fb      	ldr	r3, [r7, #28]
 801d4d6:	681b      	ldr	r3, [r3, #0]
 801d4d8:	f003 0301 	and.w	r3, r3, #1
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	d002      	beq.n	801d4e6 <fill_tensor_desc_msg+0x282>
 801d4e0:	69fb      	ldr	r3, [r7, #28]
 801d4e2:	685b      	ldr	r3, [r3, #4]
 801d4e4:	e000      	b.n	801d4e8 <fill_tensor_desc_msg+0x284>
 801d4e6:	2300      	movs	r3, #0
 801d4e8:	685b      	ldr	r3, [r3, #4]
 801d4ea:	685b      	ldr	r3, [r3, #4]
 801d4ec:	f993 3000 	ldrsb.w	r3, [r3]
 801d4f0:	e002      	b.n	801d4f8 <fill_tensor_desc_msg+0x294>
 801d4f2:	2300      	movs	r3, #0
 801d4f4:	e000      	b.n	801d4f8 <fill_tensor_desc_msg+0x294>
 801d4f6:	2300      	movs	r3, #0
 801d4f8:	693a      	ldr	r2, [r7, #16]
 801d4fa:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  msg->addr = (uint32_t)buff->data;
 801d4fc:	697b      	ldr	r3, [r7, #20]
 801d4fe:	685b      	ldr	r3, [r3, #4]
 801d500:	461a      	mov	r2, r3
 801d502:	693b      	ldr	r3, [r7, #16]
 801d504:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 801d506:	bf00      	nop
 801d508:	3720      	adds	r7, #32
 801d50a:	46bd      	mov	sp, r7
 801d50c:	bd80      	pop	{r7, pc}

0801d50e <encode_ai_buffer_to_tensor_desc>:

static void encode_ai_buffer_to_tensor_desc(size_t index, void* data, aiTensorDescMsg* msg,
    struct _encode_uint32 *array_u32)
{
 801d50e:	b580      	push	{r7, lr}
 801d510:	b088      	sub	sp, #32
 801d512:	af02      	add	r7, sp, #8
 801d514:	60f8      	str	r0, [r7, #12]
 801d516:	60b9      	str	r1, [r7, #8]
 801d518:	607a      	str	r2, [r7, #4]
 801d51a:	603b      	str	r3, [r7, #0]
  struct _data_tensor_desc *info = (struct _data_tensor_desc *)data;
 801d51c:	68bb      	ldr	r3, [r7, #8]
 801d51e:	617b      	str	r3, [r7, #20]
  ai_buffer *buff = &((ai_buffer *)(info->buffer))[index];
 801d520:	697b      	ldr	r3, [r7, #20]
 801d522:	6819      	ldr	r1, [r3, #0]
 801d524:	68fa      	ldr	r2, [r7, #12]
 801d526:	4613      	mov	r3, r2
 801d528:	00db      	lsls	r3, r3, #3
 801d52a:	1a9b      	subs	r3, r3, r2
 801d52c:	009b      	lsls	r3, r3, #2
 801d52e:	440b      	add	r3, r1
 801d530:	613b      	str	r3, [r7, #16]

  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 801d532:	697b      	ldr	r3, [r7, #20]
 801d534:	685a      	ldr	r2, [r3, #4]
 801d536:	697b      	ldr	r3, [r7, #20]
 801d538:	edd3 7a02 	vldr	s15, [r3, #8]
 801d53c:	697b      	ldr	r3, [r7, #20]
 801d53e:	68db      	ldr	r3, [r3, #12]
 801d540:	9300      	str	r3, [sp, #0]
 801d542:	eeb0 0a67 	vmov.f32	s0, s15
 801d546:	4613      	mov	r3, r2
 801d548:	683a      	ldr	r2, [r7, #0]
 801d54a:	6879      	ldr	r1, [r7, #4]
 801d54c:	6938      	ldr	r0, [r7, #16]
 801d54e:	f7ff fe89 	bl	801d264 <fill_tensor_desc_msg>
}
 801d552:	bf00      	nop
 801d554:	3718      	adds	r7, #24
 801d556:	46bd      	mov	sp, r7
 801d558:	bd80      	pop	{r7, pc}
	...

0801d55c <encode_mempool_to_tensor_desc>:


static void encode_mempool_to_tensor_desc(size_t index, void* data,
                                         aiTensorDescMsg* msg,
                                         struct _encode_uint32 *array_u32)
{
 801d55c:	b580      	push	{r7, lr}
 801d55e:	b086      	sub	sp, #24
 801d560:	af00      	add	r7, sp, #0
 801d562:	60f8      	str	r0, [r7, #12]
 801d564:	60b9      	str	r1, [r7, #8]
 801d566:	607a      	str	r2, [r7, #4]
 801d568:	603b      	str	r3, [r7, #0]
  struct _mempool_attr_desc *info = (struct _mempool_attr_desc *)data;
 801d56a:	68bb      	ldr	r3, [r7, #8]
 801d56c:	617b      	str	r3, [r7, #20]

  (void)index;

  array_u32->size = 1;
 801d56e:	683b      	ldr	r3, [r7, #0]
 801d570:	2201      	movs	r2, #1
 801d572:	601a      	str	r2, [r3, #0]
  array_u32->data = (void *)&info->size;
 801d574:	697b      	ldr	r3, [r7, #20]
 801d576:	1d1a      	adds	r2, r3, #4
 801d578:	683b      	ldr	r3, [r7, #0]
 801d57a:	605a      	str	r2, [r3, #4]
  array_u32->offset = 4;
 801d57c:	683b      	ldr	r3, [r7, #0]
 801d57e:	2204      	movs	r2, #4
 801d580:	609a      	str	r2, [r3, #8]

  if (info->name)
 801d582:	697b      	ldr	r3, [r7, #20]
 801d584:	681b      	ldr	r3, [r3, #0]
 801d586:	2b00      	cmp	r3, #0
 801d588:	d007      	beq.n	801d59a <encode_mempool_to_tensor_desc+0x3e>
    aiPbStrCopy(info->name, &msg->name[0],
 801d58a:	697b      	ldr	r3, [r7, #20]
 801d58c:	681b      	ldr	r3, [r3, #0]
 801d58e:	6879      	ldr	r1, [r7, #4]
 801d590:	2240      	movs	r2, #64	@ 0x40
 801d592:	4618      	mov	r0, r3
 801d594:	f7fe f8be 	bl	801b714 <aiPbStrCopy>
 801d598:	e002      	b.n	801d5a0 <encode_mempool_to_tensor_desc+0x44>
        sizeof(msg->name));
  else
    msg->name[0] = 0;
 801d59a:	687b      	ldr	r3, [r7, #4]
 801d59c:	2200      	movs	r2, #0
 801d59e:	701a      	strb	r2, [r3, #0]
  msg->format = AI_BUFFER_FORMAT_U8;
 801d5a0:	687b      	ldr	r3, [r7, #4]
 801d5a2:	4a0f      	ldr	r2, [pc, #60]	@ (801d5e0 <encode_mempool_to_tensor_desc+0x84>)
 801d5a4:	641a      	str	r2, [r3, #64]	@ 0x40
  msg->size = info->size;
 801d5a6:	697b      	ldr	r3, [r7, #20]
 801d5a8:	685a      	ldr	r2, [r3, #4]
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	645a      	str	r2, [r3, #68]	@ 0x44
  msg->n_dims = EnumShapeFmt_F_SHAPE_FMT_BCWH << EnumShapeFmt_F_SHAPE_FMT_POS | array_u32->size;
 801d5ae:	683b      	ldr	r3, [r7, #0]
 801d5b0:	681b      	ldr	r3, [r3, #0]
 801d5b2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 801d5b6:	687b      	ldr	r3, [r7, #4]
 801d5b8:	649a      	str	r2, [r3, #72]	@ 0x48
  msg->scale = 0.0;
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	f04f 0200 	mov.w	r2, #0
 801d5c0:	655a      	str	r2, [r3, #84]	@ 0x54
  msg->zeropoint = 0;
 801d5c2:	687b      	ldr	r3, [r7, #4]
 801d5c4:	2200      	movs	r2, #0
 801d5c6:	659a      	str	r2, [r3, #88]	@ 0x58
  msg->addr = (uint32_t)info->addr;
 801d5c8:	697b      	ldr	r3, [r7, #20]
 801d5ca:	689a      	ldr	r2, [r3, #8]
 801d5cc:	687b      	ldr	r3, [r7, #4]
 801d5ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  msg->flags = EnumTensorFlag_TENSOR_FLAG_MEMPOOL;
 801d5d0:	687b      	ldr	r3, [r7, #4]
 801d5d2:	2208      	movs	r2, #8
 801d5d4:	661a      	str	r2, [r3, #96]	@ 0x60
}
 801d5d6:	bf00      	nop
 801d5d8:	3718      	adds	r7, #24
 801d5da:	46bd      	mov	sp, r7
 801d5dc:	bd80      	pop	{r7, pc}
 801d5de:	bf00      	nop
 801d5e0:	00040440 	.word	0x00040440

0801d5e4 <_stai_compiler_id_to>:

static uint32_t _stai_compiler_id_to(stai_compiler_id id)
{
 801d5e4:	b480      	push	{r7}
 801d5e6:	b083      	sub	sp, #12
 801d5e8:	af00      	add	r7, sp, #0
 801d5ea:	4603      	mov	r3, r0
 801d5ec:	71fb      	strb	r3, [r7, #7]
  if (id == STAI_COMPILER_ID_GCC) {
 801d5ee:	79fb      	ldrb	r3, [r7, #7]
 801d5f0:	2b01      	cmp	r3, #1
 801d5f2:	d101      	bne.n	801d5f8 <_stai_compiler_id_to+0x14>
    return EnumTools_AI_GCC;
 801d5f4:	2301      	movs	r3, #1
 801d5f6:	e01e      	b.n	801d636 <_stai_compiler_id_to+0x52>
  }
  else if (id == STAI_COMPILER_ID_GHS) {
 801d5f8:	79fb      	ldrb	r3, [r7, #7]
 801d5fa:	2b10      	cmp	r3, #16
 801d5fc:	d101      	bne.n	801d602 <_stai_compiler_id_to+0x1e>
    return EnumTools_AI_GHS;
 801d5fe:	2306      	movs	r3, #6
 801d600:	e019      	b.n	801d636 <_stai_compiler_id_to+0x52>
  }
  else if  (id == STAI_COMPILER_ID_HIGHTECH) {
 801d602:	79fb      	ldrb	r3, [r7, #7]
 801d604:	2b20      	cmp	r3, #32
 801d606:	d101      	bne.n	801d60c <_stai_compiler_id_to+0x28>
    return EnumTools_AI_HTC;
 801d608:	2305      	movs	r3, #5
 801d60a:	e014      	b.n	801d636 <_stai_compiler_id_to+0x52>
  }
  else if  (id == STAI_COMPILER_ID_GCC) {
 801d60c:	79fb      	ldrb	r3, [r7, #7]
 801d60e:	2b01      	cmp	r3, #1
 801d610:	d101      	bne.n	801d616 <_stai_compiler_id_to+0x32>
    return EnumTools_AI_GCC;
 801d612:	2301      	movs	r3, #1
 801d614:	e00f      	b.n	801d636 <_stai_compiler_id_to+0x52>
  }
  else if  (id == STAI_COMPILER_ID_IAR) {
 801d616:	79fb      	ldrb	r3, [r7, #7]
 801d618:	2b30      	cmp	r3, #48	@ 0x30
 801d61a:	d101      	bne.n	801d620 <_stai_compiler_id_to+0x3c>
    return EnumTools_AI_IAR;
 801d61c:	2302      	movs	r3, #2
 801d61e:	e00a      	b.n	801d636 <_stai_compiler_id_to+0x52>
  }
  else if  (id == STAI_COMPILER_ID_KEIL_AC6) {
 801d620:	79fb      	ldrb	r3, [r7, #7]
 801d622:	2b50      	cmp	r3, #80	@ 0x50
 801d624:	d101      	bne.n	801d62a <_stai_compiler_id_to+0x46>
    return EnumTools_AI_MDK_6;
 801d626:	2304      	movs	r3, #4
 801d628:	e005      	b.n	801d636 <_stai_compiler_id_to+0x52>
  }
  else if  (id == STAI_COMPILER_ID_KEIL) {
 801d62a:	79fb      	ldrb	r3, [r7, #7]
 801d62c:	2b40      	cmp	r3, #64	@ 0x40
 801d62e:	d101      	bne.n	801d634 <_stai_compiler_id_to+0x50>
    return EnumTools_AI_MDK_5;
 801d630:	2303      	movs	r3, #3
 801d632:	e000      	b.n	801d636 <_stai_compiler_id_to+0x52>
  }
  return STAI_COMPILER_ID_NONE;
 801d634:	2300      	movs	r3, #0
}
 801d636:	4618      	mov	r0, r3
 801d638:	370c      	adds	r7, #12
 801d63a:	46bd      	mov	sp, r7
 801d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d640:	4770      	bx	lr
	...

0801d644 <send_model_info>:

static void send_model_info(const reqMsg *req, respMsg *resp,
    EnumState state, const ai_network_report *nn,
    bool inputs_in_acts, bool outputs_in_acts)
{
 801d644:	b5b0      	push	{r4, r5, r7, lr}
 801d646:	b0aa      	sub	sp, #168	@ 0xa8
 801d648:	af00      	add	r7, sp, #0
 801d64a:	60f8      	str	r0, [r7, #12]
 801d64c:	60b9      	str	r1, [r7, #8]
 801d64e:	603b      	str	r3, [r7, #0]
 801d650:	4613      	mov	r3, r2
 801d652:	71fb      	strb	r3, [r7, #7]
  uint32_t flags;
  resp->which_payload = respMsg_minfo_tag;
 801d654:	68bb      	ldr	r3, [r7, #8]
 801d656:	2216      	movs	r2, #22
 801d658:	80da      	strh	r2, [r3, #6]

  stai_runtime_info rt_info;
  stai_runtime_get_info(&rt_info);
 801d65a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801d65e:	4618      	mov	r0, r3
 801d660:	f005 fa30 	bl	8022ac4 <stai_runtime_get_info>

  memset(&resp->payload.minfo, 0, sizeof(aiModelInfoMsg));
 801d664:	68bb      	ldr	r3, [r7, #8]
 801d666:	3308      	adds	r3, #8
 801d668:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 801d66c:	2100      	movs	r1, #0
 801d66e:	4618      	mov	r0, r3
 801d670:	f016 fc0f 	bl	8033e92 <memset>

  aiPbStrCopy(nn->model_name, &resp->payload.minfo.name[0],
 801d674:	683b      	ldr	r3, [r7, #0]
 801d676:	6818      	ldr	r0, [r3, #0]
 801d678:	68bb      	ldr	r3, [r7, #8]
 801d67a:	3308      	adds	r3, #8
 801d67c:	2240      	movs	r2, #64	@ 0x40
 801d67e:	4619      	mov	r1, r3
 801d680:	f7fe f848 	bl	801b714 <aiPbStrCopy>
      sizeof(resp->payload.minfo.name));
  aiPbStrCopy(nn->model_signature, &resp->payload.minfo.signature[0],
 801d684:	683b      	ldr	r3, [r7, #0]
 801d686:	6858      	ldr	r0, [r3, #4]
 801d688:	68bb      	ldr	r3, [r7, #8]
 801d68a:	334c      	adds	r3, #76	@ 0x4c
 801d68c:	2240      	movs	r2, #64	@ 0x40
 801d68e:	4619      	mov	r1, r3
 801d690:	f7fe f840 	bl	801b714 <aiPbStrCopy>
      sizeof(resp->payload.minfo.signature));
  aiPbStrCopy(nn->compile_datetime, &resp->payload.minfo.compile_datetime[0],
 801d694:	683b      	ldr	r3, [r7, #0]
 801d696:	68d8      	ldr	r0, [r3, #12]
 801d698:	68bb      	ldr	r3, [r7, #8]
 801d69a:	338c      	adds	r3, #140	@ 0x8c
 801d69c:	2240      	movs	r2, #64	@ 0x40
 801d69e:	4619      	mov	r1, r3
 801d6a0:	f7fe f838 	bl	801b714 <aiPbStrCopy>
      sizeof(resp->payload.minfo.compile_datetime));

  /* return lib/runtime version of the compiled network_runtime lib */
  resp->payload.minfo.runtime_version = _ai_version_to_uint32((const ai_platform_version *)&rt_info.runtime_version);
 801d6a4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801d6a8:	3304      	adds	r3, #4
 801d6aa:	4618      	mov	r0, r3
 801d6ac:	f7ff fda6 	bl	801d1fc <_ai_version_to_uint32>
 801d6b0:	4602      	mov	r2, r0
 801d6b2:	68bb      	ldr	r3, [r7, #8]
 801d6b4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

  /* return tools version used to compile the model */
  resp->payload.minfo.tool_version = _ai_version_to_uint32(&nn->tool_version);
 801d6b8:	683b      	ldr	r3, [r7, #0]
 801d6ba:	331c      	adds	r3, #28
 801d6bc:	4618      	mov	r0, r3
 801d6be:	f7ff fd9d 	bl	801d1fc <_ai_version_to_uint32>
 801d6c2:	4602      	mov	r2, r0
 801d6c4:	68bb      	ldr	r3, [r7, #8]
 801d6c6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

  resp->payload.minfo.rtid = _AI_RUNTIME_ID | _stai_compiler_id_to(rt_info.compiler_id) << EnumTools_AI_TOOLS_POS;
 801d6ca:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 801d6ce:	4618      	mov	r0, r3
 801d6d0:	f7ff ff88 	bl	801d5e4 <_stai_compiler_id_to>
 801d6d4:	4603      	mov	r3, r0
 801d6d6:	041b      	lsls	r3, r3, #16
 801d6d8:	f043 0201 	orr.w	r2, r3, #1
 801d6dc:	68bb      	ldr	r3, [r7, #8]
 801d6de:	649a      	str	r2, [r3, #72]	@ 0x48
  aiPbStrCopy(rt_info.compiler_desc, &resp->payload.minfo.runtime_desc[0],
 801d6e0:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 801d6e4:	68bb      	ldr	r3, [r7, #8]
 801d6e6:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 801d6ea:	2240      	movs	r2, #64	@ 0x40
 801d6ec:	4619      	mov	r1, r3
 801d6ee:	f7fe f811 	bl	801b714 <aiPbStrCopy>
      sizeof(resp->payload.minfo.runtime_desc));

  uint32_to_str(rt_info.runtime_build, &resp->payload.minfo.runtime_desc[strlen(rt_info.compiler_desc)],
 801d6f2:	f8d7 4088 	ldr.w	r4, [r7, #136]	@ 0x88
 801d6f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801d6fa:	4618      	mov	r0, r3
 801d6fc:	f7f2 fcf0 	bl	80100e0 <strlen>
 801d700:	4603      	mov	r3, r0
 801d702:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801d706:	68ba      	ldr	r2, [r7, #8]
 801d708:	4413      	add	r3, r2
 801d70a:	1d1d      	adds	r5, r3, #4
                sizeof(resp->payload.minfo.runtime_desc) - strlen(rt_info.compiler_desc) - 1);
 801d70c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801d710:	4618      	mov	r0, r3
 801d712:	f7f2 fce5 	bl	80100e0 <strlen>
 801d716:	4603      	mov	r3, r0
 801d718:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
  uint32_to_str(rt_info.runtime_build, &resp->payload.minfo.runtime_desc[strlen(rt_info.compiler_desc)],
 801d71c:	461a      	mov	r2, r3
 801d71e:	4629      	mov	r1, r5
 801d720:	4620      	mov	r0, r4
 801d722:	f7fe ff9d 	bl	801c660 <uint32_to_str>

  resp->payload.minfo.n_macc = (uint64_t)nn->n_macc;
 801d726:	683b      	ldr	r3, [r7, #0]
 801d728:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 801d72c:	68b9      	ldr	r1, [r7, #8]
 801d72e:	e9c1 2336 	strd	r2, r3, [r1, #216]	@ 0xd8
  resp->payload.minfo.n_nodes = nn->n_nodes;
 801d732:	683b      	ldr	r3, [r7, #0]
 801d734:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 801d736:	68bb      	ldr	r3, [r7, #8]
 801d738:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0

  flags = EnumTensorFlag_TENSOR_FLAG_INPUT;
 801d73c:	2301      	movs	r3, #1
 801d73e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (inputs_in_acts)
 801d742:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 801d746:	2b00      	cmp	r3, #0
 801d748:	d005      	beq.n	801d756 <send_model_info+0x112>
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 801d74a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801d74e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801d752:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 801d756:	683b      	ldr	r3, [r7, #0]
 801d758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d75a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801d75c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801d760:	673b      	str	r3, [r7, #112]	@ 0x70
 801d762:	f04f 0300 	mov.w	r3, #0
 801d766:	677b      	str	r3, [r7, #116]	@ 0x74
 801d768:	2300      	movs	r3, #0
 801d76a:	67bb      	str	r3, [r7, #120]	@ 0x78
  struct _encode_tensor_desc tensor_ins = {
 801d76c:	4b6a      	ldr	r3, [pc, #424]	@ (801d918 <send_model_info+0x2d4>)
 801d76e:	663b      	str	r3, [r7, #96]	@ 0x60
      &encode_ai_buffer_to_tensor_desc, nn->n_inputs, &tensor_desc_ins };
 801d770:	683b      	ldr	r3, [r7, #0]
 801d772:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
  struct _encode_tensor_desc tensor_ins = {
 801d774:	667b      	str	r3, [r7, #100]	@ 0x64
 801d776:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 801d77a:	66bb      	str	r3, [r7, #104]	@ 0x68
  resp->payload.minfo.n_inputs = nn->n_inputs;
 801d77c:	683b      	ldr	r3, [r7, #0]
 801d77e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801d780:	461a      	mov	r2, r3
 801d782:	68bb      	ldr	r3, [r7, #8]
 801d784:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 801d788:	68bb      	ldr	r3, [r7, #8]
 801d78a:	4a64      	ldr	r2, [pc, #400]	@ (801d91c <send_model_info+0x2d8>)
 801d78c:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 801d790:	68bb      	ldr	r3, [r7, #8]
 801d792:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 801d796:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec

  flags = EnumTensorFlag_TENSOR_FLAG_OUTPUT;
 801d79a:	2302      	movs	r3, #2
 801d79c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (outputs_in_acts)
 801d7a0:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 801d7a4:	2b00      	cmp	r3, #0
 801d7a6:	d005      	beq.n	801d7b4 <send_model_info+0x170>
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 801d7a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801d7ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801d7b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 801d7b4:	683b      	ldr	r3, [r7, #0]
 801d7b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d7b8:	653b      	str	r3, [r7, #80]	@ 0x50
 801d7ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801d7be:	657b      	str	r3, [r7, #84]	@ 0x54
 801d7c0:	f04f 0300 	mov.w	r3, #0
 801d7c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 801d7c6:	2300      	movs	r3, #0
 801d7c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  struct _encode_tensor_desc tensor_outs = {
 801d7ca:	4b53      	ldr	r3, [pc, #332]	@ (801d918 <send_model_info+0x2d4>)
 801d7cc:	647b      	str	r3, [r7, #68]	@ 0x44
      &encode_ai_buffer_to_tensor_desc, nn->n_outputs, &tensor_desc_outs };
 801d7ce:	683b      	ldr	r3, [r7, #0]
 801d7d0:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
  struct _encode_tensor_desc tensor_outs = {
 801d7d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 801d7d4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801d7d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  resp->payload.minfo.n_outputs = nn->n_outputs;
 801d7da:	683b      	ldr	r3, [r7, #0]
 801d7dc:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 801d7de:	461a      	mov	r2, r3
 801d7e0:	68bb      	ldr	r3, [r7, #8]
 801d7e2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  resp->payload.minfo.outputs.funcs.encode = encode_tensor_desc;
 801d7e6:	68bb      	ldr	r3, [r7, #8]
 801d7e8:	4a4c      	ldr	r2, [pc, #304]	@ (801d91c <send_model_info+0x2d8>)
 801d7ea:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  resp->payload.minfo.outputs.arg = (void *)&tensor_outs;
 801d7ee:	68bb      	ldr	r3, [r7, #8]
 801d7f0:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 801d7f4:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  ai_size size_acts = 0;
 801d7f8:	2300      	movs	r3, #0
 801d7fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (nn->map_activations.size) {
 801d7fe:	683b      	ldr	r3, [r7, #0]
 801d800:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801d804:	2b00      	cmp	r3, #0
 801d806:	d01f      	beq.n	801d848 <send_model_info+0x204>
    for (int i=0; i<nn->map_activations.size; i++)
 801d808:	2300      	movs	r3, #0
 801d80a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801d80e:	e013      	b.n	801d838 <send_model_info+0x1f4>
      size_acts += nn->map_activations.buffer[i].size;
 801d810:	683b      	ldr	r3, [r7, #0]
 801d812:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801d814:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801d818:	4613      	mov	r3, r2
 801d81a:	00db      	lsls	r3, r3, #3
 801d81c:	1a9b      	subs	r3, r3, r2
 801d81e:	009b      	lsls	r3, r3, #2
 801d820:	440b      	add	r3, r1
 801d822:	691b      	ldr	r3, [r3, #16]
 801d824:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801d828:	4413      	add	r3, r2
 801d82a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    for (int i=0; i<nn->map_activations.size; i++)
 801d82e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801d832:	3301      	adds	r3, #1
 801d834:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801d838:	683b      	ldr	r3, [r7, #0]
 801d83a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801d83e:	461a      	mov	r2, r3
 801d840:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801d844:	4293      	cmp	r3, r2
 801d846:	dbe3      	blt.n	801d810 <send_model_info+0x1cc>
   }
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 801d848:	4b35      	ldr	r3, [pc, #212]	@ (801d920 <send_model_info+0x2dc>)
 801d84a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d84c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d852:	2300      	movs	r3, #0
 801d854:	643b      	str	r3, [r7, #64]	@ 0x40
  struct _encode_tensor_desc tensor_acts = {
 801d856:	4b33      	ldr	r3, [pc, #204]	@ (801d924 <send_model_info+0x2e0>)
 801d858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d85a:	2301      	movs	r3, #1
 801d85c:	633b      	str	r3, [r7, #48]	@ 0x30
 801d85e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801d862:	637b      	str	r3, [r7, #52]	@ 0x34
      &encode_mempool_to_tensor_desc, 1, &tensor_desc_acts };
  resp->payload.minfo.n_activations = 1;
 801d864:	68bb      	ldr	r3, [r7, #8]
 801d866:	2201      	movs	r2, #1
 801d868:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
  resp->payload.minfo.activations.funcs.encode = encode_tensor_desc;
 801d86c:	68bb      	ldr	r3, [r7, #8]
 801d86e:	4a2b      	ldr	r2, [pc, #172]	@ (801d91c <send_model_info+0x2d8>)
 801d870:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  resp->payload.minfo.activations.arg = (void *)&tensor_acts;
 801d874:	68bb      	ldr	r3, [r7, #8]
 801d876:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801d87a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

  ai_size size_params = 0;
 801d87e:	2300      	movs	r3, #0
 801d880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (nn->map_weights.size) {
 801d884:	683b      	ldr	r3, [r7, #0]
 801d886:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d01f      	beq.n	801d8ce <send_model_info+0x28a>
    for (int i=0; i<nn->map_weights.size; i++)
 801d88e:	2300      	movs	r3, #0
 801d890:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801d894:	e013      	b.n	801d8be <send_model_info+0x27a>
      size_params += nn->map_weights.buffer[i].size;
 801d896:	683b      	ldr	r3, [r7, #0]
 801d898:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801d89a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801d89e:	4613      	mov	r3, r2
 801d8a0:	00db      	lsls	r3, r3, #3
 801d8a2:	1a9b      	subs	r3, r3, r2
 801d8a4:	009b      	lsls	r3, r3, #2
 801d8a6:	440b      	add	r3, r1
 801d8a8:	691b      	ldr	r3, [r3, #16]
 801d8aa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801d8ae:	4413      	add	r3, r2
 801d8b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    for (int i=0; i<nn->map_weights.size; i++)
 801d8b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801d8b8:	3301      	adds	r3, #1
 801d8ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801d8be:	683b      	ldr	r3, [r7, #0]
 801d8c0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801d8c4:	461a      	mov	r2, r3
 801d8c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801d8ca:	4293      	cmp	r3, r2
 801d8cc:	dbe3      	blt.n	801d896 <send_model_info+0x252>
  }
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 801d8ce:	4b16      	ldr	r3, [pc, #88]	@ (801d928 <send_model_info+0x2e4>)
 801d8d0:	623b      	str	r3, [r7, #32]
 801d8d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801d8d6:	627b      	str	r3, [r7, #36]	@ 0x24
 801d8d8:	2300      	movs	r3, #0
 801d8da:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct _encode_tensor_desc tensor_w = {
 801d8dc:	4b11      	ldr	r3, [pc, #68]	@ (801d924 <send_model_info+0x2e0>)
 801d8de:	617b      	str	r3, [r7, #20]
 801d8e0:	2301      	movs	r3, #1
 801d8e2:	61bb      	str	r3, [r7, #24]
 801d8e4:	f107 0320 	add.w	r3, r7, #32
 801d8e8:	61fb      	str	r3, [r7, #28]
      &encode_mempool_to_tensor_desc, 1, &tensor_desc_w };
  resp->payload.minfo.n_params = 1;
 801d8ea:	68bb      	ldr	r3, [r7, #8]
 801d8ec:	2201      	movs	r2, #1
 801d8ee:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  resp->payload.minfo.params.funcs.encode = encode_tensor_desc;
 801d8f2:	68bb      	ldr	r3, [r7, #8]
 801d8f4:	4a09      	ldr	r2, [pc, #36]	@ (801d91c <send_model_info+0x2d8>)
 801d8f6:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 801d8fa:	68bb      	ldr	r3, [r7, #8]
 801d8fc:	f107 0214 	add.w	r2, r7, #20
 801d900:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

  aiPbMgrSendResp(req, resp, state);
 801d904:	79fb      	ldrb	r3, [r7, #7]
 801d906:	461a      	mov	r2, r3
 801d908:	68b9      	ldr	r1, [r7, #8]
 801d90a:	68f8      	ldr	r0, [r7, #12]
 801d90c:	f7fe f85c 	bl	801b9c8 <aiPbMgrSendResp>
}
 801d910:	bf00      	nop
 801d912:	37a8      	adds	r7, #168	@ 0xa8
 801d914:	46bd      	mov	sp, r7
 801d916:	bdb0      	pop	{r4, r5, r7, pc}
 801d918:	0801d50f 	.word	0x0801d50f
 801d91c:	0801b835 	.word	0x0801b835
 801d920:	08037d4c 	.word	0x08037d4c
 801d924:	0801d55d 	.word	0x0801d55d
 801d928:	08037d54 	.word	0x08037d54

0801d92c <receive_ai_data>:

static bool receive_ai_data(const reqMsg *req, respMsg *resp,
    EnumState state, ai_buffer *buffer, const bool simple_value,
    const bool direct_write)
{
 801d92c:	b580      	push	{r7, lr}
 801d92e:	b090      	sub	sp, #64	@ 0x40
 801d930:	af02      	add	r7, sp, #8
 801d932:	60f8      	str	r0, [r7, #12]
 801d934:	60b9      	str	r1, [r7, #8]
 801d936:	603b      	str	r3, [r7, #0]
 801d938:	4613      	mov	r3, r2
 801d93a:	71fb      	strb	r3, [r7, #7]
  bool res = true;
 801d93c:	2301      	movs	r3, #1
 801d93e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp;
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 801d942:	2300      	movs	r3, #0
 801d944:	613b      	str	r3, [r7, #16]
 801d946:	6838      	ldr	r0, [r7, #0]
 801d948:	f7ff fbf8 	bl	801d13c <_get_buffer_size>
 801d94c:	4603      	mov	r3, r0
 801d94e:	617b      	str	r3, [r7, #20]
 801d950:	683b      	ldr	r3, [r7, #0]
 801d952:	685b      	ldr	r3, [r3, #4]
 801d954:	61bb      	str	r3, [r7, #24]
 801d956:	2300      	movs	r3, #0
 801d958:	61fb      	str	r3, [r7, #28]

  if ((simple_value) || (direct_write))
 801d95a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801d95e:	2b00      	cmp	r3, #0
 801d960:	d103      	bne.n	801d96a <receive_ai_data+0x3e>
 801d962:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801d966:	2b00      	cmp	r3, #0
 801d968:	d004      	beq.n	801d974 <receive_ai_data+0x48>
    data.size = _get_element_size(buffer);
 801d96a:	6838      	ldr	r0, [r7, #0]
 801d96c:	f7ff fc16 	bl	801d19c <_get_element_size>
 801d970:	4603      	mov	r3, r0
 801d972:	617b      	str	r3, [r7, #20]
  if (direct_write)
 801d974:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801d978:	2b00      	cmp	r3, #0
 801d97a:	d002      	beq.n	801d982 <receive_ai_data+0x56>
    data.addr = (uintptr_t)&temp;
 801d97c:	f107 0320 	add.w	r3, r7, #32
 801d980:	61bb      	str	r3, [r7, #24]

  aiPbMgrReceiveData(&data);
 801d982:	f107 0310 	add.w	r3, r7, #16
 801d986:	4618      	mov	r0, r3
 801d988:	f7fe f8bc 	bl	801bb04 <aiPbMgrReceiveData>

  /* Send ACK and wait ACK (or send ACK only if error) */
  if (data.nb_read != data.size) {
 801d98c:	69fa      	ldr	r2, [r7, #28]
 801d98e:	697b      	ldr	r3, [r7, #20]
 801d990:	429a      	cmp	r2, r3
 801d992:	d00b      	beq.n	801d9ac <receive_ai_data+0x80>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 801d994:	69fb      	ldr	r3, [r7, #28]
 801d996:	2201      	movs	r2, #1
 801d998:	9200      	str	r2, [sp, #0]
 801d99a:	2204      	movs	r2, #4
 801d99c:	68b9      	ldr	r1, [r7, #8]
 801d99e:	68f8      	ldr	r0, [r7, #12]
 801d9a0:	f7fe f830 	bl	801ba04 <aiPbMgrSendAck>
        data.nb_read,
        EnumError_E_INVALID_SIZE);
    res = false;
 801d9a4:	2300      	movs	r3, #0
 801d9a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801d9aa:	e03d      	b.n	801da28 <receive_ai_data+0xfc>
  }
  else {

  if ((simple_value) && (!direct_write))/* broadcast the value */
 801d9ac:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	d029      	beq.n	801da08 <receive_ai_data+0xdc>
 801d9b4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801d9b8:	f083 0301 	eor.w	r3, r3, #1
 801d9bc:	b2db      	uxtb	r3, r3
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	d022      	beq.n	801da08 <receive_ai_data+0xdc>
    {
      const size_t el_s = data.size;
 801d9c2:	697b      	ldr	r3, [r7, #20]
 801d9c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      const uintptr_t r_ptr = (uintptr_t)buffer->data;
 801d9c6:	683b      	ldr	r3, [r7, #0]
 801d9c8:	685b      	ldr	r3, [r3, #4]
 801d9ca:	627b      	str	r3, [r7, #36]	@ 0x24
      uintptr_t w_ptr = r_ptr + el_s;
 801d9cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9d0:	4413      	add	r3, r2
 801d9d2:	633b      	str	r3, [r7, #48]	@ 0x30
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 801d9d4:	2301      	movs	r3, #1
 801d9d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d9d8:	e00c      	b.n	801d9f4 <receive_ai_data+0xc8>
      {
        memcpy((void *)w_ptr, (void *)r_ptr, el_s);
 801d9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d9dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d9de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d9e0:	4618      	mov	r0, r3
 801d9e2:	f016 faf8 	bl	8033fd6 <memcpy>
        w_ptr += el_s;
 801d9e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d9e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9ea:	4413      	add	r3, r2
 801d9ec:	633b      	str	r3, [r7, #48]	@ 0x30
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 801d9ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d9f0:	3301      	adds	r3, #1
 801d9f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d9f4:	6838      	ldr	r0, [r7, #0]
 801d9f6:	f7ff fba1 	bl	801d13c <_get_buffer_size>
 801d9fa:	4602      	mov	r2, r0
 801d9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9fe:	fbb2 f3f3 	udiv	r3, r2, r3
 801da02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801da04:	429a      	cmp	r2, r3
 801da06:	d3e8      	bcc.n	801d9da <receive_ai_data+0xae>
      }
    }

    aiPbMgrSendAck(req, resp, state, data.size, EnumError_E_NONE);
 801da08:	697b      	ldr	r3, [r7, #20]
 801da0a:	79fa      	ldrb	r2, [r7, #7]
 801da0c:	2100      	movs	r1, #0
 801da0e:	9100      	str	r1, [sp, #0]
 801da10:	68b9      	ldr	r1, [r7, #8]
 801da12:	68f8      	ldr	r0, [r7, #12]
 801da14:	f7fd fff6 	bl	801ba04 <aiPbMgrSendAck>
    if ((state == EnumState_S_WAITING) ||
 801da18:	79fb      	ldrb	r3, [r7, #7]
 801da1a:	2b01      	cmp	r3, #1
 801da1c:	d002      	beq.n	801da24 <receive_ai_data+0xf8>
 801da1e:	79fb      	ldrb	r3, [r7, #7]
 801da20:	2b02      	cmp	r3, #2
 801da22:	d101      	bne.n	801da28 <receive_ai_data+0xfc>
        (state == EnumState_S_PROCESSING))
      aiPbMgrWaitAck();
 801da24:	f7fe f80a 	bl	801ba3c <aiPbMgrWaitAck>
  }

  return res;
 801da28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 801da2c:	4618      	mov	r0, r3
 801da2e:	3738      	adds	r7, #56	@ 0x38
 801da30:	46bd      	mov	sp, r7
 801da32:	bd80      	pop	{r7, pc}

0801da34 <send_ai_io_tensor>:

static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
    EnumState state, const ai_buffer *buffer,
    const uint32_t flags,
    float scale, int32_t zero_point)
{
 801da34:	b580      	push	{r7, lr}
 801da36:	b090      	sub	sp, #64	@ 0x40
 801da38:	af02      	add	r7, sp, #8
 801da3a:	6178      	str	r0, [r7, #20]
 801da3c:	6139      	str	r1, [r7, #16]
 801da3e:	60bb      	str	r3, [r7, #8]
 801da40:	ed87 0a01 	vstr	s0, [r7, #4]
 801da44:	4613      	mov	r3, r2
 801da46:	73fb      	strb	r3, [r7, #15]
  struct _encode_uint32 array_u32;

  /* Build the PB message */
  resp->which_payload = respMsg_tensor_tag;
 801da48:	693b      	ldr	r3, [r7, #16]
 801da4a:	2211      	movs	r2, #17
 801da4c:	80da      	strh	r2, [r3, #6]

  /*-- Flags field */
  // resp->payload.tensor.flags = flags;

  /*-- Tensor desc field */
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 801da4e:	693b      	ldr	r3, [r7, #16]
 801da50:	f103 0108 	add.w	r1, r3, #8
 801da54:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801da58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801da5a:	9300      	str	r3, [sp, #0]
 801da5c:	ed97 0a01 	vldr	s0, [r7, #4]
 801da60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801da62:	68b8      	ldr	r0, [r7, #8]
 801da64:	f7ff fbfe 	bl	801d264 <fill_tensor_desc_msg>
  resp->payload.tensor.desc.dims.funcs.encode = encode_uint32;
 801da68:	693b      	ldr	r3, [r7, #16]
 801da6a:	4a1b      	ldr	r2, [pc, #108]	@ (801dad8 <send_ai_io_tensor+0xa4>)
 801da6c:	655a      	str	r2, [r3, #84]	@ 0x54
  resp->payload.tensor.desc.dims.arg = &array_u32;
 801da6e:	693b      	ldr	r3, [r7, #16]
 801da70:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801da74:	659a      	str	r2, [r3, #88]	@ 0x58

  /*-- Data field */
  resp->payload.tensor.data.addr = (uint32_t)buffer->data;
 801da76:	68bb      	ldr	r3, [r7, #8]
 801da78:	685b      	ldr	r3, [r3, #4]
 801da7a:	461a      	mov	r2, r3
 801da7c:	693b      	ldr	r3, [r7, #16]
 801da7e:	675a      	str	r2, [r3, #116]	@ 0x74
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 801da80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801da82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801da86:	2b00      	cmp	r3, #0
 801da88:	d003      	beq.n	801da92 <send_ai_io_tensor+0x5e>
    resp->payload.tensor.data.size = 0;
 801da8a:	693b      	ldr	r3, [r7, #16]
 801da8c:	2200      	movs	r2, #0
 801da8e:	671a      	str	r2, [r3, #112]	@ 0x70
 801da90:	e005      	b.n	801da9e <send_ai_io_tensor+0x6a>
  } else {
    resp->payload.tensor.data.size = _get_buffer_size(buffer);
 801da92:	68b8      	ldr	r0, [r7, #8]
 801da94:	f7ff fb52 	bl	801d13c <_get_buffer_size>
 801da98:	4602      	mov	r2, r0
 801da9a:	693b      	ldr	r3, [r7, #16]
 801da9c:	671a      	str	r2, [r3, #112]	@ 0x70
  }
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 801da9e:	2300      	movs	r3, #0
 801daa0:	61fb      	str	r3, [r7, #28]
 801daa2:	693b      	ldr	r3, [r7, #16]
 801daa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801daa6:	623b      	str	r3, [r7, #32]
 801daa8:	693b      	ldr	r3, [r7, #16]
 801daaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801daac:	627b      	str	r3, [r7, #36]	@ 0x24
 801daae:	2300      	movs	r3, #0
 801dab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  resp->payload.tensor.data.datas.funcs.encode = &encode_data_cb;
 801dab2:	693b      	ldr	r3, [r7, #16]
 801dab4:	4a09      	ldr	r2, [pc, #36]	@ (801dadc <send_ai_io_tensor+0xa8>)
 801dab6:	679a      	str	r2, [r3, #120]	@ 0x78
  resp->payload.tensor.data.datas.arg = (void *)&data;
 801dab8:	693b      	ldr	r3, [r7, #16]
 801daba:	f107 021c 	add.w	r2, r7, #28
 801dabe:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Send the PB message */
  aiPbMgrSendResp(req, resp, state);
 801dac0:	7bfb      	ldrb	r3, [r7, #15]
 801dac2:	461a      	mov	r2, r3
 801dac4:	6939      	ldr	r1, [r7, #16]
 801dac6:	6978      	ldr	r0, [r7, #20]
 801dac8:	f7fd ff7e 	bl	801b9c8 <aiPbMgrSendResp>

  return true;
 801dacc:	2301      	movs	r3, #1
  if (state == EnumState_S_PROCESSING)
    return aiPbMgrWaitAck();
  else
    return true;
#endif
}
 801dace:	4618      	mov	r0, r3
 801dad0:	3738      	adds	r7, #56	@ 0x38
 801dad2:	46bd      	mov	sp, r7
 801dad4:	bd80      	pop	{r7, pc}
 801dad6:	bf00      	nop
 801dad8:	0801b785 	.word	0x0801b785
 801dadc:	0801b96f 	.word	0x0801b96f

0801dae0 <_print_debug>:
#define _PRINT_BUFFER_SIZE  80

static char _print_buffer[_PRINT_BUFFER_SIZE];

void _print_debug(bool debug, const char* fmt, ...)
{
 801dae0:	b40e      	push	{r1, r2, r3}
 801dae2:	b580      	push	{r7, lr}
 801dae4:	b085      	sub	sp, #20
 801dae6:	af00      	add	r7, sp, #0
 801dae8:	4603      	mov	r3, r0
 801daea:	71fb      	strb	r3, [r7, #7]
  va_list ap;
  size_t s;

  if (!debug)
 801daec:	79fb      	ldrb	r3, [r7, #7]
 801daee:	f083 0301 	eor.w	r3, r3, #1
 801daf2:	b2db      	uxtb	r3, r3
 801daf4:	2b00      	cmp	r3, #0
 801daf6:	d127      	bne.n	801db48 <_print_debug+0x68>
    return;

  va_start(ap, fmt);
 801daf8:	f107 0320 	add.w	r3, r7, #32
 801dafc:	60bb      	str	r3, [r7, #8]
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 801dafe:	68bb      	ldr	r3, [r7, #8]
 801db00:	69fa      	ldr	r2, [r7, #28]
 801db02:	2150      	movs	r1, #80	@ 0x50
 801db04:	4814      	ldr	r0, [pc, #80]	@ (801db58 <_print_debug+0x78>)
 801db06:	f7fe fe45 	bl	801c794 <lc_vsnprint>
 801db0a:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  while (s) {
 801db0c:	e013      	b.n	801db36 <_print_debug+0x56>
    if ((_print_buffer[s] == '\n') || (_print_buffer[s] == '\r'))
 801db0e:	4a12      	ldr	r2, [pc, #72]	@ (801db58 <_print_debug+0x78>)
 801db10:	68fb      	ldr	r3, [r7, #12]
 801db12:	4413      	add	r3, r2
 801db14:	781b      	ldrb	r3, [r3, #0]
 801db16:	2b0a      	cmp	r3, #10
 801db18:	d005      	beq.n	801db26 <_print_debug+0x46>
 801db1a:	4a0f      	ldr	r2, [pc, #60]	@ (801db58 <_print_debug+0x78>)
 801db1c:	68fb      	ldr	r3, [r7, #12]
 801db1e:	4413      	add	r3, r2
 801db20:	781b      	ldrb	r3, [r3, #0]
 801db22:	2b0d      	cmp	r3, #13
 801db24:	d104      	bne.n	801db30 <_print_debug+0x50>
      _print_buffer[s] = 0;
 801db26:	4a0c      	ldr	r2, [pc, #48]	@ (801db58 <_print_debug+0x78>)
 801db28:	68fb      	ldr	r3, [r7, #12]
 801db2a:	4413      	add	r3, r2
 801db2c:	2200      	movs	r2, #0
 801db2e:	701a      	strb	r2, [r3, #0]
    s--;
 801db30:	68fb      	ldr	r3, [r7, #12]
 801db32:	3b01      	subs	r3, #1
 801db34:	60fb      	str	r3, [r7, #12]
  while (s) {
 801db36:	68fb      	ldr	r3, [r7, #12]
 801db38:	2b00      	cmp	r3, #0
 801db3a:	d1e8      	bne.n	801db0e <_print_debug+0x2e>
  }
  aiPbMgrSendLogV2(EnumState_S_WAITING, 1, &_print_buffer[0]);
 801db3c:	4a06      	ldr	r2, [pc, #24]	@ (801db58 <_print_debug+0x78>)
 801db3e:	2101      	movs	r1, #1
 801db40:	2001      	movs	r0, #1
 801db42:	f7fd ff95 	bl	801ba70 <aiPbMgrSendLogV2>
 801db46:	e000      	b.n	801db4a <_print_debug+0x6a>
    return;
 801db48:	bf00      	nop
}
 801db4a:	3714      	adds	r7, #20
 801db4c:	46bd      	mov	sp, r7
 801db4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801db52:	b003      	add	sp, #12
 801db54:	4770      	bx	lr
 801db56:	bf00      	nop
 801db58:	24031d68 	.word	0x24031d68

0801db5c <aiOnExecNode_cb>:
 */

#ifdef HAS_OBSERVER
static ai_u32 aiOnExecNode_cb(const ai_handle cookie,
    const ai_u32 flags,
    const ai_observer_node *node) {
 801db5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801db60:	b0a4      	sub	sp, #144	@ 0x90
 801db62:	af04      	add	r7, sp, #16
 801db64:	60f8      	str	r0, [r7, #12]
 801db66:	60b9      	str	r1, [r7, #8]
 801db68:	607a      	str	r2, [r7, #4]

  struct ai_network_exec_ctx *ctx = (struct ai_network_exec_ctx*)cookie;
 801db6a:	68fb      	ldr	r3, [r7, #12]
 801db6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 801db6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801db70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801db74:	66bb      	str	r3, [r7, #104]	@ 0x68

  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp to mark the entry */
 801db76:	f7ff fa77 	bl	801d068 <cyclesCounterEnd>
 801db7a:	4602      	mov	r2, r0
 801db7c:	460b      	mov	r3, r1
 801db7e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

  if (flags & AI_OBSERVER_PRE_EVT) {
 801db82:	68bb      	ldr	r3, [r7, #8]
 801db84:	f003 0302 	and.w	r3, r3, #2
 801db88:	2b00      	cmp	r3, #0
 801db8a:	d010      	beq.n	801dbae <aiOnExecNode_cb+0x52>
    obs_ctx->n_cb_in++;
 801db8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801db8e:	685b      	ldr	r3, [r3, #4]
 801db90:	1c5a      	adds	r2, r3, #1
 801db92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801db94:	605a      	str	r2, [r3, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 801db96:	68bb      	ldr	r3, [r7, #8]
 801db98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801db9c:	2b00      	cmp	r3, #0
 801db9e:	f000 8137 	beq.w	801de10 <aiOnExecNode_cb+0x2b4>
      obs_ctx->tnodes = ts;
 801dba2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801dba6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801dba8:	e9c1 2308 	strd	r2, r3, [r1, #32]
 801dbac:	e130      	b.n	801de10 <aiOnExecNode_cb+0x2b4>
  } else if (flags & AI_OBSERVER_POST_EVT) {
 801dbae:	68bb      	ldr	r3, [r7, #8]
 801dbb0:	f003 0304 	and.w	r3, r3, #4
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	f000 812b 	beq.w	801de10 <aiOnExecNode_cb+0x2b4>
    uint32_t type;
    ai_tensor_list *tl;

    cyclesCounterStart();
 801dbba:	f7ff fa41 	bl	801d040 <cyclesCounterStart>
    /* "ts" here indicates the execution time of the
     * operator because the dwt cycle CPU counter has been
     * reset by the entry cb.
     */
    obs_ctx->tnodes += ts;
 801dbbe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801dbc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dbc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801dbc8:	eb10 0802 	adds.w	r8, r0, r2
 801dbcc:	eb41 0903 	adc.w	r9, r1, r3
 801dbd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dbd2:	e9c3 8908 	strd	r8, r9, [r3, #32]
    obs_ctx->n_cb_out++;
 801dbd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dbd8:	689b      	ldr	r3, [r3, #8]
 801dbda:	1c5a      	adds	r2, r3, #1
 801dbdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dbde:	609a      	str	r2, [r3, #8]

    type = (EnumOperatorFlag_OPERATOR_FLAG_INTERNAL << 24);
 801dbe0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801dbe4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (flags & AI_OBSERVER_LAST_EVT)
 801dbe6:	68bb      	ldr	r3, [r7, #8]
 801dbe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	d003      	beq.n	801dbf8 <aiOnExecNode_cb+0x9c>
      type |= (EnumOperatorFlag_OPERATOR_FLAG_LAST << 24);
 801dbf0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801dbf2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801dbf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    type |= (node->type & (ai_u16)0x7FFF);
 801dbf8:	687b      	ldr	r3, [r7, #4]
 801dbfa:	885b      	ldrh	r3, [r3, #2]
 801dbfc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801dc00:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801dc02:	4313      	orrs	r3, r2
 801dc04:	67fb      	str	r3, [r7, #124]	@ 0x7c

    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 801dc06:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801dc0a:	4610      	mov	r0, r2
 801dc0c:	4619      	mov	r1, r3
 801dc0e:	f7ff f873 	bl	801ccf8 <dwtCyclesToFloatMs>
 801dc12:	eef0 7a40 	vmov.f32	s15, s0
 801dc16:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 801dc1a:	2300      	movs	r3, #0
 801dc1c:	637b      	str	r3, [r7, #52]	@ 0x34
 801dc1e:	2302      	movs	r3, #2
 801dc20:	63bb      	str	r3, [r7, #56]	@ 0x38
 801dc22:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801dc26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801dc28:	f04f 33ff 	mov.w	r3, #4294967295
 801dc2c:	643b      	str	r3, [r7, #64]	@ 0x40
 801dc2e:	f04f 33ff 	mov.w	r3, #4294967295
 801dc32:	647b      	str	r3, [r7, #68]	@ 0x44
    perf.counter_type = EnumCounterFormat_COUNTER_FMT_64B << EnumCounterFormat_COUNTER_FMT_POS;
 801dc34:	2300      	movs	r3, #0
 801dc36:	637b      	str	r3, [r7, #52]	@ 0x34
    perf.counter_type |= EnumCounterType_COUNTER_TYPE_CPU;
 801dc38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dc3a:	637b      	str	r3, [r7, #52]	@ 0x34

    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 801dc3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dc3e:	68d8      	ldr	r0, [r3, #12]
 801dc40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dc42:	6919      	ldr	r1, [r3, #16]
        NULL, type, node->id, &perf);
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	889b      	ldrh	r3, [r3, #4]
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 801dc48:	461a      	mov	r2, r3
 801dc4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801dc4e:	9302      	str	r3, [sp, #8]
 801dc50:	9201      	str	r2, [sp, #4]
 801dc52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801dc54:	9300      	str	r3, [sp, #0]
 801dc56:	2300      	movs	r3, #0
 801dc58:	2202      	movs	r2, #2
 801dc5a:	f7fd ff75 	bl	801bb48 <aiPbMgrSendOperator>

    tl = GET_TENSOR_LIST_OUT(node->tensors);
 801dc5e:	687b      	ldr	r3, [r7, #4]
 801dc60:	68db      	ldr	r3, [r3, #12]
 801dc62:	881b      	ldrh	r3, [r3, #0]
 801dc64:	2b01      	cmp	r3, #1
 801dc66:	d904      	bls.n	801dc72 <aiOnExecNode_cb+0x116>
 801dc68:	687b      	ldr	r3, [r7, #4]
 801dc6a:	68db      	ldr	r3, [r3, #12]
 801dc6c:	685b      	ldr	r3, [r3, #4]
 801dc6e:	330c      	adds	r3, #12
 801dc70:	e000      	b.n	801dc74 <aiOnExecNode_cb+0x118>
 801dc72:	2300      	movs	r3, #0
 801dc74:	667b      	str	r3, [r7, #100]	@ 0x64
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 801dc76:	2300      	movs	r3, #0
 801dc78:	663b      	str	r3, [r7, #96]	@ 0x60
 801dc7a:	2300      	movs	r3, #0
 801dc7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801dc7e:	e0a0      	b.n	801ddc2 <aiOnExecNode_cb+0x266>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 801dc80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dc82:	681b      	ldr	r3, [r3, #0]
 801dc84:	2b00      	cmp	r3, #0
 801dc86:	d00f      	beq.n	801dca8 <aiOnExecNode_cb+0x14c>
 801dc88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dc8a:	681b      	ldr	r3, [r3, #0]
 801dc8c:	685b      	ldr	r3, [r3, #4]
 801dc8e:	2b00      	cmp	r3, #0
 801dc90:	d00a      	beq.n	801dca8 <aiOnExecNode_cb+0x14c>
 801dc92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dc94:	681b      	ldr	r3, [r3, #0]
 801dc96:	885b      	ldrh	r3, [r3, #2]
 801dc98:	2b00      	cmp	r3, #0
 801dc9a:	d005      	beq.n	801dca8 <aiOnExecNode_cb+0x14c>
 801dc9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dc9e:	681b      	ldr	r3, [r3, #0]
 801dca0:	685b      	ldr	r3, [r3, #4]
 801dca2:	681b      	ldr	r3, [r3, #0]
 801dca4:	681b      	ldr	r3, [r3, #0]
 801dca6:	e001      	b.n	801dcac <aiOnExecNode_cb+0x150>
 801dca8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801dcac:	65fb      	str	r3, [r7, #92]	@ 0x5c
      ai_i32 zero_point = 0;
 801dcae:	2300      	movs	r3, #0
 801dcb0:	677b      	str	r3, [r7, #116]	@ 0x74

      if (AI_TENSOR_FMT_GET_SIGN(t))
 801dcb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dcb4:	699b      	ldr	r3, [r3, #24]
 801dcb6:	681b      	ldr	r3, [r3, #0]
 801dcb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801dcbc:	2b00      	cmp	r3, #0
 801dcbe:	d017      	beq.n	801dcf0 <aiOnExecNode_cb+0x194>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 801dcc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dcc2:	681b      	ldr	r3, [r3, #0]
 801dcc4:	2b00      	cmp	r3, #0
 801dcc6:	d010      	beq.n	801dcea <aiOnExecNode_cb+0x18e>
 801dcc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dcca:	681b      	ldr	r3, [r3, #0]
 801dccc:	685b      	ldr	r3, [r3, #4]
 801dcce:	2b00      	cmp	r3, #0
 801dcd0:	d00b      	beq.n	801dcea <aiOnExecNode_cb+0x18e>
 801dcd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dcd4:	681b      	ldr	r3, [r3, #0]
 801dcd6:	885b      	ldrh	r3, [r3, #2]
 801dcd8:	2b00      	cmp	r3, #0
 801dcda:	d006      	beq.n	801dcea <aiOnExecNode_cb+0x18e>
 801dcdc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dcde:	681b      	ldr	r3, [r3, #0]
 801dce0:	685b      	ldr	r3, [r3, #4]
 801dce2:	685b      	ldr	r3, [r3, #4]
 801dce4:	f993 3000 	ldrsb.w	r3, [r3]
 801dce8:	e000      	b.n	801dcec <aiOnExecNode_cb+0x190>
 801dcea:	2300      	movs	r3, #0
 801dcec:	677b      	str	r3, [r7, #116]	@ 0x74
 801dcee:	e015      	b.n	801dd1c <aiOnExecNode_cb+0x1c0>
      else
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_U8(t, 0);
 801dcf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dcf2:	681b      	ldr	r3, [r3, #0]
 801dcf4:	2b00      	cmp	r3, #0
 801dcf6:	d00f      	beq.n	801dd18 <aiOnExecNode_cb+0x1bc>
 801dcf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dcfa:	681b      	ldr	r3, [r3, #0]
 801dcfc:	685b      	ldr	r3, [r3, #4]
 801dcfe:	2b00      	cmp	r3, #0
 801dd00:	d00a      	beq.n	801dd18 <aiOnExecNode_cb+0x1bc>
 801dd02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dd04:	681b      	ldr	r3, [r3, #0]
 801dd06:	885b      	ldrh	r3, [r3, #2]
 801dd08:	2b00      	cmp	r3, #0
 801dd0a:	d005      	beq.n	801dd18 <aiOnExecNode_cb+0x1bc>
 801dd0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dd0e:	681b      	ldr	r3, [r3, #0]
 801dd10:	685b      	ldr	r3, [r3, #4]
 801dd12:	685b      	ldr	r3, [r3, #4]
 801dd14:	781b      	ldrb	r3, [r3, #0]
 801dd16:	e000      	b.n	801dd1a <aiOnExecNode_cb+0x1be>
 801dd18:	2300      	movs	r3, #0
 801dd1a:	677b      	str	r3, [r7, #116]	@ 0x74

      const ai_buffer_format fmt = AI_TENSOR_GET_FMT(t);
 801dd1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dd1e:	699b      	ldr	r3, [r3, #24]
 801dd20:	681b      	ldr	r3, [r3, #0]
 801dd22:	65bb      	str	r3, [r7, #88]	@ 0x58
      const ai_shape *shape = AI_TENSOR_SHAPE(t);  /* Note that = ai_buffer_shape */
 801dd24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dd26:	3308      	adds	r3, #8
 801dd28:	657b      	str	r3, [r7, #84]	@ 0x54

      ai_buffer buffer =
 801dd2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801dd2c:	617b      	str	r3, [r7, #20]
          AI_BUFFER_INIT(
 801dd2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dd30:	699b      	ldr	r3, [r3, #24]
 801dd32:	68db      	ldr	r3, [r3, #12]
      ai_buffer buffer =
 801dd34:	61bb      	str	r3, [r7, #24]
 801dd36:	2300      	movs	r3, #0
 801dd38:	61fb      	str	r3, [r7, #28]
 801dd3a:	2300      	movs	r3, #0
 801dd3c:	623b      	str	r3, [r7, #32]
          AI_BUFFER_INIT(
 801dd3e:	2101      	movs	r1, #1
 801dd40:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801dd42:	f004 feef 	bl	8022b24 <get_tensor_size>
 801dd46:	4603      	mov	r3, r0
      ai_buffer buffer =
 801dd48:	627b      	str	r3, [r7, #36]	@ 0x24
          AI_BUFFER_INIT(
 801dd4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801dd4c:	781b      	ldrb	r3, [r3, #0]
      ai_buffer buffer =
 801dd4e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
          AI_BUFFER_INIT(
 801dd52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801dd54:	681b      	ldr	r3, [r3, #0]
 801dd56:	f3c3 2217 	ubfx	r2, r3, #8, #24
      ai_buffer buffer =
 801dd5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd5c:	f362 231f 	bfi	r3, r2, #8, #24
 801dd60:	62bb      	str	r3, [r7, #40]	@ 0x28
          AI_BUFFER_INIT(
 801dd62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801dd64:	685b      	ldr	r3, [r3, #4]
      ai_buffer buffer =
 801dd66:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                            shape->data),       /* shape */
            AI_TENSOR_SIZE(t),                                  /* size */
            NULL,                                               /* meta info */
            AI_TENSOR_ARRAY_GET_DATA_ADDR(t));                  /* data */

      uint32_t tens_flags = EnumTensorFlag_TENSOR_FLAG_INTERNAL;
 801dd68:	2304      	movs	r3, #4
 801dd6a:	673b      	str	r3, [r7, #112]	@ 0x70
      if (i == (GET_TENSOR_LIST_SIZE(tl) - 1U))
 801dd6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dd6e:	2b00      	cmp	r3, #0
 801dd70:	d003      	beq.n	801dd7a <aiOnExecNode_cb+0x21e>
 801dd72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dd74:	881b      	ldrh	r3, [r3, #0]
 801dd76:	3b01      	subs	r3, #1
 801dd78:	e001      	b.n	801dd7e <aiOnExecNode_cb+0x222>
 801dd7a:	f04f 33ff 	mov.w	r3, #4294967295
 801dd7e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801dd80:	4293      	cmp	r3, r2
 801dd82:	d103      	bne.n	801dd8c <aiOnExecNode_cb+0x230>
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 801dd84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dd86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801dd8a:	673b      	str	r3, [r7, #112]	@ 0x70
      if (obs_ctx->no_data)
 801dd8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dd8e:	7d1b      	ldrb	r3, [r3, #20]
 801dd90:	2b00      	cmp	r3, #0
 801dd92:	d003      	beq.n	801dd9c <aiOnExecNode_cb+0x240>
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 801dd94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dd96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801dd9a:	673b      	str	r3, [r7, #112]	@ 0x70

      send_ai_io_tensor(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 801dd9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dd9e:	68d8      	ldr	r0, [r3, #12]
 801dda0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dda2:	6919      	ldr	r1, [r3, #16]
 801dda4:	f107 0214 	add.w	r2, r7, #20
 801dda8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ddaa:	9301      	str	r3, [sp, #4]
 801ddac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ddae:	9300      	str	r3, [sp, #0]
 801ddb0:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 801ddb4:	4613      	mov	r3, r2
 801ddb6:	2202      	movs	r2, #2
 801ddb8:	f7ff fe3c 	bl	801da34 <send_ai_io_tensor>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 801ddbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ddbe:	3301      	adds	r3, #1
 801ddc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 801ddc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ddc4:	2b00      	cmp	r3, #0
 801ddc6:	d003      	beq.n	801ddd0 <aiOnExecNode_cb+0x274>
 801ddc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ddca:	881b      	ldrh	r3, [r3, #0]
 801ddcc:	461a      	mov	r2, r3
 801ddce:	e000      	b.n	801ddd2 <aiOnExecNode_cb+0x276>
 801ddd0:	2200      	movs	r2, #0
 801ddd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ddd4:	429a      	cmp	r2, r3
 801ddd6:	d910      	bls.n	801ddfa <aiOnExecNode_cb+0x29e>
 801ddd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ddda:	685b      	ldr	r3, [r3, #4]
 801dddc:	2b00      	cmp	r3, #0
 801ddde:	d006      	beq.n	801ddee <aiOnExecNode_cb+0x292>
 801dde0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dde2:	685a      	ldr	r2, [r3, #4]
 801dde4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dde6:	009b      	lsls	r3, r3, #2
 801dde8:	4413      	add	r3, r2
 801ddea:	681b      	ldr	r3, [r3, #0]
 801ddec:	e000      	b.n	801ddf0 <aiOnExecNode_cb+0x294>
 801ddee:	2300      	movs	r3, #0
 801ddf0:	663b      	str	r3, [r7, #96]	@ 0x60
 801ddf2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ddf4:	2b00      	cmp	r3, #0
 801ddf6:	f47f af43 	bne.w	801dc80 <aiOnExecNode_cb+0x124>
          &buffer, tens_flags, scale, zero_point);
    }
    obs_ctx->tcom += cyclesCounterEnd();
 801ddfa:	f7ff f935 	bl	801d068 <cyclesCounterEnd>
 801ddfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801de00:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801de04:	1884      	adds	r4, r0, r2
 801de06:	eb41 0503 	adc.w	r5, r1, r3
 801de0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801de0c:	e9c3 4506 	strd	r4, r5, [r3, #24]
  }

  cyclesCounterStart();
 801de10:	f7ff f916 	bl	801d040 <cyclesCounterStart>
  return 0;
 801de14:	2300      	movs	r3, #0
}
 801de16:	4618      	mov	r0, r3
 801de18:	3780      	adds	r7, #128	@ 0x80
 801de1a:	46bd      	mov	sp, r7
 801de1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801de20 <aiObserverAdjustInferenceTime>:
#endif


static uint64_t aiObserverAdjustInferenceTime(struct ai_network_exec_ctx *ctx,
    uint64_t tend)
{
 801de20:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 801de24:	b087      	sub	sp, #28
 801de26:	af00      	add	r7, sp, #0
 801de28:	60f8      	str	r0, [r7, #12]
 801de2a:	e9c7 2300 	strd	r2, r3, [r7]
   * tnodes = nn.init + nn.l0 + nn.l1 ...
   * tcom   = tl0 + tl1 + ...
   * tend   = nn.done
   *
   */
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 801de2e:	68fb      	ldr	r3, [r7, #12]
 801de30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801de34:	617b      	str	r3, [r7, #20]
  tend = obs_ctx->tcom + obs_ctx->tnodes + tend;
 801de36:	697b      	ldr	r3, [r7, #20]
 801de38:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 801de3c:	697b      	ldr	r3, [r7, #20]
 801de3e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801de42:	1884      	adds	r4, r0, r2
 801de44:	eb41 0503 	adc.w	r5, r1, r3
 801de48:	e9d7 2300 	ldrd	r2, r3, [r7]
 801de4c:	eb12 0804 	adds.w	r8, r2, r4
 801de50:	eb43 0905 	adc.w	r9, r3, r5
 801de54:	e9c7 8900 	strd	r8, r9, [r7]
#endif
  return tend;
 801de58:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 801de5c:	4610      	mov	r0, r2
 801de5e:	4619      	mov	r1, r3
 801de60:	371c      	adds	r7, #28
 801de62:	46bd      	mov	sp, r7
 801de64:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 801de68:	4770      	bx	lr
	...

0801de6c <aiObserverConfig>:

static int aiObserverConfig(struct ai_network_exec_ctx *ctx)
{
 801de6c:	b480      	push	{r7}
 801de6e:	b083      	sub	sp, #12
 801de70:	af00      	add	r7, sp, #0
 801de72:	6078      	str	r0, [r7, #4]
#ifdef HAS_OBSERVER
  net_obs_ctx.no_data = true;
 801de74:	4b1b      	ldr	r3, [pc, #108]	@ (801dee4 <aiObserverConfig+0x78>)
 801de76:	2201      	movs	r2, #1
 801de78:	751a      	strb	r2, [r3, #20]
  net_obs_ctx.is_enabled = false;
 801de7a:	4b1a      	ldr	r3, [pc, #104]	@ (801dee4 <aiObserverConfig+0x78>)
 801de7c:	2200      	movs	r2, #0
 801de7e:	701a      	strb	r2, [r3, #0]

  if (ctx->observer_is_enabled)
 801de80:	687b      	ldr	r3, [r7, #4]
 801de82:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 801de86:	2b00      	cmp	r3, #0
 801de88:	d002      	beq.n	801de90 <aiObserverConfig+0x24>
    net_obs_ctx.is_enabled = true;
 801de8a:	4b16      	ldr	r3, [pc, #88]	@ (801dee4 <aiObserverConfig+0x78>)
 801de8c:	2201      	movs	r2, #1
 801de8e:	701a      	strb	r2, [r3, #0]

  if (ctx->emit_intermediate_data) {
 801de90:	687b      	ldr	r3, [r7, #4]
 801de92:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 801de96:	2b00      	cmp	r3, #0
 801de98:	d005      	beq.n	801dea6 <aiObserverConfig+0x3a>
    net_obs_ctx.is_enabled = true;
 801de9a:	4b12      	ldr	r3, [pc, #72]	@ (801dee4 <aiObserverConfig+0x78>)
 801de9c:	2201      	movs	r2, #1
 801de9e:	701a      	strb	r2, [r3, #0]
    net_obs_ctx.no_data = false;
 801dea0:	4b10      	ldr	r3, [pc, #64]	@ (801dee4 <aiObserverConfig+0x78>)
 801dea2:	2200      	movs	r2, #0
 801dea4:	751a      	strb	r2, [r3, #20]
  }

  net_obs_ctx.tcom = 0ULL;
 801dea6:	490f      	ldr	r1, [pc, #60]	@ (801dee4 <aiObserverConfig+0x78>)
 801dea8:	f04f 0200 	mov.w	r2, #0
 801deac:	f04f 0300 	mov.w	r3, #0
 801deb0:	e9c1 2306 	strd	r2, r3, [r1, #24]
  net_obs_ctx.tnodes = 0ULL;
 801deb4:	490b      	ldr	r1, [pc, #44]	@ (801dee4 <aiObserverConfig+0x78>)
 801deb6:	f04f 0200 	mov.w	r2, #0
 801deba:	f04f 0300 	mov.w	r3, #0
 801debe:	e9c1 2308 	strd	r2, r3, [r1, #32]
  net_obs_ctx.n_cb_in  = 0;
 801dec2:	4b08      	ldr	r3, [pc, #32]	@ (801dee4 <aiObserverConfig+0x78>)
 801dec4:	2200      	movs	r2, #0
 801dec6:	605a      	str	r2, [r3, #4]
  net_obs_ctx.n_cb_out = 0;
 801dec8:	4b06      	ldr	r3, [pc, #24]	@ (801dee4 <aiObserverConfig+0x78>)
 801deca:	2200      	movs	r2, #0
 801decc:	609a      	str	r2, [r3, #8]

  ctx->obs_ctx = &net_obs_ctx;
 801dece:	687b      	ldr	r3, [r7, #4]
 801ded0:	4a04      	ldr	r2, [pc, #16]	@ (801dee4 <aiObserverConfig+0x78>)
 801ded2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

#endif /* HAS_OBSERVER */

return 0;
 801ded6:	2300      	movs	r3, #0
}
 801ded8:	4618      	mov	r0, r3
 801deda:	370c      	adds	r7, #12
 801dedc:	46bd      	mov	sp, r7
 801dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dee2:	4770      	bx	lr
 801dee4:	24031db8 	.word	0x24031db8

0801dee8 <aiObserverBind>:

static int aiObserverBind(struct ai_network_exec_ctx *ctx,
    const reqMsg *creq, respMsg *cresp)
{
 801dee8:	b580      	push	{r7, lr}
 801deea:	b096      	sub	sp, #88	@ 0x58
 801deec:	af00      	add	r7, sp, #0
 801deee:	60f8      	str	r0, [r7, #12]
 801def0:	60b9      	str	r1, [r7, #8]
 801def2:	607a      	str	r2, [r7, #4]
#ifdef HAS_OBSERVER
  ai_handle net_hdl;
  ai_network_params pparams;
  ai_bool res;

  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 801def4:	68fb      	ldr	r3, [r7, #12]
 801def6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801defa:	657b      	str	r3, [r7, #84]	@ 0x54

  if (obs_ctx->is_enabled == false)
 801defc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801defe:	781b      	ldrb	r3, [r3, #0]
 801df00:	f083 0301 	eor.w	r3, r3, #1
 801df04:	b2db      	uxtb	r3, r3
 801df06:	2b00      	cmp	r3, #0
 801df08:	d001      	beq.n	801df0e <aiObserverBind+0x26>
    return 0;
 801df0a:	2300      	movs	r3, #0
 801df0c:	e033      	b.n	801df76 <aiObserverBind+0x8e>

  if (ctx->handle == AI_HANDLE_NULL)
 801df0e:	68fb      	ldr	r3, [r7, #12]
 801df10:	681b      	ldr	r3, [r3, #0]
 801df12:	2b00      	cmp	r3, #0
 801df14:	d102      	bne.n	801df1c <aiObserverBind+0x34>
    return -1;
 801df16:	f04f 33ff 	mov.w	r3, #4294967295
 801df1a:	e02c      	b.n	801df76 <aiObserverBind+0x8e>

  obs_ctx->creq = creq;
 801df1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801df1e:	68ba      	ldr	r2, [r7, #8]
 801df20:	60da      	str	r2, [r3, #12]
  obs_ctx->cresp = cresp;
 801df22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801df24:	687a      	ldr	r2, [r7, #4]
 801df26:	611a      	str	r2, [r3, #16]

  /* retrieve real net handle to use the AI platform API */
  ai_mnetwork_get_private_handle(ctx->handle,
 801df28:	68fb      	ldr	r3, [r7, #12]
 801df2a:	681b      	ldr	r3, [r3, #0]
 801df2c:	f107 0214 	add.w	r2, r7, #20
 801df30:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 801df34:	4618      	mov	r0, r3
 801df36:	f000 ff77 	bl	801ee28 <ai_mnetwork_get_private_handle>
      &net_hdl,
      &pparams);

  /* register the user call-back */
  obs_ctx->plt_ctx.on_node = aiOnExecNode_cb;
 801df3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801df3c:	4a10      	ldr	r2, [pc, #64]	@ (801df80 <aiObserverBind+0x98>)
 801df3e:	629a      	str	r2, [r3, #40]	@ 0x28
  obs_ctx->plt_ctx.cookie = (ai_handle)ctx;
 801df40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801df42:	68fa      	ldr	r2, [r7, #12]
 801df44:	62da      	str	r2, [r3, #44]	@ 0x2c
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 801df46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801df48:	2206      	movs	r2, #6
 801df4a:	631a      	str	r2, [r3, #48]	@ 0x30

  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 801df4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801df4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801df50:	3328      	adds	r3, #40	@ 0x28
 801df52:	4619      	mov	r1, r3
 801df54:	4610      	mov	r0, r2
 801df56:	f005 fd47 	bl	80239e8 <ai_platform_observer_register_s>
 801df5a:	4603      	mov	r3, r0
 801df5c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  if (!res) {
 801df60:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 801df64:	f083 0301 	eor.w	r3, r3, #1
 801df68:	b2db      	uxtb	r3, r3
 801df6a:	2b00      	cmp	r3, #0
 801df6c:	d002      	beq.n	801df74 <aiObserverBind+0x8c>
    return -1;
 801df6e:	f04f 33ff 	mov.w	r3, #4294967295
 801df72:	e000      	b.n	801df76 <aiObserverBind+0x8e>
  }

#endif /* HAS_OBSERVER */

  return 0;
 801df74:	2300      	movs	r3, #0
}
 801df76:	4618      	mov	r0, r3
 801df78:	3758      	adds	r7, #88	@ 0x58
 801df7a:	46bd      	mov	sp, r7
 801df7c:	bd80      	pop	{r7, pc}
 801df7e:	bf00      	nop
 801df80:	0801db5d 	.word	0x0801db5d

0801df84 <aiObserverUnbind>:

static int aiObserverUnbind(struct ai_network_exec_ctx *ctx)
{
 801df84:	b580      	push	{r7, lr}
 801df86:	b092      	sub	sp, #72	@ 0x48
 801df88:	af00      	add	r7, sp, #0
 801df8a:	6078      	str	r0, [r7, #4]
#ifdef HAS_OBSERVER
  ai_handle net_hdl;
  ai_network_params pparams;

  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 801df8c:	687b      	ldr	r3, [r7, #4]
 801df8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801df92:	647b      	str	r3, [r7, #68]	@ 0x44

  if (obs_ctx->is_enabled == false)
 801df94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801df96:	781b      	ldrb	r3, [r3, #0]
 801df98:	f083 0301 	eor.w	r3, r3, #1
 801df9c:	b2db      	uxtb	r3, r3
 801df9e:	2b00      	cmp	r3, #0
 801dfa0:	d001      	beq.n	801dfa6 <aiObserverUnbind+0x22>
    return 0;
 801dfa2:	2300      	movs	r3, #0
 801dfa4:	e010      	b.n	801dfc8 <aiObserverUnbind+0x44>

  /* retrieve real handle */
  ai_mnetwork_get_private_handle(ctx->handle, &net_hdl, &pparams);
 801dfa6:	687b      	ldr	r3, [r7, #4]
 801dfa8:	681b      	ldr	r3, [r3, #0]
 801dfaa:	f107 0208 	add.w	r2, r7, #8
 801dfae:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801dfb2:	4618      	mov	r0, r3
 801dfb4:	f000 ff38 	bl	801ee28 <ai_mnetwork_get_private_handle>

  /* un-register the call-back */
  ai_platform_observer_unregister_s(net_hdl, &obs_ctx->plt_ctx);
 801dfb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801dfba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dfbc:	3328      	adds	r3, #40	@ 0x28
 801dfbe:	4619      	mov	r1, r3
 801dfc0:	4610      	mov	r0, r2
 801dfc2:	f005 fd47 	bl	8023a54 <ai_platform_observer_unregister_s>
#endif
  return 0;
 801dfc6:	2300      	movs	r3, #0
}
 801dfc8:	4618      	mov	r0, r3
 801dfca:	3748      	adds	r7, #72	@ 0x48
 801dfcc:	46bd      	mov	sp, r7
 801dfce:	bd80      	pop	{r7, pc}

0801dfd0 <aiExecCtx>:
 * AI-related functions
 * -----------------------------------------------------------------------------
 */

static struct ai_network_exec_ctx *aiExecCtx(const char *nn_name, int pos)
{
 801dfd0:	b590      	push	{r4, r7, lr}
 801dfd2:	b085      	sub	sp, #20
 801dfd4:	af00      	add	r7, sp, #0
 801dfd6:	6078      	str	r0, [r7, #4]
 801dfd8:	6039      	str	r1, [r7, #0]
  struct ai_network_exec_ctx *cur = NULL;
 801dfda:	2300      	movs	r3, #0
 801dfdc:	60fb      	str	r3, [r7, #12]

  if (!nn_name)
 801dfde:	687b      	ldr	r3, [r7, #4]
 801dfe0:	2b00      	cmp	r3, #0
 801dfe2:	d101      	bne.n	801dfe8 <aiExecCtx+0x18>
    return NULL;
 801dfe4:	2300      	movs	r3, #0
 801dfe6:	e052      	b.n	801e08e <aiExecCtx+0xbe>

  if (!nn_name[0]) {
 801dfe8:	687b      	ldr	r3, [r7, #4]
 801dfea:	781b      	ldrb	r3, [r3, #0]
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	d118      	bne.n	801e022 <aiExecCtx+0x52>
    if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER) && net_exec_ctx[pos].handle)
 801dff0:	683b      	ldr	r3, [r7, #0]
 801dff2:	2b00      	cmp	r3, #0
 801dff4:	db4a      	blt.n	801e08c <aiExecCtx+0xbc>
 801dff6:	683b      	ldr	r3, [r7, #0]
 801dff8:	2b00      	cmp	r3, #0
 801dffa:	dc47      	bgt.n	801e08c <aiExecCtx+0xbc>
 801dffc:	4926      	ldr	r1, [pc, #152]	@ (801e098 <aiExecCtx+0xc8>)
 801dffe:	683a      	ldr	r2, [r7, #0]
 801e000:	4613      	mov	r3, r2
 801e002:	009b      	lsls	r3, r3, #2
 801e004:	4413      	add	r3, r2
 801e006:	015b      	lsls	r3, r3, #5
 801e008:	440b      	add	r3, r1
 801e00a:	681b      	ldr	r3, [r3, #0]
 801e00c:	2b00      	cmp	r3, #0
 801e00e:	d03d      	beq.n	801e08c <aiExecCtx+0xbc>
      cur = &net_exec_ctx[pos];
 801e010:	683a      	ldr	r2, [r7, #0]
 801e012:	4613      	mov	r3, r2
 801e014:	009b      	lsls	r3, r3, #2
 801e016:	4413      	add	r3, r2
 801e018:	015b      	lsls	r3, r3, #5
 801e01a:	4a1f      	ldr	r2, [pc, #124]	@ (801e098 <aiExecCtx+0xc8>)
 801e01c:	4413      	add	r3, r2
 801e01e:	60fb      	str	r3, [r7, #12]
 801e020:	e034      	b.n	801e08c <aiExecCtx+0xbc>
  } else {
    int idx;
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 801e022:	2300      	movs	r3, #0
 801e024:	60bb      	str	r3, [r7, #8]
 801e026:	e02c      	b.n	801e082 <aiExecCtx+0xb2>
      cur = &net_exec_ctx[idx];
 801e028:	68ba      	ldr	r2, [r7, #8]
 801e02a:	4613      	mov	r3, r2
 801e02c:	009b      	lsls	r3, r3, #2
 801e02e:	4413      	add	r3, r2
 801e030:	015b      	lsls	r3, r3, #5
 801e032:	4a19      	ldr	r2, [pc, #100]	@ (801e098 <aiExecCtx+0xc8>)
 801e034:	4413      	add	r3, r2
 801e036:	60fb      	str	r3, [r7, #12]
      if (cur->handle &&
 801e038:	68fb      	ldr	r3, [r7, #12]
 801e03a:	681b      	ldr	r3, [r3, #0]
 801e03c:	2b00      	cmp	r3, #0
 801e03e:	d01b      	beq.n	801e078 <aiExecCtx+0xa8>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 801e040:	68fb      	ldr	r3, [r7, #12]
 801e042:	689b      	ldr	r3, [r3, #8]
 801e044:	4618      	mov	r0, r3
 801e046:	f7f2 f84b 	bl	80100e0 <strlen>
 801e04a:	4604      	mov	r4, r0
 801e04c:	6878      	ldr	r0, [r7, #4]
 801e04e:	f7f2 f847 	bl	80100e0 <strlen>
 801e052:	4603      	mov	r3, r0
      if (cur->handle &&
 801e054:	429c      	cmp	r4, r3
 801e056:	d10f      	bne.n	801e078 <aiExecCtx+0xa8>
          (strncmp(cur->report.model_name, nn_name,
 801e058:	68fb      	ldr	r3, [r7, #12]
 801e05a:	689c      	ldr	r4, [r3, #8]
 801e05c:	68fb      	ldr	r3, [r7, #12]
 801e05e:	689b      	ldr	r3, [r3, #8]
 801e060:	4618      	mov	r0, r3
 801e062:	f7f2 f83d 	bl	80100e0 <strlen>
 801e066:	4603      	mov	r3, r0
 801e068:	461a      	mov	r2, r3
 801e06a:	6879      	ldr	r1, [r7, #4]
 801e06c:	4620      	mov	r0, r4
 801e06e:	f015 ff18 	bl	8033ea2 <strncmp>
 801e072:	4603      	mov	r3, r0
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 801e074:	2b00      	cmp	r3, #0
 801e076:	d008      	beq.n	801e08a <aiExecCtx+0xba>
              strlen(cur->report.model_name)) == 0)) {
        break;
      }
      cur = NULL;
 801e078:	2300      	movs	r3, #0
 801e07a:	60fb      	str	r3, [r7, #12]
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 801e07c:	68bb      	ldr	r3, [r7, #8]
 801e07e:	3301      	adds	r3, #1
 801e080:	60bb      	str	r3, [r7, #8]
 801e082:	68bb      	ldr	r3, [r7, #8]
 801e084:	2b00      	cmp	r3, #0
 801e086:	ddcf      	ble.n	801e028 <aiExecCtx+0x58>
 801e088:	e000      	b.n	801e08c <aiExecCtx+0xbc>
        break;
 801e08a:	bf00      	nop
    }
  }
  return cur;
 801e08c:	68fb      	ldr	r3, [r7, #12]
}
 801e08e:	4618      	mov	r0, r3
 801e090:	3714      	adds	r7, #20
 801e092:	46bd      	mov	sp, r7
 801e094:	bd90      	pop	{r4, r7, pc}
 801e096:	bf00      	nop
 801e098:	24031df8 	.word	0x24031df8

0801e09c <aiBootstrap>:

static int aiBootstrap(struct ai_network_exec_ctx *ctx, const char *nn_name)
{
 801e09c:	b580      	push	{r7, lr}
 801e09e:	b086      	sub	sp, #24
 801e0a0:	af00      	add	r7, sp, #0
 801e0a2:	6078      	str	r0, [r7, #4]
 801e0a4:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* Creating the instance of the  network ------------------------- */
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 801e0a6:	6839      	ldr	r1, [r7, #0]
 801e0a8:	4871      	ldr	r0, [pc, #452]	@ (801e270 <aiBootstrap+0x1d4>)
 801e0aa:	f7fe fb35 	bl	801c718 <lc_print>

  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 801e0ae:	687b      	ldr	r3, [r7, #4]
 801e0b0:	2200      	movs	r2, #0
 801e0b2:	4619      	mov	r1, r3
 801e0b4:	6838      	ldr	r0, [r7, #0]
 801e0b6:	f000 fd97 	bl	801ebe8 <ai_mnetwork_create>
 801e0ba:	4603      	mov	r3, r0
 801e0bc:	60fb      	str	r3, [r7, #12]
  if (err.type) {
 801e0be:	7b3b      	ldrb	r3, [r7, #12]
 801e0c0:	2b00      	cmp	r3, #0
 801e0c2:	d006      	beq.n	801e0d2 <aiBootstrap+0x36>
    aiLogErr(err, "ai_mnetwork_create");
 801e0c4:	496b      	ldr	r1, [pc, #428]	@ (801e274 <aiBootstrap+0x1d8>)
 801e0c6:	68f8      	ldr	r0, [r7, #12]
 801e0c8:	f7fd fe06 	bl	801bcd8 <aiLogErr>
    return -1;
 801e0cc:	f04f 33ff 	mov.w	r3, #4294967295
 801e0d0:	e0ca      	b.n	801e268 <aiBootstrap+0x1cc>
  }

  /* Initialize the instance --------------------------------------- */
  LC_PRINT("Initializing the network\r\n");
 801e0d2:	4869      	ldr	r0, [pc, #420]	@ (801e278 <aiBootstrap+0x1dc>)
 801e0d4:	f7fe fb20 	bl	801c718 <lc_print>

  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 801e0d8:	687b      	ldr	r3, [r7, #4]
 801e0da:	681a      	ldr	r2, [r3, #0]
 801e0dc:	687b      	ldr	r3, [r7, #4]
 801e0de:	3308      	adds	r3, #8
 801e0e0:	4619      	mov	r1, r3
 801e0e2:	4610      	mov	r0, r2
 801e0e4:	f000 fe0e 	bl	801ed04 <ai_mnetwork_get_report>
 801e0e8:	4603      	mov	r3, r0
 801e0ea:	f083 0301 	eor.w	r3, r3, #1
 801e0ee:	b2db      	uxtb	r3, r3
 801e0f0:	2b00      	cmp	r3, #0
 801e0f2:	d015      	beq.n	801e120 <aiBootstrap+0x84>
    err = ai_mnetwork_get_error(ctx->handle);
 801e0f4:	687b      	ldr	r3, [r7, #4]
 801e0f6:	681b      	ldr	r3, [r3, #0]
 801e0f8:	4618      	mov	r0, r3
 801e0fa:	f000 fe1e 	bl	801ed3a <ai_mnetwork_get_error>
 801e0fe:	4603      	mov	r3, r0
 801e100:	60fb      	str	r3, [r7, #12]
    aiLogErr(err, "ai_mnetwork_get_info");
 801e102:	495e      	ldr	r1, [pc, #376]	@ (801e27c <aiBootstrap+0x1e0>)
 801e104:	68f8      	ldr	r0, [r7, #12]
 801e106:	f7fd fde7 	bl	801bcd8 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 801e10a:	687b      	ldr	r3, [r7, #4]
 801e10c:	681b      	ldr	r3, [r3, #0]
 801e10e:	4618      	mov	r0, r3
 801e110:	f000 fdd6 	bl	801ecc0 <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 801e114:	687b      	ldr	r3, [r7, #4]
 801e116:	2200      	movs	r2, #0
 801e118:	601a      	str	r2, [r3, #0]
    return -2;
 801e11a:	f06f 0301 	mvn.w	r3, #1
 801e11e:	e0a3      	b.n	801e268 <aiBootstrap+0x1cc>
  }

  if (!ai_mnetwork_init(ctx->handle)) {
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	681b      	ldr	r3, [r3, #0]
 801e124:	4618      	mov	r0, r3
 801e126:	f000 fe28 	bl	801ed7a <ai_mnetwork_init>
 801e12a:	4603      	mov	r3, r0
 801e12c:	f083 0301 	eor.w	r3, r3, #1
 801e130:	b2db      	uxtb	r3, r3
 801e132:	2b00      	cmp	r3, #0
 801e134:	d015      	beq.n	801e162 <aiBootstrap+0xc6>
    err = ai_mnetwork_get_error(ctx->handle);
 801e136:	687b      	ldr	r3, [r7, #4]
 801e138:	681b      	ldr	r3, [r3, #0]
 801e13a:	4618      	mov	r0, r3
 801e13c:	f000 fdfd 	bl	801ed3a <ai_mnetwork_get_error>
 801e140:	4603      	mov	r3, r0
 801e142:	60fb      	str	r3, [r7, #12]
    aiLogErr(err, "ai_mnetwork_init");
 801e144:	494e      	ldr	r1, [pc, #312]	@ (801e280 <aiBootstrap+0x1e4>)
 801e146:	68f8      	ldr	r0, [r7, #12]
 801e148:	f7fd fdc6 	bl	801bcd8 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	681b      	ldr	r3, [r3, #0]
 801e150:	4618      	mov	r0, r3
 801e152:	f000 fdb5 	bl	801ecc0 <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 801e156:	687b      	ldr	r3, [r7, #4]
 801e158:	2200      	movs	r2, #0
 801e15a:	601a      	str	r2, [r3, #0]
    return -4;
 801e15c:	f06f 0303 	mvn.w	r3, #3
 801e160:	e082      	b.n	801e268 <aiBootstrap+0x1cc>
  }

  /* Display the network info -------------------------------------- */
  if (ai_mnetwork_get_report(ctx->handle,
 801e162:	687b      	ldr	r3, [r7, #4]
 801e164:	681a      	ldr	r2, [r3, #0]
 801e166:	687b      	ldr	r3, [r7, #4]
 801e168:	3308      	adds	r3, #8
 801e16a:	4619      	mov	r1, r3
 801e16c:	4610      	mov	r0, r2
 801e16e:	f000 fdc9 	bl	801ed04 <ai_mnetwork_get_report>
 801e172:	4603      	mov	r3, r0
 801e174:	2b00      	cmp	r3, #0
 801e176:	d00f      	beq.n	801e198 <aiBootstrap+0xfc>
      &ctx->report)) {
    aiPrintNetworkInfo(&ctx->report);
 801e178:	687b      	ldr	r3, [r7, #4]
 801e17a:	3308      	adds	r3, #8
 801e17c:	4618      	mov	r0, r3
 801e17e:	f7fe f8a5 	bl	801c2cc <aiPrintNetworkInfo>
    ai_mnetwork_destroy(ctx->handle);
    ctx->handle = AI_HANDLE_NULL;
    return -2;
  }

  ctx->inputs_in_activations = false;
 801e182:	687b      	ldr	r3, [r7, #4]
 801e184:	2200      	movs	r2, #0
 801e186:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
  ctx->outputs_in_activations = false;
 801e18a:	687b      	ldr	r3, [r7, #4]
 801e18c:	2200      	movs	r2, #0
 801e18e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  for (int i = 0; i < ctx->report.n_inputs; i++) {
 801e192:	2300      	movs	r3, #0
 801e194:	617b      	str	r3, [r7, #20]
 801e196:	e035      	b.n	801e204 <aiBootstrap+0x168>
    err = ai_mnetwork_get_error(ctx->handle);
 801e198:	687b      	ldr	r3, [r7, #4]
 801e19a:	681b      	ldr	r3, [r3, #0]
 801e19c:	4618      	mov	r0, r3
 801e19e:	f000 fdcc 	bl	801ed3a <ai_mnetwork_get_error>
 801e1a2:	4603      	mov	r3, r0
 801e1a4:	60fb      	str	r3, [r7, #12]
    aiLogErr(err, "ai_mnetwork_get_info");
 801e1a6:	4935      	ldr	r1, [pc, #212]	@ (801e27c <aiBootstrap+0x1e0>)
 801e1a8:	68f8      	ldr	r0, [r7, #12]
 801e1aa:	f7fd fd95 	bl	801bcd8 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 801e1ae:	687b      	ldr	r3, [r7, #4]
 801e1b0:	681b      	ldr	r3, [r3, #0]
 801e1b2:	4618      	mov	r0, r3
 801e1b4:	f000 fd84 	bl	801ecc0 <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 801e1b8:	687b      	ldr	r3, [r7, #4]
 801e1ba:	2200      	movs	r2, #0
 801e1bc:	601a      	str	r2, [r3, #0]
    return -2;
 801e1be:	f06f 0301 	mvn.w	r3, #1
 801e1c2:	e051      	b.n	801e268 <aiBootstrap+0x1cc>
    if (!ctx->report.inputs[i].data)
 801e1c4:	687b      	ldr	r3, [r7, #4]
 801e1c6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 801e1c8:	697a      	ldr	r2, [r7, #20]
 801e1ca:	4613      	mov	r3, r2
 801e1cc:	00db      	lsls	r3, r3, #3
 801e1ce:	1a9b      	subs	r3, r3, r2
 801e1d0:	009b      	lsls	r3, r3, #2
 801e1d2:	440b      	add	r3, r1
 801e1d4:	685b      	ldr	r3, [r3, #4]
 801e1d6:	2b00      	cmp	r3, #0
 801e1d8:	d10d      	bne.n	801e1f6 <aiBootstrap+0x15a>
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 801e1da:	687b      	ldr	r3, [r7, #4]
 801e1dc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 801e1de:	697a      	ldr	r2, [r7, #20]
 801e1e0:	4613      	mov	r3, r2
 801e1e2:	00db      	lsls	r3, r3, #3
 801e1e4:	1a9b      	subs	r3, r3, r2
 801e1e6:	009b      	lsls	r3, r3, #2
 801e1e8:	440b      	add	r3, r1
 801e1ea:	4926      	ldr	r1, [pc, #152]	@ (801e284 <aiBootstrap+0x1e8>)
 801e1ec:	697a      	ldr	r2, [r7, #20]
 801e1ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801e1f2:	605a      	str	r2, [r3, #4]
 801e1f4:	e003      	b.n	801e1fe <aiBootstrap+0x162>
    else
      ctx->inputs_in_activations = true;
 801e1f6:	687b      	ldr	r3, [r7, #4]
 801e1f8:	2201      	movs	r2, #1
 801e1fa:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 801e1fe:	697b      	ldr	r3, [r7, #20]
 801e200:	3301      	adds	r3, #1
 801e202:	617b      	str	r3, [r7, #20]
 801e204:	687b      	ldr	r3, [r7, #4]
 801e206:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801e20a:	461a      	mov	r2, r3
 801e20c:	697b      	ldr	r3, [r7, #20]
 801e20e:	4293      	cmp	r3, r2
 801e210:	dbd8      	blt.n	801e1c4 <aiBootstrap+0x128>
  }

  for (int i = 0; i < ctx->report.n_outputs; i++) {
 801e212:	2300      	movs	r3, #0
 801e214:	613b      	str	r3, [r7, #16]
 801e216:	e01f      	b.n	801e258 <aiBootstrap+0x1bc>
    if (!ctx->report.outputs[i].data)
 801e218:	687b      	ldr	r3, [r7, #4]
 801e21a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 801e21c:	693a      	ldr	r2, [r7, #16]
 801e21e:	4613      	mov	r3, r2
 801e220:	00db      	lsls	r3, r3, #3
 801e222:	1a9b      	subs	r3, r3, r2
 801e224:	009b      	lsls	r3, r3, #2
 801e226:	440b      	add	r3, r1
 801e228:	685b      	ldr	r3, [r3, #4]
 801e22a:	2b00      	cmp	r3, #0
 801e22c:	d10d      	bne.n	801e24a <aiBootstrap+0x1ae>
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 801e22e:	687b      	ldr	r3, [r7, #4]
 801e230:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 801e232:	693a      	ldr	r2, [r7, #16]
 801e234:	4613      	mov	r3, r2
 801e236:	00db      	lsls	r3, r3, #3
 801e238:	1a9b      	subs	r3, r3, r2
 801e23a:	009b      	lsls	r3, r3, #2
 801e23c:	440b      	add	r3, r1
 801e23e:	4912      	ldr	r1, [pc, #72]	@ (801e288 <aiBootstrap+0x1ec>)
 801e240:	693a      	ldr	r2, [r7, #16]
 801e242:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801e246:	605a      	str	r2, [r3, #4]
 801e248:	e003      	b.n	801e252 <aiBootstrap+0x1b6>
    else
      ctx->outputs_in_activations = true;
 801e24a:	687b      	ldr	r3, [r7, #4]
 801e24c:	2201      	movs	r2, #1
 801e24e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 801e252:	693b      	ldr	r3, [r7, #16]
 801e254:	3301      	adds	r3, #1
 801e256:	613b      	str	r3, [r7, #16]
 801e258:	687b      	ldr	r3, [r7, #4]
 801e25a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 801e25e:	461a      	mov	r2, r3
 801e260:	693b      	ldr	r3, [r7, #16]
 801e262:	4293      	cmp	r3, r2
 801e264:	dbd8      	blt.n	801e218 <aiBootstrap+0x17c>
  }

  return 0;
 801e266:	2300      	movs	r3, #0
}
 801e268:	4618      	mov	r0, r3
 801e26a:	3718      	adds	r7, #24
 801e26c:	46bd      	mov	sp, r7
 801e26e:	bd80      	pop	{r7, pc}
 801e270:	08037d5c 	.word	0x08037d5c
 801e274:	08037d7c 	.word	0x08037d7c
 801e278:	08037d90 	.word	0x08037d90
 801e27c:	08037dac 	.word	0x08037dac
 801e280:	08037dc4 	.word	0x08037dc4
 801e284:	2400004c 	.word	0x2400004c
 801e288:	24000050 	.word	0x24000050

0801e28c <aiInit>:

static int aiInit(void)
{
 801e28c:	b580      	push	{r7, lr}
 801e28e:	b084      	sub	sp, #16
 801e290:	af00      	add	r7, sp, #0
  int res = -1;
 801e292:	f04f 33ff 	mov.w	r3, #4294967295
 801e296:	60fb      	str	r3, [r7, #12]
  const char *nn_name;
  int idx;

  aiPlatformVersion();
 801e298:	f7fd fce2 	bl	801bc60 <aiPlatformVersion>

  /* Reset the contexts -------------------------------------------- */
  for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 801e29c:	2300      	movs	r3, #0
 801e29e:	607b      	str	r3, [r7, #4]
 801e2a0:	e00b      	b.n	801e2ba <aiInit+0x2e>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 801e2a2:	491e      	ldr	r1, [pc, #120]	@ (801e31c <aiInit+0x90>)
 801e2a4:	687a      	ldr	r2, [r7, #4]
 801e2a6:	4613      	mov	r3, r2
 801e2a8:	009b      	lsls	r3, r3, #2
 801e2aa:	4413      	add	r3, r2
 801e2ac:	015b      	lsls	r3, r3, #5
 801e2ae:	440b      	add	r3, r1
 801e2b0:	2200      	movs	r2, #0
 801e2b2:	601a      	str	r2, [r3, #0]
  for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 801e2b4:	687b      	ldr	r3, [r7, #4]
 801e2b6:	3301      	adds	r3, #1
 801e2b8:	607b      	str	r3, [r7, #4]
 801e2ba:	687b      	ldr	r3, [r7, #4]
 801e2bc:	2b00      	cmp	r3, #0
 801e2be:	ddf0      	ble.n	801e2a2 <aiInit+0x16>
  }

  /* Discover and initialize the network(s) ------------------------ */
  LC_PRINT("Discovering the network(s)...\r\n");
 801e2c0:	4817      	ldr	r0, [pc, #92]	@ (801e320 <aiInit+0x94>)
 801e2c2:	f7fe fa29 	bl	801c718 <lc_print>

  idx = 0;
 801e2c6:	2300      	movs	r3, #0
 801e2c8:	607b      	str	r3, [r7, #4]
  do {
    nn_name = ai_mnetwork_find(NULL, idx);
 801e2ca:	6879      	ldr	r1, [r7, #4]
 801e2cc:	2000      	movs	r0, #0
 801e2ce:	f000 fc5d 	bl	801eb8c <ai_mnetwork_find>
 801e2d2:	60b8      	str	r0, [r7, #8]
    if (nn_name) {
 801e2d4:	68bb      	ldr	r3, [r7, #8]
 801e2d6:	2b00      	cmp	r3, #0
 801e2d8:	d014      	beq.n	801e304 <aiInit+0x78>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 801e2da:	68b9      	ldr	r1, [r7, #8]
 801e2dc:	4811      	ldr	r0, [pc, #68]	@ (801e324 <aiInit+0x98>)
 801e2de:	f7fe fa1b 	bl	801c718 <lc_print>
      res = aiBootstrap(&net_exec_ctx[idx], nn_name);
 801e2e2:	687a      	ldr	r2, [r7, #4]
 801e2e4:	4613      	mov	r3, r2
 801e2e6:	009b      	lsls	r3, r3, #2
 801e2e8:	4413      	add	r3, r2
 801e2ea:	015b      	lsls	r3, r3, #5
 801e2ec:	4a0b      	ldr	r2, [pc, #44]	@ (801e31c <aiInit+0x90>)
 801e2ee:	4413      	add	r3, r2
 801e2f0:	68b9      	ldr	r1, [r7, #8]
 801e2f2:	4618      	mov	r0, r3
 801e2f4:	f7ff fed2 	bl	801e09c <aiBootstrap>
 801e2f8:	60f8      	str	r0, [r7, #12]
      if (res)
 801e2fa:	68fb      	ldr	r3, [r7, #12]
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	d001      	beq.n	801e304 <aiInit+0x78>
        nn_name = NULL;
 801e300:	2300      	movs	r3, #0
 801e302:	60bb      	str	r3, [r7, #8]
    }
    idx++;
 801e304:	687b      	ldr	r3, [r7, #4]
 801e306:	3301      	adds	r3, #1
 801e308:	607b      	str	r3, [r7, #4]
  } while (nn_name);
 801e30a:	68bb      	ldr	r3, [r7, #8]
 801e30c:	2b00      	cmp	r3, #0
 801e30e:	d1dc      	bne.n	801e2ca <aiInit+0x3e>

  return res;
 801e310:	68fb      	ldr	r3, [r7, #12]
}
 801e312:	4618      	mov	r0, r3
 801e314:	3710      	adds	r7, #16
 801e316:	46bd      	mov	sp, r7
 801e318:	bd80      	pop	{r7, pc}
 801e31a:	bf00      	nop
 801e31c:	24031df8 	.word	0x24031df8
 801e320:	08037dd8 	.word	0x08037dd8
 801e324:	08037df8 	.word	0x08037df8

0801e328 <aiPbCmdSysInfo>:
 * Specific test APP commands
 * -----------------------------------------------------------------------------
 */

void aiPbCmdSysInfo(const reqMsg *req, respMsg *resp, void *param)
{
 801e328:	b580      	push	{r7, lr}
 801e32a:	b08c      	sub	sp, #48	@ 0x30
 801e32c:	af00      	add	r7, sp, #0
 801e32e:	60f8      	str	r0, [r7, #12]
 801e330:	60b9      	str	r1, [r7, #8]
 801e332:	607a      	str	r2, [r7, #4]
  UNUSED(param);
  struct mcu_conf conf;
  struct _encode_uint32 array_u32;

  getSysConf(&conf);
 801e334:	f107 031c 	add.w	r3, r7, #28
 801e338:	4618      	mov	r0, r3
 801e33a:	f7fe fd49 	bl	801cdd0 <getSysConf>

  resp->which_payload = respMsg_sinfo_tag;
 801e33e:	68bb      	ldr	r3, [r7, #8]
 801e340:	220b      	movs	r2, #11
 801e342:	80da      	strh	r2, [r3, #6]

  resp->payload.sinfo.devid = conf.devid;
 801e344:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e346:	68bb      	ldr	r3, [r7, #8]
 801e348:	609a      	str	r2, [r3, #8]
  resp->payload.sinfo.sclock = conf.sclk;
 801e34a:	69fa      	ldr	r2, [r7, #28]
 801e34c:	68bb      	ldr	r3, [r7, #8]
 801e34e:	60da      	str	r2, [r3, #12]
  resp->payload.sinfo.hclock = conf.hclk;
 801e350:	6a3a      	ldr	r2, [r7, #32]
 801e352:	68bb      	ldr	r3, [r7, #8]
 801e354:	611a      	str	r2, [r3, #16]
  resp->payload.sinfo.cache = conf.conf;
 801e356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e358:	68bb      	ldr	r3, [r7, #8]
 801e35a:	615a      	str	r2, [r3, #20]
#if defined(HAS_EXTRA_CONF) && HAS_EXTRA_CONF > 0
  array_u32.size = HAS_EXTRA_CONF;
  array_u32.offset = 4;
  array_u32.data = &conf.extra[0];
#else
  array_u32.size = 0;
 801e35c:	2300      	movs	r3, #0
 801e35e:	613b      	str	r3, [r7, #16]
  array_u32.offset = 4;
 801e360:	2304      	movs	r3, #4
 801e362:	61bb      	str	r3, [r7, #24]
  array_u32.data = NULL;
 801e364:	2300      	movs	r3, #0
 801e366:	617b      	str	r3, [r7, #20]
#endif

  resp->payload.sinfo.extra.funcs.encode = encode_uint32;
 801e368:	68bb      	ldr	r3, [r7, #8]
 801e36a:	4a07      	ldr	r2, [pc, #28]	@ (801e388 <aiPbCmdSysInfo+0x60>)
 801e36c:	619a      	str	r2, [r3, #24]
  resp->payload.sinfo.extra.arg = &array_u32;
 801e36e:	68bb      	ldr	r3, [r7, #8]
 801e370:	f107 0210 	add.w	r2, r7, #16
 801e374:	61da      	str	r2, [r3, #28]

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 801e376:	2200      	movs	r2, #0
 801e378:	68b9      	ldr	r1, [r7, #8]
 801e37a:	68f8      	ldr	r0, [r7, #12]
 801e37c:	f7fd fb24 	bl	801b9c8 <aiPbMgrSendResp>
}
 801e380:	bf00      	nop
 801e382:	3730      	adds	r7, #48	@ 0x30
 801e384:	46bd      	mov	sp, r7
 801e386:	bd80      	pop	{r7, pc}
 801e388:	0801b785 	.word	0x0801b785

0801e38c <aiPbCmdNNInfo>:

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 801e38c:	b580      	push	{r7, lr}
 801e38e:	b088      	sub	sp, #32
 801e390:	af02      	add	r7, sp, #8
 801e392:	60f8      	str	r0, [r7, #12]
 801e394:	60b9      	str	r1, [r7, #8]
 801e396:	607a      	str	r2, [r7, #4]
  struct ai_network_exec_ctx *ctx;

  UNUSED(param);

  ctx = aiExecCtx(req->name, req->param);
 801e398:	68fb      	ldr	r3, [r7, #12]
 801e39a:	f103 020c 	add.w	r2, r3, #12
 801e39e:	68fb      	ldr	r3, [r7, #12]
 801e3a0:	689b      	ldr	r3, [r3, #8]
 801e3a2:	4619      	mov	r1, r3
 801e3a4:	4610      	mov	r0, r2
 801e3a6:	f7ff fe13 	bl	801dfd0 <aiExecCtx>
 801e3aa:	6178      	str	r0, [r7, #20]
  if (ctx)
 801e3ac:	697b      	ldr	r3, [r7, #20]
 801e3ae:	2b00      	cmp	r3, #0
 801e3b0:	d011      	beq.n	801e3d6 <aiPbCmdNNInfo+0x4a>
    send_model_info(req, resp, EnumState_S_IDLE, &ctx->report,
 801e3b2:	697b      	ldr	r3, [r7, #20]
 801e3b4:	f103 0108 	add.w	r1, r3, #8
 801e3b8:	697b      	ldr	r3, [r7, #20]
 801e3ba:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 801e3be:	697a      	ldr	r2, [r7, #20]
 801e3c0:	f892 2091 	ldrb.w	r2, [r2, #145]	@ 0x91
 801e3c4:	9201      	str	r2, [sp, #4]
 801e3c6:	9300      	str	r3, [sp, #0]
 801e3c8:	460b      	mov	r3, r1
 801e3ca:	2200      	movs	r2, #0
 801e3cc:	68b9      	ldr	r1, [r7, #8]
 801e3ce:	68f8      	ldr	r0, [r7, #12]
 801e3d0:	f7ff f938 	bl	801d644 <send_model_info>
        ctx->inputs_in_activations, ctx->outputs_in_activations);
  else
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
        EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 801e3d4:	e007      	b.n	801e3e6 <aiPbCmdNNInfo+0x5a>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 801e3d6:	2304      	movs	r3, #4
 801e3d8:	9300      	str	r3, [sp, #0]
 801e3da:	2304      	movs	r3, #4
 801e3dc:	2204      	movs	r2, #4
 801e3de:	68b9      	ldr	r1, [r7, #8]
 801e3e0:	68f8      	ldr	r0, [r7, #12]
 801e3e2:	f7fd fb0f 	bl	801ba04 <aiPbMgrSendAck>
}
 801e3e6:	bf00      	nop
 801e3e8:	3718      	adds	r7, #24
 801e3ea:	46bd      	mov	sp, r7
 801e3ec:	bd80      	pop	{r7, pc}

0801e3ee <_set_context>:


static void _set_context(const reqMsg *req, struct ai_network_exec_ctx *ctx)
{
 801e3ee:	b480      	push	{r7}
 801e3f0:	b083      	sub	sp, #12
 801e3f2:	af00      	add	r7, sp, #0
 801e3f4:	6078      	str	r0, [r7, #4]
 801e3f6:	6039      	str	r1, [r7, #0]
  ctx->emit_intermediate_data = false;
 801e3f8:	683b      	ldr	r3, [r7, #0]
 801e3fa:	2200      	movs	r2, #0
 801e3fc:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  ctx->observer_is_enabled = false;
 801e400:	683b      	ldr	r3, [r7, #0]
 801e402:	2200      	movs	r2, #0
 801e404:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92

#if defined(HAS_OBSERVER)
  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER) ==
 801e408:	687b      	ldr	r3, [r7, #4]
 801e40a:	689b      	ldr	r3, [r3, #8]
 801e40c:	f003 0302 	and.w	r3, r3, #2
 801e410:	2b00      	cmp	r3, #0
 801e412:	d003      	beq.n	801e41c <_set_context+0x2e>
      EnumRunParam_P_RUN_MODE_PER_LAYER) {
    ctx->observer_is_enabled = true;
 801e414:	683b      	ldr	r3, [r7, #0]
 801e416:	2201      	movs	r2, #1
 801e418:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }

  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER_WITH_DATA) ==
 801e41c:	687b      	ldr	r3, [r7, #4]
 801e41e:	689b      	ldr	r3, [r3, #8]
 801e420:	f003 0304 	and.w	r3, r3, #4
 801e424:	2b00      	cmp	r3, #0
 801e426:	d007      	beq.n	801e438 <_set_context+0x4a>
      EnumRunParam_P_RUN_MODE_PER_LAYER_WITH_DATA) {
    ctx->observer_is_enabled = true;
 801e428:	683b      	ldr	r3, [r7, #0]
 801e42a:	2201      	movs	r2, #1
 801e42c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    ctx->emit_intermediate_data = true;
 801e430:	683b      	ldr	r3, [r7, #0]
 801e432:	2201      	movs	r2, #1
 801e434:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  }
#endif

  ctx->direct_write = req->param & EnumRunParam_P_RUN_CONF_DIRECT_WRITE?true:false;
 801e438:	687b      	ldr	r3, [r7, #4]
 801e43a:	689b      	ldr	r3, [r3, #8]
 801e43c:	0a9b      	lsrs	r3, r3, #10
 801e43e:	f003 0301 	and.w	r3, r3, #1
 801e442:	2b00      	cmp	r3, #0
 801e444:	bf14      	ite	ne
 801e446:	2301      	movne	r3, #1
 801e448:	2300      	moveq	r3, #0
 801e44a:	b2da      	uxtb	r2, r3
 801e44c:	683b      	ldr	r3, [r7, #0]
 801e44e:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
  ctx->simple_value = req->param & EnumRunParam_P_RUN_CONF_CONST_VALUE?true:false;
 801e452:	687b      	ldr	r3, [r7, #4]
 801e454:	689b      	ldr	r3, [r3, #8]
 801e456:	0a5b      	lsrs	r3, r3, #9
 801e458:	f003 0301 	and.w	r3, r3, #1
 801e45c:	2b00      	cmp	r3, #0
 801e45e:	bf14      	ite	ne
 801e460:	2301      	movne	r3, #1
 801e462:	2300      	moveq	r3, #0
 801e464:	b2da      	uxtb	r2, r3
 801e466:	683b      	ldr	r3, [r7, #0]
 801e468:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 801e46c:	687b      	ldr	r3, [r7, #4]
 801e46e:	689b      	ldr	r3, [r3, #8]
 801e470:	0a1b      	lsrs	r3, r3, #8
 801e472:	f003 0301 	and.w	r3, r3, #1
 801e476:	2b00      	cmp	r3, #0
 801e478:	bf14      	ite	ne
 801e47a:	2301      	movne	r3, #1
 801e47c:	2300      	moveq	r3, #0
 801e47e:	b2da      	uxtb	r2, r3
 801e480:	683b      	ldr	r3, [r7, #0]
 801e482:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
}
 801e486:	bf00      	nop
 801e488:	370c      	adds	r7, #12
 801e48a:	46bd      	mov	sp, r7
 801e48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e490:	4770      	bx	lr
	...

0801e494 <aiPbCmdNNRun>:


void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 801e494:	b590      	push	{r4, r7, lr}
 801e496:	b0a5      	sub	sp, #148	@ 0x94
 801e498:	af04      	add	r7, sp, #16
 801e49a:	60f8      	str	r0, [r7, #12]
 801e49c:	60b9      	str	r1, [r7, #8]
 801e49e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 801e4a0:	f3ef 8314 	mrs	r3, CONTROL
 801e4a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 801e4a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 801e4a8:	f3ef 8308 	mrs	r3, MSP
 801e4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801e4ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
  ai_buffer *ai_input;
  ai_buffer *ai_output;

  UNUSED(param);

  MON_STACK_INIT();
 801e4b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801e4b4:	4619      	mov	r1, r3
 801e4b6:	f7fe fa21 	bl	801c8fc <stackMonInit>

  /* 0 - Check if requested c-name model is available -------------- */
  ctx = aiExecCtx(req->name, -1);
 801e4ba:	68fb      	ldr	r3, [r7, #12]
 801e4bc:	330c      	adds	r3, #12
 801e4be:	f04f 31ff 	mov.w	r1, #4294967295
 801e4c2:	4618      	mov	r0, r3
 801e4c4:	f7ff fd84 	bl	801dfd0 <aiExecCtx>
 801e4c8:	6578      	str	r0, [r7, #84]	@ 0x54
  if (!ctx) {
 801e4ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e4cc:	2b00      	cmp	r3, #0
 801e4ce:	d108      	bne.n	801e4e2 <aiPbCmdNNRun+0x4e>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 801e4d0:	2304      	movs	r3, #4
 801e4d2:	9300      	str	r3, [sp, #0]
 801e4d4:	2304      	movs	r3, #4
 801e4d6:	2204      	movs	r2, #4
 801e4d8:	68b9      	ldr	r1, [r7, #8]
 801e4da:	68f8      	ldr	r0, [r7, #12]
 801e4dc:	f7fd fa92 	bl	801ba04 <aiPbMgrSendAck>
        EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
    return;
 801e4e0:	e22b      	b.n	801e93a <aiPbCmdNNRun+0x4a6>
  }

  _set_context(req, ctx);
 801e4e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801e4e4:	68f8      	ldr	r0, [r7, #12]
 801e4e6:	f7ff ff82 	bl	801e3ee <_set_context>

  aiObserverConfig(ctx);
 801e4ea:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801e4ec:	f7ff fcbe 	bl	801de6c <aiObserverConfig>

  ai_input = ctx->report.inputs;
 801e4f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e4f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e4f4:	653b      	str	r3, [r7, #80]	@ 0x50
  ai_output = ctx->report.outputs;
 801e4f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e4f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e4fa:	64fb      	str	r3, [r7, #76]	@ 0x4c

  PB_LC_PRINT(ctx->debug, "RUN: c-model=%s rtid=%d\r\n", ctx->report.model_name, _AI_RUNTIME_ID);
 801e4fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e4fe:	f893 0096 	ldrb.w	r0, [r3, #150]	@ 0x96
 801e502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e504:	689a      	ldr	r2, [r3, #8]
 801e506:	2301      	movs	r3, #1
 801e508:	49a2      	ldr	r1, [pc, #648]	@ (801e794 <aiPbCmdNNRun+0x300>)
 801e50a:	f7ff fae9 	bl	801dae0 <_print_debug>
  PB_LC_PRINT(ctx->debug, "RUN:  observer=%d/%d, simple_value=%d, direct_write=%d\r\n",
 801e50e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e510:	f893 0096 	ldrb.w	r0, [r3, #150]	@ 0x96
 801e514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e516:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 801e51a:	4619      	mov	r1, r3
 801e51c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e51e:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 801e522:	461c      	mov	r4, r3
 801e524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e526:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 801e52a:	461a      	mov	r2, r3
 801e52c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e52e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 801e532:	9301      	str	r3, [sp, #4]
 801e534:	9200      	str	r2, [sp, #0]
 801e536:	4623      	mov	r3, r4
 801e538:	460a      	mov	r2, r1
 801e53a:	4997      	ldr	r1, [pc, #604]	@ (801e798 <aiPbCmdNNRun+0x304>)
 801e53c:	f7ff fad0 	bl	801dae0 <_print_debug>
      ctx->observer_is_enabled, ctx->emit_intermediate_data,
      ctx->simple_value, ctx->direct_write);

  PB_LC_PRINT(ctx->debug, "RUN: Waiting data (%d bytes).. opt=0x%lx, param=0x%lx\r\n",
 801e540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e542:	f893 4096 	ldrb.w	r4, [r3, #150]	@ 0x96
 801e546:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801e548:	f7fe fdf8 	bl	801d13c <_get_buffer_size>
 801e54c:	4601      	mov	r1, r0
 801e54e:	68fb      	ldr	r3, [r7, #12]
 801e550:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801e552:	68fb      	ldr	r3, [r7, #12]
 801e554:	689b      	ldr	r3, [r3, #8]
 801e556:	9300      	str	r3, [sp, #0]
 801e558:	4613      	mov	r3, r2
 801e55a:	460a      	mov	r2, r1
 801e55c:	498f      	ldr	r1, [pc, #572]	@ (801e79c <aiPbCmdNNRun+0x308>)
 801e55e:	4620      	mov	r0, r4
 801e560:	f7ff fabe 	bl	801dae0 <_print_debug>
      _get_buffer_size(&ai_input[0]),
      req->opt, req->param);

  /* 1 - Send a ACK (ready to receive a tensor) -------------------- */
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 801e564:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801e566:	f7fe fde9 	bl	801d13c <_get_buffer_size>
 801e56a:	4603      	mov	r3, r0
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 801e56c:	2200      	movs	r2, #0
 801e56e:	9200      	str	r2, [sp, #0]
 801e570:	2201      	movs	r2, #1
 801e572:	68b9      	ldr	r1, [r7, #8]
 801e574:	68f8      	ldr	r0, [r7, #12]
 801e576:	f7fd fa45 	bl	801ba04 <aiPbMgrSendAck>

  /* 2 - Receive all input tensors --------------------------------- */
  batch = 0;
 801e57a:	2300      	movs	r3, #0
 801e57c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  tick = port_hal_get_tick();
 801e57e:	f7f3 fb0d 	bl	8011b9c <HAL_GetTick>
 801e582:	64b8      	str	r0, [r7, #72]	@ 0x48
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 801e584:	2300      	movs	r3, #0
 801e586:	67bb      	str	r3, [r7, #120]	@ 0x78
 801e588:	e041      	b.n	801e60e <aiPbCmdNNRun+0x17a>
    /* upload a buffer */
    EnumState state = EnumState_S_WAITING;
 801e58a:	2301      	movs	r3, #1
 801e58c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if ((i + 1) == ctx->report.n_inputs)
 801e590:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801e592:	3301      	adds	r3, #1
 801e594:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801e596:	f8b2 2040 	ldrh.w	r2, [r2, #64]	@ 0x40
 801e59a:	4293      	cmp	r3, r2
 801e59c:	d102      	bne.n	801e5a4 <aiPbCmdNNRun+0x110>
      state = EnumState_S_PROCESSING;
 801e59e:	2302      	movs	r3, #2
 801e5a0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    batch += _get_buffer_size(&ai_input[i]);
 801e5a4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801e5a6:	4613      	mov	r3, r2
 801e5a8:	00db      	lsls	r3, r3, #3
 801e5aa:	1a9b      	subs	r3, r3, r2
 801e5ac:	009b      	lsls	r3, r3, #2
 801e5ae:	461a      	mov	r2, r3
 801e5b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e5b2:	4413      	add	r3, r2
 801e5b4:	4618      	mov	r0, r3
 801e5b6:	f7fe fdc1 	bl	801d13c <_get_buffer_size>
 801e5ba:	4602      	mov	r2, r0
 801e5bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801e5be:	4413      	add	r3, r2
 801e5c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    res = receive_ai_data(req, resp, state, &ai_input[i], ctx->simple_value, ctx->direct_write);
 801e5c2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801e5c4:	4613      	mov	r3, r2
 801e5c6:	00db      	lsls	r3, r3, #3
 801e5c8:	1a9b      	subs	r3, r3, r2
 801e5ca:	009b      	lsls	r3, r3, #2
 801e5cc:	461a      	mov	r2, r3
 801e5ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e5d0:	1898      	adds	r0, r3, r2
 801e5d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e5d4:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 801e5d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801e5da:	f892 2095 	ldrb.w	r2, [r2, #149]	@ 0x95
 801e5de:	f897 1077 	ldrb.w	r1, [r7, #119]	@ 0x77
 801e5e2:	9201      	str	r2, [sp, #4]
 801e5e4:	9300      	str	r3, [sp, #0]
 801e5e6:	4603      	mov	r3, r0
 801e5e8:	460a      	mov	r2, r1
 801e5ea:	68b9      	ldr	r1, [r7, #8]
 801e5ec:	68f8      	ldr	r0, [r7, #12]
 801e5ee:	f7ff f99d 	bl	801d92c <receive_ai_data>
 801e5f2:	4603      	mov	r3, r0
 801e5f4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (res != true)
 801e5f8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801e5fc:	f083 0301 	eor.w	r3, r3, #1
 801e600:	b2db      	uxtb	r3, r3
 801e602:	2b00      	cmp	r3, #0
 801e604:	f040 8198 	bne.w	801e938 <aiPbCmdNNRun+0x4a4>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 801e608:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801e60a:	3301      	adds	r3, #1
 801e60c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801e60e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e610:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801e614:	461a      	mov	r2, r3
 801e616:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801e618:	4293      	cmp	r3, r2
 801e61a:	dbb6      	blt.n	801e58a <aiPbCmdNNRun+0xf6>
      return;
  }
  tick = port_hal_get_tick() - tick;
 801e61c:	f7f3 fabe 	bl	8011b9c <HAL_GetTick>
 801e620:	4602      	mov	r2, r0
 801e622:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e624:	1ad3      	subs	r3, r2, r3
 801e626:	64bb      	str	r3, [r7, #72]	@ 0x48
  PB_LC_PRINT(ctx->debug, "RUN: %ld ticks to download %d input(s)\r\n", tick, ctx->report.n_inputs);
 801e628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e62a:	f893 0096 	ldrb.w	r0, [r3, #150]	@ 0x96
 801e62e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e630:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801e634:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801e636:	495a      	ldr	r1, [pc, #360]	@ (801e7a0 <aiPbCmdNNRun+0x30c>)
 801e638:	f7ff fa52 	bl	801dae0 <_print_debug>

  aiObserverBind(ctx, req, resp);
 801e63c:	68ba      	ldr	r2, [r7, #8]
 801e63e:	68f9      	ldr	r1, [r7, #12]
 801e640:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801e642:	f7ff fc51 	bl	801dee8 <aiObserverBind>

  MON_ALLOC_RESET();
 801e646:	f7fe fca1 	bl	801cf8c <_mon_alloc_reset>
  MON_ALLOC_ENABLE();
 801e64a:	4b56      	ldr	r3, [pc, #344]	@ (801e7a4 <aiPbCmdNNRun+0x310>)
 801e64c:	681b      	ldr	r3, [r3, #0]
 801e64e:	f043 0301 	orr.w	r3, r3, #1
 801e652:	4a54      	ldr	r2, [pc, #336]	@ (801e7a4 <aiPbCmdNNRun+0x310>)
 801e654:	6013      	str	r3, [r2, #0]

  /* 3 - Processing ------------------------------------------------ */
  PB_LC_PRINT(ctx->debug, "RUN: Processing.. current tick=%lu\r\n", (uint32_t)port_hal_get_tick());
 801e656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e658:	f893 4096 	ldrb.w	r4, [r3, #150]	@ 0x96
 801e65c:	f7f3 fa9e 	bl	8011b9c <HAL_GetTick>
 801e660:	4603      	mov	r3, r0
 801e662:	461a      	mov	r2, r3
 801e664:	4950      	ldr	r1, [pc, #320]	@ (801e7a8 <aiPbCmdNNRun+0x314>)
 801e666:	4620      	mov	r0, r4
 801e668:	f7ff fa3a 	bl	801dae0 <_print_debug>
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 801e66c:	f3ef 8308 	mrs	r3, MSP
 801e670:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 801e672:	6b7a      	ldr	r2, [r7, #52]	@ 0x34

  MON_STACK_CHECK0();
 801e674:	4b4d      	ldr	r3, [pc, #308]	@ (801e7ac <aiPbCmdNNRun+0x318>)
 801e676:	699b      	ldr	r3, [r3, #24]
 801e678:	429a      	cmp	r2, r3
 801e67a:	d009      	beq.n	801e690 <aiPbCmdNNRun+0x1fc>
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 801e67c:	f3ef 8308 	mrs	r3, MSP
 801e680:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801e682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e684:	4a49      	ldr	r2, [pc, #292]	@ (801e7ac <aiPbCmdNNRun+0x318>)
 801e686:	6992      	ldr	r2, [r2, #24]
 801e688:	4619      	mov	r1, r3
 801e68a:	4849      	ldr	r0, [pc, #292]	@ (801e7b0 <aiPbCmdNNRun+0x31c>)
 801e68c:	f7fe f844 	bl	801c718 <lc_print>
  MON_STACK_MARK();
 801e690:	4b46      	ldr	r3, [pc, #280]	@ (801e7ac <aiPbCmdNNRun+0x318>)
 801e692:	791b      	ldrb	r3, [r3, #4]
 801e694:	2b00      	cmp	r3, #0
 801e696:	d012      	beq.n	801e6be <aiPbCmdNNRun+0x22a>
 801e698:	4b44      	ldr	r3, [pc, #272]	@ (801e7ac <aiPbCmdNNRun+0x318>)
 801e69a:	69db      	ldr	r3, [r3, #28]
 801e69c:	3303      	adds	r3, #3
 801e69e:	f023 0303 	bic.w	r3, r3, #3
 801e6a2:	673b      	str	r3, [r7, #112]	@ 0x70
 801e6a4:	e006      	b.n	801e6b4 <aiPbCmdNNRun+0x220>
 801e6a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801e6a8:	f04f 32de 	mov.w	r2, #3739147998	@ 0xdededede
 801e6ac:	601a      	str	r2, [r3, #0]
 801e6ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801e6b0:	3304      	adds	r3, #4
 801e6b2:	673b      	str	r3, [r7, #112]	@ 0x70
 801e6b4:	4b3d      	ldr	r3, [pc, #244]	@ (801e7ac <aiPbCmdNNRun+0x318>)
 801e6b6:	699a      	ldr	r2, [r3, #24]
 801e6b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801e6ba:	429a      	cmp	r2, r3
 801e6bc:	d8f3      	bhi.n	801e6a6 <aiPbCmdNNRun+0x212>

  tick = port_hal_get_tick();
 801e6be:	f7f3 fa6d 	bl	8011b9c <HAL_GetTick>
 801e6c2:	64b8      	str	r0, [r7, #72]	@ 0x48
  cyclesCounterStart();
 801e6c4:	f7fe fcbc 	bl	801d040 <cyclesCounterStart>

  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 801e6c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e6ca:	681b      	ldr	r3, [r3, #0]
 801e6cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e6ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801e6d0:	4618      	mov	r0, r3
 801e6d2:	f000 fb8d 	bl	801edf0 <ai_mnetwork_run>
 801e6d6:	67f8      	str	r0, [r7, #124]	@ 0x7c
  if (batch != 1) {
 801e6d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801e6da:	2b01      	cmp	r3, #1
 801e6dc:	d012      	beq.n	801e704 <aiPbCmdNNRun+0x270>
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
 801e6de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e6e0:	681b      	ldr	r3, [r3, #0]
 801e6e2:	4618      	mov	r0, r3
 801e6e4:	f000 fb29 	bl	801ed3a <ai_mnetwork_get_error>
 801e6e8:	4603      	mov	r3, r0
 801e6ea:	4932      	ldr	r1, [pc, #200]	@ (801e7b4 <aiPbCmdNNRun+0x320>)
 801e6ec:	4618      	mov	r0, r3
 801e6ee:	f7fd faf3 	bl	801bcd8 <aiLogErr>
        "ai_mnetwork_run");
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 801e6f2:	230a      	movs	r3, #10
 801e6f4:	9300      	str	r3, [sp, #0]
 801e6f6:	230a      	movs	r3, #10
 801e6f8:	2204      	movs	r2, #4
 801e6fa:	68b9      	ldr	r1, [r7, #8]
 801e6fc:	68f8      	ldr	r0, [r7, #12]
 801e6fe:	f7fd f981 	bl	801ba04 <aiPbMgrSendAck>
        EnumError_E_GENERIC, EnumError_E_GENERIC);
    return;
 801e702:	e11a      	b.n	801e93a <aiPbCmdNNRun+0x4a6>
  }
  tend = cyclesCounterEnd();
 801e704:	f7fe fcb0 	bl	801d068 <cyclesCounterEnd>
 801e708:	4602      	mov	r2, r0
 801e70a:	460b      	mov	r3, r1
 801e70c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  tick = port_hal_get_tick() - tick;
 801e710:	f7f3 fa44 	bl	8011b9c <HAL_GetTick>
 801e714:	4602      	mov	r2, r0
 801e716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e718:	1ad3      	subs	r3, r2, r3
 801e71a:	64bb      	str	r3, [r7, #72]	@ 0x48

  MON_ALLOC_DISABLE();
 801e71c:	4b21      	ldr	r3, [pc, #132]	@ (801e7a4 <aiPbCmdNNRun+0x310>)
 801e71e:	681b      	ldr	r3, [r3, #0]
 801e720:	f023 0301 	bic.w	r3, r3, #1
 801e724:	4a1f      	ldr	r2, [pc, #124]	@ (801e7a4 <aiPbCmdNNRun+0x310>)
 801e726:	6013      	str	r3, [r2, #0]
  MON_STACK_EVALUATE();
 801e728:	4b20      	ldr	r3, [pc, #128]	@ (801e7ac <aiPbCmdNNRun+0x318>)
 801e72a:	2200      	movs	r2, #0
 801e72c:	609a      	str	r2, [r3, #8]
 801e72e:	4b1f      	ldr	r3, [pc, #124]	@ (801e7ac <aiPbCmdNNRun+0x318>)
 801e730:	791b      	ldrb	r3, [r3, #4]
 801e732:	2b00      	cmp	r3, #0
 801e734:	d066      	beq.n	801e804 <aiPbCmdNNRun+0x370>
 801e736:	4b1d      	ldr	r3, [pc, #116]	@ (801e7ac <aiPbCmdNNRun+0x318>)
 801e738:	695a      	ldr	r2, [r3, #20]
 801e73a:	4b1c      	ldr	r3, [pc, #112]	@ (801e7ac <aiPbCmdNNRun+0x318>)
 801e73c:	68db      	ldr	r3, [r3, #12]
 801e73e:	1ad3      	subs	r3, r2, r3
 801e740:	647b      	str	r3, [r7, #68]	@ 0x44
 801e742:	4b1a      	ldr	r3, [pc, #104]	@ (801e7ac <aiPbCmdNNRun+0x318>)
 801e744:	69db      	ldr	r3, [r3, #28]
 801e746:	3303      	adds	r3, #3
 801e748:	f023 0303 	bic.w	r3, r3, #3
 801e74c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801e74e:	2300      	movs	r3, #0
 801e750:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 801e754:	2300      	movs	r3, #0
 801e756:	667b      	str	r3, [r7, #100]	@ 0x64
 801e758:	e00d      	b.n	801e776 <aiPbCmdNNRun+0x2e2>
 801e75a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801e75c:	681b      	ldr	r3, [r3, #0]
 801e75e:	f1b3 3fde 	cmp.w	r3, #3739147998	@ 0xdededede
 801e762:	d002      	beq.n	801e76a <aiPbCmdNNRun+0x2d6>
 801e764:	2301      	movs	r3, #1
 801e766:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 801e76a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801e76c:	3304      	adds	r3, #4
 801e76e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801e770:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801e772:	3301      	adds	r3, #1
 801e774:	667b      	str	r3, [r7, #100]	@ 0x64
 801e776:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801e778:	2b07      	cmp	r3, #7
 801e77a:	ddee      	ble.n	801e75a <aiPbCmdNNRun+0x2c6>
 801e77c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 801e780:	f083 0301 	eor.w	r3, r3, #1
 801e784:	b2db      	uxtb	r3, r3
 801e786:	2b00      	cmp	r3, #0
 801e788:	d031      	beq.n	801e7ee <aiPbCmdNNRun+0x35a>
 801e78a:	4b08      	ldr	r3, [pc, #32]	@ (801e7ac <aiPbCmdNNRun+0x318>)
 801e78c:	2220      	movs	r2, #32
 801e78e:	609a      	str	r2, [r3, #8]
 801e790:	e01a      	b.n	801e7c8 <aiPbCmdNNRun+0x334>
 801e792:	bf00      	nop
 801e794:	08037e44 	.word	0x08037e44
 801e798:	08037e60 	.word	0x08037e60
 801e79c:	08037e9c 	.word	0x08037e9c
 801e7a0:	08037ed4 	.word	0x08037ed4
 801e7a4:	24031d20 	.word	0x24031d20
 801e7a8:	08037f00 	.word	0x08037f00
 801e7ac:	24031d3c 	.word	0x24031d3c
 801e7b0:	08037f28 	.word	0x08037f28
 801e7b4:	08037f6c 	.word	0x08037f6c
 801e7b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801e7ba:	3304      	adds	r3, #4
 801e7bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801e7be:	4b60      	ldr	r3, [pc, #384]	@ (801e940 <aiPbCmdNNRun+0x4ac>)
 801e7c0:	689b      	ldr	r3, [r3, #8]
 801e7c2:	3304      	adds	r3, #4
 801e7c4:	4a5e      	ldr	r2, [pc, #376]	@ (801e940 <aiPbCmdNNRun+0x4ac>)
 801e7c6:	6093      	str	r3, [r2, #8]
 801e7c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801e7ca:	681b      	ldr	r3, [r3, #0]
 801e7cc:	f1b3 3fde 	cmp.w	r3, #3739147998	@ 0xdededede
 801e7d0:	d104      	bne.n	801e7dc <aiPbCmdNNRun+0x348>
 801e7d2:	4b5b      	ldr	r3, [pc, #364]	@ (801e940 <aiPbCmdNNRun+0x4ac>)
 801e7d4:	699a      	ldr	r2, [r3, #24]
 801e7d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801e7d8:	429a      	cmp	r2, r3
 801e7da:	d8ed      	bhi.n	801e7b8 <aiPbCmdNNRun+0x324>
 801e7dc:	4b58      	ldr	r3, [pc, #352]	@ (801e940 <aiPbCmdNNRun+0x4ac>)
 801e7de:	689b      	ldr	r3, [r3, #8]
 801e7e0:	461a      	mov	r2, r3
 801e7e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e7e4:	1a9b      	subs	r3, r3, r2
 801e7e6:	461a      	mov	r2, r3
 801e7e8:	4b55      	ldr	r3, [pc, #340]	@ (801e940 <aiPbCmdNNRun+0x4ac>)
 801e7ea:	609a      	str	r2, [r3, #8]
 801e7ec:	e00a      	b.n	801e804 <aiPbCmdNNRun+0x370>
 801e7ee:	4b54      	ldr	r3, [pc, #336]	@ (801e940 <aiPbCmdNNRun+0x4ac>)
 801e7f0:	f04f 32ff 	mov.w	r2, #4294967295
 801e7f4:	609a      	str	r2, [r3, #8]
 801e7f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801e7f8:	4852      	ldr	r0, [pc, #328]	@ (801e944 <aiPbCmdNNRun+0x4b0>)
 801e7fa:	f7fd ff8d 	bl	801c718 <lc_print>
 801e7fe:	4852      	ldr	r0, [pc, #328]	@ (801e948 <aiPbCmdNNRun+0x4b4>)
 801e800:	f7fd ff8a 	bl	801c718 <lc_print>

  tend = aiObserverAdjustInferenceTime(ctx, tend);
 801e804:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801e808:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801e80a:	f7ff fb09 	bl	801de20 <aiObserverAdjustInferenceTime>
 801e80e:	4602      	mov	r2, r0
 801e810:	460b      	mov	r3, r1
 801e812:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

  PB_LC_PRINT(ctx->debug, "RUN: Processing done. delta_tick=%lu\r\n", tick);
 801e816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e818:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 801e81c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801e81e:	494b      	ldr	r1, [pc, #300]	@ (801e94c <aiPbCmdNNRun+0x4b8>)
 801e820:	4618      	mov	r0, r3
 801e822:	f7ff f95d 	bl	801dae0 <_print_debug>

  /* 4 - Send basic report (optional) ------------------------------ */

#if defined(_APP_STACK_MONITOR_) && _APP_STACK_MONITOR_ == 1 && defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  PB_LC_PRINT(ctx->debug, "RUN:  used stack/heap=%d/%d\r\n", (int)io_stack.susage, (int)io_malloc.used);
 801e826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e828:	f893 0096 	ldrb.w	r0, [r3, #150]	@ 0x96
 801e82c:	4b44      	ldr	r3, [pc, #272]	@ (801e940 <aiPbCmdNNRun+0x4ac>)
 801e82e:	689a      	ldr	r2, [r3, #8]
 801e830:	4b47      	ldr	r3, [pc, #284]	@ (801e950 <aiPbCmdNNRun+0x4bc>)
 801e832:	699b      	ldr	r3, [r3, #24]
 801e834:	4947      	ldr	r1, [pc, #284]	@ (801e954 <aiPbCmdNNRun+0x4c0>)
 801e836:	f7ff f953 	bl	801dae0 <_print_debug>
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 801e83a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801e83e:	4610      	mov	r0, r2
 801e840:	4619      	mov	r1, r3
 801e842:	f7fe fa59 	bl	801ccf8 <dwtCyclesToFloatMs>
 801e846:	eef0 7a40 	vmov.f32	s15, s0
 801e84a:	edc7 7a04 	vstr	s15, [r7, #16]
 801e84e:	2300      	movs	r3, #0
 801e850:	617b      	str	r3, [r7, #20]
 801e852:	2302      	movs	r3, #2
 801e854:	61bb      	str	r3, [r7, #24]
 801e856:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801e85a:	61fb      	str	r3, [r7, #28]
 801e85c:	4b38      	ldr	r3, [pc, #224]	@ (801e940 <aiPbCmdNNRun+0x4ac>)
 801e85e:	689b      	ldr	r3, [r3, #8]
 801e860:	623b      	str	r3, [r7, #32]
 801e862:	4b3b      	ldr	r3, [pc, #236]	@ (801e950 <aiPbCmdNNRun+0x4bc>)
 801e864:	699b      	ldr	r3, [r3, #24]
 801e866:	627b      	str	r3, [r7, #36]	@ 0x24
#else
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, -1, -1};
#endif
  perf.counter_type = EnumCounterFormat_COUNTER_FMT_64B << EnumCounterFormat_COUNTER_FMT_POS;
 801e868:	2300      	movs	r3, #0
 801e86a:	617b      	str	r3, [r7, #20]
  perf.counter_type |= EnumCounterType_COUNTER_TYPE_CPU;
 801e86c:	697b      	ldr	r3, [r7, #20]
 801e86e:	617b      	str	r3, [r7, #20]
#if defined(_APP_STACK_MONITOR_) && _APP_STACK_MONITOR_ == 1 && defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  if (ctx->observer_is_enabled)
 801e870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e872:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 801e876:	2b00      	cmp	r3, #0
 801e878:	d002      	beq.n	801e880 <aiPbCmdNNRun+0x3ec>
    perf.stack_usage = -1;
 801e87a:	f04f 33ff 	mov.w	r3, #4294967295
 801e87e:	623b      	str	r3, [r7, #32]
#endif

  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 801e880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e882:	689a      	ldr	r2, [r3, #8]
 801e884:	f107 0310 	add.w	r3, r7, #16
 801e888:	9302      	str	r3, [sp, #8]
 801e88a:	2300      	movs	r3, #0
 801e88c:	9301      	str	r3, [sp, #4]
 801e88e:	2300      	movs	r3, #0
 801e890:	9300      	str	r3, [sp, #0]
 801e892:	4613      	mov	r3, r2
 801e894:	2202      	movs	r2, #2
 801e896:	68b9      	ldr	r1, [r7, #8]
 801e898:	68f8      	ldr	r0, [r7, #12]
 801e89a:	f7fd f955 	bl	801bb48 <aiPbMgrSendOperator>

  PB_LC_PRINT(ctx->debug, "RUN: send %d output tensors\r\n", ctx->report.n_outputs);
 801e89e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e8a0:	f893 0096 	ldrb.w	r0, [r3, #150]	@ 0x96
 801e8a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e8a6:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 801e8aa:	461a      	mov	r2, r3
 801e8ac:	492a      	ldr	r1, [pc, #168]	@ (801e958 <aiPbCmdNNRun+0x4c4>)
 801e8ae:	f7ff f917 	bl	801dae0 <_print_debug>
  /* 5 - Send all output tensors ----------------------------------- */
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 801e8b2:	2300      	movs	r3, #0
 801e8b4:	663b      	str	r3, [r7, #96]	@ 0x60
 801e8b6:	e034      	b.n	801e922 <aiPbCmdNNRun+0x48e>
    EnumState state = EnumState_S_PROCESSING;
 801e8b8:	2302      	movs	r3, #2
 801e8ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint32_t flags =  EnumTensorFlag_TENSOR_FLAG_OUTPUT;
 801e8be:	2302      	movs	r3, #2
 801e8c0:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (req->param & EnumRunParam_P_RUN_MODE_PERF) {
 801e8c2:	68fb      	ldr	r3, [r7, #12]
 801e8c4:	689b      	ldr	r3, [r3, #8]
 801e8c6:	f003 0308 	and.w	r3, r3, #8
 801e8ca:	2b00      	cmp	r3, #0
 801e8cc:	d003      	beq.n	801e8d6 <aiPbCmdNNRun+0x442>
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 801e8ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801e8d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801e8d4:	65bb      	str	r3, [r7, #88]	@ 0x58
    }
    if ((i + 1) == ctx->report.n_outputs) {
 801e8d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801e8d8:	3301      	adds	r3, #1
 801e8da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801e8dc:	f8b2 2042 	ldrh.w	r2, [r2, #66]	@ 0x42
 801e8e0:	4293      	cmp	r3, r2
 801e8e2:	d106      	bne.n	801e8f2 <aiPbCmdNNRun+0x45e>
      state = EnumState_S_DONE;
 801e8e4:	2303      	movs	r3, #3
 801e8e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 801e8ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801e8ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801e8f0:	65bb      	str	r3, [r7, #88]	@ 0x58
    }
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 801e8f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801e8f4:	4613      	mov	r3, r2
 801e8f6:	00db      	lsls	r3, r3, #3
 801e8f8:	1a9b      	subs	r3, r3, r2
 801e8fa:	009b      	lsls	r3, r3, #2
 801e8fc:	461a      	mov	r2, r3
 801e8fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e900:	1899      	adds	r1, r3, r2
 801e902:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801e906:	2300      	movs	r3, #0
 801e908:	9301      	str	r3, [sp, #4]
 801e90a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801e90c:	9300      	str	r3, [sp, #0]
 801e90e:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 801e95c <aiPbCmdNNRun+0x4c8>
 801e912:	460b      	mov	r3, r1
 801e914:	68b9      	ldr	r1, [r7, #8]
 801e916:	68f8      	ldr	r0, [r7, #12]
 801e918:	f7ff f88c 	bl	801da34 <send_ai_io_tensor>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 801e91c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801e91e:	3301      	adds	r3, #1
 801e920:	663b      	str	r3, [r7, #96]	@ 0x60
 801e922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e924:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 801e928:	461a      	mov	r2, r3
 801e92a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801e92c:	4293      	cmp	r3, r2
 801e92e:	dbc3      	blt.n	801e8b8 <aiPbCmdNNRun+0x424>
  }

  aiObserverUnbind(ctx);
 801e930:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801e932:	f7ff fb27 	bl	801df84 <aiObserverUnbind>
 801e936:	e000      	b.n	801e93a <aiPbCmdNNRun+0x4a6>
      return;
 801e938:	bf00      	nop
}
 801e93a:	3784      	adds	r7, #132	@ 0x84
 801e93c:	46bd      	mov	sp, r7
 801e93e:	bd90      	pop	{r4, r7, pc}
 801e940:	24031d3c 	.word	0x24031d3c
 801e944:	08037f7c 	.word	0x08037f7c
 801e948:	08037fa0 	.word	0x08037fa0
 801e94c:	08037ffc 	.word	0x08037ffc
 801e950:	24031d20 	.word	0x24031d20
 801e954:	08038024 	.word	0x08038024
 801e958:	08038044 	.word	0x08038044
 801e95c:	00000000 	.word	0x00000000

0801e960 <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 801e960:	b580      	push	{r7, lr}
 801e962:	af00      	add	r7, sp, #0
  LC_PRINT("\r\n#\r\n");
 801e964:	4809      	ldr	r0, [pc, #36]	@ (801e98c <aiValidationInit+0x2c>)
 801e966:	f7fd fed7 	bl	801c718 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 801e96a:	2301      	movs	r3, #1
 801e96c:	2207      	movs	r2, #7
 801e96e:	4908      	ldr	r1, [pc, #32]	@ (801e990 <aiValidationInit+0x30>)
 801e970:	4808      	ldr	r0, [pc, #32]	@ (801e994 <aiValidationInit+0x34>)
 801e972:	f7fd fed1 	bl	801c718 <lc_print>
  LC_PRINT("#\r\n");
 801e976:	4808      	ldr	r0, [pc, #32]	@ (801e998 <aiValidationInit+0x38>)
 801e978:	f7fd fece 	bl	801c718 <lc_print>

  systemSettingLog();
 801e97c:	f7fe fa84 	bl	801ce88 <systemSettingLog>

  cyclesCounterInit();
 801e980:	f7fe fb16 	bl	801cfb0 <cyclesCounterInit>

  return 0;
 801e984:	2300      	movs	r3, #0
}
 801e986:	4618      	mov	r0, r3
 801e988:	bd80      	pop	{r7, pc}
 801e98a:	bf00      	nop
 801e98c:	08038064 	.word	0x08038064
 801e990:	0803806c 	.word	0x0803806c
 801e994:	0803807c 	.word	0x0803807c
 801e998:	0803808c 	.word	0x0803808c

0801e99c <aiValidationProcess>:

int aiValidationProcess(void)
{
 801e99c:	b580      	push	{r7, lr}
 801e99e:	b082      	sub	sp, #8
 801e9a0:	af00      	add	r7, sp, #0
  int r;

  r = aiInit();
 801e9a2:	f7ff fc73 	bl	801e28c <aiInit>
 801e9a6:	6078      	str	r0, [r7, #4]
  if (r) {
 801e9a8:	687b      	ldr	r3, [r7, #4]
 801e9aa:	2b00      	cmp	r3, #0
 801e9ac:	d009      	beq.n	801e9c2 <aiValidationProcess+0x26>
    LC_PRINT("\r\nE:  aiInit() r=%d\r\n", r);
 801e9ae:	6879      	ldr	r1, [r7, #4]
 801e9b0:	4818      	ldr	r0, [pc, #96]	@ (801ea14 <aiValidationProcess+0x78>)
 801e9b2:	f7fd feb1 	bl	801c718 <lc_print>
    port_hal_delay(2000);
 801e9b6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 801e9ba:	f7f3 f8fb 	bl	8011bb4 <HAL_Delay>
    return r;
 801e9be:	687b      	ldr	r3, [r7, #4]
 801e9c0:	e023      	b.n	801ea0a <aiValidationProcess+0x6e>
  } else {
    LC_PRINT("\r\n");
 801e9c2:	4815      	ldr	r0, [pc, #84]	@ (801ea18 <aiValidationProcess+0x7c>)
 801e9c4:	f7fd fea8 	bl	801c718 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 801e9c8:	4814      	ldr	r0, [pc, #80]	@ (801ea1c <aiValidationProcess+0x80>)
 801e9ca:	f7fd fea5 	bl	801c718 <lc_print>
    LC_PRINT("| READY to receive a CMD from the HOST... |\r\n");
 801e9ce:	4814      	ldr	r0, [pc, #80]	@ (801ea20 <aiValidationProcess+0x84>)
 801e9d0:	f7fd fea2 	bl	801c718 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 801e9d4:	4811      	ldr	r0, [pc, #68]	@ (801ea1c <aiValidationProcess+0x80>)
 801e9d6:	f7fd fe9f 	bl	801c718 <lc_print>
    LC_PRINT("\r\n");
 801e9da:	480f      	ldr	r0, [pc, #60]	@ (801ea18 <aiValidationProcess+0x7c>)
 801e9dc:	f7fd fe9c 	bl	801c718 <lc_print>
    LC_PRINT("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 801e9e0:	4810      	ldr	r0, [pc, #64]	@ (801ea24 <aiValidationProcess+0x88>)
 801e9e2:	f7fd fe99 	bl	801c718 <lc_print>
    LC_PRINT("# and a serial COM interface should be used\r\n");
 801e9e6:	4810      	ldr	r0, [pc, #64]	@ (801ea28 <aiValidationProcess+0x8c>)
 801e9e8:	f7fd fe96 	bl	801c718 <lc_print>
    LC_PRINT("# (i.e. Python ai_runner module). Protocol version = %d.%d\r\n",
 801e9ec:	2201      	movs	r2, #1
 801e9ee:	2103      	movs	r1, #3
 801e9f0:	480e      	ldr	r0, [pc, #56]	@ (801ea2c <aiValidationProcess+0x90>)
 801e9f2:	f7fd fe91 	bl	801c718 <lc_print>
        EnumVersion_P_VERSION_MAJOR,
        EnumVersion_P_VERSION_MINOR);
  }

  aiPbMgrInit(pbCmdFuncTab);
 801e9f6:	480e      	ldr	r0, [pc, #56]	@ (801ea30 <aiValidationProcess+0x94>)
 801e9f8:	f7fc fdee 	bl	801b5d8 <aiPbMgrInit>

  /* used only by Stellar MCUs, empty for all other MCUs */
  port_io_init();

  do {
    r = aiPbMgrWaitAndProcess();
 801e9fc:	f7fc fe34 	bl	801b668 <aiPbMgrWaitAndProcess>
 801ea00:	6078      	str	r0, [r7, #4]
  } while (r==0);
 801ea02:	687b      	ldr	r3, [r7, #4]
 801ea04:	2b00      	cmp	r3, #0
 801ea06:	d0f9      	beq.n	801e9fc <aiValidationProcess+0x60>

  return r;
 801ea08:	687b      	ldr	r3, [r7, #4]
}
 801ea0a:	4618      	mov	r0, r3
 801ea0c:	3708      	adds	r7, #8
 801ea0e:	46bd      	mov	sp, r7
 801ea10:	bd80      	pop	{r7, pc}
 801ea12:	bf00      	nop
 801ea14:	08038090 	.word	0x08038090
 801ea18:	080380a8 	.word	0x080380a8
 801ea1c:	080380ac 	.word	0x080380ac
 801ea20:	080380dc 	.word	0x080380dc
 801ea24:	0803810c 	.word	0x0803810c
 801ea28:	08038154 	.word	0x08038154
 801ea2c:	08038184 	.word	0x08038184
 801ea30:	24000010 	.word	0x24000010

0801ea34 <port_dwt_init_imp>:
#endif  /* HAS_PMU_CTRL */

#if defined(HAS_DWT_CTRL) && HAS_DWT_CTRL == 1

void port_dwt_init_imp()
{
 801ea34:	b480      	push	{r7}
 801ea36:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 801ea38:	4b09      	ldr	r3, [pc, #36]	@ (801ea60 <port_dwt_init_imp+0x2c>)
 801ea3a:	68db      	ldr	r3, [r3, #12]
 801ea3c:	4a08      	ldr	r2, [pc, #32]	@ (801ea60 <port_dwt_init_imp+0x2c>)
 801ea3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801ea42:	60d3      	str	r3, [r2, #12]
#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif
  DWT->CYCCNT = 0;
 801ea44:	4b07      	ldr	r3, [pc, #28]	@ (801ea64 <port_dwt_init_imp+0x30>)
 801ea46:	2200      	movs	r2, #0
 801ea48:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 801ea4a:	4b06      	ldr	r3, [pc, #24]	@ (801ea64 <port_dwt_init_imp+0x30>)
 801ea4c:	681b      	ldr	r3, [r3, #0]
 801ea4e:	4a05      	ldr	r2, [pc, #20]	@ (801ea64 <port_dwt_init_imp+0x30>)
 801ea50:	f043 0301 	orr.w	r3, r3, #1
 801ea54:	6013      	str	r3, [r2, #0]
}
 801ea56:	bf00      	nop
 801ea58:	46bd      	mov	sp, r7
 801ea5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea5e:	4770      	bx	lr
 801ea60:	e000edf0 	.word	0xe000edf0
 801ea64:	e0001000 	.word	0xe0001000

0801ea68 <MX_X_CUBE_AI_Init>:
ai_handle data_activations0[] = {pool0};

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 801ea68:	b580      	push	{r7, lr}
 801ea6a:	af00      	add	r7, sp, #0
    MX_UARTx_Init();
 801ea6c:	f7f2 ff64 	bl	8011938 <MX_USART1_UART_Init>
    aiValidationInit();
 801ea70:	f7ff ff76 	bl	801e960 <aiValidationInit>
    /* USER CODE BEGIN 5 */
    /* USER CODE END 5 */
}
 801ea74:	bf00      	nop
 801ea76:	bd80      	pop	{r7, pc}

0801ea78 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 801ea78:	b580      	push	{r7, lr}
 801ea7a:	af00      	add	r7, sp, #0
    aiValidationProcess();
 801ea7c:	f7ff ff8e 	bl	801e99c <aiValidationProcess>
    /* USER CODE BEGIN 6 */
    /* USER CODE END 6 */
}
 801ea80:	bf00      	nop
 801ea82:	bd80      	pop	{r7, pc}

0801ea84 <ai_mnetwork_is_valid>:
AI_STATIC struct network_instance gnetworks[AI_MNETWORK_NUMBER] = {0};

AI_DECLARE_STATIC
ai_bool ai_mnetwork_is_valid(const char* name,
        const ai_network_entry_t *entry)
{
 801ea84:	b590      	push	{r4, r7, lr}
 801ea86:	b083      	sub	sp, #12
 801ea88:	af00      	add	r7, sp, #0
 801ea8a:	6078      	str	r0, [r7, #4]
 801ea8c:	6039      	str	r1, [r7, #0]
    if (name && (strlen(entry->name) == strlen(name)) &&
 801ea8e:	687b      	ldr	r3, [r7, #4]
 801ea90:	2b00      	cmp	r3, #0
 801ea92:	d01d      	beq.n	801ead0 <ai_mnetwork_is_valid+0x4c>
 801ea94:	683b      	ldr	r3, [r7, #0]
 801ea96:	681b      	ldr	r3, [r3, #0]
 801ea98:	4618      	mov	r0, r3
 801ea9a:	f7f1 fb21 	bl	80100e0 <strlen>
 801ea9e:	4604      	mov	r4, r0
 801eaa0:	6878      	ldr	r0, [r7, #4]
 801eaa2:	f7f1 fb1d 	bl	80100e0 <strlen>
 801eaa6:	4603      	mov	r3, r0
 801eaa8:	429c      	cmp	r4, r3
 801eaaa:	d111      	bne.n	801ead0 <ai_mnetwork_is_valid+0x4c>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 801eaac:	683b      	ldr	r3, [r7, #0]
 801eaae:	681c      	ldr	r4, [r3, #0]
 801eab0:	683b      	ldr	r3, [r7, #0]
 801eab2:	681b      	ldr	r3, [r3, #0]
 801eab4:	4618      	mov	r0, r3
 801eab6:	f7f1 fb13 	bl	80100e0 <strlen>
 801eaba:	4603      	mov	r3, r0
 801eabc:	461a      	mov	r2, r3
 801eabe:	6879      	ldr	r1, [r7, #4]
 801eac0:	4620      	mov	r0, r4
 801eac2:	f015 f9ee 	bl	8033ea2 <strncmp>
 801eac6:	4603      	mov	r3, r0
    if (name && (strlen(entry->name) == strlen(name)) &&
 801eac8:	2b00      	cmp	r3, #0
 801eaca:	d101      	bne.n	801ead0 <ai_mnetwork_is_valid+0x4c>
        return true;
 801eacc:	2301      	movs	r3, #1
 801eace:	e000      	b.n	801ead2 <ai_mnetwork_is_valid+0x4e>
    return false;
 801ead0:	2300      	movs	r3, #0
}
 801ead2:	4618      	mov	r0, r3
 801ead4:	370c      	adds	r7, #12
 801ead6:	46bd      	mov	sp, r7
 801ead8:	bd90      	pop	{r4, r7, pc}
	...

0801eadc <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
 801eadc:	b480      	push	{r7}
 801eade:	b085      	sub	sp, #20
 801eae0:	af00      	add	r7, sp, #0
 801eae2:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 801eae4:	2300      	movs	r3, #0
 801eae6:	60fb      	str	r3, [r7, #12]
 801eae8:	e01d      	b.n	801eb26 <ai_mnetwork_handle+0x4a>
        if ((inst) && (&gnetworks[i] == inst))
 801eaea:	687b      	ldr	r3, [r7, #4]
 801eaec:	2b00      	cmp	r3, #0
 801eaee:	d008      	beq.n	801eb02 <ai_mnetwork_handle+0x26>
 801eaf0:	68fb      	ldr	r3, [r7, #12]
 801eaf2:	019b      	lsls	r3, r3, #6
 801eaf4:	4a11      	ldr	r2, [pc, #68]	@ (801eb3c <ai_mnetwork_handle+0x60>)
 801eaf6:	4413      	add	r3, r2
 801eaf8:	687a      	ldr	r2, [r7, #4]
 801eafa:	429a      	cmp	r2, r3
 801eafc:	d101      	bne.n	801eb02 <ai_mnetwork_handle+0x26>
            return inst;
 801eafe:	687b      	ldr	r3, [r7, #4]
 801eb00:	e015      	b.n	801eb2e <ai_mnetwork_handle+0x52>
        else if ((!inst) && (gnetworks[i].entry == NULL))
 801eb02:	687b      	ldr	r3, [r7, #4]
 801eb04:	2b00      	cmp	r3, #0
 801eb06:	d10b      	bne.n	801eb20 <ai_mnetwork_handle+0x44>
 801eb08:	4a0c      	ldr	r2, [pc, #48]	@ (801eb3c <ai_mnetwork_handle+0x60>)
 801eb0a:	68fb      	ldr	r3, [r7, #12]
 801eb0c:	019b      	lsls	r3, r3, #6
 801eb0e:	4413      	add	r3, r2
 801eb10:	681b      	ldr	r3, [r3, #0]
 801eb12:	2b00      	cmp	r3, #0
 801eb14:	d104      	bne.n	801eb20 <ai_mnetwork_handle+0x44>
            return &gnetworks[i];
 801eb16:	68fb      	ldr	r3, [r7, #12]
 801eb18:	019b      	lsls	r3, r3, #6
 801eb1a:	4a08      	ldr	r2, [pc, #32]	@ (801eb3c <ai_mnetwork_handle+0x60>)
 801eb1c:	4413      	add	r3, r2
 801eb1e:	e006      	b.n	801eb2e <ai_mnetwork_handle+0x52>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 801eb20:	68fb      	ldr	r3, [r7, #12]
 801eb22:	3301      	adds	r3, #1
 801eb24:	60fb      	str	r3, [r7, #12]
 801eb26:	68fb      	ldr	r3, [r7, #12]
 801eb28:	2b00      	cmp	r3, #0
 801eb2a:	ddde      	ble.n	801eaea <ai_mnetwork_handle+0xe>
    }
    return NULL;
 801eb2c:	2300      	movs	r3, #0
}
 801eb2e:	4618      	mov	r0, r3
 801eb30:	3714      	adds	r7, #20
 801eb32:	46bd      	mov	sp, r7
 801eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb38:	4770      	bx	lr
 801eb3a:	bf00      	nop
 801eb3c:	2405282c 	.word	0x2405282c

0801eb40 <ai_mnetwork_release_handle>:

AI_DECLARE_STATIC
void ai_mnetwork_release_handle(struct network_instance *inst)
{
 801eb40:	b480      	push	{r7}
 801eb42:	b085      	sub	sp, #20
 801eb44:	af00      	add	r7, sp, #0
 801eb46:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 801eb48:	2300      	movs	r3, #0
 801eb4a:	60fb      	str	r3, [r7, #12]
 801eb4c:	e013      	b.n	801eb76 <ai_mnetwork_release_handle+0x36>
        if ((inst) && (&gnetworks[i] == inst)) {
 801eb4e:	687b      	ldr	r3, [r7, #4]
 801eb50:	2b00      	cmp	r3, #0
 801eb52:	d00d      	beq.n	801eb70 <ai_mnetwork_release_handle+0x30>
 801eb54:	68fb      	ldr	r3, [r7, #12]
 801eb56:	019b      	lsls	r3, r3, #6
 801eb58:	4a0b      	ldr	r2, [pc, #44]	@ (801eb88 <ai_mnetwork_release_handle+0x48>)
 801eb5a:	4413      	add	r3, r2
 801eb5c:	687a      	ldr	r2, [r7, #4]
 801eb5e:	429a      	cmp	r2, r3
 801eb60:	d106      	bne.n	801eb70 <ai_mnetwork_release_handle+0x30>
            gnetworks[i].entry = NULL;
 801eb62:	4a09      	ldr	r2, [pc, #36]	@ (801eb88 <ai_mnetwork_release_handle+0x48>)
 801eb64:	68fb      	ldr	r3, [r7, #12]
 801eb66:	019b      	lsls	r3, r3, #6
 801eb68:	4413      	add	r3, r2
 801eb6a:	2200      	movs	r2, #0
 801eb6c:	601a      	str	r2, [r3, #0]
            return;
 801eb6e:	e005      	b.n	801eb7c <ai_mnetwork_release_handle+0x3c>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 801eb70:	68fb      	ldr	r3, [r7, #12]
 801eb72:	3301      	adds	r3, #1
 801eb74:	60fb      	str	r3, [r7, #12]
 801eb76:	68fb      	ldr	r3, [r7, #12]
 801eb78:	2b00      	cmp	r3, #0
 801eb7a:	dde8      	ble.n	801eb4e <ai_mnetwork_release_handle+0xe>
        }
    }
}
 801eb7c:	3714      	adds	r7, #20
 801eb7e:	46bd      	mov	sp, r7
 801eb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb84:	4770      	bx	lr
 801eb86:	bf00      	nop
 801eb88:	2405282c 	.word	0x2405282c

0801eb8c <ai_mnetwork_find>:

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 801eb8c:	b580      	push	{r7, lr}
 801eb8e:	b084      	sub	sp, #16
 801eb90:	af00      	add	r7, sp, #0
 801eb92:	6078      	str	r0, [r7, #4]
 801eb94:	6039      	str	r1, [r7, #0]
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 801eb96:	2300      	movs	r3, #0
 801eb98:	60fb      	str	r3, [r7, #12]
 801eb9a:	e01b      	b.n	801ebd4 <ai_mnetwork_find+0x48>
        entry = &networks[i];
 801eb9c:	68fb      	ldr	r3, [r7, #12]
 801eb9e:	222c      	movs	r2, #44	@ 0x2c
 801eba0:	fb02 f303 	mul.w	r3, r2, r3
 801eba4:	4a0f      	ldr	r2, [pc, #60]	@ (801ebe4 <ai_mnetwork_find+0x58>)
 801eba6:	4413      	add	r3, r2
 801eba8:	60bb      	str	r3, [r7, #8]
        if (ai_mnetwork_is_valid(name, entry))
 801ebaa:	68b9      	ldr	r1, [r7, #8]
 801ebac:	6878      	ldr	r0, [r7, #4]
 801ebae:	f7ff ff69 	bl	801ea84 <ai_mnetwork_is_valid>
 801ebb2:	4603      	mov	r3, r0
 801ebb4:	2b00      	cmp	r3, #0
 801ebb6:	d002      	beq.n	801ebbe <ai_mnetwork_find+0x32>
            return entry->name;
 801ebb8:	68bb      	ldr	r3, [r7, #8]
 801ebba:	681b      	ldr	r3, [r3, #0]
 801ebbc:	e00e      	b.n	801ebdc <ai_mnetwork_find+0x50>
        else {
            if (!idx--)
 801ebbe:	683b      	ldr	r3, [r7, #0]
 801ebc0:	1e5a      	subs	r2, r3, #1
 801ebc2:	603a      	str	r2, [r7, #0]
 801ebc4:	2b00      	cmp	r3, #0
 801ebc6:	d102      	bne.n	801ebce <ai_mnetwork_find+0x42>
                return entry->name;
 801ebc8:	68bb      	ldr	r3, [r7, #8]
 801ebca:	681b      	ldr	r3, [r3, #0]
 801ebcc:	e006      	b.n	801ebdc <ai_mnetwork_find+0x50>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 801ebce:	68fb      	ldr	r3, [r7, #12]
 801ebd0:	3301      	adds	r3, #1
 801ebd2:	60fb      	str	r3, [r7, #12]
 801ebd4:	68fb      	ldr	r3, [r7, #12]
 801ebd6:	2b00      	cmp	r3, #0
 801ebd8:	dde0      	ble.n	801eb9c <ai_mnetwork_find+0x10>
        }
    }
    return NULL;
 801ebda:	2300      	movs	r3, #0
}
 801ebdc:	4618      	mov	r0, r3
 801ebde:	3710      	adds	r7, #16
 801ebe0:	46bd      	mov	sp, r7
 801ebe2:	bd80      	pop	{r7, pc}
 801ebe4:	080382ec 	.word	0x080382ec

0801ebe8 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 801ebe8:	b580      	push	{r7, lr}
 801ebea:	b08a      	sub	sp, #40	@ 0x28
 801ebec:	af00      	add	r7, sp, #0
 801ebee:	60f8      	str	r0, [r7, #12]
 801ebf0:	60b9      	str	r1, [r7, #8]
 801ebf2:	607a      	str	r2, [r7, #4]
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
 801ebf4:	2300      	movs	r3, #0
 801ebf6:	627b      	str	r3, [r7, #36]	@ 0x24
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 801ebf8:	2000      	movs	r0, #0
 801ebfa:	f7ff ff6f 	bl	801eadc <ai_mnetwork_handle>
 801ebfe:	61f8      	str	r0, [r7, #28]

    if (!inst) {
 801ec00:	69fb      	ldr	r3, [r7, #28]
 801ec02:	2b00      	cmp	r3, #0
 801ec04:	d108      	bne.n	801ec18 <ai_mnetwork_create+0x30>
        err.type = AI_ERROR_ALLOCATION_FAILED;
 801ec06:	2331      	movs	r3, #49	@ 0x31
 801ec08:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 801ec0a:	697b      	ldr	r3, [r7, #20]
 801ec0c:	2210      	movs	r2, #16
 801ec0e:	f362 231f 	bfi	r3, r2, #8, #24
 801ec12:	617b      	str	r3, [r7, #20]
        return err;
 801ec14:	697b      	ldr	r3, [r7, #20]
 801ec16:	e04c      	b.n	801ecb2 <ai_mnetwork_create+0xca>
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 801ec18:	2300      	movs	r3, #0
 801ec1a:	623b      	str	r3, [r7, #32]
 801ec1c:	e013      	b.n	801ec46 <ai_mnetwork_create+0x5e>
        entry = &networks[i];
 801ec1e:	6a3b      	ldr	r3, [r7, #32]
 801ec20:	222c      	movs	r2, #44	@ 0x2c
 801ec22:	fb02 f303 	mul.w	r3, r2, r3
 801ec26:	4a25      	ldr	r2, [pc, #148]	@ (801ecbc <ai_mnetwork_create+0xd4>)
 801ec28:	4413      	add	r3, r2
 801ec2a:	61bb      	str	r3, [r7, #24]
        if (ai_mnetwork_is_valid(name, entry)) {
 801ec2c:	69b9      	ldr	r1, [r7, #24]
 801ec2e:	68f8      	ldr	r0, [r7, #12]
 801ec30:	f7ff ff28 	bl	801ea84 <ai_mnetwork_is_valid>
 801ec34:	4603      	mov	r3, r0
 801ec36:	2b00      	cmp	r3, #0
 801ec38:	d002      	beq.n	801ec40 <ai_mnetwork_create+0x58>
            found = entry;
 801ec3a:	69bb      	ldr	r3, [r7, #24]
 801ec3c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 801ec3e:	e005      	b.n	801ec4c <ai_mnetwork_create+0x64>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 801ec40:	6a3b      	ldr	r3, [r7, #32]
 801ec42:	3301      	adds	r3, #1
 801ec44:	623b      	str	r3, [r7, #32]
 801ec46:	6a3b      	ldr	r3, [r7, #32]
 801ec48:	2b00      	cmp	r3, #0
 801ec4a:	dde8      	ble.n	801ec1e <ai_mnetwork_create+0x36>
        }
    }

    if (!found) {
 801ec4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec4e:	2b00      	cmp	r3, #0
 801ec50:	d108      	bne.n	801ec64 <ai_mnetwork_create+0x7c>
        err.type = AI_ERROR_INVALID_PARAM;
 801ec52:	2314      	movs	r3, #20
 801ec54:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 801ec56:	697b      	ldr	r3, [r7, #20]
 801ec58:	2210      	movs	r2, #16
 801ec5a:	f362 231f 	bfi	r3, r2, #8, #24
 801ec5e:	617b      	str	r3, [r7, #20]
        return err;
 801ec60:	697b      	ldr	r3, [r7, #20]
 801ec62:	e026      	b.n	801ecb2 <ai_mnetwork_create+0xca>
    }

    if (network_config == NULL)
 801ec64:	687b      	ldr	r3, [r7, #4]
 801ec66:	2b00      	cmp	r3, #0
 801ec68:	d109      	bne.n	801ec7e <ai_mnetwork_create+0x96>
        err = found->ai_create(network, found->config);
 801ec6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec6c:	691b      	ldr	r3, [r3, #16]
 801ec6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ec70:	6852      	ldr	r2, [r2, #4]
 801ec72:	4611      	mov	r1, r2
 801ec74:	68b8      	ldr	r0, [r7, #8]
 801ec76:	4798      	blx	r3
 801ec78:	4603      	mov	r3, r0
 801ec7a:	617b      	str	r3, [r7, #20]
 801ec7c:	e006      	b.n	801ec8c <ai_mnetwork_create+0xa4>
    else
        err = found->ai_create(network, network_config);
 801ec7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec80:	691b      	ldr	r3, [r3, #16]
 801ec82:	6879      	ldr	r1, [r7, #4]
 801ec84:	68b8      	ldr	r0, [r7, #8]
 801ec86:	4798      	blx	r3
 801ec88:	4603      	mov	r3, r0
 801ec8a:	617b      	str	r3, [r7, #20]
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 801ec8c:	697b      	ldr	r3, [r7, #20]
 801ec8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	d10c      	bne.n	801ecb0 <ai_mnetwork_create+0xc8>
 801ec96:	7d3b      	ldrb	r3, [r7, #20]
 801ec98:	2b00      	cmp	r3, #0
 801ec9a:	d109      	bne.n	801ecb0 <ai_mnetwork_create+0xc8>
        inst->entry = found;
 801ec9c:	69fb      	ldr	r3, [r7, #28]
 801ec9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801eca0:	601a      	str	r2, [r3, #0]
        inst->handle = *network;
 801eca2:	68bb      	ldr	r3, [r7, #8]
 801eca4:	681a      	ldr	r2, [r3, #0]
 801eca6:	69fb      	ldr	r3, [r7, #28]
 801eca8:	605a      	str	r2, [r3, #4]
        *network = (ai_handle*)inst;
 801ecaa:	68bb      	ldr	r3, [r7, #8]
 801ecac:	69fa      	ldr	r2, [r7, #28]
 801ecae:	601a      	str	r2, [r3, #0]
    }

    return err;
 801ecb0:	697b      	ldr	r3, [r7, #20]
}
 801ecb2:	4618      	mov	r0, r3
 801ecb4:	3728      	adds	r7, #40	@ 0x28
 801ecb6:	46bd      	mov	sp, r7
 801ecb8:	bd80      	pop	{r7, pc}
 801ecba:	bf00      	nop
 801ecbc:	080382ec 	.word	0x080382ec

0801ecc0 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 801ecc0:	b580      	push	{r7, lr}
 801ecc2:	b084      	sub	sp, #16
 801ecc4:	af00      	add	r7, sp, #0
 801ecc6:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 801ecc8:	6878      	ldr	r0, [r7, #4]
 801ecca:	f7ff ff07 	bl	801eadc <ai_mnetwork_handle>
 801ecce:	60f8      	str	r0, [r7, #12]
    if (inn) {
 801ecd0:	68fb      	ldr	r3, [r7, #12]
 801ecd2:	2b00      	cmp	r3, #0
 801ecd4:	d011      	beq.n	801ecfa <ai_mnetwork_destroy+0x3a>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 801ecd6:	68fb      	ldr	r3, [r7, #12]
 801ecd8:	681b      	ldr	r3, [r3, #0]
 801ecda:	699b      	ldr	r3, [r3, #24]
 801ecdc:	68fa      	ldr	r2, [r7, #12]
 801ecde:	6852      	ldr	r2, [r2, #4]
 801ece0:	4610      	mov	r0, r2
 801ece2:	4798      	blx	r3
 801ece4:	60b8      	str	r0, [r7, #8]
        if (hdl != inn->handle) {
 801ece6:	68fb      	ldr	r3, [r7, #12]
 801ece8:	685b      	ldr	r3, [r3, #4]
 801ecea:	68ba      	ldr	r2, [r7, #8]
 801ecec:	429a      	cmp	r2, r3
 801ecee:	d004      	beq.n	801ecfa <ai_mnetwork_destroy+0x3a>
            ai_mnetwork_release_handle(inn);
 801ecf0:	68f8      	ldr	r0, [r7, #12]
 801ecf2:	f7ff ff25 	bl	801eb40 <ai_mnetwork_release_handle>
            network = AI_HANDLE_NULL;
 801ecf6:	2300      	movs	r3, #0
 801ecf8:	607b      	str	r3, [r7, #4]
        }
    }
    return network;
 801ecfa:	687b      	ldr	r3, [r7, #4]
}
 801ecfc:	4618      	mov	r0, r3
 801ecfe:	3710      	adds	r7, #16
 801ed00:	46bd      	mov	sp, r7
 801ed02:	bd80      	pop	{r7, pc}

0801ed04 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 801ed04:	b580      	push	{r7, lr}
 801ed06:	b084      	sub	sp, #16
 801ed08:	af00      	add	r7, sp, #0
 801ed0a:	6078      	str	r0, [r7, #4]
 801ed0c:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 801ed0e:	6878      	ldr	r0, [r7, #4]
 801ed10:	f7ff fee4 	bl	801eadc <ai_mnetwork_handle>
 801ed14:	60f8      	str	r0, [r7, #12]
    if (inn)
 801ed16:	68fb      	ldr	r3, [r7, #12]
 801ed18:	2b00      	cmp	r3, #0
 801ed1a:	d009      	beq.n	801ed30 <ai_mnetwork_get_report+0x2c>
        return inn->entry->ai_get_report(inn->handle, report);
 801ed1c:	68fb      	ldr	r3, [r7, #12]
 801ed1e:	681b      	ldr	r3, [r3, #0]
 801ed20:	68db      	ldr	r3, [r3, #12]
 801ed22:	68fa      	ldr	r2, [r7, #12]
 801ed24:	6852      	ldr	r2, [r2, #4]
 801ed26:	6839      	ldr	r1, [r7, #0]
 801ed28:	4610      	mov	r0, r2
 801ed2a:	4798      	blx	r3
 801ed2c:	4603      	mov	r3, r0
 801ed2e:	e000      	b.n	801ed32 <ai_mnetwork_get_report+0x2e>
    else
        return false;
 801ed30:	2300      	movs	r3, #0
}
 801ed32:	4618      	mov	r0, r3
 801ed34:	3710      	adds	r7, #16
 801ed36:	46bd      	mov	sp, r7
 801ed38:	bd80      	pop	{r7, pc}

0801ed3a <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 801ed3a:	b580      	push	{r7, lr}
 801ed3c:	b084      	sub	sp, #16
 801ed3e:	af00      	add	r7, sp, #0
 801ed40:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
 801ed42:	2314      	movs	r3, #20
 801ed44:	723b      	strb	r3, [r7, #8]
    err.code = AI_ERROR_CODE_NETWORK;
 801ed46:	68bb      	ldr	r3, [r7, #8]
 801ed48:	2210      	movs	r2, #16
 801ed4a:	f362 231f 	bfi	r3, r2, #8, #24
 801ed4e:	60bb      	str	r3, [r7, #8]

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 801ed50:	6878      	ldr	r0, [r7, #4]
 801ed52:	f7ff fec3 	bl	801eadc <ai_mnetwork_handle>
 801ed56:	60f8      	str	r0, [r7, #12]
    if (inn)
 801ed58:	68fb      	ldr	r3, [r7, #12]
 801ed5a:	2b00      	cmp	r3, #0
 801ed5c:	d008      	beq.n	801ed70 <ai_mnetwork_get_error+0x36>
        return inn->entry->ai_get_error(inn->handle);
 801ed5e:	68fb      	ldr	r3, [r7, #12]
 801ed60:	681b      	ldr	r3, [r3, #0]
 801ed62:	695b      	ldr	r3, [r3, #20]
 801ed64:	68fa      	ldr	r2, [r7, #12]
 801ed66:	6852      	ldr	r2, [r2, #4]
 801ed68:	4610      	mov	r0, r2
 801ed6a:	4798      	blx	r3
 801ed6c:	4603      	mov	r3, r0
 801ed6e:	e000      	b.n	801ed72 <ai_mnetwork_get_error+0x38>
    else
        return err;
 801ed70:	68bb      	ldr	r3, [r7, #8]
}
 801ed72:	4618      	mov	r0, r3
 801ed74:	3710      	adds	r7, #16
 801ed76:	46bd      	mov	sp, r7
 801ed78:	bd80      	pop	{r7, pc}

0801ed7a <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 801ed7a:	b580      	push	{r7, lr}
 801ed7c:	b092      	sub	sp, #72	@ 0x48
 801ed7e:	af00      	add	r7, sp, #0
 801ed80:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 801ed82:	6878      	ldr	r0, [r7, #4]
 801ed84:	f7ff feaa 	bl	801eadc <ai_mnetwork_handle>
 801ed88:	6438      	str	r0, [r7, #64]	@ 0x40
    if (inn) {
 801ed8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ed8c:	2b00      	cmp	r3, #0
 801ed8e:	d02a      	beq.n	801ede6 <ai_mnetwork_init+0x6c>
        inn->entry->ai_data_params_get(&par);
 801ed90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ed92:	681b      	ldr	r3, [r3, #0]
 801ed94:	689b      	ldr	r3, [r3, #8]
 801ed96:	f107 0208 	add.w	r2, r7, #8
 801ed9a:	4610      	mov	r0, r2
 801ed9c:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 801ed9e:	2300      	movs	r3, #0
 801eda0:	647b      	str	r3, [r7, #68]	@ 0x44
 801eda2:	e010      	b.n	801edc6 <ai_mnetwork_init+0x4c>
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 801eda4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801eda6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801eda8:	681b      	ldr	r3, [r3, #0]
 801edaa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801edac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801edae:	009b      	lsls	r3, r3, #2
 801edb0:	4413      	add	r3, r2
 801edb2:	681a      	ldr	r2, [r3, #0]
 801edb4:	f107 0308 	add.w	r3, r7, #8
 801edb8:	330c      	adds	r3, #12
 801edba:	4618      	mov	r0, r3
 801edbc:	f003 ff22 	bl	8022c04 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 801edc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801edc2:	3301      	adds	r3, #1
 801edc4:	647b      	str	r3, [r7, #68]	@ 0x44
 801edc6:	8afb      	ldrh	r3, [r7, #22]
 801edc8:	461a      	mov	r2, r3
 801edca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801edcc:	4293      	cmp	r3, r2
 801edce:	dbe9      	blt.n	801eda4 <ai_mnetwork_init+0x2a>
        return inn->entry->ai_init(inn->handle, &par);
 801edd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801edd2:	681b      	ldr	r3, [r3, #0]
 801edd4:	69db      	ldr	r3, [r3, #28]
 801edd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801edd8:	6852      	ldr	r2, [r2, #4]
 801edda:	f107 0108 	add.w	r1, r7, #8
 801edde:	4610      	mov	r0, r2
 801ede0:	4798      	blx	r3
 801ede2:	4603      	mov	r3, r0
 801ede4:	e000      	b.n	801ede8 <ai_mnetwork_init+0x6e>
    }
    else
        return false;
 801ede6:	2300      	movs	r3, #0
}
 801ede8:	4618      	mov	r0, r3
 801edea:	3748      	adds	r7, #72	@ 0x48
 801edec:	46bd      	mov	sp, r7
 801edee:	bd80      	pop	{r7, pc}

0801edf0 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 801edf0:	b580      	push	{r7, lr}
 801edf2:	b086      	sub	sp, #24
 801edf4:	af00      	add	r7, sp, #0
 801edf6:	60f8      	str	r0, [r7, #12]
 801edf8:	60b9      	str	r1, [r7, #8]
 801edfa:	607a      	str	r2, [r7, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 801edfc:	68f8      	ldr	r0, [r7, #12]
 801edfe:	f7ff fe6d 	bl	801eadc <ai_mnetwork_handle>
 801ee02:	6178      	str	r0, [r7, #20]
    if (inn)
 801ee04:	697b      	ldr	r3, [r7, #20]
 801ee06:	2b00      	cmp	r3, #0
 801ee08:	d009      	beq.n	801ee1e <ai_mnetwork_run+0x2e>
        return inn->entry->ai_run(inn->handle, input, output);
 801ee0a:	697b      	ldr	r3, [r7, #20]
 801ee0c:	681b      	ldr	r3, [r3, #0]
 801ee0e:	6a1b      	ldr	r3, [r3, #32]
 801ee10:	697a      	ldr	r2, [r7, #20]
 801ee12:	6850      	ldr	r0, [r2, #4]
 801ee14:	687a      	ldr	r2, [r7, #4]
 801ee16:	68b9      	ldr	r1, [r7, #8]
 801ee18:	4798      	blx	r3
 801ee1a:	4603      	mov	r3, r0
 801ee1c:	e000      	b.n	801ee20 <ai_mnetwork_run+0x30>
    else
        return 0;
 801ee1e:	2300      	movs	r3, #0
}
 801ee20:	4618      	mov	r0, r3
 801ee22:	3718      	adds	r7, #24
 801ee24:	46bd      	mov	sp, r7
 801ee26:	bd80      	pop	{r7, pc}

0801ee28 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 801ee28:	b5b0      	push	{r4, r5, r7, lr}
 801ee2a:	b086      	sub	sp, #24
 801ee2c:	af00      	add	r7, sp, #0
 801ee2e:	60f8      	str	r0, [r7, #12]
 801ee30:	60b9      	str	r1, [r7, #8]
 801ee32:	607a      	str	r2, [r7, #4]
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 801ee34:	68f8      	ldr	r0, [r7, #12]
 801ee36:	f7ff fe51 	bl	801eadc <ai_mnetwork_handle>
 801ee3a:	6178      	str	r0, [r7, #20]
     if (inn && phandle && pparams) {
 801ee3c:	697b      	ldr	r3, [r7, #20]
 801ee3e:	2b00      	cmp	r3, #0
 801ee40:	d01a      	beq.n	801ee78 <ai_mnetwork_get_private_handle+0x50>
 801ee42:	68bb      	ldr	r3, [r7, #8]
 801ee44:	2b00      	cmp	r3, #0
 801ee46:	d017      	beq.n	801ee78 <ai_mnetwork_get_private_handle+0x50>
 801ee48:	687b      	ldr	r3, [r7, #4]
 801ee4a:	2b00      	cmp	r3, #0
 801ee4c:	d014      	beq.n	801ee78 <ai_mnetwork_get_private_handle+0x50>
         *phandle = inn->handle;
 801ee4e:	697b      	ldr	r3, [r7, #20]
 801ee50:	685a      	ldr	r2, [r3, #4]
 801ee52:	68bb      	ldr	r3, [r7, #8]
 801ee54:	601a      	str	r2, [r3, #0]
         *pparams = inn->params;
 801ee56:	687a      	ldr	r2, [r7, #4]
 801ee58:	697b      	ldr	r3, [r7, #20]
 801ee5a:	4615      	mov	r5, r2
 801ee5c:	f103 0408 	add.w	r4, r3, #8
 801ee60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ee62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ee64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ee66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ee68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ee6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ee6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 801ee70:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 801ee74:	2300      	movs	r3, #0
 801ee76:	e001      	b.n	801ee7c <ai_mnetwork_get_private_handle+0x54>
     }
     else
         return -1;
 801ee78:	f04f 33ff 	mov.w	r3, #4294967295
 }
 801ee7c:	4618      	mov	r0, r3
 801ee7e:	3718      	adds	r7, #24
 801ee80:	46bd      	mov	sp, r7
 801ee82:	bdb0      	pop	{r4, r5, r7, pc}

0801ee84 <_write_string>:
#define _WRITE_C(_c) \
		specifier->putc_fct(specifier->user, _c); \
		count++;

static int _write_string(const char *str, struct specifier *specifier)
{
 801ee84:	b580      	push	{r7, lr}
 801ee86:	b088      	sub	sp, #32
 801ee88:	af00      	add	r7, sp, #0
 801ee8a:	6078      	str	r0, [r7, #4]
 801ee8c:	6039      	str	r1, [r7, #0]
  int len = strlen(str);
 801ee8e:	6878      	ldr	r0, [r7, #4]
 801ee90:	f7f1 f926 	bl	80100e0 <strlen>
 801ee94:	4603      	mov	r3, r0
 801ee96:	61fb      	str	r3, [r7, #28]
  int count = 0;
 801ee98:	2300      	movs	r3, #0
 801ee9a:	61bb      	str	r3, [r7, #24]

  if (specifier->precision) {
 801ee9c:	683b      	ldr	r3, [r7, #0]
 801ee9e:	685b      	ldr	r3, [r3, #4]
 801eea0:	2b00      	cmp	r3, #0
 801eea2:	d006      	beq.n	801eeb2 <_write_string+0x2e>
    len = (len > specifier->precision)?specifier->precision:len;
 801eea4:	683b      	ldr	r3, [r7, #0]
 801eea6:	685b      	ldr	r3, [r3, #4]
 801eea8:	69fa      	ldr	r2, [r7, #28]
 801eeaa:	4293      	cmp	r3, r2
 801eeac:	bfa8      	it	ge
 801eeae:	4613      	movge	r3, r2
 801eeb0:	61fb      	str	r3, [r7, #28]
  }

  if (!(specifier->flags & FLAG_NEG_PAD)) {
 801eeb2:	683b      	ldr	r3, [r7, #0]
 801eeb4:	689b      	ldr	r3, [r3, #8]
 801eeb6:	f003 0302 	and.w	r3, r3, #2
 801eeba:	2b00      	cmp	r3, #0
 801eebc:	d114      	bne.n	801eee8 <_write_string+0x64>
    for(int i = len; i < specifier->width; i++) {
 801eebe:	69fb      	ldr	r3, [r7, #28]
 801eec0:	617b      	str	r3, [r7, #20]
 801eec2:	e00c      	b.n	801eede <_write_string+0x5a>
      _WRITE_C(' ');
 801eec4:	683b      	ldr	r3, [r7, #0]
 801eec6:	68db      	ldr	r3, [r3, #12]
 801eec8:	683a      	ldr	r2, [r7, #0]
 801eeca:	6912      	ldr	r2, [r2, #16]
 801eecc:	2120      	movs	r1, #32
 801eece:	4610      	mov	r0, r2
 801eed0:	4798      	blx	r3
 801eed2:	69bb      	ldr	r3, [r7, #24]
 801eed4:	3301      	adds	r3, #1
 801eed6:	61bb      	str	r3, [r7, #24]
    for(int i = len; i < specifier->width; i++) {
 801eed8:	697b      	ldr	r3, [r7, #20]
 801eeda:	3301      	adds	r3, #1
 801eedc:	617b      	str	r3, [r7, #20]
 801eede:	683b      	ldr	r3, [r7, #0]
 801eee0:	681b      	ldr	r3, [r3, #0]
 801eee2:	697a      	ldr	r2, [r7, #20]
 801eee4:	429a      	cmp	r2, r3
 801eee6:	dbed      	blt.n	801eec4 <_write_string+0x40>
    }
  }

  for (int i = 0; i < len; i++) {
 801eee8:	2300      	movs	r3, #0
 801eeea:	613b      	str	r3, [r7, #16]
 801eeec:	e00f      	b.n	801ef0e <_write_string+0x8a>
    _WRITE_C(*str++);
 801eeee:	683b      	ldr	r3, [r7, #0]
 801eef0:	68da      	ldr	r2, [r3, #12]
 801eef2:	683b      	ldr	r3, [r7, #0]
 801eef4:	6918      	ldr	r0, [r3, #16]
 801eef6:	687b      	ldr	r3, [r7, #4]
 801eef8:	1c59      	adds	r1, r3, #1
 801eefa:	6079      	str	r1, [r7, #4]
 801eefc:	781b      	ldrb	r3, [r3, #0]
 801eefe:	4619      	mov	r1, r3
 801ef00:	4790      	blx	r2
 801ef02:	69bb      	ldr	r3, [r7, #24]
 801ef04:	3301      	adds	r3, #1
 801ef06:	61bb      	str	r3, [r7, #24]
  for (int i = 0; i < len; i++) {
 801ef08:	693b      	ldr	r3, [r7, #16]
 801ef0a:	3301      	adds	r3, #1
 801ef0c:	613b      	str	r3, [r7, #16]
 801ef0e:	693a      	ldr	r2, [r7, #16]
 801ef10:	69fb      	ldr	r3, [r7, #28]
 801ef12:	429a      	cmp	r2, r3
 801ef14:	dbeb      	blt.n	801eeee <_write_string+0x6a>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 801ef16:	683b      	ldr	r3, [r7, #0]
 801ef18:	689b      	ldr	r3, [r3, #8]
 801ef1a:	f003 0302 	and.w	r3, r3, #2
 801ef1e:	2b00      	cmp	r3, #0
 801ef20:	d014      	beq.n	801ef4c <_write_string+0xc8>
    for(int i = len; i < specifier->width; i++) {
 801ef22:	69fb      	ldr	r3, [r7, #28]
 801ef24:	60fb      	str	r3, [r7, #12]
 801ef26:	e00c      	b.n	801ef42 <_write_string+0xbe>
      _WRITE_C(' ');
 801ef28:	683b      	ldr	r3, [r7, #0]
 801ef2a:	68db      	ldr	r3, [r3, #12]
 801ef2c:	683a      	ldr	r2, [r7, #0]
 801ef2e:	6912      	ldr	r2, [r2, #16]
 801ef30:	2120      	movs	r1, #32
 801ef32:	4610      	mov	r0, r2
 801ef34:	4798      	blx	r3
 801ef36:	69bb      	ldr	r3, [r7, #24]
 801ef38:	3301      	adds	r3, #1
 801ef3a:	61bb      	str	r3, [r7, #24]
    for(int i = len; i < specifier->width; i++) {
 801ef3c:	68fb      	ldr	r3, [r7, #12]
 801ef3e:	3301      	adds	r3, #1
 801ef40:	60fb      	str	r3, [r7, #12]
 801ef42:	683b      	ldr	r3, [r7, #0]
 801ef44:	681b      	ldr	r3, [r3, #0]
 801ef46:	68fa      	ldr	r2, [r7, #12]
 801ef48:	429a      	cmp	r2, r3
 801ef4a:	dbed      	blt.n	801ef28 <_write_string+0xa4>
    }
  }

  return count;
 801ef4c:	69bb      	ldr	r3, [r7, #24]
}
 801ef4e:	4618      	mov	r0, r3
 801ef50:	3720      	adds	r7, #32
 801ef52:	46bd      	mov	sp, r7
 801ef54:	bd80      	pop	{r7, pc}

0801ef56 <_write_number>:

static int _write_number(uint64_t number, struct specifier *specifier)
{
 801ef56:	b5b0      	push	{r4, r5, r7, lr}
 801ef58:	b09c      	sub	sp, #112	@ 0x70
 801ef5a:	af00      	add	r7, sp, #0
 801ef5c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 801ef60:	607a      	str	r2, [r7, #4]
  char buf[64];
  uint32_t idx = sizeof(buf) - 1;
 801ef62:	233f      	movs	r3, #63	@ 0x3f
 801ef64:	66fb      	str	r3, [r7, #108]	@ 0x6c
  int count = 0;
 801ef66:	2300      	movs	r3, #0
 801ef68:	66bb      	str	r3, [r7, #104]	@ 0x68
  char sign_neg = 0;
 801ef6a:	2300      	movs	r3, #0
 801ef6c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  char chr;

  buf[idx--] = 0;
 801ef70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ef72:	1e5a      	subs	r2, r3, #1
 801ef74:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801ef76:	3370      	adds	r3, #112	@ 0x70
 801ef78:	443b      	add	r3, r7
 801ef7a:	2200      	movs	r2, #0
 801ef7c:	f803 2c5c 	strb.w	r2, [r3, #-92]

  if (specifier->flags & FLAG_IS_SIGNED) {
 801ef80:	687b      	ldr	r3, [r7, #4]
 801ef82:	689b      	ldr	r3, [r3, #8]
 801ef84:	f003 0304 	and.w	r3, r3, #4
 801ef88:	2b00      	cmp	r3, #0
 801ef8a:	d013      	beq.n	801efb4 <_write_number+0x5e>
    if ((int64_t)number < 0) {
 801ef8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801ef90:	2b00      	cmp	r3, #0
 801ef92:	da0f      	bge.n	801efb4 <_write_number+0x5e>
      number = -number;
 801ef94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801ef98:	2100      	movs	r1, #0
 801ef9a:	4254      	negs	r4, r2
 801ef9c:	eb61 0503 	sbc.w	r5, r1, r3
 801efa0:	e9c7 4502 	strd	r4, r5, [r7, #8]
      sign_neg = '-';
 801efa4:	232d      	movs	r3, #45	@ 0x2d
 801efa6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      specifier->width -= 1;
 801efaa:	687b      	ldr	r3, [r7, #4]
 801efac:	681b      	ldr	r3, [r3, #0]
 801efae:	1e5a      	subs	r2, r3, #1
 801efb0:	687b      	ldr	r3, [r7, #4]
 801efb2:	601a      	str	r2, [r3, #0]
    }
  }

  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
 801efb4:	687b      	ldr	r3, [r7, #4]
 801efb6:	689b      	ldr	r3, [r3, #8]
 801efb8:	f003 0310 	and.w	r3, r3, #16
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	d02b      	beq.n	801f018 <_write_number+0xc2>
      chr = number & 0x0F;
 801efc0:	7a3b      	ldrb	r3, [r7, #8]
 801efc2:	f003 030f 	and.w	r3, r3, #15
 801efc6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
      t = number >> 4;
 801efca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801efce:	f04f 0200 	mov.w	r2, #0
 801efd2:	f04f 0300 	mov.w	r3, #0
 801efd6:	0902      	lsrs	r2, r0, #4
 801efd8:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 801efdc:	090b      	lsrs	r3, r1, #4
 801efde:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 801efe2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 801efe6:	2b09      	cmp	r3, #9
 801efe8:	d90f      	bls.n	801f00a <_write_number+0xb4>
 801efea:	687b      	ldr	r3, [r7, #4]
 801efec:	689b      	ldr	r3, [r3, #8]
 801efee:	f003 0308 	and.w	r3, r3, #8
 801eff2:	2b00      	cmp	r3, #0
 801eff4:	d001      	beq.n	801effa <_write_number+0xa4>
 801eff6:	2241      	movs	r2, #65	@ 0x41
 801eff8:	e000      	b.n	801effc <_write_number+0xa6>
 801effa:	2261      	movs	r2, #97	@ 0x61
 801effc:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 801f000:	4413      	add	r3, r2
 801f002:	b2db      	uxtb	r3, r3
 801f004:	3b0a      	subs	r3, #10
 801f006:	b2db      	uxtb	r3, r3
 801f008:	e003      	b.n	801f012 <_write_number+0xbc>
 801f00a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 801f00e:	3330      	adds	r3, #48	@ 0x30
 801f010:	b2db      	uxtb	r3, r3
 801f012:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 801f016:	e018      	b.n	801f04a <_write_number+0xf4>
    } else {
      t = number / 10;
 801f018:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801f01c:	f04f 020a 	mov.w	r2, #10
 801f020:	f04f 0300 	mov.w	r3, #0
 801f024:	f7f1 fb2e 	bl	8010684 <__aeabi_uldivmod>
 801f028:	4602      	mov	r2, r0
 801f02a:	460b      	mov	r3, r1
 801f02c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
      chr = (number - t * 10) + '0';
 801f030:	7a3a      	ldrb	r2, [r7, #8]
 801f032:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 801f036:	4619      	mov	r1, r3
 801f038:	0089      	lsls	r1, r1, #2
 801f03a:	440b      	add	r3, r1
 801f03c:	005b      	lsls	r3, r3, #1
 801f03e:	b2db      	uxtb	r3, r3
 801f040:	1ad3      	subs	r3, r2, r3
 801f042:	b2db      	uxtb	r3, r3
 801f044:	3330      	adds	r3, #48	@ 0x30
 801f046:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
    }
    number = t;
 801f04a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801f04e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    buf[idx--] = chr;
 801f052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801f054:	1e5a      	subs	r2, r3, #1
 801f056:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801f058:	3370      	adds	r3, #112	@ 0x70
 801f05a:	443b      	add	r3, r7
 801f05c:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 801f060:	f803 2c5c 	strb.w	r2, [r3, #-92]
    count++;
 801f064:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f066:	3301      	adds	r3, #1
 801f068:	66bb      	str	r3, [r7, #104]	@ 0x68
  } while (number);
 801f06a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801f06e:	4313      	orrs	r3, r2
 801f070:	d1a0      	bne.n	801efb4 <_write_number+0x5e>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 801f072:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801f076:	2b00      	cmp	r3, #0
 801f078:	d02c      	beq.n	801f0d4 <_write_number+0x17e>
 801f07a:	687b      	ldr	r3, [r7, #4]
 801f07c:	689b      	ldr	r3, [r3, #8]
 801f07e:	f003 0301 	and.w	r3, r3, #1
 801f082:	2b00      	cmp	r3, #0
 801f084:	d126      	bne.n	801f0d4 <_write_number+0x17e>
    buf[idx--] = sign_neg;
 801f086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801f088:	1e5a      	subs	r2, r3, #1
 801f08a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801f08c:	3370      	adds	r3, #112	@ 0x70
 801f08e:	443b      	add	r3, r7
 801f090:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 801f094:	f803 2c5c 	strb.w	r2, [r3, #-92]
    count++;
 801f098:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f09a:	3301      	adds	r3, #1
 801f09c:	66bb      	str	r3, [r7, #104]	@ 0x68
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 801f09e:	e019      	b.n	801f0d4 <_write_number+0x17e>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 801f0a0:	687b      	ldr	r3, [r7, #4]
 801f0a2:	689b      	ldr	r3, [r3, #8]
 801f0a4:	f003 0301 	and.w	r3, r3, #1
 801f0a8:	2b00      	cmp	r3, #0
 801f0aa:	d008      	beq.n	801f0be <_write_number+0x168>
      buf[idx--] = '0';
 801f0ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801f0ae:	1e5a      	subs	r2, r3, #1
 801f0b0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801f0b2:	3370      	adds	r3, #112	@ 0x70
 801f0b4:	443b      	add	r3, r7
 801f0b6:	2230      	movs	r2, #48	@ 0x30
 801f0b8:	f803 2c5c 	strb.w	r2, [r3, #-92]
 801f0bc:	e007      	b.n	801f0ce <_write_number+0x178>
    else
      buf[idx--] = ' ';
 801f0be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801f0c0:	1e5a      	subs	r2, r3, #1
 801f0c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801f0c4:	3370      	adds	r3, #112	@ 0x70
 801f0c6:	443b      	add	r3, r7
 801f0c8:	2220      	movs	r2, #32
 801f0ca:	f803 2c5c 	strb.w	r2, [r3, #-92]
    count++;
 801f0ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f0d0:	3301      	adds	r3, #1
 801f0d2:	66bb      	str	r3, [r7, #104]	@ 0x68
  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 801f0d4:	687b      	ldr	r3, [r7, #4]
 801f0d6:	681b      	ldr	r3, [r3, #0]
 801f0d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801f0da:	429a      	cmp	r2, r3
 801f0dc:	da05      	bge.n	801f0ea <_write_number+0x194>
 801f0de:	687b      	ldr	r3, [r7, #4]
 801f0e0:	689b      	ldr	r3, [r3, #8]
 801f0e2:	f003 0302 	and.w	r3, r3, #2
 801f0e6:	2b00      	cmp	r3, #0
 801f0e8:	d0da      	beq.n	801f0a0 <_write_number+0x14a>
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 801f0ea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801f0ee:	2b00      	cmp	r3, #0
 801f0f0:	d010      	beq.n	801f114 <_write_number+0x1be>
 801f0f2:	687b      	ldr	r3, [r7, #4]
 801f0f4:	681b      	ldr	r3, [r3, #0]
 801f0f6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801f0f8:	429a      	cmp	r2, r3
 801f0fa:	dc0b      	bgt.n	801f114 <_write_number+0x1be>
    buf[idx--] = sign_neg;
 801f0fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801f0fe:	1e5a      	subs	r2, r3, #1
 801f100:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801f102:	3370      	adds	r3, #112	@ 0x70
 801f104:	443b      	add	r3, r7
 801f106:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 801f10a:	f803 2c5c 	strb.w	r2, [r3, #-92]
    count++;
 801f10e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f110:	3301      	adds	r3, #1
 801f112:	66bb      	str	r3, [r7, #104]	@ 0x68
  }

  idx++;
 801f114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801f116:	3301      	adds	r3, #1
 801f118:	66fb      	str	r3, [r7, #108]	@ 0x6c


  for(int i = 0; i < count; i++) {
 801f11a:	2300      	movs	r3, #0
 801f11c:	657b      	str	r3, [r7, #84]	@ 0x54
 801f11e:	e00f      	b.n	801f140 <_write_number+0x1ea>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 801f120:	687b      	ldr	r3, [r7, #4]
 801f122:	68db      	ldr	r3, [r3, #12]
 801f124:	687a      	ldr	r2, [r7, #4]
 801f126:	6910      	ldr	r0, [r2, #16]
 801f128:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801f12a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801f12c:	440a      	add	r2, r1
 801f12e:	f107 0114 	add.w	r1, r7, #20
 801f132:	440a      	add	r2, r1
 801f134:	7812      	ldrb	r2, [r2, #0]
 801f136:	4611      	mov	r1, r2
 801f138:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 801f13a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f13c:	3301      	adds	r3, #1
 801f13e:	657b      	str	r3, [r7, #84]	@ 0x54
 801f140:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801f142:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f144:	429a      	cmp	r2, r3
 801f146:	dbeb      	blt.n	801f120 <_write_number+0x1ca>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 801f148:	687b      	ldr	r3, [r7, #4]
 801f14a:	689b      	ldr	r3, [r3, #8]
 801f14c:	f003 0302 	and.w	r3, r3, #2
 801f150:	2b00      	cmp	r3, #0
 801f152:	d00f      	beq.n	801f174 <_write_number+0x21e>
    while (count < specifier->width) {
 801f154:	e009      	b.n	801f16a <_write_number+0x214>
      _WRITE_C(' ');
 801f156:	687b      	ldr	r3, [r7, #4]
 801f158:	68db      	ldr	r3, [r3, #12]
 801f15a:	687a      	ldr	r2, [r7, #4]
 801f15c:	6912      	ldr	r2, [r2, #16]
 801f15e:	2120      	movs	r1, #32
 801f160:	4610      	mov	r0, r2
 801f162:	4798      	blx	r3
 801f164:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f166:	3301      	adds	r3, #1
 801f168:	66bb      	str	r3, [r7, #104]	@ 0x68
    while (count < specifier->width) {
 801f16a:	687b      	ldr	r3, [r7, #4]
 801f16c:	681b      	ldr	r3, [r3, #0]
 801f16e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801f170:	429a      	cmp	r2, r3
 801f172:	dbf0      	blt.n	801f156 <_write_number+0x200>
    }
  }

  return count;
 801f174:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 801f176:	4618      	mov	r0, r3
 801f178:	3770      	adds	r7, #112	@ 0x70
 801f17a:	46bd      	mov	sp, r7
 801f17c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801f180 <_write_double>:

#if defined(LC_PRINT_FLOAT_SUPPORT) && LC_PRINT_FLOAT_SUPPORT == 1
static inline int _write_double(double number, struct specifier *specifier)
{
 801f180:	b580      	push	{r7, lr}
 801f182:	b0a4      	sub	sp, #144	@ 0x90
 801f184:	af00      	add	r7, sp, #0
 801f186:	ed87 0b02 	vstr	d0, [r7, #8]
 801f18a:	6078      	str	r0, [r7, #4]
  char buf[64];
  uint64_t val;
  uint32_t idx = sizeof(buf) - 1;
 801f18c:	233f      	movs	r3, #63	@ 0x3f
 801f18e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  int count = 0;
 801f192:	2300      	movs	r3, #0
 801f194:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  char chr;
  bool is_signed = (number < 0)?true:false;
 801f198:	ed97 7b02 	vldr	d7, [r7, #8]
 801f19c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801f1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1a4:	bf4c      	ite	mi
 801f1a6:	2301      	movmi	r3, #1
 801f1a8:	2300      	movpl	r3, #0
 801f1aa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  const double half_ = 0.5;
 801f1ae:	f04f 0200 	mov.w	r2, #0
 801f1b2:	4b8a      	ldr	r3, [pc, #552]	@ (801f3dc <_write_double+0x25c>)
 801f1b4:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

  double mul = 1.0;
 801f1b8:	f04f 0200 	mov.w	r2, #0
 801f1bc:	4b88      	ldr	r3, [pc, #544]	@ (801f3e0 <_write_double+0x260>)
 801f1be:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  for (int i=0;i <specifier->precision; i++)
 801f1c2:	2300      	movs	r3, #0
 801f1c4:	677b      	str	r3, [r7, #116]	@ 0x74
 801f1c6:	e00a      	b.n	801f1de <_write_double+0x5e>
    mul *= 10;
 801f1c8:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 801f1cc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801f1d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f1d4:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78
  for (int i=0;i <specifier->precision; i++)
 801f1d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801f1da:	3301      	adds	r3, #1
 801f1dc:	677b      	str	r3, [r7, #116]	@ 0x74
 801f1de:	687b      	ldr	r3, [r7, #4]
 801f1e0:	685b      	ldr	r3, [r3, #4]
 801f1e2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801f1e4:	429a      	cmp	r2, r3
 801f1e6:	dbef      	blt.n	801f1c8 <_write_double+0x48>

  if (is_signed)
 801f1e8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 801f1ec:	2b00      	cmp	r3, #0
 801f1ee:	d005      	beq.n	801f1fc <_write_double+0x7c>
    number = -number;
 801f1f0:	ed97 7b02 	vldr	d7, [r7, #8]
 801f1f4:	eeb1 7b47 	vneg.f64	d7, d7
 801f1f8:	ed87 7b02 	vstr	d7, [r7, #8]

  number += (half_ / mul);
 801f1fc:	ed97 5b18 	vldr	d5, [r7, #96]	@ 0x60
 801f200:	ed97 6b1e 	vldr	d6, [r7, #120]	@ 0x78
 801f204:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801f208:	ed97 6b02 	vldr	d6, [r7, #8]
 801f20c:	ee36 7b07 	vadd.f64	d7, d6, d7
 801f210:	ed87 7b02 	vstr	d7, [r7, #8]
  val = (uint64_t)(number * mul);
 801f214:	ed97 6b02 	vldr	d6, [r7, #8]
 801f218:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 801f21c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801f220:	ec51 0b17 	vmov	r0, r1, d7
 801f224:	f7f1 fa94 	bl	8010750 <__aeabi_d2ulz>
 801f228:	4602      	mov	r2, r0
 801f22a:	460b      	mov	r3, r1
 801f22c:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88

  do {
    uint64_t t = val / 10;
 801f230:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 801f234:	f04f 020a 	mov.w	r2, #10
 801f238:	f04f 0300 	mov.w	r3, #0
 801f23c:	f7f1 fa22 	bl	8010684 <__aeabi_uldivmod>
 801f240:	4602      	mov	r2, r0
 801f242:	460b      	mov	r3, r1
 801f244:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    chr = (val - t * 10) + '0';
 801f248:	f897 2088 	ldrb.w	r2, [r7, #136]	@ 0x88
 801f24c:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 801f250:	4619      	mov	r1, r3
 801f252:	0089      	lsls	r1, r1, #2
 801f254:	440b      	add	r3, r1
 801f256:	005b      	lsls	r3, r3, #1
 801f258:	b2db      	uxtb	r3, r3
 801f25a:	1ad3      	subs	r3, r2, r3
 801f25c:	b2db      	uxtb	r3, r3
 801f25e:	3330      	adds	r3, #48	@ 0x30
 801f260:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    val = t;
 801f264:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801f268:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    buf[idx--] = chr;
 801f26c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801f270:	1e5a      	subs	r2, r3, #1
 801f272:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801f276:	3390      	adds	r3, #144	@ 0x90
 801f278:	443b      	add	r3, r7
 801f27a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801f27e:	f803 2c7c 	strb.w	r2, [r3, #-124]
    count++;
 801f282:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801f286:	3301      	adds	r3, #1
 801f288:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (count == specifier->precision) {
 801f28c:	687b      	ldr	r3, [r7, #4]
 801f28e:	685b      	ldr	r3, [r3, #4]
 801f290:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801f294:	429a      	cmp	r2, r3
 801f296:	d10e      	bne.n	801f2b6 <_write_double+0x136>
      buf[idx--] = '.';
 801f298:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801f29c:	1e5a      	subs	r2, r3, #1
 801f29e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801f2a2:	3390      	adds	r3, #144	@ 0x90
 801f2a4:	443b      	add	r3, r7
 801f2a6:	222e      	movs	r2, #46	@ 0x2e
 801f2a8:	f803 2c7c 	strb.w	r2, [r3, #-124]
      count++;
 801f2ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801f2b0:	3301      	adds	r3, #1
 801f2b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    }
  } while (val);
 801f2b6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 801f2ba:	4313      	orrs	r3, r2
 801f2bc:	d1b8      	bne.n	801f230 <_write_double+0xb0>
  while (count < specifier->precision) {
 801f2be:	e00e      	b.n	801f2de <_write_double+0x15e>
    buf[idx--] = '0';
 801f2c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801f2c4:	1e5a      	subs	r2, r3, #1
 801f2c6:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801f2ca:	3390      	adds	r3, #144	@ 0x90
 801f2cc:	443b      	add	r3, r7
 801f2ce:	2230      	movs	r2, #48	@ 0x30
 801f2d0:	f803 2c7c 	strb.w	r2, [r3, #-124]
    count++;
 801f2d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801f2d8:	3301      	adds	r3, #1
 801f2da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  while (count < specifier->precision) {
 801f2de:	687b      	ldr	r3, [r7, #4]
 801f2e0:	685b      	ldr	r3, [r3, #4]
 801f2e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801f2e6:	429a      	cmp	r2, r3
 801f2e8:	dbea      	blt.n	801f2c0 <_write_double+0x140>
  }
  if (count == specifier->precision) {
 801f2ea:	687b      	ldr	r3, [r7, #4]
 801f2ec:	685b      	ldr	r3, [r3, #4]
 801f2ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801f2f2:	429a      	cmp	r2, r3
 801f2f4:	d10e      	bne.n	801f314 <_write_double+0x194>
    buf[idx--] = '.';
 801f2f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801f2fa:	1e5a      	subs	r2, r3, #1
 801f2fc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801f300:	3390      	adds	r3, #144	@ 0x90
 801f302:	443b      	add	r3, r7
 801f304:	222e      	movs	r2, #46	@ 0x2e
 801f306:	f803 2c7c 	strb.w	r2, [r3, #-124]
    count++;
 801f30a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801f30e:	3301      	adds	r3, #1
 801f310:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  }
  if (count == specifier->precision + 1)
 801f314:	687b      	ldr	r3, [r7, #4]
 801f316:	685b      	ldr	r3, [r3, #4]
 801f318:	3301      	adds	r3, #1
 801f31a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801f31e:	429a      	cmp	r2, r3
 801f320:	d10e      	bne.n	801f340 <_write_double+0x1c0>
  {
    buf[idx--] = '0';
 801f322:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801f326:	1e5a      	subs	r2, r3, #1
 801f328:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801f32c:	3390      	adds	r3, #144	@ 0x90
 801f32e:	443b      	add	r3, r7
 801f330:	2230      	movs	r2, #48	@ 0x30
 801f332:	f803 2c7c 	strb.w	r2, [r3, #-124]
    count++;
 801f336:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801f33a:	3301      	adds	r3, #1
 801f33c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  }
  if (is_signed) {
 801f340:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 801f344:	2b00      	cmp	r3, #0
 801f346:	d01e      	beq.n	801f386 <_write_double+0x206>
    buf[idx--] = '-';
 801f348:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801f34c:	1e5a      	subs	r2, r3, #1
 801f34e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801f352:	3390      	adds	r3, #144	@ 0x90
 801f354:	443b      	add	r3, r7
 801f356:	222d      	movs	r2, #45	@ 0x2d
 801f358:	f803 2c7c 	strb.w	r2, [r3, #-124]
    count++;
 801f35c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801f360:	3301      	adds	r3, #1
 801f362:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  }
  while (count < specifier->width) {
 801f366:	e00e      	b.n	801f386 <_write_double+0x206>
    buf[idx--] = ' ';
 801f368:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801f36c:	1e5a      	subs	r2, r3, #1
 801f36e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801f372:	3390      	adds	r3, #144	@ 0x90
 801f374:	443b      	add	r3, r7
 801f376:	2220      	movs	r2, #32
 801f378:	f803 2c7c 	strb.w	r2, [r3, #-124]
    count++;
 801f37c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801f380:	3301      	adds	r3, #1
 801f382:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  while (count < specifier->width) {
 801f386:	687b      	ldr	r3, [r7, #4]
 801f388:	681b      	ldr	r3, [r3, #0]
 801f38a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801f38e:	429a      	cmp	r2, r3
 801f390:	dbea      	blt.n	801f368 <_write_double+0x1e8>
  }
  idx++;
 801f392:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801f396:	3301      	adds	r3, #1
 801f398:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  for(int i = 0; i < count; i++) {
 801f39c:	2300      	movs	r3, #0
 801f39e:	673b      	str	r3, [r7, #112]	@ 0x70
 801f3a0:	e010      	b.n	801f3c4 <_write_double+0x244>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 801f3a2:	687b      	ldr	r3, [r7, #4]
 801f3a4:	68db      	ldr	r3, [r3, #12]
 801f3a6:	687a      	ldr	r2, [r7, #4]
 801f3a8:	6910      	ldr	r0, [r2, #16]
 801f3aa:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801f3ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801f3b0:	440a      	add	r2, r1
 801f3b2:	f107 0114 	add.w	r1, r7, #20
 801f3b6:	440a      	add	r2, r1
 801f3b8:	7812      	ldrb	r2, [r2, #0]
 801f3ba:	4611      	mov	r1, r2
 801f3bc:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 801f3be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f3c0:	3301      	adds	r3, #1
 801f3c2:	673b      	str	r3, [r7, #112]	@ 0x70
 801f3c4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801f3c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801f3ca:	429a      	cmp	r2, r3
 801f3cc:	dbe9      	blt.n	801f3a2 <_write_double+0x222>
  }

  return count;
 801f3ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
}
 801f3d2:	4618      	mov	r0, r3
 801f3d4:	3790      	adds	r7, #144	@ 0x90
 801f3d6:	46bd      	mov	sp, r7
 801f3d8:	bd80      	pop	{r7, pc}
 801f3da:	bf00      	nop
 801f3dc:	3fe00000 	.word	0x3fe00000
 801f3e0:	3ff00000 	.word	0x3ff00000

0801f3e4 <_getChar>:
#endif

static inline char _getChar(const char** fmtP)
{
 801f3e4:	b480      	push	{r7}
 801f3e6:	b083      	sub	sp, #12
 801f3e8:	af00      	add	r7, sp, #0
 801f3ea:	6078      	str	r0, [r7, #4]
  return *(*fmtP)++;
 801f3ec:	687b      	ldr	r3, [r7, #4]
 801f3ee:	681b      	ldr	r3, [r3, #0]
 801f3f0:	1c59      	adds	r1, r3, #1
 801f3f2:	687a      	ldr	r2, [r7, #4]
 801f3f4:	6011      	str	r1, [r2, #0]
 801f3f6:	781b      	ldrb	r3, [r3, #0]
}
 801f3f8:	4618      	mov	r0, r3
 801f3fa:	370c      	adds	r7, #12
 801f3fc:	46bd      	mov	sp, r7
 801f3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f402:	4770      	bx	lr

0801f404 <vlc_print>:

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 801f404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f408:	b098      	sub	sp, #96	@ 0x60
 801f40a:	af00      	add	r7, sp, #0
 801f40c:	61f8      	str	r0, [r7, #28]
 801f40e:	61b9      	str	r1, [r7, #24]
 801f410:	617a      	str	r2, [r7, #20]
 801f412:	613b      	str	r3, [r7, #16]
  char c, t;
  int count = 0;
 801f414:	2300      	movs	r3, #0
 801f416:	65fb      	str	r3, [r7, #92]	@ 0x5c
  bool error = false;
 801f418:	2300      	movs	r3, #0
 801f41a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  while (((c = _getChar(&fmt)) != 0) && (!error))
 801f41e:	e235      	b.n	801f88c <vlc_print+0x488>
  {
    if (c == '\n')
 801f420:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801f424:	2b0a      	cmp	r3, #10
 801f426:	d109      	bne.n	801f43c <vlc_print+0x38>
    {
      putc_fct(user, c);
 801f428:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 801f42c:	69fb      	ldr	r3, [r7, #28]
 801f42e:	4611      	mov	r1, r2
 801f430:	69b8      	ldr	r0, [r7, #24]
 801f432:	4798      	blx	r3
      count++;
 801f434:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f436:	3301      	adds	r3, #1
 801f438:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f43a:	e227      	b.n	801f88c <vlc_print+0x488>
    }
    else if (c == '%')
 801f43c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801f440:	2b25      	cmp	r3, #37	@ 0x25
 801f442:	f040 821a 	bne.w	801f87a <vlc_print+0x476>
    {
      bool done = false;
 801f446:	2300      	movs	r3, #0
 801f448:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
      bool has_precision = false;
 801f44c:	2300      	movs	r3, #0
 801f44e:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
      int long_type = 0;
 801f452:	2300      	movs	r3, #0
 801f454:	657b      	str	r3, [r7, #84]	@ 0x54
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 801f456:	2300      	movs	r3, #0
 801f458:	627b      	str	r3, [r7, #36]	@ 0x24
 801f45a:	2300      	movs	r3, #0
 801f45c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f45e:	2300      	movs	r3, #0
 801f460:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f462:	69fb      	ldr	r3, [r7, #28]
 801f464:	633b      	str	r3, [r7, #48]	@ 0x30
 801f466:	69bb      	ldr	r3, [r7, #24]
 801f468:	637b      	str	r3, [r7, #52]	@ 0x34

      while (done == false) {
 801f46a:	e1e4      	b.n	801f836 <vlc_print+0x432>
        c = _getChar(&fmt);
 801f46c:	f107 0314 	add.w	r3, r7, #20
 801f470:	4618      	mov	r0, r3
 801f472:	f7ff ffb7 	bl	801f3e4 <_getChar>
 801f476:	4603      	mov	r3, r0
 801f478:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if (!c)
 801f47c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801f480:	2b00      	cmp	r3, #0
 801f482:	d106      	bne.n	801f492 <vlc_print+0x8e>
        { /* error */
          error = true;
 801f484:	2301      	movs	r3, #1
 801f486:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
          done = true;
 801f48a:	2301      	movs	r3, #1
 801f48c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 801f490:	e1d1      	b.n	801f836 <vlc_print+0x432>
        }
        else if (c == '0')
 801f492:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801f496:	2b30      	cmp	r3, #48	@ 0x30
 801f498:	d126      	bne.n	801f4e8 <vlc_print+0xe4>
        { /* flags or width/precision */
          if (!specifier.width && !specifier.precision) {
 801f49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f49c:	2b00      	cmp	r3, #0
 801f49e:	d107      	bne.n	801f4b0 <vlc_print+0xac>
 801f4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f4a2:	2b00      	cmp	r3, #0
 801f4a4:	d104      	bne.n	801f4b0 <vlc_print+0xac>
            specifier.flags |= FLAG_ZERO_EXTEND;
 801f4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f4a8:	f043 0301 	orr.w	r3, r3, #1
 801f4ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f4ae:	e1c2      	b.n	801f836 <vlc_print+0x432>
          } else if (has_precision) {
 801f4b0:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 801f4b4:	2b00      	cmp	r3, #0
 801f4b6:	d00b      	beq.n	801f4d0 <vlc_print+0xcc>
            specifier.precision = specifier.precision * 10 + (c - '0');
 801f4b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801f4ba:	4613      	mov	r3, r2
 801f4bc:	009b      	lsls	r3, r3, #2
 801f4be:	4413      	add	r3, r2
 801f4c0:	005b      	lsls	r3, r3, #1
 801f4c2:	461a      	mov	r2, r3
 801f4c4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801f4c8:	3b30      	subs	r3, #48	@ 0x30
 801f4ca:	4413      	add	r3, r2
 801f4cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f4ce:	e1b2      	b.n	801f836 <vlc_print+0x432>
          } else {
            specifier.width = specifier.width * 10 + (c - '0');
 801f4d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f4d2:	4613      	mov	r3, r2
 801f4d4:	009b      	lsls	r3, r3, #2
 801f4d6:	4413      	add	r3, r2
 801f4d8:	005b      	lsls	r3, r3, #1
 801f4da:	461a      	mov	r2, r3
 801f4dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801f4e0:	3b30      	subs	r3, #48	@ 0x30
 801f4e2:	4413      	add	r3, r2
 801f4e4:	627b      	str	r3, [r7, #36]	@ 0x24
 801f4e6:	e1a6      	b.n	801f836 <vlc_print+0x432>
          }
        }
        else if (c == '-')
 801f4e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801f4ec:	2b2d      	cmp	r3, #45	@ 0x2d
 801f4ee:	d104      	bne.n	801f4fa <vlc_print+0xf6>
        {
          specifier.flags |= FLAG_NEG_PAD;
 801f4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f4f2:	f043 0302 	orr.w	r3, r3, #2
 801f4f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f4f8:	e19d      	b.n	801f836 <vlc_print+0x432>
        }
        else if (c == '.')
 801f4fa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801f4fe:	2b2e      	cmp	r3, #46	@ 0x2e
 801f500:	d103      	bne.n	801f50a <vlc_print+0x106>
        { /* set precision */
          has_precision = true;
 801f502:	2301      	movs	r3, #1
 801f504:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 801f508:	e195      	b.n	801f836 <vlc_print+0x432>
        }
        else if ((c >= '1') && (c <= '9'))
 801f50a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801f50e:	2b30      	cmp	r3, #48	@ 0x30
 801f510:	d91f      	bls.n	801f552 <vlc_print+0x14e>
 801f512:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801f516:	2b39      	cmp	r3, #57	@ 0x39
 801f518:	d81b      	bhi.n	801f552 <vlc_print+0x14e>
        { /* width/precision */
          if (has_precision) {
 801f51a:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 801f51e:	2b00      	cmp	r3, #0
 801f520:	d00b      	beq.n	801f53a <vlc_print+0x136>
            specifier.precision = specifier.precision * 10 + (c - '0');
 801f522:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801f524:	4613      	mov	r3, r2
 801f526:	009b      	lsls	r3, r3, #2
 801f528:	4413      	add	r3, r2
 801f52a:	005b      	lsls	r3, r3, #1
 801f52c:	461a      	mov	r2, r3
 801f52e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801f532:	3b30      	subs	r3, #48	@ 0x30
 801f534:	4413      	add	r3, r2
 801f536:	62bb      	str	r3, [r7, #40]	@ 0x28
          if (has_precision) {
 801f538:	e17d      	b.n	801f836 <vlc_print+0x432>
          } else {
            specifier.width = specifier.width * 10 + (c - '0');
 801f53a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f53c:	4613      	mov	r3, r2
 801f53e:	009b      	lsls	r3, r3, #2
 801f540:	4413      	add	r3, r2
 801f542:	005b      	lsls	r3, r3, #1
 801f544:	461a      	mov	r2, r3
 801f546:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801f54a:	3b30      	subs	r3, #48	@ 0x30
 801f54c:	4413      	add	r3, r2
 801f54e:	627b      	str	r3, [r7, #36]	@ 0x24
          if (has_precision) {
 801f550:	e171      	b.n	801f836 <vlc_print+0x432>
          }
        }
        else if (c == 'l')
 801f552:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801f556:	2b6c      	cmp	r3, #108	@ 0x6c
 801f558:	d103      	bne.n	801f562 <vlc_print+0x15e>
        {
          long_type += 1;
 801f55a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f55c:	3301      	adds	r3, #1
 801f55e:	657b      	str	r3, [r7, #84]	@ 0x54
 801f560:	e169      	b.n	801f836 <vlc_print+0x432>
        else
        { /* type */
          char* str;
          uint64_t val;
          double dbl;
          switch(c)
 801f562:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801f566:	3b25      	subs	r3, #37	@ 0x25
 801f568:	2b53      	cmp	r3, #83	@ 0x53
 801f56a:	f200 815e 	bhi.w	801f82a <vlc_print+0x426>
 801f56e:	a201      	add	r2, pc, #4	@ (adr r2, 801f574 <vlc_print+0x170>)
 801f570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f574:	0801f6c5 	.word	0x0801f6c5
 801f578:	0801f82b 	.word	0x0801f82b
 801f57c:	0801f82b 	.word	0x0801f82b
 801f580:	0801f82b 	.word	0x0801f82b
 801f584:	0801f82b 	.word	0x0801f82b
 801f588:	0801f82b 	.word	0x0801f82b
 801f58c:	0801f82b 	.word	0x0801f82b
 801f590:	0801f82b 	.word	0x0801f82b
 801f594:	0801f82b 	.word	0x0801f82b
 801f598:	0801f82b 	.word	0x0801f82b
 801f59c:	0801f82b 	.word	0x0801f82b
 801f5a0:	0801f82b 	.word	0x0801f82b
 801f5a4:	0801f82b 	.word	0x0801f82b
 801f5a8:	0801f82b 	.word	0x0801f82b
 801f5ac:	0801f82b 	.word	0x0801f82b
 801f5b0:	0801f82b 	.word	0x0801f82b
 801f5b4:	0801f82b 	.word	0x0801f82b
 801f5b8:	0801f82b 	.word	0x0801f82b
 801f5bc:	0801f82b 	.word	0x0801f82b
 801f5c0:	0801f82b 	.word	0x0801f82b
 801f5c4:	0801f82b 	.word	0x0801f82b
 801f5c8:	0801f82b 	.word	0x0801f82b
 801f5cc:	0801f82b 	.word	0x0801f82b
 801f5d0:	0801f82b 	.word	0x0801f82b
 801f5d4:	0801f82b 	.word	0x0801f82b
 801f5d8:	0801f82b 	.word	0x0801f82b
 801f5dc:	0801f82b 	.word	0x0801f82b
 801f5e0:	0801f82b 	.word	0x0801f82b
 801f5e4:	0801f82b 	.word	0x0801f82b
 801f5e8:	0801f82b 	.word	0x0801f82b
 801f5ec:	0801f82b 	.word	0x0801f82b
 801f5f0:	0801f82b 	.word	0x0801f82b
 801f5f4:	0801f82b 	.word	0x0801f82b
 801f5f8:	0801f7f3 	.word	0x0801f7f3
 801f5fc:	0801f82b 	.word	0x0801f82b
 801f600:	0801f82b 	.word	0x0801f82b
 801f604:	0801f82b 	.word	0x0801f82b
 801f608:	0801f82b 	.word	0x0801f82b
 801f60c:	0801f82b 	.word	0x0801f82b
 801f610:	0801f82b 	.word	0x0801f82b
 801f614:	0801f82b 	.word	0x0801f82b
 801f618:	0801f82b 	.word	0x0801f82b
 801f61c:	0801f82b 	.word	0x0801f82b
 801f620:	0801f82b 	.word	0x0801f82b
 801f624:	0801f82b 	.word	0x0801f82b
 801f628:	0801f82b 	.word	0x0801f82b
 801f62c:	0801f82b 	.word	0x0801f82b
 801f630:	0801f82b 	.word	0x0801f82b
 801f634:	0801f82b 	.word	0x0801f82b
 801f638:	0801f82b 	.word	0x0801f82b
 801f63c:	0801f82b 	.word	0x0801f82b
 801f640:	0801f72f 	.word	0x0801f72f
 801f644:	0801f82b 	.word	0x0801f82b
 801f648:	0801f82b 	.word	0x0801f82b
 801f64c:	0801f82b 	.word	0x0801f82b
 801f650:	0801f82b 	.word	0x0801f82b
 801f654:	0801f82b 	.word	0x0801f82b
 801f658:	0801f82b 	.word	0x0801f82b
 801f65c:	0801f82b 	.word	0x0801f82b
 801f660:	0801f82b 	.word	0x0801f82b
 801f664:	0801f82b 	.word	0x0801f82b
 801f668:	0801f82b 	.word	0x0801f82b
 801f66c:	0801f6d9 	.word	0x0801f6d9
 801f670:	0801f769 	.word	0x0801f769
 801f674:	0801f82b 	.word	0x0801f82b
 801f678:	0801f7f3 	.word	0x0801f7f3
 801f67c:	0801f82b 	.word	0x0801f82b
 801f680:	0801f82b 	.word	0x0801f82b
 801f684:	0801f769 	.word	0x0801f769
 801f688:	0801f82b 	.word	0x0801f82b
 801f68c:	0801f82b 	.word	0x0801f82b
 801f690:	0801f82b 	.word	0x0801f82b
 801f694:	0801f82b 	.word	0x0801f82b
 801f698:	0801f82b 	.word	0x0801f82b
 801f69c:	0801f82b 	.word	0x0801f82b
 801f6a0:	0801f723 	.word	0x0801f723
 801f6a4:	0801f82b 	.word	0x0801f82b
 801f6a8:	0801f82b 	.word	0x0801f82b
 801f6ac:	0801f6f9 	.word	0x0801f6f9
 801f6b0:	0801f82b 	.word	0x0801f82b
 801f6b4:	0801f771 	.word	0x0801f771
 801f6b8:	0801f82b 	.word	0x0801f82b
 801f6bc:	0801f82b 	.word	0x0801f82b
 801f6c0:	0801f737 	.word	0x0801f737
          {
          case '%':
            putc_fct(user, c);
 801f6c4:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 801f6c8:	69fb      	ldr	r3, [r7, #28]
 801f6ca:	4611      	mov	r1, r2
 801f6cc:	69b8      	ldr	r0, [r7, #24]
 801f6ce:	4798      	blx	r3
            count++;
 801f6d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f6d2:	3301      	adds	r3, #1
 801f6d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801f6d6:	e0ab      	b.n	801f830 <vlc_print+0x42c>
          case 'c':
            t = (char)va_arg(vl, signed int);
 801f6d8:	693b      	ldr	r3, [r7, #16]
 801f6da:	1d1a      	adds	r2, r3, #4
 801f6dc:	613a      	str	r2, [r7, #16]
 801f6de:	681b      	ldr	r3, [r3, #0]
 801f6e0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
            putc_fct(user, t);
 801f6e4:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801f6e8:	69fb      	ldr	r3, [r7, #28]
 801f6ea:	4611      	mov	r1, r2
 801f6ec:	69b8      	ldr	r0, [r7, #24]
 801f6ee:	4798      	blx	r3
            count++;
 801f6f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f6f2:	3301      	adds	r3, #1
 801f6f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801f6f6:	e09b      	b.n	801f830 <vlc_print+0x42c>
          case 's':
            str = va_arg(vl, char*);
 801f6f8:	693b      	ldr	r3, [r7, #16]
 801f6fa:	1d1a      	adds	r2, r3, #4
 801f6fc:	613a      	str	r2, [r7, #16]
 801f6fe:	681b      	ldr	r3, [r3, #0]
 801f700:	653b      	str	r3, [r7, #80]	@ 0x50
            if (!str) str = "(null)";
 801f702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f704:	2b00      	cmp	r3, #0
 801f706:	d101      	bne.n	801f70c <vlc_print+0x308>
 801f708:	4b6d      	ldr	r3, [pc, #436]	@ (801f8c0 <vlc_print+0x4bc>)
 801f70a:	653b      	str	r3, [r7, #80]	@ 0x50
            count += _write_string(str, &specifier);
 801f70c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801f710:	4619      	mov	r1, r3
 801f712:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801f714:	f7ff fbb6 	bl	801ee84 <_write_string>
 801f718:	4602      	mov	r2, r0
 801f71a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f71c:	4413      	add	r3, r2
 801f71e:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801f720:	e086      	b.n	801f830 <vlc_print+0x42c>
          case 'p':
            specifier.flags |= FLAG_ZERO_EXTEND;
 801f722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f724:	f043 0301 	orr.w	r3, r3, #1
 801f728:	62fb      	str	r3, [r7, #44]	@ 0x2c
            specifier.width = 8;
 801f72a:	2308      	movs	r3, #8
 801f72c:	627b      	str	r3, [r7, #36]	@ 0x24
          case 'X':
            specifier.flags |= FLAG_CAPS;
 801f72e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f730:	f043 0308 	orr.w	r3, r3, #8
 801f734:	62fb      	str	r3, [r7, #44]	@ 0x2c
          case 'x':
            specifier.flags |= FLAG_HEX;
 801f736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f738:	f043 0310 	orr.w	r3, r3, #16
 801f73c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            val = va_arg(vl, unsigned int);
 801f73e:	693b      	ldr	r3, [r7, #16]
 801f740:	1d1a      	adds	r2, r3, #4
 801f742:	613a      	str	r2, [r7, #16]
 801f744:	681b      	ldr	r3, [r3, #0]
 801f746:	2200      	movs	r2, #0
 801f748:	461c      	mov	r4, r3
 801f74a:	4615      	mov	r5, r2
 801f74c:	e9c7 4512 	strd	r4, r5, [r7, #72]	@ 0x48
            count += _write_number(val, &specifier);
 801f750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801f754:	461a      	mov	r2, r3
 801f756:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801f75a:	f7ff fbfc 	bl	801ef56 <_write_number>
 801f75e:	4602      	mov	r2, r0
 801f760:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f762:	4413      	add	r3, r2
 801f764:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801f766:	e063      	b.n	801f830 <vlc_print+0x42c>
          case 'd':
          case 'i':
            specifier.flags |= FLAG_IS_SIGNED;
 801f768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f76a:	f043 0304 	orr.w	r3, r3, #4
 801f76e:	62fb      	str	r3, [r7, #44]	@ 0x2c
          case 'u':
            if (c == 'u') {
 801f770:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801f774:	2b75      	cmp	r3, #117	@ 0x75
 801f776:	d116      	bne.n	801f7a6 <vlc_print+0x3a2>
              if (long_type <= 1)
 801f778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f77a:	2b01      	cmp	r3, #1
 801f77c:	dc09      	bgt.n	801f792 <vlc_print+0x38e>
                val = va_arg(vl, unsigned int);
 801f77e:	693b      	ldr	r3, [r7, #16]
 801f780:	1d1a      	adds	r2, r3, #4
 801f782:	613a      	str	r2, [r7, #16]
 801f784:	681b      	ldr	r3, [r3, #0]
 801f786:	2200      	movs	r2, #0
 801f788:	4698      	mov	r8, r3
 801f78a:	4691      	mov	r9, r2
 801f78c:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
 801f790:	e023      	b.n	801f7da <vlc_print+0x3d6>
              else
                val = va_arg(vl, unsigned long);
 801f792:	693b      	ldr	r3, [r7, #16]
 801f794:	1d1a      	adds	r2, r3, #4
 801f796:	613a      	str	r2, [r7, #16]
 801f798:	681b      	ldr	r3, [r3, #0]
 801f79a:	2200      	movs	r2, #0
 801f79c:	469a      	mov	sl, r3
 801f79e:	4693      	mov	fp, r2
 801f7a0:	e9c7 ab12 	strd	sl, fp, [r7, #72]	@ 0x48
 801f7a4:	e019      	b.n	801f7da <vlc_print+0x3d6>
            }
            else {
              if (long_type <= 1)
 801f7a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f7a8:	2b01      	cmp	r3, #1
 801f7aa:	dc0b      	bgt.n	801f7c4 <vlc_print+0x3c0>
                val = va_arg(vl, signed int);
 801f7ac:	693b      	ldr	r3, [r7, #16]
 801f7ae:	1d1a      	adds	r2, r3, #4
 801f7b0:	613a      	str	r2, [r7, #16]
 801f7b2:	681b      	ldr	r3, [r3, #0]
 801f7b4:	17da      	asrs	r2, r3, #31
 801f7b6:	60bb      	str	r3, [r7, #8]
 801f7b8:	60fa      	str	r2, [r7, #12]
 801f7ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801f7be:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 801f7c2:	e00a      	b.n	801f7da <vlc_print+0x3d6>
              else
                val = va_arg(vl, signed long);
 801f7c4:	693b      	ldr	r3, [r7, #16]
 801f7c6:	1d1a      	adds	r2, r3, #4
 801f7c8:	613a      	str	r2, [r7, #16]
 801f7ca:	681b      	ldr	r3, [r3, #0]
 801f7cc:	17da      	asrs	r2, r3, #31
 801f7ce:	603b      	str	r3, [r7, #0]
 801f7d0:	607a      	str	r2, [r7, #4]
 801f7d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f7d6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
            }
            count += _write_number(val, &specifier);
 801f7da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801f7de:	461a      	mov	r2, r3
 801f7e0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801f7e4:	f7ff fbb7 	bl	801ef56 <_write_number>
 801f7e8:	4602      	mov	r2, r0
 801f7ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f7ec:	4413      	add	r3, r2
 801f7ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801f7f0:	e01e      	b.n	801f830 <vlc_print+0x42c>
#if defined(LC_PRINT_FLOAT_SUPPORT) && LC_PRINT_FLOAT_SUPPORT == 1
          case 'f':
          case 'F':
            dbl = va_arg(vl, double);
 801f7f2:	693b      	ldr	r3, [r7, #16]
 801f7f4:	3307      	adds	r3, #7
 801f7f6:	f023 0307 	bic.w	r3, r3, #7
 801f7fa:	f103 0208 	add.w	r2, r3, #8
 801f7fe:	613a      	str	r2, [r7, #16]
 801f800:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f804:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
            if (specifier.precision == 0)
 801f808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f80a:	2b00      	cmp	r3, #0
 801f80c:	d101      	bne.n	801f812 <vlc_print+0x40e>
              specifier.precision = 6;
 801f80e:	2306      	movs	r3, #6
 801f810:	62bb      	str	r3, [r7, #40]	@ 0x28
            count += _write_double(dbl, &specifier);
 801f812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801f816:	4618      	mov	r0, r3
 801f818:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 801f81c:	f7ff fcb0 	bl	801f180 <_write_double>
 801f820:	4602      	mov	r2, r0
 801f822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f824:	4413      	add	r3, r2
 801f826:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801f828:	e002      	b.n	801f830 <vlc_print+0x42c>
#endif
          default:
            error=true;
 801f82a:	2301      	movs	r3, #1
 801f82c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
          }
          done = true;
 801f830:	2301      	movs	r3, #1
 801f832:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
      while (done == false) {
 801f836:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 801f83a:	f083 0301 	eor.w	r3, r3, #1
 801f83e:	b2db      	uxtb	r3, r3
 801f840:	2b00      	cmp	r3, #0
 801f842:	f47f ae13 	bne.w	801f46c <vlc_print+0x68>
        }
      }
      if (error) {
 801f846:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 801f84a:	2b00      	cmp	r3, #0
 801f84c:	d01e      	beq.n	801f88c <vlc_print+0x488>
        va_arg(vl, signed long);
 801f84e:	693b      	ldr	r3, [r7, #16]
 801f850:	3304      	adds	r3, #4
 801f852:	613b      	str	r3, [r7, #16]
        putc_fct(user, '<');
 801f854:	69fb      	ldr	r3, [r7, #28]
 801f856:	213c      	movs	r1, #60	@ 0x3c
 801f858:	69b8      	ldr	r0, [r7, #24]
 801f85a:	4798      	blx	r3
        putc_fct(user, '!');
 801f85c:	69fb      	ldr	r3, [r7, #28]
 801f85e:	2121      	movs	r1, #33	@ 0x21
 801f860:	69b8      	ldr	r0, [r7, #24]
 801f862:	4798      	blx	r3
        putc_fct(user, '>');
 801f864:	69fb      	ldr	r3, [r7, #28]
 801f866:	213e      	movs	r1, #62	@ 0x3e
 801f868:	69b8      	ldr	r0, [r7, #24]
 801f86a:	4798      	blx	r3
        count += 3;
 801f86c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f86e:	3303      	adds	r3, #3
 801f870:	65fb      	str	r3, [r7, #92]	@ 0x5c
        error = false;
 801f872:	2300      	movs	r3, #0
 801f874:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 801f878:	e008      	b.n	801f88c <vlc_print+0x488>
      }
    }
    else
    {
      putc_fct(user, c);
 801f87a:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 801f87e:	69fb      	ldr	r3, [r7, #28]
 801f880:	4611      	mov	r1, r2
 801f882:	69b8      	ldr	r0, [r7, #24]
 801f884:	4798      	blx	r3
      count++;
 801f886:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f888:	3301      	adds	r3, #1
 801f88a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  while (((c = _getChar(&fmt)) != 0) && (!error))
 801f88c:	f107 0314 	add.w	r3, r7, #20
 801f890:	4618      	mov	r0, r3
 801f892:	f7ff fda7 	bl	801f3e4 <_getChar>
 801f896:	4603      	mov	r3, r0
 801f898:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801f89c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801f8a0:	2b00      	cmp	r3, #0
 801f8a2:	d007      	beq.n	801f8b4 <vlc_print+0x4b0>
 801f8a4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 801f8a8:	f083 0301 	eor.w	r3, r3, #1
 801f8ac:	b2db      	uxtb	r3, r3
 801f8ae:	2b00      	cmp	r3, #0
 801f8b0:	f47f adb6 	bne.w	801f420 <vlc_print+0x1c>
    }
  }
  return count;
 801f8b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 801f8b6:	4618      	mov	r0, r3
 801f8b8:	3760      	adds	r7, #96	@ 0x60
 801f8ba:	46bd      	mov	sp, r7
 801f8bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801f8c0:	080381dc 	.word	0x080381dc

0801f8c4 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 801f8c4:	b580      	push	{r7, lr}
 801f8c6:	b082      	sub	sp, #8
 801f8c8:	af00      	add	r7, sp, #0
 801f8ca:	6078      	str	r0, [r7, #4]
 801f8cc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 801f8ce:	683a      	ldr	r2, [r7, #0]
 801f8d0:	2101      	movs	r1, #1
 801f8d2:	489b      	ldr	r0, [pc, #620]	@ (801fb40 <network_configure_activations+0x27c>)
 801f8d4:	f003 fa72 	bl	8022dbc <ai_platform_get_activations_map>
 801f8d8:	4603      	mov	r3, r0
 801f8da:	2b00      	cmp	r3, #0
 801f8dc:	f000 824c 	beq.w	801fd78 <network_configure_activations+0x4b4>
    /* Updating activations (byte) offsets */
    
    serving_default_keras_tensor_680_output_array.data = AI_PTR(g_network_activations_map[0] + 119924);
 801f8e0:	4b97      	ldr	r3, [pc, #604]	@ (801fb40 <network_configure_activations+0x27c>)
 801f8e2:	681a      	ldr	r2, [r3, #0]
 801f8e4:	4b97      	ldr	r3, [pc, #604]	@ (801fb44 <network_configure_activations+0x280>)
 801f8e6:	4413      	add	r3, r2
 801f8e8:	4a97      	ldr	r2, [pc, #604]	@ (801fb48 <network_configure_activations+0x284>)
 801f8ea:	6093      	str	r3, [r2, #8]
    serving_default_keras_tensor_680_output_array.data_start = AI_PTR(g_network_activations_map[0] + 119924);
 801f8ec:	4b94      	ldr	r3, [pc, #592]	@ (801fb40 <network_configure_activations+0x27c>)
 801f8ee:	681a      	ldr	r2, [r3, #0]
 801f8f0:	4b94      	ldr	r3, [pc, #592]	@ (801fb44 <network_configure_activations+0x280>)
 801f8f2:	4413      	add	r3, r2
 801f8f4:	4a94      	ldr	r2, [pc, #592]	@ (801fb48 <network_configure_activations+0x284>)
 801f8f6:	60d3      	str	r3, [r2, #12]
    conv2d_0_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 118864);
 801f8f8:	4b91      	ldr	r3, [pc, #580]	@ (801fb40 <network_configure_activations+0x27c>)
 801f8fa:	681a      	ldr	r2, [r3, #0]
 801f8fc:	4b93      	ldr	r3, [pc, #588]	@ (801fb4c <network_configure_activations+0x288>)
 801f8fe:	4413      	add	r3, r2
 801f900:	4a93      	ldr	r2, [pc, #588]	@ (801fb50 <network_configure_activations+0x28c>)
 801f902:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 118864);
 801f904:	4b8e      	ldr	r3, [pc, #568]	@ (801fb40 <network_configure_activations+0x27c>)
 801f906:	681a      	ldr	r2, [r3, #0]
 801f908:	4b90      	ldr	r3, [pc, #576]	@ (801fb4c <network_configure_activations+0x288>)
 801f90a:	4413      	add	r3, r2
 801f90c:	4a90      	ldr	r2, [pc, #576]	@ (801fb50 <network_configure_activations+0x28c>)
 801f90e:	60d3      	str	r3, [r2, #12]
    conv2d_0_output_array.data = AI_PTR(g_network_activations_map[0] + 1552);
 801f910:	4b8b      	ldr	r3, [pc, #556]	@ (801fb40 <network_configure_activations+0x27c>)
 801f912:	681b      	ldr	r3, [r3, #0]
 801f914:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 801f918:	4a8e      	ldr	r2, [pc, #568]	@ (801fb54 <network_configure_activations+0x290>)
 801f91a:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1552);
 801f91c:	4b88      	ldr	r3, [pc, #544]	@ (801fb40 <network_configure_activations+0x27c>)
 801f91e:	681b      	ldr	r3, [r3, #0]
 801f920:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 801f924:	4a8b      	ldr	r2, [pc, #556]	@ (801fb54 <network_configure_activations+0x290>)
 801f926:	60d3      	str	r3, [r2, #12]
    eltwise_1_output_array.data = AI_PTR(g_network_activations_map[0] + 1552);
 801f928:	4b85      	ldr	r3, [pc, #532]	@ (801fb40 <network_configure_activations+0x27c>)
 801f92a:	681b      	ldr	r3, [r3, #0]
 801f92c:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 801f930:	4a89      	ldr	r2, [pc, #548]	@ (801fb58 <network_configure_activations+0x294>)
 801f932:	6093      	str	r3, [r2, #8]
    eltwise_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1552);
 801f934:	4b82      	ldr	r3, [pc, #520]	@ (801fb40 <network_configure_activations+0x27c>)
 801f936:	681b      	ldr	r3, [r3, #0]
 801f938:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 801f93c:	4a86      	ldr	r2, [pc, #536]	@ (801fb58 <network_configure_activations+0x294>)
 801f93e:	60d3      	str	r3, [r2, #12]
    eltwise_2_output_array.data = AI_PTR(g_network_activations_map[0] + 1552);
 801f940:	4b7f      	ldr	r3, [pc, #508]	@ (801fb40 <network_configure_activations+0x27c>)
 801f942:	681b      	ldr	r3, [r3, #0]
 801f944:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 801f948:	4a84      	ldr	r2, [pc, #528]	@ (801fb5c <network_configure_activations+0x298>)
 801f94a:	6093      	str	r3, [r2, #8]
    eltwise_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1552);
 801f94c:	4b7c      	ldr	r3, [pc, #496]	@ (801fb40 <network_configure_activations+0x27c>)
 801f94e:	681b      	ldr	r3, [r3, #0]
 801f950:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 801f954:	4a81      	ldr	r2, [pc, #516]	@ (801fb5c <network_configure_activations+0x298>)
 801f956:	60d3      	str	r3, [r2, #12]
    pool_3_output_array.data = AI_PTR(g_network_activations_map[0] + 1552);
 801f958:	4b79      	ldr	r3, [pc, #484]	@ (801fb40 <network_configure_activations+0x27c>)
 801f95a:	681b      	ldr	r3, [r3, #0]
 801f95c:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 801f960:	4a7f      	ldr	r2, [pc, #508]	@ (801fb60 <network_configure_activations+0x29c>)
 801f962:	6093      	str	r3, [r2, #8]
    pool_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1552);
 801f964:	4b76      	ldr	r3, [pc, #472]	@ (801fb40 <network_configure_activations+0x27c>)
 801f966:	681b      	ldr	r3, [r3, #0]
 801f968:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 801f96c:	4a7c      	ldr	r2, [pc, #496]	@ (801fb60 <network_configure_activations+0x29c>)
 801f96e:	60d3      	str	r3, [r2, #12]
    conv2d_4_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 30128);
 801f970:	4b73      	ldr	r3, [pc, #460]	@ (801fb40 <network_configure_activations+0x27c>)
 801f972:	681a      	ldr	r2, [r3, #0]
 801f974:	f247 53b0 	movw	r3, #30128	@ 0x75b0
 801f978:	4413      	add	r3, r2
 801f97a:	4a7a      	ldr	r2, [pc, #488]	@ (801fb64 <network_configure_activations+0x2a0>)
 801f97c:	6093      	str	r3, [r2, #8]
    conv2d_4_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 30128);
 801f97e:	4b70      	ldr	r3, [pc, #448]	@ (801fb40 <network_configure_activations+0x27c>)
 801f980:	681a      	ldr	r2, [r3, #0]
 801f982:	f247 53b0 	movw	r3, #30128	@ 0x75b0
 801f986:	4413      	add	r3, r2
 801f988:	4a76      	ldr	r2, [pc, #472]	@ (801fb64 <network_configure_activations+0x2a0>)
 801f98a:	60d3      	str	r3, [r2, #12]
    conv2d_4_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1552);
 801f98c:	4b6c      	ldr	r3, [pc, #432]	@ (801fb40 <network_configure_activations+0x27c>)
 801f98e:	681b      	ldr	r3, [r3, #0]
 801f990:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 801f994:	4a74      	ldr	r2, [pc, #464]	@ (801fb68 <network_configure_activations+0x2a4>)
 801f996:	6093      	str	r3, [r2, #8]
    conv2d_4_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 1552);
 801f998:	4b69      	ldr	r3, [pc, #420]	@ (801fb40 <network_configure_activations+0x27c>)
 801f99a:	681b      	ldr	r3, [r3, #0]
 801f99c:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 801f9a0:	4a71      	ldr	r2, [pc, #452]	@ (801fb68 <network_configure_activations+0x2a4>)
 801f9a2:	60d3      	str	r3, [r2, #12]
    conv2d_4_output_array.data = AI_PTR(g_network_activations_map[0] + 63056);
 801f9a4:	4b66      	ldr	r3, [pc, #408]	@ (801fb40 <network_configure_activations+0x27c>)
 801f9a6:	681a      	ldr	r2, [r3, #0]
 801f9a8:	f24f 6350 	movw	r3, #63056	@ 0xf650
 801f9ac:	4413      	add	r3, r2
 801f9ae:	4a6f      	ldr	r2, [pc, #444]	@ (801fb6c <network_configure_activations+0x2a8>)
 801f9b0:	6093      	str	r3, [r2, #8]
    conv2d_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 63056);
 801f9b2:	4b63      	ldr	r3, [pc, #396]	@ (801fb40 <network_configure_activations+0x27c>)
 801f9b4:	681a      	ldr	r2, [r3, #0]
 801f9b6:	f24f 6350 	movw	r3, #63056	@ 0xf650
 801f9ba:	4413      	add	r3, r2
 801f9bc:	4a6b      	ldr	r2, [pc, #428]	@ (801fb6c <network_configure_activations+0x2a8>)
 801f9be:	60d3      	str	r3, [r2, #12]
    eltwise_5_output_array.data = AI_PTR(g_network_activations_map[0] + 1552);
 801f9c0:	4b5f      	ldr	r3, [pc, #380]	@ (801fb40 <network_configure_activations+0x27c>)
 801f9c2:	681b      	ldr	r3, [r3, #0]
 801f9c4:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 801f9c8:	4a69      	ldr	r2, [pc, #420]	@ (801fb70 <network_configure_activations+0x2ac>)
 801f9ca:	6093      	str	r3, [r2, #8]
    eltwise_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1552);
 801f9cc:	4b5c      	ldr	r3, [pc, #368]	@ (801fb40 <network_configure_activations+0x27c>)
 801f9ce:	681b      	ldr	r3, [r3, #0]
 801f9d0:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 801f9d4:	4a66      	ldr	r2, [pc, #408]	@ (801fb70 <network_configure_activations+0x2ac>)
 801f9d6:	60d3      	str	r3, [r2, #12]
    eltwise_6_output_array.data = AI_PTR(g_network_activations_map[0] + 58704);
 801f9d8:	4b59      	ldr	r3, [pc, #356]	@ (801fb40 <network_configure_activations+0x27c>)
 801f9da:	681a      	ldr	r2, [r3, #0]
 801f9dc:	f24e 5350 	movw	r3, #58704	@ 0xe550
 801f9e0:	4413      	add	r3, r2
 801f9e2:	4a64      	ldr	r2, [pc, #400]	@ (801fb74 <network_configure_activations+0x2b0>)
 801f9e4:	6093      	str	r3, [r2, #8]
    eltwise_6_output_array.data_start = AI_PTR(g_network_activations_map[0] + 58704);
 801f9e6:	4b56      	ldr	r3, [pc, #344]	@ (801fb40 <network_configure_activations+0x27c>)
 801f9e8:	681a      	ldr	r2, [r3, #0]
 801f9ea:	f24e 5350 	movw	r3, #58704	@ 0xe550
 801f9ee:	4413      	add	r3, r2
 801f9f0:	4a60      	ldr	r2, [pc, #384]	@ (801fb74 <network_configure_activations+0x2b0>)
 801f9f2:	60d3      	str	r3, [r2, #12]
    pool_7_output_array.data = AI_PTR(g_network_activations_map[0] + 1552);
 801f9f4:	4b52      	ldr	r3, [pc, #328]	@ (801fb40 <network_configure_activations+0x27c>)
 801f9f6:	681b      	ldr	r3, [r3, #0]
 801f9f8:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 801f9fc:	4a5e      	ldr	r2, [pc, #376]	@ (801fb78 <network_configure_activations+0x2b4>)
 801f9fe:	6093      	str	r3, [r2, #8]
    pool_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1552);
 801fa00:	4b4f      	ldr	r3, [pc, #316]	@ (801fb40 <network_configure_activations+0x27c>)
 801fa02:	681b      	ldr	r3, [r3, #0]
 801fa04:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 801fa08:	4a5b      	ldr	r2, [pc, #364]	@ (801fb78 <network_configure_activations+0x2b4>)
 801fa0a:	60d3      	str	r3, [r2, #12]
    conv2d_8_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 14800);
 801fa0c:	4b4c      	ldr	r3, [pc, #304]	@ (801fb40 <network_configure_activations+0x27c>)
 801fa0e:	681a      	ldr	r2, [r3, #0]
 801fa10:	f643 13d0 	movw	r3, #14800	@ 0x39d0
 801fa14:	4413      	add	r3, r2
 801fa16:	4a59      	ldr	r2, [pc, #356]	@ (801fb7c <network_configure_activations+0x2b8>)
 801fa18:	6093      	str	r3, [r2, #8]
    conv2d_8_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 14800);
 801fa1a:	4b49      	ldr	r3, [pc, #292]	@ (801fb40 <network_configure_activations+0x27c>)
 801fa1c:	681a      	ldr	r2, [r3, #0]
 801fa1e:	f643 13d0 	movw	r3, #14800	@ 0x39d0
 801fa22:	4413      	add	r3, r2
 801fa24:	4a55      	ldr	r2, [pc, #340]	@ (801fb7c <network_configure_activations+0x2b8>)
 801fa26:	60d3      	str	r3, [r2, #12]
    conv2d_8_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1552);
 801fa28:	4b45      	ldr	r3, [pc, #276]	@ (801fb40 <network_configure_activations+0x27c>)
 801fa2a:	681b      	ldr	r3, [r3, #0]
 801fa2c:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 801fa30:	4a53      	ldr	r2, [pc, #332]	@ (801fb80 <network_configure_activations+0x2bc>)
 801fa32:	6093      	str	r3, [r2, #8]
    conv2d_8_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 1552);
 801fa34:	4b42      	ldr	r3, [pc, #264]	@ (801fb40 <network_configure_activations+0x27c>)
 801fa36:	681b      	ldr	r3, [r3, #0]
 801fa38:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 801fa3c:	4a50      	ldr	r2, [pc, #320]	@ (801fb80 <network_configure_activations+0x2bc>)
 801fa3e:	60d3      	str	r3, [r2, #12]
    conv2d_8_output_array.data = AI_PTR(g_network_activations_map[0] + 32400);
 801fa40:	4b3f      	ldr	r3, [pc, #252]	@ (801fb40 <network_configure_activations+0x27c>)
 801fa42:	681a      	ldr	r2, [r3, #0]
 801fa44:	f647 6390 	movw	r3, #32400	@ 0x7e90
 801fa48:	4413      	add	r3, r2
 801fa4a:	4a4e      	ldr	r2, [pc, #312]	@ (801fb84 <network_configure_activations+0x2c0>)
 801fa4c:	6093      	str	r3, [r2, #8]
    conv2d_8_output_array.data_start = AI_PTR(g_network_activations_map[0] + 32400);
 801fa4e:	4b3c      	ldr	r3, [pc, #240]	@ (801fb40 <network_configure_activations+0x27c>)
 801fa50:	681a      	ldr	r2, [r3, #0]
 801fa52:	f647 6390 	movw	r3, #32400	@ 0x7e90
 801fa56:	4413      	add	r3, r2
 801fa58:	4a4a      	ldr	r2, [pc, #296]	@ (801fb84 <network_configure_activations+0x2c0>)
 801fa5a:	60d3      	str	r3, [r2, #12]
    eltwise_9_output_array.data = AI_PTR(g_network_activations_map[0] + 1552);
 801fa5c:	4b38      	ldr	r3, [pc, #224]	@ (801fb40 <network_configure_activations+0x27c>)
 801fa5e:	681b      	ldr	r3, [r3, #0]
 801fa60:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 801fa64:	4a48      	ldr	r2, [pc, #288]	@ (801fb88 <network_configure_activations+0x2c4>)
 801fa66:	6093      	str	r3, [r2, #8]
    eltwise_9_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1552);
 801fa68:	4b35      	ldr	r3, [pc, #212]	@ (801fb40 <network_configure_activations+0x27c>)
 801fa6a:	681b      	ldr	r3, [r3, #0]
 801fa6c:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 801fa70:	4a45      	ldr	r2, [pc, #276]	@ (801fb88 <network_configure_activations+0x2c4>)
 801fa72:	60d3      	str	r3, [r2, #12]
    eltwise_10_output_array.data = AI_PTR(g_network_activations_map[0] + 28048);
 801fa74:	4b32      	ldr	r3, [pc, #200]	@ (801fb40 <network_configure_activations+0x27c>)
 801fa76:	681a      	ldr	r2, [r3, #0]
 801fa78:	f646 5390 	movw	r3, #28048	@ 0x6d90
 801fa7c:	4413      	add	r3, r2
 801fa7e:	4a43      	ldr	r2, [pc, #268]	@ (801fb8c <network_configure_activations+0x2c8>)
 801fa80:	6093      	str	r3, [r2, #8]
    eltwise_10_output_array.data_start = AI_PTR(g_network_activations_map[0] + 28048);
 801fa82:	4b2f      	ldr	r3, [pc, #188]	@ (801fb40 <network_configure_activations+0x27c>)
 801fa84:	681a      	ldr	r2, [r3, #0]
 801fa86:	f646 5390 	movw	r3, #28048	@ 0x6d90
 801fa8a:	4413      	add	r3, r2
 801fa8c:	4a3f      	ldr	r2, [pc, #252]	@ (801fb8c <network_configure_activations+0x2c8>)
 801fa8e:	60d3      	str	r3, [r2, #12]
    pool_11_output_array.data = AI_PTR(g_network_activations_map[0] + 27920);
 801fa90:	4b2b      	ldr	r3, [pc, #172]	@ (801fb40 <network_configure_activations+0x27c>)
 801fa92:	681a      	ldr	r2, [r3, #0]
 801fa94:	f646 5310 	movw	r3, #27920	@ 0x6d10
 801fa98:	4413      	add	r3, r2
 801fa9a:	4a3d      	ldr	r2, [pc, #244]	@ (801fb90 <network_configure_activations+0x2cc>)
 801fa9c:	6093      	str	r3, [r2, #8]
    pool_11_output_array.data_start = AI_PTR(g_network_activations_map[0] + 27920);
 801fa9e:	4b28      	ldr	r3, [pc, #160]	@ (801fb40 <network_configure_activations+0x27c>)
 801faa0:	681a      	ldr	r2, [r3, #0]
 801faa2:	f646 5310 	movw	r3, #27920	@ 0x6d10
 801faa6:	4413      	add	r3, r2
 801faa8:	4a39      	ldr	r2, [pc, #228]	@ (801fb90 <network_configure_activations+0x2cc>)
 801faaa:	60d3      	str	r3, [r2, #12]
    gemm_12_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 27584);
 801faac:	4b24      	ldr	r3, [pc, #144]	@ (801fb40 <network_configure_activations+0x27c>)
 801faae:	681a      	ldr	r2, [r3, #0]
 801fab0:	f646 33c0 	movw	r3, #27584	@ 0x6bc0
 801fab4:	4413      	add	r3, r2
 801fab6:	4a37      	ldr	r2, [pc, #220]	@ (801fb94 <network_configure_activations+0x2d0>)
 801fab8:	6093      	str	r3, [r2, #8]
    gemm_12_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 27584);
 801faba:	4b21      	ldr	r3, [pc, #132]	@ (801fb40 <network_configure_activations+0x27c>)
 801fabc:	681a      	ldr	r2, [r3, #0]
 801fabe:	f646 33c0 	movw	r3, #27584	@ 0x6bc0
 801fac2:	4413      	add	r3, r2
 801fac4:	4a33      	ldr	r2, [pc, #204]	@ (801fb94 <network_configure_activations+0x2d0>)
 801fac6:	60d3      	str	r3, [r2, #12]
    gemm_12_output_array.data = AI_PTR(g_network_activations_map[0] + 54544);
 801fac8:	4b1d      	ldr	r3, [pc, #116]	@ (801fb40 <network_configure_activations+0x27c>)
 801faca:	681a      	ldr	r2, [r3, #0]
 801facc:	f24d 5310 	movw	r3, #54544	@ 0xd510
 801fad0:	4413      	add	r3, r2
 801fad2:	4a31      	ldr	r2, [pc, #196]	@ (801fb98 <network_configure_activations+0x2d4>)
 801fad4:	6093      	str	r3, [r2, #8]
    gemm_12_output_array.data_start = AI_PTR(g_network_activations_map[0] + 54544);
 801fad6:	4b1a      	ldr	r3, [pc, #104]	@ (801fb40 <network_configure_activations+0x27c>)
 801fad8:	681a      	ldr	r2, [r3, #0]
 801fada:	f24d 5310 	movw	r3, #54544	@ 0xd510
 801fade:	4413      	add	r3, r2
 801fae0:	4a2d      	ldr	r2, [pc, #180]	@ (801fb98 <network_configure_activations+0x2d4>)
 801fae2:	60d3      	str	r3, [r2, #12]
    gemm_13_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 26752);
 801fae4:	4b16      	ldr	r3, [pc, #88]	@ (801fb40 <network_configure_activations+0x27c>)
 801fae6:	681b      	ldr	r3, [r3, #0]
 801fae8:	f503 43d1 	add.w	r3, r3, #26752	@ 0x6880
 801faec:	4a2b      	ldr	r2, [pc, #172]	@ (801fb9c <network_configure_activations+0x2d8>)
 801faee:	6093      	str	r3, [r2, #8]
    gemm_13_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 26752);
 801faf0:	4b13      	ldr	r3, [pc, #76]	@ (801fb40 <network_configure_activations+0x27c>)
 801faf2:	681b      	ldr	r3, [r3, #0]
 801faf4:	f503 43d1 	add.w	r3, r3, #26752	@ 0x6880
 801faf8:	4a28      	ldr	r2, [pc, #160]	@ (801fb9c <network_configure_activations+0x2d8>)
 801fafa:	60d3      	str	r3, [r2, #12]
    gemm_13_output_array.data = AI_PTR(g_network_activations_map[0] + 26624);
 801fafc:	4b10      	ldr	r3, [pc, #64]	@ (801fb40 <network_configure_activations+0x27c>)
 801fafe:	681b      	ldr	r3, [r3, #0]
 801fb00:	f503 43d0 	add.w	r3, r3, #26624	@ 0x6800
 801fb04:	4a26      	ldr	r2, [pc, #152]	@ (801fba0 <network_configure_activations+0x2dc>)
 801fb06:	6093      	str	r3, [r2, #8]
    gemm_13_output_array.data_start = AI_PTR(g_network_activations_map[0] + 26624);
 801fb08:	4b0d      	ldr	r3, [pc, #52]	@ (801fb40 <network_configure_activations+0x27c>)
 801fb0a:	681b      	ldr	r3, [r3, #0]
 801fb0c:	f503 43d0 	add.w	r3, r3, #26624	@ 0x6800
 801fb10:	4a23      	ldr	r2, [pc, #140]	@ (801fba0 <network_configure_activations+0x2dc>)
 801fb12:	60d3      	str	r3, [r2, #12]
    nl_14_output_array.data = AI_PTR(g_network_activations_map[0] + 26496);
 801fb14:	4b0a      	ldr	r3, [pc, #40]	@ (801fb40 <network_configure_activations+0x27c>)
 801fb16:	681b      	ldr	r3, [r3, #0]
 801fb18:	f503 43cf 	add.w	r3, r3, #26496	@ 0x6780
 801fb1c:	4a21      	ldr	r2, [pc, #132]	@ (801fba4 <network_configure_activations+0x2e0>)
 801fb1e:	6093      	str	r3, [r2, #8]
    nl_14_output_array.data_start = AI_PTR(g_network_activations_map[0] + 26496);
 801fb20:	4b07      	ldr	r3, [pc, #28]	@ (801fb40 <network_configure_activations+0x27c>)
 801fb22:	681b      	ldr	r3, [r3, #0]
 801fb24:	f503 43cf 	add.w	r3, r3, #26496	@ 0x6780
 801fb28:	4a1e      	ldr	r2, [pc, #120]	@ (801fba4 <network_configure_activations+0x2e0>)
 801fb2a:	60d3      	str	r3, [r2, #12]
    eltwise_19_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 801fb2c:	4b04      	ldr	r3, [pc, #16]	@ (801fb40 <network_configure_activations+0x27c>)
 801fb2e:	681b      	ldr	r3, [r3, #0]
 801fb30:	4a1d      	ldr	r2, [pc, #116]	@ (801fba8 <network_configure_activations+0x2e4>)
 801fb32:	6093      	str	r3, [r2, #8]
    eltwise_19_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 801fb34:	4b02      	ldr	r3, [pc, #8]	@ (801fb40 <network_configure_activations+0x27c>)
 801fb36:	681b      	ldr	r3, [r3, #0]
 801fb38:	4a1b      	ldr	r2, [pc, #108]	@ (801fba8 <network_configure_activations+0x2e4>)
 801fb3a:	60d3      	str	r3, [r2, #12]
 801fb3c:	e036      	b.n	801fbac <network_configure_activations+0x2e8>
 801fb3e:	bf00      	nop
 801fb40:	2405286c 	.word	0x2405286c
 801fb44:	0001d474 	.word	0x0001d474
 801fb48:	24000058 	.word	0x24000058
 801fb4c:	0001d050 	.word	0x0001d050
 801fb50:	24000418 	.word	0x24000418
 801fb54:	24000068 	.word	0x24000068
 801fb58:	24000078 	.word	0x24000078
 801fb5c:	24000088 	.word	0x24000088
 801fb60:	24000098 	.word	0x24000098
 801fb64:	240000a8 	.word	0x240000a8
 801fb68:	24000428 	.word	0x24000428
 801fb6c:	240000b8 	.word	0x240000b8
 801fb70:	240000c8 	.word	0x240000c8
 801fb74:	240000d8 	.word	0x240000d8
 801fb78:	240000e8 	.word	0x240000e8
 801fb7c:	240000f8 	.word	0x240000f8
 801fb80:	24000438 	.word	0x24000438
 801fb84:	24000108 	.word	0x24000108
 801fb88:	24000118 	.word	0x24000118
 801fb8c:	24000128 	.word	0x24000128
 801fb90:	24000138 	.word	0x24000138
 801fb94:	24000448 	.word	0x24000448
 801fb98:	24000148 	.word	0x24000148
 801fb9c:	24000458 	.word	0x24000458
 801fba0:	24000158 	.word	0x24000158
 801fba4:	24000168 	.word	0x24000168
 801fba8:	24000178 	.word	0x24000178
    eltwise_19_0_conversion_output_array.data = AI_PTR(g_network_activations_map[0] + 26496);
 801fbac:	4b77      	ldr	r3, [pc, #476]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fbae:	681b      	ldr	r3, [r3, #0]
 801fbb0:	f503 43cf 	add.w	r3, r3, #26496	@ 0x6780
 801fbb4:	4a76      	ldr	r2, [pc, #472]	@ (801fd90 <network_configure_activations+0x4cc>)
 801fbb6:	6093      	str	r3, [r2, #8]
    eltwise_19_0_conversion_output_array.data_start = AI_PTR(g_network_activations_map[0] + 26496);
 801fbb8:	4b74      	ldr	r3, [pc, #464]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fbba:	681b      	ldr	r3, [r3, #0]
 801fbbc:	f503 43cf 	add.w	r3, r3, #26496	@ 0x6780
 801fbc0:	4a73      	ldr	r2, [pc, #460]	@ (801fd90 <network_configure_activations+0x4cc>)
 801fbc2:	60d3      	str	r3, [r2, #12]
    reduce_21_output_array.data = AI_PTR(g_network_activations_map[0] + 132480);
 801fbc4:	4b71      	ldr	r3, [pc, #452]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fbc6:	681a      	ldr	r2, [r3, #0]
 801fbc8:	4b72      	ldr	r3, [pc, #456]	@ (801fd94 <network_configure_activations+0x4d0>)
 801fbca:	4413      	add	r3, r2
 801fbcc:	4a72      	ldr	r2, [pc, #456]	@ (801fd98 <network_configure_activations+0x4d4>)
 801fbce:	6093      	str	r3, [r2, #8]
    reduce_21_output_array.data_start = AI_PTR(g_network_activations_map[0] + 132480);
 801fbd0:	4b6e      	ldr	r3, [pc, #440]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fbd2:	681a      	ldr	r2, [r3, #0]
 801fbd4:	4b6f      	ldr	r3, [pc, #444]	@ (801fd94 <network_configure_activations+0x4d0>)
 801fbd6:	4413      	add	r3, r2
 801fbd8:	4a6f      	ldr	r2, [pc, #444]	@ (801fd98 <network_configure_activations+0x4d4>)
 801fbda:	60d3      	str	r3, [r2, #12]
    reduce_21_0_1_concat_22_conversion_output_array.data = AI_PTR(g_network_activations_map[0] + 132480);
 801fbdc:	4b6b      	ldr	r3, [pc, #428]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fbde:	681a      	ldr	r2, [r3, #0]
 801fbe0:	4b6c      	ldr	r3, [pc, #432]	@ (801fd94 <network_configure_activations+0x4d0>)
 801fbe2:	4413      	add	r3, r2
 801fbe4:	4a6d      	ldr	r2, [pc, #436]	@ (801fd9c <network_configure_activations+0x4d8>)
 801fbe6:	6093      	str	r3, [r2, #8]
    reduce_21_0_1_concat_22_conversion_output_array.data_start = AI_PTR(g_network_activations_map[0] + 132480);
 801fbe8:	4b68      	ldr	r3, [pc, #416]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fbea:	681a      	ldr	r2, [r3, #0]
 801fbec:	4b69      	ldr	r3, [pc, #420]	@ (801fd94 <network_configure_activations+0x4d0>)
 801fbee:	4413      	add	r3, r2
 801fbf0:	4a6a      	ldr	r2, [pc, #424]	@ (801fd9c <network_configure_activations+0x4d8>)
 801fbf2:	60d3      	str	r3, [r2, #12]
    reduce_20_output_array.data = AI_PTR(g_network_activations_map[0] + 132688);
 801fbf4:	4b65      	ldr	r3, [pc, #404]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fbf6:	681a      	ldr	r2, [r3, #0]
 801fbf8:	4b69      	ldr	r3, [pc, #420]	@ (801fda0 <network_configure_activations+0x4dc>)
 801fbfa:	4413      	add	r3, r2
 801fbfc:	4a69      	ldr	r2, [pc, #420]	@ (801fda4 <network_configure_activations+0x4e0>)
 801fbfe:	6093      	str	r3, [r2, #8]
    reduce_20_output_array.data_start = AI_PTR(g_network_activations_map[0] + 132688);
 801fc00:	4b62      	ldr	r3, [pc, #392]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fc02:	681a      	ldr	r2, [r3, #0]
 801fc04:	4b66      	ldr	r3, [pc, #408]	@ (801fda0 <network_configure_activations+0x4dc>)
 801fc06:	4413      	add	r3, r2
 801fc08:	4a66      	ldr	r2, [pc, #408]	@ (801fda4 <network_configure_activations+0x4e0>)
 801fc0a:	60d3      	str	r3, [r2, #12]
    reduce_20_Mul_output_array.data = AI_PTR(g_network_activations_map[0] + 26496);
 801fc0c:	4b5f      	ldr	r3, [pc, #380]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fc0e:	681b      	ldr	r3, [r3, #0]
 801fc10:	f503 43cf 	add.w	r3, r3, #26496	@ 0x6780
 801fc14:	4a64      	ldr	r2, [pc, #400]	@ (801fda8 <network_configure_activations+0x4e4>)
 801fc16:	6093      	str	r3, [r2, #8]
    reduce_20_Mul_output_array.data_start = AI_PTR(g_network_activations_map[0] + 26496);
 801fc18:	4b5c      	ldr	r3, [pc, #368]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fc1a:	681b      	ldr	r3, [r3, #0]
 801fc1c:	f503 43cf 	add.w	r3, r3, #26496	@ 0x6780
 801fc20:	4a61      	ldr	r2, [pc, #388]	@ (801fda8 <network_configure_activations+0x4e4>)
 801fc22:	60d3      	str	r3, [r2, #12]
    reduce_20_Mul_0_0_concat_22_conversion_output_array.data = AI_PTR(g_network_activations_map[0] + 27324);
 801fc24:	4b59      	ldr	r3, [pc, #356]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fc26:	681a      	ldr	r2, [r3, #0]
 801fc28:	f646 23bc 	movw	r3, #27324	@ 0x6abc
 801fc2c:	4413      	add	r3, r2
 801fc2e:	4a5f      	ldr	r2, [pc, #380]	@ (801fdac <network_configure_activations+0x4e8>)
 801fc30:	6093      	str	r3, [r2, #8]
    reduce_20_Mul_0_0_concat_22_conversion_output_array.data_start = AI_PTR(g_network_activations_map[0] + 27324);
 801fc32:	4b56      	ldr	r3, [pc, #344]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fc34:	681a      	ldr	r2, [r3, #0]
 801fc36:	f646 23bc 	movw	r3, #27324	@ 0x6abc
 801fc3a:	4413      	add	r3, r2
 801fc3c:	4a5b      	ldr	r2, [pc, #364]	@ (801fdac <network_configure_activations+0x4e8>)
 801fc3e:	60d3      	str	r3, [r2, #12]
    concat_22_output_array.data = AI_PTR(g_network_activations_map[0] + 26496);
 801fc40:	4b52      	ldr	r3, [pc, #328]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fc42:	681b      	ldr	r3, [r3, #0]
 801fc44:	f503 43cf 	add.w	r3, r3, #26496	@ 0x6780
 801fc48:	4a59      	ldr	r2, [pc, #356]	@ (801fdb0 <network_configure_activations+0x4ec>)
 801fc4a:	6093      	str	r3, [r2, #8]
    concat_22_output_array.data_start = AI_PTR(g_network_activations_map[0] + 26496);
 801fc4c:	4b4f      	ldr	r3, [pc, #316]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fc4e:	681b      	ldr	r3, [r3, #0]
 801fc50:	f503 43cf 	add.w	r3, r3, #26496	@ 0x6780
 801fc54:	4a56      	ldr	r2, [pc, #344]	@ (801fdb0 <network_configure_activations+0x4ec>)
 801fc56:	60d3      	str	r3, [r2, #12]
    conv2d_23_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 26912);
 801fc58:	4b4c      	ldr	r3, [pc, #304]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fc5a:	681a      	ldr	r2, [r3, #0]
 801fc5c:	f646 1320 	movw	r3, #26912	@ 0x6920
 801fc60:	4413      	add	r3, r2
 801fc62:	4a54      	ldr	r2, [pc, #336]	@ (801fdb4 <network_configure_activations+0x4f0>)
 801fc64:	6093      	str	r3, [r2, #8]
    conv2d_23_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 26912);
 801fc66:	4b49      	ldr	r3, [pc, #292]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fc68:	681a      	ldr	r2, [r3, #0]
 801fc6a:	f646 1320 	movw	r3, #26912	@ 0x6920
 801fc6e:	4413      	add	r3, r2
 801fc70:	4a50      	ldr	r2, [pc, #320]	@ (801fdb4 <network_configure_activations+0x4f0>)
 801fc72:	60d3      	str	r3, [r2, #12]
    conv2d_23_output_array.data = AI_PTR(g_network_activations_map[0] + 27504);
 801fc74:	4b45      	ldr	r3, [pc, #276]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fc76:	681a      	ldr	r2, [r3, #0]
 801fc78:	f646 3370 	movw	r3, #27504	@ 0x6b70
 801fc7c:	4413      	add	r3, r2
 801fc7e:	4a4e      	ldr	r2, [pc, #312]	@ (801fdb8 <network_configure_activations+0x4f4>)
 801fc80:	6093      	str	r3, [r2, #8]
    conv2d_23_output_array.data_start = AI_PTR(g_network_activations_map[0] + 27504);
 801fc82:	4b42      	ldr	r3, [pc, #264]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fc84:	681a      	ldr	r2, [r3, #0]
 801fc86:	f646 3370 	movw	r3, #27504	@ 0x6b70
 801fc8a:	4413      	add	r3, r2
 801fc8c:	4a4a      	ldr	r2, [pc, #296]	@ (801fdb8 <network_configure_activations+0x4f4>)
 801fc8e:	60d3      	str	r3, [r2, #12]
    nl_24_output_array.data = AI_PTR(g_network_activations_map[0] + 26496);
 801fc90:	4b3e      	ldr	r3, [pc, #248]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fc92:	681b      	ldr	r3, [r3, #0]
 801fc94:	f503 43cf 	add.w	r3, r3, #26496	@ 0x6780
 801fc98:	4a48      	ldr	r2, [pc, #288]	@ (801fdbc <network_configure_activations+0x4f8>)
 801fc9a:	6093      	str	r3, [r2, #8]
    nl_24_output_array.data_start = AI_PTR(g_network_activations_map[0] + 26496);
 801fc9c:	4b3b      	ldr	r3, [pc, #236]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fc9e:	681b      	ldr	r3, [r3, #0]
 801fca0:	f503 43cf 	add.w	r3, r3, #26496	@ 0x6780
 801fca4:	4a45      	ldr	r2, [pc, #276]	@ (801fdbc <network_configure_activations+0x4f8>)
 801fca6:	60d3      	str	r3, [r2, #12]
    eltwise_25_output_array.data = AI_PTR(g_network_activations_map[0] + 26704);
 801fca8:	4b38      	ldr	r3, [pc, #224]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fcaa:	681a      	ldr	r2, [r3, #0]
 801fcac:	f646 0350 	movw	r3, #26704	@ 0x6850
 801fcb0:	4413      	add	r3, r2
 801fcb2:	4a43      	ldr	r2, [pc, #268]	@ (801fdc0 <network_configure_activations+0x4fc>)
 801fcb4:	6093      	str	r3, [r2, #8]
    eltwise_25_output_array.data_start = AI_PTR(g_network_activations_map[0] + 26704);
 801fcb6:	4b35      	ldr	r3, [pc, #212]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fcb8:	681a      	ldr	r2, [r3, #0]
 801fcba:	f646 0350 	movw	r3, #26704	@ 0x6850
 801fcbe:	4413      	add	r3, r2
 801fcc0:	4a3f      	ldr	r2, [pc, #252]	@ (801fdc0 <network_configure_activations+0x4fc>)
 801fcc2:	60d3      	str	r3, [r2, #12]
    pool_26_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 801fcc4:	4b31      	ldr	r3, [pc, #196]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fcc6:	681b      	ldr	r3, [r3, #0]
 801fcc8:	4a3e      	ldr	r2, [pc, #248]	@ (801fdc4 <network_configure_activations+0x500>)
 801fcca:	6093      	str	r3, [r2, #8]
    pool_26_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 801fccc:	4b2f      	ldr	r3, [pc, #188]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fcce:	681b      	ldr	r3, [r3, #0]
 801fcd0:	4a3c      	ldr	r2, [pc, #240]	@ (801fdc4 <network_configure_activations+0x500>)
 801fcd2:	60d3      	str	r3, [r2, #12]
    pool_27_output_array.data = AI_PTR(g_network_activations_map[0] + 5632);
 801fcd4:	4b2d      	ldr	r3, [pc, #180]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fcd6:	681b      	ldr	r3, [r3, #0]
 801fcd8:	f503 53b0 	add.w	r3, r3, #5632	@ 0x1600
 801fcdc:	4a3a      	ldr	r2, [pc, #232]	@ (801fdc8 <network_configure_activations+0x504>)
 801fcde:	6093      	str	r3, [r2, #8]
    pool_27_output_array.data_start = AI_PTR(g_network_activations_map[0] + 5632);
 801fce0:	4b2a      	ldr	r3, [pc, #168]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fce2:	681b      	ldr	r3, [r3, #0]
 801fce4:	f503 53b0 	add.w	r3, r3, #5632	@ 0x1600
 801fce8:	4a37      	ldr	r2, [pc, #220]	@ (801fdc8 <network_configure_activations+0x504>)
 801fcea:	60d3      	str	r3, [r2, #12]
    gemm_28_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 801fcec:	4b27      	ldr	r3, [pc, #156]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fcee:	681b      	ldr	r3, [r3, #0]
 801fcf0:	4a36      	ldr	r2, [pc, #216]	@ (801fdcc <network_configure_activations+0x508>)
 801fcf2:	6093      	str	r3, [r2, #8]
    gemm_28_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 801fcf4:	4b25      	ldr	r3, [pc, #148]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fcf6:	681b      	ldr	r3, [r3, #0]
 801fcf8:	4a34      	ldr	r2, [pc, #208]	@ (801fdcc <network_configure_activations+0x508>)
 801fcfa:	60d3      	str	r3, [r2, #12]
    gemm_28_output_array.data = AI_PTR(g_network_activations_map[0] + 5760);
 801fcfc:	4b23      	ldr	r3, [pc, #140]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fcfe:	681b      	ldr	r3, [r3, #0]
 801fd00:	f503 53b4 	add.w	r3, r3, #5760	@ 0x1680
 801fd04:	4a32      	ldr	r2, [pc, #200]	@ (801fdd0 <network_configure_activations+0x50c>)
 801fd06:	6093      	str	r3, [r2, #8]
    gemm_28_output_array.data_start = AI_PTR(g_network_activations_map[0] + 5760);
 801fd08:	4b20      	ldr	r3, [pc, #128]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fd0a:	681b      	ldr	r3, [r3, #0]
 801fd0c:	f503 53b4 	add.w	r3, r3, #5760	@ 0x1680
 801fd10:	4a2f      	ldr	r2, [pc, #188]	@ (801fdd0 <network_configure_activations+0x50c>)
 801fd12:	60d3      	str	r3, [r2, #12]
    gemm_29_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 801fd14:	4b1d      	ldr	r3, [pc, #116]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fd16:	681b      	ldr	r3, [r3, #0]
 801fd18:	4a2e      	ldr	r2, [pc, #184]	@ (801fdd4 <network_configure_activations+0x510>)
 801fd1a:	6093      	str	r3, [r2, #8]
    gemm_29_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 801fd1c:	4b1b      	ldr	r3, [pc, #108]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fd1e:	681b      	ldr	r3, [r3, #0]
 801fd20:	4a2c      	ldr	r2, [pc, #176]	@ (801fdd4 <network_configure_activations+0x510>)
 801fd22:	60d3      	str	r3, [r2, #12]
    gemm_29_output_array.data = AI_PTR(g_network_activations_map[0] + 2304);
 801fd24:	4b19      	ldr	r3, [pc, #100]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fd26:	681b      	ldr	r3, [r3, #0]
 801fd28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801fd2c:	4a2a      	ldr	r2, [pc, #168]	@ (801fdd8 <network_configure_activations+0x514>)
 801fd2e:	6093      	str	r3, [r2, #8]
    gemm_29_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2304);
 801fd30:	4b16      	ldr	r3, [pc, #88]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fd32:	681b      	ldr	r3, [r3, #0]
 801fd34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801fd38:	4a27      	ldr	r2, [pc, #156]	@ (801fdd8 <network_configure_activations+0x514>)
 801fd3a:	60d3      	str	r3, [r2, #12]
    gemm_29_0_0_normalization_30_conversion_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 801fd3c:	4b13      	ldr	r3, [pc, #76]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fd3e:	681b      	ldr	r3, [r3, #0]
 801fd40:	4a26      	ldr	r2, [pc, #152]	@ (801fddc <network_configure_activations+0x518>)
 801fd42:	6093      	str	r3, [r2, #8]
    gemm_29_0_0_normalization_30_conversion_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 801fd44:	4b11      	ldr	r3, [pc, #68]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fd46:	681b      	ldr	r3, [r3, #0]
 801fd48:	4a24      	ldr	r2, [pc, #144]	@ (801fddc <network_configure_activations+0x518>)
 801fd4a:	60d3      	str	r3, [r2, #12]
    normalization_30_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 801fd4c:	4b0f      	ldr	r3, [pc, #60]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fd4e:	681b      	ldr	r3, [r3, #0]
 801fd50:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801fd54:	4a22      	ldr	r2, [pc, #136]	@ (801fde0 <network_configure_activations+0x51c>)
 801fd56:	6093      	str	r3, [r2, #8]
    normalization_30_output_array.data_start = AI_PTR(g_network_activations_map[0] + 512);
 801fd58:	4b0c      	ldr	r3, [pc, #48]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fd5a:	681b      	ldr	r3, [r3, #0]
 801fd5c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801fd60:	4a1f      	ldr	r2, [pc, #124]	@ (801fde0 <network_configure_activations+0x51c>)
 801fd62:	60d3      	str	r3, [r2, #12]
    normalization_30_0_conversion_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 801fd64:	4b09      	ldr	r3, [pc, #36]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fd66:	681b      	ldr	r3, [r3, #0]
 801fd68:	4a1e      	ldr	r2, [pc, #120]	@ (801fde4 <network_configure_activations+0x520>)
 801fd6a:	6093      	str	r3, [r2, #8]
    normalization_30_0_conversion_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 801fd6c:	4b07      	ldr	r3, [pc, #28]	@ (801fd8c <network_configure_activations+0x4c8>)
 801fd6e:	681b      	ldr	r3, [r3, #0]
 801fd70:	4a1c      	ldr	r2, [pc, #112]	@ (801fde4 <network_configure_activations+0x520>)
 801fd72:	60d3      	str	r3, [r2, #12]
    return true;
 801fd74:	2301      	movs	r3, #1
 801fd76:	e005      	b.n	801fd84 <network_configure_activations+0x4c0>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 801fd78:	2213      	movs	r2, #19
 801fd7a:	2130      	movs	r1, #48	@ 0x30
 801fd7c:	6878      	ldr	r0, [r7, #4]
 801fd7e:	f003 f8db 	bl	8022f38 <ai_platform_network_set_error>
  return false;
 801fd82:	2300      	movs	r3, #0
}
 801fd84:	4618      	mov	r0, r3
 801fd86:	3708      	adds	r7, #8
 801fd88:	46bd      	mov	sp, r7
 801fd8a:	bd80      	pop	{r7, pc}
 801fd8c:	2405286c 	.word	0x2405286c
 801fd90:	24000188 	.word	0x24000188
 801fd94:	00020580 	.word	0x00020580
 801fd98:	24000198 	.word	0x24000198
 801fd9c:	240001a8 	.word	0x240001a8
 801fda0:	00020650 	.word	0x00020650
 801fda4:	240001b8 	.word	0x240001b8
 801fda8:	240001c8 	.word	0x240001c8
 801fdac:	240001d8 	.word	0x240001d8
 801fdb0:	240001e8 	.word	0x240001e8
 801fdb4:	24000468 	.word	0x24000468
 801fdb8:	240001f8 	.word	0x240001f8
 801fdbc:	24000208 	.word	0x24000208
 801fdc0:	24000218 	.word	0x24000218
 801fdc4:	24000228 	.word	0x24000228
 801fdc8:	24000238 	.word	0x24000238
 801fdcc:	24000478 	.word	0x24000478
 801fdd0:	24000248 	.word	0x24000248
 801fdd4:	24000488 	.word	0x24000488
 801fdd8:	24000258 	.word	0x24000258
 801fddc:	24000268 	.word	0x24000268
 801fde0:	24000278 	.word	0x24000278
 801fde4:	24000288 	.word	0x24000288

0801fde8 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 801fde8:	b580      	push	{r7, lr}
 801fdea:	b082      	sub	sp, #8
 801fdec:	af00      	add	r7, sp, #0
 801fdee:	6078      	str	r0, [r7, #4]
 801fdf0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 801fdf2:	683a      	ldr	r2, [r7, #0]
 801fdf4:	2101      	movs	r1, #1
 801fdf6:	4896      	ldr	r0, [pc, #600]	@ (8020050 <network_configure_weights+0x268>)
 801fdf8:	f002 ff88 	bl	8022d0c <ai_platform_get_weights_map>
 801fdfc:	4603      	mov	r3, r0
 801fdfe:	2b00      	cmp	r3, #0
 801fe00:	f000 81e0 	beq.w	80201c4 <network_configure_weights+0x3dc>
    /* Updating weights (byte) offsets */
    
    tfl_pseudo_qconst10_array.format |= AI_FMT_FLAG_CONST;
 801fe04:	4b93      	ldr	r3, [pc, #588]	@ (8020054 <network_configure_weights+0x26c>)
 801fe06:	681b      	ldr	r3, [r3, #0]
 801fe08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801fe0c:	4a91      	ldr	r2, [pc, #580]	@ (8020054 <network_configure_weights+0x26c>)
 801fe0e:	6013      	str	r3, [r2, #0]
    tfl_pseudo_qconst10_array.data = AI_PTR(g_network_weights_map[0] + 0);
 801fe10:	4b8f      	ldr	r3, [pc, #572]	@ (8020050 <network_configure_weights+0x268>)
 801fe12:	681b      	ldr	r3, [r3, #0]
 801fe14:	4a8f      	ldr	r2, [pc, #572]	@ (8020054 <network_configure_weights+0x26c>)
 801fe16:	6093      	str	r3, [r2, #8]
    tfl_pseudo_qconst10_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 801fe18:	4b8d      	ldr	r3, [pc, #564]	@ (8020050 <network_configure_weights+0x268>)
 801fe1a:	681b      	ldr	r3, [r3, #0]
 801fe1c:	4a8d      	ldr	r2, [pc, #564]	@ (8020054 <network_configure_weights+0x26c>)
 801fe1e:	60d3      	str	r3, [r2, #12]
    tfl_pseudo_qconst11_array.format |= AI_FMT_FLAG_CONST;
 801fe20:	4b8d      	ldr	r3, [pc, #564]	@ (8020058 <network_configure_weights+0x270>)
 801fe22:	681b      	ldr	r3, [r3, #0]
 801fe24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801fe28:	4a8b      	ldr	r2, [pc, #556]	@ (8020058 <network_configure_weights+0x270>)
 801fe2a:	6013      	str	r3, [r2, #0]
    tfl_pseudo_qconst11_array.data = AI_PTR(g_network_weights_map[0] + 128);
 801fe2c:	4b88      	ldr	r3, [pc, #544]	@ (8020050 <network_configure_weights+0x268>)
 801fe2e:	681b      	ldr	r3, [r3, #0]
 801fe30:	3380      	adds	r3, #128	@ 0x80
 801fe32:	4a89      	ldr	r2, [pc, #548]	@ (8020058 <network_configure_weights+0x270>)
 801fe34:	6093      	str	r3, [r2, #8]
    tfl_pseudo_qconst11_array.data_start = AI_PTR(g_network_weights_map[0] + 128);
 801fe36:	4b86      	ldr	r3, [pc, #536]	@ (8020050 <network_configure_weights+0x268>)
 801fe38:	681b      	ldr	r3, [r3, #0]
 801fe3a:	3380      	adds	r3, #128	@ 0x80
 801fe3c:	4a86      	ldr	r2, [pc, #536]	@ (8020058 <network_configure_weights+0x270>)
 801fe3e:	60d3      	str	r3, [r2, #12]
    tfl_pseudo_qconst14_array.format |= AI_FMT_FLAG_CONST;
 801fe40:	4b86      	ldr	r3, [pc, #536]	@ (802005c <network_configure_weights+0x274>)
 801fe42:	681b      	ldr	r3, [r3, #0]
 801fe44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801fe48:	4a84      	ldr	r2, [pc, #528]	@ (802005c <network_configure_weights+0x274>)
 801fe4a:	6013      	str	r3, [r2, #0]
    tfl_pseudo_qconst14_array.data = AI_PTR(g_network_weights_map[0] + 256);
 801fe4c:	4b80      	ldr	r3, [pc, #512]	@ (8020050 <network_configure_weights+0x268>)
 801fe4e:	681b      	ldr	r3, [r3, #0]
 801fe50:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 801fe54:	4a81      	ldr	r2, [pc, #516]	@ (802005c <network_configure_weights+0x274>)
 801fe56:	6093      	str	r3, [r2, #8]
    tfl_pseudo_qconst14_array.data_start = AI_PTR(g_network_weights_map[0] + 256);
 801fe58:	4b7d      	ldr	r3, [pc, #500]	@ (8020050 <network_configure_weights+0x268>)
 801fe5a:	681b      	ldr	r3, [r3, #0]
 801fe5c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 801fe60:	4a7e      	ldr	r2, [pc, #504]	@ (802005c <network_configure_weights+0x274>)
 801fe62:	60d3      	str	r3, [r2, #12]
    tfl_pseudo_qconst15_array.format |= AI_FMT_FLAG_CONST;
 801fe64:	4b7e      	ldr	r3, [pc, #504]	@ (8020060 <network_configure_weights+0x278>)
 801fe66:	681b      	ldr	r3, [r3, #0]
 801fe68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801fe6c:	4a7c      	ldr	r2, [pc, #496]	@ (8020060 <network_configure_weights+0x278>)
 801fe6e:	6013      	str	r3, [r2, #0]
    tfl_pseudo_qconst15_array.data = AI_PTR(g_network_weights_map[0] + 320);
 801fe70:	4b77      	ldr	r3, [pc, #476]	@ (8020050 <network_configure_weights+0x268>)
 801fe72:	681b      	ldr	r3, [r3, #0]
 801fe74:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 801fe78:	4a79      	ldr	r2, [pc, #484]	@ (8020060 <network_configure_weights+0x278>)
 801fe7a:	6093      	str	r3, [r2, #8]
    tfl_pseudo_qconst15_array.data_start = AI_PTR(g_network_weights_map[0] + 320);
 801fe7c:	4b74      	ldr	r3, [pc, #464]	@ (8020050 <network_configure_weights+0x268>)
 801fe7e:	681b      	ldr	r3, [r3, #0]
 801fe80:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 801fe84:	4a76      	ldr	r2, [pc, #472]	@ (8020060 <network_configure_weights+0x278>)
 801fe86:	60d3      	str	r3, [r2, #12]
    tfl_pseudo_qconst18_array.format |= AI_FMT_FLAG_CONST;
 801fe88:	4b76      	ldr	r3, [pc, #472]	@ (8020064 <network_configure_weights+0x27c>)
 801fe8a:	681b      	ldr	r3, [r3, #0]
 801fe8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801fe90:	4a74      	ldr	r2, [pc, #464]	@ (8020064 <network_configure_weights+0x27c>)
 801fe92:	6013      	str	r3, [r2, #0]
    tfl_pseudo_qconst18_array.data = AI_PTR(g_network_weights_map[0] + 384);
 801fe94:	4b6e      	ldr	r3, [pc, #440]	@ (8020050 <network_configure_weights+0x268>)
 801fe96:	681b      	ldr	r3, [r3, #0]
 801fe98:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 801fe9c:	4a71      	ldr	r2, [pc, #452]	@ (8020064 <network_configure_weights+0x27c>)
 801fe9e:	6093      	str	r3, [r2, #8]
    tfl_pseudo_qconst18_array.data_start = AI_PTR(g_network_weights_map[0] + 384);
 801fea0:	4b6b      	ldr	r3, [pc, #428]	@ (8020050 <network_configure_weights+0x268>)
 801fea2:	681b      	ldr	r3, [r3, #0]
 801fea4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 801fea8:	4a6e      	ldr	r2, [pc, #440]	@ (8020064 <network_configure_weights+0x27c>)
 801feaa:	60d3      	str	r3, [r2, #12]
    tfl_pseudo_qconst19_array.format |= AI_FMT_FLAG_CONST;
 801feac:	4b6e      	ldr	r3, [pc, #440]	@ (8020068 <network_configure_weights+0x280>)
 801feae:	681b      	ldr	r3, [r3, #0]
 801feb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801feb4:	4a6c      	ldr	r2, [pc, #432]	@ (8020068 <network_configure_weights+0x280>)
 801feb6:	6013      	str	r3, [r2, #0]
    tfl_pseudo_qconst19_array.data = AI_PTR(g_network_weights_map[0] + 416);
 801feb8:	4b65      	ldr	r3, [pc, #404]	@ (8020050 <network_configure_weights+0x268>)
 801feba:	681b      	ldr	r3, [r3, #0]
 801febc:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 801fec0:	4a69      	ldr	r2, [pc, #420]	@ (8020068 <network_configure_weights+0x280>)
 801fec2:	6093      	str	r3, [r2, #8]
    tfl_pseudo_qconst19_array.data_start = AI_PTR(g_network_weights_map[0] + 416);
 801fec4:	4b62      	ldr	r3, [pc, #392]	@ (8020050 <network_configure_weights+0x268>)
 801fec6:	681b      	ldr	r3, [r3, #0]
 801fec8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 801fecc:	4a66      	ldr	r2, [pc, #408]	@ (8020068 <network_configure_weights+0x280>)
 801fece:	60d3      	str	r3, [r2, #12]
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 801fed0:	4b66      	ldr	r3, [pc, #408]	@ (802006c <network_configure_weights+0x284>)
 801fed2:	681b      	ldr	r3, [r3, #0]
 801fed4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801fed8:	4a64      	ldr	r2, [pc, #400]	@ (802006c <network_configure_weights+0x284>)
 801feda:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 448);
 801fedc:	4b5c      	ldr	r3, [pc, #368]	@ (8020050 <network_configure_weights+0x268>)
 801fede:	681b      	ldr	r3, [r3, #0]
 801fee0:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 801fee4:	4a61      	ldr	r2, [pc, #388]	@ (802006c <network_configure_weights+0x284>)
 801fee6:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 448);
 801fee8:	4b59      	ldr	r3, [pc, #356]	@ (8020050 <network_configure_weights+0x268>)
 801feea:	681b      	ldr	r3, [r3, #0]
 801feec:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 801fef0:	4a5e      	ldr	r2, [pc, #376]	@ (802006c <network_configure_weights+0x284>)
 801fef2:	60d3      	str	r3, [r2, #12]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 801fef4:	4b5e      	ldr	r3, [pc, #376]	@ (8020070 <network_configure_weights+0x288>)
 801fef6:	681b      	ldr	r3, [r3, #0]
 801fef8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801fefc:	4a5c      	ldr	r2, [pc, #368]	@ (8020070 <network_configure_weights+0x288>)
 801fefe:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 736);
 801ff00:	4b53      	ldr	r3, [pc, #332]	@ (8020050 <network_configure_weights+0x268>)
 801ff02:	681b      	ldr	r3, [r3, #0]
 801ff04:	f503 7338 	add.w	r3, r3, #736	@ 0x2e0
 801ff08:	4a59      	ldr	r2, [pc, #356]	@ (8020070 <network_configure_weights+0x288>)
 801ff0a:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 736);
 801ff0c:	4b50      	ldr	r3, [pc, #320]	@ (8020050 <network_configure_weights+0x268>)
 801ff0e:	681b      	ldr	r3, [r3, #0]
 801ff10:	f503 7338 	add.w	r3, r3, #736	@ 0x2e0
 801ff14:	4a56      	ldr	r2, [pc, #344]	@ (8020070 <network_configure_weights+0x288>)
 801ff16:	60d3      	str	r3, [r2, #12]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 801ff18:	4b56      	ldr	r3, [pc, #344]	@ (8020074 <network_configure_weights+0x28c>)
 801ff1a:	681b      	ldr	r3, [r3, #0]
 801ff1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ff20:	4a54      	ldr	r2, [pc, #336]	@ (8020074 <network_configure_weights+0x28c>)
 801ff22:	6013      	str	r3, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 864);
 801ff24:	4b4a      	ldr	r3, [pc, #296]	@ (8020050 <network_configure_weights+0x268>)
 801ff26:	681b      	ldr	r3, [r3, #0]
 801ff28:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801ff2c:	4a51      	ldr	r2, [pc, #324]	@ (8020074 <network_configure_weights+0x28c>)
 801ff2e:	6093      	str	r3, [r2, #8]
    conv2d_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 864);
 801ff30:	4b47      	ldr	r3, [pc, #284]	@ (8020050 <network_configure_weights+0x268>)
 801ff32:	681b      	ldr	r3, [r3, #0]
 801ff34:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801ff38:	4a4e      	ldr	r2, [pc, #312]	@ (8020074 <network_configure_weights+0x28c>)
 801ff3a:	60d3      	str	r3, [r2, #12]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 801ff3c:	4b4e      	ldr	r3, [pc, #312]	@ (8020078 <network_configure_weights+0x290>)
 801ff3e:	681b      	ldr	r3, [r3, #0]
 801ff40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ff44:	4a4c      	ldr	r2, [pc, #304]	@ (8020078 <network_configure_weights+0x290>)
 801ff46:	6013      	str	r3, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 19296);
 801ff48:	4b41      	ldr	r3, [pc, #260]	@ (8020050 <network_configure_weights+0x268>)
 801ff4a:	681a      	ldr	r2, [r3, #0]
 801ff4c:	f644 3360 	movw	r3, #19296	@ 0x4b60
 801ff50:	4413      	add	r3, r2
 801ff52:	4a49      	ldr	r2, [pc, #292]	@ (8020078 <network_configure_weights+0x290>)
 801ff54:	6093      	str	r3, [r2, #8]
    conv2d_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 19296);
 801ff56:	4b3e      	ldr	r3, [pc, #248]	@ (8020050 <network_configure_weights+0x268>)
 801ff58:	681a      	ldr	r2, [r3, #0]
 801ff5a:	f644 3360 	movw	r3, #19296	@ 0x4b60
 801ff5e:	4413      	add	r3, r2
 801ff60:	4a45      	ldr	r2, [pc, #276]	@ (8020078 <network_configure_weights+0x290>)
 801ff62:	60d3      	str	r3, [r2, #12]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 801ff64:	4b45      	ldr	r3, [pc, #276]	@ (802007c <network_configure_weights+0x294>)
 801ff66:	681b      	ldr	r3, [r3, #0]
 801ff68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ff6c:	4a43      	ldr	r2, [pc, #268]	@ (802007c <network_configure_weights+0x294>)
 801ff6e:	6013      	str	r3, [r2, #0]
    conv2d_8_weights_array.data = AI_PTR(g_network_weights_map[0] + 19552);
 801ff70:	4b37      	ldr	r3, [pc, #220]	@ (8020050 <network_configure_weights+0x268>)
 801ff72:	681a      	ldr	r2, [r3, #0]
 801ff74:	f644 4360 	movw	r3, #19552	@ 0x4c60
 801ff78:	4413      	add	r3, r2
 801ff7a:	4a40      	ldr	r2, [pc, #256]	@ (802007c <network_configure_weights+0x294>)
 801ff7c:	6093      	str	r3, [r2, #8]
    conv2d_8_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 19552);
 801ff7e:	4b34      	ldr	r3, [pc, #208]	@ (8020050 <network_configure_weights+0x268>)
 801ff80:	681a      	ldr	r2, [r3, #0]
 801ff82:	f644 4360 	movw	r3, #19552	@ 0x4c60
 801ff86:	4413      	add	r3, r2
 801ff88:	4a3c      	ldr	r2, [pc, #240]	@ (802007c <network_configure_weights+0x294>)
 801ff8a:	60d3      	str	r3, [r2, #12]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 801ff8c:	4b3c      	ldr	r3, [pc, #240]	@ (8020080 <network_configure_weights+0x298>)
 801ff8e:	681b      	ldr	r3, [r3, #0]
 801ff90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ff94:	4a3a      	ldr	r2, [pc, #232]	@ (8020080 <network_configure_weights+0x298>)
 801ff96:	6013      	str	r3, [r2, #0]
    conv2d_8_bias_array.data = AI_PTR(g_network_weights_map[0] + 93280);
 801ff98:	4b2d      	ldr	r3, [pc, #180]	@ (8020050 <network_configure_weights+0x268>)
 801ff9a:	681a      	ldr	r2, [r3, #0]
 801ff9c:	4b39      	ldr	r3, [pc, #228]	@ (8020084 <network_configure_weights+0x29c>)
 801ff9e:	4413      	add	r3, r2
 801ffa0:	4a37      	ldr	r2, [pc, #220]	@ (8020080 <network_configure_weights+0x298>)
 801ffa2:	6093      	str	r3, [r2, #8]
    conv2d_8_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 93280);
 801ffa4:	4b2a      	ldr	r3, [pc, #168]	@ (8020050 <network_configure_weights+0x268>)
 801ffa6:	681a      	ldr	r2, [r3, #0]
 801ffa8:	4b36      	ldr	r3, [pc, #216]	@ (8020084 <network_configure_weights+0x29c>)
 801ffaa:	4413      	add	r3, r2
 801ffac:	4a34      	ldr	r2, [pc, #208]	@ (8020080 <network_configure_weights+0x298>)
 801ffae:	60d3      	str	r3, [r2, #12]
    gemm_12_weights_array.format |= AI_FMT_FLAG_CONST;
 801ffb0:	4b35      	ldr	r3, [pc, #212]	@ (8020088 <network_configure_weights+0x2a0>)
 801ffb2:	681b      	ldr	r3, [r3, #0]
 801ffb4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ffb8:	4a33      	ldr	r2, [pc, #204]	@ (8020088 <network_configure_weights+0x2a0>)
 801ffba:	6013      	str	r3, [r2, #0]
    gemm_12_weights_array.data = AI_PTR(g_network_weights_map[0] + 93792);
 801ffbc:	4b24      	ldr	r3, [pc, #144]	@ (8020050 <network_configure_weights+0x268>)
 801ffbe:	681a      	ldr	r2, [r3, #0]
 801ffc0:	4b32      	ldr	r3, [pc, #200]	@ (802008c <network_configure_weights+0x2a4>)
 801ffc2:	4413      	add	r3, r2
 801ffc4:	4a30      	ldr	r2, [pc, #192]	@ (8020088 <network_configure_weights+0x2a0>)
 801ffc6:	6093      	str	r3, [r2, #8]
    gemm_12_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 93792);
 801ffc8:	4b21      	ldr	r3, [pc, #132]	@ (8020050 <network_configure_weights+0x268>)
 801ffca:	681a      	ldr	r2, [r3, #0]
 801ffcc:	4b2f      	ldr	r3, [pc, #188]	@ (802008c <network_configure_weights+0x2a4>)
 801ffce:	4413      	add	r3, r2
 801ffd0:	4a2d      	ldr	r2, [pc, #180]	@ (8020088 <network_configure_weights+0x2a0>)
 801ffd2:	60d3      	str	r3, [r2, #12]
    gemm_12_bias_array.format |= AI_FMT_FLAG_CONST;
 801ffd4:	4b2e      	ldr	r3, [pc, #184]	@ (8020090 <network_configure_weights+0x2a8>)
 801ffd6:	681b      	ldr	r3, [r3, #0]
 801ffd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ffdc:	4a2c      	ldr	r2, [pc, #176]	@ (8020090 <network_configure_weights+0x2a8>)
 801ffde:	6013      	str	r3, [r2, #0]
    gemm_12_bias_array.data = AI_PTR(g_network_weights_map[0] + 94816);
 801ffe0:	4b1b      	ldr	r3, [pc, #108]	@ (8020050 <network_configure_weights+0x268>)
 801ffe2:	681a      	ldr	r2, [r3, #0]
 801ffe4:	4b2b      	ldr	r3, [pc, #172]	@ (8020094 <network_configure_weights+0x2ac>)
 801ffe6:	4413      	add	r3, r2
 801ffe8:	4a29      	ldr	r2, [pc, #164]	@ (8020090 <network_configure_weights+0x2a8>)
 801ffea:	6093      	str	r3, [r2, #8]
    gemm_12_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 94816);
 801ffec:	4b18      	ldr	r3, [pc, #96]	@ (8020050 <network_configure_weights+0x268>)
 801ffee:	681a      	ldr	r2, [r3, #0]
 801fff0:	4b28      	ldr	r3, [pc, #160]	@ (8020094 <network_configure_weights+0x2ac>)
 801fff2:	4413      	add	r3, r2
 801fff4:	4a26      	ldr	r2, [pc, #152]	@ (8020090 <network_configure_weights+0x2a8>)
 801fff6:	60d3      	str	r3, [r2, #12]
    gemm_13_weights_array.format |= AI_FMT_FLAG_CONST;
 801fff8:	4b27      	ldr	r3, [pc, #156]	@ (8020098 <network_configure_weights+0x2b0>)
 801fffa:	681b      	ldr	r3, [r3, #0]
 801fffc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8020000:	4a25      	ldr	r2, [pc, #148]	@ (8020098 <network_configure_weights+0x2b0>)
 8020002:	6013      	str	r3, [r2, #0]
    gemm_13_weights_array.data = AI_PTR(g_network_weights_map[0] + 94848);
 8020004:	4b12      	ldr	r3, [pc, #72]	@ (8020050 <network_configure_weights+0x268>)
 8020006:	681a      	ldr	r2, [r3, #0]
 8020008:	4b24      	ldr	r3, [pc, #144]	@ (802009c <network_configure_weights+0x2b4>)
 802000a:	4413      	add	r3, r2
 802000c:	4a22      	ldr	r2, [pc, #136]	@ (8020098 <network_configure_weights+0x2b0>)
 802000e:	6093      	str	r3, [r2, #8]
    gemm_13_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 94848);
 8020010:	4b0f      	ldr	r3, [pc, #60]	@ (8020050 <network_configure_weights+0x268>)
 8020012:	681a      	ldr	r2, [r3, #0]
 8020014:	4b21      	ldr	r3, [pc, #132]	@ (802009c <network_configure_weights+0x2b4>)
 8020016:	4413      	add	r3, r2
 8020018:	4a1f      	ldr	r2, [pc, #124]	@ (8020098 <network_configure_weights+0x2b0>)
 802001a:	60d3      	str	r3, [r2, #12]
    gemm_13_bias_array.format |= AI_FMT_FLAG_CONST;
 802001c:	4b20      	ldr	r3, [pc, #128]	@ (80200a0 <network_configure_weights+0x2b8>)
 802001e:	681b      	ldr	r3, [r3, #0]
 8020020:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8020024:	4a1e      	ldr	r2, [pc, #120]	@ (80200a0 <network_configure_weights+0x2b8>)
 8020026:	6013      	str	r3, [r2, #0]
    gemm_13_bias_array.data = AI_PTR(g_network_weights_map[0] + 95872);
 8020028:	4b09      	ldr	r3, [pc, #36]	@ (8020050 <network_configure_weights+0x268>)
 802002a:	681a      	ldr	r2, [r3, #0]
 802002c:	4b1d      	ldr	r3, [pc, #116]	@ (80200a4 <network_configure_weights+0x2bc>)
 802002e:	4413      	add	r3, r2
 8020030:	4a1b      	ldr	r2, [pc, #108]	@ (80200a0 <network_configure_weights+0x2b8>)
 8020032:	6093      	str	r3, [r2, #8]
    gemm_13_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 95872);
 8020034:	4b06      	ldr	r3, [pc, #24]	@ (8020050 <network_configure_weights+0x268>)
 8020036:	681a      	ldr	r2, [r3, #0]
 8020038:	4b1a      	ldr	r3, [pc, #104]	@ (80200a4 <network_configure_weights+0x2bc>)
 802003a:	4413      	add	r3, r2
 802003c:	4a18      	ldr	r2, [pc, #96]	@ (80200a0 <network_configure_weights+0x2b8>)
 802003e:	60d3      	str	r3, [r2, #12]
    reduce_20_Mul_scale_array.format |= AI_FMT_FLAG_CONST;
 8020040:	4b19      	ldr	r3, [pc, #100]	@ (80200a8 <network_configure_weights+0x2c0>)
 8020042:	681b      	ldr	r3, [r3, #0]
 8020044:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8020048:	4a17      	ldr	r2, [pc, #92]	@ (80200a8 <network_configure_weights+0x2c0>)
 802004a:	6013      	str	r3, [r2, #0]
 802004c:	e02e      	b.n	80200ac <network_configure_weights+0x2c4>
 802004e:	bf00      	nop
 8020050:	24052870 	.word	0x24052870
 8020054:	24000298 	.word	0x24000298
 8020058:	240002a8 	.word	0x240002a8
 802005c:	240002b8 	.word	0x240002b8
 8020060:	240002c8 	.word	0x240002c8
 8020064:	240002d8 	.word	0x240002d8
 8020068:	240002e8 	.word	0x240002e8
 802006c:	240002f8 	.word	0x240002f8
 8020070:	24000308 	.word	0x24000308
 8020074:	24000318 	.word	0x24000318
 8020078:	24000328 	.word	0x24000328
 802007c:	24000338 	.word	0x24000338
 8020080:	24000348 	.word	0x24000348
 8020084:	00016c60 	.word	0x00016c60
 8020088:	24000358 	.word	0x24000358
 802008c:	00016e60 	.word	0x00016e60
 8020090:	24000368 	.word	0x24000368
 8020094:	00017260 	.word	0x00017260
 8020098:	24000378 	.word	0x24000378
 802009c:	00017280 	.word	0x00017280
 80200a0:	24000388 	.word	0x24000388
 80200a4:	00017680 	.word	0x00017680
 80200a8:	24000398 	.word	0x24000398
    reduce_20_Mul_scale_array.data = AI_PTR(g_network_weights_map[0] + 96384);
 80200ac:	4b4a      	ldr	r3, [pc, #296]	@ (80201d8 <network_configure_weights+0x3f0>)
 80200ae:	681a      	ldr	r2, [r3, #0]
 80200b0:	4b4a      	ldr	r3, [pc, #296]	@ (80201dc <network_configure_weights+0x3f4>)
 80200b2:	4413      	add	r3, r2
 80200b4:	4a4a      	ldr	r2, [pc, #296]	@ (80201e0 <network_configure_weights+0x3f8>)
 80200b6:	6093      	str	r3, [r2, #8]
    reduce_20_Mul_scale_array.data_start = AI_PTR(g_network_weights_map[0] + 96384);
 80200b8:	4b47      	ldr	r3, [pc, #284]	@ (80201d8 <network_configure_weights+0x3f0>)
 80200ba:	681a      	ldr	r2, [r3, #0]
 80200bc:	4b47      	ldr	r3, [pc, #284]	@ (80201dc <network_configure_weights+0x3f4>)
 80200be:	4413      	add	r3, r2
 80200c0:	4a47      	ldr	r2, [pc, #284]	@ (80201e0 <network_configure_weights+0x3f8>)
 80200c2:	60d3      	str	r3, [r2, #12]
    reduce_20_Mul_bias_array.format |= AI_FMT_FLAG_CONST;
 80200c4:	4b47      	ldr	r3, [pc, #284]	@ (80201e4 <network_configure_weights+0x3fc>)
 80200c6:	681b      	ldr	r3, [r3, #0]
 80200c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80200cc:	4a45      	ldr	r2, [pc, #276]	@ (80201e4 <network_configure_weights+0x3fc>)
 80200ce:	6013      	str	r3, [r2, #0]
    reduce_20_Mul_bias_array.data = AI_PTR(g_network_weights_map[0] + 96388);
 80200d0:	4b41      	ldr	r3, [pc, #260]	@ (80201d8 <network_configure_weights+0x3f0>)
 80200d2:	681a      	ldr	r2, [r3, #0]
 80200d4:	4b44      	ldr	r3, [pc, #272]	@ (80201e8 <network_configure_weights+0x400>)
 80200d6:	4413      	add	r3, r2
 80200d8:	4a42      	ldr	r2, [pc, #264]	@ (80201e4 <network_configure_weights+0x3fc>)
 80200da:	6093      	str	r3, [r2, #8]
    reduce_20_Mul_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 96388);
 80200dc:	4b3e      	ldr	r3, [pc, #248]	@ (80201d8 <network_configure_weights+0x3f0>)
 80200de:	681a      	ldr	r2, [r3, #0]
 80200e0:	4b41      	ldr	r3, [pc, #260]	@ (80201e8 <network_configure_weights+0x400>)
 80200e2:	4413      	add	r3, r2
 80200e4:	4a3f      	ldr	r2, [pc, #252]	@ (80201e4 <network_configure_weights+0x3fc>)
 80200e6:	60d3      	str	r3, [r2, #12]
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 80200e8:	4b40      	ldr	r3, [pc, #256]	@ (80201ec <network_configure_weights+0x404>)
 80200ea:	681b      	ldr	r3, [r3, #0]
 80200ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80200f0:	4a3e      	ldr	r2, [pc, #248]	@ (80201ec <network_configure_weights+0x404>)
 80200f2:	6013      	str	r3, [r2, #0]
    conv2d_23_weights_array.data = AI_PTR(g_network_weights_map[0] + 96392);
 80200f4:	4b38      	ldr	r3, [pc, #224]	@ (80201d8 <network_configure_weights+0x3f0>)
 80200f6:	681a      	ldr	r2, [r3, #0]
 80200f8:	4b3d      	ldr	r3, [pc, #244]	@ (80201f0 <network_configure_weights+0x408>)
 80200fa:	4413      	add	r3, r2
 80200fc:	4a3b      	ldr	r2, [pc, #236]	@ (80201ec <network_configure_weights+0x404>)
 80200fe:	6093      	str	r3, [r2, #8]
    conv2d_23_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 96392);
 8020100:	4b35      	ldr	r3, [pc, #212]	@ (80201d8 <network_configure_weights+0x3f0>)
 8020102:	681a      	ldr	r2, [r3, #0]
 8020104:	4b3a      	ldr	r3, [pc, #232]	@ (80201f0 <network_configure_weights+0x408>)
 8020106:	4413      	add	r3, r2
 8020108:	4a38      	ldr	r2, [pc, #224]	@ (80201ec <network_configure_weights+0x404>)
 802010a:	60d3      	str	r3, [r2, #12]
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 802010c:	4b39      	ldr	r3, [pc, #228]	@ (80201f4 <network_configure_weights+0x40c>)
 802010e:	681b      	ldr	r3, [r3, #0]
 8020110:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8020114:	4a37      	ldr	r2, [pc, #220]	@ (80201f4 <network_configure_weights+0x40c>)
 8020116:	6013      	str	r3, [r2, #0]
    conv2d_23_bias_array.data = AI_PTR(g_network_weights_map[0] + 96492);
 8020118:	4b2f      	ldr	r3, [pc, #188]	@ (80201d8 <network_configure_weights+0x3f0>)
 802011a:	681a      	ldr	r2, [r3, #0]
 802011c:	4b36      	ldr	r3, [pc, #216]	@ (80201f8 <network_configure_weights+0x410>)
 802011e:	4413      	add	r3, r2
 8020120:	4a34      	ldr	r2, [pc, #208]	@ (80201f4 <network_configure_weights+0x40c>)
 8020122:	6093      	str	r3, [r2, #8]
    conv2d_23_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 96492);
 8020124:	4b2c      	ldr	r3, [pc, #176]	@ (80201d8 <network_configure_weights+0x3f0>)
 8020126:	681a      	ldr	r2, [r3, #0]
 8020128:	4b33      	ldr	r3, [pc, #204]	@ (80201f8 <network_configure_weights+0x410>)
 802012a:	4413      	add	r3, r2
 802012c:	4a31      	ldr	r2, [pc, #196]	@ (80201f4 <network_configure_weights+0x40c>)
 802012e:	60d3      	str	r3, [r2, #12]
    gemm_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8020130:	4b32      	ldr	r3, [pc, #200]	@ (80201fc <network_configure_weights+0x414>)
 8020132:	681b      	ldr	r3, [r3, #0]
 8020134:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8020138:	4a30      	ldr	r2, [pc, #192]	@ (80201fc <network_configure_weights+0x414>)
 802013a:	6013      	str	r3, [r2, #0]
    gemm_28_weights_array.data = AI_PTR(g_network_weights_map[0] + 96496);
 802013c:	4b26      	ldr	r3, [pc, #152]	@ (80201d8 <network_configure_weights+0x3f0>)
 802013e:	681a      	ldr	r2, [r3, #0]
 8020140:	4b2f      	ldr	r3, [pc, #188]	@ (8020200 <network_configure_weights+0x418>)
 8020142:	4413      	add	r3, r2
 8020144:	4a2d      	ldr	r2, [pc, #180]	@ (80201fc <network_configure_weights+0x414>)
 8020146:	6093      	str	r3, [r2, #8]
    gemm_28_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 96496);
 8020148:	4b23      	ldr	r3, [pc, #140]	@ (80201d8 <network_configure_weights+0x3f0>)
 802014a:	681a      	ldr	r2, [r3, #0]
 802014c:	4b2c      	ldr	r3, [pc, #176]	@ (8020200 <network_configure_weights+0x418>)
 802014e:	4413      	add	r3, r2
 8020150:	4a2a      	ldr	r2, [pc, #168]	@ (80201fc <network_configure_weights+0x414>)
 8020152:	60d3      	str	r3, [r2, #12]
    gemm_28_bias_array.format |= AI_FMT_FLAG_CONST;
 8020154:	4b2b      	ldr	r3, [pc, #172]	@ (8020204 <network_configure_weights+0x41c>)
 8020156:	681b      	ldr	r3, [r3, #0]
 8020158:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 802015c:	4a29      	ldr	r2, [pc, #164]	@ (8020204 <network_configure_weights+0x41c>)
 802015e:	6013      	str	r3, [r2, #0]
    gemm_28_bias_array.data = AI_PTR(g_network_weights_map[0] + 162032);
 8020160:	4b1d      	ldr	r3, [pc, #116]	@ (80201d8 <network_configure_weights+0x3f0>)
 8020162:	681a      	ldr	r2, [r3, #0]
 8020164:	4b28      	ldr	r3, [pc, #160]	@ (8020208 <network_configure_weights+0x420>)
 8020166:	4413      	add	r3, r2
 8020168:	4a26      	ldr	r2, [pc, #152]	@ (8020204 <network_configure_weights+0x41c>)
 802016a:	6093      	str	r3, [r2, #8]
    gemm_28_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 162032);
 802016c:	4b1a      	ldr	r3, [pc, #104]	@ (80201d8 <network_configure_weights+0x3f0>)
 802016e:	681a      	ldr	r2, [r3, #0]
 8020170:	4b25      	ldr	r3, [pc, #148]	@ (8020208 <network_configure_weights+0x420>)
 8020172:	4413      	add	r3, r2
 8020174:	4a23      	ldr	r2, [pc, #140]	@ (8020204 <network_configure_weights+0x41c>)
 8020176:	60d3      	str	r3, [r2, #12]
    gemm_29_weights_array.format |= AI_FMT_FLAG_CONST;
 8020178:	4b24      	ldr	r3, [pc, #144]	@ (802020c <network_configure_weights+0x424>)
 802017a:	681b      	ldr	r3, [r3, #0]
 802017c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8020180:	4a22      	ldr	r2, [pc, #136]	@ (802020c <network_configure_weights+0x424>)
 8020182:	6013      	str	r3, [r2, #0]
    gemm_29_weights_array.data = AI_PTR(g_network_weights_map[0] + 164080);
 8020184:	4b14      	ldr	r3, [pc, #80]	@ (80201d8 <network_configure_weights+0x3f0>)
 8020186:	681a      	ldr	r2, [r3, #0]
 8020188:	4b21      	ldr	r3, [pc, #132]	@ (8020210 <network_configure_weights+0x428>)
 802018a:	4413      	add	r3, r2
 802018c:	4a1f      	ldr	r2, [pc, #124]	@ (802020c <network_configure_weights+0x424>)
 802018e:	6093      	str	r3, [r2, #8]
    gemm_29_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 164080);
 8020190:	4b11      	ldr	r3, [pc, #68]	@ (80201d8 <network_configure_weights+0x3f0>)
 8020192:	681a      	ldr	r2, [r3, #0]
 8020194:	4b1e      	ldr	r3, [pc, #120]	@ (8020210 <network_configure_weights+0x428>)
 8020196:	4413      	add	r3, r2
 8020198:	4a1c      	ldr	r2, [pc, #112]	@ (802020c <network_configure_weights+0x424>)
 802019a:	60d3      	str	r3, [r2, #12]
    gemm_29_bias_array.format |= AI_FMT_FLAG_CONST;
 802019c:	4b1d      	ldr	r3, [pc, #116]	@ (8020214 <network_configure_weights+0x42c>)
 802019e:	681b      	ldr	r3, [r3, #0]
 80201a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80201a4:	4a1b      	ldr	r2, [pc, #108]	@ (8020214 <network_configure_weights+0x42c>)
 80201a6:	6013      	str	r3, [r2, #0]
    gemm_29_bias_array.data = AI_PTR(g_network_weights_map[0] + 229616);
 80201a8:	4b0b      	ldr	r3, [pc, #44]	@ (80201d8 <network_configure_weights+0x3f0>)
 80201aa:	681a      	ldr	r2, [r3, #0]
 80201ac:	4b1a      	ldr	r3, [pc, #104]	@ (8020218 <network_configure_weights+0x430>)
 80201ae:	4413      	add	r3, r2
 80201b0:	4a18      	ldr	r2, [pc, #96]	@ (8020214 <network_configure_weights+0x42c>)
 80201b2:	6093      	str	r3, [r2, #8]
    gemm_29_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 229616);
 80201b4:	4b08      	ldr	r3, [pc, #32]	@ (80201d8 <network_configure_weights+0x3f0>)
 80201b6:	681a      	ldr	r2, [r3, #0]
 80201b8:	4b17      	ldr	r3, [pc, #92]	@ (8020218 <network_configure_weights+0x430>)
 80201ba:	4413      	add	r3, r2
 80201bc:	4a15      	ldr	r2, [pc, #84]	@ (8020214 <network_configure_weights+0x42c>)
 80201be:	60d3      	str	r3, [r2, #12]
    return true;
 80201c0:	2301      	movs	r3, #1
 80201c2:	e005      	b.n	80201d0 <network_configure_weights+0x3e8>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80201c4:	2212      	movs	r2, #18
 80201c6:	2130      	movs	r1, #48	@ 0x30
 80201c8:	6878      	ldr	r0, [r7, #4]
 80201ca:	f002 feb5 	bl	8022f38 <ai_platform_network_set_error>
  return false;
 80201ce:	2300      	movs	r3, #0
}
 80201d0:	4618      	mov	r0, r3
 80201d2:	3708      	adds	r7, #8
 80201d4:	46bd      	mov	sp, r7
 80201d6:	bd80      	pop	{r7, pc}
 80201d8:	24052870 	.word	0x24052870
 80201dc:	00017880 	.word	0x00017880
 80201e0:	24000398 	.word	0x24000398
 80201e4:	240003a8 	.word	0x240003a8
 80201e8:	00017884 	.word	0x00017884
 80201ec:	240003b8 	.word	0x240003b8
 80201f0:	00017888 	.word	0x00017888
 80201f4:	240003c8 	.word	0x240003c8
 80201f8:	000178ec 	.word	0x000178ec
 80201fc:	240003d8 	.word	0x240003d8
 8020200:	000178f0 	.word	0x000178f0
 8020204:	240003e8 	.word	0x240003e8
 8020208:	000278f0 	.word	0x000278f0
 802020c:	240003f8 	.word	0x240003f8
 8020210:	000280f0 	.word	0x000280f0
 8020214:	24000408 	.word	0x24000408
 8020218:	000380f0 	.word	0x000380f0
 802021c:	00000000 	.word	0x00000000

08020220 <ai_network_get_report>:


AI_API_ENTRY
ai_bool ai_network_get_report(
  ai_handle network, ai_network_report* report)
{
 8020220:	b580      	push	{r7, lr}
 8020222:	b0a6      	sub	sp, #152	@ 0x98
 8020224:	af00      	add	r7, sp, #0
 8020226:	6078      	str	r0, [r7, #4]
 8020228:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 802022a:	6878      	ldr	r0, [r7, #4]
 802022c:	f002 fe70 	bl	8022f10 <ai_platform_context_acquire>
 8020230:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

  if (report && net_ctx)
 8020234:	683b      	ldr	r3, [r7, #0]
 8020236:	2b00      	cmp	r3, #0
 8020238:	d049      	beq.n	80202ce <ai_network_get_report+0xae>
 802023a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 802023e:	2b00      	cmp	r3, #0
 8020240:	d045      	beq.n	80202ce <ai_network_get_report+0xae>
  {
    ai_network_report r = {
 8020242:	f107 0308 	add.w	r3, r7, #8
 8020246:	2288      	movs	r2, #136	@ 0x88
 8020248:	2100      	movs	r1, #0
 802024a:	4618      	mov	r0, r3
 802024c:	f013 fe21 	bl	8033e92 <memset>
 8020250:	4b23      	ldr	r3, [pc, #140]	@ (80202e0 <ai_network_get_report+0xc0>)
 8020252:	60bb      	str	r3, [r7, #8]
 8020254:	4b23      	ldr	r3, [pc, #140]	@ (80202e4 <ai_network_get_report+0xc4>)
 8020256:	60fb      	str	r3, [r7, #12]
 8020258:	4b23      	ldr	r3, [pc, #140]	@ (80202e8 <ai_network_get_report+0xc8>)
 802025a:	613b      	str	r3, [r7, #16]
 802025c:	4b23      	ldr	r3, [pc, #140]	@ (80202ec <ai_network_get_report+0xcc>)
 802025e:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8020260:	f002 fe1e 	bl	8022ea0 <ai_platform_runtime_get_revision>
 8020264:	4603      	mov	r3, r0
    ai_network_report r = {
 8020266:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 8020268:	f002 fe1e 	bl	8022ea8 <ai_platform_runtime_get_version>
 802026c:	4603      	mov	r3, r0
 802026e:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 8020270:	4b1f      	ldr	r3, [pc, #124]	@ (80202f0 <ai_network_get_report+0xd0>)
 8020272:	623b      	str	r3, [r7, #32]
 8020274:	2302      	movs	r3, #2
 8020276:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 802027a:	f002 fe19 	bl	8022eb0 <ai_platform_api_get_version>
 802027e:	4603      	mov	r3, r0
 8020280:	62fb      	str	r3, [r7, #44]	@ 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8020282:	f002 fe2d 	bl	8022ee0 <ai_platform_interface_api_get_version>
 8020286:	4603      	mov	r3, r0
 8020288:	633b      	str	r3, [r7, #48]	@ 0x30
    ai_network_report r = {
 802028a:	a313      	add	r3, pc, #76	@ (adr r3, 80202d8 <ai_network_get_report+0xb8>)
 802028c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020290:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8020294:	4b17      	ldr	r3, [pc, #92]	@ (80202f4 <ai_network_get_report+0xd4>)
 8020296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020298:	4b17      	ldr	r3, [pc, #92]	@ (80202f8 <ai_network_get_report+0xd8>)
 802029a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0xdc3fcb93,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 802029e:	f107 0308 	add.w	r3, r7, #8
 80202a2:	4619      	mov	r1, r3
 80202a4:	6878      	ldr	r0, [r7, #4]
 80202a6:	f002 fe4d 	bl	8022f44 <ai_platform_api_get_network_report>
 80202aa:	4603      	mov	r3, r0
 80202ac:	f083 0301 	eor.w	r3, r3, #1
 80202b0:	b2db      	uxtb	r3, r3
 80202b2:	2b00      	cmp	r3, #0
 80202b4:	d001      	beq.n	80202ba <ai_network_get_report+0x9a>
 80202b6:	2300      	movs	r3, #0
 80202b8:	e00a      	b.n	80202d0 <ai_network_get_report+0xb0>

    *report = r;
 80202ba:	683b      	ldr	r3, [r7, #0]
 80202bc:	4618      	mov	r0, r3
 80202be:	f107 0308 	add.w	r3, r7, #8
 80202c2:	2288      	movs	r2, #136	@ 0x88
 80202c4:	4619      	mov	r1, r3
 80202c6:	f013 fe86 	bl	8033fd6 <memcpy>
    return true;
 80202ca:	2301      	movs	r3, #1
 80202cc:	e000      	b.n	80202d0 <ai_network_get_report+0xb0>
  }
  return false;
 80202ce:	2300      	movs	r3, #0
}
 80202d0:	4618      	mov	r0, r3
 80202d2:	3798      	adds	r7, #152	@ 0x98
 80202d4:	46bd      	mov	sp, r7
 80202d6:	bd80      	pop	{r7, pc}
 80202d8:	02027f90 	.word	0x02027f90
 80202dc:	00000000 	.word	0x00000000
 80202e0:	080381e4 	.word	0x080381e4
 80202e4:	080381ec 	.word	0x080381ec
 80202e8:	08038210 	.word	0x08038210
 80202ec:	0803822c 	.word	0x0803822c
 80202f0:	08038244 	.word	0x08038244
 80202f4:	a1facade 	.word	0xa1facade
 80202f8:	dc3fcb93 	.word	0xdc3fcb93

080202fc <ai_network_get_error>:


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 80202fc:	b580      	push	{r7, lr}
 80202fe:	b082      	sub	sp, #8
 8020300:	af00      	add	r7, sp, #0
 8020302:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8020304:	6878      	ldr	r0, [r7, #4]
 8020306:	f002 fe0b 	bl	8022f20 <ai_platform_network_get_error>
 802030a:	4603      	mov	r3, r0
}
 802030c:	4618      	mov	r0, r3
 802030e:	3708      	adds	r7, #8
 8020310:	46bd      	mov	sp, r7
 8020312:	bd80      	pop	{r7, pc}

08020314 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8020314:	b580      	push	{r7, lr}
 8020316:	b084      	sub	sp, #16
 8020318:	af02      	add	r7, sp, #8
 802031a:	6078      	str	r0, [r7, #4]
 802031c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 802031e:	2300      	movs	r3, #0
 8020320:	9301      	str	r3, [sp, #4]
 8020322:	2305      	movs	r3, #5
 8020324:	9300      	str	r3, [sp, #0]
 8020326:	2301      	movs	r3, #1
 8020328:	4a04      	ldr	r2, [pc, #16]	@ (802033c <ai_network_create+0x28>)
 802032a:	6839      	ldr	r1, [r7, #0]
 802032c:	6878      	ldr	r0, [r7, #4]
 802032e:	f002 ffd1 	bl	80232d4 <ai_platform_network_create>
 8020332:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8020334:	4618      	mov	r0, r3
 8020336:	3708      	adds	r7, #8
 8020338:	46bd      	mov	sp, r7
 802033a:	bd80      	pop	{r7, pc}
 802033c:	24002338 	.word	0x24002338

08020340 <ai_network_destroy>:
}


AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 8020340:	b580      	push	{r7, lr}
 8020342:	b082      	sub	sp, #8
 8020344:	af00      	add	r7, sp, #0
 8020346:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8020348:	6878      	ldr	r0, [r7, #4]
 802034a:	f003 f805 	bl	8023358 <ai_platform_network_destroy>
 802034e:	4603      	mov	r3, r0
}
 8020350:	4618      	mov	r0, r3
 8020352:	3708      	adds	r7, #8
 8020354:	46bd      	mov	sp, r7
 8020356:	bd80      	pop	{r7, pc}

08020358 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8020358:	b580      	push	{r7, lr}
 802035a:	b084      	sub	sp, #16
 802035c:	af00      	add	r7, sp, #0
 802035e:	6078      	str	r0, [r7, #4]
 8020360:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8020362:	6839      	ldr	r1, [r7, #0]
 8020364:	6878      	ldr	r0, [r7, #4]
 8020366:	f003 f809 	bl	802337c <ai_platform_network_init>
 802036a:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 802036c:	2301      	movs	r3, #1
 802036e:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8020370:	68fb      	ldr	r3, [r7, #12]
 8020372:	2b00      	cmp	r3, #0
 8020374:	d101      	bne.n	802037a <ai_network_init+0x22>
 8020376:	2300      	movs	r3, #0
 8020378:	e026      	b.n	80203c8 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 802037a:	6839      	ldr	r1, [r7, #0]
 802037c:	68f8      	ldr	r0, [r7, #12]
 802037e:	f7ff fd33 	bl	801fde8 <network_configure_weights>
 8020382:	4603      	mov	r3, r0
 8020384:	461a      	mov	r2, r3
 8020386:	7afb      	ldrb	r3, [r7, #11]
 8020388:	4013      	ands	r3, r2
 802038a:	2b00      	cmp	r3, #0
 802038c:	bf14      	ite	ne
 802038e:	2301      	movne	r3, #1
 8020390:	2300      	moveq	r3, #0
 8020392:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8020394:	6839      	ldr	r1, [r7, #0]
 8020396:	68f8      	ldr	r0, [r7, #12]
 8020398:	f7ff fa94 	bl	801f8c4 <network_configure_activations>
 802039c:	4603      	mov	r3, r0
 802039e:	461a      	mov	r2, r3
 80203a0:	7afb      	ldrb	r3, [r7, #11]
 80203a2:	4013      	ands	r3, r2
 80203a4:	2b00      	cmp	r3, #0
 80203a6:	bf14      	ite	ne
 80203a8:	2301      	movne	r3, #1
 80203aa:	2300      	moveq	r3, #0
 80203ac:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80203ae:	6878      	ldr	r0, [r7, #4]
 80203b0:	f003 f8a4 	bl	80234fc <ai_platform_network_post_init>
 80203b4:	4603      	mov	r3, r0
 80203b6:	461a      	mov	r2, r3
 80203b8:	7afb      	ldrb	r3, [r7, #11]
 80203ba:	4013      	ands	r3, r2
 80203bc:	2b00      	cmp	r3, #0
 80203be:	bf14      	ite	ne
 80203c0:	2301      	movne	r3, #1
 80203c2:	2300      	moveq	r3, #0
 80203c4:	72fb      	strb	r3, [r7, #11]

  return ok;
 80203c6:	7afb      	ldrb	r3, [r7, #11]
}
 80203c8:	4618      	mov	r0, r3
 80203ca:	3710      	adds	r7, #16
 80203cc:	46bd      	mov	sp, r7
 80203ce:	bd80      	pop	{r7, pc}

080203d0 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80203d0:	b580      	push	{r7, lr}
 80203d2:	b084      	sub	sp, #16
 80203d4:	af00      	add	r7, sp, #0
 80203d6:	60f8      	str	r0, [r7, #12]
 80203d8:	60b9      	str	r1, [r7, #8]
 80203da:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80203dc:	687a      	ldr	r2, [r7, #4]
 80203de:	68b9      	ldr	r1, [r7, #8]
 80203e0:	68f8      	ldr	r0, [r7, #12]
 80203e2:	f003 f8bb 	bl	802355c <ai_platform_network_process>
 80203e6:	4603      	mov	r3, r0
}
 80203e8:	4618      	mov	r0, r3
 80203ea:	3710      	adds	r7, #16
 80203ec:	46bd      	mov	sp, r7
 80203ee:	bd80      	pop	{r7, pc}

080203f0 <ai_network_forward>:


AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
 80203f0:	b580      	push	{r7, lr}
 80203f2:	b082      	sub	sp, #8
 80203f4:	af00      	add	r7, sp, #0
 80203f6:	6078      	str	r0, [r7, #4]
 80203f8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_process(network, input, NULL);
 80203fa:	2200      	movs	r2, #0
 80203fc:	6839      	ldr	r1, [r7, #0]
 80203fe:	6878      	ldr	r0, [r7, #4]
 8020400:	f003 f8ac 	bl	802355c <ai_platform_network_process>
 8020404:	4603      	mov	r3, r0
}
 8020406:	4618      	mov	r0, r3
 8020408:	3708      	adds	r7, #8
 802040a:	46bd      	mov	sp, r7
 802040c:	bd80      	pop	{r7, pc}
	...

08020410 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8020410:	b580      	push	{r7, lr}
 8020412:	b086      	sub	sp, #24
 8020414:	af00      	add	r7, sp, #0
 8020416:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8020418:	687b      	ldr	r3, [r7, #4]
 802041a:	2b00      	cmp	r3, #0
 802041c:	d101      	bne.n	8020422 <ai_network_data_params_get+0x12>
 802041e:	2300      	movs	r3, #0
 8020420:	e016      	b.n	8020450 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8020422:	4a0d      	ldr	r2, [pc, #52]	@ (8020458 <ai_network_data_params_get+0x48>)
 8020424:	f107 0310 	add.w	r3, r7, #16
 8020428:	e892 0003 	ldmia.w	r2, {r0, r1}
 802042c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8020430:	4a0a      	ldr	r2, [pc, #40]	@ (802045c <ai_network_data_params_get+0x4c>)
 8020432:	f107 0308 	add.w	r3, r7, #8
 8020436:	e892 0003 	ldmia.w	r2, {r0, r1}
 802043a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 802043e:	f107 0210 	add.w	r2, r7, #16
 8020442:	f107 0308 	add.w	r3, r7, #8
 8020446:	4619      	mov	r1, r3
 8020448:	6878      	ldr	r0, [r7, #4]
 802044a:	f002 fd0f 	bl	8022e6c <ai_platform_bind_network_params>
 802044e:	4603      	mov	r3, r0
}
 8020450:	4618      	mov	r0, r3
 8020452:	3718      	adds	r7, #24
 8020454:	46bd      	mov	sp, r7
 8020456:	bd80      	pop	{r7, pc}
 8020458:	08038268 	.word	0x08038268
 802045c:	08038270 	.word	0x08038270

08020460 <pb_field_iter_begin>:
 */

#include "pb_common.h"

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
 8020460:	b480      	push	{r7}
 8020462:	b085      	sub	sp, #20
 8020464:	af00      	add	r7, sp, #0
 8020466:	60f8      	str	r0, [r7, #12]
 8020468:	60b9      	str	r1, [r7, #8]
 802046a:	607a      	str	r2, [r7, #4]
    iter->start = fields;
 802046c:	68fb      	ldr	r3, [r7, #12]
 802046e:	68ba      	ldr	r2, [r7, #8]
 8020470:	601a      	str	r2, [r3, #0]
    iter->pos = fields;
 8020472:	68fb      	ldr	r3, [r7, #12]
 8020474:	68ba      	ldr	r2, [r7, #8]
 8020476:	605a      	str	r2, [r3, #4]
    iter->required_field_index = 0;
 8020478:	68fb      	ldr	r3, [r7, #12]
 802047a:	2200      	movs	r2, #0
 802047c:	609a      	str	r2, [r3, #8]
    iter->dest_struct = dest_struct;
 802047e:	68fb      	ldr	r3, [r7, #12]
 8020480:	687a      	ldr	r2, [r7, #4]
 8020482:	60da      	str	r2, [r3, #12]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 8020484:	68fb      	ldr	r3, [r7, #12]
 8020486:	685b      	ldr	r3, [r3, #4]
 8020488:	889b      	ldrh	r3, [r3, #4]
 802048a:	461a      	mov	r2, r3
 802048c:	687b      	ldr	r3, [r7, #4]
 802048e:	441a      	add	r2, r3
 8020490:	68fb      	ldr	r3, [r7, #12]
 8020492:	611a      	str	r2, [r3, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8020494:	68fb      	ldr	r3, [r7, #12]
 8020496:	691b      	ldr	r3, [r3, #16]
 8020498:	68fa      	ldr	r2, [r7, #12]
 802049a:	6852      	ldr	r2, [r2, #4]
 802049c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80204a0:	441a      	add	r2, r3
 80204a2:	68fb      	ldr	r3, [r7, #12]
 80204a4:	615a      	str	r2, [r3, #20]
    
    return (iter->pos->tag != 0);
 80204a6:	68fb      	ldr	r3, [r7, #12]
 80204a8:	685b      	ldr	r3, [r3, #4]
 80204aa:	881b      	ldrh	r3, [r3, #0]
 80204ac:	2b00      	cmp	r3, #0
 80204ae:	bf14      	ite	ne
 80204b0:	2301      	movne	r3, #1
 80204b2:	2300      	moveq	r3, #0
 80204b4:	b2db      	uxtb	r3, r3
}
 80204b6:	4618      	mov	r0, r3
 80204b8:	3714      	adds	r7, #20
 80204ba:	46bd      	mov	sp, r7
 80204bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204c0:	4770      	bx	lr

080204c2 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 80204c2:	b580      	push	{r7, lr}
 80204c4:	b084      	sub	sp, #16
 80204c6:	af00      	add	r7, sp, #0
 80204c8:	6078      	str	r0, [r7, #4]
    const pb_field_t *prev_field = iter->pos;
 80204ca:	687b      	ldr	r3, [r7, #4]
 80204cc:	685b      	ldr	r3, [r3, #4]
 80204ce:	60bb      	str	r3, [r7, #8]

    if (prev_field->tag == 0)
 80204d0:	68bb      	ldr	r3, [r7, #8]
 80204d2:	881b      	ldrh	r3, [r3, #0]
 80204d4:	2b00      	cmp	r3, #0
 80204d6:	d101      	bne.n	80204dc <pb_field_iter_next+0x1a>
    {
        /* Handle empty message types, where the first field is already the terminator.
         * In other cases, the iter->pos never points to the terminator. */
        return false;
 80204d8:	2300      	movs	r3, #0
 80204da:	e069      	b.n	80205b0 <pb_field_iter_next+0xee>
    }
    
    iter->pos++;
 80204dc:	687b      	ldr	r3, [r7, #4]
 80204de:	685b      	ldr	r3, [r3, #4]
 80204e0:	f103 0210 	add.w	r2, r3, #16
 80204e4:	687b      	ldr	r3, [r7, #4]
 80204e6:	605a      	str	r2, [r3, #4]
    
    if (iter->pos->tag == 0)
 80204e8:	687b      	ldr	r3, [r7, #4]
 80204ea:	685b      	ldr	r3, [r3, #4]
 80204ec:	881b      	ldrh	r3, [r3, #0]
 80204ee:	2b00      	cmp	r3, #0
 80204f0:	d109      	bne.n	8020506 <pb_field_iter_next+0x44>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 80204f2:	687b      	ldr	r3, [r7, #4]
 80204f4:	6819      	ldr	r1, [r3, #0]
 80204f6:	687b      	ldr	r3, [r7, #4]
 80204f8:	68db      	ldr	r3, [r3, #12]
 80204fa:	461a      	mov	r2, r3
 80204fc:	6878      	ldr	r0, [r7, #4]
 80204fe:	f7ff ffaf 	bl	8020460 <pb_field_iter_begin>
        return false;
 8020502:	2300      	movs	r3, #0
 8020504:	e054      	b.n	80205b0 <pb_field_iter_next+0xee>
    }
    else
    {
        /* Increment the pointers based on previous field size */
        size_t prev_size = prev_field->data_size;
 8020506:	68bb      	ldr	r3, [r7, #8]
 8020508:	891b      	ldrh	r3, [r3, #8]
 802050a:	60fb      	str	r3, [r7, #12]
    
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 802050c:	68bb      	ldr	r3, [r7, #8]
 802050e:	789b      	ldrb	r3, [r3, #2]
 8020510:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8020514:	2b30      	cmp	r3, #48	@ 0x30
 8020516:	d10f      	bne.n	8020538 <pb_field_iter_next+0x76>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 8020518:	687b      	ldr	r3, [r7, #4]
 802051a:	685b      	ldr	r3, [r3, #4]
 802051c:	789b      	ldrb	r3, [r3, #2]
 802051e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8020522:	2b30      	cmp	r3, #48	@ 0x30
 8020524:	d108      	bne.n	8020538 <pb_field_iter_next+0x76>
            iter->pos->data_offset == PB_SIZE_MAX)
 8020526:	687b      	ldr	r3, [r7, #4]
 8020528:	685b      	ldr	r3, [r3, #4]
 802052a:	889b      	ldrh	r3, [r3, #4]
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 802052c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8020530:	4293      	cmp	r3, r2
 8020532:	d101      	bne.n	8020538 <pb_field_iter_next+0x76>
        {
            /* Don't advance pointers inside unions */
            return true;
 8020534:	2301      	movs	r3, #1
 8020536:	e03b      	b.n	80205b0 <pb_field_iter_next+0xee>
        }
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 8020538:	68bb      	ldr	r3, [r7, #8]
 802053a:	789b      	ldrb	r3, [r3, #2]
 802053c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8020540:	2b00      	cmp	r3, #0
 8020542:	d10d      	bne.n	8020560 <pb_field_iter_next+0x9e>
                 PB_HTYPE(prev_field->type) == PB_HTYPE_REPEATED)
 8020544:	68bb      	ldr	r3, [r7, #8]
 8020546:	789b      	ldrb	r3, [r3, #2]
 8020548:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 802054c:	2b20      	cmp	r3, #32
 802054e:	d107      	bne.n	8020560 <pb_field_iter_next+0x9e>
        {
            /* In static arrays, the data_size tells the size of a single entry and
             * array_size is the number of entries */
            prev_size *= prev_field->array_size;
 8020550:	68bb      	ldr	r3, [r7, #8]
 8020552:	895b      	ldrh	r3, [r3, #10]
 8020554:	461a      	mov	r2, r3
 8020556:	68fb      	ldr	r3, [r7, #12]
 8020558:	fb02 f303 	mul.w	r3, r2, r3
 802055c:	60fb      	str	r3, [r7, #12]
 802055e:	e007      	b.n	8020570 <pb_field_iter_next+0xae>
        }
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 8020560:	68bb      	ldr	r3, [r7, #8]
 8020562:	789b      	ldrb	r3, [r3, #2]
 8020564:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8020568:	2b80      	cmp	r3, #128	@ 0x80
 802056a:	d101      	bne.n	8020570 <pb_field_iter_next+0xae>
        {
            /* Pointer fields always have a constant size in the main structure.
             * The data_size only applies to the dynamically allocated area. */
            prev_size = sizeof(void*);
 802056c:	2304      	movs	r3, #4
 802056e:	60fb      	str	r3, [r7, #12]
        }

        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 8020570:	68bb      	ldr	r3, [r7, #8]
 8020572:	789b      	ldrb	r3, [r3, #2]
 8020574:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8020578:	2b00      	cmp	r3, #0
 802057a:	d104      	bne.n	8020586 <pb_field_iter_next+0xc4>
        {
            /* Count the required fields, in order to check their presence in the
             * decoder. */
            iter->required_field_index++;
 802057c:	687b      	ldr	r3, [r7, #4]
 802057e:	689b      	ldr	r3, [r3, #8]
 8020580:	1c5a      	adds	r2, r3, #1
 8020582:	687b      	ldr	r3, [r7, #4]
 8020584:	609a      	str	r2, [r3, #8]
        }
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 8020586:	687b      	ldr	r3, [r7, #4]
 8020588:	691a      	ldr	r2, [r3, #16]
 802058a:	687b      	ldr	r3, [r7, #4]
 802058c:	685b      	ldr	r3, [r3, #4]
 802058e:	889b      	ldrh	r3, [r3, #4]
 8020590:	4619      	mov	r1, r3
 8020592:	68fb      	ldr	r3, [r7, #12]
 8020594:	440b      	add	r3, r1
 8020596:	441a      	add	r2, r3
 8020598:	687b      	ldr	r3, [r7, #4]
 802059a:	611a      	str	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 802059c:	687b      	ldr	r3, [r7, #4]
 802059e:	691b      	ldr	r3, [r3, #16]
 80205a0:	687a      	ldr	r2, [r7, #4]
 80205a2:	6852      	ldr	r2, [r2, #4]
 80205a4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80205a8:	441a      	add	r2, r3
 80205aa:	687b      	ldr	r3, [r7, #4]
 80205ac:	615a      	str	r2, [r3, #20]
        return true;
 80205ae:	2301      	movs	r3, #1
    }
}
 80205b0:	4618      	mov	r0, r3
 80205b2:	3710      	adds	r7, #16
 80205b4:	46bd      	mov	sp, r7
 80205b6:	bd80      	pop	{r7, pc}

080205b8 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 80205b8:	b580      	push	{r7, lr}
 80205ba:	b084      	sub	sp, #16
 80205bc:	af00      	add	r7, sp, #0
 80205be:	6078      	str	r0, [r7, #4]
 80205c0:	6039      	str	r1, [r7, #0]
    const pb_field_t *start = iter->pos;
 80205c2:	687b      	ldr	r3, [r7, #4]
 80205c4:	685b      	ldr	r3, [r3, #4]
 80205c6:	60fb      	str	r3, [r7, #12]
    
    do {
        if (iter->pos->tag == tag &&
 80205c8:	687b      	ldr	r3, [r7, #4]
 80205ca:	685b      	ldr	r3, [r3, #4]
 80205cc:	881b      	ldrh	r3, [r3, #0]
 80205ce:	461a      	mov	r2, r3
 80205d0:	683b      	ldr	r3, [r7, #0]
 80205d2:	4293      	cmp	r3, r2
 80205d4:	d108      	bne.n	80205e8 <pb_field_iter_find+0x30>
            PB_LTYPE(iter->pos->type) != PB_LTYPE_EXTENSION)
 80205d6:	687b      	ldr	r3, [r7, #4]
 80205d8:	685b      	ldr	r3, [r3, #4]
 80205da:	789b      	ldrb	r3, [r3, #2]
 80205dc:	f003 030f 	and.w	r3, r3, #15
        if (iter->pos->tag == tag &&
 80205e0:	2b08      	cmp	r3, #8
 80205e2:	d001      	beq.n	80205e8 <pb_field_iter_find+0x30>
        {
            /* Found the wanted field */
            return true;
 80205e4:	2301      	movs	r3, #1
 80205e6:	e008      	b.n	80205fa <pb_field_iter_find+0x42>
        }
        
        (void)pb_field_iter_next(iter);
 80205e8:	6878      	ldr	r0, [r7, #4]
 80205ea:	f7ff ff6a 	bl	80204c2 <pb_field_iter_next>
    } while (iter->pos != start);
 80205ee:	687b      	ldr	r3, [r7, #4]
 80205f0:	685b      	ldr	r3, [r3, #4]
 80205f2:	68fa      	ldr	r2, [r7, #12]
 80205f4:	429a      	cmp	r2, r3
 80205f6:	d1e7      	bne.n	80205c8 <pb_field_iter_find+0x10>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 80205f8:	2300      	movs	r3, #0
}
 80205fa:	4618      	mov	r0, r3
 80205fc:	3710      	adds	r7, #16
 80205fe:	46bd      	mov	sp, r7
 8020600:	bd80      	pop	{r7, pc}

08020602 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8020602:	b480      	push	{r7}
 8020604:	b087      	sub	sp, #28
 8020606:	af00      	add	r7, sp, #0
 8020608:	60f8      	str	r0, [r7, #12]
 802060a:	60b9      	str	r1, [r7, #8]
 802060c:	607a      	str	r2, [r7, #4]
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 802060e:	68fb      	ldr	r3, [r7, #12]
 8020610:	685b      	ldr	r3, [r3, #4]
 8020612:	613b      	str	r3, [r7, #16]
    stream->state = (pb_byte_t*)stream->state + count;
 8020614:	68fb      	ldr	r3, [r7, #12]
 8020616:	685a      	ldr	r2, [r3, #4]
 8020618:	687b      	ldr	r3, [r7, #4]
 802061a:	441a      	add	r2, r3
 802061c:	68fb      	ldr	r3, [r7, #12]
 802061e:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8020620:	68bb      	ldr	r3, [r7, #8]
 8020622:	2b00      	cmp	r3, #0
 8020624:	d011      	beq.n	802064a <buf_read+0x48>
    {
        for (i = 0; i < count; i++)
 8020626:	2300      	movs	r3, #0
 8020628:	617b      	str	r3, [r7, #20]
 802062a:	e00a      	b.n	8020642 <buf_read+0x40>
            buf[i] = source[i];
 802062c:	693a      	ldr	r2, [r7, #16]
 802062e:	697b      	ldr	r3, [r7, #20]
 8020630:	441a      	add	r2, r3
 8020632:	68b9      	ldr	r1, [r7, #8]
 8020634:	697b      	ldr	r3, [r7, #20]
 8020636:	440b      	add	r3, r1
 8020638:	7812      	ldrb	r2, [r2, #0]
 802063a:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < count; i++)
 802063c:	697b      	ldr	r3, [r7, #20]
 802063e:	3301      	adds	r3, #1
 8020640:	617b      	str	r3, [r7, #20]
 8020642:	697a      	ldr	r2, [r7, #20]
 8020644:	687b      	ldr	r3, [r7, #4]
 8020646:	429a      	cmp	r2, r3
 8020648:	d3f0      	bcc.n	802062c <buf_read+0x2a>
    }
    
    return true;
 802064a:	2301      	movs	r3, #1
}
 802064c:	4618      	mov	r0, r3
 802064e:	371c      	adds	r7, #28
 8020650:	46bd      	mov	sp, r7
 8020652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020656:	4770      	bx	lr

08020658 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8020658:	b580      	push	{r7, lr}
 802065a:	b088      	sub	sp, #32
 802065c:	af00      	add	r7, sp, #0
 802065e:	60f8      	str	r0, [r7, #12]
 8020660:	60b9      	str	r1, [r7, #8]
 8020662:	607a      	str	r2, [r7, #4]
#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8020664:	68bb      	ldr	r3, [r7, #8]
 8020666:	2b00      	cmp	r3, #0
 8020668:	d123      	bne.n	80206b2 <pb_read+0x5a>
 802066a:	68fb      	ldr	r3, [r7, #12]
 802066c:	681b      	ldr	r3, [r3, #0]
 802066e:	4a21      	ldr	r2, [pc, #132]	@ (80206f4 <pb_read+0x9c>)
 8020670:	4293      	cmp	r3, r2
 8020672:	d01e      	beq.n	80206b2 <pb_read+0x5a>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8020674:	e011      	b.n	802069a <pb_read+0x42>
		{
			if (!pb_read(stream, tmp, 16))
 8020676:	f107 0310 	add.w	r3, r7, #16
 802067a:	2210      	movs	r2, #16
 802067c:	4619      	mov	r1, r3
 802067e:	68f8      	ldr	r0, [r7, #12]
 8020680:	f7ff ffea 	bl	8020658 <pb_read>
 8020684:	4603      	mov	r3, r0
 8020686:	f083 0301 	eor.w	r3, r3, #1
 802068a:	b2db      	uxtb	r3, r3
 802068c:	2b00      	cmp	r3, #0
 802068e:	d001      	beq.n	8020694 <pb_read+0x3c>
				return false;
 8020690:	2300      	movs	r3, #0
 8020692:	e02a      	b.n	80206ea <pb_read+0x92>
			
			count -= 16;
 8020694:	687b      	ldr	r3, [r7, #4]
 8020696:	3b10      	subs	r3, #16
 8020698:	607b      	str	r3, [r7, #4]
		while (count > 16)
 802069a:	687b      	ldr	r3, [r7, #4]
 802069c:	2b10      	cmp	r3, #16
 802069e:	d8ea      	bhi.n	8020676 <pb_read+0x1e>
		}
		
		return pb_read(stream, tmp, count);
 80206a0:	f107 0310 	add.w	r3, r7, #16
 80206a4:	687a      	ldr	r2, [r7, #4]
 80206a6:	4619      	mov	r1, r3
 80206a8:	68f8      	ldr	r0, [r7, #12]
 80206aa:	f7ff ffd5 	bl	8020658 <pb_read>
 80206ae:	4603      	mov	r3, r0
 80206b0:	e01b      	b.n	80206ea <pb_read+0x92>
	}
#endif

    if (stream->bytes_left < count)
 80206b2:	68fb      	ldr	r3, [r7, #12]
 80206b4:	689b      	ldr	r3, [r3, #8]
 80206b6:	687a      	ldr	r2, [r7, #4]
 80206b8:	429a      	cmp	r2, r3
 80206ba:	d901      	bls.n	80206c0 <pb_read+0x68>
        PB_RETURN_ERROR(stream, "end-of-stream");
 80206bc:	2300      	movs	r3, #0
 80206be:	e014      	b.n	80206ea <pb_read+0x92>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 80206c0:	68fb      	ldr	r3, [r7, #12]
 80206c2:	681b      	ldr	r3, [r3, #0]
 80206c4:	687a      	ldr	r2, [r7, #4]
 80206c6:	68b9      	ldr	r1, [r7, #8]
 80206c8:	68f8      	ldr	r0, [r7, #12]
 80206ca:	4798      	blx	r3
 80206cc:	4603      	mov	r3, r0
 80206ce:	f083 0301 	eor.w	r3, r3, #1
 80206d2:	b2db      	uxtb	r3, r3
 80206d4:	2b00      	cmp	r3, #0
 80206d6:	d001      	beq.n	80206dc <pb_read+0x84>
        PB_RETURN_ERROR(stream, "io error");
 80206d8:	2300      	movs	r3, #0
 80206da:	e006      	b.n	80206ea <pb_read+0x92>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    stream->bytes_left -= count;
 80206dc:	68fb      	ldr	r3, [r7, #12]
 80206de:	689a      	ldr	r2, [r3, #8]
 80206e0:	687b      	ldr	r3, [r7, #4]
 80206e2:	1ad2      	subs	r2, r2, r3
 80206e4:	68fb      	ldr	r3, [r7, #12]
 80206e6:	609a      	str	r2, [r3, #8]
    return true;
 80206e8:	2301      	movs	r3, #1
}
 80206ea:	4618      	mov	r0, r3
 80206ec:	3720      	adds	r7, #32
 80206ee:	46bd      	mov	sp, r7
 80206f0:	bd80      	pop	{r7, pc}
 80206f2:	bf00      	nop
 80206f4:	08020603 	.word	0x08020603

080206f8 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 80206f8:	b580      	push	{r7, lr}
 80206fa:	b082      	sub	sp, #8
 80206fc:	af00      	add	r7, sp, #0
 80206fe:	6078      	str	r0, [r7, #4]
 8020700:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8020702:	687b      	ldr	r3, [r7, #4]
 8020704:	689b      	ldr	r3, [r3, #8]
 8020706:	2b00      	cmp	r3, #0
 8020708:	d101      	bne.n	802070e <pb_readbyte+0x16>
        PB_RETURN_ERROR(stream, "end-of-stream");
 802070a:	2300      	movs	r3, #0
 802070c:	e013      	b.n	8020736 <pb_readbyte+0x3e>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 802070e:	687b      	ldr	r3, [r7, #4]
 8020710:	681b      	ldr	r3, [r3, #0]
 8020712:	2201      	movs	r2, #1
 8020714:	6839      	ldr	r1, [r7, #0]
 8020716:	6878      	ldr	r0, [r7, #4]
 8020718:	4798      	blx	r3
 802071a:	4603      	mov	r3, r0
 802071c:	f083 0301 	eor.w	r3, r3, #1
 8020720:	b2db      	uxtb	r3, r3
 8020722:	2b00      	cmp	r3, #0
 8020724:	d001      	beq.n	802072a <pb_readbyte+0x32>
        PB_RETURN_ERROR(stream, "io error");
 8020726:	2300      	movs	r3, #0
 8020728:	e005      	b.n	8020736 <pb_readbyte+0x3e>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 802072a:	687b      	ldr	r3, [r7, #4]
 802072c:	689b      	ldr	r3, [r3, #8]
 802072e:	1e5a      	subs	r2, r3, #1
 8020730:	687b      	ldr	r3, [r7, #4]
 8020732:	609a      	str	r2, [r3, #8]
    
    return true;    
 8020734:	2301      	movs	r3, #1
}
 8020736:	4618      	mov	r0, r3
 8020738:	3708      	adds	r7, #8
 802073a:	46bd      	mov	sp, r7
 802073c:	bd80      	pop	{r7, pc}
	...

08020740 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t bufsize)
{
 8020740:	b490      	push	{r4, r7}
 8020742:	b088      	sub	sp, #32
 8020744:	af00      	add	r7, sp, #0
 8020746:	60f8      	str	r0, [r7, #12]
 8020748:	60b9      	str	r1, [r7, #8]
 802074a:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 802074c:	4b0a      	ldr	r3, [pc, #40]	@ (8020778 <pb_istream_from_buffer+0x38>)
 802074e:	617b      	str	r3, [r7, #20]
#endif
    state.c_state = buf;
 8020750:	68bb      	ldr	r3, [r7, #8]
 8020752:	613b      	str	r3, [r7, #16]
    stream.state = state.state;
 8020754:	693b      	ldr	r3, [r7, #16]
 8020756:	61bb      	str	r3, [r7, #24]
    stream.bytes_left = bufsize;
 8020758:	687b      	ldr	r3, [r7, #4]
 802075a:	61fb      	str	r3, [r7, #28]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
#endif
    return stream;
 802075c:	68fb      	ldr	r3, [r7, #12]
 802075e:	461c      	mov	r4, r3
 8020760:	f107 0314 	add.w	r3, r7, #20
 8020764:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8020768:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 802076c:	68f8      	ldr	r0, [r7, #12]
 802076e:	3720      	adds	r7, #32
 8020770:	46bd      	mov	sp, r7
 8020772:	bc90      	pop	{r4, r7}
 8020774:	4770      	bx	lr
 8020776:	bf00      	nop
 8020778:	08020603 	.word	0x08020603

0802077c <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 802077c:	b580      	push	{r7, lr}
 802077e:	b088      	sub	sp, #32
 8020780:	af00      	add	r7, sp, #0
 8020782:	60f8      	str	r0, [r7, #12]
 8020784:	60b9      	str	r1, [r7, #8]
 8020786:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8020788:	f107 0316 	add.w	r3, r7, #22
 802078c:	4619      	mov	r1, r3
 802078e:	68f8      	ldr	r0, [r7, #12]
 8020790:	f7ff ffb2 	bl	80206f8 <pb_readbyte>
 8020794:	4603      	mov	r3, r0
 8020796:	f083 0301 	eor.w	r3, r3, #1
 802079a:	b2db      	uxtb	r3, r3
 802079c:	2b00      	cmp	r3, #0
 802079e:	d00b      	beq.n	80207b8 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 80207a0:	68fb      	ldr	r3, [r7, #12]
 80207a2:	689b      	ldr	r3, [r3, #8]
 80207a4:	2b00      	cmp	r3, #0
 80207a6:	d105      	bne.n	80207b4 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 80207a8:	687b      	ldr	r3, [r7, #4]
 80207aa:	2b00      	cmp	r3, #0
 80207ac:	d002      	beq.n	80207b4 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 80207ae:	687b      	ldr	r3, [r7, #4]
 80207b0:	2201      	movs	r2, #1
 80207b2:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 80207b4:	2300      	movs	r3, #0
 80207b6:	e050      	b.n	802085a <pb_decode_varint32_eof+0xde>
    }
    
    if ((byte & 0x80) == 0)
 80207b8:	7dbb      	ldrb	r3, [r7, #22]
 80207ba:	b25b      	sxtb	r3, r3
 80207bc:	2b00      	cmp	r3, #0
 80207be:	db02      	blt.n	80207c6 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 80207c0:	7dbb      	ldrb	r3, [r7, #22]
 80207c2:	61fb      	str	r3, [r7, #28]
 80207c4:	e045      	b.n	8020852 <pb_decode_varint32_eof+0xd6>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 80207c6:	2307      	movs	r3, #7
 80207c8:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 80207ca:	7dbb      	ldrb	r3, [r7, #22]
 80207cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80207d0:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 80207d2:	f107 0316 	add.w	r3, r7, #22
 80207d6:	4619      	mov	r1, r3
 80207d8:	68f8      	ldr	r0, [r7, #12]
 80207da:	f7ff ff8d 	bl	80206f8 <pb_readbyte>
 80207de:	4603      	mov	r3, r0
 80207e0:	f083 0301 	eor.w	r3, r3, #1
 80207e4:	b2db      	uxtb	r3, r3
 80207e6:	2b00      	cmp	r3, #0
 80207e8:	d001      	beq.n	80207ee <pb_decode_varint32_eof+0x72>
                return false;
 80207ea:	2300      	movs	r3, #0
 80207ec:	e035      	b.n	802085a <pb_decode_varint32_eof+0xde>
            
            if (bitpos >= 32)
 80207ee:	69bb      	ldr	r3, [r7, #24]
 80207f0:	2b1f      	cmp	r3, #31
 80207f2:	d914      	bls.n	802081e <pb_decode_varint32_eof+0xa2>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 80207f4:	69bb      	ldr	r3, [r7, #24]
 80207f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80207f8:	d801      	bhi.n	80207fe <pb_decode_varint32_eof+0x82>
 80207fa:	23ff      	movs	r3, #255	@ 0xff
 80207fc:	e000      	b.n	8020800 <pb_decode_varint32_eof+0x84>
 80207fe:	2301      	movs	r3, #1
 8020800:	75fb      	strb	r3, [r7, #23]
                
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 8020802:	7dbb      	ldrb	r3, [r7, #22]
 8020804:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8020808:	2b00      	cmp	r3, #0
 802080a:	d011      	beq.n	8020830 <pb_decode_varint32_eof+0xb4>
 802080c:	69fb      	ldr	r3, [r7, #28]
 802080e:	2b00      	cmp	r3, #0
 8020810:	da03      	bge.n	802081a <pb_decode_varint32_eof+0x9e>
 8020812:	7dbb      	ldrb	r3, [r7, #22]
 8020814:	7dfa      	ldrb	r2, [r7, #23]
 8020816:	429a      	cmp	r2, r3
 8020818:	d00a      	beq.n	8020830 <pb_decode_varint32_eof+0xb4>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 802081a:	2300      	movs	r3, #0
 802081c:	e01d      	b.n	802085a <pb_decode_varint32_eof+0xde>
                }
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 802081e:	7dbb      	ldrb	r3, [r7, #22]
 8020820:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8020824:	69bb      	ldr	r3, [r7, #24]
 8020826:	fa02 f303 	lsl.w	r3, r2, r3
 802082a:	69fa      	ldr	r2, [r7, #28]
 802082c:	4313      	orrs	r3, r2
 802082e:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8020830:	69bb      	ldr	r3, [r7, #24]
 8020832:	3307      	adds	r3, #7
 8020834:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8020836:	7dbb      	ldrb	r3, [r7, #22]
 8020838:	b25b      	sxtb	r3, r3
 802083a:	2b00      	cmp	r3, #0
 802083c:	dbc9      	blt.n	80207d2 <pb_decode_varint32_eof+0x56>
        
        if (bitpos == 35 && (byte & 0x70) != 0)
 802083e:	69bb      	ldr	r3, [r7, #24]
 8020840:	2b23      	cmp	r3, #35	@ 0x23
 8020842:	d106      	bne.n	8020852 <pb_decode_varint32_eof+0xd6>
 8020844:	7dbb      	ldrb	r3, [r7, #22]
 8020846:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 802084a:	2b00      	cmp	r3, #0
 802084c:	d001      	beq.n	8020852 <pb_decode_varint32_eof+0xd6>
        {
            /* The last byte was at bitpos=28, so only bottom 4 bits fit. */
            PB_RETURN_ERROR(stream, "varint overflow");
 802084e:	2300      	movs	r3, #0
 8020850:	e003      	b.n	802085a <pb_decode_varint32_eof+0xde>
        }
   }
   
   *dest = result;
 8020852:	68bb      	ldr	r3, [r7, #8]
 8020854:	69fa      	ldr	r2, [r7, #28]
 8020856:	601a      	str	r2, [r3, #0]
   return true;
 8020858:	2301      	movs	r3, #1
}
 802085a:	4618      	mov	r0, r3
 802085c:	3720      	adds	r7, #32
 802085e:	46bd      	mov	sp, r7
 8020860:	bd80      	pop	{r7, pc}

08020862 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8020862:	b580      	push	{r7, lr}
 8020864:	b082      	sub	sp, #8
 8020866:	af00      	add	r7, sp, #0
 8020868:	6078      	str	r0, [r7, #4]
 802086a:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 802086c:	2200      	movs	r2, #0
 802086e:	6839      	ldr	r1, [r7, #0]
 8020870:	6878      	ldr	r0, [r7, #4]
 8020872:	f7ff ff83 	bl	802077c <pb_decode_varint32_eof>
 8020876:	4603      	mov	r3, r0
}
 8020878:	4618      	mov	r0, r3
 802087a:	3708      	adds	r7, #8
 802087c:	46bd      	mov	sp, r7
 802087e:	bd80      	pop	{r7, pc}

08020880 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8020880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020884:	b08a      	sub	sp, #40	@ 0x28
 8020886:	af00      	add	r7, sp, #0
 8020888:	60f8      	str	r0, [r7, #12]
 802088a:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 802088c:	2300      	movs	r3, #0
 802088e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t result = 0;
 8020890:	f04f 0200 	mov.w	r2, #0
 8020894:	f04f 0300 	mov.w	r3, #0
 8020898:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (bitpos >= 64)
 802089c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802089e:	2b3f      	cmp	r3, #63	@ 0x3f
 80208a0:	d901      	bls.n	80208a6 <pb_decode_varint+0x26>
            PB_RETURN_ERROR(stream, "varint overflow");
 80208a2:	2300      	movs	r3, #0
 80208a4:	e03b      	b.n	802091e <pb_decode_varint+0x9e>
        
        if (!pb_readbyte(stream, &byte))
 80208a6:	f107 0317 	add.w	r3, r7, #23
 80208aa:	4619      	mov	r1, r3
 80208ac:	68f8      	ldr	r0, [r7, #12]
 80208ae:	f7ff ff23 	bl	80206f8 <pb_readbyte>
 80208b2:	4603      	mov	r3, r0
 80208b4:	f083 0301 	eor.w	r3, r3, #1
 80208b8:	b2db      	uxtb	r3, r3
 80208ba:	2b00      	cmp	r3, #0
 80208bc:	d001      	beq.n	80208c2 <pb_decode_varint+0x42>
            return false;
 80208be:	2300      	movs	r3, #0
 80208c0:	e02d      	b.n	802091e <pb_decode_varint+0x9e>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 80208c2:	7dfb      	ldrb	r3, [r7, #23]
 80208c4:	b2db      	uxtb	r3, r3
 80208c6:	2200      	movs	r2, #0
 80208c8:	603b      	str	r3, [r7, #0]
 80208ca:	607a      	str	r2, [r7, #4]
 80208cc:	683b      	ldr	r3, [r7, #0]
 80208ce:	f003 087f 	and.w	r8, r3, #127	@ 0x7f
 80208d2:	f04f 0900 	mov.w	r9, #0
 80208d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80208d8:	f1a3 0120 	sub.w	r1, r3, #32
 80208dc:	f1c3 0220 	rsb	r2, r3, #32
 80208e0:	fa09 f503 	lsl.w	r5, r9, r3
 80208e4:	fa08 f101 	lsl.w	r1, r8, r1
 80208e8:	430d      	orrs	r5, r1
 80208ea:	fa28 f202 	lsr.w	r2, r8, r2
 80208ee:	4315      	orrs	r5, r2
 80208f0:	fa08 f403 	lsl.w	r4, r8, r3
 80208f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80208f8:	ea42 0a04 	orr.w	sl, r2, r4
 80208fc:	ea43 0b05 	orr.w	fp, r3, r5
 8020900:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 8020904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020906:	3307      	adds	r3, #7
 8020908:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (byte & 0x80);
 802090a:	7dfb      	ldrb	r3, [r7, #23]
 802090c:	b25b      	sxtb	r3, r3
 802090e:	2b00      	cmp	r3, #0
 8020910:	dbc4      	blt.n	802089c <pb_decode_varint+0x1c>
    
    *dest = result;
 8020912:	68b9      	ldr	r1, [r7, #8]
 8020914:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8020918:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 802091c:	2301      	movs	r3, #1
}
 802091e:	4618      	mov	r0, r3
 8020920:	3728      	adds	r7, #40	@ 0x28
 8020922:	46bd      	mov	sp, r7
 8020924:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08020928 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8020928:	b580      	push	{r7, lr}
 802092a:	b084      	sub	sp, #16
 802092c:	af00      	add	r7, sp, #0
 802092e:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8020930:	f107 030f 	add.w	r3, r7, #15
 8020934:	2201      	movs	r2, #1
 8020936:	4619      	mov	r1, r3
 8020938:	6878      	ldr	r0, [r7, #4]
 802093a:	f7ff fe8d 	bl	8020658 <pb_read>
 802093e:	4603      	mov	r3, r0
 8020940:	f083 0301 	eor.w	r3, r3, #1
 8020944:	b2db      	uxtb	r3, r3
 8020946:	2b00      	cmp	r3, #0
 8020948:	d001      	beq.n	802094e <pb_skip_varint+0x26>
            return false;
 802094a:	2300      	movs	r3, #0
 802094c:	e004      	b.n	8020958 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 802094e:	7bfb      	ldrb	r3, [r7, #15]
 8020950:	b25b      	sxtb	r3, r3
 8020952:	2b00      	cmp	r3, #0
 8020954:	dbec      	blt.n	8020930 <pb_skip_varint+0x8>
    return true;
 8020956:	2301      	movs	r3, #1
}
 8020958:	4618      	mov	r0, r3
 802095a:	3710      	adds	r7, #16
 802095c:	46bd      	mov	sp, r7
 802095e:	bd80      	pop	{r7, pc}

08020960 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8020960:	b580      	push	{r7, lr}
 8020962:	b084      	sub	sp, #16
 8020964:	af00      	add	r7, sp, #0
 8020966:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 8020968:	f107 030c 	add.w	r3, r7, #12
 802096c:	4619      	mov	r1, r3
 802096e:	6878      	ldr	r0, [r7, #4]
 8020970:	f7ff ff77 	bl	8020862 <pb_decode_varint32>
 8020974:	4603      	mov	r3, r0
 8020976:	f083 0301 	eor.w	r3, r3, #1
 802097a:	b2db      	uxtb	r3, r3
 802097c:	2b00      	cmp	r3, #0
 802097e:	d001      	beq.n	8020984 <pb_skip_string+0x24>
        return false;
 8020980:	2300      	movs	r3, #0
 8020982:	e006      	b.n	8020992 <pb_skip_string+0x32>
    
    return pb_read(stream, NULL, length);
 8020984:	68fb      	ldr	r3, [r7, #12]
 8020986:	461a      	mov	r2, r3
 8020988:	2100      	movs	r1, #0
 802098a:	6878      	ldr	r0, [r7, #4]
 802098c:	f7ff fe64 	bl	8020658 <pb_read>
 8020990:	4603      	mov	r3, r0
}
 8020992:	4618      	mov	r0, r3
 8020994:	3710      	adds	r7, #16
 8020996:	46bd      	mov	sp, r7
 8020998:	bd80      	pop	{r7, pc}

0802099a <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 802099a:	b580      	push	{r7, lr}
 802099c:	b086      	sub	sp, #24
 802099e:	af00      	add	r7, sp, #0
 80209a0:	60f8      	str	r0, [r7, #12]
 80209a2:	60b9      	str	r1, [r7, #8]
 80209a4:	607a      	str	r2, [r7, #4]
 80209a6:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 80209a8:	683b      	ldr	r3, [r7, #0]
 80209aa:	2200      	movs	r2, #0
 80209ac:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 80209ae:	68bb      	ldr	r3, [r7, #8]
 80209b0:	2200      	movs	r2, #0
 80209b2:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 80209b4:	687b      	ldr	r3, [r7, #4]
 80209b6:	2200      	movs	r2, #0
 80209b8:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 80209ba:	f107 0314 	add.w	r3, r7, #20
 80209be:	683a      	ldr	r2, [r7, #0]
 80209c0:	4619      	mov	r1, r3
 80209c2:	68f8      	ldr	r0, [r7, #12]
 80209c4:	f7ff feda 	bl	802077c <pb_decode_varint32_eof>
 80209c8:	4603      	mov	r3, r0
 80209ca:	f083 0301 	eor.w	r3, r3, #1
 80209ce:	b2db      	uxtb	r3, r3
 80209d0:	2b00      	cmp	r3, #0
 80209d2:	d001      	beq.n	80209d8 <pb_decode_tag+0x3e>
    {
        return false;
 80209d4:	2300      	movs	r3, #0
 80209d6:	e013      	b.n	8020a00 <pb_decode_tag+0x66>
    }
    
    if (temp == 0)
 80209d8:	697b      	ldr	r3, [r7, #20]
 80209da:	2b00      	cmp	r3, #0
 80209dc:	d104      	bne.n	80209e8 <pb_decode_tag+0x4e>
    {
        *eof = true; /* Special feature: allow 0-terminated messages. */
 80209de:	683b      	ldr	r3, [r7, #0]
 80209e0:	2201      	movs	r2, #1
 80209e2:	701a      	strb	r2, [r3, #0]
        return false;
 80209e4:	2300      	movs	r3, #0
 80209e6:	e00b      	b.n	8020a00 <pb_decode_tag+0x66>
    }
    
    *tag = temp >> 3;
 80209e8:	697b      	ldr	r3, [r7, #20]
 80209ea:	08da      	lsrs	r2, r3, #3
 80209ec:	687b      	ldr	r3, [r7, #4]
 80209ee:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 80209f0:	697b      	ldr	r3, [r7, #20]
 80209f2:	b2db      	uxtb	r3, r3
 80209f4:	f003 0307 	and.w	r3, r3, #7
 80209f8:	b2da      	uxtb	r2, r3
 80209fa:	68bb      	ldr	r3, [r7, #8]
 80209fc:	701a      	strb	r2, [r3, #0]
    return true;
 80209fe:	2301      	movs	r3, #1
}
 8020a00:	4618      	mov	r0, r3
 8020a02:	3718      	adds	r7, #24
 8020a04:	46bd      	mov	sp, r7
 8020a06:	bd80      	pop	{r7, pc}

08020a08 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 8020a08:	b580      	push	{r7, lr}
 8020a0a:	b082      	sub	sp, #8
 8020a0c:	af00      	add	r7, sp, #0
 8020a0e:	6078      	str	r0, [r7, #4]
 8020a10:	460b      	mov	r3, r1
 8020a12:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 8020a14:	78fb      	ldrb	r3, [r7, #3]
 8020a16:	2b05      	cmp	r3, #5
 8020a18:	d826      	bhi.n	8020a68 <pb_skip_field+0x60>
 8020a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8020a20 <pb_skip_field+0x18>)
 8020a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020a20:	08020a39 	.word	0x08020a39
 8020a24:	08020a43 	.word	0x08020a43
 8020a28:	08020a51 	.word	0x08020a51
 8020a2c:	08020a69 	.word	0x08020a69
 8020a30:	08020a69 	.word	0x08020a69
 8020a34:	08020a5b 	.word	0x08020a5b
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 8020a38:	6878      	ldr	r0, [r7, #4]
 8020a3a:	f7ff ff75 	bl	8020928 <pb_skip_varint>
 8020a3e:	4603      	mov	r3, r0
 8020a40:	e013      	b.n	8020a6a <pb_skip_field+0x62>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8020a42:	2208      	movs	r2, #8
 8020a44:	2100      	movs	r1, #0
 8020a46:	6878      	ldr	r0, [r7, #4]
 8020a48:	f7ff fe06 	bl	8020658 <pb_read>
 8020a4c:	4603      	mov	r3, r0
 8020a4e:	e00c      	b.n	8020a6a <pb_skip_field+0x62>
        case PB_WT_STRING: return pb_skip_string(stream);
 8020a50:	6878      	ldr	r0, [r7, #4]
 8020a52:	f7ff ff85 	bl	8020960 <pb_skip_string>
 8020a56:	4603      	mov	r3, r0
 8020a58:	e007      	b.n	8020a6a <pb_skip_field+0x62>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8020a5a:	2204      	movs	r2, #4
 8020a5c:	2100      	movs	r1, #0
 8020a5e:	6878      	ldr	r0, [r7, #4]
 8020a60:	f7ff fdfa 	bl	8020658 <pb_read>
 8020a64:	4603      	mov	r3, r0
 8020a66:	e000      	b.n	8020a6a <pb_skip_field+0x62>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8020a68:	2300      	movs	r3, #0
    }
}
 8020a6a:	4618      	mov	r0, r3
 8020a6c:	3708      	adds	r7, #8
 8020a6e:	46bd      	mov	sp, r7
 8020a70:	bd80      	pop	{r7, pc}
 8020a72:	bf00      	nop

08020a74 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8020a74:	b580      	push	{r7, lr}
 8020a76:	b086      	sub	sp, #24
 8020a78:	af00      	add	r7, sp, #0
 8020a7a:	60f8      	str	r0, [r7, #12]
 8020a7c:	607a      	str	r2, [r7, #4]
 8020a7e:	603b      	str	r3, [r7, #0]
 8020a80:	460b      	mov	r3, r1
 8020a82:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8020a84:	683b      	ldr	r3, [r7, #0]
 8020a86:	681b      	ldr	r3, [r3, #0]
 8020a88:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 8020a8a:	7afb      	ldrb	r3, [r7, #11]
 8020a8c:	2b05      	cmp	r3, #5
 8020a8e:	d035      	beq.n	8020afc <read_raw_value+0x88>
 8020a90:	2b05      	cmp	r3, #5
 8020a92:	dc3d      	bgt.n	8020b10 <read_raw_value+0x9c>
 8020a94:	2b00      	cmp	r3, #0
 8020a96:	d002      	beq.n	8020a9e <read_raw_value+0x2a>
 8020a98:	2b01      	cmp	r3, #1
 8020a9a:	d025      	beq.n	8020ae8 <read_raw_value+0x74>
 8020a9c:	e038      	b.n	8020b10 <read_raw_value+0x9c>
    {
        case PB_WT_VARINT:
            *size = 0;
 8020a9e:	683b      	ldr	r3, [r7, #0]
 8020aa0:	2200      	movs	r2, #0
 8020aa2:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8020aa4:	683b      	ldr	r3, [r7, #0]
 8020aa6:	681b      	ldr	r3, [r3, #0]
 8020aa8:	1c5a      	adds	r2, r3, #1
 8020aaa:	683b      	ldr	r3, [r7, #0]
 8020aac:	601a      	str	r2, [r3, #0]
                if (*size > max_size) return false;
 8020aae:	683b      	ldr	r3, [r7, #0]
 8020ab0:	681b      	ldr	r3, [r3, #0]
 8020ab2:	697a      	ldr	r2, [r7, #20]
 8020ab4:	429a      	cmp	r2, r3
 8020ab6:	d201      	bcs.n	8020abc <read_raw_value+0x48>
 8020ab8:	2300      	movs	r3, #0
 8020aba:	e02a      	b.n	8020b12 <read_raw_value+0x9e>
                if (!pb_read(stream, buf, 1)) return false;
 8020abc:	2201      	movs	r2, #1
 8020abe:	6879      	ldr	r1, [r7, #4]
 8020ac0:	68f8      	ldr	r0, [r7, #12]
 8020ac2:	f7ff fdc9 	bl	8020658 <pb_read>
 8020ac6:	4603      	mov	r3, r0
 8020ac8:	f083 0301 	eor.w	r3, r3, #1
 8020acc:	b2db      	uxtb	r3, r3
 8020ace:	2b00      	cmp	r3, #0
 8020ad0:	d001      	beq.n	8020ad6 <read_raw_value+0x62>
 8020ad2:	2300      	movs	r3, #0
 8020ad4:	e01d      	b.n	8020b12 <read_raw_value+0x9e>
            } while (*buf++ & 0x80);
 8020ad6:	687b      	ldr	r3, [r7, #4]
 8020ad8:	1c5a      	adds	r2, r3, #1
 8020ada:	607a      	str	r2, [r7, #4]
 8020adc:	781b      	ldrb	r3, [r3, #0]
 8020ade:	b25b      	sxtb	r3, r3
 8020ae0:	2b00      	cmp	r3, #0
 8020ae2:	dbdf      	blt.n	8020aa4 <read_raw_value+0x30>
            return true;
 8020ae4:	2301      	movs	r3, #1
 8020ae6:	e014      	b.n	8020b12 <read_raw_value+0x9e>
            
        case PB_WT_64BIT:
            *size = 8;
 8020ae8:	683b      	ldr	r3, [r7, #0]
 8020aea:	2208      	movs	r2, #8
 8020aec:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 8020aee:	2208      	movs	r2, #8
 8020af0:	6879      	ldr	r1, [r7, #4]
 8020af2:	68f8      	ldr	r0, [r7, #12]
 8020af4:	f7ff fdb0 	bl	8020658 <pb_read>
 8020af8:	4603      	mov	r3, r0
 8020afa:	e00a      	b.n	8020b12 <read_raw_value+0x9e>
        
        case PB_WT_32BIT:
            *size = 4;
 8020afc:	683b      	ldr	r3, [r7, #0]
 8020afe:	2204      	movs	r2, #4
 8020b00:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 8020b02:	2204      	movs	r2, #4
 8020b04:	6879      	ldr	r1, [r7, #4]
 8020b06:	68f8      	ldr	r0, [r7, #12]
 8020b08:	f7ff fda6 	bl	8020658 <pb_read>
 8020b0c:	4603      	mov	r3, r0
 8020b0e:	e000      	b.n	8020b12 <read_raw_value+0x9e>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8020b10:	2300      	movs	r3, #0
    }
}
 8020b12:	4618      	mov	r0, r3
 8020b14:	3718      	adds	r7, #24
 8020b16:	46bd      	mov	sp, r7
 8020b18:	bd80      	pop	{r7, pc}

08020b1a <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8020b1a:	b580      	push	{r7, lr}
 8020b1c:	b084      	sub	sp, #16
 8020b1e:	af00      	add	r7, sp, #0
 8020b20:	6078      	str	r0, [r7, #4]
 8020b22:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 8020b24:	f107 030c 	add.w	r3, r7, #12
 8020b28:	4619      	mov	r1, r3
 8020b2a:	6878      	ldr	r0, [r7, #4]
 8020b2c:	f7ff fe99 	bl	8020862 <pb_decode_varint32>
 8020b30:	4603      	mov	r3, r0
 8020b32:	f083 0301 	eor.w	r3, r3, #1
 8020b36:	b2db      	uxtb	r3, r3
 8020b38:	2b00      	cmp	r3, #0
 8020b3a:	d001      	beq.n	8020b40 <pb_make_string_substream+0x26>
        return false;
 8020b3c:	2300      	movs	r3, #0
 8020b3e:	e015      	b.n	8020b6c <pb_make_string_substream+0x52>
    
    *substream = *stream;
 8020b40:	683b      	ldr	r3, [r7, #0]
 8020b42:	687a      	ldr	r2, [r7, #4]
 8020b44:	ca07      	ldmia	r2, {r0, r1, r2}
 8020b46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (substream->bytes_left < size)
 8020b4a:	683b      	ldr	r3, [r7, #0]
 8020b4c:	689a      	ldr	r2, [r3, #8]
 8020b4e:	68fb      	ldr	r3, [r7, #12]
 8020b50:	429a      	cmp	r2, r3
 8020b52:	d201      	bcs.n	8020b58 <pb_make_string_substream+0x3e>
        PB_RETURN_ERROR(stream, "parent stream too short");
 8020b54:	2300      	movs	r3, #0
 8020b56:	e009      	b.n	8020b6c <pb_make_string_substream+0x52>
    
    substream->bytes_left = size;
 8020b58:	68fa      	ldr	r2, [r7, #12]
 8020b5a:	683b      	ldr	r3, [r7, #0]
 8020b5c:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= size;
 8020b5e:	687b      	ldr	r3, [r7, #4]
 8020b60:	689a      	ldr	r2, [r3, #8]
 8020b62:	68fb      	ldr	r3, [r7, #12]
 8020b64:	1ad2      	subs	r2, r2, r3
 8020b66:	687b      	ldr	r3, [r7, #4]
 8020b68:	609a      	str	r2, [r3, #8]
    return true;
 8020b6a:	2301      	movs	r3, #1
}
 8020b6c:	4618      	mov	r0, r3
 8020b6e:	3710      	adds	r7, #16
 8020b70:	46bd      	mov	sp, r7
 8020b72:	bd80      	pop	{r7, pc}

08020b74 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8020b74:	b580      	push	{r7, lr}
 8020b76:	b082      	sub	sp, #8
 8020b78:	af00      	add	r7, sp, #0
 8020b7a:	6078      	str	r0, [r7, #4]
 8020b7c:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 8020b7e:	683b      	ldr	r3, [r7, #0]
 8020b80:	689b      	ldr	r3, [r3, #8]
 8020b82:	2b00      	cmp	r3, #0
 8020b84:	d00e      	beq.n	8020ba4 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 8020b86:	683b      	ldr	r3, [r7, #0]
 8020b88:	689b      	ldr	r3, [r3, #8]
 8020b8a:	461a      	mov	r2, r3
 8020b8c:	2100      	movs	r1, #0
 8020b8e:	6838      	ldr	r0, [r7, #0]
 8020b90:	f7ff fd62 	bl	8020658 <pb_read>
 8020b94:	4603      	mov	r3, r0
 8020b96:	f083 0301 	eor.w	r3, r3, #1
 8020b9a:	b2db      	uxtb	r3, r3
 8020b9c:	2b00      	cmp	r3, #0
 8020b9e:	d001      	beq.n	8020ba4 <pb_close_string_substream+0x30>
            return false;
 8020ba0:	2300      	movs	r3, #0
 8020ba2:	e004      	b.n	8020bae <pb_close_string_substream+0x3a>
    }

    stream->state = substream->state;
 8020ba4:	683b      	ldr	r3, [r7, #0]
 8020ba6:	685a      	ldr	r2, [r3, #4]
 8020ba8:	687b      	ldr	r3, [r7, #4]
 8020baa:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
#endif
    return true;
 8020bac:	2301      	movs	r3, #1
}
 8020bae:	4618      	mov	r0, r3
 8020bb0:	3708      	adds	r7, #8
 8020bb2:	46bd      	mov	sp, r7
 8020bb4:	bd80      	pop	{r7, pc}
	...

08020bb8 <decode_static_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 8020bb8:	b580      	push	{r7, lr}
 8020bba:	b08e      	sub	sp, #56	@ 0x38
 8020bbc:	af00      	add	r7, sp, #0
 8020bbe:	60f8      	str	r0, [r7, #12]
 8020bc0:	460b      	mov	r3, r1
 8020bc2:	607a      	str	r2, [r7, #4]
 8020bc4:	72fb      	strb	r3, [r7, #11]
    pb_type_t type;
    pb_decoder_t func;
    
    type = iter->pos->type;
 8020bc6:	687b      	ldr	r3, [r7, #4]
 8020bc8:	685b      	ldr	r3, [r3, #4]
 8020bca:	789b      	ldrb	r3, [r3, #2]
 8020bcc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    func = PB_DECODERS[PB_LTYPE(type)];
 8020bd0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8020bd4:	f003 030f 	and.w	r3, r3, #15
 8020bd8:	4a71      	ldr	r2, [pc, #452]	@ (8020da0 <decode_static_field+0x1e8>)
 8020bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020bde:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (PB_HTYPE(type))
 8020be0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8020be4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8020be8:	2b30      	cmp	r3, #48	@ 0x30
 8020bea:	f000 80ad 	beq.w	8020d48 <decode_static_field+0x190>
 8020bee:	2b30      	cmp	r3, #48	@ 0x30
 8020bf0:	f300 80d1 	bgt.w	8020d96 <decode_static_field+0x1de>
 8020bf4:	2b20      	cmp	r3, #32
 8020bf6:	d023      	beq.n	8020c40 <decode_static_field+0x88>
 8020bf8:	2b20      	cmp	r3, #32
 8020bfa:	f300 80cc 	bgt.w	8020d96 <decode_static_field+0x1de>
 8020bfe:	2b00      	cmp	r3, #0
 8020c00:	d002      	beq.n	8020c08 <decode_static_field+0x50>
 8020c02:	2b10      	cmp	r3, #16
 8020c04:	d009      	beq.n	8020c1a <decode_static_field+0x62>
 8020c06:	e0c6      	b.n	8020d96 <decode_static_field+0x1de>
    {
        case PB_HTYPE_REQUIRED:
            return func(stream, iter->pos, iter->pData);
 8020c08:	687b      	ldr	r3, [r7, #4]
 8020c0a:	6859      	ldr	r1, [r3, #4]
 8020c0c:	687b      	ldr	r3, [r7, #4]
 8020c0e:	691a      	ldr	r2, [r3, #16]
 8020c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020c12:	68f8      	ldr	r0, [r7, #12]
 8020c14:	4798      	blx	r3
 8020c16:	4603      	mov	r3, r0
 8020c18:	e0be      	b.n	8020d98 <decode_static_field+0x1e0>
            
        case PB_HTYPE_OPTIONAL:
            if (iter->pSize != iter->pData)
 8020c1a:	687b      	ldr	r3, [r7, #4]
 8020c1c:	695a      	ldr	r2, [r3, #20]
 8020c1e:	687b      	ldr	r3, [r7, #4]
 8020c20:	691b      	ldr	r3, [r3, #16]
 8020c22:	429a      	cmp	r2, r3
 8020c24:	d003      	beq.n	8020c2e <decode_static_field+0x76>
                *(bool*)iter->pSize = true;
 8020c26:	687b      	ldr	r3, [r7, #4]
 8020c28:	695b      	ldr	r3, [r3, #20]
 8020c2a:	2201      	movs	r2, #1
 8020c2c:	701a      	strb	r2, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 8020c2e:	687b      	ldr	r3, [r7, #4]
 8020c30:	6859      	ldr	r1, [r3, #4]
 8020c32:	687b      	ldr	r3, [r7, #4]
 8020c34:	691a      	ldr	r2, [r3, #16]
 8020c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020c38:	68f8      	ldr	r0, [r7, #12]
 8020c3a:	4798      	blx	r3
 8020c3c:	4603      	mov	r3, r0
 8020c3e:	e0ab      	b.n	8020d98 <decode_static_field+0x1e0>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 8020c40:	7afb      	ldrb	r3, [r7, #11]
 8020c42:	2b02      	cmp	r3, #2
 8020c44:	d15c      	bne.n	8020d00 <decode_static_field+0x148>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8020c46:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8020c4a:	f003 030f 	and.w	r3, r3, #15
 8020c4e:	2b04      	cmp	r3, #4
 8020c50:	dc56      	bgt.n	8020d00 <decode_static_field+0x148>
            {
                /* Packed array */
                bool status = true;
 8020c52:	2301      	movs	r3, #1
 8020c54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                pb_size_t *size = (pb_size_t*)iter->pSize;
 8020c58:	687b      	ldr	r3, [r7, #4]
 8020c5a:	695b      	ldr	r3, [r3, #20]
 8020c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

                pb_istream_t substream;
                if (!pb_make_string_substream(stream, &substream))
 8020c5e:	f107 0314 	add.w	r3, r7, #20
 8020c62:	4619      	mov	r1, r3
 8020c64:	68f8      	ldr	r0, [r7, #12]
 8020c66:	f7ff ff58 	bl	8020b1a <pb_make_string_substream>
 8020c6a:	4603      	mov	r3, r0
 8020c6c:	f083 0301 	eor.w	r3, r3, #1
 8020c70:	b2db      	uxtb	r3, r3
 8020c72:	2b00      	cmp	r3, #0
 8020c74:	d024      	beq.n	8020cc0 <decode_static_field+0x108>
                    return false;
 8020c76:	2300      	movs	r3, #0
 8020c78:	e08e      	b.n	8020d98 <decode_static_field+0x1e0>

                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
                {
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8020c7a:	687b      	ldr	r3, [r7, #4]
 8020c7c:	691b      	ldr	r3, [r3, #16]
 8020c7e:	687a      	ldr	r2, [r7, #4]
 8020c80:	6852      	ldr	r2, [r2, #4]
 8020c82:	8912      	ldrh	r2, [r2, #8]
 8020c84:	4611      	mov	r1, r2
 8020c86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8020c88:	8812      	ldrh	r2, [r2, #0]
 8020c8a:	fb01 f202 	mul.w	r2, r1, r2
 8020c8e:	4413      	add	r3, r2
 8020c90:	62bb      	str	r3, [r7, #40]	@ 0x28
                    if (!func(&substream, iter->pos, pItem))
 8020c92:	687b      	ldr	r3, [r7, #4]
 8020c94:	6859      	ldr	r1, [r3, #4]
 8020c96:	f107 0014 	add.w	r0, r7, #20
 8020c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020c9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8020c9e:	4798      	blx	r3
 8020ca0:	4603      	mov	r3, r0
 8020ca2:	f083 0301 	eor.w	r3, r3, #1
 8020ca6:	b2db      	uxtb	r3, r3
 8020ca8:	2b00      	cmp	r3, #0
 8020caa:	d003      	beq.n	8020cb4 <decode_static_field+0xfc>
                    {
                        status = false;
 8020cac:	2300      	movs	r3, #0
 8020cae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                        break;
 8020cb2:	e00f      	b.n	8020cd4 <decode_static_field+0x11c>
                    }
                    (*size)++;
 8020cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020cb6:	881b      	ldrh	r3, [r3, #0]
 8020cb8:	3301      	adds	r3, #1
 8020cba:	b29a      	uxth	r2, r3
 8020cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020cbe:	801a      	strh	r2, [r3, #0]
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 8020cc0:	69fb      	ldr	r3, [r7, #28]
 8020cc2:	2b00      	cmp	r3, #0
 8020cc4:	d006      	beq.n	8020cd4 <decode_static_field+0x11c>
 8020cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020cc8:	881a      	ldrh	r2, [r3, #0]
 8020cca:	687b      	ldr	r3, [r7, #4]
 8020ccc:	685b      	ldr	r3, [r3, #4]
 8020cce:	895b      	ldrh	r3, [r3, #10]
 8020cd0:	429a      	cmp	r2, r3
 8020cd2:	d3d2      	bcc.n	8020c7a <decode_static_field+0xc2>
                }

                if (substream.bytes_left != 0)
 8020cd4:	69fb      	ldr	r3, [r7, #28]
 8020cd6:	2b00      	cmp	r3, #0
 8020cd8:	d001      	beq.n	8020cde <decode_static_field+0x126>
                    PB_RETURN_ERROR(stream, "array overflow");
 8020cda:	2300      	movs	r3, #0
 8020cdc:	e05c      	b.n	8020d98 <decode_static_field+0x1e0>
                if (!pb_close_string_substream(stream, &substream))
 8020cde:	f107 0314 	add.w	r3, r7, #20
 8020ce2:	4619      	mov	r1, r3
 8020ce4:	68f8      	ldr	r0, [r7, #12]
 8020ce6:	f7ff ff45 	bl	8020b74 <pb_close_string_substream>
 8020cea:	4603      	mov	r3, r0
 8020cec:	f083 0301 	eor.w	r3, r3, #1
 8020cf0:	b2db      	uxtb	r3, r3
 8020cf2:	2b00      	cmp	r3, #0
 8020cf4:	d001      	beq.n	8020cfa <decode_static_field+0x142>
                    return false;
 8020cf6:	2300      	movs	r3, #0
 8020cf8:	e04e      	b.n	8020d98 <decode_static_field+0x1e0>

                return status;
 8020cfa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8020cfe:	e04b      	b.n	8020d98 <decode_static_field+0x1e0>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)iter->pSize;
 8020d00:	687b      	ldr	r3, [r7, #4]
 8020d02:	695b      	ldr	r3, [r3, #20]
 8020d04:	627b      	str	r3, [r7, #36]	@ 0x24
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8020d06:	687b      	ldr	r3, [r7, #4]
 8020d08:	691b      	ldr	r3, [r3, #16]
 8020d0a:	687a      	ldr	r2, [r7, #4]
 8020d0c:	6852      	ldr	r2, [r2, #4]
 8020d0e:	8912      	ldrh	r2, [r2, #8]
 8020d10:	4611      	mov	r1, r2
 8020d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020d14:	8812      	ldrh	r2, [r2, #0]
 8020d16:	fb01 f202 	mul.w	r2, r1, r2
 8020d1a:	4413      	add	r3, r2
 8020d1c:	623b      	str	r3, [r7, #32]

                if ((*size)++ >= iter->pos->array_size)
 8020d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020d20:	881b      	ldrh	r3, [r3, #0]
 8020d22:	1c5a      	adds	r2, r3, #1
 8020d24:	b291      	uxth	r1, r2
 8020d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020d28:	8011      	strh	r1, [r2, #0]
 8020d2a:	687a      	ldr	r2, [r7, #4]
 8020d2c:	6852      	ldr	r2, [r2, #4]
 8020d2e:	8952      	ldrh	r2, [r2, #10]
 8020d30:	4293      	cmp	r3, r2
 8020d32:	d301      	bcc.n	8020d38 <decode_static_field+0x180>
                    PB_RETURN_ERROR(stream, "array overflow");
 8020d34:	2300      	movs	r3, #0
 8020d36:	e02f      	b.n	8020d98 <decode_static_field+0x1e0>

                return func(stream, iter->pos, pItem);
 8020d38:	687b      	ldr	r3, [r7, #4]
 8020d3a:	6859      	ldr	r1, [r3, #4]
 8020d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020d3e:	6a3a      	ldr	r2, [r7, #32]
 8020d40:	68f8      	ldr	r0, [r7, #12]
 8020d42:	4798      	blx	r3
 8020d44:	4603      	mov	r3, r0
 8020d46:	e027      	b.n	8020d98 <decode_static_field+0x1e0>
            }

        case PB_HTYPE_ONEOF:
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 8020d48:	687b      	ldr	r3, [r7, #4]
 8020d4a:	685a      	ldr	r2, [r3, #4]
 8020d4c:	687b      	ldr	r3, [r7, #4]
 8020d4e:	695b      	ldr	r3, [r3, #20]
 8020d50:	8812      	ldrh	r2, [r2, #0]
 8020d52:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8020d54:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8020d58:	f003 030f 	and.w	r3, r3, #15
 8020d5c:	2b07      	cmp	r3, #7
 8020d5e:	d111      	bne.n	8020d84 <decode_static_field+0x1cc>
            {
                /* We memset to zero so that any callbacks are set to NULL.
                 * Then set any default values. */
                memset(iter->pData, 0, iter->pos->data_size);
 8020d60:	687b      	ldr	r3, [r7, #4]
 8020d62:	6918      	ldr	r0, [r3, #16]
 8020d64:	687b      	ldr	r3, [r7, #4]
 8020d66:	685b      	ldr	r3, [r3, #4]
 8020d68:	891b      	ldrh	r3, [r3, #8]
 8020d6a:	461a      	mov	r2, r3
 8020d6c:	2100      	movs	r1, #0
 8020d6e:	f013 f890 	bl	8033e92 <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 8020d72:	687b      	ldr	r3, [r7, #4]
 8020d74:	685b      	ldr	r3, [r3, #4]
 8020d76:	68da      	ldr	r2, [r3, #12]
 8020d78:	687b      	ldr	r3, [r7, #4]
 8020d7a:	691b      	ldr	r3, [r3, #16]
 8020d7c:	4619      	mov	r1, r3
 8020d7e:	4610      	mov	r0, r2
 8020d80:	f000 fa1b 	bl	80211ba <pb_message_set_to_defaults>
            }
            return func(stream, iter->pos, iter->pData);
 8020d84:	687b      	ldr	r3, [r7, #4]
 8020d86:	6859      	ldr	r1, [r3, #4]
 8020d88:	687b      	ldr	r3, [r7, #4]
 8020d8a:	691a      	ldr	r2, [r3, #16]
 8020d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020d8e:	68f8      	ldr	r0, [r7, #12]
 8020d90:	4798      	blx	r3
 8020d92:	4603      	mov	r3, r0
 8020d94:	e000      	b.n	8020d98 <decode_static_field+0x1e0>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8020d96:	2300      	movs	r3, #0
    }
}
 8020d98:	4618      	mov	r0, r3
 8020d9a:	3738      	adds	r7, #56	@ 0x38
 8020d9c:	46bd      	mov	sp, r7
 8020d9e:	bd80      	pop	{r7, pc}
 8020da0:	08072110 	.word	0x08072110

08020da4 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 8020da4:	b480      	push	{r7}
 8020da6:	b085      	sub	sp, #20
 8020da8:	af00      	add	r7, sp, #0
 8020daa:	60f8      	str	r0, [r7, #12]
 8020dac:	460b      	mov	r3, r1
 8020dae:	607a      	str	r2, [r7, #4]
 8020db0:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(iter);
    PB_RETURN_ERROR(stream, "no malloc support");
 8020db2:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 8020db4:	4618      	mov	r0, r3
 8020db6:	3714      	adds	r7, #20
 8020db8:	46bd      	mov	sp, r7
 8020dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dbe:	4770      	bx	lr

08020dc0 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 8020dc0:	b580      	push	{r7, lr}
 8020dc2:	b094      	sub	sp, #80	@ 0x50
 8020dc4:	af00      	add	r7, sp, #0
 8020dc6:	61f8      	str	r0, [r7, #28]
 8020dc8:	460b      	mov	r3, r1
 8020dca:	617a      	str	r2, [r7, #20]
 8020dcc:	76fb      	strb	r3, [r7, #27]
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 8020dce:	697b      	ldr	r3, [r7, #20]
 8020dd0:	691b      	ldr	r3, [r3, #16]
 8020dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    
#ifdef PB_OLD_CALLBACK_STYLE
    void *arg = pCallback->arg;
#else
    void **arg = &(pCallback->arg);
 8020dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020dd6:	3304      	adds	r3, #4
 8020dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
#endif
    
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 8020dda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020ddc:	2b00      	cmp	r3, #0
 8020dde:	d003      	beq.n	8020de8 <decode_callback_field+0x28>
 8020de0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020de2:	681b      	ldr	r3, [r3, #0]
 8020de4:	2b00      	cmp	r3, #0
 8020de6:	d106      	bne.n	8020df6 <decode_callback_field+0x36>
        return pb_skip_field(stream, wire_type);
 8020de8:	7efb      	ldrb	r3, [r7, #27]
 8020dea:	4619      	mov	r1, r3
 8020dec:	69f8      	ldr	r0, [r7, #28]
 8020dee:	f7ff fe0b 	bl	8020a08 <pb_skip_field>
 8020df2:	4603      	mov	r3, r0
 8020df4:	e05b      	b.n	8020eae <decode_callback_field+0xee>
    
    if (wire_type == PB_WT_STRING)
 8020df6:	7efb      	ldrb	r3, [r7, #27]
 8020df8:	2b02      	cmp	r3, #2
 8020dfa:	d130      	bne.n	8020e5e <decode_callback_field+0x9e>
    {
        pb_istream_t substream;
        
        if (!pb_make_string_substream(stream, &substream))
 8020dfc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8020e00:	4619      	mov	r1, r3
 8020e02:	69f8      	ldr	r0, [r7, #28]
 8020e04:	f7ff fe89 	bl	8020b1a <pb_make_string_substream>
 8020e08:	4603      	mov	r3, r0
 8020e0a:	f083 0301 	eor.w	r3, r3, #1
 8020e0e:	b2db      	uxtb	r3, r3
 8020e10:	2b00      	cmp	r3, #0
 8020e12:	d001      	beq.n	8020e18 <decode_callback_field+0x58>
            return false;
 8020e14:	2300      	movs	r3, #0
 8020e16:	e04a      	b.n	8020eae <decode_callback_field+0xee>
        
        do
        {
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 8020e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020e1a:	681b      	ldr	r3, [r3, #0]
 8020e1c:	697a      	ldr	r2, [r7, #20]
 8020e1e:	6851      	ldr	r1, [r2, #4]
 8020e20:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8020e24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8020e26:	4798      	blx	r3
 8020e28:	4603      	mov	r3, r0
 8020e2a:	f083 0301 	eor.w	r3, r3, #1
 8020e2e:	b2db      	uxtb	r3, r3
 8020e30:	2b00      	cmp	r3, #0
 8020e32:	d001      	beq.n	8020e38 <decode_callback_field+0x78>
                PB_RETURN_ERROR(stream, "callback failed");
 8020e34:	2300      	movs	r3, #0
 8020e36:	e03a      	b.n	8020eae <decode_callback_field+0xee>
        } while (substream.bytes_left);
 8020e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020e3a:	2b00      	cmp	r3, #0
 8020e3c:	d1ec      	bne.n	8020e18 <decode_callback_field+0x58>
        
        if (!pb_close_string_substream(stream, &substream))
 8020e3e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8020e42:	4619      	mov	r1, r3
 8020e44:	69f8      	ldr	r0, [r7, #28]
 8020e46:	f7ff fe95 	bl	8020b74 <pb_close_string_substream>
 8020e4a:	4603      	mov	r3, r0
 8020e4c:	f083 0301 	eor.w	r3, r3, #1
 8020e50:	b2db      	uxtb	r3, r3
 8020e52:	2b00      	cmp	r3, #0
 8020e54:	d001      	beq.n	8020e5a <decode_callback_field+0x9a>
            return false;
 8020e56:	2300      	movs	r3, #0
 8020e58:	e029      	b.n	8020eae <decode_callback_field+0xee>

        return true;
 8020e5a:	2301      	movs	r3, #1
 8020e5c:	e027      	b.n	8020eae <decode_callback_field+0xee>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 8020e5e:	230a      	movs	r3, #10
 8020e60:	623b      	str	r3, [r7, #32]
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8020e62:	f107 0320 	add.w	r3, r7, #32
 8020e66:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8020e6a:	7ef9      	ldrb	r1, [r7, #27]
 8020e6c:	69f8      	ldr	r0, [r7, #28]
 8020e6e:	f7ff fe01 	bl	8020a74 <read_raw_value>
 8020e72:	4603      	mov	r3, r0
 8020e74:	f083 0301 	eor.w	r3, r3, #1
 8020e78:	b2db      	uxtb	r3, r3
 8020e7a:	2b00      	cmp	r3, #0
 8020e7c:	d001      	beq.n	8020e82 <decode_callback_field+0xc2>
            return false;
 8020e7e:	2300      	movs	r3, #0
 8020e80:	e015      	b.n	8020eae <decode_callback_field+0xee>
        substream = pb_istream_from_buffer(buffer, size);
 8020e82:	6a3a      	ldr	r2, [r7, #32]
 8020e84:	463b      	mov	r3, r7
 8020e86:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8020e8a:	4618      	mov	r0, r3
 8020e8c:	f7ff fc58 	bl	8020740 <pb_istream_from_buffer>
 8020e90:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8020e94:	463a      	mov	r2, r7
 8020e96:	ca07      	ldmia	r2, {r0, r1, r2}
 8020e98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8020e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020e9e:	681b      	ldr	r3, [r3, #0]
 8020ea0:	697a      	ldr	r2, [r7, #20]
 8020ea2:	6851      	ldr	r1, [r2, #4]
 8020ea4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8020ea8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8020eaa:	4798      	blx	r3
 8020eac:	4603      	mov	r3, r0
    }
}
 8020eae:	4618      	mov	r0, r3
 8020eb0:	3750      	adds	r7, #80	@ 0x50
 8020eb2:	46bd      	mov	sp, r7
 8020eb4:	bd80      	pop	{r7, pc}

08020eb6 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 8020eb6:	b580      	push	{r7, lr}
 8020eb8:	b084      	sub	sp, #16
 8020eba:	af00      	add	r7, sp, #0
 8020ebc:	60f8      	str	r0, [r7, #12]
 8020ebe:	460b      	mov	r3, r1
 8020ec0:	607a      	str	r2, [r7, #4]
 8020ec2:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, iter))
            return false;
    }
#endif

    switch (PB_ATYPE(iter->pos->type))
 8020ec4:	687b      	ldr	r3, [r7, #4]
 8020ec6:	685b      	ldr	r3, [r3, #4]
 8020ec8:	789b      	ldrb	r3, [r3, #2]
 8020eca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8020ece:	2b80      	cmp	r3, #128	@ 0x80
 8020ed0:	d00e      	beq.n	8020ef0 <decode_field+0x3a>
 8020ed2:	2b80      	cmp	r3, #128	@ 0x80
 8020ed4:	dc1c      	bgt.n	8020f10 <decode_field+0x5a>
 8020ed6:	2b00      	cmp	r3, #0
 8020ed8:	d002      	beq.n	8020ee0 <decode_field+0x2a>
 8020eda:	2b40      	cmp	r3, #64	@ 0x40
 8020edc:	d010      	beq.n	8020f00 <decode_field+0x4a>
 8020ede:	e017      	b.n	8020f10 <decode_field+0x5a>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, iter);
 8020ee0:	7afb      	ldrb	r3, [r7, #11]
 8020ee2:	687a      	ldr	r2, [r7, #4]
 8020ee4:	4619      	mov	r1, r3
 8020ee6:	68f8      	ldr	r0, [r7, #12]
 8020ee8:	f7ff fe66 	bl	8020bb8 <decode_static_field>
 8020eec:	4603      	mov	r3, r0
 8020eee:	e010      	b.n	8020f12 <decode_field+0x5c>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, iter);
 8020ef0:	7afb      	ldrb	r3, [r7, #11]
 8020ef2:	687a      	ldr	r2, [r7, #4]
 8020ef4:	4619      	mov	r1, r3
 8020ef6:	68f8      	ldr	r0, [r7, #12]
 8020ef8:	f7ff ff54 	bl	8020da4 <decode_pointer_field>
 8020efc:	4603      	mov	r3, r0
 8020efe:	e008      	b.n	8020f12 <decode_field+0x5c>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, iter);
 8020f00:	7afb      	ldrb	r3, [r7, #11]
 8020f02:	687a      	ldr	r2, [r7, #4]
 8020f04:	4619      	mov	r1, r3
 8020f06:	68f8      	ldr	r0, [r7, #12]
 8020f08:	f7ff ff5a 	bl	8020dc0 <decode_callback_field>
 8020f0c:	4603      	mov	r3, r0
 8020f0e:	e000      	b.n	8020f12 <decode_field+0x5c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8020f10:	2300      	movs	r3, #0
    }
}
 8020f12:	4618      	mov	r0, r3
 8020f14:	3710      	adds	r7, #16
 8020f16:	46bd      	mov	sp, r7
 8020f18:	bd80      	pop	{r7, pc}

08020f1a <iter_from_extension>:

static void iter_from_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 8020f1a:	b580      	push	{r7, lr}
 8020f1c:	b084      	sub	sp, #16
 8020f1e:	af00      	add	r7, sp, #0
 8020f20:	6078      	str	r0, [r7, #4]
 8020f22:	6039      	str	r1, [r7, #0]
    /* Fake a field iterator for the extension field.
     * It is not actually safe to advance this iterator, but decode_field
     * will not even try to. */
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8020f24:	683b      	ldr	r3, [r7, #0]
 8020f26:	681b      	ldr	r3, [r3, #0]
 8020f28:	689b      	ldr	r3, [r3, #8]
 8020f2a:	60fb      	str	r3, [r7, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8020f2c:	683b      	ldr	r3, [r7, #0]
 8020f2e:	685b      	ldr	r3, [r3, #4]
 8020f30:	461a      	mov	r2, r3
 8020f32:	68f9      	ldr	r1, [r7, #12]
 8020f34:	6878      	ldr	r0, [r7, #4]
 8020f36:	f7ff fa93 	bl	8020460 <pb_field_iter_begin>
    iter->pData = extension->dest;
 8020f3a:	683b      	ldr	r3, [r7, #0]
 8020f3c:	685a      	ldr	r2, [r3, #4]
 8020f3e:	687b      	ldr	r3, [r7, #4]
 8020f40:	611a      	str	r2, [r3, #16]
    iter->pSize = &extension->found;
 8020f42:	683b      	ldr	r3, [r7, #0]
 8020f44:	f103 020c 	add.w	r2, r3, #12
 8020f48:	687b      	ldr	r3, [r7, #4]
 8020f4a:	615a      	str	r2, [r3, #20]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8020f4c:	68fb      	ldr	r3, [r7, #12]
 8020f4e:	789b      	ldrb	r3, [r3, #2]
 8020f50:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8020f54:	2b80      	cmp	r3, #128	@ 0x80
 8020f56:	d103      	bne.n	8020f60 <iter_from_extension+0x46>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        iter->pData = &extension->dest;
 8020f58:	683b      	ldr	r3, [r7, #0]
 8020f5a:	1d1a      	adds	r2, r3, #4
 8020f5c:	687b      	ldr	r3, [r7, #4]
 8020f5e:	611a      	str	r2, [r3, #16]
    }
}
 8020f60:	bf00      	nop
 8020f62:	3710      	adds	r7, #16
 8020f64:	46bd      	mov	sp, r7
 8020f66:	bd80      	pop	{r7, pc}

08020f68 <default_extension_decoder>:

/* Default handler for extension fields. Expects a pb_field_t structure
 * in extension->type->arg. */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8020f68:	b580      	push	{r7, lr}
 8020f6a:	b08c      	sub	sp, #48	@ 0x30
 8020f6c:	af00      	add	r7, sp, #0
 8020f6e:	60f8      	str	r0, [r7, #12]
 8020f70:	60b9      	str	r1, [r7, #8]
 8020f72:	607a      	str	r2, [r7, #4]
 8020f74:	70fb      	strb	r3, [r7, #3]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8020f76:	68bb      	ldr	r3, [r7, #8]
 8020f78:	681b      	ldr	r3, [r3, #0]
 8020f7a:	689b      	ldr	r3, [r3, #8]
 8020f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pb_field_iter_t iter;
    
    if (field->tag != tag)
 8020f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020f80:	881b      	ldrh	r3, [r3, #0]
 8020f82:	461a      	mov	r2, r3
 8020f84:	687b      	ldr	r3, [r7, #4]
 8020f86:	4293      	cmp	r3, r2
 8020f88:	d001      	beq.n	8020f8e <default_extension_decoder+0x26>
        return true;
 8020f8a:	2301      	movs	r3, #1
 8020f8c:	e010      	b.n	8020fb0 <default_extension_decoder+0x48>
    
    iter_from_extension(&iter, extension);
 8020f8e:	f107 0314 	add.w	r3, r7, #20
 8020f92:	68b9      	ldr	r1, [r7, #8]
 8020f94:	4618      	mov	r0, r3
 8020f96:	f7ff ffc0 	bl	8020f1a <iter_from_extension>
    extension->found = true;
 8020f9a:	68bb      	ldr	r3, [r7, #8]
 8020f9c:	2201      	movs	r2, #1
 8020f9e:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 8020fa0:	f107 0214 	add.w	r2, r7, #20
 8020fa4:	78fb      	ldrb	r3, [r7, #3]
 8020fa6:	4619      	mov	r1, r3
 8020fa8:	68f8      	ldr	r0, [r7, #12]
 8020faa:	f7ff ff84 	bl	8020eb6 <decode_field>
 8020fae:	4603      	mov	r3, r0
}
 8020fb0:	4618      	mov	r0, r3
 8020fb2:	3730      	adds	r7, #48	@ 0x30
 8020fb4:	46bd      	mov	sp, r7
 8020fb6:	bd80      	pop	{r7, pc}

08020fb8 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 8020fb8:	b590      	push	{r4, r7, lr}
 8020fba:	b089      	sub	sp, #36	@ 0x24
 8020fbc:	af00      	add	r7, sp, #0
 8020fbe:	60f8      	str	r0, [r7, #12]
 8020fc0:	60b9      	str	r1, [r7, #8]
 8020fc2:	603b      	str	r3, [r7, #0]
 8020fc4:	4613      	mov	r3, r2
 8020fc6:	71fb      	strb	r3, [r7, #7]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8020fc8:	683b      	ldr	r3, [r7, #0]
 8020fca:	691b      	ldr	r3, [r3, #16]
 8020fcc:	681b      	ldr	r3, [r3, #0]
 8020fce:	61fb      	str	r3, [r7, #28]
    size_t pos = stream->bytes_left;
 8020fd0:	68fb      	ldr	r3, [r7, #12]
 8020fd2:	689b      	ldr	r3, [r3, #8]
 8020fd4:	617b      	str	r3, [r7, #20]
    
    while (extension != NULL && pos == stream->bytes_left)
 8020fd6:	e022      	b.n	802101e <decode_extension+0x66>
    {
        bool status;
        if (extension->type->decode)
 8020fd8:	69fb      	ldr	r3, [r7, #28]
 8020fda:	681b      	ldr	r3, [r3, #0]
 8020fdc:	681b      	ldr	r3, [r3, #0]
 8020fde:	2b00      	cmp	r3, #0
 8020fe0:	d00a      	beq.n	8020ff8 <decode_extension+0x40>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8020fe2:	69fb      	ldr	r3, [r7, #28]
 8020fe4:	681b      	ldr	r3, [r3, #0]
 8020fe6:	681c      	ldr	r4, [r3, #0]
 8020fe8:	79fb      	ldrb	r3, [r7, #7]
 8020fea:	68ba      	ldr	r2, [r7, #8]
 8020fec:	69f9      	ldr	r1, [r7, #28]
 8020fee:	68f8      	ldr	r0, [r7, #12]
 8020ff0:	47a0      	blx	r4
 8020ff2:	4603      	mov	r3, r0
 8020ff4:	76fb      	strb	r3, [r7, #27]
 8020ff6:	e007      	b.n	8021008 <decode_extension+0x50>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8020ff8:	79fb      	ldrb	r3, [r7, #7]
 8020ffa:	68ba      	ldr	r2, [r7, #8]
 8020ffc:	69f9      	ldr	r1, [r7, #28]
 8020ffe:	68f8      	ldr	r0, [r7, #12]
 8021000:	f7ff ffb2 	bl	8020f68 <default_extension_decoder>
 8021004:	4603      	mov	r3, r0
 8021006:	76fb      	strb	r3, [r7, #27]

        if (!status)
 8021008:	7efb      	ldrb	r3, [r7, #27]
 802100a:	f083 0301 	eor.w	r3, r3, #1
 802100e:	b2db      	uxtb	r3, r3
 8021010:	2b00      	cmp	r3, #0
 8021012:	d001      	beq.n	8021018 <decode_extension+0x60>
            return false;
 8021014:	2300      	movs	r3, #0
 8021016:	e00b      	b.n	8021030 <decode_extension+0x78>
        
        extension = extension->next;
 8021018:	69fb      	ldr	r3, [r7, #28]
 802101a:	689b      	ldr	r3, [r3, #8]
 802101c:	61fb      	str	r3, [r7, #28]
    while (extension != NULL && pos == stream->bytes_left)
 802101e:	69fb      	ldr	r3, [r7, #28]
 8021020:	2b00      	cmp	r3, #0
 8021022:	d004      	beq.n	802102e <decode_extension+0x76>
 8021024:	68fb      	ldr	r3, [r7, #12]
 8021026:	689b      	ldr	r3, [r3, #8]
 8021028:	697a      	ldr	r2, [r7, #20]
 802102a:	429a      	cmp	r2, r3
 802102c:	d0d4      	beq.n	8020fd8 <decode_extension+0x20>
    }
    
    return true;
 802102e:	2301      	movs	r3, #1
}
 8021030:	4618      	mov	r0, r3
 8021032:	3724      	adds	r7, #36	@ 0x24
 8021034:	46bd      	mov	sp, r7
 8021036:	bd90      	pop	{r4, r7, pc}

08021038 <find_extension_field>:

/* Step through the iterator until an extension field is found or until all
 * entries have been checked. There can be only one extension field per
 * message. Returns false if no extension field is found. */
static bool checkreturn find_extension_field(pb_field_iter_t *iter)
{
 8021038:	b580      	push	{r7, lr}
 802103a:	b084      	sub	sp, #16
 802103c:	af00      	add	r7, sp, #0
 802103e:	6078      	str	r0, [r7, #4]
    const pb_field_t *start = iter->pos;
 8021040:	687b      	ldr	r3, [r7, #4]
 8021042:	685b      	ldr	r3, [r3, #4]
 8021044:	60fb      	str	r3, [r7, #12]
    
    do {
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 8021046:	687b      	ldr	r3, [r7, #4]
 8021048:	685b      	ldr	r3, [r3, #4]
 802104a:	789b      	ldrb	r3, [r3, #2]
 802104c:	f003 030f 	and.w	r3, r3, #15
 8021050:	2b08      	cmp	r3, #8
 8021052:	d101      	bne.n	8021058 <find_extension_field+0x20>
            return true;
 8021054:	2301      	movs	r3, #1
 8021056:	e008      	b.n	802106a <find_extension_field+0x32>
        (void)pb_field_iter_next(iter);
 8021058:	6878      	ldr	r0, [r7, #4]
 802105a:	f7ff fa32 	bl	80204c2 <pb_field_iter_next>
    } while (iter->pos != start);
 802105e:	687b      	ldr	r3, [r7, #4]
 8021060:	685b      	ldr	r3, [r3, #4]
 8021062:	68fa      	ldr	r2, [r7, #12]
 8021064:	429a      	cmp	r2, r3
 8021066:	d1ee      	bne.n	8021046 <find_extension_field+0xe>
    
    return false;
 8021068:	2300      	movs	r3, #0
}
 802106a:	4618      	mov	r0, r3
 802106c:	3710      	adds	r7, #16
 802106e:	46bd      	mov	sp, r7
 8021070:	bd80      	pop	{r7, pc}

08021072 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 8021072:	b580      	push	{r7, lr}
 8021074:	b08a      	sub	sp, #40	@ 0x28
 8021076:	af00      	add	r7, sp, #0
 8021078:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = iter->pos->type;
 802107a:	687b      	ldr	r3, [r7, #4]
 802107c:	685b      	ldr	r3, [r3, #4]
 802107e:	789b      	ldrb	r3, [r3, #2]
 8021080:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8021084:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8021088:	f003 030f 	and.w	r3, r3, #15
 802108c:	2b08      	cmp	r3, #8
 802108e:	d119      	bne.n	80210c4 <pb_field_set_to_default+0x52>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8021090:	687b      	ldr	r3, [r7, #4]
 8021092:	691b      	ldr	r3, [r3, #16]
 8021094:	681b      	ldr	r3, [r3, #0]
 8021096:	627b      	str	r3, [r7, #36]	@ 0x24
        while (ext != NULL)
 8021098:	e010      	b.n	80210bc <pb_field_set_to_default+0x4a>
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 802109a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802109c:	2200      	movs	r2, #0
 802109e:	731a      	strb	r2, [r3, #12]
            iter_from_extension(&ext_iter, ext);
 80210a0:	f107 0308 	add.w	r3, r7, #8
 80210a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80210a6:	4618      	mov	r0, r3
 80210a8:	f7ff ff37 	bl	8020f1a <iter_from_extension>
            pb_field_set_to_default(&ext_iter);
 80210ac:	f107 0308 	add.w	r3, r7, #8
 80210b0:	4618      	mov	r0, r3
 80210b2:	f7ff ffde 	bl	8021072 <pb_field_set_to_default>
            ext = ext->next;
 80210b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80210b8:	689b      	ldr	r3, [r3, #8]
 80210ba:	627b      	str	r3, [r7, #36]	@ 0x24
        while (ext != NULL)
 80210bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80210be:	2b00      	cmp	r3, #0
 80210c0:	d1eb      	bne.n	802109a <pb_field_set_to_default+0x28>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 80210c2:	e076      	b.n	80211b2 <pb_field_set_to_default+0x140>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80210c4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80210c8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80210cc:	2b00      	cmp	r3, #0
 80210ce:	d156      	bne.n	802117e <pb_field_set_to_default+0x10c>
        bool init_data = true;
 80210d0:	2301      	movs	r3, #1
 80210d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 80210d6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80210da:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80210de:	2b10      	cmp	r3, #16
 80210e0:	d10a      	bne.n	80210f8 <pb_field_set_to_default+0x86>
 80210e2:	687b      	ldr	r3, [r7, #4]
 80210e4:	695a      	ldr	r2, [r3, #20]
 80210e6:	687b      	ldr	r3, [r7, #4]
 80210e8:	691b      	ldr	r3, [r3, #16]
 80210ea:	429a      	cmp	r2, r3
 80210ec:	d004      	beq.n	80210f8 <pb_field_set_to_default+0x86>
            *(bool*)iter->pSize = false;
 80210ee:	687b      	ldr	r3, [r7, #4]
 80210f0:	695b      	ldr	r3, [r3, #20]
 80210f2:	2200      	movs	r2, #0
 80210f4:	701a      	strb	r2, [r3, #0]
 80210f6:	e012      	b.n	802111e <pb_field_set_to_default+0xac>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80210f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80210fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8021100:	2b20      	cmp	r3, #32
 8021102:	d005      	beq.n	8021110 <pb_field_set_to_default+0x9e>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8021104:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8021108:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 802110c:	2b30      	cmp	r3, #48	@ 0x30
 802110e:	d106      	bne.n	802111e <pb_field_set_to_default+0xac>
            *(pb_size_t*)iter->pSize = 0;
 8021110:	687b      	ldr	r3, [r7, #4]
 8021112:	695b      	ldr	r3, [r3, #20]
 8021114:	2200      	movs	r2, #0
 8021116:	801a      	strh	r2, [r3, #0]
            init_data = false;
 8021118:	2300      	movs	r3, #0
 802111a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (init_data)
 802111e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8021122:	2b00      	cmp	r3, #0
 8021124:	d045      	beq.n	80211b2 <pb_field_set_to_default+0x140>
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 8021126:	687b      	ldr	r3, [r7, #4]
 8021128:	685b      	ldr	r3, [r3, #4]
 802112a:	789b      	ldrb	r3, [r3, #2]
 802112c:	f003 030f 	and.w	r3, r3, #15
 8021130:	2b07      	cmp	r3, #7
 8021132:	d109      	bne.n	8021148 <pb_field_set_to_default+0xd6>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8021134:	687b      	ldr	r3, [r7, #4]
 8021136:	685b      	ldr	r3, [r3, #4]
 8021138:	68da      	ldr	r2, [r3, #12]
 802113a:	687b      	ldr	r3, [r7, #4]
 802113c:	691b      	ldr	r3, [r3, #16]
 802113e:	4619      	mov	r1, r3
 8021140:	4610      	mov	r0, r2
 8021142:	f000 f83a 	bl	80211ba <pb_message_set_to_defaults>
}
 8021146:	e034      	b.n	80211b2 <pb_field_set_to_default+0x140>
            else if (iter->pos->ptr != NULL)
 8021148:	687b      	ldr	r3, [r7, #4]
 802114a:	685b      	ldr	r3, [r3, #4]
 802114c:	68db      	ldr	r3, [r3, #12]
 802114e:	2b00      	cmp	r3, #0
 8021150:	d00b      	beq.n	802116a <pb_field_set_to_default+0xf8>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 8021152:	687b      	ldr	r3, [r7, #4]
 8021154:	6918      	ldr	r0, [r3, #16]
 8021156:	687b      	ldr	r3, [r7, #4]
 8021158:	685b      	ldr	r3, [r3, #4]
 802115a:	68d9      	ldr	r1, [r3, #12]
 802115c:	687b      	ldr	r3, [r7, #4]
 802115e:	685b      	ldr	r3, [r3, #4]
 8021160:	891b      	ldrh	r3, [r3, #8]
 8021162:	461a      	mov	r2, r3
 8021164:	f012 ff37 	bl	8033fd6 <memcpy>
}
 8021168:	e023      	b.n	80211b2 <pb_field_set_to_default+0x140>
                memset(iter->pData, 0, iter->pos->data_size);
 802116a:	687b      	ldr	r3, [r7, #4]
 802116c:	6918      	ldr	r0, [r3, #16]
 802116e:	687b      	ldr	r3, [r7, #4]
 8021170:	685b      	ldr	r3, [r3, #4]
 8021172:	891b      	ldrh	r3, [r3, #8]
 8021174:	461a      	mov	r2, r3
 8021176:	2100      	movs	r1, #0
 8021178:	f012 fe8b 	bl	8033e92 <memset>
}
 802117c:	e019      	b.n	80211b2 <pb_field_set_to_default+0x140>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 802117e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8021182:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8021186:	2b80      	cmp	r3, #128	@ 0x80
 8021188:	d113      	bne.n	80211b2 <pb_field_set_to_default+0x140>
        *(void**)iter->pData = NULL;
 802118a:	687b      	ldr	r3, [r7, #4]
 802118c:	691b      	ldr	r3, [r3, #16]
 802118e:	2200      	movs	r2, #0
 8021190:	601a      	str	r2, [r3, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8021192:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8021196:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 802119a:	2b20      	cmp	r3, #32
 802119c:	d005      	beq.n	80211aa <pb_field_set_to_default+0x138>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 802119e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80211a2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80211a6:	2b30      	cmp	r3, #48	@ 0x30
 80211a8:	d103      	bne.n	80211b2 <pb_field_set_to_default+0x140>
            *(pb_size_t*)iter->pSize = 0;
 80211aa:	687b      	ldr	r3, [r7, #4]
 80211ac:	695b      	ldr	r3, [r3, #20]
 80211ae:	2200      	movs	r2, #0
 80211b0:	801a      	strh	r2, [r3, #0]
}
 80211b2:	bf00      	nop
 80211b4:	3728      	adds	r7, #40	@ 0x28
 80211b6:	46bd      	mov	sp, r7
 80211b8:	bd80      	pop	{r7, pc}

080211ba <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 80211ba:	b580      	push	{r7, lr}
 80211bc:	b088      	sub	sp, #32
 80211be:	af00      	add	r7, sp, #0
 80211c0:	6078      	str	r0, [r7, #4]
 80211c2:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 80211c4:	f107 0308 	add.w	r3, r7, #8
 80211c8:	683a      	ldr	r2, [r7, #0]
 80211ca:	6879      	ldr	r1, [r7, #4]
 80211cc:	4618      	mov	r0, r3
 80211ce:	f7ff f947 	bl	8020460 <pb_field_iter_begin>
 80211d2:	4603      	mov	r3, r0
 80211d4:	f083 0301 	eor.w	r3, r3, #1
 80211d8:	b2db      	uxtb	r3, r3
 80211da:	2b00      	cmp	r3, #0
 80211dc:	d10d      	bne.n	80211fa <pb_message_set_to_defaults+0x40>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 80211de:	f107 0308 	add.w	r3, r7, #8
 80211e2:	4618      	mov	r0, r3
 80211e4:	f7ff ff45 	bl	8021072 <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 80211e8:	f107 0308 	add.w	r3, r7, #8
 80211ec:	4618      	mov	r0, r3
 80211ee:	f7ff f968 	bl	80204c2 <pb_field_iter_next>
 80211f2:	4603      	mov	r3, r0
 80211f4:	2b00      	cmp	r3, #0
 80211f6:	d1f2      	bne.n	80211de <pb_message_set_to_defaults+0x24>
 80211f8:	e000      	b.n	80211fc <pb_message_set_to_defaults+0x42>
        return; /* Empty message type */
 80211fa:	bf00      	nop
}
 80211fc:	3720      	adds	r7, #32
 80211fe:	46bd      	mov	sp, r7
 8021200:	bd80      	pop	{r7, pc}

08021202 <pb_decode_noinit>:
/*********************
 * Decode all fields *
 *********************/

bool checkreturn pb_decode_noinit(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 8021202:	b580      	push	{r7, lr}
 8021204:	b098      	sub	sp, #96	@ 0x60
 8021206:	af00      	add	r7, sp, #0
 8021208:	60f8      	str	r0, [r7, #12]
 802120a:	60b9      	str	r1, [r7, #8]
 802120c:	607a      	str	r2, [r7, #4]
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 802120e:	2300      	movs	r3, #0
 8021210:	63bb      	str	r3, [r7, #56]	@ 0x38
 8021212:	2300      	movs	r3, #0
 8021214:	63fb      	str	r3, [r7, #60]	@ 0x3c
    const uint32_t allbits = ~(uint32_t)0;
 8021216:	f04f 33ff 	mov.w	r3, #4294967295
 802121a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    uint32_t extension_range_start = 0;
 802121c:	2300      	movs	r3, #0
 802121e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    const pb_field_t *fixed_count_field = NULL;
 8021220:	2300      	movs	r3, #0
 8021222:	65bb      	str	r3, [r7, #88]	@ 0x58
    pb_size_t fixed_count_size = 0;
 8021224:	2300      	movs	r3, #0
 8021226:	83fb      	strh	r3, [r7, #30]

    /* Return value ignored, as empty message types will be correctly handled by
     * pb_field_iter_find() anyway. */
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8021228:	f107 0320 	add.w	r3, r7, #32
 802122c:	687a      	ldr	r2, [r7, #4]
 802122e:	68b9      	ldr	r1, [r7, #8]
 8021230:	4618      	mov	r0, r3
 8021232:	f7ff f915 	bl	8020460 <pb_field_iter_begin>

    while (stream->bytes_left)
 8021236:	e0b0      	b.n	802139a <pb_decode_noinit+0x198>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8021238:	f107 0316 	add.w	r3, r7, #22
 802123c:	f107 0218 	add.w	r2, r7, #24
 8021240:	f107 0117 	add.w	r1, r7, #23
 8021244:	68f8      	ldr	r0, [r7, #12]
 8021246:	f7ff fba8 	bl	802099a <pb_decode_tag>
 802124a:	4603      	mov	r3, r0
 802124c:	f083 0301 	eor.w	r3, r3, #1
 8021250:	b2db      	uxtb	r3, r3
 8021252:	2b00      	cmp	r3, #0
 8021254:	d005      	beq.n	8021262 <pb_decode_noinit+0x60>
        {
            if (eof)
 8021256:	7dbb      	ldrb	r3, [r7, #22]
 8021258:	2b00      	cmp	r3, #0
 802125a:	f040 80a4 	bne.w	80213a6 <pb_decode_noinit+0x1a4>
                break;
            else
                return false;
 802125e:	2300      	movs	r3, #0
 8021260:	e0fe      	b.n	8021460 <pb_decode_noinit+0x25e>
        }

        if (!pb_field_iter_find(&iter, tag))
 8021262:	69ba      	ldr	r2, [r7, #24]
 8021264:	f107 0320 	add.w	r3, r7, #32
 8021268:	4611      	mov	r1, r2
 802126a:	4618      	mov	r0, r3
 802126c:	f7ff f9a4 	bl	80205b8 <pb_field_iter_find>
 8021270:	4603      	mov	r3, r0
 8021272:	f083 0301 	eor.w	r3, r3, #1
 8021276:	b2db      	uxtb	r3, r3
 8021278:	2b00      	cmp	r3, #0
 802127a:	d03d      	beq.n	80212f8 <pb_decode_noinit+0xf6>
        {
            /* No match found, check if it matches an extension. */
            if (tag >= extension_range_start)
 802127c:	69bb      	ldr	r3, [r7, #24]
 802127e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8021280:	429a      	cmp	r2, r3
 8021282:	d82c      	bhi.n	80212de <pb_decode_noinit+0xdc>
            {
                if (!find_extension_field(&iter))
 8021284:	f107 0320 	add.w	r3, r7, #32
 8021288:	4618      	mov	r0, r3
 802128a:	f7ff fed5 	bl	8021038 <find_extension_field>
 802128e:	4603      	mov	r3, r0
 8021290:	f083 0301 	eor.w	r3, r3, #1
 8021294:	b2db      	uxtb	r3, r3
 8021296:	2b00      	cmp	r3, #0
 8021298:	d003      	beq.n	80212a2 <pb_decode_noinit+0xa0>
                    extension_range_start = (uint32_t)-1;
 802129a:	f04f 33ff 	mov.w	r3, #4294967295
 802129e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80212a0:	e002      	b.n	80212a8 <pb_decode_noinit+0xa6>
                else
                    extension_range_start = iter.pos->tag;
 80212a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80212a4:	881b      	ldrh	r3, [r3, #0]
 80212a6:	65fb      	str	r3, [r7, #92]	@ 0x5c

                if (tag >= extension_range_start)
 80212a8:	69bb      	ldr	r3, [r7, #24]
 80212aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80212ac:	429a      	cmp	r2, r3
 80212ae:	d816      	bhi.n	80212de <pb_decode_noinit+0xdc>
                {
                    size_t pos = stream->bytes_left;
 80212b0:	68fb      	ldr	r3, [r7, #12]
 80212b2:	689b      	ldr	r3, [r3, #8]
 80212b4:	647b      	str	r3, [r7, #68]	@ 0x44

                    if (!decode_extension(stream, tag, wire_type, &iter))
 80212b6:	69b9      	ldr	r1, [r7, #24]
 80212b8:	7dfa      	ldrb	r2, [r7, #23]
 80212ba:	f107 0320 	add.w	r3, r7, #32
 80212be:	68f8      	ldr	r0, [r7, #12]
 80212c0:	f7ff fe7a 	bl	8020fb8 <decode_extension>
 80212c4:	4603      	mov	r3, r0
 80212c6:	f083 0301 	eor.w	r3, r3, #1
 80212ca:	b2db      	uxtb	r3, r3
 80212cc:	2b00      	cmp	r3, #0
 80212ce:	d001      	beq.n	80212d4 <pb_decode_noinit+0xd2>
                        return false;
 80212d0:	2300      	movs	r3, #0
 80212d2:	e0c5      	b.n	8021460 <pb_decode_noinit+0x25e>

                    if (pos != stream->bytes_left)
 80212d4:	68fb      	ldr	r3, [r7, #12]
 80212d6:	689b      	ldr	r3, [r3, #8]
 80212d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80212da:	429a      	cmp	r2, r3
 80212dc:	d15a      	bne.n	8021394 <pb_decode_noinit+0x192>
                    }
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 80212de:	7dfb      	ldrb	r3, [r7, #23]
 80212e0:	4619      	mov	r1, r3
 80212e2:	68f8      	ldr	r0, [r7, #12]
 80212e4:	f7ff fb90 	bl	8020a08 <pb_skip_field>
 80212e8:	4603      	mov	r3, r0
 80212ea:	f083 0301 	eor.w	r3, r3, #1
 80212ee:	b2db      	uxtb	r3, r3
 80212f0:	2b00      	cmp	r3, #0
 80212f2:	d051      	beq.n	8021398 <pb_decode_noinit+0x196>
                return false;
 80212f4:	2300      	movs	r3, #0
 80212f6:	e0b3      	b.n	8021460 <pb_decode_noinit+0x25e>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 80212f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80212fa:	789b      	ldrb	r3, [r3, #2]
 80212fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8021300:	2b20      	cmp	r3, #32
 8021302:	d118      	bne.n	8021336 <pb_decode_noinit+0x134>
            && iter.pSize == iter.pData)
 8021304:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8021306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021308:	429a      	cmp	r2, r3
 802130a:	d114      	bne.n	8021336 <pb_decode_noinit+0x134>
        {
            if (fixed_count_field != iter.pos) {
 802130c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802130e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8021310:	429a      	cmp	r2, r3
 8021312:	d00d      	beq.n	8021330 <pb_decode_noinit+0x12e>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != NULL &&
 8021314:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8021316:	2b00      	cmp	r3, #0
 8021318:	d006      	beq.n	8021328 <pb_decode_noinit+0x126>
                    fixed_count_size != fixed_count_field->array_size)
 802131a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802131c:	895a      	ldrh	r2, [r3, #10]
 802131e:	8bfb      	ldrh	r3, [r7, #30]
                if (fixed_count_field != NULL &&
 8021320:	429a      	cmp	r2, r3
 8021322:	d001      	beq.n	8021328 <pb_decode_noinit+0x126>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8021324:	2300      	movs	r3, #0
 8021326:	e09b      	b.n	8021460 <pb_decode_noinit+0x25e>
                }

                fixed_count_field = iter.pos;
 8021328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802132a:	65bb      	str	r3, [r7, #88]	@ 0x58
                fixed_count_size = 0;
 802132c:	2300      	movs	r3, #0
 802132e:	83fb      	strh	r3, [r7, #30]
            }

            iter.pSize = &fixed_count_size;
 8021330:	f107 031e 	add.w	r3, r7, #30
 8021334:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 8021336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021338:	789b      	ldrb	r3, [r3, #2]
 802133a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 802133e:	2b00      	cmp	r3, #0
 8021340:	d119      	bne.n	8021376 <pb_decode_noinit+0x174>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8021342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021344:	2b3f      	cmp	r3, #63	@ 0x3f
 8021346:	d816      	bhi.n	8021376 <pb_decode_noinit+0x174>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8021348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802134a:	f003 031f 	and.w	r3, r3, #31
 802134e:	2201      	movs	r2, #1
 8021350:	fa02 f303 	lsl.w	r3, r2, r3
 8021354:	64bb      	str	r3, [r7, #72]	@ 0x48
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8021356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021358:	095b      	lsrs	r3, r3, #5
 802135a:	009b      	lsls	r3, r3, #2
 802135c:	3360      	adds	r3, #96	@ 0x60
 802135e:	443b      	add	r3, r7
 8021360:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8021364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021366:	095b      	lsrs	r3, r3, #5
 8021368:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802136a:	430a      	orrs	r2, r1
 802136c:	009b      	lsls	r3, r3, #2
 802136e:	3360      	adds	r3, #96	@ 0x60
 8021370:	443b      	add	r3, r7
 8021372:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 8021376:	7dfb      	ldrb	r3, [r7, #23]
 8021378:	f107 0220 	add.w	r2, r7, #32
 802137c:	4619      	mov	r1, r3
 802137e:	68f8      	ldr	r0, [r7, #12]
 8021380:	f7ff fd99 	bl	8020eb6 <decode_field>
 8021384:	4603      	mov	r3, r0
 8021386:	f083 0301 	eor.w	r3, r3, #1
 802138a:	b2db      	uxtb	r3, r3
 802138c:	2b00      	cmp	r3, #0
 802138e:	d004      	beq.n	802139a <pb_decode_noinit+0x198>
            return false;
 8021390:	2300      	movs	r3, #0
 8021392:	e065      	b.n	8021460 <pb_decode_noinit+0x25e>
                        continue;
 8021394:	bf00      	nop
 8021396:	e000      	b.n	802139a <pb_decode_noinit+0x198>
            continue;
 8021398:	bf00      	nop
    while (stream->bytes_left)
 802139a:	68fb      	ldr	r3, [r7, #12]
 802139c:	689b      	ldr	r3, [r3, #8]
 802139e:	2b00      	cmp	r3, #0
 80213a0:	f47f af4a 	bne.w	8021238 <pb_decode_noinit+0x36>
 80213a4:	e000      	b.n	80213a8 <pb_decode_noinit+0x1a6>
                break;
 80213a6:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != NULL &&
 80213a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80213aa:	2b00      	cmp	r3, #0
 80213ac:	d006      	beq.n	80213bc <pb_decode_noinit+0x1ba>
        fixed_count_size != fixed_count_field->array_size)
 80213ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80213b0:	895a      	ldrh	r2, [r3, #10]
 80213b2:	8bfb      	ldrh	r3, [r7, #30]
    if (fixed_count_field != NULL &&
 80213b4:	429a      	cmp	r2, r3
 80213b6:	d001      	beq.n	80213bc <pb_decode_noinit+0x1ba>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 80213b8:	2300      	movs	r3, #0
 80213ba:	e051      	b.n	8021460 <pb_decode_noinit+0x25e>
         */
        unsigned req_field_count;
        pb_type_t last_type;
        unsigned i;
        do {
            req_field_count = iter.required_field_index;
 80213bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80213be:	657b      	str	r3, [r7, #84]	@ 0x54
            last_type = iter.pos->type;
 80213c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80213c2:	789b      	ldrb	r3, [r3, #2]
 80213c4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
        } while (pb_field_iter_next(&iter));
 80213c8:	f107 0320 	add.w	r3, r7, #32
 80213cc:	4618      	mov	r0, r3
 80213ce:	f7ff f878 	bl	80204c2 <pb_field_iter_next>
 80213d2:	4603      	mov	r3, r0
 80213d4:	2b00      	cmp	r3, #0
 80213d6:	d1f1      	bne.n	80213bc <pb_decode_noinit+0x1ba>
        
        /* Fixup if last field was also required. */
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 80213d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80213dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80213e0:	2b00      	cmp	r3, #0
 80213e2:	d106      	bne.n	80213f2 <pb_decode_noinit+0x1f0>
 80213e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80213e6:	881b      	ldrh	r3, [r3, #0]
 80213e8:	2b00      	cmp	r3, #0
 80213ea:	d002      	beq.n	80213f2 <pb_decode_noinit+0x1f0>
            req_field_count++;
 80213ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80213ee:	3301      	adds	r3, #1
 80213f0:	657b      	str	r3, [r7, #84]	@ 0x54
        
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 80213f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80213f4:	2b40      	cmp	r3, #64	@ 0x40
 80213f6:	d901      	bls.n	80213fc <pb_decode_noinit+0x1fa>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 80213f8:	2340      	movs	r3, #64	@ 0x40
 80213fa:	657b      	str	r3, [r7, #84]	@ 0x54

        if (req_field_count > 0)
 80213fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80213fe:	2b00      	cmp	r3, #0
 8021400:	d02d      	beq.n	802145e <pb_decode_noinit+0x25c>
        {
            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 8021402:	2300      	movs	r3, #0
 8021404:	653b      	str	r3, [r7, #80]	@ 0x50
 8021406:	e00d      	b.n	8021424 <pb_decode_noinit+0x222>
            {
                if (fields_seen[i] != allbits)
 8021408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802140a:	009b      	lsls	r3, r3, #2
 802140c:	3360      	adds	r3, #96	@ 0x60
 802140e:	443b      	add	r3, r7
 8021410:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8021414:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8021416:	429a      	cmp	r2, r3
 8021418:	d001      	beq.n	802141e <pb_decode_noinit+0x21c>
                    PB_RETURN_ERROR(stream, "missing required field");
 802141a:	2300      	movs	r3, #0
 802141c:	e020      	b.n	8021460 <pb_decode_noinit+0x25e>
            for (i = 0; i < (req_field_count >> 5); i++)
 802141e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021420:	3301      	adds	r3, #1
 8021422:	653b      	str	r3, [r7, #80]	@ 0x50
 8021424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021426:	095b      	lsrs	r3, r3, #5
 8021428:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802142a:	429a      	cmp	r2, r3
 802142c:	d3ec      	bcc.n	8021408 <pb_decode_noinit+0x206>
            }
            
            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 802142e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021430:	f003 031f 	and.w	r3, r3, #31
 8021434:	2b00      	cmp	r3, #0
 8021436:	d012      	beq.n	802145e <pb_decode_noinit+0x25c>
            {
                if (fields_seen[req_field_count >> 5] !=
 8021438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802143a:	095b      	lsrs	r3, r3, #5
 802143c:	009b      	lsls	r3, r3, #2
 802143e:	3360      	adds	r3, #96	@ 0x60
 8021440:	443b      	add	r3, r7
 8021442:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (32 - (req_field_count & 31))))
 8021446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021448:	f003 031f 	and.w	r3, r3, #31
 802144c:	f1c3 0320 	rsb	r3, r3, #32
 8021450:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8021452:	fa21 f303 	lsr.w	r3, r1, r3
                if (fields_seen[req_field_count >> 5] !=
 8021456:	429a      	cmp	r2, r3
 8021458:	d001      	beq.n	802145e <pb_decode_noinit+0x25c>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 802145a:	2300      	movs	r3, #0
 802145c:	e000      	b.n	8021460 <pb_decode_noinit+0x25e>
                }
            }
        }
    }
    
    return true;
 802145e:	2301      	movs	r3, #1
}
 8021460:	4618      	mov	r0, r3
 8021462:	3760      	adds	r7, #96	@ 0x60
 8021464:	46bd      	mov	sp, r7
 8021466:	bd80      	pop	{r7, pc}

08021468 <pb_decode>:

bool checkreturn pb_decode(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 8021468:	b580      	push	{r7, lr}
 802146a:	b086      	sub	sp, #24
 802146c:	af00      	add	r7, sp, #0
 802146e:	60f8      	str	r0, [r7, #12]
 8021470:	60b9      	str	r1, [r7, #8]
 8021472:	607a      	str	r2, [r7, #4]
    bool status;
    pb_message_set_to_defaults(fields, dest_struct);
 8021474:	6879      	ldr	r1, [r7, #4]
 8021476:	68b8      	ldr	r0, [r7, #8]
 8021478:	f7ff fe9f 	bl	80211ba <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 802147c:	687a      	ldr	r2, [r7, #4]
 802147e:	68b9      	ldr	r1, [r7, #8]
 8021480:	68f8      	ldr	r0, [r7, #12]
 8021482:	f7ff febe 	bl	8021202 <pb_decode_noinit>
 8021486:	4603      	mov	r3, r0
 8021488:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif
    
    return status;
 802148a:	7dfb      	ldrb	r3, [r7, #23]
}
 802148c:	4618      	mov	r0, r3
 802148e:	3718      	adds	r7, #24
 8021490:	46bd      	mov	sp, r7
 8021492:	bd80      	pop	{r7, pc}

08021494 <pb_decode_delimited>:
        return false;
    return status;
}

bool pb_decode_delimited(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 8021494:	b580      	push	{r7, lr}
 8021496:	b088      	sub	sp, #32
 8021498:	af00      	add	r7, sp, #0
 802149a:	60f8      	str	r0, [r7, #12]
 802149c:	60b9      	str	r1, [r7, #8]
 802149e:	607a      	str	r2, [r7, #4]
    pb_istream_t substream;
    bool status;
    
    if (!pb_make_string_substream(stream, &substream))
 80214a0:	f107 0310 	add.w	r3, r7, #16
 80214a4:	4619      	mov	r1, r3
 80214a6:	68f8      	ldr	r0, [r7, #12]
 80214a8:	f7ff fb37 	bl	8020b1a <pb_make_string_substream>
 80214ac:	4603      	mov	r3, r0
 80214ae:	f083 0301 	eor.w	r3, r3, #1
 80214b2:	b2db      	uxtb	r3, r3
 80214b4:	2b00      	cmp	r3, #0
 80214b6:	d001      	beq.n	80214bc <pb_decode_delimited+0x28>
        return false;
 80214b8:	2300      	movs	r3, #0
 80214ba:	e017      	b.n	80214ec <pb_decode_delimited+0x58>
    
    status = pb_decode(&substream, fields, dest_struct);
 80214bc:	f107 0310 	add.w	r3, r7, #16
 80214c0:	687a      	ldr	r2, [r7, #4]
 80214c2:	68b9      	ldr	r1, [r7, #8]
 80214c4:	4618      	mov	r0, r3
 80214c6:	f7ff ffcf 	bl	8021468 <pb_decode>
 80214ca:	4603      	mov	r3, r0
 80214cc:	77fb      	strb	r3, [r7, #31]

    if (!pb_close_string_substream(stream, &substream))
 80214ce:	f107 0310 	add.w	r3, r7, #16
 80214d2:	4619      	mov	r1, r3
 80214d4:	68f8      	ldr	r0, [r7, #12]
 80214d6:	f7ff fb4d 	bl	8020b74 <pb_close_string_substream>
 80214da:	4603      	mov	r3, r0
 80214dc:	f083 0301 	eor.w	r3, r3, #1
 80214e0:	b2db      	uxtb	r3, r3
 80214e2:	2b00      	cmp	r3, #0
 80214e4:	d001      	beq.n	80214ea <pb_decode_delimited+0x56>
        return false;
 80214e6:	2300      	movs	r3, #0
 80214e8:	e000      	b.n	80214ec <pb_decode_delimited+0x58>
    return status;
 80214ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80214ec:	4618      	mov	r0, r3
 80214ee:	3720      	adds	r7, #32
 80214f0:	46bd      	mov	sp, r7
 80214f2:	bd80      	pop	{r7, pc}

080214f4 <pb_decode_svarint>:
#endif

/* Field decoders */

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 80214f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80214f8:	b084      	sub	sp, #16
 80214fa:	af00      	add	r7, sp, #0
 80214fc:	6078      	str	r0, [r7, #4]
 80214fe:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 8021500:	f107 0308 	add.w	r3, r7, #8
 8021504:	4619      	mov	r1, r3
 8021506:	6878      	ldr	r0, [r7, #4]
 8021508:	f7ff f9ba 	bl	8020880 <pb_decode_varint>
 802150c:	4603      	mov	r3, r0
 802150e:	f083 0301 	eor.w	r3, r3, #1
 8021512:	b2db      	uxtb	r3, r3
 8021514:	2b00      	cmp	r3, #0
 8021516:	d001      	beq.n	802151c <pb_decode_svarint+0x28>
        return false;
 8021518:	2300      	movs	r3, #0
 802151a:	e029      	b.n	8021570 <pb_decode_svarint+0x7c>
    
    if (value & 1)
 802151c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021520:	f002 0401 	and.w	r4, r2, #1
 8021524:	2500      	movs	r5, #0
 8021526:	ea54 0305 	orrs.w	r3, r4, r5
 802152a:	d013      	beq.n	8021554 <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 802152c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8021530:	f04f 0200 	mov.w	r2, #0
 8021534:	f04f 0300 	mov.w	r3, #0
 8021538:	0842      	lsrs	r2, r0, #1
 802153a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 802153e:	084b      	lsrs	r3, r1, #1
 8021540:	ea6f 0802 	mvn.w	r8, r2
 8021544:	ea6f 0903 	mvn.w	r9, r3
 8021548:	4642      	mov	r2, r8
 802154a:	464b      	mov	r3, r9
 802154c:	6839      	ldr	r1, [r7, #0]
 802154e:	e9c1 2300 	strd	r2, r3, [r1]
 8021552:	e00c      	b.n	802156e <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 8021554:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8021558:	f04f 0200 	mov.w	r2, #0
 802155c:	f04f 0300 	mov.w	r3, #0
 8021560:	0842      	lsrs	r2, r0, #1
 8021562:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8021566:	084b      	lsrs	r3, r1, #1
 8021568:	6839      	ldr	r1, [r7, #0]
 802156a:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 802156e:	2301      	movs	r3, #1
}
 8021570:	4618      	mov	r0, r3
 8021572:	3710      	adds	r7, #16
 8021574:	46bd      	mov	sp, r7
 8021576:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0802157a <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 802157a:	b580      	push	{r7, lr}
 802157c:	b084      	sub	sp, #16
 802157e:	af00      	add	r7, sp, #0
 8021580:	6078      	str	r0, [r7, #4]
 8021582:	6039      	str	r1, [r7, #0]
    pb_byte_t bytes[4];

    if (!pb_read(stream, bytes, 4))
 8021584:	f107 030c 	add.w	r3, r7, #12
 8021588:	2204      	movs	r2, #4
 802158a:	4619      	mov	r1, r3
 802158c:	6878      	ldr	r0, [r7, #4]
 802158e:	f7ff f863 	bl	8020658 <pb_read>
 8021592:	4603      	mov	r3, r0
 8021594:	f083 0301 	eor.w	r3, r3, #1
 8021598:	b2db      	uxtb	r3, r3
 802159a:	2b00      	cmp	r3, #0
 802159c:	d001      	beq.n	80215a2 <pb_decode_fixed32+0x28>
        return false;
 802159e:	2300      	movs	r3, #0
 80215a0:	e00d      	b.n	80215be <pb_decode_fixed32+0x44>
    
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 80215a2:	7b3b      	ldrb	r3, [r7, #12]
 80215a4:	461a      	mov	r2, r3
                       ((uint32_t)bytes[1] << 8) |
 80215a6:	7b7b      	ldrb	r3, [r7, #13]
 80215a8:	021b      	lsls	r3, r3, #8
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 80215aa:	431a      	orrs	r2, r3
                       ((uint32_t)bytes[2] << 16) |
 80215ac:	7bbb      	ldrb	r3, [r7, #14]
 80215ae:	041b      	lsls	r3, r3, #16
                       ((uint32_t)bytes[1] << 8) |
 80215b0:	431a      	orrs	r2, r3
                       ((uint32_t)bytes[3] << 24);
 80215b2:	7bfb      	ldrb	r3, [r7, #15]
 80215b4:	061b      	lsls	r3, r3, #24
                       ((uint32_t)bytes[2] << 16) |
 80215b6:	431a      	orrs	r2, r3
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 80215b8:	683b      	ldr	r3, [r7, #0]
 80215ba:	601a      	str	r2, [r3, #0]
    return true;
 80215bc:	2301      	movs	r3, #1
}
 80215be:	4618      	mov	r0, r3
 80215c0:	3710      	adds	r7, #16
 80215c2:	46bd      	mov	sp, r7
 80215c4:	bd80      	pop	{r7, pc}

080215c6 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 80215c6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80215ca:	b09e      	sub	sp, #120	@ 0x78
 80215cc:	af00      	add	r7, sp, #0
 80215ce:	66f8      	str	r0, [r7, #108]	@ 0x6c
 80215d0:	66b9      	str	r1, [r7, #104]	@ 0x68
    pb_byte_t bytes[8];

    if (!pb_read(stream, bytes, 8))
 80215d2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80215d6:	2208      	movs	r2, #8
 80215d8:	4619      	mov	r1, r3
 80215da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80215dc:	f7ff f83c 	bl	8020658 <pb_read>
 80215e0:	4603      	mov	r3, r0
 80215e2:	f083 0301 	eor.w	r3, r3, #1
 80215e6:	b2db      	uxtb	r3, r3
 80215e8:	2b00      	cmp	r3, #0
 80215ea:	d001      	beq.n	80215f0 <pb_decode_fixed64+0x2a>
        return false;
 80215ec:	2300      	movs	r3, #0
 80215ee:	e0a6      	b.n	802173e <pb_decode_fixed64+0x178>
    
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 80215f0:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80215f4:	b2db      	uxtb	r3, r3
 80215f6:	2200      	movs	r2, #0
 80215f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80215fa:	667a      	str	r2, [r7, #100]	@ 0x64
                       ((uint64_t)bytes[1] << 8) |
 80215fc:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8021600:	b2db      	uxtb	r3, r3
 8021602:	2200      	movs	r2, #0
 8021604:	461c      	mov	r4, r3
 8021606:	4615      	mov	r5, r2
 8021608:	f04f 0200 	mov.w	r2, #0
 802160c:	f04f 0300 	mov.w	r3, #0
 8021610:	022b      	lsls	r3, r5, #8
 8021612:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8021616:	0222      	lsls	r2, r4, #8
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 8021618:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 802161c:	4621      	mov	r1, r4
 802161e:	ea41 0a02 	orr.w	sl, r1, r2
 8021622:	4629      	mov	r1, r5
 8021624:	ea41 0b03 	orr.w	fp, r1, r3
                       ((uint64_t)bytes[2] << 16) |
 8021628:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 802162c:	b2db      	uxtb	r3, r3
 802162e:	2200      	movs	r2, #0
 8021630:	65bb      	str	r3, [r7, #88]	@ 0x58
 8021632:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8021634:	f04f 0200 	mov.w	r2, #0
 8021638:	f04f 0300 	mov.w	r3, #0
 802163c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8021640:	4629      	mov	r1, r5
 8021642:	040b      	lsls	r3, r1, #16
 8021644:	4621      	mov	r1, r4
 8021646:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 802164a:	4621      	mov	r1, r4
 802164c:	040a      	lsls	r2, r1, #16
                       ((uint64_t)bytes[1] << 8) |
 802164e:	ea4a 0102 	orr.w	r1, sl, r2
 8021652:	6539      	str	r1, [r7, #80]	@ 0x50
 8021654:	ea4b 0303 	orr.w	r3, fp, r3
 8021658:	657b      	str	r3, [r7, #84]	@ 0x54
                       ((uint64_t)bytes[3] << 24) |
 802165a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 802165e:	b2db      	uxtb	r3, r3
 8021660:	2200      	movs	r2, #0
 8021662:	64bb      	str	r3, [r7, #72]	@ 0x48
 8021664:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8021666:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 802166a:	460b      	mov	r3, r1
 802166c:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8021670:	460b      	mov	r3, r1
 8021672:	ea4f 6803 	mov.w	r8, r3, lsl #24
                       ((uint64_t)bytes[2] << 16) |
 8021676:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 802167a:	460b      	mov	r3, r1
 802167c:	ea43 0308 	orr.w	r3, r3, r8
 8021680:	643b      	str	r3, [r7, #64]	@ 0x40
 8021682:	4613      	mov	r3, r2
 8021684:	ea43 0309 	orr.w	r3, r3, r9
 8021688:	647b      	str	r3, [r7, #68]	@ 0x44
                       ((uint64_t)bytes[4] << 32) |
 802168a:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 802168e:	b2db      	uxtb	r3, r3
 8021690:	2200      	movs	r2, #0
 8021692:	63bb      	str	r3, [r7, #56]	@ 0x38
 8021694:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8021696:	f04f 0200 	mov.w	r2, #0
 802169a:	f04f 0300 	mov.w	r3, #0
 802169e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80216a0:	000b      	movs	r3, r1
 80216a2:	2200      	movs	r2, #0
                       ((uint64_t)bytes[3] << 24) |
 80216a4:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80216a8:	4621      	mov	r1, r4
 80216aa:	4311      	orrs	r1, r2
 80216ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80216ae:	4629      	mov	r1, r5
 80216b0:	4319      	orrs	r1, r3
 80216b2:	6379      	str	r1, [r7, #52]	@ 0x34
                       ((uint64_t)bytes[5] << 40) |
 80216b4:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80216b8:	b2db      	uxtb	r3, r3
 80216ba:	2200      	movs	r2, #0
 80216bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80216be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80216c0:	f04f 0200 	mov.w	r2, #0
 80216c4:	f04f 0300 	mov.w	r3, #0
 80216c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80216ca:	020b      	lsls	r3, r1, #8
 80216cc:	2200      	movs	r2, #0
                       ((uint64_t)bytes[4] << 32) |
 80216ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80216d2:	4621      	mov	r1, r4
 80216d4:	4311      	orrs	r1, r2
 80216d6:	6239      	str	r1, [r7, #32]
 80216d8:	4629      	mov	r1, r5
 80216da:	4319      	orrs	r1, r3
 80216dc:	6279      	str	r1, [r7, #36]	@ 0x24
                       ((uint64_t)bytes[6] << 48) |
 80216de:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80216e2:	b2db      	uxtb	r3, r3
 80216e4:	2200      	movs	r2, #0
 80216e6:	61bb      	str	r3, [r7, #24]
 80216e8:	61fa      	str	r2, [r7, #28]
 80216ea:	f04f 0200 	mov.w	r2, #0
 80216ee:	f04f 0300 	mov.w	r3, #0
 80216f2:	69b9      	ldr	r1, [r7, #24]
 80216f4:	040b      	lsls	r3, r1, #16
 80216f6:	2200      	movs	r2, #0
                       ((uint64_t)bytes[5] << 40) |
 80216f8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80216fc:	4621      	mov	r1, r4
 80216fe:	4311      	orrs	r1, r2
 8021700:	6139      	str	r1, [r7, #16]
 8021702:	4629      	mov	r1, r5
 8021704:	4319      	orrs	r1, r3
 8021706:	6179      	str	r1, [r7, #20]
                       ((uint64_t)bytes[7] << 56);
 8021708:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 802170c:	b2db      	uxtb	r3, r3
 802170e:	2200      	movs	r2, #0
 8021710:	60bb      	str	r3, [r7, #8]
 8021712:	60fa      	str	r2, [r7, #12]
 8021714:	f04f 0200 	mov.w	r2, #0
 8021718:	f04f 0300 	mov.w	r3, #0
 802171c:	68b9      	ldr	r1, [r7, #8]
 802171e:	060b      	lsls	r3, r1, #24
 8021720:	2200      	movs	r2, #0
                       ((uint64_t)bytes[6] << 48) |
 8021722:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8021726:	4621      	mov	r1, r4
 8021728:	4311      	orrs	r1, r2
 802172a:	6039      	str	r1, [r7, #0]
 802172c:	4629      	mov	r1, r5
 802172e:	4319      	orrs	r1, r3
 8021730:	6079      	str	r1, [r7, #4]
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 8021732:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8021734:	e9d7 1200 	ldrd	r1, r2, [r7]
 8021738:	e9c3 1200 	strd	r1, r2, [r3]
    
    return true;
 802173c:	2301      	movs	r3, #1
}
 802173e:	4618      	mov	r0, r3
 8021740:	3778      	adds	r7, #120	@ 0x78
 8021742:	46bd      	mov	sp, r7
 8021744:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08021748 <pb_dec_varint>:
#endif

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 8021748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802174c:	b08c      	sub	sp, #48	@ 0x30
 802174e:	af00      	add	r7, sp, #0
 8021750:	6178      	str	r0, [r7, #20]
 8021752:	6139      	str	r1, [r7, #16]
 8021754:	60fa      	str	r2, [r7, #12]
    pb_uint64_t value;
    pb_int64_t svalue;
    pb_int64_t clamped;
    if (!pb_decode_varint(stream, &value))
 8021756:	f107 0318 	add.w	r3, r7, #24
 802175a:	4619      	mov	r1, r3
 802175c:	6978      	ldr	r0, [r7, #20]
 802175e:	f7ff f88f 	bl	8020880 <pb_decode_varint>
 8021762:	4603      	mov	r3, r0
 8021764:	f083 0301 	eor.w	r3, r3, #1
 8021768:	b2db      	uxtb	r3, r3
 802176a:	2b00      	cmp	r3, #0
 802176c:	d001      	beq.n	8021772 <pb_dec_varint+0x2a>
        return false;
 802176e:	2300      	movs	r3, #0
 8021770:	e061      	b.n	8021836 <pb_dec_varint+0xee>
     * be cast as int32_t, instead of the int64_t that should be used when
     * encoding. Previous nanopb versions had a bug in encoding. In order to
     * not break decoding of such messages, we cast <=32 bit fields to
     * int32_t first to get the sign correct.
     */
    if (field->data_size == sizeof(pb_int64_t))
 8021772:	693b      	ldr	r3, [r7, #16]
 8021774:	891b      	ldrh	r3, [r3, #8]
 8021776:	2b08      	cmp	r3, #8
 8021778:	d104      	bne.n	8021784 <pb_dec_varint+0x3c>
        svalue = (pb_int64_t)value;
 802177a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802177e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8021782:	e009      	b.n	8021798 <pb_dec_varint+0x50>
    else
        svalue = (int32_t)value;
 8021784:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8021788:	4613      	mov	r3, r2
 802178a:	17da      	asrs	r2, r3, #31
 802178c:	603b      	str	r3, [r7, #0]
 802178e:	607a      	str	r2, [r7, #4]
 8021790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021794:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_int64_t))
 8021798:	693b      	ldr	r3, [r7, #16]
 802179a:	891b      	ldrh	r3, [r3, #8]
 802179c:	2b08      	cmp	r3, #8
 802179e:	d10a      	bne.n	80217b6 <pb_dec_varint+0x6e>
        clamped = *(pb_int64_t*)dest = svalue;
 80217a0:	68f9      	ldr	r1, [r7, #12]
 80217a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80217a6:	e9c1 2300 	strd	r2, r3, [r1]
 80217aa:	68fb      	ldr	r3, [r7, #12]
 80217ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80217b4:	e034      	b.n	8021820 <pb_dec_varint+0xd8>
    else if (field->data_size == sizeof(int32_t))
 80217b6:	693b      	ldr	r3, [r7, #16]
 80217b8:	891b      	ldrh	r3, [r3, #8]
 80217ba:	2b04      	cmp	r3, #4
 80217bc:	d10a      	bne.n	80217d4 <pb_dec_varint+0x8c>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 80217be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80217c0:	68fb      	ldr	r3, [r7, #12]
 80217c2:	601a      	str	r2, [r3, #0]
 80217c4:	68fb      	ldr	r3, [r7, #12]
 80217c6:	681b      	ldr	r3, [r3, #0]
 80217c8:	17da      	asrs	r2, r3, #31
 80217ca:	469a      	mov	sl, r3
 80217cc:	4693      	mov	fp, r2
 80217ce:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 80217d2:	e025      	b.n	8021820 <pb_dec_varint+0xd8>
    else if (field->data_size == sizeof(int_least16_t))
 80217d4:	693b      	ldr	r3, [r7, #16]
 80217d6:	891b      	ldrh	r3, [r3, #8]
 80217d8:	2b02      	cmp	r3, #2
 80217da:	d10d      	bne.n	80217f8 <pb_dec_varint+0xb0>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 80217dc:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 80217e0:	68fb      	ldr	r3, [r7, #12]
 80217e2:	801a      	strh	r2, [r3, #0]
 80217e4:	68fb      	ldr	r3, [r7, #12]
 80217e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80217ea:	b21b      	sxth	r3, r3
 80217ec:	17da      	asrs	r2, r3, #31
 80217ee:	4698      	mov	r8, r3
 80217f0:	4691      	mov	r9, r2
 80217f2:	e9c7 8908 	strd	r8, r9, [r7, #32]
 80217f6:	e013      	b.n	8021820 <pb_dec_varint+0xd8>
    else if (field->data_size == sizeof(int_least8_t))
 80217f8:	693b      	ldr	r3, [r7, #16]
 80217fa:	891b      	ldrh	r3, [r3, #8]
 80217fc:	2b01      	cmp	r3, #1
 80217fe:	d10d      	bne.n	802181c <pb_dec_varint+0xd4>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 8021800:	f997 2028 	ldrsb.w	r2, [r7, #40]	@ 0x28
 8021804:	68fb      	ldr	r3, [r7, #12]
 8021806:	701a      	strb	r2, [r3, #0]
 8021808:	68fb      	ldr	r3, [r7, #12]
 802180a:	f993 3000 	ldrsb.w	r3, [r3]
 802180e:	b25b      	sxtb	r3, r3
 8021810:	17da      	asrs	r2, r3, #31
 8021812:	461c      	mov	r4, r3
 8021814:	4615      	mov	r5, r2
 8021816:	e9c7 4508 	strd	r4, r5, [r7, #32]
 802181a:	e001      	b.n	8021820 <pb_dec_varint+0xd8>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 802181c:	2300      	movs	r3, #0
 802181e:	e00a      	b.n	8021836 <pb_dec_varint+0xee>

    if (clamped != svalue)
 8021820:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8021824:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8021828:	4299      	cmp	r1, r3
 802182a:	bf08      	it	eq
 802182c:	4290      	cmpeq	r0, r2
 802182e:	d001      	beq.n	8021834 <pb_dec_varint+0xec>
        PB_RETURN_ERROR(stream, "integer too large");
 8021830:	2300      	movs	r3, #0
 8021832:	e000      	b.n	8021836 <pb_dec_varint+0xee>
    
    return true;
 8021834:	2301      	movs	r3, #1
}
 8021836:	4618      	mov	r0, r3
 8021838:	3730      	adds	r7, #48	@ 0x30
 802183a:	46bd      	mov	sp, r7
 802183c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08021840 <pb_dec_uvarint>:

static bool checkreturn pb_dec_uvarint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 8021840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8021844:	b088      	sub	sp, #32
 8021846:	af00      	add	r7, sp, #0
 8021848:	60f8      	str	r0, [r7, #12]
 802184a:	60b9      	str	r1, [r7, #8]
 802184c:	607a      	str	r2, [r7, #4]
    pb_uint64_t value, clamped;
    if (!pb_decode_varint(stream, &value))
 802184e:	f107 0310 	add.w	r3, r7, #16
 8021852:	4619      	mov	r1, r3
 8021854:	68f8      	ldr	r0, [r7, #12]
 8021856:	f7ff f813 	bl	8020880 <pb_decode_varint>
 802185a:	4603      	mov	r3, r0
 802185c:	f083 0301 	eor.w	r3, r3, #1
 8021860:	b2db      	uxtb	r3, r3
 8021862:	2b00      	cmp	r3, #0
 8021864:	d001      	beq.n	802186a <pb_dec_uvarint+0x2a>
        return false;
 8021866:	2300      	movs	r3, #0
 8021868:	e04f      	b.n	802190a <pb_dec_uvarint+0xca>
    
    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_uint64_t))
 802186a:	68bb      	ldr	r3, [r7, #8]
 802186c:	891b      	ldrh	r3, [r3, #8]
 802186e:	2b08      	cmp	r3, #8
 8021870:	d10a      	bne.n	8021888 <pb_dec_uvarint+0x48>
        clamped = *(pb_uint64_t*)dest = value;
 8021872:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8021876:	6879      	ldr	r1, [r7, #4]
 8021878:	e9c1 2300 	strd	r2, r3, [r1]
 802187c:	687b      	ldr	r3, [r7, #4]
 802187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021882:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8021886:	e035      	b.n	80218f4 <pb_dec_uvarint+0xb4>
    else if (field->data_size == sizeof(uint32_t))
 8021888:	68bb      	ldr	r3, [r7, #8]
 802188a:	891b      	ldrh	r3, [r3, #8]
 802188c:	2b04      	cmp	r3, #4
 802188e:	d10b      	bne.n	80218a8 <pb_dec_uvarint+0x68>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 8021890:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8021894:	687b      	ldr	r3, [r7, #4]
 8021896:	601a      	str	r2, [r3, #0]
 8021898:	687b      	ldr	r3, [r7, #4]
 802189a:	681b      	ldr	r3, [r3, #0]
 802189c:	2200      	movs	r2, #0
 802189e:	469a      	mov	sl, r3
 80218a0:	4693      	mov	fp, r2
 80218a2:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 80218a6:	e025      	b.n	80218f4 <pb_dec_uvarint+0xb4>
    else if (field->data_size == sizeof(uint_least16_t))
 80218a8:	68bb      	ldr	r3, [r7, #8]
 80218aa:	891b      	ldrh	r3, [r3, #8]
 80218ac:	2b02      	cmp	r3, #2
 80218ae:	d10d      	bne.n	80218cc <pb_dec_uvarint+0x8c>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 80218b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80218b4:	b292      	uxth	r2, r2
 80218b6:	687b      	ldr	r3, [r7, #4]
 80218b8:	801a      	strh	r2, [r3, #0]
 80218ba:	687b      	ldr	r3, [r7, #4]
 80218bc:	881b      	ldrh	r3, [r3, #0]
 80218be:	b29b      	uxth	r3, r3
 80218c0:	2200      	movs	r2, #0
 80218c2:	4698      	mov	r8, r3
 80218c4:	4691      	mov	r9, r2
 80218c6:	e9c7 8906 	strd	r8, r9, [r7, #24]
 80218ca:	e013      	b.n	80218f4 <pb_dec_uvarint+0xb4>
    else if (field->data_size == sizeof(uint_least8_t))
 80218cc:	68bb      	ldr	r3, [r7, #8]
 80218ce:	891b      	ldrh	r3, [r3, #8]
 80218d0:	2b01      	cmp	r3, #1
 80218d2:	d10d      	bne.n	80218f0 <pb_dec_uvarint+0xb0>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 80218d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80218d8:	b2d2      	uxtb	r2, r2
 80218da:	687b      	ldr	r3, [r7, #4]
 80218dc:	701a      	strb	r2, [r3, #0]
 80218de:	687b      	ldr	r3, [r7, #4]
 80218e0:	781b      	ldrb	r3, [r3, #0]
 80218e2:	b2db      	uxtb	r3, r3
 80218e4:	2200      	movs	r2, #0
 80218e6:	461c      	mov	r4, r3
 80218e8:	4615      	mov	r5, r2
 80218ea:	e9c7 4506 	strd	r4, r5, [r7, #24]
 80218ee:	e001      	b.n	80218f4 <pb_dec_uvarint+0xb4>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 80218f0:	2300      	movs	r3, #0
 80218f2:	e00a      	b.n	802190a <pb_dec_uvarint+0xca>
    
    if (clamped != value)
 80218f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80218f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80218fc:	4299      	cmp	r1, r3
 80218fe:	bf08      	it	eq
 8021900:	4290      	cmpeq	r0, r2
 8021902:	d001      	beq.n	8021908 <pb_dec_uvarint+0xc8>
        PB_RETURN_ERROR(stream, "integer too large");
 8021904:	2300      	movs	r3, #0
 8021906:	e000      	b.n	802190a <pb_dec_uvarint+0xca>

    return true;
 8021908:	2301      	movs	r3, #1
}
 802190a:	4618      	mov	r0, r3
 802190c:	3720      	adds	r7, #32
 802190e:	46bd      	mov	sp, r7
 8021910:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08021914 <pb_dec_svarint>:

static bool checkreturn pb_dec_svarint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 8021914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8021918:	b088      	sub	sp, #32
 802191a:	af00      	add	r7, sp, #0
 802191c:	60f8      	str	r0, [r7, #12]
 802191e:	60b9      	str	r1, [r7, #8]
 8021920:	607a      	str	r2, [r7, #4]
    pb_int64_t value, clamped;
    if (!pb_decode_svarint(stream, &value))
 8021922:	f107 0310 	add.w	r3, r7, #16
 8021926:	4619      	mov	r1, r3
 8021928:	68f8      	ldr	r0, [r7, #12]
 802192a:	f7ff fde3 	bl	80214f4 <pb_decode_svarint>
 802192e:	4603      	mov	r3, r0
 8021930:	f083 0301 	eor.w	r3, r3, #1
 8021934:	b2db      	uxtb	r3, r3
 8021936:	2b00      	cmp	r3, #0
 8021938:	d001      	beq.n	802193e <pb_dec_svarint+0x2a>
        return false;
 802193a:	2300      	movs	r3, #0
 802193c:	e051      	b.n	80219e2 <pb_dec_svarint+0xce>
    
    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_int64_t))
 802193e:	68bb      	ldr	r3, [r7, #8]
 8021940:	891b      	ldrh	r3, [r3, #8]
 8021942:	2b08      	cmp	r3, #8
 8021944:	d10a      	bne.n	802195c <pb_dec_svarint+0x48>
        clamped = *(pb_int64_t*)dest = value;
 8021946:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802194a:	6879      	ldr	r1, [r7, #4]
 802194c:	e9c1 2300 	strd	r2, r3, [r1]
 8021950:	687b      	ldr	r3, [r7, #4]
 8021952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021956:	e9c7 2306 	strd	r2, r3, [r7, #24]
 802195a:	e037      	b.n	80219cc <pb_dec_svarint+0xb8>
    else if (field->data_size == sizeof(int32_t))
 802195c:	68bb      	ldr	r3, [r7, #8]
 802195e:	891b      	ldrh	r3, [r3, #8]
 8021960:	2b04      	cmp	r3, #4
 8021962:	d10b      	bne.n	802197c <pb_dec_svarint+0x68>
        clamped = *(int32_t*)dest = (int32_t)value;
 8021964:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8021968:	687b      	ldr	r3, [r7, #4]
 802196a:	601a      	str	r2, [r3, #0]
 802196c:	687b      	ldr	r3, [r7, #4]
 802196e:	681b      	ldr	r3, [r3, #0]
 8021970:	17da      	asrs	r2, r3, #31
 8021972:	469a      	mov	sl, r3
 8021974:	4693      	mov	fp, r2
 8021976:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 802197a:	e027      	b.n	80219cc <pb_dec_svarint+0xb8>
    else if (field->data_size == sizeof(int_least16_t))
 802197c:	68bb      	ldr	r3, [r7, #8]
 802197e:	891b      	ldrh	r3, [r3, #8]
 8021980:	2b02      	cmp	r3, #2
 8021982:	d10e      	bne.n	80219a2 <pb_dec_svarint+0x8e>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 8021984:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8021988:	b212      	sxth	r2, r2
 802198a:	687b      	ldr	r3, [r7, #4]
 802198c:	801a      	strh	r2, [r3, #0]
 802198e:	687b      	ldr	r3, [r7, #4]
 8021990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021994:	b21b      	sxth	r3, r3
 8021996:	17da      	asrs	r2, r3, #31
 8021998:	4698      	mov	r8, r3
 802199a:	4691      	mov	r9, r2
 802199c:	e9c7 8906 	strd	r8, r9, [r7, #24]
 80219a0:	e014      	b.n	80219cc <pb_dec_svarint+0xb8>
    else if (field->data_size == sizeof(int_least8_t))
 80219a2:	68bb      	ldr	r3, [r7, #8]
 80219a4:	891b      	ldrh	r3, [r3, #8]
 80219a6:	2b01      	cmp	r3, #1
 80219a8:	d10e      	bne.n	80219c8 <pb_dec_svarint+0xb4>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 80219aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80219ae:	b252      	sxtb	r2, r2
 80219b0:	687b      	ldr	r3, [r7, #4]
 80219b2:	701a      	strb	r2, [r3, #0]
 80219b4:	687b      	ldr	r3, [r7, #4]
 80219b6:	f993 3000 	ldrsb.w	r3, [r3]
 80219ba:	b25b      	sxtb	r3, r3
 80219bc:	17da      	asrs	r2, r3, #31
 80219be:	461c      	mov	r4, r3
 80219c0:	4615      	mov	r5, r2
 80219c2:	e9c7 4506 	strd	r4, r5, [r7, #24]
 80219c6:	e001      	b.n	80219cc <pb_dec_svarint+0xb8>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 80219c8:	2300      	movs	r3, #0
 80219ca:	e00a      	b.n	80219e2 <pb_dec_svarint+0xce>

    if (clamped != value)
 80219cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80219d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80219d4:	4299      	cmp	r1, r3
 80219d6:	bf08      	it	eq
 80219d8:	4290      	cmpeq	r0, r2
 80219da:	d001      	beq.n	80219e0 <pb_dec_svarint+0xcc>
        PB_RETURN_ERROR(stream, "integer too large");
 80219dc:	2300      	movs	r3, #0
 80219de:	e000      	b.n	80219e2 <pb_dec_svarint+0xce>
    
    return true;
 80219e0:	2301      	movs	r3, #1
}
 80219e2:	4618      	mov	r0, r3
 80219e4:	3720      	adds	r7, #32
 80219e6:	46bd      	mov	sp, r7
 80219e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080219ec <pb_dec_fixed32>:

static bool checkreturn pb_dec_fixed32(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 80219ec:	b580      	push	{r7, lr}
 80219ee:	b084      	sub	sp, #16
 80219f0:	af00      	add	r7, sp, #0
 80219f2:	60f8      	str	r0, [r7, #12]
 80219f4:	60b9      	str	r1, [r7, #8]
 80219f6:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
    return pb_decode_fixed32(stream, dest);
 80219f8:	6879      	ldr	r1, [r7, #4]
 80219fa:	68f8      	ldr	r0, [r7, #12]
 80219fc:	f7ff fdbd 	bl	802157a <pb_decode_fixed32>
 8021a00:	4603      	mov	r3, r0
}
 8021a02:	4618      	mov	r0, r3
 8021a04:	3710      	adds	r7, #16
 8021a06:	46bd      	mov	sp, r7
 8021a08:	bd80      	pop	{r7, pc}

08021a0a <pb_dec_fixed64>:

static bool checkreturn pb_dec_fixed64(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 8021a0a:	b580      	push	{r7, lr}
 8021a0c:	b084      	sub	sp, #16
 8021a0e:	af00      	add	r7, sp, #0
 8021a10:	60f8      	str	r0, [r7, #12]
 8021a12:	60b9      	str	r1, [r7, #8]
 8021a14:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
#ifndef PB_WITHOUT_64BIT
    return pb_decode_fixed64(stream, dest);
 8021a16:	6879      	ldr	r1, [r7, #4]
 8021a18:	68f8      	ldr	r0, [r7, #12]
 8021a1a:	f7ff fdd4 	bl	80215c6 <pb_decode_fixed64>
 8021a1e:	4603      	mov	r3, r0
#else
    PB_UNUSED(dest);
    PB_RETURN_ERROR(stream, "no 64bit support");
#endif
}
 8021a20:	4618      	mov	r0, r3
 8021a22:	3710      	adds	r7, #16
 8021a24:	46bd      	mov	sp, r7
 8021a26:	bd80      	pop	{r7, pc}

08021a28 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 8021a28:	b580      	push	{r7, lr}
 8021a2a:	b088      	sub	sp, #32
 8021a2c:	af00      	add	r7, sp, #0
 8021a2e:	60f8      	str	r0, [r7, #12]
 8021a30:	60b9      	str	r1, [r7, #8]
 8021a32:	607a      	str	r2, [r7, #4]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *bdest;
    
    if (!pb_decode_varint32(stream, &size))
 8021a34:	f107 0314 	add.w	r3, r7, #20
 8021a38:	4619      	mov	r1, r3
 8021a3a:	68f8      	ldr	r0, [r7, #12]
 8021a3c:	f7fe ff11 	bl	8020862 <pb_decode_varint32>
 8021a40:	4603      	mov	r3, r0
 8021a42:	f083 0301 	eor.w	r3, r3, #1
 8021a46:	b2db      	uxtb	r3, r3
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	d001      	beq.n	8021a50 <pb_dec_bytes+0x28>
        return false;
 8021a4c:	2300      	movs	r3, #0
 8021a4e:	e02c      	b.n	8021aaa <pb_dec_bytes+0x82>
    
    if (size > PB_SIZE_MAX)
 8021a50:	697b      	ldr	r3, [r7, #20]
 8021a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021a56:	d301      	bcc.n	8021a5c <pb_dec_bytes+0x34>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8021a58:	2300      	movs	r3, #0
 8021a5a:	e026      	b.n	8021aaa <pb_dec_bytes+0x82>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 8021a5c:	697b      	ldr	r3, [r7, #20]
 8021a5e:	3302      	adds	r3, #2
 8021a60:	61fb      	str	r3, [r7, #28]
    if (size > alloc_size)
 8021a62:	697b      	ldr	r3, [r7, #20]
 8021a64:	69fa      	ldr	r2, [r7, #28]
 8021a66:	429a      	cmp	r2, r3
 8021a68:	d201      	bcs.n	8021a6e <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "size too large");
 8021a6a:	2300      	movs	r3, #0
 8021a6c:	e01d      	b.n	8021aaa <pb_dec_bytes+0x82>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8021a6e:	68bb      	ldr	r3, [r7, #8]
 8021a70:	789b      	ldrb	r3, [r3, #2]
 8021a72:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8021a76:	2b80      	cmp	r3, #128	@ 0x80
 8021a78:	d101      	bne.n	8021a7e <pb_dec_bytes+0x56>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8021a7a:	2300      	movs	r3, #0
 8021a7c:	e015      	b.n	8021aaa <pb_dec_bytes+0x82>
        bdest = *(pb_bytes_array_t**)dest;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8021a7e:	68bb      	ldr	r3, [r7, #8]
 8021a80:	891b      	ldrh	r3, [r3, #8]
 8021a82:	461a      	mov	r2, r3
 8021a84:	69fb      	ldr	r3, [r7, #28]
 8021a86:	4293      	cmp	r3, r2
 8021a88:	d901      	bls.n	8021a8e <pb_dec_bytes+0x66>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8021a8a:	2300      	movs	r3, #0
 8021a8c:	e00d      	b.n	8021aaa <pb_dec_bytes+0x82>
        bdest = (pb_bytes_array_t*)dest;
 8021a8e:	687b      	ldr	r3, [r7, #4]
 8021a90:	61bb      	str	r3, [r7, #24]
    }

    bdest->size = (pb_size_t)size;
 8021a92:	697b      	ldr	r3, [r7, #20]
 8021a94:	b29a      	uxth	r2, r3
 8021a96:	69bb      	ldr	r3, [r7, #24]
 8021a98:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, bdest->bytes, size);
 8021a9a:	69bb      	ldr	r3, [r7, #24]
 8021a9c:	3302      	adds	r3, #2
 8021a9e:	697a      	ldr	r2, [r7, #20]
 8021aa0:	4619      	mov	r1, r3
 8021aa2:	68f8      	ldr	r0, [r7, #12]
 8021aa4:	f7fe fdd8 	bl	8020658 <pb_read>
 8021aa8:	4603      	mov	r3, r0
}
 8021aaa:	4618      	mov	r0, r3
 8021aac:	3720      	adds	r7, #32
 8021aae:	46bd      	mov	sp, r7
 8021ab0:	bd80      	pop	{r7, pc}

08021ab2 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 8021ab2:	b580      	push	{r7, lr}
 8021ab4:	b088      	sub	sp, #32
 8021ab6:	af00      	add	r7, sp, #0
 8021ab8:	60f8      	str	r0, [r7, #12]
 8021aba:	60b9      	str	r1, [r7, #8]
 8021abc:	607a      	str	r2, [r7, #4]
    uint32_t size;
    size_t alloc_size;
    bool status;
    if (!pb_decode_varint32(stream, &size))
 8021abe:	f107 0314 	add.w	r3, r7, #20
 8021ac2:	4619      	mov	r1, r3
 8021ac4:	68f8      	ldr	r0, [r7, #12]
 8021ac6:	f7fe fecc 	bl	8020862 <pb_decode_varint32>
 8021aca:	4603      	mov	r3, r0
 8021acc:	f083 0301 	eor.w	r3, r3, #1
 8021ad0:	b2db      	uxtb	r3, r3
 8021ad2:	2b00      	cmp	r3, #0
 8021ad4:	d001      	beq.n	8021ada <pb_dec_string+0x28>
        return false;
 8021ad6:	2300      	movs	r3, #0
 8021ad8:	e026      	b.n	8021b28 <pb_dec_string+0x76>
    
    /* Space for null terminator */
    alloc_size = size + 1;
 8021ada:	697b      	ldr	r3, [r7, #20]
 8021adc:	3301      	adds	r3, #1
 8021ade:	61fb      	str	r3, [r7, #28]
    
    if (alloc_size < size)
 8021ae0:	697b      	ldr	r3, [r7, #20]
 8021ae2:	69fa      	ldr	r2, [r7, #28]
 8021ae4:	429a      	cmp	r2, r3
 8021ae6:	d201      	bcs.n	8021aec <pb_dec_string+0x3a>
        PB_RETURN_ERROR(stream, "size too large");
 8021ae8:	2300      	movs	r3, #0
 8021aea:	e01d      	b.n	8021b28 <pb_dec_string+0x76>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8021aec:	68bb      	ldr	r3, [r7, #8]
 8021aee:	789b      	ldrb	r3, [r3, #2]
 8021af0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8021af4:	2b80      	cmp	r3, #128	@ 0x80
 8021af6:	d101      	bne.n	8021afc <pb_dec_string+0x4a>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8021af8:	2300      	movs	r3, #0
 8021afa:	e015      	b.n	8021b28 <pb_dec_string+0x76>
        dest = *(void**)dest;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8021afc:	68bb      	ldr	r3, [r7, #8]
 8021afe:	891b      	ldrh	r3, [r3, #8]
 8021b00:	461a      	mov	r2, r3
 8021b02:	69fb      	ldr	r3, [r7, #28]
 8021b04:	4293      	cmp	r3, r2
 8021b06:	d901      	bls.n	8021b0c <pb_dec_string+0x5a>
            PB_RETURN_ERROR(stream, "string overflow");
 8021b08:	2300      	movs	r3, #0
 8021b0a:	e00d      	b.n	8021b28 <pb_dec_string+0x76>
    }
    
    status = pb_read(stream, (pb_byte_t*)dest, size);
 8021b0c:	697b      	ldr	r3, [r7, #20]
 8021b0e:	461a      	mov	r2, r3
 8021b10:	6879      	ldr	r1, [r7, #4]
 8021b12:	68f8      	ldr	r0, [r7, #12]
 8021b14:	f7fe fda0 	bl	8020658 <pb_read>
 8021b18:	4603      	mov	r3, r0
 8021b1a:	76fb      	strb	r3, [r7, #27]
    *((pb_byte_t*)dest + size) = 0;
 8021b1c:	697b      	ldr	r3, [r7, #20]
 8021b1e:	687a      	ldr	r2, [r7, #4]
 8021b20:	4413      	add	r3, r2
 8021b22:	2200      	movs	r2, #0
 8021b24:	701a      	strb	r2, [r3, #0]
    return status;
 8021b26:	7efb      	ldrb	r3, [r7, #27]
}
 8021b28:	4618      	mov	r0, r3
 8021b2a:	3720      	adds	r7, #32
 8021b2c:	46bd      	mov	sp, r7
 8021b2e:	bd80      	pop	{r7, pc}

08021b30 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 8021b30:	b580      	push	{r7, lr}
 8021b32:	b08a      	sub	sp, #40	@ 0x28
 8021b34:	af00      	add	r7, sp, #0
 8021b36:	60f8      	str	r0, [r7, #12]
 8021b38:	60b9      	str	r1, [r7, #8]
 8021b3a:	607a      	str	r2, [r7, #4]
    bool status;
    pb_istream_t substream;
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 8021b3c:	68bb      	ldr	r3, [r7, #8]
 8021b3e:	68db      	ldr	r3, [r3, #12]
 8021b40:	623b      	str	r3, [r7, #32]
    
    if (!pb_make_string_substream(stream, &substream))
 8021b42:	f107 0314 	add.w	r3, r7, #20
 8021b46:	4619      	mov	r1, r3
 8021b48:	68f8      	ldr	r0, [r7, #12]
 8021b4a:	f7fe ffe6 	bl	8020b1a <pb_make_string_substream>
 8021b4e:	4603      	mov	r3, r0
 8021b50:	f083 0301 	eor.w	r3, r3, #1
 8021b54:	b2db      	uxtb	r3, r3
 8021b56:	2b00      	cmp	r3, #0
 8021b58:	d001      	beq.n	8021b5e <pb_dec_submessage+0x2e>
        return false;
 8021b5a:	2300      	movs	r3, #0
 8021b5c:	e030      	b.n	8021bc0 <pb_dec_submessage+0x90>
    
    if (field->ptr == NULL)
 8021b5e:	68bb      	ldr	r3, [r7, #8]
 8021b60:	68db      	ldr	r3, [r3, #12]
 8021b62:	2b00      	cmp	r3, #0
 8021b64:	d101      	bne.n	8021b6a <pb_dec_submessage+0x3a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8021b66:	2300      	movs	r3, #0
 8021b68:	e02a      	b.n	8021bc0 <pb_dec_submessage+0x90>
    
    /* New array entries need to be initialized, while required and optional
     * submessages have already been initialized in the top-level pb_decode. */
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8021b6a:	68bb      	ldr	r3, [r7, #8]
 8021b6c:	789b      	ldrb	r3, [r3, #2]
 8021b6e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8021b72:	2b20      	cmp	r3, #32
 8021b74:	d10a      	bne.n	8021b8c <pb_dec_submessage+0x5c>
        status = pb_decode(&substream, submsg_fields, dest);
 8021b76:	f107 0314 	add.w	r3, r7, #20
 8021b7a:	687a      	ldr	r2, [r7, #4]
 8021b7c:	6a39      	ldr	r1, [r7, #32]
 8021b7e:	4618      	mov	r0, r3
 8021b80:	f7ff fc72 	bl	8021468 <pb_decode>
 8021b84:	4603      	mov	r3, r0
 8021b86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8021b8a:	e009      	b.n	8021ba0 <pb_dec_submessage+0x70>
    else
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8021b8c:	f107 0314 	add.w	r3, r7, #20
 8021b90:	687a      	ldr	r2, [r7, #4]
 8021b92:	6a39      	ldr	r1, [r7, #32]
 8021b94:	4618      	mov	r0, r3
 8021b96:	f7ff fb34 	bl	8021202 <pb_decode_noinit>
 8021b9a:	4603      	mov	r3, r0
 8021b9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    
    if (!pb_close_string_substream(stream, &substream))
 8021ba0:	f107 0314 	add.w	r3, r7, #20
 8021ba4:	4619      	mov	r1, r3
 8021ba6:	68f8      	ldr	r0, [r7, #12]
 8021ba8:	f7fe ffe4 	bl	8020b74 <pb_close_string_substream>
 8021bac:	4603      	mov	r3, r0
 8021bae:	f083 0301 	eor.w	r3, r3, #1
 8021bb2:	b2db      	uxtb	r3, r3
 8021bb4:	2b00      	cmp	r3, #0
 8021bb6:	d001      	beq.n	8021bbc <pb_dec_submessage+0x8c>
        return false;
 8021bb8:	2300      	movs	r3, #0
 8021bba:	e001      	b.n	8021bc0 <pb_dec_submessage+0x90>
    return status;
 8021bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8021bc0:	4618      	mov	r0, r3
 8021bc2:	3728      	adds	r7, #40	@ 0x28
 8021bc4:	46bd      	mov	sp, r7
 8021bc6:	bd80      	pop	{r7, pc}

08021bc8 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 8021bc8:	b580      	push	{r7, lr}
 8021bca:	b086      	sub	sp, #24
 8021bcc:	af00      	add	r7, sp, #0
 8021bce:	60f8      	str	r0, [r7, #12]
 8021bd0:	60b9      	str	r1, [r7, #8]
 8021bd2:	607a      	str	r2, [r7, #4]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8021bd4:	f107 0314 	add.w	r3, r7, #20
 8021bd8:	4619      	mov	r1, r3
 8021bda:	68f8      	ldr	r0, [r7, #12]
 8021bdc:	f7fe fe41 	bl	8020862 <pb_decode_varint32>
 8021be0:	4603      	mov	r3, r0
 8021be2:	f083 0301 	eor.w	r3, r3, #1
 8021be6:	b2db      	uxtb	r3, r3
 8021be8:	2b00      	cmp	r3, #0
 8021bea:	d001      	beq.n	8021bf0 <pb_dec_fixed_length_bytes+0x28>
        return false;
 8021bec:	2300      	movs	r3, #0
 8021bee:	e021      	b.n	8021c34 <pb_dec_fixed_length_bytes+0x6c>

    if (size > PB_SIZE_MAX)
 8021bf0:	697b      	ldr	r3, [r7, #20]
 8021bf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021bf6:	d301      	bcc.n	8021bfc <pb_dec_fixed_length_bytes+0x34>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8021bf8:	2300      	movs	r3, #0
 8021bfa:	e01b      	b.n	8021c34 <pb_dec_fixed_length_bytes+0x6c>

    if (size == 0)
 8021bfc:	697b      	ldr	r3, [r7, #20]
 8021bfe:	2b00      	cmp	r3, #0
 8021c00:	d108      	bne.n	8021c14 <pb_dec_fixed_length_bytes+0x4c>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(dest, 0, field->data_size);
 8021c02:	68bb      	ldr	r3, [r7, #8]
 8021c04:	891b      	ldrh	r3, [r3, #8]
 8021c06:	461a      	mov	r2, r3
 8021c08:	2100      	movs	r1, #0
 8021c0a:	6878      	ldr	r0, [r7, #4]
 8021c0c:	f012 f941 	bl	8033e92 <memset>
        return true;
 8021c10:	2301      	movs	r3, #1
 8021c12:	e00f      	b.n	8021c34 <pb_dec_fixed_length_bytes+0x6c>
    }

    if (size != field->data_size)
 8021c14:	68bb      	ldr	r3, [r7, #8]
 8021c16:	891b      	ldrh	r3, [r3, #8]
 8021c18:	461a      	mov	r2, r3
 8021c1a:	697b      	ldr	r3, [r7, #20]
 8021c1c:	429a      	cmp	r2, r3
 8021c1e:	d001      	beq.n	8021c24 <pb_dec_fixed_length_bytes+0x5c>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8021c20:	2300      	movs	r3, #0
 8021c22:	e007      	b.n	8021c34 <pb_dec_fixed_length_bytes+0x6c>

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 8021c24:	68bb      	ldr	r3, [r7, #8]
 8021c26:	891b      	ldrh	r3, [r3, #8]
 8021c28:	461a      	mov	r2, r3
 8021c2a:	6879      	ldr	r1, [r7, #4]
 8021c2c:	68f8      	ldr	r0, [r7, #12]
 8021c2e:	f7fe fd13 	bl	8020658 <pb_read>
 8021c32:	4603      	mov	r3, r0
}
 8021c34:	4618      	mov	r0, r3
 8021c36:	3718      	adds	r7, #24
 8021c38:	46bd      	mov	sp, r7
 8021c3a:	bd80      	pop	{r7, pc}

08021c3c <pb_write>:
#endif
    return stream;
}

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8021c3c:	b580      	push	{r7, lr}
 8021c3e:	b084      	sub	sp, #16
 8021c40:	af00      	add	r7, sp, #0
 8021c42:	60f8      	str	r0, [r7, #12]
 8021c44:	60b9      	str	r1, [r7, #8]
 8021c46:	607a      	str	r2, [r7, #4]
    if (stream->callback != NULL)
 8021c48:	68fb      	ldr	r3, [r7, #12]
 8021c4a:	681b      	ldr	r3, [r3, #0]
 8021c4c:	2b00      	cmp	r3, #0
 8021c4e:	d017      	beq.n	8021c80 <pb_write+0x44>
    {
        if (stream->bytes_written + count > stream->max_size)
 8021c50:	68fb      	ldr	r3, [r7, #12]
 8021c52:	68da      	ldr	r2, [r3, #12]
 8021c54:	687b      	ldr	r3, [r7, #4]
 8021c56:	441a      	add	r2, r3
 8021c58:	68fb      	ldr	r3, [r7, #12]
 8021c5a:	689b      	ldr	r3, [r3, #8]
 8021c5c:	429a      	cmp	r2, r3
 8021c5e:	d901      	bls.n	8021c64 <pb_write+0x28>
            PB_RETURN_ERROR(stream, "stream full");
 8021c60:	2300      	movs	r3, #0
 8021c62:	e014      	b.n	8021c8e <pb_write+0x52>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 8021c64:	68fb      	ldr	r3, [r7, #12]
 8021c66:	681b      	ldr	r3, [r3, #0]
 8021c68:	687a      	ldr	r2, [r7, #4]
 8021c6a:	68b9      	ldr	r1, [r7, #8]
 8021c6c:	68f8      	ldr	r0, [r7, #12]
 8021c6e:	4798      	blx	r3
 8021c70:	4603      	mov	r3, r0
 8021c72:	f083 0301 	eor.w	r3, r3, #1
 8021c76:	b2db      	uxtb	r3, r3
 8021c78:	2b00      	cmp	r3, #0
 8021c7a:	d001      	beq.n	8021c80 <pb_write+0x44>
            PB_RETURN_ERROR(stream, "io error");
 8021c7c:	2300      	movs	r3, #0
 8021c7e:	e006      	b.n	8021c8e <pb_write+0x52>
#endif
    }
    
    stream->bytes_written += count;
 8021c80:	68fb      	ldr	r3, [r7, #12]
 8021c82:	68da      	ldr	r2, [r3, #12]
 8021c84:	687b      	ldr	r3, [r7, #4]
 8021c86:	441a      	add	r2, r3
 8021c88:	68fb      	ldr	r3, [r7, #12]
 8021c8a:	60da      	str	r2, [r3, #12]
    return true;
 8021c8c:	2301      	movs	r3, #1
}
 8021c8e:	4618      	mov	r0, r3
 8021c90:	3710      	adds	r7, #16
 8021c92:	46bd      	mov	sp, r7
 8021c94:	bd80      	pop	{r7, pc}

08021c96 <encode_array>:
 *************************/

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, const pb_field_t *field,
                         const void *pData, size_t count, pb_encoder_t func)
{
 8021c96:	b5b0      	push	{r4, r5, r7, lr}
 8021c98:	b08c      	sub	sp, #48	@ 0x30
 8021c9a:	af00      	add	r7, sp, #0
 8021c9c:	60f8      	str	r0, [r7, #12]
 8021c9e:	60b9      	str	r1, [r7, #8]
 8021ca0:	607a      	str	r2, [r7, #4]
 8021ca2:	603b      	str	r3, [r7, #0]
    size_t i;
    const void *p;
    size_t size;
    
    if (count == 0)
 8021ca4:	683b      	ldr	r3, [r7, #0]
 8021ca6:	2b00      	cmp	r3, #0
 8021ca8:	d101      	bne.n	8021cae <encode_array+0x18>
        return true;
 8021caa:	2301      	movs	r3, #1
 8021cac:	e0e8      	b.n	8021e80 <encode_array+0x1ea>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 8021cae:	68bb      	ldr	r3, [r7, #8]
 8021cb0:	789b      	ldrb	r3, [r3, #2]
 8021cb2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8021cb6:	2b80      	cmp	r3, #128	@ 0x80
 8021cb8:	d007      	beq.n	8021cca <encode_array+0x34>
 8021cba:	68bb      	ldr	r3, [r7, #8]
 8021cbc:	895b      	ldrh	r3, [r3, #10]
 8021cbe:	461a      	mov	r2, r3
 8021cc0:	683b      	ldr	r3, [r7, #0]
 8021cc2:	4293      	cmp	r3, r2
 8021cc4:	d901      	bls.n	8021cca <encode_array+0x34>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 8021cc6:	2300      	movs	r3, #0
 8021cc8:	e0da      	b.n	8021e80 <encode_array+0x1ea>
    
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8021cca:	68bb      	ldr	r3, [r7, #8]
 8021ccc:	789b      	ldrb	r3, [r3, #2]
 8021cce:	f003 030f 	and.w	r3, r3, #15
 8021cd2:	2b04      	cmp	r3, #4
 8021cd4:	f300 8088 	bgt.w	8021de8 <encode_array+0x152>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8021cd8:	68bb      	ldr	r3, [r7, #8]
 8021cda:	881b      	ldrh	r3, [r3, #0]
 8021cdc:	461a      	mov	r2, r3
 8021cde:	2102      	movs	r1, #2
 8021ce0:	68f8      	ldr	r0, [r7, #12]
 8021ce2:	f000 fc6c 	bl	80225be <pb_encode_tag>
 8021ce6:	4603      	mov	r3, r0
 8021ce8:	f083 0301 	eor.w	r3, r3, #1
 8021cec:	b2db      	uxtb	r3, r3
 8021cee:	2b00      	cmp	r3, #0
 8021cf0:	d001      	beq.n	8021cf6 <encode_array+0x60>
            return false;
 8021cf2:	2300      	movs	r3, #0
 8021cf4:	e0c4      	b.n	8021e80 <encode_array+0x1ea>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 8021cf6:	68bb      	ldr	r3, [r7, #8]
 8021cf8:	789b      	ldrb	r3, [r3, #2]
 8021cfa:	f003 030f 	and.w	r3, r3, #15
 8021cfe:	2b03      	cmp	r3, #3
 8021d00:	d103      	bne.n	8021d0a <encode_array+0x74>
        {
            size = 4 * count;
 8021d02:	683b      	ldr	r3, [r7, #0]
 8021d04:	009b      	lsls	r3, r3, #2
 8021d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8021d08:	e032      	b.n	8021d70 <encode_array+0xda>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8021d0a:	68bb      	ldr	r3, [r7, #8]
 8021d0c:	789b      	ldrb	r3, [r3, #2]
 8021d0e:	f003 030f 	and.w	r3, r3, #15
 8021d12:	2b04      	cmp	r3, #4
 8021d14:	d103      	bne.n	8021d1e <encode_array+0x88>
        {
            size = 8 * count;
 8021d16:	683b      	ldr	r3, [r7, #0]
 8021d18:	00db      	lsls	r3, r3, #3
 8021d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8021d1c:	e028      	b.n	8021d70 <encode_array+0xda>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8021d1e:	f107 0314 	add.w	r3, r7, #20
 8021d22:	2200      	movs	r2, #0
 8021d24:	601a      	str	r2, [r3, #0]
 8021d26:	605a      	str	r2, [r3, #4]
 8021d28:	609a      	str	r2, [r3, #8]
 8021d2a:	60da      	str	r2, [r3, #12]
            p = pData;
 8021d2c:	687b      	ldr	r3, [r7, #4]
 8021d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
            for (i = 0; i < count; i++)
 8021d30:	2300      	movs	r3, #0
 8021d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8021d34:	e016      	b.n	8021d64 <encode_array+0xce>
            {
                if (!func(&sizestream, field, p))
 8021d36:	f107 0014 	add.w	r0, r7, #20
 8021d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8021d3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8021d3e:	68b9      	ldr	r1, [r7, #8]
 8021d40:	4798      	blx	r3
 8021d42:	4603      	mov	r3, r0
 8021d44:	f083 0301 	eor.w	r3, r3, #1
 8021d48:	b2db      	uxtb	r3, r3
 8021d4a:	2b00      	cmp	r3, #0
 8021d4c:	d001      	beq.n	8021d52 <encode_array+0xbc>
                    return false;
 8021d4e:	2300      	movs	r3, #0
 8021d50:	e096      	b.n	8021e80 <encode_array+0x1ea>
                p = (const char*)p + field->data_size;
 8021d52:	68bb      	ldr	r3, [r7, #8]
 8021d54:	891b      	ldrh	r3, [r3, #8]
 8021d56:	461a      	mov	r2, r3
 8021d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d5a:	4413      	add	r3, r2
 8021d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
            for (i = 0; i < count; i++)
 8021d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021d60:	3301      	adds	r3, #1
 8021d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8021d64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021d66:	683b      	ldr	r3, [r7, #0]
 8021d68:	429a      	cmp	r2, r3
 8021d6a:	d3e4      	bcc.n	8021d36 <encode_array+0xa0>
            }
            size = sizestream.bytes_written;
 8021d6c:	6a3b      	ldr	r3, [r7, #32]
 8021d6e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8021d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021d72:	2200      	movs	r2, #0
 8021d74:	461c      	mov	r4, r3
 8021d76:	4615      	mov	r5, r2
 8021d78:	4622      	mov	r2, r4
 8021d7a:	462b      	mov	r3, r5
 8021d7c:	68f8      	ldr	r0, [r7, #12]
 8021d7e:	f000 fb1a 	bl	80223b6 <pb_encode_varint>
 8021d82:	4603      	mov	r3, r0
 8021d84:	f083 0301 	eor.w	r3, r3, #1
 8021d88:	b2db      	uxtb	r3, r3
 8021d8a:	2b00      	cmp	r3, #0
 8021d8c:	d001      	beq.n	8021d92 <encode_array+0xfc>
            return false;
 8021d8e:	2300      	movs	r3, #0
 8021d90:	e076      	b.n	8021e80 <encode_array+0x1ea>
        
        if (stream->callback == NULL)
 8021d92:	68fb      	ldr	r3, [r7, #12]
 8021d94:	681b      	ldr	r3, [r3, #0]
 8021d96:	2b00      	cmp	r3, #0
 8021d98:	d106      	bne.n	8021da8 <encode_array+0x112>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8021d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021d9c:	2100      	movs	r1, #0
 8021d9e:	68f8      	ldr	r0, [r7, #12]
 8021da0:	f7ff ff4c 	bl	8021c3c <pb_write>
 8021da4:	4603      	mov	r3, r0
 8021da6:	e06b      	b.n	8021e80 <encode_array+0x1ea>
        
        /* Write the data */
        p = pData;
 8021da8:	687b      	ldr	r3, [r7, #4]
 8021daa:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (i = 0; i < count; i++)
 8021dac:	2300      	movs	r3, #0
 8021dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8021db0:	e015      	b.n	8021dde <encode_array+0x148>
        {
            if (!func(stream, field, p))
 8021db2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8021db4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8021db6:	68b9      	ldr	r1, [r7, #8]
 8021db8:	68f8      	ldr	r0, [r7, #12]
 8021dba:	4798      	blx	r3
 8021dbc:	4603      	mov	r3, r0
 8021dbe:	f083 0301 	eor.w	r3, r3, #1
 8021dc2:	b2db      	uxtb	r3, r3
 8021dc4:	2b00      	cmp	r3, #0
 8021dc6:	d001      	beq.n	8021dcc <encode_array+0x136>
                return false;
 8021dc8:	2300      	movs	r3, #0
 8021dca:	e059      	b.n	8021e80 <encode_array+0x1ea>
            p = (const char*)p + field->data_size;
 8021dcc:	68bb      	ldr	r3, [r7, #8]
 8021dce:	891b      	ldrh	r3, [r3, #8]
 8021dd0:	461a      	mov	r2, r3
 8021dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021dd4:	4413      	add	r3, r2
 8021dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (i = 0; i < count; i++)
 8021dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021dda:	3301      	adds	r3, #1
 8021ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8021dde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021de0:	683b      	ldr	r3, [r7, #0]
 8021de2:	429a      	cmp	r2, r3
 8021de4:	d3e5      	bcc.n	8021db2 <encode_array+0x11c>
 8021de6:	e04a      	b.n	8021e7e <encode_array+0x1e8>
        }
    }
    else
    {
        p = pData;
 8021de8:	687b      	ldr	r3, [r7, #4]
 8021dea:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (i = 0; i < count; i++)
 8021dec:	2300      	movs	r3, #0
 8021dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8021df0:	e041      	b.n	8021e76 <encode_array+0x1e0>
        {
            if (!pb_encode_tag_for_field(stream, field))
 8021df2:	68b9      	ldr	r1, [r7, #8]
 8021df4:	68f8      	ldr	r0, [r7, #12]
 8021df6:	f000 fc0b 	bl	8022610 <pb_encode_tag_for_field>
 8021dfa:	4603      	mov	r3, r0
 8021dfc:	f083 0301 	eor.w	r3, r3, #1
 8021e00:	b2db      	uxtb	r3, r3
 8021e02:	2b00      	cmp	r3, #0
 8021e04:	d001      	beq.n	8021e0a <encode_array+0x174>
                return false;
 8021e06:	2300      	movs	r3, #0
 8021e08:	e03a      	b.n	8021e80 <encode_array+0x1ea>

            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8021e0a:	68bb      	ldr	r3, [r7, #8]
 8021e0c:	789b      	ldrb	r3, [r3, #2]
 8021e0e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8021e12:	2b80      	cmp	r3, #128	@ 0x80
 8021e14:	d119      	bne.n	8021e4a <encode_array+0x1b4>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8021e16:	68bb      	ldr	r3, [r7, #8]
 8021e18:	789b      	ldrb	r3, [r3, #2]
 8021e1a:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8021e1e:	2b06      	cmp	r3, #6
 8021e20:	d005      	beq.n	8021e2e <encode_array+0x198>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 8021e22:	68bb      	ldr	r3, [r7, #8]
 8021e24:	789b      	ldrb	r3, [r3, #2]
 8021e26:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8021e2a:	2b05      	cmp	r3, #5
 8021e2c:	d10d      	bne.n	8021e4a <encode_array+0x1b4>
            {
                if (!func(stream, field, *(const void* const*)p))
 8021e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e30:	681a      	ldr	r2, [r3, #0]
 8021e32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8021e34:	68b9      	ldr	r1, [r7, #8]
 8021e36:	68f8      	ldr	r0, [r7, #12]
 8021e38:	4798      	blx	r3
 8021e3a:	4603      	mov	r3, r0
 8021e3c:	f083 0301 	eor.w	r3, r3, #1
 8021e40:	b2db      	uxtb	r3, r3
 8021e42:	2b00      	cmp	r3, #0
 8021e44:	d00e      	beq.n	8021e64 <encode_array+0x1ce>
                    return false;
 8021e46:	2300      	movs	r3, #0
 8021e48:	e01a      	b.n	8021e80 <encode_array+0x1ea>
            }
            else
            {
                if (!func(stream, field, p))
 8021e4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8021e4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8021e4e:	68b9      	ldr	r1, [r7, #8]
 8021e50:	68f8      	ldr	r0, [r7, #12]
 8021e52:	4798      	blx	r3
 8021e54:	4603      	mov	r3, r0
 8021e56:	f083 0301 	eor.w	r3, r3, #1
 8021e5a:	b2db      	uxtb	r3, r3
 8021e5c:	2b00      	cmp	r3, #0
 8021e5e:	d001      	beq.n	8021e64 <encode_array+0x1ce>
                    return false;
 8021e60:	2300      	movs	r3, #0
 8021e62:	e00d      	b.n	8021e80 <encode_array+0x1ea>
            }
            p = (const char*)p + field->data_size;
 8021e64:	68bb      	ldr	r3, [r7, #8]
 8021e66:	891b      	ldrh	r3, [r3, #8]
 8021e68:	461a      	mov	r2, r3
 8021e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e6c:	4413      	add	r3, r2
 8021e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (i = 0; i < count; i++)
 8021e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021e72:	3301      	adds	r3, #1
 8021e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8021e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021e78:	683b      	ldr	r3, [r7, #0]
 8021e7a:	429a      	cmp	r2, r3
 8021e7c:	d3b9      	bcc.n	8021df2 <encode_array+0x15c>
        }
    }
    
    return true;
 8021e7e:	2301      	movs	r3, #1
}
 8021e80:	4618      	mov	r0, r3
 8021e82:	3730      	adds	r7, #48	@ 0x30
 8021e84:	46bd      	mov	sp, r7
 8021e86:	bdb0      	pop	{r4, r5, r7, pc}

08021e88 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 8021e88:	b590      	push	{r4, r7, lr}
 8021e8a:	b08d      	sub	sp, #52	@ 0x34
 8021e8c:	af00      	add	r7, sp, #0
 8021e8e:	6078      	str	r0, [r7, #4]
 8021e90:	6039      	str	r1, [r7, #0]
    pb_type_t type = field->type;
 8021e92:	687b      	ldr	r3, [r7, #4]
 8021e94:	789b      	ldrb	r3, [r3, #2]
 8021e96:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    const void *pSize = (const char*)pData + field->size_offset;
 8021e9a:	687b      	ldr	r3, [r7, #4]
 8021e9c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8021ea0:	461a      	mov	r2, r3
 8021ea2:	683b      	ldr	r3, [r7, #0]
 8021ea4:	4413      	add	r3, r2
 8021ea6:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 8021ea8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8021eac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8021eb0:	2b00      	cmp	r3, #0
 8021eb2:	d101      	bne.n	8021eb8 <pb_check_proto3_default_value+0x30>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
 8021eb4:	2300      	movs	r3, #0
 8021eb6:	e0a9      	b.n	802200c <pb_check_proto3_default_value+0x184>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8021eb8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8021ebc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8021ec0:	2b20      	cmp	r3, #32
 8021ec2:	d107      	bne.n	8021ed4 <pb_check_proto3_default_value+0x4c>
    {
        /* Repeated fields inside proto3 submessage: present if count != 0 */
        return *(const pb_size_t*)pSize == 0;
 8021ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ec6:	881b      	ldrh	r3, [r3, #0]
 8021ec8:	2b00      	cmp	r3, #0
 8021eca:	bf0c      	ite	eq
 8021ecc:	2301      	moveq	r3, #1
 8021ece:	2300      	movne	r3, #0
 8021ed0:	b2db      	uxtb	r3, r3
 8021ed2:	e09b      	b.n	802200c <pb_check_proto3_default_value+0x184>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8021ed4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8021ed8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8021edc:	2b30      	cmp	r3, #48	@ 0x30
 8021ede:	d107      	bne.n	8021ef0 <pb_check_proto3_default_value+0x68>
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 8021ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ee2:	881b      	ldrh	r3, [r3, #0]
 8021ee4:	2b00      	cmp	r3, #0
 8021ee6:	bf0c      	ite	eq
 8021ee8:	2301      	moveq	r3, #1
 8021eea:	2300      	movne	r3, #0
 8021eec:	b2db      	uxtb	r3, r3
 8021eee:	e08d      	b.n	802200c <pb_check_proto3_default_value+0x184>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 8021ef0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8021ef4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8021ef8:	2b10      	cmp	r3, #16
 8021efa:	d112      	bne.n	8021f22 <pb_check_proto3_default_value+0x9a>
 8021efc:	687b      	ldr	r3, [r7, #4]
 8021efe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8021f02:	2b00      	cmp	r3, #0
 8021f04:	d00d      	beq.n	8021f22 <pb_check_proto3_default_value+0x9a>
    {
        /* Proto2 optional fields inside proto3 submessage */
        return *(const bool*)pSize == false;
 8021f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021f08:	781b      	ldrb	r3, [r3, #0]
 8021f0a:	2b00      	cmp	r3, #0
 8021f0c:	bf14      	ite	ne
 8021f0e:	2301      	movne	r3, #1
 8021f10:	2300      	moveq	r3, #0
 8021f12:	b2db      	uxtb	r3, r3
 8021f14:	f083 0301 	eor.w	r3, r3, #1
 8021f18:	b2db      	uxtb	r3, r3
 8021f1a:	f003 0301 	and.w	r3, r3, #1
 8021f1e:	b2db      	uxtb	r3, r3
 8021f20:	e074      	b.n	802200c <pb_check_proto3_default_value+0x184>
    }

    /* Rest is proto3 singular fields */

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8021f22:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8021f26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8021f2a:	2b00      	cmp	r3, #0
 8021f2c:	d158      	bne.n	8021fe0 <pb_check_proto3_default_value+0x158>
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 8021f2e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8021f32:	f003 030f 	and.w	r3, r3, #15
 8021f36:	2b05      	cmp	r3, #5
 8021f38:	d109      	bne.n	8021f4e <pb_check_proto3_default_value+0xc6>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
 8021f3a:	683b      	ldr	r3, [r7, #0]
 8021f3c:	627b      	str	r3, [r7, #36]	@ 0x24
            return bytes->size == 0;
 8021f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f40:	881b      	ldrh	r3, [r3, #0]
 8021f42:	2b00      	cmp	r3, #0
 8021f44:	bf0c      	ite	eq
 8021f46:	2301      	moveq	r3, #1
 8021f48:	2300      	movne	r3, #0
 8021f4a:	b2db      	uxtb	r3, r3
 8021f4c:	e05e      	b.n	802200c <pb_check_proto3_default_value+0x184>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8021f4e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8021f52:	f003 030f 	and.w	r3, r3, #15
 8021f56:	2b06      	cmp	r3, #6
 8021f58:	d107      	bne.n	8021f6a <pb_check_proto3_default_value+0xe2>
        {
            return *(const char*)pData == '\0';
 8021f5a:	683b      	ldr	r3, [r7, #0]
 8021f5c:	781b      	ldrb	r3, [r3, #0]
 8021f5e:	2b00      	cmp	r3, #0
 8021f60:	bf0c      	ite	eq
 8021f62:	2301      	moveq	r3, #1
 8021f64:	2300      	movne	r3, #0
 8021f66:	b2db      	uxtb	r3, r3
 8021f68:	e050      	b.n	802200c <pb_check_proto3_default_value+0x184>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 8021f6a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8021f6e:	f003 030f 	and.w	r3, r3, #15
 8021f72:	2b09      	cmp	r3, #9
 8021f74:	d107      	bne.n	8021f86 <pb_check_proto3_default_value+0xfe>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 8021f76:	687b      	ldr	r3, [r7, #4]
 8021f78:	891b      	ldrh	r3, [r3, #8]
 8021f7a:	2b00      	cmp	r3, #0
 8021f7c:	bf0c      	ite	eq
 8021f7e:	2301      	moveq	r3, #1
 8021f80:	2300      	movne	r3, #0
 8021f82:	b2db      	uxtb	r3, r3
 8021f84:	e042      	b.n	802200c <pb_check_proto3_default_value+0x184>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8021f86:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8021f8a:	f003 030f 	and.w	r3, r3, #15
 8021f8e:	2b07      	cmp	r3, #7
 8021f90:	d126      	bne.n	8021fe0 <pb_check_proto3_default_value+0x158>
             * are non-zero. The comparison cannot be done byte-per-byte
             * because the C struct may contain padding bytes that must
             * be skipped.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 8021f92:	687b      	ldr	r3, [r7, #4]
 8021f94:	68dc      	ldr	r4, [r3, #12]
 8021f96:	6838      	ldr	r0, [r7, #0]
 8021f98:	f000 f9b9 	bl	802230e <pb_const_cast>
 8021f9c:	4602      	mov	r2, r0
 8021f9e:	f107 0308 	add.w	r3, r7, #8
 8021fa2:	4621      	mov	r1, r4
 8021fa4:	4618      	mov	r0, r3
 8021fa6:	f7fe fa5b 	bl	8020460 <pb_field_iter_begin>
 8021faa:	4603      	mov	r3, r0
 8021fac:	2b00      	cmp	r3, #0
 8021fae:	d015      	beq.n	8021fdc <pb_check_proto3_default_value+0x154>
            {
                do
                {
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 8021fb0:	68fb      	ldr	r3, [r7, #12]
 8021fb2:	69ba      	ldr	r2, [r7, #24]
 8021fb4:	4611      	mov	r1, r2
 8021fb6:	4618      	mov	r0, r3
 8021fb8:	f7ff ff66 	bl	8021e88 <pb_check_proto3_default_value>
 8021fbc:	4603      	mov	r3, r0
 8021fbe:	f083 0301 	eor.w	r3, r3, #1
 8021fc2:	b2db      	uxtb	r3, r3
 8021fc4:	2b00      	cmp	r3, #0
 8021fc6:	d001      	beq.n	8021fcc <pb_check_proto3_default_value+0x144>
                    {
                        return false;
 8021fc8:	2300      	movs	r3, #0
 8021fca:	e01f      	b.n	802200c <pb_check_proto3_default_value+0x184>
                    }
                } while (pb_field_iter_next(&iter));
 8021fcc:	f107 0308 	add.w	r3, r7, #8
 8021fd0:	4618      	mov	r0, r3
 8021fd2:	f7fe fa76 	bl	80204c2 <pb_field_iter_next>
 8021fd6:	4603      	mov	r3, r0
 8021fd8:	2b00      	cmp	r3, #0
 8021fda:	d1e9      	bne.n	8021fb0 <pb_check_proto3_default_value+0x128>
            }
            return true;
 8021fdc:	2301      	movs	r3, #1
 8021fde:	e015      	b.n	802200c <pb_check_proto3_default_value+0x184>
	     * UVARINT, SVARINT, FIXED32, FIXED64, EXTENSION fields, and also
	     * callback fields. These all have integer or pointer value which
	     * can be compared with 0.
	     */
	    pb_size_t i;
	    const char *p = (const char*)pData;
 8021fe0:	683b      	ldr	r3, [r7, #0]
 8021fe2:	623b      	str	r3, [r7, #32]
	    for (i = 0; i < field->data_size; i++)
 8021fe4:	2300      	movs	r3, #0
 8021fe6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8021fe8:	e00a      	b.n	8022000 <pb_check_proto3_default_value+0x178>
	    {
	        if (p[i] != 0)
 8021fea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8021fec:	6a3a      	ldr	r2, [r7, #32]
 8021fee:	4413      	add	r3, r2
 8021ff0:	781b      	ldrb	r3, [r3, #0]
 8021ff2:	2b00      	cmp	r3, #0
 8021ff4:	d001      	beq.n	8021ffa <pb_check_proto3_default_value+0x172>
	        {
	            return false;
 8021ff6:	2300      	movs	r3, #0
 8021ff8:	e008      	b.n	802200c <pb_check_proto3_default_value+0x184>
	    for (i = 0; i < field->data_size; i++)
 8021ffa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8021ffc:	3301      	adds	r3, #1
 8021ffe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8022000:	687b      	ldr	r3, [r7, #4]
 8022002:	891b      	ldrh	r3, [r3, #8]
 8022004:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8022006:	429a      	cmp	r2, r3
 8022008:	d3ef      	bcc.n	8021fea <pb_check_proto3_default_value+0x162>
	        }
	    }

	    return true;
 802200a:	2301      	movs	r3, #1
	}
}
 802200c:	4618      	mov	r0, r3
 802200e:	3734      	adds	r7, #52	@ 0x34
 8022010:	46bd      	mov	sp, r7
 8022012:	bd90      	pop	{r4, r7, pc}

08022014 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 8022014:	b580      	push	{r7, lr}
 8022016:	b08a      	sub	sp, #40	@ 0x28
 8022018:	af02      	add	r7, sp, #8
 802201a:	60f8      	str	r0, [r7, #12]
 802201c:	60b9      	str	r1, [r7, #8]
 802201e:	607a      	str	r2, [r7, #4]
    pb_encoder_t func;
    bool implicit_has;
    const void *pSize = &implicit_has;
 8022020:	f107 0313 	add.w	r3, r7, #19
 8022024:	61fb      	str	r3, [r7, #28]
    
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 8022026:	68bb      	ldr	r3, [r7, #8]
 8022028:	789b      	ldrb	r3, [r3, #2]
 802202a:	f003 030f 	and.w	r3, r3, #15
 802202e:	4a68      	ldr	r2, [pc, #416]	@ (80221d0 <encode_basic_field+0x1bc>)
 8022030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022034:	617b      	str	r3, [r7, #20]
    
    if (field->size_offset)
 8022036:	68bb      	ldr	r3, [r7, #8]
 8022038:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802203c:	2b00      	cmp	r3, #0
 802203e:	d007      	beq.n	8022050 <encode_basic_field+0x3c>
    {
        /* Static optional, repeated or oneof field */
        pSize = (const char*)pData + field->size_offset;
 8022040:	68bb      	ldr	r3, [r7, #8]
 8022042:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8022046:	461a      	mov	r2, r3
 8022048:	687b      	ldr	r3, [r7, #4]
 802204a:	4413      	add	r3, r2
 802204c:	61fb      	str	r3, [r7, #28]
 802204e:	e019      	b.n	8022084 <encode_basic_field+0x70>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 8022050:	68bb      	ldr	r3, [r7, #8]
 8022052:	789b      	ldrb	r3, [r3, #2]
 8022054:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8022058:	2b10      	cmp	r3, #16
 802205a:	d111      	bne.n	8022080 <encode_basic_field+0x6c>
    {
        /* Proto3 style field, optional but without explicit has_ field. */
        implicit_has = !pb_check_proto3_default_value(field, pData);
 802205c:	6879      	ldr	r1, [r7, #4]
 802205e:	68b8      	ldr	r0, [r7, #8]
 8022060:	f7ff ff12 	bl	8021e88 <pb_check_proto3_default_value>
 8022064:	4603      	mov	r3, r0
 8022066:	2b00      	cmp	r3, #0
 8022068:	bf14      	ite	ne
 802206a:	2301      	movne	r3, #1
 802206c:	2300      	moveq	r3, #0
 802206e:	b2db      	uxtb	r3, r3
 8022070:	f083 0301 	eor.w	r3, r3, #1
 8022074:	b2db      	uxtb	r3, r3
 8022076:	f003 0301 	and.w	r3, r3, #1
 802207a:	b2db      	uxtb	r3, r3
 802207c:	74fb      	strb	r3, [r7, #19]
 802207e:	e001      	b.n	8022084 <encode_basic_field+0x70>
    }
    else
    {
        /* Required field, always present */
        implicit_has = true;
 8022080:	2301      	movs	r3, #1
 8022082:	74fb      	strb	r3, [r7, #19]
    }

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8022084:	68bb      	ldr	r3, [r7, #8]
 8022086:	789b      	ldrb	r3, [r3, #2]
 8022088:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 802208c:	2b80      	cmp	r3, #128	@ 0x80
 802208e:	d109      	bne.n	80220a4 <encode_basic_field+0x90>
    {
        /* pData is a pointer to the field, which contains pointer to
         * the data. If the 2nd pointer is NULL, it is interpreted as if
         * the has_field was false.
         */
        pData = *(const void* const*)pData;
 8022090:	687b      	ldr	r3, [r7, #4]
 8022092:	681b      	ldr	r3, [r3, #0]
 8022094:	607b      	str	r3, [r7, #4]
        implicit_has = (pData != NULL);
 8022096:	687b      	ldr	r3, [r7, #4]
 8022098:	2b00      	cmp	r3, #0
 802209a:	bf14      	ite	ne
 802209c:	2301      	movne	r3, #1
 802209e:	2300      	moveq	r3, #0
 80220a0:	b2db      	uxtb	r3, r3
 80220a2:	74fb      	strb	r3, [r7, #19]
    }

    switch (PB_HTYPE(field->type))
 80220a4:	68bb      	ldr	r3, [r7, #8]
 80220a6:	789b      	ldrb	r3, [r3, #2]
 80220a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80220ac:	2b30      	cmp	r3, #48	@ 0x30
 80220ae:	d062      	beq.n	8022176 <encode_basic_field+0x162>
 80220b0:	2b30      	cmp	r3, #48	@ 0x30
 80220b2:	dc7f      	bgt.n	80221b4 <encode_basic_field+0x1a0>
 80220b4:	2b20      	cmp	r3, #32
 80220b6:	d041      	beq.n	802213c <encode_basic_field+0x128>
 80220b8:	2b20      	cmp	r3, #32
 80220ba:	dc7b      	bgt.n	80221b4 <encode_basic_field+0x1a0>
 80220bc:	2b00      	cmp	r3, #0
 80220be:	d002      	beq.n	80220c6 <encode_basic_field+0xb2>
 80220c0:	2b10      	cmp	r3, #16
 80220c2:	d01e      	beq.n	8022102 <encode_basic_field+0xee>
 80220c4:	e076      	b.n	80221b4 <encode_basic_field+0x1a0>
    {
        case PB_HTYPE_REQUIRED:
            if (!pData)
 80220c6:	687b      	ldr	r3, [r7, #4]
 80220c8:	2b00      	cmp	r3, #0
 80220ca:	d101      	bne.n	80220d0 <encode_basic_field+0xbc>
                PB_RETURN_ERROR(stream, "missing required field");
 80220cc:	2300      	movs	r3, #0
 80220ce:	e07b      	b.n	80221c8 <encode_basic_field+0x1b4>
            if (!pb_encode_tag_for_field(stream, field))
 80220d0:	68b9      	ldr	r1, [r7, #8]
 80220d2:	68f8      	ldr	r0, [r7, #12]
 80220d4:	f000 fa9c 	bl	8022610 <pb_encode_tag_for_field>
 80220d8:	4603      	mov	r3, r0
 80220da:	f083 0301 	eor.w	r3, r3, #1
 80220de:	b2db      	uxtb	r3, r3
 80220e0:	2b00      	cmp	r3, #0
 80220e2:	d001      	beq.n	80220e8 <encode_basic_field+0xd4>
                return false;
 80220e4:	2300      	movs	r3, #0
 80220e6:	e06f      	b.n	80221c8 <encode_basic_field+0x1b4>
            if (!func(stream, field, pData))
 80220e8:	697b      	ldr	r3, [r7, #20]
 80220ea:	687a      	ldr	r2, [r7, #4]
 80220ec:	68b9      	ldr	r1, [r7, #8]
 80220ee:	68f8      	ldr	r0, [r7, #12]
 80220f0:	4798      	blx	r3
 80220f2:	4603      	mov	r3, r0
 80220f4:	f083 0301 	eor.w	r3, r3, #1
 80220f8:	b2db      	uxtb	r3, r3
 80220fa:	2b00      	cmp	r3, #0
 80220fc:	d05c      	beq.n	80221b8 <encode_basic_field+0x1a4>
                return false;
 80220fe:	2300      	movs	r3, #0
 8022100:	e062      	b.n	80221c8 <encode_basic_field+0x1b4>
            break;
        
        case PB_HTYPE_OPTIONAL:
            if (*(const bool*)pSize)
 8022102:	69fb      	ldr	r3, [r7, #28]
 8022104:	781b      	ldrb	r3, [r3, #0]
 8022106:	2b00      	cmp	r3, #0
 8022108:	d058      	beq.n	80221bc <encode_basic_field+0x1a8>
            {
                if (!pb_encode_tag_for_field(stream, field))
 802210a:	68b9      	ldr	r1, [r7, #8]
 802210c:	68f8      	ldr	r0, [r7, #12]
 802210e:	f000 fa7f 	bl	8022610 <pb_encode_tag_for_field>
 8022112:	4603      	mov	r3, r0
 8022114:	f083 0301 	eor.w	r3, r3, #1
 8022118:	b2db      	uxtb	r3, r3
 802211a:	2b00      	cmp	r3, #0
 802211c:	d001      	beq.n	8022122 <encode_basic_field+0x10e>
                    return false;
 802211e:	2300      	movs	r3, #0
 8022120:	e052      	b.n	80221c8 <encode_basic_field+0x1b4>
            
                if (!func(stream, field, pData))
 8022122:	697b      	ldr	r3, [r7, #20]
 8022124:	687a      	ldr	r2, [r7, #4]
 8022126:	68b9      	ldr	r1, [r7, #8]
 8022128:	68f8      	ldr	r0, [r7, #12]
 802212a:	4798      	blx	r3
 802212c:	4603      	mov	r3, r0
 802212e:	f083 0301 	eor.w	r3, r3, #1
 8022132:	b2db      	uxtb	r3, r3
 8022134:	2b00      	cmp	r3, #0
 8022136:	d041      	beq.n	80221bc <encode_basic_field+0x1a8>
                    return false;
 8022138:	2300      	movs	r3, #0
 802213a:	e045      	b.n	80221c8 <encode_basic_field+0x1b4>
            }
            break;
        
        case PB_HTYPE_REPEATED: {
            pb_size_t count;
            if (field->size_offset != 0) {
 802213c:	68bb      	ldr	r3, [r7, #8]
 802213e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8022142:	2b00      	cmp	r3, #0
 8022144:	d003      	beq.n	802214e <encode_basic_field+0x13a>
                count = *(const pb_size_t*)pSize;
 8022146:	69fb      	ldr	r3, [r7, #28]
 8022148:	881b      	ldrh	r3, [r3, #0]
 802214a:	837b      	strh	r3, [r7, #26]
 802214c:	e002      	b.n	8022154 <encode_basic_field+0x140>
            } else {
                count = field->array_size;
 802214e:	68bb      	ldr	r3, [r7, #8]
 8022150:	895b      	ldrh	r3, [r3, #10]
 8022152:	837b      	strh	r3, [r7, #26]
            }
            if (!encode_array(stream, field, pData, count, func))
 8022154:	8b7a      	ldrh	r2, [r7, #26]
 8022156:	697b      	ldr	r3, [r7, #20]
 8022158:	9300      	str	r3, [sp, #0]
 802215a:	4613      	mov	r3, r2
 802215c:	687a      	ldr	r2, [r7, #4]
 802215e:	68b9      	ldr	r1, [r7, #8]
 8022160:	68f8      	ldr	r0, [r7, #12]
 8022162:	f7ff fd98 	bl	8021c96 <encode_array>
 8022166:	4603      	mov	r3, r0
 8022168:	f083 0301 	eor.w	r3, r3, #1
 802216c:	b2db      	uxtb	r3, r3
 802216e:	2b00      	cmp	r3, #0
 8022170:	d026      	beq.n	80221c0 <encode_basic_field+0x1ac>
                return false;
 8022172:	2300      	movs	r3, #0
 8022174:	e028      	b.n	80221c8 <encode_basic_field+0x1b4>
            break;
        }
        
        case PB_HTYPE_ONEOF:
            if (*(const pb_size_t*)pSize == field->tag)
 8022176:	69fb      	ldr	r3, [r7, #28]
 8022178:	881a      	ldrh	r2, [r3, #0]
 802217a:	68bb      	ldr	r3, [r7, #8]
 802217c:	881b      	ldrh	r3, [r3, #0]
 802217e:	429a      	cmp	r2, r3
 8022180:	d120      	bne.n	80221c4 <encode_basic_field+0x1b0>
            {
                if (!pb_encode_tag_for_field(stream, field))
 8022182:	68b9      	ldr	r1, [r7, #8]
 8022184:	68f8      	ldr	r0, [r7, #12]
 8022186:	f000 fa43 	bl	8022610 <pb_encode_tag_for_field>
 802218a:	4603      	mov	r3, r0
 802218c:	f083 0301 	eor.w	r3, r3, #1
 8022190:	b2db      	uxtb	r3, r3
 8022192:	2b00      	cmp	r3, #0
 8022194:	d001      	beq.n	802219a <encode_basic_field+0x186>
                    return false;
 8022196:	2300      	movs	r3, #0
 8022198:	e016      	b.n	80221c8 <encode_basic_field+0x1b4>

                if (!func(stream, field, pData))
 802219a:	697b      	ldr	r3, [r7, #20]
 802219c:	687a      	ldr	r2, [r7, #4]
 802219e:	68b9      	ldr	r1, [r7, #8]
 80221a0:	68f8      	ldr	r0, [r7, #12]
 80221a2:	4798      	blx	r3
 80221a4:	4603      	mov	r3, r0
 80221a6:	f083 0301 	eor.w	r3, r3, #1
 80221aa:	b2db      	uxtb	r3, r3
 80221ac:	2b00      	cmp	r3, #0
 80221ae:	d009      	beq.n	80221c4 <encode_basic_field+0x1b0>
                    return false;
 80221b0:	2300      	movs	r3, #0
 80221b2:	e009      	b.n	80221c8 <encode_basic_field+0x1b4>
            }
            break;
            
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80221b4:	2300      	movs	r3, #0
 80221b6:	e007      	b.n	80221c8 <encode_basic_field+0x1b4>
            break;
 80221b8:	bf00      	nop
 80221ba:	e004      	b.n	80221c6 <encode_basic_field+0x1b2>
            break;
 80221bc:	bf00      	nop
 80221be:	e002      	b.n	80221c6 <encode_basic_field+0x1b2>
            break;
 80221c0:	bf00      	nop
 80221c2:	e000      	b.n	80221c6 <encode_basic_field+0x1b2>
            break;
 80221c4:	bf00      	nop
    }
    
    return true;
 80221c6:	2301      	movs	r3, #1
}
 80221c8:	4618      	mov	r0, r3
 80221ca:	3720      	adds	r7, #32
 80221cc:	46bd      	mov	sp, r7
 80221ce:	bd80      	pop	{r7, pc}
 80221d0:	08072138 	.word	0x08072138

080221d4 <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 80221d4:	b580      	push	{r7, lr}
 80221d6:	b086      	sub	sp, #24
 80221d8:	af00      	add	r7, sp, #0
 80221da:	60f8      	str	r0, [r7, #12]
 80221dc:	60b9      	str	r1, [r7, #8]
 80221de:	607a      	str	r2, [r7, #4]
    const pb_callback_t *callback = (const pb_callback_t*)pData;
 80221e0:	687b      	ldr	r3, [r7, #4]
 80221e2:	617b      	str	r3, [r7, #20]
    
#ifdef PB_OLD_CALLBACK_STYLE
    const void *arg = callback->arg;
#else
    void * const *arg = &(callback->arg);
 80221e4:	697b      	ldr	r3, [r7, #20]
 80221e6:	3304      	adds	r3, #4
 80221e8:	613b      	str	r3, [r7, #16]
#endif    
    
    if (callback->funcs.encode != NULL)
 80221ea:	697b      	ldr	r3, [r7, #20]
 80221ec:	681b      	ldr	r3, [r3, #0]
 80221ee:	2b00      	cmp	r3, #0
 80221f0:	d00d      	beq.n	802220e <encode_callback_field+0x3a>
    {
        if (!callback->funcs.encode(stream, field, arg))
 80221f2:	697b      	ldr	r3, [r7, #20]
 80221f4:	681b      	ldr	r3, [r3, #0]
 80221f6:	693a      	ldr	r2, [r7, #16]
 80221f8:	68b9      	ldr	r1, [r7, #8]
 80221fa:	68f8      	ldr	r0, [r7, #12]
 80221fc:	4798      	blx	r3
 80221fe:	4603      	mov	r3, r0
 8022200:	f083 0301 	eor.w	r3, r3, #1
 8022204:	b2db      	uxtb	r3, r3
 8022206:	2b00      	cmp	r3, #0
 8022208:	d001      	beq.n	802220e <encode_callback_field+0x3a>
            PB_RETURN_ERROR(stream, "callback error");
 802220a:	2300      	movs	r3, #0
 802220c:	e000      	b.n	8022210 <encode_callback_field+0x3c>
    }
    return true;
 802220e:	2301      	movs	r3, #1
}
 8022210:	4618      	mov	r0, r3
 8022212:	3718      	adds	r7, #24
 8022214:	46bd      	mov	sp, r7
 8022216:	bd80      	pop	{r7, pc}

08022218 <encode_field>:

/* Encode a single field of any callback or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 8022218:	b580      	push	{r7, lr}
 802221a:	b084      	sub	sp, #16
 802221c:	af00      	add	r7, sp, #0
 802221e:	60f8      	str	r0, [r7, #12]
 8022220:	60b9      	str	r1, [r7, #8]
 8022222:	607a      	str	r2, [r7, #4]
    switch (PB_ATYPE(field->type))
 8022224:	68bb      	ldr	r3, [r7, #8]
 8022226:	789b      	ldrb	r3, [r3, #2]
 8022228:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 802222c:	2b80      	cmp	r3, #128	@ 0x80
 802222e:	d006      	beq.n	802223e <encode_field+0x26>
 8022230:	2b80      	cmp	r3, #128	@ 0x80
 8022232:	dc12      	bgt.n	802225a <encode_field+0x42>
 8022234:	2b00      	cmp	r3, #0
 8022236:	d002      	beq.n	802223e <encode_field+0x26>
 8022238:	2b40      	cmp	r3, #64	@ 0x40
 802223a:	d007      	beq.n	802224c <encode_field+0x34>
 802223c:	e00d      	b.n	802225a <encode_field+0x42>
    {
        case PB_ATYPE_STATIC:
        case PB_ATYPE_POINTER:
            return encode_basic_field(stream, field, pData);
 802223e:	687a      	ldr	r2, [r7, #4]
 8022240:	68b9      	ldr	r1, [r7, #8]
 8022242:	68f8      	ldr	r0, [r7, #12]
 8022244:	f7ff fee6 	bl	8022014 <encode_basic_field>
 8022248:	4603      	mov	r3, r0
 802224a:	e007      	b.n	802225c <encode_field+0x44>
        
        case PB_ATYPE_CALLBACK:
            return encode_callback_field(stream, field, pData);
 802224c:	687a      	ldr	r2, [r7, #4]
 802224e:	68b9      	ldr	r1, [r7, #8]
 8022250:	68f8      	ldr	r0, [r7, #12]
 8022252:	f7ff ffbf 	bl	80221d4 <encode_callback_field>
 8022256:	4603      	mov	r3, r0
 8022258:	e000      	b.n	802225c <encode_field+0x44>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 802225a:	2300      	movs	r3, #0
    }
}
 802225c:	4618      	mov	r0, r3
 802225e:	3710      	adds	r7, #16
 8022260:	46bd      	mov	sp, r7
 8022262:	bd80      	pop	{r7, pc}

08022264 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_field_t
 * pointer in the extension->type->arg field. */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream,
    const pb_extension_t *extension)
{
 8022264:	b580      	push	{r7, lr}
 8022266:	b084      	sub	sp, #16
 8022268:	af00      	add	r7, sp, #0
 802226a:	6078      	str	r0, [r7, #4]
 802226c:	6039      	str	r1, [r7, #0]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 802226e:	683b      	ldr	r3, [r7, #0]
 8022270:	681b      	ldr	r3, [r3, #0]
 8022272:	689b      	ldr	r3, [r3, #8]
 8022274:	60fb      	str	r3, [r7, #12]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8022276:	68fb      	ldr	r3, [r7, #12]
 8022278:	789b      	ldrb	r3, [r3, #2]
 802227a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 802227e:	2b80      	cmp	r3, #128	@ 0x80
 8022280:	d108      	bne.n	8022294 <default_extension_encoder+0x30>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        return encode_field(stream, field, &extension->dest);
 8022282:	683b      	ldr	r3, [r7, #0]
 8022284:	3304      	adds	r3, #4
 8022286:	461a      	mov	r2, r3
 8022288:	68f9      	ldr	r1, [r7, #12]
 802228a:	6878      	ldr	r0, [r7, #4]
 802228c:	f7ff ffc4 	bl	8022218 <encode_field>
 8022290:	4603      	mov	r3, r0
 8022292:	e007      	b.n	80222a4 <default_extension_encoder+0x40>
    }
    else
    {
        return encode_field(stream, field, extension->dest);
 8022294:	683b      	ldr	r3, [r7, #0]
 8022296:	685b      	ldr	r3, [r3, #4]
 8022298:	461a      	mov	r2, r3
 802229a:	68f9      	ldr	r1, [r7, #12]
 802229c:	6878      	ldr	r0, [r7, #4]
 802229e:	f7ff ffbb 	bl	8022218 <encode_field>
 80222a2:	4603      	mov	r3, r0
    }
}
 80222a4:	4618      	mov	r0, r3
 80222a6:	3710      	adds	r7, #16
 80222a8:	46bd      	mov	sp, r7
 80222aa:	bd80      	pop	{r7, pc}

080222ac <encode_extension_field>:

/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 80222ac:	b580      	push	{r7, lr}
 80222ae:	b086      	sub	sp, #24
 80222b0:	af00      	add	r7, sp, #0
 80222b2:	60f8      	str	r0, [r7, #12]
 80222b4:	60b9      	str	r1, [r7, #8]
 80222b6:	607a      	str	r2, [r7, #4]
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 80222b8:	687b      	ldr	r3, [r7, #4]
 80222ba:	681b      	ldr	r3, [r3, #0]
 80222bc:	617b      	str	r3, [r7, #20]
    PB_UNUSED(field);
    
    while (extension)
 80222be:	e01e      	b.n	80222fe <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 80222c0:	697b      	ldr	r3, [r7, #20]
 80222c2:	681b      	ldr	r3, [r3, #0]
 80222c4:	685b      	ldr	r3, [r3, #4]
 80222c6:	2b00      	cmp	r3, #0
 80222c8:	d008      	beq.n	80222dc <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 80222ca:	697b      	ldr	r3, [r7, #20]
 80222cc:	681b      	ldr	r3, [r3, #0]
 80222ce:	685b      	ldr	r3, [r3, #4]
 80222d0:	6979      	ldr	r1, [r7, #20]
 80222d2:	68f8      	ldr	r0, [r7, #12]
 80222d4:	4798      	blx	r3
 80222d6:	4603      	mov	r3, r0
 80222d8:	74fb      	strb	r3, [r7, #19]
 80222da:	e005      	b.n	80222e8 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 80222dc:	6979      	ldr	r1, [r7, #20]
 80222de:	68f8      	ldr	r0, [r7, #12]
 80222e0:	f7ff ffc0 	bl	8022264 <default_extension_encoder>
 80222e4:	4603      	mov	r3, r0
 80222e6:	74fb      	strb	r3, [r7, #19]

        if (!status)
 80222e8:	7cfb      	ldrb	r3, [r7, #19]
 80222ea:	f083 0301 	eor.w	r3, r3, #1
 80222ee:	b2db      	uxtb	r3, r3
 80222f0:	2b00      	cmp	r3, #0
 80222f2:	d001      	beq.n	80222f8 <encode_extension_field+0x4c>
            return false;
 80222f4:	2300      	movs	r3, #0
 80222f6:	e006      	b.n	8022306 <encode_extension_field+0x5a>
        
        extension = extension->next;
 80222f8:	697b      	ldr	r3, [r7, #20]
 80222fa:	689b      	ldr	r3, [r3, #8]
 80222fc:	617b      	str	r3, [r7, #20]
    while (extension)
 80222fe:	697b      	ldr	r3, [r7, #20]
 8022300:	2b00      	cmp	r3, #0
 8022302:	d1dd      	bne.n	80222c0 <encode_extension_field+0x14>
    }
    
    return true;
 8022304:	2301      	movs	r3, #1
}
 8022306:	4618      	mov	r0, r3
 8022308:	3718      	adds	r7, #24
 802230a:	46bd      	mov	sp, r7
 802230c:	bd80      	pop	{r7, pc}

0802230e <pb_const_cast>:
/*********************
 * Encode all fields *
 *********************/

static void *pb_const_cast(const void *p)
{
 802230e:	b480      	push	{r7}
 8022310:	b085      	sub	sp, #20
 8022312:	af00      	add	r7, sp, #0
 8022314:	6078      	str	r0, [r7, #4]
     * logic for both encoding and decoding. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 8022316:	687b      	ldr	r3, [r7, #4]
 8022318:	60fb      	str	r3, [r7, #12]
    return t.p1;
 802231a:	68fb      	ldr	r3, [r7, #12]
}
 802231c:	4618      	mov	r0, r3
 802231e:	3714      	adds	r7, #20
 8022320:	46bd      	mov	sp, r7
 8022322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022326:	4770      	bx	lr

08022328 <pb_encode>:

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct)
{
 8022328:	b580      	push	{r7, lr}
 802232a:	b08a      	sub	sp, #40	@ 0x28
 802232c:	af00      	add	r7, sp, #0
 802232e:	60f8      	str	r0, [r7, #12]
 8022330:	60b9      	str	r1, [r7, #8]
 8022332:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 8022334:	6878      	ldr	r0, [r7, #4]
 8022336:	f7ff ffea 	bl	802230e <pb_const_cast>
 802233a:	4602      	mov	r2, r0
 802233c:	f107 0310 	add.w	r3, r7, #16
 8022340:	68b9      	ldr	r1, [r7, #8]
 8022342:	4618      	mov	r0, r3
 8022344:	f7fe f88c 	bl	8020460 <pb_field_iter_begin>
 8022348:	4603      	mov	r3, r0
 802234a:	f083 0301 	eor.w	r3, r3, #1
 802234e:	b2db      	uxtb	r3, r3
 8022350:	2b00      	cmp	r3, #0
 8022352:	d001      	beq.n	8022358 <pb_encode+0x30>
        return true; /* Empty message type */
 8022354:	2301      	movs	r3, #1
 8022356:	e02a      	b.n	80223ae <pb_encode+0x86>
    
    do {
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 8022358:	697b      	ldr	r3, [r7, #20]
 802235a:	789b      	ldrb	r3, [r3, #2]
 802235c:	f003 030f 	and.w	r3, r3, #15
 8022360:	2b08      	cmp	r3, #8
 8022362:	d10d      	bne.n	8022380 <pb_encode+0x58>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 8022364:	697b      	ldr	r3, [r7, #20]
 8022366:	6a3a      	ldr	r2, [r7, #32]
 8022368:	4619      	mov	r1, r3
 802236a:	68f8      	ldr	r0, [r7, #12]
 802236c:	f7ff ff9e 	bl	80222ac <encode_extension_field>
 8022370:	4603      	mov	r3, r0
 8022372:	f083 0301 	eor.w	r3, r3, #1
 8022376:	b2db      	uxtb	r3, r3
 8022378:	2b00      	cmp	r3, #0
 802237a:	d00f      	beq.n	802239c <pb_encode+0x74>
                return false;
 802237c:	2300      	movs	r3, #0
 802237e:	e016      	b.n	80223ae <pb_encode+0x86>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, iter.pos, iter.pData))
 8022380:	697b      	ldr	r3, [r7, #20]
 8022382:	6a3a      	ldr	r2, [r7, #32]
 8022384:	4619      	mov	r1, r3
 8022386:	68f8      	ldr	r0, [r7, #12]
 8022388:	f7ff ff46 	bl	8022218 <encode_field>
 802238c:	4603      	mov	r3, r0
 802238e:	f083 0301 	eor.w	r3, r3, #1
 8022392:	b2db      	uxtb	r3, r3
 8022394:	2b00      	cmp	r3, #0
 8022396:	d001      	beq.n	802239c <pb_encode+0x74>
                return false;
 8022398:	2300      	movs	r3, #0
 802239a:	e008      	b.n	80223ae <pb_encode+0x86>
        }
    } while (pb_field_iter_next(&iter));
 802239c:	f107 0310 	add.w	r3, r7, #16
 80223a0:	4618      	mov	r0, r3
 80223a2:	f7fe f88e 	bl	80204c2 <pb_field_iter_next>
 80223a6:	4603      	mov	r3, r0
 80223a8:	2b00      	cmp	r3, #0
 80223aa:	d1d5      	bne.n	8022358 <pb_encode+0x30>
    
    return true;
 80223ac:	2301      	movs	r3, #1
}
 80223ae:	4618      	mov	r0, r3
 80223b0:	3728      	adds	r7, #40	@ 0x28
 80223b2:	46bd      	mov	sp, r7
 80223b4:	bd80      	pop	{r7, pc}

080223b6 <pb_encode_varint>:
  return pb_write(stream, buffer, i);
}
#endif

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 80223b6:	b580      	push	{r7, lr}
 80223b8:	b08a      	sub	sp, #40	@ 0x28
 80223ba:	af00      	add	r7, sp, #0
 80223bc:	60f8      	str	r0, [r7, #12]
 80223be:	e9c7 2300 	strd	r2, r3, [r7]
    pb_byte_t buffer[10];
    size_t i = 0;
 80223c2:	2300      	movs	r3, #0
 80223c4:	627b      	str	r3, [r7, #36]	@ 0x24
    
    if (value <= 0x7F)
 80223c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80223ca:	2a80      	cmp	r2, #128	@ 0x80
 80223cc:	f173 0300 	sbcs.w	r3, r3, #0
 80223d0:	d223      	bcs.n	802241a <pb_encode_varint+0x64>
    {
        pb_byte_t v = (pb_byte_t)value;
 80223d2:	783b      	ldrb	r3, [r7, #0]
 80223d4:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &v, 1);
 80223d6:	f107 0317 	add.w	r3, r7, #23
 80223da:	2201      	movs	r2, #1
 80223dc:	4619      	mov	r1, r3
 80223de:	68f8      	ldr	r0, [r7, #12]
 80223e0:	f7ff fc2c 	bl	8021c3c <pb_write>
 80223e4:	4603      	mov	r3, r0
 80223e6:	e033      	b.n	8022450 <pb_encode_varint+0x9a>
    }
    
    while (value)
    {
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 80223e8:	783b      	ldrb	r3, [r7, #0]
 80223ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80223ee:	b2d9      	uxtb	r1, r3
 80223f0:	f107 0218 	add.w	r2, r7, #24
 80223f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80223f6:	4413      	add	r3, r2
 80223f8:	460a      	mov	r2, r1
 80223fa:	701a      	strb	r2, [r3, #0]
        value >>= 7;
 80223fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8022400:	f04f 0200 	mov.w	r2, #0
 8022404:	f04f 0300 	mov.w	r3, #0
 8022408:	09c2      	lsrs	r2, r0, #7
 802240a:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 802240e:	09cb      	lsrs	r3, r1, #7
 8022410:	e9c7 2300 	strd	r2, r3, [r7]
        i++;
 8022414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022416:	3301      	adds	r3, #1
 8022418:	627b      	str	r3, [r7, #36]	@ 0x24
    while (value)
 802241a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802241e:	4313      	orrs	r3, r2
 8022420:	d1e2      	bne.n	80223e8 <pb_encode_varint+0x32>
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 8022422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022424:	3b01      	subs	r3, #1
 8022426:	3328      	adds	r3, #40	@ 0x28
 8022428:	443b      	add	r3, r7
 802242a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 802242e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022430:	3b01      	subs	r3, #1
 8022432:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8022436:	b2d2      	uxtb	r2, r2
 8022438:	3328      	adds	r3, #40	@ 0x28
 802243a:	443b      	add	r3, r7
 802243c:	f803 2c10 	strb.w	r2, [r3, #-16]
    
    return pb_write(stream, buffer, i);
 8022440:	f107 0318 	add.w	r3, r7, #24
 8022444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022446:	4619      	mov	r1, r3
 8022448:	68f8      	ldr	r0, [r7, #12]
 802244a:	f7ff fbf7 	bl	8021c3c <pb_write>
 802244e:	4603      	mov	r3, r0
}
 8022450:	4618      	mov	r0, r3
 8022452:	3728      	adds	r7, #40	@ 0x28
 8022454:	46bd      	mov	sp, r7
 8022456:	bd80      	pop	{r7, pc}

08022458 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 8022458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802245c:	b086      	sub	sp, #24
 802245e:	af00      	add	r7, sp, #0
 8022460:	60f8      	str	r0, [r7, #12]
 8022462:	e9c7 2300 	strd	r2, r3, [r7]
    pb_uint64_t zigzagged;
    if (value < 0)
 8022466:	e9d7 2300 	ldrd	r2, r3, [r7]
 802246a:	2b00      	cmp	r3, #0
 802246c:	da0e      	bge.n	802248c <pb_encode_svarint+0x34>
        zigzagged = ~((pb_uint64_t)value << 1);
 802246e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022472:	eb12 0a02 	adds.w	sl, r2, r2
 8022476:	eb43 0b03 	adc.w	fp, r3, r3
 802247a:	4652      	mov	r2, sl
 802247c:	465b      	mov	r3, fp
 802247e:	ea6f 0802 	mvn.w	r8, r2
 8022482:	ea6f 0903 	mvn.w	r9, r3
 8022486:	e9c7 8904 	strd	r8, r9, [r7, #16]
 802248a:	e006      	b.n	802249a <pb_encode_svarint+0x42>
    else
        zigzagged = (pb_uint64_t)value << 1;
 802248c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022490:	1894      	adds	r4, r2, r2
 8022492:	eb43 0503 	adc.w	r5, r3, r3
 8022496:	e9c7 4504 	strd	r4, r5, [r7, #16]
    
    return pb_encode_varint(stream, zigzagged);
 802249a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802249e:	68f8      	ldr	r0, [r7, #12]
 80224a0:	f7ff ff89 	bl	80223b6 <pb_encode_varint>
 80224a4:	4603      	mov	r3, r0
}
 80224a6:	4618      	mov	r0, r3
 80224a8:	3718      	adds	r7, #24
 80224aa:	46bd      	mov	sp, r7
 80224ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080224b0 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 80224b0:	b580      	push	{r7, lr}
 80224b2:	b084      	sub	sp, #16
 80224b4:	af00      	add	r7, sp, #0
 80224b6:	6078      	str	r0, [r7, #4]
 80224b8:	6039      	str	r1, [r7, #0]
    uint32_t val = *(const uint32_t*)value;
 80224ba:	683b      	ldr	r3, [r7, #0]
 80224bc:	681b      	ldr	r3, [r3, #0]
 80224be:	60fb      	str	r3, [r7, #12]
    pb_byte_t bytes[4];
    bytes[0] = (pb_byte_t)(val & 0xFF);
 80224c0:	68fb      	ldr	r3, [r7, #12]
 80224c2:	b2db      	uxtb	r3, r3
 80224c4:	723b      	strb	r3, [r7, #8]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 80224c6:	68fb      	ldr	r3, [r7, #12]
 80224c8:	0a1b      	lsrs	r3, r3, #8
 80224ca:	b2db      	uxtb	r3, r3
 80224cc:	727b      	strb	r3, [r7, #9]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 80224ce:	68fb      	ldr	r3, [r7, #12]
 80224d0:	0c1b      	lsrs	r3, r3, #16
 80224d2:	b2db      	uxtb	r3, r3
 80224d4:	72bb      	strb	r3, [r7, #10]
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 80224d6:	68fb      	ldr	r3, [r7, #12]
 80224d8:	0e1b      	lsrs	r3, r3, #24
 80224da:	b2db      	uxtb	r3, r3
 80224dc:	72fb      	strb	r3, [r7, #11]
    return pb_write(stream, bytes, 4);
 80224de:	f107 0308 	add.w	r3, r7, #8
 80224e2:	2204      	movs	r2, #4
 80224e4:	4619      	mov	r1, r3
 80224e6:	6878      	ldr	r0, [r7, #4]
 80224e8:	f7ff fba8 	bl	8021c3c <pb_write>
 80224ec:	4603      	mov	r3, r0
}
 80224ee:	4618      	mov	r0, r3
 80224f0:	3710      	adds	r7, #16
 80224f2:	46bd      	mov	sp, r7
 80224f4:	bd80      	pop	{r7, pc}

080224f6 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 80224f6:	b580      	push	{r7, lr}
 80224f8:	b086      	sub	sp, #24
 80224fa:	af00      	add	r7, sp, #0
 80224fc:	6078      	str	r0, [r7, #4]
 80224fe:	6039      	str	r1, [r7, #0]
    uint64_t val = *(const uint64_t*)value;
 8022500:	683b      	ldr	r3, [r7, #0]
 8022502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022506:	e9c7 2304 	strd	r2, r3, [r7, #16]
    pb_byte_t bytes[8];
    bytes[0] = (pb_byte_t)(val & 0xFF);
 802250a:	7c3b      	ldrb	r3, [r7, #16]
 802250c:	723b      	strb	r3, [r7, #8]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 802250e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8022512:	f04f 0200 	mov.w	r2, #0
 8022516:	f04f 0300 	mov.w	r3, #0
 802251a:	0a02      	lsrs	r2, r0, #8
 802251c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8022520:	0a0b      	lsrs	r3, r1, #8
 8022522:	b2d3      	uxtb	r3, r2
 8022524:	727b      	strb	r3, [r7, #9]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 8022526:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802252a:	f04f 0200 	mov.w	r2, #0
 802252e:	f04f 0300 	mov.w	r3, #0
 8022532:	0c02      	lsrs	r2, r0, #16
 8022534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8022538:	0c0b      	lsrs	r3, r1, #16
 802253a:	b2d3      	uxtb	r3, r2
 802253c:	72bb      	strb	r3, [r7, #10]
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 802253e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8022542:	f04f 0200 	mov.w	r2, #0
 8022546:	f04f 0300 	mov.w	r3, #0
 802254a:	0e02      	lsrs	r2, r0, #24
 802254c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8022550:	0e0b      	lsrs	r3, r1, #24
 8022552:	b2d3      	uxtb	r3, r2
 8022554:	72fb      	strb	r3, [r7, #11]
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 8022556:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802255a:	f04f 0200 	mov.w	r2, #0
 802255e:	f04f 0300 	mov.w	r3, #0
 8022562:	000a      	movs	r2, r1
 8022564:	2300      	movs	r3, #0
 8022566:	b2d3      	uxtb	r3, r2
 8022568:	733b      	strb	r3, [r7, #12]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 802256a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802256e:	f04f 0200 	mov.w	r2, #0
 8022572:	f04f 0300 	mov.w	r3, #0
 8022576:	0a0a      	lsrs	r2, r1, #8
 8022578:	2300      	movs	r3, #0
 802257a:	b2d3      	uxtb	r3, r2
 802257c:	737b      	strb	r3, [r7, #13]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 802257e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8022582:	f04f 0200 	mov.w	r2, #0
 8022586:	f04f 0300 	mov.w	r3, #0
 802258a:	0c0a      	lsrs	r2, r1, #16
 802258c:	2300      	movs	r3, #0
 802258e:	b2d3      	uxtb	r3, r2
 8022590:	73bb      	strb	r3, [r7, #14]
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 8022592:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8022596:	f04f 0200 	mov.w	r2, #0
 802259a:	f04f 0300 	mov.w	r3, #0
 802259e:	0e0a      	lsrs	r2, r1, #24
 80225a0:	2300      	movs	r3, #0
 80225a2:	b2d3      	uxtb	r3, r2
 80225a4:	73fb      	strb	r3, [r7, #15]
    return pb_write(stream, bytes, 8);
 80225a6:	f107 0308 	add.w	r3, r7, #8
 80225aa:	2208      	movs	r2, #8
 80225ac:	4619      	mov	r1, r3
 80225ae:	6878      	ldr	r0, [r7, #4]
 80225b0:	f7ff fb44 	bl	8021c3c <pb_write>
 80225b4:	4603      	mov	r3, r0
}
 80225b6:	4618      	mov	r0, r3
 80225b8:	3718      	adds	r7, #24
 80225ba:	46bd      	mov	sp, r7
 80225bc:	bd80      	pop	{r7, pc}

080225be <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 80225be:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80225c2:	b088      	sub	sp, #32
 80225c4:	af00      	add	r7, sp, #0
 80225c6:	6178      	str	r0, [r7, #20]
 80225c8:	460b      	mov	r3, r1
 80225ca:	60fa      	str	r2, [r7, #12]
 80225cc:	74fb      	strb	r3, [r7, #19]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 80225ce:	68fb      	ldr	r3, [r7, #12]
 80225d0:	2200      	movs	r2, #0
 80225d2:	469a      	mov	sl, r3
 80225d4:	4693      	mov	fp, r2
 80225d6:	ea4f 755a 	mov.w	r5, sl, lsr #29
 80225da:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 80225de:	7cfb      	ldrb	r3, [r7, #19]
 80225e0:	2200      	movs	r2, #0
 80225e2:	4698      	mov	r8, r3
 80225e4:	4691      	mov	r9, r2
 80225e6:	ea44 0308 	orr.w	r3, r4, r8
 80225ea:	603b      	str	r3, [r7, #0]
 80225ec:	ea45 0309 	orr.w	r3, r5, r9
 80225f0:	607b      	str	r3, [r7, #4]
 80225f2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80225f6:	e9c7 3406 	strd	r3, r4, [r7, #24]
    return pb_encode_varint(stream, tag);
 80225fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80225fe:	6978      	ldr	r0, [r7, #20]
 8022600:	f7ff fed9 	bl	80223b6 <pb_encode_varint>
 8022604:	4603      	mov	r3, r0
}
 8022606:	4618      	mov	r0, r3
 8022608:	3720      	adds	r7, #32
 802260a:	46bd      	mov	sp, r7
 802260c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08022610 <pb_encode_tag_for_field>:

bool checkreturn pb_encode_tag_for_field(pb_ostream_t *stream, const pb_field_t *field)
{
 8022610:	b580      	push	{r7, lr}
 8022612:	b084      	sub	sp, #16
 8022614:	af00      	add	r7, sp, #0
 8022616:	6078      	str	r0, [r7, #4]
 8022618:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 802261a:	683b      	ldr	r3, [r7, #0]
 802261c:	789b      	ldrb	r3, [r3, #2]
 802261e:	f003 030f 	and.w	r3, r3, #15
 8022622:	2b09      	cmp	r3, #9
 8022624:	d822      	bhi.n	802266c <pb_encode_tag_for_field+0x5c>
 8022626:	a201      	add	r2, pc, #4	@ (adr r2, 802262c <pb_encode_tag_for_field+0x1c>)
 8022628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802262c:	08022655 	.word	0x08022655
 8022630:	08022655 	.word	0x08022655
 8022634:	08022655 	.word	0x08022655
 8022638:	0802265b 	.word	0x0802265b
 802263c:	08022661 	.word	0x08022661
 8022640:	08022667 	.word	0x08022667
 8022644:	08022667 	.word	0x08022667
 8022648:	08022667 	.word	0x08022667
 802264c:	0802266d 	.word	0x0802266d
 8022650:	08022667 	.word	0x08022667
    {
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 8022654:	2300      	movs	r3, #0
 8022656:	73fb      	strb	r3, [r7, #15]
            break;
 8022658:	e00a      	b.n	8022670 <pb_encode_tag_for_field+0x60>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 802265a:	2305      	movs	r3, #5
 802265c:	73fb      	strb	r3, [r7, #15]
            break;
 802265e:	e007      	b.n	8022670 <pb_encode_tag_for_field+0x60>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 8022660:	2301      	movs	r3, #1
 8022662:	73fb      	strb	r3, [r7, #15]
            break;
 8022664:	e004      	b.n	8022670 <pb_encode_tag_for_field+0x60>
        
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 8022666:	2302      	movs	r3, #2
 8022668:	73fb      	strb	r3, [r7, #15]
            break;
 802266a:	e001      	b.n	8022670 <pb_encode_tag_for_field+0x60>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 802266c:	2300      	movs	r3, #0
 802266e:	e008      	b.n	8022682 <pb_encode_tag_for_field+0x72>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 8022670:	683b      	ldr	r3, [r7, #0]
 8022672:	881b      	ldrh	r3, [r3, #0]
 8022674:	461a      	mov	r2, r3
 8022676:	7bfb      	ldrb	r3, [r7, #15]
 8022678:	4619      	mov	r1, r3
 802267a:	6878      	ldr	r0, [r7, #4]
 802267c:	f7ff ff9f 	bl	80225be <pb_encode_tag>
 8022680:	4603      	mov	r3, r0
}
 8022682:	4618      	mov	r0, r3
 8022684:	3710      	adds	r7, #16
 8022686:	46bd      	mov	sp, r7
 8022688:	bd80      	pop	{r7, pc}
 802268a:	bf00      	nop

0802268c <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 802268c:	b5b0      	push	{r4, r5, r7, lr}
 802268e:	b084      	sub	sp, #16
 8022690:	af00      	add	r7, sp, #0
 8022692:	60f8      	str	r0, [r7, #12]
 8022694:	60b9      	str	r1, [r7, #8]
 8022696:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8022698:	687b      	ldr	r3, [r7, #4]
 802269a:	2200      	movs	r2, #0
 802269c:	461c      	mov	r4, r3
 802269e:	4615      	mov	r5, r2
 80226a0:	4622      	mov	r2, r4
 80226a2:	462b      	mov	r3, r5
 80226a4:	68f8      	ldr	r0, [r7, #12]
 80226a6:	f7ff fe86 	bl	80223b6 <pb_encode_varint>
 80226aa:	4603      	mov	r3, r0
 80226ac:	f083 0301 	eor.w	r3, r3, #1
 80226b0:	b2db      	uxtb	r3, r3
 80226b2:	2b00      	cmp	r3, #0
 80226b4:	d001      	beq.n	80226ba <pb_encode_string+0x2e>
        return false;
 80226b6:	2300      	movs	r3, #0
 80226b8:	e005      	b.n	80226c6 <pb_encode_string+0x3a>
    
    return pb_write(stream, buffer, size);
 80226ba:	687a      	ldr	r2, [r7, #4]
 80226bc:	68b9      	ldr	r1, [r7, #8]
 80226be:	68f8      	ldr	r0, [r7, #12]
 80226c0:	f7ff fabc 	bl	8021c3c <pb_write>
 80226c4:	4603      	mov	r3, r0
}
 80226c6:	4618      	mov	r0, r3
 80226c8:	3710      	adds	r7, #16
 80226ca:	46bd      	mov	sp, r7
 80226cc:	bdb0      	pop	{r4, r5, r7, pc}

080226ce <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct)
{
 80226ce:	b5b0      	push	{r4, r5, r7, lr}
 80226d0:	b08a      	sub	sp, #40	@ 0x28
 80226d2:	af00      	add	r7, sp, #0
 80226d4:	60f8      	str	r0, [r7, #12]
 80226d6:	60b9      	str	r1, [r7, #8]
 80226d8:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 80226da:	f107 0310 	add.w	r3, r7, #16
 80226de:	2200      	movs	r2, #0
 80226e0:	601a      	str	r2, [r3, #0]
 80226e2:	605a      	str	r2, [r3, #4]
 80226e4:	609a      	str	r2, [r3, #8]
 80226e6:	60da      	str	r2, [r3, #12]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 80226e8:	f107 0310 	add.w	r3, r7, #16
 80226ec:	687a      	ldr	r2, [r7, #4]
 80226ee:	68b9      	ldr	r1, [r7, #8]
 80226f0:	4618      	mov	r0, r3
 80226f2:	f7ff fe19 	bl	8022328 <pb_encode>
 80226f6:	4603      	mov	r3, r0
 80226f8:	f083 0301 	eor.w	r3, r3, #1
 80226fc:	b2db      	uxtb	r3, r3
 80226fe:	2b00      	cmp	r3, #0
 8022700:	d001      	beq.n	8022706 <pb_encode_submessage+0x38>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
#endif
        return false;
 8022702:	2300      	movs	r3, #0
 8022704:	e04c      	b.n	80227a0 <pb_encode_submessage+0xd2>
    }
    
    size = substream.bytes_written;
 8022706:	69fb      	ldr	r3, [r7, #28]
 8022708:	627b      	str	r3, [r7, #36]	@ 0x24
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 802270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802270c:	2200      	movs	r2, #0
 802270e:	461c      	mov	r4, r3
 8022710:	4615      	mov	r5, r2
 8022712:	4622      	mov	r2, r4
 8022714:	462b      	mov	r3, r5
 8022716:	68f8      	ldr	r0, [r7, #12]
 8022718:	f7ff fe4d 	bl	80223b6 <pb_encode_varint>
 802271c:	4603      	mov	r3, r0
 802271e:	f083 0301 	eor.w	r3, r3, #1
 8022722:	b2db      	uxtb	r3, r3
 8022724:	2b00      	cmp	r3, #0
 8022726:	d001      	beq.n	802272c <pb_encode_submessage+0x5e>
        return false;
 8022728:	2300      	movs	r3, #0
 802272a:	e039      	b.n	80227a0 <pb_encode_submessage+0xd2>
    
    if (stream->callback == NULL)
 802272c:	68fb      	ldr	r3, [r7, #12]
 802272e:	681b      	ldr	r3, [r3, #0]
 8022730:	2b00      	cmp	r3, #0
 8022732:	d106      	bne.n	8022742 <pb_encode_submessage+0x74>
        return pb_write(stream, NULL, size); /* Just sizing */
 8022734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022736:	2100      	movs	r1, #0
 8022738:	68f8      	ldr	r0, [r7, #12]
 802273a:	f7ff fa7f 	bl	8021c3c <pb_write>
 802273e:	4603      	mov	r3, r0
 8022740:	e02e      	b.n	80227a0 <pb_encode_submessage+0xd2>
    
    if (stream->bytes_written + size > stream->max_size)
 8022742:	68fb      	ldr	r3, [r7, #12]
 8022744:	68da      	ldr	r2, [r3, #12]
 8022746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022748:	441a      	add	r2, r3
 802274a:	68fb      	ldr	r3, [r7, #12]
 802274c:	689b      	ldr	r3, [r3, #8]
 802274e:	429a      	cmp	r2, r3
 8022750:	d901      	bls.n	8022756 <pb_encode_submessage+0x88>
        PB_RETURN_ERROR(stream, "stream full");
 8022752:	2300      	movs	r3, #0
 8022754:	e024      	b.n	80227a0 <pb_encode_submessage+0xd2>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 8022756:	68fb      	ldr	r3, [r7, #12]
 8022758:	681b      	ldr	r3, [r3, #0]
 802275a:	613b      	str	r3, [r7, #16]
    substream.state = stream->state;
 802275c:	68fb      	ldr	r3, [r7, #12]
 802275e:	685b      	ldr	r3, [r3, #4]
 8022760:	617b      	str	r3, [r7, #20]
    substream.max_size = size;
 8022762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022764:	61bb      	str	r3, [r7, #24]
    substream.bytes_written = 0;
 8022766:	2300      	movs	r3, #0
 8022768:	61fb      	str	r3, [r7, #28]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 802276a:	f107 0310 	add.w	r3, r7, #16
 802276e:	687a      	ldr	r2, [r7, #4]
 8022770:	68b9      	ldr	r1, [r7, #8]
 8022772:	4618      	mov	r0, r3
 8022774:	f7ff fdd8 	bl	8022328 <pb_encode>
 8022778:	4603      	mov	r3, r0
 802277a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    
    stream->bytes_written += substream.bytes_written;
 802277e:	68fb      	ldr	r3, [r7, #12]
 8022780:	68da      	ldr	r2, [r3, #12]
 8022782:	69fb      	ldr	r3, [r7, #28]
 8022784:	441a      	add	r2, r3
 8022786:	68fb      	ldr	r3, [r7, #12]
 8022788:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 802278a:	697a      	ldr	r2, [r7, #20]
 802278c:	68fb      	ldr	r3, [r7, #12]
 802278e:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
#endif
    
    if (substream.bytes_written != size)
 8022790:	69fb      	ldr	r3, [r7, #28]
 8022792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022794:	429a      	cmp	r2, r3
 8022796:	d001      	beq.n	802279c <pb_encode_submessage+0xce>
        PB_RETURN_ERROR(stream, "submsg size changed");
 8022798:	2300      	movs	r3, #0
 802279a:	e001      	b.n	80227a0 <pb_encode_submessage+0xd2>
    
    return status;
 802279c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80227a0:	4618      	mov	r0, r3
 80227a2:	3728      	adds	r7, #40	@ 0x28
 80227a4:	46bd      	mov	sp, r7
 80227a6:	bdb0      	pop	{r4, r5, r7, pc}

080227a8 <pb_enc_varint>:

/* Field encoders */

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80227a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80227ac:	b086      	sub	sp, #24
 80227ae:	af00      	add	r7, sp, #0
 80227b0:	60f8      	str	r0, [r7, #12]
 80227b2:	60b9      	str	r1, [r7, #8]
 80227b4:	607a      	str	r2, [r7, #4]
    pb_int64_t value = 0;
 80227b6:	f04f 0200 	mov.w	r2, #0
 80227ba:	f04f 0300 	mov.w	r3, #0
 80227be:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    if (field->data_size == sizeof(int_least8_t))
 80227c2:	68bb      	ldr	r3, [r7, #8]
 80227c4:	891b      	ldrh	r3, [r3, #8]
 80227c6:	2b01      	cmp	r3, #1
 80227c8:	d109      	bne.n	80227de <pb_enc_varint+0x36>
        value = *(const int_least8_t*)src;
 80227ca:	687b      	ldr	r3, [r7, #4]
 80227cc:	f993 3000 	ldrsb.w	r3, [r3]
 80227d0:	b25b      	sxtb	r3, r3
 80227d2:	17da      	asrs	r2, r3, #31
 80227d4:	469a      	mov	sl, r3
 80227d6:	4693      	mov	fp, r2
 80227d8:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 80227dc:	e025      	b.n	802282a <pb_enc_varint+0x82>
    else if (field->data_size == sizeof(int_least16_t))
 80227de:	68bb      	ldr	r3, [r7, #8]
 80227e0:	891b      	ldrh	r3, [r3, #8]
 80227e2:	2b02      	cmp	r3, #2
 80227e4:	d109      	bne.n	80227fa <pb_enc_varint+0x52>
        value = *(const int_least16_t*)src;
 80227e6:	687b      	ldr	r3, [r7, #4]
 80227e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80227ec:	b21b      	sxth	r3, r3
 80227ee:	17da      	asrs	r2, r3, #31
 80227f0:	4698      	mov	r8, r3
 80227f2:	4691      	mov	r9, r2
 80227f4:	e9c7 8904 	strd	r8, r9, [r7, #16]
 80227f8:	e017      	b.n	802282a <pb_enc_varint+0x82>
    else if (field->data_size == sizeof(int32_t))
 80227fa:	68bb      	ldr	r3, [r7, #8]
 80227fc:	891b      	ldrh	r3, [r3, #8]
 80227fe:	2b04      	cmp	r3, #4
 8022800:	d107      	bne.n	8022812 <pb_enc_varint+0x6a>
        value = *(const int32_t*)src;
 8022802:	687b      	ldr	r3, [r7, #4]
 8022804:	681b      	ldr	r3, [r3, #0]
 8022806:	17da      	asrs	r2, r3, #31
 8022808:	461c      	mov	r4, r3
 802280a:	4615      	mov	r5, r2
 802280c:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8022810:	e00b      	b.n	802282a <pb_enc_varint+0x82>
    else if (field->data_size == sizeof(pb_int64_t))
 8022812:	68bb      	ldr	r3, [r7, #8]
 8022814:	891b      	ldrh	r3, [r3, #8]
 8022816:	2b08      	cmp	r3, #8
 8022818:	d105      	bne.n	8022826 <pb_enc_varint+0x7e>
        value = *(const pb_int64_t*)src;
 802281a:	687b      	ldr	r3, [r7, #4]
 802281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022820:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8022824:	e001      	b.n	802282a <pb_enc_varint+0x82>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 8022826:	2300      	movs	r3, #0
 8022828:	e005      	b.n	8022836 <pb_enc_varint+0x8e>
#ifdef PB_WITHOUT_64BIT
    if (value < 0)
      return pb_encode_negative_varint(stream, (pb_uint64_t)value);
    else
#endif
      return pb_encode_varint(stream, (pb_uint64_t)value);
 802282a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802282e:	68f8      	ldr	r0, [r7, #12]
 8022830:	f7ff fdc1 	bl	80223b6 <pb_encode_varint>
 8022834:	4603      	mov	r3, r0
}
 8022836:	4618      	mov	r0, r3
 8022838:	3718      	adds	r7, #24
 802283a:	46bd      	mov	sp, r7
 802283c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08022840 <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8022840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8022844:	b086      	sub	sp, #24
 8022846:	af00      	add	r7, sp, #0
 8022848:	60f8      	str	r0, [r7, #12]
 802284a:	60b9      	str	r1, [r7, #8]
 802284c:	607a      	str	r2, [r7, #4]
    pb_uint64_t value = 0;
 802284e:	f04f 0200 	mov.w	r2, #0
 8022852:	f04f 0300 	mov.w	r3, #0
 8022856:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    if (field->data_size == sizeof(uint_least8_t))
 802285a:	68bb      	ldr	r3, [r7, #8]
 802285c:	891b      	ldrh	r3, [r3, #8]
 802285e:	2b01      	cmp	r3, #1
 8022860:	d108      	bne.n	8022874 <pb_enc_uvarint+0x34>
        value = *(const uint_least8_t*)src;
 8022862:	687b      	ldr	r3, [r7, #4]
 8022864:	781b      	ldrb	r3, [r3, #0]
 8022866:	b2db      	uxtb	r3, r3
 8022868:	2200      	movs	r2, #0
 802286a:	469a      	mov	sl, r3
 802286c:	4693      	mov	fp, r2
 802286e:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 8022872:	e024      	b.n	80228be <pb_enc_uvarint+0x7e>
    else if (field->data_size == sizeof(uint_least16_t))
 8022874:	68bb      	ldr	r3, [r7, #8]
 8022876:	891b      	ldrh	r3, [r3, #8]
 8022878:	2b02      	cmp	r3, #2
 802287a:	d108      	bne.n	802288e <pb_enc_uvarint+0x4e>
        value = *(const uint_least16_t*)src;
 802287c:	687b      	ldr	r3, [r7, #4]
 802287e:	881b      	ldrh	r3, [r3, #0]
 8022880:	b29b      	uxth	r3, r3
 8022882:	2200      	movs	r2, #0
 8022884:	4698      	mov	r8, r3
 8022886:	4691      	mov	r9, r2
 8022888:	e9c7 8904 	strd	r8, r9, [r7, #16]
 802288c:	e017      	b.n	80228be <pb_enc_uvarint+0x7e>
    else if (field->data_size == sizeof(uint32_t))
 802288e:	68bb      	ldr	r3, [r7, #8]
 8022890:	891b      	ldrh	r3, [r3, #8]
 8022892:	2b04      	cmp	r3, #4
 8022894:	d107      	bne.n	80228a6 <pb_enc_uvarint+0x66>
        value = *(const uint32_t*)src;
 8022896:	687b      	ldr	r3, [r7, #4]
 8022898:	681b      	ldr	r3, [r3, #0]
 802289a:	2200      	movs	r2, #0
 802289c:	461c      	mov	r4, r3
 802289e:	4615      	mov	r5, r2
 80228a0:	e9c7 4504 	strd	r4, r5, [r7, #16]
 80228a4:	e00b      	b.n	80228be <pb_enc_uvarint+0x7e>
    else if (field->data_size == sizeof(pb_uint64_t))
 80228a6:	68bb      	ldr	r3, [r7, #8]
 80228a8:	891b      	ldrh	r3, [r3, #8]
 80228aa:	2b08      	cmp	r3, #8
 80228ac:	d105      	bne.n	80228ba <pb_enc_uvarint+0x7a>
        value = *(const pb_uint64_t*)src;
 80228ae:	687b      	ldr	r3, [r7, #4]
 80228b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80228b8:	e001      	b.n	80228be <pb_enc_uvarint+0x7e>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 80228ba:	2300      	movs	r3, #0
 80228bc:	e005      	b.n	80228ca <pb_enc_uvarint+0x8a>
    
    return pb_encode_varint(stream, value);
 80228be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80228c2:	68f8      	ldr	r0, [r7, #12]
 80228c4:	f7ff fd77 	bl	80223b6 <pb_encode_varint>
 80228c8:	4603      	mov	r3, r0
}
 80228ca:	4618      	mov	r0, r3
 80228cc:	3718      	adds	r7, #24
 80228ce:	46bd      	mov	sp, r7
 80228d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080228d4 <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80228d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80228d8:	b086      	sub	sp, #24
 80228da:	af00      	add	r7, sp, #0
 80228dc:	60f8      	str	r0, [r7, #12]
 80228de:	60b9      	str	r1, [r7, #8]
 80228e0:	607a      	str	r2, [r7, #4]
    pb_int64_t value = 0;
 80228e2:	f04f 0200 	mov.w	r2, #0
 80228e6:	f04f 0300 	mov.w	r3, #0
 80228ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    if (field->data_size == sizeof(int_least8_t))
 80228ee:	68bb      	ldr	r3, [r7, #8]
 80228f0:	891b      	ldrh	r3, [r3, #8]
 80228f2:	2b01      	cmp	r3, #1
 80228f4:	d109      	bne.n	802290a <pb_enc_svarint+0x36>
        value = *(const int_least8_t*)src;
 80228f6:	687b      	ldr	r3, [r7, #4]
 80228f8:	f993 3000 	ldrsb.w	r3, [r3]
 80228fc:	b25b      	sxtb	r3, r3
 80228fe:	17da      	asrs	r2, r3, #31
 8022900:	469a      	mov	sl, r3
 8022902:	4693      	mov	fp, r2
 8022904:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 8022908:	e025      	b.n	8022956 <pb_enc_svarint+0x82>
    else if (field->data_size == sizeof(int_least16_t))
 802290a:	68bb      	ldr	r3, [r7, #8]
 802290c:	891b      	ldrh	r3, [r3, #8]
 802290e:	2b02      	cmp	r3, #2
 8022910:	d109      	bne.n	8022926 <pb_enc_svarint+0x52>
        value = *(const int_least16_t*)src;
 8022912:	687b      	ldr	r3, [r7, #4]
 8022914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022918:	b21b      	sxth	r3, r3
 802291a:	17da      	asrs	r2, r3, #31
 802291c:	4698      	mov	r8, r3
 802291e:	4691      	mov	r9, r2
 8022920:	e9c7 8904 	strd	r8, r9, [r7, #16]
 8022924:	e017      	b.n	8022956 <pb_enc_svarint+0x82>
    else if (field->data_size == sizeof(int32_t))
 8022926:	68bb      	ldr	r3, [r7, #8]
 8022928:	891b      	ldrh	r3, [r3, #8]
 802292a:	2b04      	cmp	r3, #4
 802292c:	d107      	bne.n	802293e <pb_enc_svarint+0x6a>
        value = *(const int32_t*)src;
 802292e:	687b      	ldr	r3, [r7, #4]
 8022930:	681b      	ldr	r3, [r3, #0]
 8022932:	17da      	asrs	r2, r3, #31
 8022934:	461c      	mov	r4, r3
 8022936:	4615      	mov	r5, r2
 8022938:	e9c7 4504 	strd	r4, r5, [r7, #16]
 802293c:	e00b      	b.n	8022956 <pb_enc_svarint+0x82>
    else if (field->data_size == sizeof(pb_int64_t))
 802293e:	68bb      	ldr	r3, [r7, #8]
 8022940:	891b      	ldrh	r3, [r3, #8]
 8022942:	2b08      	cmp	r3, #8
 8022944:	d105      	bne.n	8022952 <pb_enc_svarint+0x7e>
        value = *(const pb_int64_t*)src;
 8022946:	687b      	ldr	r3, [r7, #4]
 8022948:	e9d3 2300 	ldrd	r2, r3, [r3]
 802294c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8022950:	e001      	b.n	8022956 <pb_enc_svarint+0x82>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 8022952:	2300      	movs	r3, #0
 8022954:	e005      	b.n	8022962 <pb_enc_svarint+0x8e>
    
    return pb_encode_svarint(stream, value);
 8022956:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802295a:	68f8      	ldr	r0, [r7, #12]
 802295c:	f7ff fd7c 	bl	8022458 <pb_encode_svarint>
 8022960:	4603      	mov	r3, r0
}
 8022962:	4618      	mov	r0, r3
 8022964:	3718      	adds	r7, #24
 8022966:	46bd      	mov	sp, r7
 8022968:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0802296c <pb_enc_fixed64>:

static bool checkreturn pb_enc_fixed64(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 802296c:	b580      	push	{r7, lr}
 802296e:	b084      	sub	sp, #16
 8022970:	af00      	add	r7, sp, #0
 8022972:	60f8      	str	r0, [r7, #12]
 8022974:	60b9      	str	r1, [r7, #8]
 8022976:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
#ifndef PB_WITHOUT_64BIT
    return pb_encode_fixed64(stream, src);
 8022978:	6879      	ldr	r1, [r7, #4]
 802297a:	68f8      	ldr	r0, [r7, #12]
 802297c:	f7ff fdbb 	bl	80224f6 <pb_encode_fixed64>
 8022980:	4603      	mov	r3, r0
#else
    PB_UNUSED(src);
    PB_RETURN_ERROR(stream, "no 64bit support");
#endif
}
 8022982:	4618      	mov	r0, r3
 8022984:	3710      	adds	r7, #16
 8022986:	46bd      	mov	sp, r7
 8022988:	bd80      	pop	{r7, pc}

0802298a <pb_enc_fixed32>:

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 802298a:	b580      	push	{r7, lr}
 802298c:	b084      	sub	sp, #16
 802298e:	af00      	add	r7, sp, #0
 8022990:	60f8      	str	r0, [r7, #12]
 8022992:	60b9      	str	r1, [r7, #8]
 8022994:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 8022996:	6879      	ldr	r1, [r7, #4]
 8022998:	68f8      	ldr	r0, [r7, #12]
 802299a:	f7ff fd89 	bl	80224b0 <pb_encode_fixed32>
 802299e:	4603      	mov	r3, r0
}
 80229a0:	4618      	mov	r0, r3
 80229a2:	3710      	adds	r7, #16
 80229a4:	46bd      	mov	sp, r7
 80229a6:	bd80      	pop	{r7, pc}

080229a8 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80229a8:	b580      	push	{r7, lr}
 80229aa:	b086      	sub	sp, #24
 80229ac:	af00      	add	r7, sp, #0
 80229ae:	60f8      	str	r0, [r7, #12]
 80229b0:	60b9      	str	r1, [r7, #8]
 80229b2:	607a      	str	r2, [r7, #4]
    const pb_bytes_array_t *bytes = NULL;
 80229b4:	2300      	movs	r3, #0
 80229b6:	617b      	str	r3, [r7, #20]

    bytes = (const pb_bytes_array_t*)src;
 80229b8:	687b      	ldr	r3, [r7, #4]
 80229ba:	617b      	str	r3, [r7, #20]
    
    if (src == NULL)
 80229bc:	687b      	ldr	r3, [r7, #4]
 80229be:	2b00      	cmp	r3, #0
 80229c0:	d106      	bne.n	80229d0 <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 80229c2:	2200      	movs	r2, #0
 80229c4:	2100      	movs	r1, #0
 80229c6:	68f8      	ldr	r0, [r7, #12]
 80229c8:	f7ff fe60 	bl	802268c <pb_encode_string>
 80229cc:	4603      	mov	r3, r0
 80229ce:	e017      	b.n	8022a00 <pb_enc_bytes+0x58>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80229d0:	68bb      	ldr	r3, [r7, #8]
 80229d2:	789b      	ldrb	r3, [r3, #2]
 80229d4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80229d8:	2b00      	cmp	r3, #0
 80229da:	d108      	bne.n	80229ee <pb_enc_bytes+0x46>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 80229dc:	697b      	ldr	r3, [r7, #20]
 80229de:	881b      	ldrh	r3, [r3, #0]
 80229e0:	3302      	adds	r3, #2
 80229e2:	68ba      	ldr	r2, [r7, #8]
 80229e4:	8912      	ldrh	r2, [r2, #8]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80229e6:	4293      	cmp	r3, r2
 80229e8:	d901      	bls.n	80229ee <pb_enc_bytes+0x46>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 80229ea:	2300      	movs	r3, #0
 80229ec:	e008      	b.n	8022a00 <pb_enc_bytes+0x58>
    }
    
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 80229ee:	697b      	ldr	r3, [r7, #20]
 80229f0:	1c99      	adds	r1, r3, #2
 80229f2:	697b      	ldr	r3, [r7, #20]
 80229f4:	881b      	ldrh	r3, [r3, #0]
 80229f6:	461a      	mov	r2, r3
 80229f8:	68f8      	ldr	r0, [r7, #12]
 80229fa:	f7ff fe47 	bl	802268c <pb_encode_string>
 80229fe:	4603      	mov	r3, r0
}
 8022a00:	4618      	mov	r0, r3
 8022a02:	3718      	adds	r7, #24
 8022a04:	46bd      	mov	sp, r7
 8022a06:	bd80      	pop	{r7, pc}

08022a08 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8022a08:	b580      	push	{r7, lr}
 8022a0a:	b088      	sub	sp, #32
 8022a0c:	af00      	add	r7, sp, #0
 8022a0e:	60f8      	str	r0, [r7, #12]
 8022a10:	60b9      	str	r1, [r7, #8]
 8022a12:	607a      	str	r2, [r7, #4]
    size_t size = 0;
 8022a14:	2300      	movs	r3, #0
 8022a16:	61fb      	str	r3, [r7, #28]
    size_t max_size = field->data_size;
 8022a18:	68bb      	ldr	r3, [r7, #8]
 8022a1a:	891b      	ldrh	r3, [r3, #8]
 8022a1c:	61bb      	str	r3, [r7, #24]
    const char *p = (const char*)src;
 8022a1e:	687b      	ldr	r3, [r7, #4]
 8022a20:	617b      	str	r3, [r7, #20]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8022a22:	68bb      	ldr	r3, [r7, #8]
 8022a24:	789b      	ldrb	r3, [r3, #2]
 8022a26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8022a2a:	2b80      	cmp	r3, #128	@ 0x80
 8022a2c:	d102      	bne.n	8022a34 <pb_enc_string+0x2c>
        max_size = (size_t)-1;
 8022a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8022a32:	61bb      	str	r3, [r7, #24]

    if (src == NULL)
 8022a34:	687b      	ldr	r3, [r7, #4]
 8022a36:	2b00      	cmp	r3, #0
 8022a38:	d108      	bne.n	8022a4c <pb_enc_string+0x44>
    {
        size = 0; /* Treat null pointer as an empty string */
 8022a3a:	2300      	movs	r3, #0
 8022a3c:	61fb      	str	r3, [r7, #28]
 8022a3e:	e00d      	b.n	8022a5c <pb_enc_string+0x54>
    else
    {
        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
        {
            size++;
 8022a40:	69fb      	ldr	r3, [r7, #28]
 8022a42:	3301      	adds	r3, #1
 8022a44:	61fb      	str	r3, [r7, #28]
            p++;
 8022a46:	697b      	ldr	r3, [r7, #20]
 8022a48:	3301      	adds	r3, #1
 8022a4a:	617b      	str	r3, [r7, #20]
        while (size < max_size && *p != '\0')
 8022a4c:	69fa      	ldr	r2, [r7, #28]
 8022a4e:	69bb      	ldr	r3, [r7, #24]
 8022a50:	429a      	cmp	r2, r3
 8022a52:	d203      	bcs.n	8022a5c <pb_enc_string+0x54>
 8022a54:	697b      	ldr	r3, [r7, #20]
 8022a56:	781b      	ldrb	r3, [r3, #0]
 8022a58:	2b00      	cmp	r3, #0
 8022a5a:	d1f1      	bne.n	8022a40 <pb_enc_string+0x38>
        }
    }

    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 8022a5c:	69fa      	ldr	r2, [r7, #28]
 8022a5e:	6879      	ldr	r1, [r7, #4]
 8022a60:	68f8      	ldr	r0, [r7, #12]
 8022a62:	f7ff fe13 	bl	802268c <pb_encode_string>
 8022a66:	4603      	mov	r3, r0
}
 8022a68:	4618      	mov	r0, r3
 8022a6a:	3720      	adds	r7, #32
 8022a6c:	46bd      	mov	sp, r7
 8022a6e:	bd80      	pop	{r7, pc}

08022a70 <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8022a70:	b580      	push	{r7, lr}
 8022a72:	b084      	sub	sp, #16
 8022a74:	af00      	add	r7, sp, #0
 8022a76:	60f8      	str	r0, [r7, #12]
 8022a78:	60b9      	str	r1, [r7, #8]
 8022a7a:	607a      	str	r2, [r7, #4]
    if (field->ptr == NULL)
 8022a7c:	68bb      	ldr	r3, [r7, #8]
 8022a7e:	68db      	ldr	r3, [r3, #12]
 8022a80:	2b00      	cmp	r3, #0
 8022a82:	d101      	bne.n	8022a88 <pb_enc_submessage+0x18>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8022a84:	2300      	movs	r3, #0
 8022a86:	e007      	b.n	8022a98 <pb_enc_submessage+0x28>
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 8022a88:	68bb      	ldr	r3, [r7, #8]
 8022a8a:	68db      	ldr	r3, [r3, #12]
 8022a8c:	687a      	ldr	r2, [r7, #4]
 8022a8e:	4619      	mov	r1, r3
 8022a90:	68f8      	ldr	r0, [r7, #12]
 8022a92:	f7ff fe1c 	bl	80226ce <pb_encode_submessage>
 8022a96:	4603      	mov	r3, r0
}
 8022a98:	4618      	mov	r0, r3
 8022a9a:	3710      	adds	r7, #16
 8022a9c:	46bd      	mov	sp, r7
 8022a9e:	bd80      	pop	{r7, pc}

08022aa0 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8022aa0:	b580      	push	{r7, lr}
 8022aa2:	b084      	sub	sp, #16
 8022aa4:	af00      	add	r7, sp, #0
 8022aa6:	60f8      	str	r0, [r7, #12]
 8022aa8:	60b9      	str	r1, [r7, #8]
 8022aaa:	607a      	str	r2, [r7, #4]
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 8022aac:	68bb      	ldr	r3, [r7, #8]
 8022aae:	891b      	ldrh	r3, [r3, #8]
 8022ab0:	461a      	mov	r2, r3
 8022ab2:	6879      	ldr	r1, [r7, #4]
 8022ab4:	68f8      	ldr	r0, [r7, #12]
 8022ab6:	f7ff fde9 	bl	802268c <pb_encode_string>
 8022aba:	4603      	mov	r3, r0
}
 8022abc:	4618      	mov	r0, r3
 8022abe:	3710      	adds	r7, #16
 8022ac0:	46bd      	mov	sp, r7
 8022ac2:	bd80      	pop	{r7, pc}

08022ac4 <stai_runtime_get_info>:
 8022ac4:	b430      	push	{r4, r5}
 8022ac6:	b160      	cbz	r0, 8022ae2 <stai_runtime_get_info+0x1e>
 8022ac8:	4c08      	ldr	r4, [pc, #32]	@ (8022aec <stai_runtime_get_info+0x28>)
 8022aca:	4684      	mov	ip, r0
 8022acc:	2500      	movs	r5, #0
 8022ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8022ad0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8022ad4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8022ad8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8022adc:	4628      	mov	r0, r5
 8022ade:	bc30      	pop	{r4, r5}
 8022ae0:	4770      	bx	lr
 8022ae2:	4d03      	ldr	r5, [pc, #12]	@ (8022af0 <stai_runtime_get_info+0x2c>)
 8022ae4:	4628      	mov	r0, r5
 8022ae6:	bc30      	pop	{r4, r5}
 8022ae8:	4770      	bx	lr
 8022aea:	bf00      	nop
 8022aec:	08072678 	.word	0x08072678
 8022af0:	00020001 	.word	0x00020001

08022af4 <ai_version_get>:
 8022af4:	0212      	lsls	r2, r2, #8
 8022af6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8022afa:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8022afe:	4770      	bx	lr

08022b00 <ai_platform_version_get>:
 8022b00:	0e01      	lsrs	r1, r0, #24
 8022b02:	2300      	movs	r3, #0
 8022b04:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8022b08:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022b0c:	f361 0307 	bfi	r3, r1, #0, #8
 8022b10:	b082      	sub	sp, #8
 8022b12:	f362 230f 	bfi	r3, r2, #8, #8
 8022b16:	f360 4317 	bfi	r3, r0, #16, #8
 8022b1a:	f023 407f 	bic.w	r0, r3, #4278190080	@ 0xff000000
 8022b1e:	b002      	add	sp, #8
 8022b20:	4770      	bx	lr
 8022b22:	bf00      	nop

08022b24 <get_tensor_size>:
 8022b24:	b111      	cbz	r1, 8022b2c <get_tensor_size+0x8>
 8022b26:	6983      	ldr	r3, [r0, #24]
 8022b28:	6858      	ldr	r0, [r3, #4]
 8022b2a:	4770      	bx	lr
 8022b2c:	6883      	ldr	r3, [r0, #8]
 8022b2e:	0a1b      	lsrs	r3, r3, #8
 8022b30:	d00a      	beq.n	8022b48 <get_tensor_size+0x24>
 8022b32:	68c1      	ldr	r1, [r0, #12]
 8022b34:	2001      	movs	r0, #1
 8022b36:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022b3a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8022b3e:	4299      	cmp	r1, r3
 8022b40:	fb02 f000 	mul.w	r0, r2, r0
 8022b44:	d1f9      	bne.n	8022b3a <get_tensor_size+0x16>
 8022b46:	4770      	bx	lr
 8022b48:	2001      	movs	r0, #1
 8022b4a:	4770      	bx	lr

08022b4c <get_tensor_byte_size>:
 8022b4c:	b430      	push	{r4, r5}
 8022b4e:	6985      	ldr	r5, [r0, #24]
 8022b50:	68c4      	ldr	r4, [r0, #12]
 8022b52:	6941      	ldr	r1, [r0, #20]
 8022b54:	4b06      	ldr	r3, [pc, #24]	@ (8022b70 <get_tensor_byte_size+0x24>)
 8022b56:	6828      	ldr	r0, [r5, #0]
 8022b58:	4a06      	ldr	r2, [pc, #24]	@ (8022b74 <get_tensor_byte_size+0x28>)
 8022b5a:	4003      	ands	r3, r0
 8022b5c:	68c9      	ldr	r1, [r1, #12]
 8022b5e:	68e0      	ldr	r0, [r4, #12]
 8022b60:	4293      	cmp	r3, r2
 8022b62:	fb01 f000 	mul.w	r0, r1, r0
 8022b66:	d101      	bne.n	8022b6c <get_tensor_byte_size+0x20>
 8022b68:	3007      	adds	r0, #7
 8022b6a:	08c0      	lsrs	r0, r0, #3
 8022b6c:	bc30      	pop	{r4, r5}
 8022b6e:	4770      	bx	lr
 8022b70:	017fffff 	.word	0x017fffff
 8022b74:	000400c0 	.word	0x000400c0

08022b78 <ai_buffer_get_size>:
 8022b78:	b368      	cbz	r0, 8022bd6 <ai_buffer_get_size+0x5e>
 8022b7a:	4b17      	ldr	r3, [pc, #92]	@ (8022bd8 <ai_buffer_get_size+0x60>)
 8022b7c:	4a17      	ldr	r2, [pc, #92]	@ (8022bdc <ai_buffer_get_size+0x64>)
 8022b7e:	b410      	push	{r4}
 8022b80:	6804      	ldr	r4, [r0, #0]
 8022b82:	4023      	ands	r3, r4
 8022b84:	4293      	cmp	r3, r2
 8022b86:	d123      	bne.n	8022bd0 <ai_buffer_get_size+0x58>
 8022b88:	b311      	cbz	r1, 8022bd0 <ai_buffer_get_size+0x58>
 8022b8a:	6984      	ldr	r4, [r0, #24]
 8022b8c:	6862      	ldr	r2, [r4, #4]
 8022b8e:	321f      	adds	r2, #31
 8022b90:	f022 021f 	bic.w	r2, r2, #31
 8022b94:	7d03      	ldrb	r3, [r0, #20]
 8022b96:	6941      	ldr	r1, [r0, #20]
 8022b98:	f1a3 0301 	sub.w	r3, r3, #1
 8022b9c:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8022ba0:	fab3 f383 	clz	r3, r3
 8022ba4:	095b      	lsrs	r3, r3, #5
 8022ba6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8022baa:	da0c      	bge.n	8022bc6 <ai_buffer_get_size+0x4e>
 8022bac:	2b01      	cmp	r3, #1
 8022bae:	d103      	bne.n	8022bb8 <ai_buffer_get_size+0x40>
 8022bb0:	2802      	cmp	r0, #2
 8022bb2:	f04f 0302 	mov.w	r3, #2
 8022bb6:	d006      	beq.n	8022bc6 <ai_buffer_get_size+0x4e>
 8022bb8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8022bbc:	3301      	adds	r3, #1
 8022bbe:	4298      	cmp	r0, r3
 8022bc0:	fb01 f202 	mul.w	r2, r1, r2
 8022bc4:	d1f2      	bne.n	8022bac <ai_buffer_get_size+0x34>
 8022bc6:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8022bca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022bce:	4770      	bx	lr
 8022bd0:	6984      	ldr	r4, [r0, #24]
 8022bd2:	6862      	ldr	r2, [r4, #4]
 8022bd4:	e7de      	b.n	8022b94 <ai_buffer_get_size+0x1c>
 8022bd6:	4770      	bx	lr
 8022bd8:	017fffff 	.word	0x017fffff
 8022bdc:	000400c0 	.word	0x000400c0

08022be0 <ai_buffer_get_byte_size>:
 8022be0:	b128      	cbz	r0, 8022bee <ai_buffer_get_byte_size+0xe>
 8022be2:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 8022be6:	fb01 f000 	mul.w	r0, r1, r0
 8022bea:	3007      	adds	r0, #7
 8022bec:	08c0      	lsrs	r0, r0, #3
 8022bee:	4770      	bx	lr

08022bf0 <ai_buffer_array_sane>:
 8022bf0:	b138      	cbz	r0, 8022c02 <ai_buffer_array_sane+0x12>
 8022bf2:	6843      	ldr	r3, [r0, #4]
 8022bf4:	b123      	cbz	r3, 8022c00 <ai_buffer_array_sane+0x10>
 8022bf6:	8840      	ldrh	r0, [r0, #2]
 8022bf8:	3800      	subs	r0, #0
 8022bfa:	bf18      	it	ne
 8022bfc:	2001      	movne	r0, #1
 8022bfe:	4770      	bx	lr
 8022c00:	4618      	mov	r0, r3
 8022c02:	4770      	bx	lr

08022c04 <ai_buffer_array_item_set_address>:
 8022c04:	b150      	cbz	r0, 8022c1c <ai_buffer_array_item_set_address+0x18>
 8022c06:	6843      	ldr	r3, [r0, #4]
 8022c08:	b14b      	cbz	r3, 8022c1e <ai_buffer_array_item_set_address+0x1a>
 8022c0a:	8840      	ldrh	r0, [r0, #2]
 8022c0c:	b900      	cbnz	r0, 8022c10 <ai_buffer_array_item_set_address+0xc>
 8022c0e:	4770      	bx	lr
 8022c10:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8022c14:	2001      	movs	r0, #1
 8022c16:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8022c1a:	605a      	str	r2, [r3, #4]
 8022c1c:	4770      	bx	lr
 8022c1e:	4618      	mov	r0, r3
 8022c20:	4770      	bx	lr
 8022c22:	bf00      	nop

08022c24 <_platform_observer_node_exec_cb>:
 8022c24:	2a00      	cmp	r2, #0
 8022c26:	d04f      	beq.n	8022cc8 <_platform_observer_node_exec_cb+0xa4>
 8022c28:	b570      	push	{r4, r5, r6, lr}
 8022c2a:	6815      	ldr	r5, [r2, #0]
 8022c2c:	b084      	sub	sp, #16
 8022c2e:	4614      	mov	r4, r2
 8022c30:	2d00      	cmp	r5, #0
 8022c32:	d04b      	beq.n	8022ccc <_platform_observer_node_exec_cb+0xa8>
 8022c34:	8992      	ldrh	r2, [r2, #12]
 8022c36:	460e      	mov	r6, r1
 8022c38:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
 8022c3c:	fab2 f382 	clz	r3, r2
 8022c40:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022c44:	095b      	lsrs	r3, r3, #5
 8022c46:	4594      	cmp	ip, r2
 8022c48:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8022c4c:	bf08      	it	eq
 8022c4e:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8022c52:	b140      	cbz	r0, 8022c66 <_platform_observer_node_exec_cb+0x42>
 8022c54:	2801      	cmp	r0, #1
 8022c56:	d03c      	beq.n	8022cd2 <_platform_observer_node_exec_cb+0xae>
 8022c58:	2802      	cmp	r0, #2
 8022c5a:	d01e      	beq.n	8022c9a <_platform_observer_node_exec_cb+0x76>
 8022c5c:	2803      	cmp	r0, #3
 8022c5e:	d03e      	beq.n	8022cde <_platform_observer_node_exec_cb+0xba>
 8022c60:	2000      	movs	r0, #0
 8022c62:	b004      	add	sp, #16
 8022c64:	bd70      	pop	{r4, r5, r6, pc}
 8022c66:	68a1      	ldr	r1, [r4, #8]
 8022c68:	07c9      	lsls	r1, r1, #31
 8022c6a:	d404      	bmi.n	8022c76 <_platform_observer_node_exec_cb+0x52>
 8022c6c:	3201      	adds	r2, #1
 8022c6e:	2000      	movs	r0, #0
 8022c70:	81a2      	strh	r2, [r4, #12]
 8022c72:	b004      	add	sp, #16
 8022c74:	bd70      	pop	{r4, r5, r6, pc}
 8022c76:	f043 0101 	orr.w	r1, r3, #1
 8022c7a:	8873      	ldrh	r3, [r6, #2]
 8022c7c:	f8ad 2000 	strh.w	r2, [sp]
 8022c80:	466a      	mov	r2, sp
 8022c82:	f8ad 3004 	strh.w	r3, [sp, #4]
 8022c86:	8833      	ldrh	r3, [r6, #0]
 8022c88:	9002      	str	r0, [sp, #8]
 8022c8a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8022c8e:	69b3      	ldr	r3, [r6, #24]
 8022c90:	6860      	ldr	r0, [r4, #4]
 8022c92:	9303      	str	r3, [sp, #12]
 8022c94:	47a8      	blx	r5
 8022c96:	89a2      	ldrh	r2, [r4, #12]
 8022c98:	e7e8      	b.n	8022c6c <_platform_observer_node_exec_cb+0x48>
 8022c9a:	6121      	str	r1, [r4, #16]
 8022c9c:	68a1      	ldr	r1, [r4, #8]
 8022c9e:	0788      	lsls	r0, r1, #30
 8022ca0:	d5de      	bpl.n	8022c60 <_platform_observer_node_exec_cb+0x3c>
 8022ca2:	f043 0102 	orr.w	r1, r3, #2
 8022ca6:	8873      	ldrh	r3, [r6, #2]
 8022ca8:	6860      	ldr	r0, [r4, #4]
 8022caa:	2400      	movs	r4, #0
 8022cac:	f8ad 2000 	strh.w	r2, [sp]
 8022cb0:	f8ad 3004 	strh.w	r3, [sp, #4]
 8022cb4:	8832      	ldrh	r2, [r6, #0]
 8022cb6:	69b3      	ldr	r3, [r6, #24]
 8022cb8:	f8ad 2002 	strh.w	r2, [sp, #2]
 8022cbc:	466a      	mov	r2, sp
 8022cbe:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8022cc2:	47a8      	blx	r5
 8022cc4:	4620      	mov	r0, r4
 8022cc6:	e7d4      	b.n	8022c72 <_platform_observer_node_exec_cb+0x4e>
 8022cc8:	2001      	movs	r0, #1
 8022cca:	4770      	bx	lr
 8022ccc:	2001      	movs	r0, #1
 8022cce:	b004      	add	sp, #16
 8022cd0:	bd70      	pop	{r4, r5, r6, pc}
 8022cd2:	2300      	movs	r3, #0
 8022cd4:	6121      	str	r1, [r4, #16]
 8022cd6:	4618      	mov	r0, r3
 8022cd8:	81a3      	strh	r3, [r4, #12]
 8022cda:	b004      	add	sp, #16
 8022cdc:	bd70      	pop	{r4, r5, r6, pc}
 8022cde:	68a1      	ldr	r1, [r4, #8]
 8022ce0:	0749      	lsls	r1, r1, #29
 8022ce2:	d5c3      	bpl.n	8022c6c <_platform_observer_node_exec_cb+0x48>
 8022ce4:	6920      	ldr	r0, [r4, #16]
 8022ce6:	f043 0104 	orr.w	r1, r3, #4
 8022cea:	f8ad 2000 	strh.w	r2, [sp]
 8022cee:	2200      	movs	r2, #0
 8022cf0:	8843      	ldrh	r3, [r0, #2]
 8022cf2:	f8ad 3004 	strh.w	r3, [sp, #4]
 8022cf6:	8803      	ldrh	r3, [r0, #0]
 8022cf8:	f8ad 3002 	strh.w	r3, [sp, #2]
 8022cfc:	6983      	ldr	r3, [r0, #24]
 8022cfe:	9202      	str	r2, [sp, #8]
 8022d00:	466a      	mov	r2, sp
 8022d02:	6860      	ldr	r0, [r4, #4]
 8022d04:	9303      	str	r3, [sp, #12]
 8022d06:	47a8      	blx	r5
 8022d08:	89a2      	ldrh	r2, [r4, #12]
 8022d0a:	e7af      	b.n	8022c6c <_platform_observer_node_exec_cb+0x48>

08022d0c <ai_platform_get_weights_map>:
 8022d0c:	2900      	cmp	r1, #0
 8022d0e:	bf18      	it	ne
 8022d10:	2800      	cmpne	r0, #0
 8022d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d14:	bf0c      	ite	eq
 8022d16:	2401      	moveq	r4, #1
 8022d18:	2400      	movne	r4, #0
 8022d1a:	2a00      	cmp	r2, #0
 8022d1c:	bf08      	it	eq
 8022d1e:	f044 0401 	orreq.w	r4, r4, #1
 8022d22:	b114      	cbz	r4, 8022d2a <ai_platform_get_weights_map+0x1e>
 8022d24:	2400      	movs	r4, #0
 8022d26:	4620      	mov	r0, r4
 8022d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022d2a:	4616      	mov	r6, r2
 8022d2c:	4b22      	ldr	r3, [pc, #136]	@ (8022db8 <ai_platform_get_weights_map+0xac>)
 8022d2e:	6812      	ldr	r2, [r2, #0]
 8022d30:	4605      	mov	r5, r0
 8022d32:	460f      	mov	r7, r1
 8022d34:	429a      	cmp	r2, r3
 8022d36:	d022      	beq.n	8022d7e <ai_platform_get_weights_map+0x72>
 8022d38:	6870      	ldr	r0, [r6, #4]
 8022d3a:	2800      	cmp	r0, #0
 8022d3c:	d0f2      	beq.n	8022d24 <ai_platform_get_weights_map+0x18>
 8022d3e:	6806      	ldr	r6, [r0, #0]
 8022d40:	429e      	cmp	r6, r3
 8022d42:	d006      	beq.n	8022d52 <ai_platform_get_weights_map+0x46>
 8022d44:	f1a1 0401 	sub.w	r4, r1, #1
 8022d48:	6028      	str	r0, [r5, #0]
 8022d4a:	fab4 f484 	clz	r4, r4
 8022d4e:	0964      	lsrs	r4, r4, #5
 8022d50:	e7e9      	b.n	8022d26 <ai_platform_get_weights_map+0x1a>
 8022d52:	3d04      	subs	r5, #4
 8022d54:	4602      	mov	r2, r0
 8022d56:	4621      	mov	r1, r4
 8022d58:	e000      	b.n	8022d5c <ai_platform_get_weights_map+0x50>
 8022d5a:	4619      	mov	r1, r3
 8022d5c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8022d60:	42b3      	cmp	r3, r6
 8022d62:	d025      	beq.n	8022db0 <ai_platform_get_weights_map+0xa4>
 8022d64:	f845 3f04 	str.w	r3, [r5, #4]!
 8022d68:	1c4b      	adds	r3, r1, #1
 8022d6a:	429f      	cmp	r7, r3
 8022d6c:	d8f5      	bhi.n	8022d5a <ai_platform_get_weights_map+0x4e>
 8022d6e:	d1da      	bne.n	8022d26 <ai_platform_get_weights_map+0x1a>
 8022d70:	3102      	adds	r1, #2
 8022d72:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8022d76:	42b3      	cmp	r3, r6
 8022d78:	d1d5      	bne.n	8022d26 <ai_platform_get_weights_map+0x1a>
 8022d7a:	2401      	movs	r4, #1
 8022d7c:	e7d3      	b.n	8022d26 <ai_platform_get_weights_map+0x1a>
 8022d7e:	1d30      	adds	r0, r6, #4
 8022d80:	f7ff ff36 	bl	8022bf0 <ai_buffer_array_sane>
 8022d84:	2800      	cmp	r0, #0
 8022d86:	d0cd      	beq.n	8022d24 <ai_platform_get_weights_map+0x18>
 8022d88:	88f3      	ldrh	r3, [r6, #6]
 8022d8a:	429f      	cmp	r7, r3
 8022d8c:	d1ca      	bne.n	8022d24 <ai_platform_get_weights_map+0x18>
 8022d8e:	3d04      	subs	r5, #4
 8022d90:	4622      	mov	r2, r4
 8022d92:	68b3      	ldr	r3, [r6, #8]
 8022d94:	4423      	add	r3, r4
 8022d96:	341c      	adds	r4, #28
 8022d98:	685b      	ldr	r3, [r3, #4]
 8022d9a:	b123      	cbz	r3, 8022da6 <ai_platform_get_weights_map+0x9a>
 8022d9c:	3201      	adds	r2, #1
 8022d9e:	f845 3f04 	str.w	r3, [r5, #4]!
 8022da2:	4297      	cmp	r7, r2
 8022da4:	d8f5      	bhi.n	8022d92 <ai_platform_get_weights_map+0x86>
 8022da6:	1abc      	subs	r4, r7, r2
 8022da8:	fab4 f484 	clz	r4, r4
 8022dac:	0964      	lsrs	r4, r4, #5
 8022dae:	e7ba      	b.n	8022d26 <ai_platform_get_weights_map+0x1a>
 8022db0:	428f      	cmp	r7, r1
 8022db2:	d1b8      	bne.n	8022d26 <ai_platform_get_weights_map+0x1a>
 8022db4:	e7e1      	b.n	8022d7a <ai_platform_get_weights_map+0x6e>
 8022db6:	bf00      	nop
 8022db8:	a1facade 	.word	0xa1facade

08022dbc <ai_platform_get_activations_map>:
 8022dbc:	2900      	cmp	r1, #0
 8022dbe:	bf18      	it	ne
 8022dc0:	2800      	cmpne	r0, #0
 8022dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022dc4:	bf0c      	ite	eq
 8022dc6:	2401      	moveq	r4, #1
 8022dc8:	2400      	movne	r4, #0
 8022dca:	2a00      	cmp	r2, #0
 8022dcc:	bf08      	it	eq
 8022dce:	f044 0401 	orreq.w	r4, r4, #1
 8022dd2:	b114      	cbz	r4, 8022dda <ai_platform_get_activations_map+0x1e>
 8022dd4:	2400      	movs	r4, #0
 8022dd6:	4620      	mov	r0, r4
 8022dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022dda:	4616      	mov	r6, r2
 8022ddc:	4b22      	ldr	r3, [pc, #136]	@ (8022e68 <ai_platform_get_activations_map+0xac>)
 8022dde:	6812      	ldr	r2, [r2, #0]
 8022de0:	4605      	mov	r5, r0
 8022de2:	460f      	mov	r7, r1
 8022de4:	429a      	cmp	r2, r3
 8022de6:	d022      	beq.n	8022e2e <ai_platform_get_activations_map+0x72>
 8022de8:	6a30      	ldr	r0, [r6, #32]
 8022dea:	2800      	cmp	r0, #0
 8022dec:	d0f2      	beq.n	8022dd4 <ai_platform_get_activations_map+0x18>
 8022dee:	6806      	ldr	r6, [r0, #0]
 8022df0:	429e      	cmp	r6, r3
 8022df2:	d006      	beq.n	8022e02 <ai_platform_get_activations_map+0x46>
 8022df4:	f1a1 0401 	sub.w	r4, r1, #1
 8022df8:	6028      	str	r0, [r5, #0]
 8022dfa:	fab4 f484 	clz	r4, r4
 8022dfe:	0964      	lsrs	r4, r4, #5
 8022e00:	e7e9      	b.n	8022dd6 <ai_platform_get_activations_map+0x1a>
 8022e02:	3d04      	subs	r5, #4
 8022e04:	4602      	mov	r2, r0
 8022e06:	4621      	mov	r1, r4
 8022e08:	e000      	b.n	8022e0c <ai_platform_get_activations_map+0x50>
 8022e0a:	4619      	mov	r1, r3
 8022e0c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8022e10:	42b3      	cmp	r3, r6
 8022e12:	d026      	beq.n	8022e62 <ai_platform_get_activations_map+0xa6>
 8022e14:	f845 3f04 	str.w	r3, [r5, #4]!
 8022e18:	1c4b      	adds	r3, r1, #1
 8022e1a:	429f      	cmp	r7, r3
 8022e1c:	d8f5      	bhi.n	8022e0a <ai_platform_get_activations_map+0x4e>
 8022e1e:	d1da      	bne.n	8022dd6 <ai_platform_get_activations_map+0x1a>
 8022e20:	3102      	adds	r1, #2
 8022e22:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8022e26:	42b3      	cmp	r3, r6
 8022e28:	d1d5      	bne.n	8022dd6 <ai_platform_get_activations_map+0x1a>
 8022e2a:	2401      	movs	r4, #1
 8022e2c:	e7d3      	b.n	8022dd6 <ai_platform_get_activations_map+0x1a>
 8022e2e:	f106 000c 	add.w	r0, r6, #12
 8022e32:	f7ff fedd 	bl	8022bf0 <ai_buffer_array_sane>
 8022e36:	2800      	cmp	r0, #0
 8022e38:	d0cc      	beq.n	8022dd4 <ai_platform_get_activations_map+0x18>
 8022e3a:	89f3      	ldrh	r3, [r6, #14]
 8022e3c:	429f      	cmp	r7, r3
 8022e3e:	d1c9      	bne.n	8022dd4 <ai_platform_get_activations_map+0x18>
 8022e40:	3d04      	subs	r5, #4
 8022e42:	4622      	mov	r2, r4
 8022e44:	6933      	ldr	r3, [r6, #16]
 8022e46:	4423      	add	r3, r4
 8022e48:	341c      	adds	r4, #28
 8022e4a:	685b      	ldr	r3, [r3, #4]
 8022e4c:	b123      	cbz	r3, 8022e58 <ai_platform_get_activations_map+0x9c>
 8022e4e:	3201      	adds	r2, #1
 8022e50:	f845 3f04 	str.w	r3, [r5, #4]!
 8022e54:	4297      	cmp	r7, r2
 8022e56:	d8f5      	bhi.n	8022e44 <ai_platform_get_activations_map+0x88>
 8022e58:	1abc      	subs	r4, r7, r2
 8022e5a:	fab4 f484 	clz	r4, r4
 8022e5e:	0964      	lsrs	r4, r4, #5
 8022e60:	e7b9      	b.n	8022dd6 <ai_platform_get_activations_map+0x1a>
 8022e62:	428f      	cmp	r7, r1
 8022e64:	d1b7      	bne.n	8022dd6 <ai_platform_get_activations_map+0x1a>
 8022e66:	e7e0      	b.n	8022e2a <ai_platform_get_activations_map+0x6e>
 8022e68:	a1facade 	.word	0xa1facade

08022e6c <ai_platform_bind_network_params>:
 8022e6c:	2a00      	cmp	r2, #0
 8022e6e:	bf18      	it	ne
 8022e70:	2900      	cmpne	r1, #0
 8022e72:	d010      	beq.n	8022e96 <ai_platform_bind_network_params+0x2a>
 8022e74:	b178      	cbz	r0, 8022e96 <ai_platform_bind_network_params+0x2a>
 8022e76:	4603      	mov	r3, r0
 8022e78:	4808      	ldr	r0, [pc, #32]	@ (8022e9c <ai_platform_bind_network_params+0x30>)
 8022e7a:	f103 0c0c 	add.w	ip, r3, #12
 8022e7e:	f843 0b04 	str.w	r0, [r3], #4
 8022e82:	c903      	ldmia	r1, {r0, r1}
 8022e84:	e883 0003 	stmia.w	r3, {r0, r1}
 8022e88:	2301      	movs	r3, #1
 8022e8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8022e8e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8022e92:	4618      	mov	r0, r3
 8022e94:	4770      	bx	lr
 8022e96:	2300      	movs	r3, #0
 8022e98:	4618      	mov	r0, r3
 8022e9a:	4770      	bx	lr
 8022e9c:	a1facade 	.word	0xa1facade

08022ea0 <ai_platform_runtime_get_revision>:
 8022ea0:	4800      	ldr	r0, [pc, #0]	@ (8022ea4 <ai_platform_runtime_get_revision+0x4>)
 8022ea2:	4770      	bx	lr
 8022ea4:	08072674 	.word	0x08072674

08022ea8 <ai_platform_runtime_get_version>:
 8022ea8:	b082      	sub	sp, #8
 8022eaa:	200a      	movs	r0, #10
 8022eac:	b002      	add	sp, #8
 8022eae:	4770      	bx	lr

08022eb0 <ai_platform_api_get_version>:
 8022eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8022edc <ai_platform_api_get_version+0x2c>)
 8022eb2:	2000      	movs	r0, #0
 8022eb4:	b082      	sub	sp, #8
 8022eb6:	681b      	ldr	r3, [r3, #0]
 8022eb8:	fa5f fc83 	uxtb.w	ip, r3
 8022ebc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8022ec0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8022ec4:	0e1b      	lsrs	r3, r3, #24
 8022ec6:	f36c 0007 	bfi	r0, ip, #0, #8
 8022eca:	f361 200f 	bfi	r0, r1, #8, #8
 8022ece:	f362 4017 	bfi	r0, r2, #16, #8
 8022ed2:	f363 601f 	bfi	r0, r3, #24, #8
 8022ed6:	b002      	add	sp, #8
 8022ed8:	4770      	bx	lr
 8022eda:	bf00      	nop
 8022edc:	08072690 	.word	0x08072690

08022ee0 <ai_platform_interface_api_get_version>:
 8022ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8022f0c <ai_platform_interface_api_get_version+0x2c>)
 8022ee2:	2000      	movs	r0, #0
 8022ee4:	b082      	sub	sp, #8
 8022ee6:	681b      	ldr	r3, [r3, #0]
 8022ee8:	fa5f fc83 	uxtb.w	ip, r3
 8022eec:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8022ef0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8022ef4:	0e1b      	lsrs	r3, r3, #24
 8022ef6:	f36c 0007 	bfi	r0, ip, #0, #8
 8022efa:	f361 200f 	bfi	r0, r1, #8, #8
 8022efe:	f362 4017 	bfi	r0, r2, #16, #8
 8022f02:	f363 601f 	bfi	r0, r3, #24, #8
 8022f06:	b002      	add	sp, #8
 8022f08:	4770      	bx	lr
 8022f0a:	bf00      	nop
 8022f0c:	08072694 	.word	0x08072694

08022f10 <ai_platform_context_acquire>:
 8022f10:	6802      	ldr	r2, [r0, #0]
 8022f12:	4b02      	ldr	r3, [pc, #8]	@ (8022f1c <ai_platform_context_acquire+0xc>)
 8022f14:	4393      	bics	r3, r2
 8022f16:	bf18      	it	ne
 8022f18:	2000      	movne	r0, #0
 8022f1a:	4770      	bx	lr
 8022f1c:	a1c00100 	.word	0xa1c00100

08022f20 <ai_platform_network_get_error>:
 8022f20:	4b04      	ldr	r3, [pc, #16]	@ (8022f34 <ai_platform_network_get_error+0x14>)
 8022f22:	6802      	ldr	r2, [r0, #0]
 8022f24:	4393      	bics	r3, r2
 8022f26:	d102      	bne.n	8022f2e <ai_platform_network_get_error+0xe>
 8022f28:	300c      	adds	r0, #12
 8022f2a:	f000 bdaf 	b.w	8023a8c <core_get_error>
 8022f2e:	f241 0010 	movw	r0, #4112	@ 0x1010
 8022f32:	4770      	bx	lr
 8022f34:	a1c00100 	.word	0xa1c00100

08022f38 <ai_platform_network_set_error>:
 8022f38:	b110      	cbz	r0, 8022f40 <ai_platform_network_set_error+0x8>
 8022f3a:	300c      	adds	r0, #12
 8022f3c:	f000 bdac 	b.w	8023a98 <core_set_error>
 8022f40:	4770      	bx	lr
 8022f42:	bf00      	nop

08022f44 <ai_platform_api_get_network_report>:
 8022f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f48:	4ba2      	ldr	r3, [pc, #648]	@ (80231d4 <ai_platform_api_get_network_report+0x290>)
 8022f4a:	b089      	sub	sp, #36	@ 0x24
 8022f4c:	6802      	ldr	r2, [r0, #0]
 8022f4e:	9002      	str	r0, [sp, #8]
 8022f50:	4393      	bics	r3, r2
 8022f52:	d177      	bne.n	8023044 <ai_platform_api_get_network_report+0x100>
 8022f54:	4688      	mov	r8, r1
 8022f56:	2900      	cmp	r1, #0
 8022f58:	d074      	beq.n	8023044 <ai_platform_api_get_network_report+0x100>
 8022f5a:	2400      	movs	r4, #0
 8022f5c:	67cc      	str	r4, [r1, #124]	@ 0x7c
 8022f5e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8022f60:	b14b      	cbz	r3, 8022f76 <ai_platform_api_get_network_report+0x32>
 8022f62:	3401      	adds	r4, #1
 8022f64:	f8c8 407c 	str.w	r4, [r8, #124]	@ 0x7c
 8022f68:	691a      	ldr	r2, [r3, #16]
 8022f6a:	b122      	cbz	r2, 8022f76 <ai_platform_api_get_network_report+0x32>
 8022f6c:	429a      	cmp	r2, r3
 8022f6e:	d002      	beq.n	8022f76 <ai_platform_api_get_network_report+0x32>
 8022f70:	4613      	mov	r3, r2
 8022f72:	2b00      	cmp	r3, #0
 8022f74:	d1f5      	bne.n	8022f62 <ai_platform_api_get_network_report+0x1e>
 8022f76:	2c00      	cmp	r4, #0
 8022f78:	f000 815f 	beq.w	802323a <ai_platform_api_get_network_report+0x2f6>
 8022f7c:	9a02      	ldr	r2, [sp, #8]
 8022f7e:	8e13      	ldrh	r3, [r2, #48]	@ 0x30
 8022f80:	2b00      	cmp	r3, #0
 8022f82:	d050      	beq.n	8023026 <ai_platform_api_get_network_report+0xe2>
 8022f84:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8022f88:	f1ba 0f00 	cmp.w	sl, #0
 8022f8c:	d04b      	beq.n	8023026 <ai_platform_api_get_network_report+0xe2>
 8022f8e:	f04f 0b00 	mov.w	fp, #0
 8022f92:	f8cd 800c 	str.w	r8, [sp, #12]
 8022f96:	465d      	mov	r5, fp
 8022f98:	e015      	b.n	8022fc6 <ai_platform_api_get_network_report+0x82>
 8022f9a:	00ea      	lsls	r2, r5, #3
 8022f9c:	2101      	movs	r1, #1
 8022f9e:	50b9      	str	r1, [r7, r2]
 8022fa0:	69b2      	ldr	r2, [r6, #24]
 8022fa2:	6856      	ldr	r6, [r2, #4]
 8022fa4:	f04f 0201 	mov.w	r2, #1
 8022fa8:	60a3      	str	r3, [r4, #8]
 8022faa:	3501      	adds	r5, #1
 8022fac:	7522      	strb	r2, [r4, #20]
 8022fae:	f10b 0b1c 	add.w	fp, fp, #28
 8022fb2:	6963      	ldr	r3, [r4, #20]
 8022fb4:	2200      	movs	r2, #0
 8022fb6:	f368 231f 	bfi	r3, r8, #8, #24
 8022fba:	e9c4 0c00 	strd	r0, ip, [r4]
 8022fbe:	e9c4 2603 	strd	r2, r6, [r4, #12]
 8022fc2:	e9c4 3905 	strd	r3, r9, [r4, #20]
 8022fc6:	f8ba 3000 	ldrh.w	r3, [sl]
 8022fca:	b2aa      	uxth	r2, r5
 8022fcc:	429d      	cmp	r5, r3
 8022fce:	d23e      	bcs.n	802304e <ai_platform_api_get_network_report+0x10a>
 8022fd0:	f8da 3004 	ldr.w	r3, [sl, #4]
 8022fd4:	2b00      	cmp	r3, #0
 8022fd6:	d03a      	beq.n	802304e <ai_platform_api_get_network_report+0x10a>
 8022fd8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8022fdc:	2e00      	cmp	r6, #0
 8022fde:	d036      	beq.n	802304e <ai_platform_api_get_network_report+0x10a>
 8022fe0:	f8da 3008 	ldr.w	r3, [sl, #8]
 8022fe4:	00ea      	lsls	r2, r5, #3
 8022fe6:	f8d6 900c 	ldr.w	r9, [r6, #12]
 8022fea:	9201      	str	r2, [sp, #4]
 8022fec:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8022ff0:	69b3      	ldr	r3, [r6, #24]
 8022ff2:	445c      	add	r4, fp
 8022ff4:	6818      	ldr	r0, [r3, #0]
 8022ff6:	68b3      	ldr	r3, [r6, #8]
 8022ff8:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8022ffc:	f00e fbe6 	bl	80317cc <ai_array_to_buffer_fmt>
 8023000:	69b2      	ldr	r2, [r6, #24]
 8023002:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8023006:	f8d2 c008 	ldr.w	ip, [r2, #8]
 802300a:	2b00      	cmp	r3, #0
 802300c:	d0c9      	beq.n	8022fa2 <ai_platform_api_get_network_report+0x5e>
 802300e:	2200      	movs	r2, #0
 8023010:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 8023014:	6832      	ldr	r2, [r6, #0]
 8023016:	605a      	str	r2, [r3, #4]
 8023018:	b112      	cbz	r2, 8023020 <ai_platform_api_get_network_report+0xdc>
 802301a:	8852      	ldrh	r2, [r2, #2]
 802301c:	2a00      	cmp	r2, #0
 802301e:	d1bc      	bne.n	8022f9a <ai_platform_api_get_network_report+0x56>
 8023020:	69b2      	ldr	r2, [r6, #24]
 8023022:	2300      	movs	r3, #0
 8023024:	e7bd      	b.n	8022fa2 <ai_platform_api_get_network_report+0x5e>
 8023026:	2400      	movs	r4, #0
 8023028:	9802      	ldr	r0, [sp, #8]
 802302a:	2218      	movs	r2, #24
 802302c:	2112      	movs	r1, #18
 802302e:	300c      	adds	r0, #12
 8023030:	f8c8 403c 	str.w	r4, [r8, #60]	@ 0x3c
 8023034:	f8a8 4038 	strh.w	r4, [r8, #56]	@ 0x38
 8023038:	f000 fd2e 	bl	8023a98 <core_set_error>
 802303c:	4620      	mov	r0, r4
 802303e:	b009      	add	sp, #36	@ 0x24
 8023040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023044:	2400      	movs	r4, #0
 8023046:	4620      	mov	r0, r4
 8023048:	b009      	add	sp, #36	@ 0x24
 802304a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802304e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8023052:	2a00      	cmp	r2, #0
 8023054:	d0e7      	beq.n	8023026 <ai_platform_api_get_network_report+0xe2>
 8023056:	f8da 3008 	ldr.w	r3, [sl, #8]
 802305a:	685b      	ldr	r3, [r3, #4]
 802305c:	f8a8 2038 	strh.w	r2, [r8, #56]	@ 0x38
 8023060:	f8c8 303c 	str.w	r3, [r8, #60]	@ 0x3c
 8023064:	9b02      	ldr	r3, [sp, #8]
 8023066:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8023068:	2b01      	cmp	r3, #1
 802306a:	f240 80a4 	bls.w	80231b6 <ai_platform_api_get_network_report+0x272>
 802306e:	f04f 0a00 	mov.w	sl, #0
 8023072:	9b02      	ldr	r3, [sp, #8]
 8023074:	f8cd 800c 	str.w	r8, [sp, #12]
 8023078:	f8d3 9034 	ldr.w	r9, [r3, #52]	@ 0x34
 802307c:	4655      	mov	r5, sl
 802307e:	e016      	b.n	80230ae <ai_platform_api_get_network_report+0x16a>
 8023080:	00e9      	lsls	r1, r5, #3
 8023082:	2301      	movs	r3, #1
 8023084:	507b      	str	r3, [r7, r1]
 8023086:	69b1      	ldr	r1, [r6, #24]
 8023088:	f04f 0301 	mov.w	r3, #1
 802308c:	6849      	ldr	r1, [r1, #4]
 802308e:	3501      	adds	r5, #1
 8023090:	f10a 0a1c 	add.w	sl, sl, #28
 8023094:	7523      	strb	r3, [r4, #20]
 8023096:	2300      	movs	r3, #0
 8023098:	60a0      	str	r0, [r4, #8]
 802309a:	f8c4 b018 	str.w	fp, [r4, #24]
 802309e:	e9c4 3103 	strd	r3, r1, [r4, #12]
 80230a2:	6961      	ldr	r1, [r4, #20]
 80230a4:	f368 211f 	bfi	r1, r8, #8, #24
 80230a8:	e9c4 c200 	strd	ip, r2, [r4]
 80230ac:	6161      	str	r1, [r4, #20]
 80230ae:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80230b2:	b2aa      	uxth	r2, r5
 80230b4:	42ab      	cmp	r3, r5
 80230b6:	d928      	bls.n	802310a <ai_platform_api_get_network_report+0x1c6>
 80230b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80230bc:	b32b      	cbz	r3, 802310a <ai_platform_api_get_network_report+0x1c6>
 80230be:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80230c2:	b316      	cbz	r6, 802310a <ai_platform_api_get_network_report+0x1c6>
 80230c4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80230c8:	00ea      	lsls	r2, r5, #3
 80230ca:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 80230ce:	9201      	str	r2, [sp, #4]
 80230d0:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80230d4:	69b3      	ldr	r3, [r6, #24]
 80230d6:	4454      	add	r4, sl
 80230d8:	6818      	ldr	r0, [r3, #0]
 80230da:	68b3      	ldr	r3, [r6, #8]
 80230dc:	f3c3 2817 	ubfx	r8, r3, #8, #24
 80230e0:	f00e fb74 	bl	80317cc <ai_array_to_buffer_fmt>
 80230e4:	69b1      	ldr	r1, [r6, #24]
 80230e6:	4684      	mov	ip, r0
 80230e8:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80230ec:	688a      	ldr	r2, [r1, #8]
 80230ee:	2800      	cmp	r0, #0
 80230f0:	d0ca      	beq.n	8023088 <ai_platform_api_get_network_report+0x144>
 80230f2:	2100      	movs	r1, #0
 80230f4:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80230f8:	6831      	ldr	r1, [r6, #0]
 80230fa:	6041      	str	r1, [r0, #4]
 80230fc:	b111      	cbz	r1, 8023104 <ai_platform_api_get_network_report+0x1c0>
 80230fe:	8849      	ldrh	r1, [r1, #2]
 8023100:	2900      	cmp	r1, #0
 8023102:	d1bd      	bne.n	8023080 <ai_platform_api_get_network_report+0x13c>
 8023104:	69b1      	ldr	r1, [r6, #24]
 8023106:	2000      	movs	r0, #0
 8023108:	e7be      	b.n	8023088 <ai_platform_api_get_network_report+0x144>
 802310a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 802310e:	2a00      	cmp	r2, #0
 8023110:	d051      	beq.n	80231b6 <ai_platform_api_get_network_report+0x272>
 8023112:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8023116:	9902      	ldr	r1, [sp, #8]
 8023118:	685b      	ldr	r3, [r3, #4]
 802311a:	f101 0628 	add.w	r6, r1, #40	@ 0x28
 802311e:	f8a8 203a 	strh.w	r2, [r8, #58]	@ 0x3a
 8023122:	f8c8 3040 	str.w	r3, [r8, #64]	@ 0x40
 8023126:	4630      	mov	r0, r6
 8023128:	f7ff fd62 	bl	8022bf0 <ai_buffer_array_sane>
 802312c:	4604      	mov	r4, r0
 802312e:	b940      	cbnz	r0, 8023142 <ai_platform_api_get_network_report+0x1fe>
 8023130:	4630      	mov	r0, r6
 8023132:	f7ff fd5d 	bl	8022bf0 <ai_buffer_array_sane>
 8023136:	b120      	cbz	r0, 8023142 <ai_platform_api_get_network_report+0x1fe>
 8023138:	9b02      	ldr	r3, [sp, #8]
 802313a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802313c:	2b00      	cmp	r3, #0
 802313e:	f040 8086 	bne.w	802324e <ai_platform_api_get_network_report+0x30a>
 8023142:	9d02      	ldr	r5, [sp, #8]
 8023144:	f105 0720 	add.w	r7, r5, #32
 8023148:	4638      	mov	r0, r7
 802314a:	f7ff fd51 	bl	8022bf0 <ai_buffer_array_sane>
 802314e:	4604      	mov	r4, r0
 8023150:	b930      	cbnz	r0, 8023160 <ai_platform_api_get_network_report+0x21c>
 8023152:	4638      	mov	r0, r7
 8023154:	f7ff fd4c 	bl	8022bf0 <ai_buffer_array_sane>
 8023158:	b110      	cbz	r0, 8023160 <ai_platform_api_get_network_report+0x21c>
 802315a:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 802315c:	2b00      	cmp	r3, #0
 802315e:	d17d      	bne.n	802325c <ai_platform_api_get_network_report+0x318>
 8023160:	9a02      	ldr	r2, [sp, #8]
 8023162:	f240 2401 	movw	r4, #513	@ 0x201
 8023166:	6853      	ldr	r3, [r2, #4]
 8023168:	f8c8 3080 	str.w	r3, [r8, #128]	@ 0x80
 802316c:	4b1a      	ldr	r3, [pc, #104]	@ (80231d8 <ai_platform_api_get_network_report+0x294>)
 802316e:	f8c8 3010 	str.w	r3, [r8, #16]
 8023172:	230a      	movs	r3, #10
 8023174:	f8c8 3014 	str.w	r3, [r8, #20]
 8023178:	f240 5301 	movw	r3, #1281	@ 0x501
 802317c:	e9c8 4309 	strd	r4, r3, [r8, #36]	@ 0x24
 8023180:	6890      	ldr	r0, [r2, #8]
 8023182:	f7ff fcbd 	bl	8022b00 <ai_platform_version_get>
 8023186:	4b15      	ldr	r3, [pc, #84]	@ (80231dc <ai_platform_api_get_network_report+0x298>)
 8023188:	f8d8 2044 	ldr.w	r2, [r8, #68]	@ 0x44
 802318c:	f8c8 0020 	str.w	r0, [r8, #32]
 8023190:	429a      	cmp	r2, r3
 8023192:	d125      	bne.n	80231e0 <ai_platform_api_get_network_report+0x29c>
 8023194:	f108 0250 	add.w	r2, r8, #80	@ 0x50
 8023198:	f108 0348 	add.w	r3, r8, #72	@ 0x48
 802319c:	2401      	movs	r4, #1
 802319e:	e896 0003 	ldmia.w	r6, {r0, r1}
 80231a2:	e882 0003 	stmia.w	r2, {r0, r1}
 80231a6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80231aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80231ae:	4620      	mov	r0, r4
 80231b0:	b009      	add	sp, #36	@ 0x24
 80231b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231b6:	2400      	movs	r4, #0
 80231b8:	9802      	ldr	r0, [sp, #8]
 80231ba:	2218      	movs	r2, #24
 80231bc:	2113      	movs	r1, #19
 80231be:	f8c8 4040 	str.w	r4, [r8, #64]	@ 0x40
 80231c2:	300c      	adds	r0, #12
 80231c4:	f8a8 403a 	strh.w	r4, [r8, #58]	@ 0x3a
 80231c8:	f000 fc66 	bl	8023a98 <core_set_error>
 80231cc:	4620      	mov	r0, r4
 80231ce:	b009      	add	sp, #36	@ 0x24
 80231d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231d4:	a1c00100 	.word	0xa1c00100
 80231d8:	08072674 	.word	0x08072674
 80231dc:	a1facade 	.word	0xa1facade
 80231e0:	2200      	movs	r2, #0
 80231e2:	4b3a      	ldr	r3, [pc, #232]	@ (80232cc <ai_platform_api_get_network_report+0x388>)
 80231e4:	f108 0a44 	add.w	sl, r8, #68	@ 0x44
 80231e8:	f10d 0c10 	add.w	ip, sp, #16
 80231ec:	f108 0960 	add.w	r9, r8, #96	@ 0x60
 80231f0:	4655      	mov	r5, sl
 80231f2:	f8c8 c05c 	str.w	ip, [r8, #92]	@ 0x5c
 80231f6:	464c      	mov	r4, r9
 80231f8:	e9c8 2212 	strd	r2, r2, [r8, #72]	@ 0x48
 80231fc:	e9c8 2214 	strd	r2, r2, [r8, #80]	@ 0x50
 8023200:	4a33      	ldr	r2, [pc, #204]	@ (80232d0 <ai_platform_api_get_network_report+0x38c>)
 8023202:	f8c8 2044 	str.w	r2, [r8, #68]	@ 0x44
 8023206:	f240 4201 	movw	r2, #1025	@ 0x401
 802320a:	f8c8 2058 	str.w	r2, [r8, #88]	@ 0x58
 802320e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8023210:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8023214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8023216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8023218:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802321c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8023220:	4630      	mov	r0, r6
 8023222:	f7ff fce5 	bl	8022bf0 <ai_buffer_array_sane>
 8023226:	bb78      	cbnz	r0, 8023288 <ai_platform_api_get_network_report+0x344>
 8023228:	4638      	mov	r0, r7
 802322a:	f7ff fce1 	bl	8022bf0 <ai_buffer_array_sane>
 802322e:	b9e0      	cbnz	r0, 802326a <ai_platform_api_get_network_report+0x326>
 8023230:	2401      	movs	r4, #1
 8023232:	4620      	mov	r0, r4
 8023234:	b009      	add	sp, #36	@ 0x24
 8023236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802323a:	9802      	ldr	r0, [sp, #8]
 802323c:	2218      	movs	r2, #24
 802323e:	2111      	movs	r1, #17
 8023240:	300c      	adds	r0, #12
 8023242:	f000 fc29 	bl	8023a98 <core_set_error>
 8023246:	4620      	mov	r0, r4
 8023248:	b009      	add	sp, #36	@ 0x24
 802324a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802324e:	9802      	ldr	r0, [sp, #8]
 8023250:	2213      	movs	r2, #19
 8023252:	2111      	movs	r1, #17
 8023254:	300c      	adds	r0, #12
 8023256:	f000 fc1f 	bl	8023a98 <core_set_error>
 802325a:	e6ef      	b.n	802303c <ai_platform_api_get_network_report+0xf8>
 802325c:	9802      	ldr	r0, [sp, #8]
 802325e:	2212      	movs	r2, #18
 8023260:	2111      	movs	r1, #17
 8023262:	300c      	adds	r0, #12
 8023264:	f000 fc18 	bl	8023a98 <core_set_error>
 8023268:	e6e8      	b.n	802303c <ai_platform_api_get_network_report+0xf8>
 802326a:	4638      	mov	r0, r7
 802326c:	f7ff fcc0 	bl	8022bf0 <ai_buffer_array_sane>
 8023270:	b1c0      	cbz	r0, 80232a4 <ai_platform_api_get_network_report+0x360>
 8023272:	9b02      	ldr	r3, [sp, #8]
 8023274:	46d0      	mov	r8, sl
 8023276:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8023278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802327a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 802327e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8023282:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8023286:	e7d3      	b.n	8023230 <ai_platform_api_get_network_report+0x2ec>
 8023288:	4630      	mov	r0, r6
 802328a:	f7ff fcb1 	bl	8022bf0 <ai_buffer_array_sane>
 802328e:	b198      	cbz	r0, 80232b8 <ai_platform_api_get_network_report+0x374>
 8023290:	9b02      	ldr	r3, [sp, #8]
 8023292:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8023294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8023296:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 802329a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 802329e:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 80232a2:	e7c1      	b.n	8023228 <ai_platform_api_get_network_report+0x2e4>
 80232a4:	4604      	mov	r4, r0
 80232a6:	46d0      	mov	r8, sl
 80232a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80232aa:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80232ae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80232b2:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80232b6:	deff      	udf	#255	@ 0xff
 80232b8:	4604      	mov	r4, r0
 80232ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80232bc:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 80232c0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80232c4:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 80232c8:	deff      	udf	#255	@ 0xff
 80232ca:	bf00      	nop
 80232cc:	08038278 	.word	0x08038278
 80232d0:	00040440 	.word	0x00040440

080232d4 <ai_platform_network_create>:
 80232d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80232d8:	b083      	sub	sp, #12
 80232da:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 80232de:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 80232e2:	b320      	cbz	r0, 802332e <ai_platform_network_create+0x5a>
 80232e4:	6002      	str	r2, [r0, #0]
 80232e6:	4616      	mov	r6, r2
 80232e8:	461f      	mov	r7, r3
 80232ea:	4604      	mov	r4, r0
 80232ec:	f000 fbcc 	bl	8023a88 <core_init>
 80232f0:	b970      	cbnz	r0, 8023310 <ai_platform_network_create+0x3c>
 80232f2:	2530      	movs	r5, #48	@ 0x30
 80232f4:	2300      	movs	r3, #0
 80232f6:	6023      	str	r3, [r4, #0]
 80232f8:	2410      	movs	r4, #16
 80232fa:	464a      	mov	r2, r9
 80232fc:	4641      	mov	r1, r8
 80232fe:	4638      	mov	r0, r7
 8023300:	f7ff fbf8 	bl	8022af4 <ai_version_get>
 8023304:	60b0      	str	r0, [r6, #8]
 8023306:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 802330a:	b003      	add	sp, #12
 802330c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023310:	2200      	movs	r2, #0
 8023312:	4641      	mov	r1, r8
 8023314:	4638      	mov	r0, r7
 8023316:	f7ff fbed 	bl	8022af4 <ai_version_get>
 802331a:	4605      	mov	r5, r0
 802331c:	2200      	movs	r2, #0
 802331e:	2105      	movs	r1, #5
 8023320:	2001      	movs	r0, #1
 8023322:	f7ff fbe7 	bl	8022af4 <ai_version_get>
 8023326:	4285      	cmp	r5, r0
 8023328:	d008      	beq.n	802333c <ai_platform_network_create+0x68>
 802332a:	2501      	movs	r5, #1
 802332c:	e7e2      	b.n	80232f4 <ai_platform_network_create+0x20>
 802332e:	2510      	movs	r5, #16
 8023330:	462c      	mov	r4, r5
 8023332:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8023336:	b003      	add	sp, #12
 8023338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802333c:	4b05      	ldr	r3, [pc, #20]	@ (8023354 <ai_platform_network_create+0x80>)
 802333e:	a801      	add	r0, sp, #4
 8023340:	9301      	str	r3, [sp, #4]
 8023342:	f000 fca9 	bl	8023c98 <ai_check_custom_types>
 8023346:	b110      	cbz	r0, 802334e <ai_platform_network_create+0x7a>
 8023348:	2400      	movs	r4, #0
 802334a:	4625      	mov	r5, r4
 802334c:	e7d5      	b.n	80232fa <ai_platform_network_create+0x26>
 802334e:	2502      	movs	r5, #2
 8023350:	e7d0      	b.n	80232f4 <ai_platform_network_create+0x20>
 8023352:	bf00      	nop
 8023354:	84048403 	.word	0x84048403

08023358 <ai_platform_network_destroy>:
 8023358:	4a07      	ldr	r2, [pc, #28]	@ (8023378 <ai_platform_network_destroy+0x20>)
 802335a:	b508      	push	{r3, lr}
 802335c:	6801      	ldr	r1, [r0, #0]
 802335e:	ea01 0c02 	and.w	ip, r1, r2
 8023362:	438a      	bics	r2, r1
 8023364:	d102      	bne.n	802336c <ai_platform_network_destroy+0x14>
 8023366:	4561      	cmp	r1, ip
 8023368:	d001      	beq.n	802336e <ai_platform_network_destroy+0x16>
 802336a:	2000      	movs	r0, #0
 802336c:	bd08      	pop	{r3, pc}
 802336e:	f000 fd25 	bl	8023dbc <ai_layers_destroy_all>
 8023372:	2000      	movs	r0, #0
 8023374:	bd08      	pop	{r3, pc}
 8023376:	bf00      	nop
 8023378:	a1c00100 	.word	0xa1c00100

0802337c <ai_platform_network_init>:
 802337c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023380:	4a5c      	ldr	r2, [pc, #368]	@ (80234f4 <ai_platform_network_init+0x178>)
 8023382:	460c      	mov	r4, r1
 8023384:	6801      	ldr	r1, [r0, #0]
 8023386:	438a      	bics	r2, r1
 8023388:	d133      	bne.n	80233f2 <ai_platform_network_init+0x76>
 802338a:	4605      	mov	r5, r0
 802338c:	2c00      	cmp	r4, #0
 802338e:	f000 8093 	beq.w	80234b8 <ai_platform_network_init+0x13c>
 8023392:	f8d4 b000 	ldr.w	fp, [r4]
 8023396:	4a58      	ldr	r2, [pc, #352]	@ (80234f8 <ai_platform_network_init+0x17c>)
 8023398:	4593      	cmp	fp, r2
 802339a:	d10f      	bne.n	80233bc <ai_platform_network_init+0x40>
 802339c:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 80233a0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80233a4:	4b53      	ldr	r3, [pc, #332]	@ (80234f4 <ai_platform_network_init+0x178>)
 80233a6:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 80233aa:	0c32      	lsrs	r2, r6, #16
 80233ac:	4299      	cmp	r1, r3
 80233ae:	d02c      	beq.n	802340a <ai_platform_network_init+0x8e>
 80233b0:	2303      	movs	r3, #3
 80233b2:	462c      	mov	r4, r5
 80233b4:	612b      	str	r3, [r5, #16]
 80233b6:	4620      	mov	r0, r4
 80233b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233bc:	4627      	mov	r7, r4
 80233be:	2101      	movs	r1, #1
 80233c0:	6864      	ldr	r4, [r4, #4]
 80233c2:	4638      	mov	r0, r7
 80233c4:	f107 081c 	add.w	r8, r7, #28
 80233c8:	f7ff fbd6 	bl	8022b78 <ai_buffer_get_size>
 80233cc:	4606      	mov	r6, r0
 80233ce:	2101      	movs	r1, #1
 80233d0:	4640      	mov	r0, r8
 80233d2:	f8d7 9020 	ldr.w	r9, [r7, #32]
 80233d6:	f7ff fbcf 	bl	8022b78 <ai_buffer_get_size>
 80233da:	b976      	cbnz	r6, 80233fa <ai_platform_network_init+0x7e>
 80233dc:	2800      	cmp	r0, #0
 80233de:	d150      	bne.n	8023482 <ai_platform_network_init+0x106>
 80233e0:	4680      	mov	r8, r0
 80233e2:	4686      	mov	lr, r0
 80233e4:	4606      	mov	r6, r0
 80233e6:	4607      	mov	r7, r0
 80233e8:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 80233ec:	6829      	ldr	r1, [r5, #0]
 80233ee:	0436      	lsls	r6, r6, #16
 80233f0:	e7d8      	b.n	80233a4 <ai_platform_network_init+0x28>
 80233f2:	2400      	movs	r4, #0
 80233f4:	4620      	mov	r0, r4
 80233f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233fa:	2800      	cmp	r0, #0
 80233fc:	d13b      	bne.n	8023476 <ai_platform_network_init+0xfa>
 80233fe:	4680      	mov	r8, r0
 8023400:	4686      	mov	lr, r0
 8023402:	2c00      	cmp	r4, #0
 8023404:	d05e      	beq.n	80234c4 <ai_platform_network_init+0x148>
 8023406:	2601      	movs	r6, #1
 8023408:	e7ee      	b.n	80233e8 <ai_platform_network_init+0x6c>
 802340a:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 802340c:	4293      	cmp	r3, r2
 802340e:	4b3a      	ldr	r3, [pc, #232]	@ (80234f8 <ai_platform_network_init+0x17c>)
 8023410:	d33e      	bcc.n	8023490 <ai_platform_network_init+0x114>
 8023412:	459b      	cmp	fp, r3
 8023414:	d03e      	beq.n	8023494 <ai_platform_network_init+0x118>
 8023416:	b1a2      	cbz	r2, 8023442 <ai_platform_network_init+0xc6>
 8023418:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 802341c:	f04f 0c00 	mov.w	ip, #0
 8023420:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8023424:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8023426:	eb07 0b0c 	add.w	fp, r7, ip
 802342a:	4464      	add	r4, ip
 802342c:	f10c 0c1c 	add.w	ip, ip, #28
 8023430:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8023434:	45cc      	cmp	ip, r9
 8023436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8023438:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 802343c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8023440:	d1f0      	bne.n	8023424 <ai_platform_network_init+0xa8>
 8023442:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 8023444:	622e      	str	r6, [r5, #32]
 8023446:	4553      	cmp	r3, sl
 8023448:	d34b      	bcc.n	80234e2 <ai_platform_network_init+0x166>
 802344a:	f1ba 0f00 	cmp.w	sl, #0
 802344e:	d025      	beq.n	802349c <ai_platform_network_init+0x120>
 8023450:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8023454:	2700      	movs	r7, #0
 8023456:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 802345a:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 802345c:	eb08 0607 	add.w	r6, r8, r7
 8023460:	443c      	add	r4, r7
 8023462:	371c      	adds	r7, #28
 8023464:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8023466:	4557      	cmp	r7, sl
 8023468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802346a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 802346e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8023472:	d1f2      	bne.n	802345a <ai_platform_network_init+0xde>
 8023474:	e012      	b.n	802349c <ai_platform_network_init+0x120>
 8023476:	f1b9 0f00 	cmp.w	r9, #0
 802347a:	d015      	beq.n	80234a8 <ai_platform_network_init+0x12c>
 802347c:	f04f 0e01 	mov.w	lr, #1
 8023480:	e7bf      	b.n	8023402 <ai_platform_network_init+0x86>
 8023482:	f1b9 0f00 	cmp.w	r9, #0
 8023486:	d00f      	beq.n	80234a8 <ai_platform_network_init+0x12c>
 8023488:	f04f 0e01 	mov.w	lr, #1
 802348c:	4637      	mov	r7, r6
 802348e:	e7ab      	b.n	80233e8 <ai_platform_network_init+0x6c>
 8023490:	459b      	cmp	fp, r3
 8023492:	d11e      	bne.n	80234d2 <ai_platform_network_init+0x156>
 8023494:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 8023498:	e9c5 6708 	strd	r6, r7, [r5, #32]
 802349c:	4628      	mov	r0, r5
 802349e:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 80234a2:	f000 fc21 	bl	8023ce8 <ai_layers_init_all>
 80234a6:	e783      	b.n	80233b0 <ai_platform_network_init+0x34>
 80234a8:	2213      	movs	r2, #19
 80234aa:	2110      	movs	r1, #16
 80234ac:	f105 000c 	add.w	r0, r5, #12
 80234b0:	2400      	movs	r4, #0
 80234b2:	f000 faf1 	bl	8023a98 <core_set_error>
 80234b6:	e77e      	b.n	80233b6 <ai_platform_network_init+0x3a>
 80234b8:	2211      	movs	r2, #17
 80234ba:	2110      	movs	r1, #16
 80234bc:	300c      	adds	r0, #12
 80234be:	f000 faeb 	bl	8023a98 <core_set_error>
 80234c2:	e778      	b.n	80233b6 <ai_platform_network_init+0x3a>
 80234c4:	2212      	movs	r2, #18
 80234c6:	2110      	movs	r1, #16
 80234c8:	f105 000c 	add.w	r0, r5, #12
 80234cc:	f000 fae4 	bl	8023a98 <core_set_error>
 80234d0:	e771      	b.n	80233b6 <ai_platform_network_init+0x3a>
 80234d2:	2212      	movs	r2, #18
 80234d4:	2116      	movs	r1, #22
 80234d6:	f105 000c 	add.w	r0, r5, #12
 80234da:	2400      	movs	r4, #0
 80234dc:	f000 fadc 	bl	8023a98 <core_set_error>
 80234e0:	e769      	b.n	80233b6 <ai_platform_network_init+0x3a>
 80234e2:	2213      	movs	r2, #19
 80234e4:	2116      	movs	r1, #22
 80234e6:	f105 000c 	add.w	r0, r5, #12
 80234ea:	2400      	movs	r4, #0
 80234ec:	f000 fad4 	bl	8023a98 <core_set_error>
 80234f0:	e761      	b.n	80233b6 <ai_platform_network_init+0x3a>
 80234f2:	bf00      	nop
 80234f4:	a1c00100 	.word	0xa1c00100
 80234f8:	a1facade 	.word	0xa1facade

080234fc <ai_platform_network_post_init>:
 80234fc:	b538      	push	{r3, r4, r5, lr}
 80234fe:	4b16      	ldr	r3, [pc, #88]	@ (8023558 <ai_platform_network_post_init+0x5c>)
 8023500:	6802      	ldr	r2, [r0, #0]
 8023502:	ea02 0103 	and.w	r1, r2, r3
 8023506:	4393      	bics	r3, r2
 8023508:	d108      	bne.n	802351c <ai_platform_network_post_init+0x20>
 802350a:	6903      	ldr	r3, [r0, #16]
 802350c:	4604      	mov	r4, r0
 802350e:	f013 0502 	ands.w	r5, r3, #2
 8023512:	d005      	beq.n	8023520 <ai_platform_network_post_init+0x24>
 8023514:	428a      	cmp	r2, r1
 8023516:	d00a      	beq.n	802352e <ai_platform_network_post_init+0x32>
 8023518:	2001      	movs	r0, #1
 802351a:	bd38      	pop	{r3, r4, r5, pc}
 802351c:	2000      	movs	r0, #0
 802351e:	bd38      	pop	{r3, r4, r5, pc}
 8023520:	2210      	movs	r2, #16
 8023522:	2111      	movs	r1, #17
 8023524:	300c      	adds	r0, #12
 8023526:	f000 fab7 	bl	8023a98 <core_set_error>
 802352a:	4628      	mov	r0, r5
 802352c:	bd38      	pop	{r3, r4, r5, pc}
 802352e:	f000 fbe9 	bl	8023d04 <ai_layers_post_init_all>
 8023532:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023534:	2b00      	cmp	r3, #0
 8023536:	d0ef      	beq.n	8023518 <ai_platform_network_post_init+0x1c>
 8023538:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 802353a:	e008      	b.n	802354e <ai_platform_network_post_init+0x52>
 802353c:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 8023540:	4798      	blx	r3
 8023542:	692b      	ldr	r3, [r5, #16]
 8023544:	42ab      	cmp	r3, r5
 8023546:	461d      	mov	r5, r3
 8023548:	d0e6      	beq.n	8023518 <ai_platform_network_post_init+0x1c>
 802354a:	2b00      	cmp	r3, #0
 802354c:	d0e4      	beq.n	8023518 <ai_platform_network_post_init+0x1c>
 802354e:	4629      	mov	r1, r5
 8023550:	2000      	movs	r0, #0
 8023552:	2d00      	cmp	r5, #0
 8023554:	d1f2      	bne.n	802353c <ai_platform_network_post_init+0x40>
 8023556:	e7df      	b.n	8023518 <ai_platform_network_post_init+0x1c>
 8023558:	a1c00100 	.word	0xa1c00100

0802355c <ai_platform_network_process>:
 802355c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023560:	b085      	sub	sp, #20
 8023562:	4bb7      	ldr	r3, [pc, #732]	@ (8023840 <ai_platform_network_process+0x2e4>)
 8023564:	9202      	str	r2, [sp, #8]
 8023566:	6802      	ldr	r2, [r0, #0]
 8023568:	4393      	bics	r3, r2
 802356a:	f040 8142 	bne.w	80237f2 <ai_platform_network_process+0x296>
 802356e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8023570:	4605      	mov	r5, r0
 8023572:	2b00      	cmp	r3, #0
 8023574:	f000 8126 	beq.w	80237c4 <ai_platform_network_process+0x268>
 8023578:	6903      	ldr	r3, [r0, #16]
 802357a:	2200      	movs	r2, #0
 802357c:	f8d0 8034 	ldr.w	r8, [r0, #52]	@ 0x34
 8023580:	f003 0303 	and.w	r3, r3, #3
 8023584:	6182      	str	r2, [r0, #24]
 8023586:	2b03      	cmp	r3, #3
 8023588:	f040 8122 	bne.w	80237d0 <ai_platform_network_process+0x274>
 802358c:	2900      	cmp	r1, #0
 802358e:	f000 8136 	beq.w	80237fe <ai_platform_network_process+0x2a2>
 8023592:	fab8 f788 	clz	r7, r8
 8023596:	097f      	lsrs	r7, r7, #5
 8023598:	f1b8 0f00 	cmp.w	r8, #0
 802359c:	f000 812f 	beq.w	80237fe <ai_platform_network_process+0x2a2>
 80235a0:	f8b8 3000 	ldrh.w	r3, [r8]
 80235a4:	2b00      	cmp	r3, #0
 80235a6:	f000 812a 	beq.w	80237fe <ai_platform_network_process+0x2a2>
 80235aa:	698b      	ldr	r3, [r1, #24]
 80235ac:	460e      	mov	r6, r1
 80235ae:	9003      	str	r0, [sp, #12]
 80235b0:	681b      	ldr	r3, [r3, #0]
 80235b2:	9301      	str	r3, [sp, #4]
 80235b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80235b8:	2b00      	cmp	r3, #0
 80235ba:	d072      	beq.n	80236a2 <ai_platform_network_process+0x146>
 80235bc:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80235c0:	2c00      	cmp	r4, #0
 80235c2:	d06e      	beq.n	80236a2 <ai_platform_network_process+0x146>
 80235c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80235c8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80235cc:	f8d3 a000 	ldr.w	sl, [r3]
 80235d0:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 80235d4:	f000 8112 	beq.w	80237fc <ai_platform_network_process+0x2a0>
 80235d8:	69a3      	ldr	r3, [r4, #24]
 80235da:	2101      	movs	r1, #1
 80235dc:	4630      	mov	r0, r6
 80235de:	685d      	ldr	r5, [r3, #4]
 80235e0:	f7ff faca 	bl	8022b78 <ai_buffer_get_size>
 80235e4:	4285      	cmp	r5, r0
 80235e6:	f0c0 8115 	bcc.w	8023814 <ai_platform_network_process+0x2b8>
 80235ea:	68e0      	ldr	r0, [r4, #12]
 80235ec:	69b1      	ldr	r1, [r6, #24]
 80235ee:	68c2      	ldr	r2, [r0, #12]
 80235f0:	68cb      	ldr	r3, [r1, #12]
 80235f2:	429a      	cmp	r2, r3
 80235f4:	f040 810e 	bne.w	8023814 <ai_platform_network_process+0x2b8>
 80235f8:	6882      	ldr	r2, [r0, #8]
 80235fa:	688b      	ldr	r3, [r1, #8]
 80235fc:	429a      	cmp	r2, r3
 80235fe:	f040 8109 	bne.w	8023814 <ai_platform_network_process+0x2b8>
 8023602:	6842      	ldr	r2, [r0, #4]
 8023604:	684b      	ldr	r3, [r1, #4]
 8023606:	429a      	cmp	r2, r3
 8023608:	f040 8104 	bne.w	8023814 <ai_platform_network_process+0x2b8>
 802360c:	69a3      	ldr	r3, [r4, #24]
 802360e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8023612:	f00e f973 	bl	80318fc <ai_array_get_data_byte_size>
 8023616:	4605      	mov	r5, r0
 8023618:	4620      	mov	r0, r4
 802361a:	f7ff fa97 	bl	8022b4c <get_tensor_byte_size>
 802361e:	4285      	cmp	r5, r0
 8023620:	f0c0 80f8 	bcc.w	8023814 <ai_platform_network_process+0x2b8>
 8023624:	69a3      	ldr	r3, [r4, #24]
 8023626:	6818      	ldr	r0, [r3, #0]
 8023628:	f00e f8d0 	bl	80317cc <ai_array_to_buffer_fmt>
 802362c:	6833      	ldr	r3, [r6, #0]
 802362e:	4058      	eors	r0, r3
 8023630:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8023634:	f040 81a4 	bne.w	8023980 <ai_platform_network_process+0x424>
 8023638:	6873      	ldr	r3, [r6, #4]
 802363a:	2b00      	cmp	r3, #0
 802363c:	f000 80de 	beq.w	80237fc <ai_platform_network_process+0x2a0>
 8023640:	69b3      	ldr	r3, [r6, #24]
 8023642:	681b      	ldr	r3, [r3, #0]
 8023644:	2b00      	cmp	r3, #0
 8023646:	f000 81a4 	beq.w	8023992 <ai_platform_network_process+0x436>
 802364a:	9a01      	ldr	r2, [sp, #4]
 802364c:	4620      	mov	r0, r4
 802364e:	3701      	adds	r7, #1
 8023650:	361c      	adds	r6, #28
 8023652:	429a      	cmp	r2, r3
 8023654:	bf38      	it	cc
 8023656:	461a      	movcc	r2, r3
 8023658:	9201      	str	r2, [sp, #4]
 802365a:	f7ff fa77 	bl	8022b4c <get_tensor_byte_size>
 802365e:	f8c9 0008 	str.w	r0, [r9, #8]
 8023662:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8023666:	681b      	ldr	r3, [r3, #0]
 8023668:	fb00 f303 	mul.w	r3, r0, r3
 802366c:	f8c9 300c 	str.w	r3, [r9, #12]
 8023670:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8023674:	440b      	add	r3, r1
 8023676:	f8c9 1004 	str.w	r1, [r9, #4]
 802367a:	f84a 300b 	str.w	r3, [sl, fp]
 802367e:	69a0      	ldr	r0, [r4, #24]
 8023680:	6803      	ldr	r3, [r0, #0]
 8023682:	009a      	lsls	r2, r3, #2
 8023684:	f100 80af 	bmi.w	80237e6 <ai_platform_network_process+0x28a>
 8023688:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 802368c:	1a9b      	subs	r3, r3, r2
 802368e:	4419      	add	r1, r3
 8023690:	6081      	str	r1, [r0, #8]
 8023692:	69a3      	ldr	r3, [r4, #24]
 8023694:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8023698:	60da      	str	r2, [r3, #12]
 802369a:	f8b8 3000 	ldrh.w	r3, [r8]
 802369e:	42bb      	cmp	r3, r7
 80236a0:	d888      	bhi.n	80235b4 <ai_platform_network_process+0x58>
 80236a2:	9d03      	ldr	r5, [sp, #12]
 80236a4:	9b02      	ldr	r3, [sp, #8]
 80236a6:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 80236a8:	2b00      	cmp	r3, #0
 80236aa:	f000 817b 	beq.w	80239a4 <ai_platform_network_process+0x448>
 80236ae:	2a01      	cmp	r2, #1
 80236b0:	f240 80bd 	bls.w	802382e <ai_platform_network_process+0x2d2>
 80236b4:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
 80236b8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80236bc:	2b00      	cmp	r3, #0
 80236be:	f000 80b6 	beq.w	802382e <ai_platform_network_process+0x2d2>
 80236c2:	2700      	movs	r7, #0
 80236c4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80236c8:	9502      	str	r5, [sp, #8]
 80236ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80236ce:	2b00      	cmp	r3, #0
 80236d0:	f000 80bd 	beq.w	802384e <ai_platform_network_process+0x2f2>
 80236d4:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 80236d8:	2e00      	cmp	r6, #0
 80236da:	f000 80b8 	beq.w	802384e <ai_platform_network_process+0x2f2>
 80236de:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80236e2:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 80236e6:	681c      	ldr	r4, [r3, #0]
 80236e8:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 80236ec:	f000 8170 	beq.w	80239d0 <ai_platform_network_process+0x474>
 80236f0:	69b3      	ldr	r3, [r6, #24]
 80236f2:	2101      	movs	r1, #1
 80236f4:	4658      	mov	r0, fp
 80236f6:	685d      	ldr	r5, [r3, #4]
 80236f8:	f7ff fa3e 	bl	8022b78 <ai_buffer_get_size>
 80236fc:	4285      	cmp	r5, r0
 80236fe:	f0c0 8095 	bcc.w	802382c <ai_platform_network_process+0x2d0>
 8023702:	68f0      	ldr	r0, [r6, #12]
 8023704:	f8db 1018 	ldr.w	r1, [fp, #24]
 8023708:	68c2      	ldr	r2, [r0, #12]
 802370a:	68cb      	ldr	r3, [r1, #12]
 802370c:	429a      	cmp	r2, r3
 802370e:	f040 808d 	bne.w	802382c <ai_platform_network_process+0x2d0>
 8023712:	6882      	ldr	r2, [r0, #8]
 8023714:	688b      	ldr	r3, [r1, #8]
 8023716:	429a      	cmp	r2, r3
 8023718:	f040 8088 	bne.w	802382c <ai_platform_network_process+0x2d0>
 802371c:	6842      	ldr	r2, [r0, #4]
 802371e:	684b      	ldr	r3, [r1, #4]
 8023720:	429a      	cmp	r2, r3
 8023722:	f040 8083 	bne.w	802382c <ai_platform_network_process+0x2d0>
 8023726:	69b3      	ldr	r3, [r6, #24]
 8023728:	e9d3 0100 	ldrd	r0, r1, [r3]
 802372c:	f00e f8e6 	bl	80318fc <ai_array_get_data_byte_size>
 8023730:	9003      	str	r0, [sp, #12]
 8023732:	4630      	mov	r0, r6
 8023734:	f7ff fa0a 	bl	8022b4c <get_tensor_byte_size>
 8023738:	9b03      	ldr	r3, [sp, #12]
 802373a:	4283      	cmp	r3, r0
 802373c:	d376      	bcc.n	802382c <ai_platform_network_process+0x2d0>
 802373e:	69b3      	ldr	r3, [r6, #24]
 8023740:	6818      	ldr	r0, [r3, #0]
 8023742:	f00e f843 	bl	80317cc <ai_array_to_buffer_fmt>
 8023746:	f8db 3000 	ldr.w	r3, [fp]
 802374a:	4058      	eors	r0, r3
 802374c:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8023750:	f040 812c 	bne.w	80239ac <ai_platform_network_process+0x450>
 8023754:	f8db 3004 	ldr.w	r3, [fp, #4]
 8023758:	2b00      	cmp	r3, #0
 802375a:	f000 8139 	beq.w	80239d0 <ai_platform_network_process+0x474>
 802375e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8023762:	681b      	ldr	r3, [r3, #0]
 8023764:	2b00      	cmp	r3, #0
 8023766:	f000 812a 	beq.w	80239be <ai_platform_network_process+0x462>
 802376a:	9a01      	ldr	r2, [sp, #4]
 802376c:	4630      	mov	r0, r6
 802376e:	3701      	adds	r7, #1
 8023770:	f10b 0b1c 	add.w	fp, fp, #28
 8023774:	429a      	cmp	r2, r3
 8023776:	bf38      	it	cc
 8023778:	461a      	movcc	r2, r3
 802377a:	9201      	str	r2, [sp, #4]
 802377c:	f7ff f9e6 	bl	8022b4c <get_tensor_byte_size>
 8023780:	f8c8 0008 	str.w	r0, [r8, #8]
 8023784:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8023788:	681b      	ldr	r3, [r3, #0]
 802378a:	fb00 f303 	mul.w	r3, r0, r3
 802378e:	f8c8 300c 	str.w	r3, [r8, #12]
 8023792:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 8023796:	440b      	add	r3, r1
 8023798:	f8c8 1004 	str.w	r1, [r8, #4]
 802379c:	f844 300a 	str.w	r3, [r4, sl]
 80237a0:	69b0      	ldr	r0, [r6, #24]
 80237a2:	6803      	ldr	r3, [r0, #0]
 80237a4:	009b      	lsls	r3, r3, #2
 80237a6:	d44d      	bmi.n	8023844 <ai_platform_network_process+0x2e8>
 80237a8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80237ac:	1a9b      	subs	r3, r3, r2
 80237ae:	4419      	add	r1, r3
 80237b0:	6081      	str	r1, [r0, #8]
 80237b2:	69b3      	ldr	r3, [r6, #24]
 80237b4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80237b8:	60da      	str	r2, [r3, #12]
 80237ba:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80237be:	42bb      	cmp	r3, r7
 80237c0:	d883      	bhi.n	80236ca <ai_platform_network_process+0x16e>
 80237c2:	e044      	b.n	802384e <ai_platform_network_process+0x2f2>
 80237c4:	6902      	ldr	r2, [r0, #16]
 80237c6:	6183      	str	r3, [r0, #24]
 80237c8:	f002 0203 	and.w	r2, r2, #3
 80237cc:	2a03      	cmp	r2, #3
 80237ce:	d016      	beq.n	80237fe <ai_platform_network_process+0x2a2>
 80237d0:	2230      	movs	r2, #48	@ 0x30
 80237d2:	2111      	movs	r1, #17
 80237d4:	f105 000c 	add.w	r0, r5, #12
 80237d8:	2400      	movs	r4, #0
 80237da:	f000 f95d 	bl	8023a98 <core_set_error>
 80237de:	4620      	mov	r0, r4
 80237e0:	b005      	add	sp, #20
 80237e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237e6:	f8b8 3000 	ldrh.w	r3, [r8]
 80237ea:	429f      	cmp	r7, r3
 80237ec:	f4ff aee2 	bcc.w	80235b4 <ai_platform_network_process+0x58>
 80237f0:	e757      	b.n	80236a2 <ai_platform_network_process+0x146>
 80237f2:	2400      	movs	r4, #0
 80237f4:	4620      	mov	r0, r4
 80237f6:	b005      	add	sp, #20
 80237f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237fc:	9d03      	ldr	r5, [sp, #12]
 80237fe:	2400      	movs	r4, #0
 8023800:	2217      	movs	r2, #23
 8023802:	2112      	movs	r1, #18
 8023804:	f105 000c 	add.w	r0, r5, #12
 8023808:	f000 f946 	bl	8023a98 <core_set_error>
 802380c:	4620      	mov	r0, r4
 802380e:	b005      	add	sp, #20
 8023810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023814:	9d03      	ldr	r5, [sp, #12]
 8023816:	2400      	movs	r4, #0
 8023818:	2218      	movs	r2, #24
 802381a:	2112      	movs	r1, #18
 802381c:	f105 000c 	add.w	r0, r5, #12
 8023820:	f000 f93a 	bl	8023a98 <core_set_error>
 8023824:	4620      	mov	r0, r4
 8023826:	b005      	add	sp, #20
 8023828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802382c:	9d02      	ldr	r5, [sp, #8]
 802382e:	2218      	movs	r2, #24
 8023830:	2113      	movs	r1, #19
 8023832:	f105 000c 	add.w	r0, r5, #12
 8023836:	2400      	movs	r4, #0
 8023838:	f000 f92e 	bl	8023a98 <core_set_error>
 802383c:	e7cf      	b.n	80237de <ai_platform_network_process+0x282>
 802383e:	bf00      	nop
 8023840:	a1c00100 	.word	0xa1c00100
 8023844:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8023848:	429f      	cmp	r7, r3
 802384a:	f4ff af3e 	bcc.w	80236ca <ai_platform_network_process+0x16e>
 802384e:	9d02      	ldr	r5, [sp, #8]
 8023850:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8023854:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8023856:	832b      	strh	r3, [r5, #24]
 8023858:	2a00      	cmp	r2, #0
 802385a:	f040 808b 	bne.w	8023974 <ai_platform_network_process+0x418>
 802385e:	4616      	mov	r6, r2
 8023860:	4617      	mov	r7, r2
 8023862:	8b6c      	ldrh	r4, [r5, #26]
 8023864:	429c      	cmp	r4, r3
 8023866:	d2ba      	bcs.n	80237de <ai_platform_network_process+0x282>
 8023868:	46ab      	mov	fp, r5
 802386a:	2e00      	cmp	r6, #0
 802386c:	d030      	beq.n	80238d0 <ai_platform_network_process+0x374>
 802386e:	f04f 0800 	mov.w	r8, #0
 8023872:	e014      	b.n	802389e <ai_platform_network_process+0x342>
 8023874:	6882      	ldr	r2, [r0, #8]
 8023876:	68c5      	ldr	r5, [r0, #12]
 8023878:	6863      	ldr	r3, [r4, #4]
 802387a:	1b52      	subs	r2, r2, r5
 802387c:	4413      	add	r3, r2
 802387e:	6083      	str	r3, [r0, #8]
 8023880:	698b      	ldr	r3, [r1, #24]
 8023882:	6862      	ldr	r2, [r4, #4]
 8023884:	60da      	str	r2, [r3, #12]
 8023886:	f859 200a 	ldr.w	r2, [r9, sl]
 802388a:	f108 0801 	add.w	r8, r8, #1
 802388e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023892:	440b      	add	r3, r1
 8023894:	4293      	cmp	r3, r2
 8023896:	d301      	bcc.n	802389c <ai_platform_network_process+0x340>
 8023898:	68e3      	ldr	r3, [r4, #12]
 802389a:	1ad3      	subs	r3, r2, r3
 802389c:	6063      	str	r3, [r4, #4]
 802389e:	8833      	ldrh	r3, [r6, #0]
 80238a0:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80238a4:	4543      	cmp	r3, r8
 80238a6:	d913      	bls.n	80238d0 <ai_platform_network_process+0x374>
 80238a8:	6873      	ldr	r3, [r6, #4]
 80238aa:	b18b      	cbz	r3, 80238d0 <ai_platform_network_process+0x374>
 80238ac:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80238b0:	b171      	cbz	r1, 80238d0 <ai_platform_network_process+0x374>
 80238b2:	6988      	ldr	r0, [r1, #24]
 80238b4:	68b2      	ldr	r2, [r6, #8]
 80238b6:	6803      	ldr	r3, [r0, #0]
 80238b8:	f8d2 9000 	ldr.w	r9, [r2]
 80238bc:	009d      	lsls	r5, r3, #2
 80238be:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80238c2:	d5d7      	bpl.n	8023874 <ai_platform_network_process+0x318>
 80238c4:	6881      	ldr	r1, [r0, #8]
 80238c6:	68a2      	ldr	r2, [r4, #8]
 80238c8:	6860      	ldr	r0, [r4, #4]
 80238ca:	f006 fee7 	bl	802a69c <st_int8_copy>
 80238ce:	e7da      	b.n	8023886 <ai_platform_network_process+0x32a>
 80238d0:	4658      	mov	r0, fp
 80238d2:	f000 fa2b 	bl	8023d2c <ai_layers_forward_all>
 80238d6:	2f00      	cmp	r7, #0
 80238d8:	d03d      	beq.n	8023956 <ai_platform_network_process+0x3fa>
 80238da:	2400      	movs	r4, #0
 80238dc:	e016      	b.n	802390c <ai_platform_network_process+0x3b0>
 80238de:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80238e2:	f859 100a 	ldr.w	r1, [r9, sl]
 80238e6:	4413      	add	r3, r2
 80238e8:	428b      	cmp	r3, r1
 80238ea:	d302      	bcc.n	80238f2 <ai_platform_network_process+0x396>
 80238ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80238f0:	1acb      	subs	r3, r1, r3
 80238f2:	f8c8 3004 	str.w	r3, [r8, #4]
 80238f6:	6981      	ldr	r1, [r0, #24]
 80238f8:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80238fc:	1b52      	subs	r2, r2, r5
 80238fe:	4413      	add	r3, r2
 8023900:	608b      	str	r3, [r1, #8]
 8023902:	6983      	ldr	r3, [r0, #24]
 8023904:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8023908:	60da      	str	r2, [r3, #12]
 802390a:	3401      	adds	r4, #1
 802390c:	883b      	ldrh	r3, [r7, #0]
 802390e:	42a3      	cmp	r3, r4
 8023910:	d921      	bls.n	8023956 <ai_platform_network_process+0x3fa>
 8023912:	687b      	ldr	r3, [r7, #4]
 8023914:	b1fb      	cbz	r3, 8023956 <ai_platform_network_process+0x3fa>
 8023916:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802391a:	b1e0      	cbz	r0, 8023956 <ai_platform_network_process+0x3fa>
 802391c:	68ba      	ldr	r2, [r7, #8]
 802391e:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8023922:	6983      	ldr	r3, [r0, #24]
 8023924:	f8d2 9000 	ldr.w	r9, [r2]
 8023928:	681a      	ldr	r2, [r3, #0]
 802392a:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 802392e:	0092      	lsls	r2, r2, #2
 8023930:	d5d5      	bpl.n	80238de <ai_platform_network_process+0x382>
 8023932:	6898      	ldr	r0, [r3, #8]
 8023934:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8023938:	f006 feb0 	bl	802a69c <st_int8_copy>
 802393c:	f859 200a 	ldr.w	r2, [r9, sl]
 8023940:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8023944:	440b      	add	r3, r1
 8023946:	4293      	cmp	r3, r2
 8023948:	d302      	bcc.n	8023950 <ai_platform_network_process+0x3f4>
 802394a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802394e:	1ad3      	subs	r3, r2, r3
 8023950:	f8c8 3004 	str.w	r3, [r8, #4]
 8023954:	e7d9      	b.n	802390a <ai_platform_network_process+0x3ae>
 8023956:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 802395a:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 802395e:	3401      	adds	r4, #1
 8023960:	b2a4      	uxth	r4, r4
 8023962:	42a3      	cmp	r3, r4
 8023964:	f8ab 401a 	strh.w	r4, [fp, #26]
 8023968:	f63f af7f 	bhi.w	802386a <ai_platform_network_process+0x30e>
 802396c:	4620      	mov	r0, r4
 802396e:	b005      	add	sp, #20
 8023970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023974:	2a01      	cmp	r2, #1
 8023976:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8023978:	d033      	beq.n	80239e2 <ai_platform_network_process+0x486>
 802397a:	f106 070c 	add.w	r7, r6, #12
 802397e:	e770      	b.n	8023862 <ai_platform_network_process+0x306>
 8023980:	9d03      	ldr	r5, [sp, #12]
 8023982:	2219      	movs	r2, #25
 8023984:	2112      	movs	r1, #18
 8023986:	2400      	movs	r4, #0
 8023988:	f105 000c 	add.w	r0, r5, #12
 802398c:	f000 f884 	bl	8023a98 <core_set_error>
 8023990:	e725      	b.n	80237de <ai_platform_network_process+0x282>
 8023992:	9d03      	ldr	r5, [sp, #12]
 8023994:	4604      	mov	r4, r0
 8023996:	2221      	movs	r2, #33	@ 0x21
 8023998:	2112      	movs	r1, #18
 802399a:	f105 000c 	add.w	r0, r5, #12
 802399e:	f000 f87b 	bl	8023a98 <core_set_error>
 80239a2:	e71c      	b.n	80237de <ai_platform_network_process+0x282>
 80239a4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80239a8:	832b      	strh	r3, [r5, #24]
 80239aa:	e755      	b.n	8023858 <ai_platform_network_process+0x2fc>
 80239ac:	9d02      	ldr	r5, [sp, #8]
 80239ae:	2219      	movs	r2, #25
 80239b0:	2113      	movs	r1, #19
 80239b2:	2400      	movs	r4, #0
 80239b4:	f105 000c 	add.w	r0, r5, #12
 80239b8:	f000 f86e 	bl	8023a98 <core_set_error>
 80239bc:	e70f      	b.n	80237de <ai_platform_network_process+0x282>
 80239be:	9d02      	ldr	r5, [sp, #8]
 80239c0:	4604      	mov	r4, r0
 80239c2:	2221      	movs	r2, #33	@ 0x21
 80239c4:	2113      	movs	r1, #19
 80239c6:	f105 000c 	add.w	r0, r5, #12
 80239ca:	f000 f865 	bl	8023a98 <core_set_error>
 80239ce:	e706      	b.n	80237de <ai_platform_network_process+0x282>
 80239d0:	9d02      	ldr	r5, [sp, #8]
 80239d2:	2217      	movs	r2, #23
 80239d4:	2113      	movs	r1, #19
 80239d6:	2400      	movs	r4, #0
 80239d8:	f105 000c 	add.w	r0, r5, #12
 80239dc:	f000 f85c 	bl	8023a98 <core_set_error>
 80239e0:	e6fd      	b.n	80237de <ai_platform_network_process+0x282>
 80239e2:	2700      	movs	r7, #0
 80239e4:	e73d      	b.n	8023862 <ai_platform_network_process+0x306>
 80239e6:	bf00      	nop

080239e8 <ai_platform_observer_register_s>:
 80239e8:	b538      	push	{r3, r4, r5, lr}
 80239ea:	4b18      	ldr	r3, [pc, #96]	@ (8023a4c <ai_platform_observer_register_s+0x64>)
 80239ec:	6802      	ldr	r2, [r0, #0]
 80239ee:	4393      	bics	r3, r2
 80239f0:	d12a      	bne.n	8023a48 <ai_platform_observer_register_s+0x60>
 80239f2:	4684      	mov	ip, r0
 80239f4:	460d      	mov	r5, r1
 80239f6:	b301      	cbz	r1, 8023a3a <ai_platform_observer_register_s+0x52>
 80239f8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80239fa:	b9bb      	cbnz	r3, 8023a2c <ai_platform_observer_register_s+0x44>
 80239fc:	81cb      	strh	r3, [r1, #14]
 80239fe:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8023a00:	e006      	b.n	8023a10 <ai_platform_observer_register_s+0x28>
 8023a02:	b29b      	uxth	r3, r3
 8023a04:	81eb      	strh	r3, [r5, #14]
 8023a06:	6914      	ldr	r4, [r2, #16]
 8023a08:	4294      	cmp	r4, r2
 8023a0a:	4622      	mov	r2, r4
 8023a0c:	d003      	beq.n	8023a16 <ai_platform_observer_register_s+0x2e>
 8023a0e:	b114      	cbz	r4, 8023a16 <ai_platform_observer_register_s+0x2e>
 8023a10:	3301      	adds	r3, #1
 8023a12:	2a00      	cmp	r2, #0
 8023a14:	d1f5      	bne.n	8023a02 <ai_platform_observer_register_s+0x1a>
 8023a16:	7a2b      	ldrb	r3, [r5, #8]
 8023a18:	2100      	movs	r1, #0
 8023a1a:	4a0d      	ldr	r2, [pc, #52]	@ (8023a50 <ai_platform_observer_register_s+0x68>)
 8023a1c:	2001      	movs	r0, #1
 8023a1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8023a22:	81a9      	strh	r1, [r5, #12]
 8023a24:	60ab      	str	r3, [r5, #8]
 8023a26:	e9cc 2510 	strd	r2, r5, [ip, #64]	@ 0x40
 8023a2a:	bd38      	pop	{r3, r4, r5, pc}
 8023a2c:	2240      	movs	r2, #64	@ 0x40
 8023a2e:	2111      	movs	r1, #17
 8023a30:	300c      	adds	r0, #12
 8023a32:	f000 f831 	bl	8023a98 <core_set_error>
 8023a36:	2000      	movs	r0, #0
 8023a38:	bd38      	pop	{r3, r4, r5, pc}
 8023a3a:	2211      	movs	r2, #17
 8023a3c:	2110      	movs	r1, #16
 8023a3e:	300c      	adds	r0, #12
 8023a40:	f000 f82a 	bl	8023a98 <core_set_error>
 8023a44:	4628      	mov	r0, r5
 8023a46:	bd38      	pop	{r3, r4, r5, pc}
 8023a48:	2000      	movs	r0, #0
 8023a4a:	bd38      	pop	{r3, r4, r5, pc}
 8023a4c:	a1c00100 	.word	0xa1c00100
 8023a50:	08022c25 	.word	0x08022c25

08023a54 <ai_platform_observer_unregister_s>:
 8023a54:	4b0b      	ldr	r3, [pc, #44]	@ (8023a84 <ai_platform_observer_unregister_s+0x30>)
 8023a56:	b510      	push	{r4, lr}
 8023a58:	6802      	ldr	r2, [r0, #0]
 8023a5a:	4393      	bics	r3, r2
 8023a5c:	d10e      	bne.n	8023a7c <ai_platform_observer_unregister_s+0x28>
 8023a5e:	460c      	mov	r4, r1
 8023a60:	b129      	cbz	r1, 8023a6e <ai_platform_observer_unregister_s+0x1a>
 8023a62:	2300      	movs	r3, #0
 8023a64:	2401      	movs	r4, #1
 8023a66:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
 8023a6a:	4620      	mov	r0, r4
 8023a6c:	bd10      	pop	{r4, pc}
 8023a6e:	2211      	movs	r2, #17
 8023a70:	2110      	movs	r1, #16
 8023a72:	300c      	adds	r0, #12
 8023a74:	f000 f810 	bl	8023a98 <core_set_error>
 8023a78:	4620      	mov	r0, r4
 8023a7a:	bd10      	pop	{r4, pc}
 8023a7c:	2400      	movs	r4, #0
 8023a7e:	4620      	mov	r0, r4
 8023a80:	bd10      	pop	{r4, pc}
 8023a82:	bf00      	nop
 8023a84:	a1c00100 	.word	0xa1c00100

08023a88 <core_init>:
 8023a88:	2001      	movs	r0, #1
 8023a8a:	4770      	bx	lr

08023a8c <core_get_error>:
 8023a8c:	4603      	mov	r3, r0
 8023a8e:	2200      	movs	r2, #0
 8023a90:	6800      	ldr	r0, [r0, #0]
 8023a92:	601a      	str	r2, [r3, #0]
 8023a94:	4770      	bx	lr
 8023a96:	bf00      	nop

08023a98 <core_set_error>:
 8023a98:	4603      	mov	r3, r0
 8023a9a:	7800      	ldrb	r0, [r0, #0]
 8023a9c:	b108      	cbz	r0, 8023aa2 <core_set_error+0xa>
 8023a9e:	2000      	movs	r0, #0
 8023aa0:	4770      	bx	lr
 8023aa2:	7019      	strb	r1, [r3, #0]
 8023aa4:	2001      	movs	r0, #1
 8023aa6:	6819      	ldr	r1, [r3, #0]
 8023aa8:	f362 211f 	bfi	r1, r2, #8, #24
 8023aac:	6019      	str	r1, [r3, #0]
 8023aae:	4770      	bx	lr

08023ab0 <node_convert>:
 8023ab0:	6982      	ldr	r2, [r0, #24]
 8023ab2:	8813      	ldrh	r3, [r2, #0]
 8023ab4:	2b00      	cmp	r3, #0
 8023ab6:	d038      	beq.n	8023b2a <node_convert+0x7a>
 8023ab8:	6852      	ldr	r2, [r2, #4]
 8023aba:	6850      	ldr	r0, [r2, #4]
 8023abc:	b100      	cbz	r0, 8023ac0 <node_convert+0x10>
 8023abe:	6800      	ldr	r0, [r0, #0]
 8023ac0:	2b01      	cmp	r3, #1
 8023ac2:	f000 80e6 	beq.w	8023c92 <node_convert+0x1e2>
 8023ac6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023ac8:	6915      	ldr	r5, [r2, #16]
 8023aca:	b083      	sub	sp, #12
 8023acc:	b105      	cbz	r5, 8023ad0 <node_convert+0x20>
 8023ace:	682d      	ldr	r5, [r5, #0]
 8023ad0:	6883      	ldr	r3, [r0, #8]
 8023ad2:	0a1b      	lsrs	r3, r3, #8
 8023ad4:	f000 809b 	beq.w	8023c0e <node_convert+0x15e>
 8023ad8:	68c1      	ldr	r1, [r0, #12]
 8023ada:	2401      	movs	r4, #1
 8023adc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8023ae0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8023ae4:	4299      	cmp	r1, r3
 8023ae6:	fb02 f404 	mul.w	r4, r2, r4
 8023aea:	d1f9      	bne.n	8023ae0 <node_convert+0x30>
 8023aec:	6982      	ldr	r2, [r0, #24]
 8023aee:	69ae      	ldr	r6, [r5, #24]
 8023af0:	6813      	ldr	r3, [r2, #0]
 8023af2:	f3c3 4143 	ubfx	r1, r3, #17, #4
 8023af6:	2901      	cmp	r1, #1
 8023af8:	d019      	beq.n	8023b2e <node_convert+0x7e>
 8023afa:	6801      	ldr	r1, [r0, #0]
 8023afc:	68b5      	ldr	r5, [r6, #8]
 8023afe:	2900      	cmp	r1, #0
 8023b00:	d032      	beq.n	8023b68 <node_convert+0xb8>
 8023b02:	684e      	ldr	r6, [r1, #4]
 8023b04:	6890      	ldr	r0, [r2, #8]
 8023b06:	f3c3 52c0 	ubfx	r2, r3, #23, #1
 8023b0a:	2e00      	cmp	r6, #0
 8023b0c:	d06b      	beq.n	8023be6 <node_convert+0x136>
 8023b0e:	884b      	ldrh	r3, [r1, #2]
 8023b10:	2b00      	cmp	r3, #0
 8023b12:	d151      	bne.n	8023bb8 <node_convert+0x108>
 8023b14:	2a00      	cmp	r2, #0
 8023b16:	d068      	beq.n	8023bea <node_convert+0x13a>
 8023b18:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8023b1c:	4622      	mov	r2, r4
 8023b1e:	4629      	mov	r1, r5
 8023b20:	b003      	add	sp, #12
 8023b22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8023b26:	f002 b865 	b.w	8025bf4 <forward_lite_node_convert_integer_is8of32>
 8023b2a:	685b      	ldr	r3, [r3, #4]
 8023b2c:	deff      	udf	#255	@ 0xff
 8023b2e:	682d      	ldr	r5, [r5, #0]
 8023b30:	6890      	ldr	r0, [r2, #8]
 8023b32:	2d00      	cmp	r5, #0
 8023b34:	d06d      	beq.n	8023c12 <node_convert+0x162>
 8023b36:	6833      	ldr	r3, [r6, #0]
 8023b38:	686a      	ldr	r2, [r5, #4]
 8023b3a:	68b1      	ldr	r1, [r6, #8]
 8023b3c:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8023b40:	2a00      	cmp	r2, #0
 8023b42:	d041      	beq.n	8023bc8 <node_convert+0x118>
 8023b44:	886d      	ldrh	r5, [r5, #2]
 8023b46:	2d00      	cmp	r5, #0
 8023b48:	d043      	beq.n	8023bd2 <node_convert+0x122>
 8023b4a:	6815      	ldr	r5, [r2, #0]
 8023b4c:	ed95 0a00 	vldr	s0, [r5]
 8023b50:	2b00      	cmp	r3, #0
 8023b52:	f000 8097 	beq.w	8023c84 <node_convert+0x1d4>
 8023b56:	6853      	ldr	r3, [r2, #4]
 8023b58:	f993 3000 	ldrsb.w	r3, [r3]
 8023b5c:	4622      	mov	r2, r4
 8023b5e:	b003      	add	sp, #12
 8023b60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8023b64:	f002 b84a 	b.w	8025bfc <forward_lite_node_convert_integer_if32os8>
 8023b68:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 8023b6c:	f003 067f 	and.w	r6, r3, #127	@ 0x7f
 8023b70:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8023b74:	6890      	ldr	r0, [r2, #8]
 8023b76:	1b8e      	subs	r6, r1, r6
 8023b78:	2908      	cmp	r1, #8
 8023b7a:	4622      	mov	r2, r4
 8023b7c:	4629      	mov	r1, r5
 8023b7e:	f106 0640 	add.w	r6, r6, #64	@ 0x40
 8023b82:	eba6 0603 	sub.w	r6, r6, r3
 8023b86:	d06f      	beq.n	8023c68 <node_convert+0x1b8>
 8023b88:	f004 f9f8 	bl	8027f7c <st_int16_to_f32>
 8023b8c:	b196      	cbz	r6, 8023bb4 <node_convert+0x104>
 8023b8e:	ee07 6a90 	vmov	s15, r6
 8023b92:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8023b96:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8023b9a:	f013 fbad 	bl	80372f8 <powf>
 8023b9e:	b14c      	cbz	r4, 8023bb4 <node_convert+0x104>
 8023ba0:	2300      	movs	r3, #0
 8023ba2:	ecf5 7a01 	vldmia	r5!, {s15}
 8023ba6:	3301      	adds	r3, #1
 8023ba8:	ee67 7a80 	vmul.f32	s15, s15, s0
 8023bac:	42a3      	cmp	r3, r4
 8023bae:	ed45 7a01 	vstr	s15, [r5, #-4]
 8023bb2:	d1f6      	bne.n	8023ba2 <node_convert+0xf2>
 8023bb4:	b003      	add	sp, #12
 8023bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023bb8:	6833      	ldr	r3, [r6, #0]
 8023bba:	ed93 0a00 	vldr	s0, [r3]
 8023bbe:	6873      	ldr	r3, [r6, #4]
 8023bc0:	b1ea      	cbz	r2, 8023bfe <node_convert+0x14e>
 8023bc2:	f993 3000 	ldrsb.w	r3, [r3]
 8023bc6:	e7a9      	b.n	8023b1c <node_convert+0x6c>
 8023bc8:	b12b      	cbz	r3, 8023bd6 <node_convert+0x126>
 8023bca:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8023bce:	4613      	mov	r3, r2
 8023bd0:	e7c4      	b.n	8023b5c <node_convert+0xac>
 8023bd2:	2b00      	cmp	r3, #0
 8023bd4:	d159      	bne.n	8023c8a <node_convert+0x1da>
 8023bd6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8023bda:	4622      	mov	r2, r4
 8023bdc:	b003      	add	sp, #12
 8023bde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8023be2:	f002 b80d 	b.w	8025c00 <forward_lite_node_convert_integer_if32ou8>
 8023be6:	2a00      	cmp	r2, #0
 8023be8:	d141      	bne.n	8023c6e <node_convert+0x1be>
 8023bea:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8023bee:	2300      	movs	r3, #0
 8023bf0:	4622      	mov	r2, r4
 8023bf2:	4629      	mov	r1, r5
 8023bf4:	b003      	add	sp, #12
 8023bf6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8023bfa:	f001 bffd 	b.w	8025bf8 <forward_lite_node_convert_integer_iu8of32>
 8023bfe:	781b      	ldrb	r3, [r3, #0]
 8023c00:	4622      	mov	r2, r4
 8023c02:	4629      	mov	r1, r5
 8023c04:	b003      	add	sp, #12
 8023c06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8023c0a:	f001 bff5 	b.w	8025bf8 <forward_lite_node_convert_integer_iu8of32>
 8023c0e:	2401      	movs	r4, #1
 8023c10:	e76c      	b.n	8023aec <node_convert+0x3c>
 8023c12:	6832      	ldr	r2, [r6, #0]
 8023c14:	f3c2 17c6 	ubfx	r7, r2, #7, #7
 8023c18:	f002 037f 	and.w	r3, r2, #127	@ 0x7f
 8023c1c:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8023c20:	1afb      	subs	r3, r7, r3
 8023c22:	3340      	adds	r3, #64	@ 0x40
 8023c24:	1a9b      	subs	r3, r3, r2
 8023c26:	d016      	beq.n	8023c56 <node_convert+0x1a6>
 8023c28:	425b      	negs	r3, r3
 8023c2a:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8023c2e:	9001      	str	r0, [sp, #4]
 8023c30:	ee00 3a90 	vmov	s1, r3
 8023c34:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8023c38:	f013 fb5e 	bl	80372f8 <powf>
 8023c3c:	9801      	ldr	r0, [sp, #4]
 8023c3e:	b154      	cbz	r4, 8023c56 <node_convert+0x1a6>
 8023c40:	462b      	mov	r3, r5
 8023c42:	4602      	mov	r2, r0
 8023c44:	ecf2 7a01 	vldmia	r2!, {s15}
 8023c48:	3301      	adds	r3, #1
 8023c4a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8023c4e:	42a3      	cmp	r3, r4
 8023c50:	ed42 7a01 	vstr	s15, [r2, #-4]
 8023c54:	d1f6      	bne.n	8023c44 <node_convert+0x194>
 8023c56:	2f08      	cmp	r7, #8
 8023c58:	d00d      	beq.n	8023c76 <node_convert+0x1c6>
 8023c5a:	4622      	mov	r2, r4
 8023c5c:	68b1      	ldr	r1, [r6, #8]
 8023c5e:	b003      	add	sp, #12
 8023c60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8023c64:	f004 b808 	b.w	8027c78 <st_f32_to_int16>
 8023c68:	f007 fff2 	bl	802bc50 <st_int8_to_f32>
 8023c6c:	e78e      	b.n	8023b8c <node_convert+0xdc>
 8023c6e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8023c72:	4633      	mov	r3, r6
 8023c74:	e752      	b.n	8023b1c <node_convert+0x6c>
 8023c76:	4622      	mov	r2, r4
 8023c78:	68b1      	ldr	r1, [r6, #8]
 8023c7a:	b003      	add	sp, #12
 8023c7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8023c80:	f004 b8b0 	b.w	8027de4 <st_f32_to_int8>
 8023c84:	6853      	ldr	r3, [r2, #4]
 8023c86:	781b      	ldrb	r3, [r3, #0]
 8023c88:	e7a7      	b.n	8023bda <node_convert+0x12a>
 8023c8a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8023c8e:	462b      	mov	r3, r5
 8023c90:	e764      	b.n	8023b5c <node_convert+0xac>
 8023c92:	2300      	movs	r3, #0
 8023c94:	685b      	ldr	r3, [r3, #4]
 8023c96:	deff      	udf	#255	@ 0xff

08023c98 <ai_check_custom_types>:
 8023c98:	b082      	sub	sp, #8
 8023c9a:	4b12      	ldr	r3, [pc, #72]	@ (8023ce4 <ai_check_custom_types+0x4c>)
 8023c9c:	9301      	str	r3, [sp, #4]
 8023c9e:	b118      	cbz	r0, 8023ca8 <ai_check_custom_types+0x10>
 8023ca0:	7803      	ldrb	r3, [r0, #0]
 8023ca2:	2b03      	cmp	r3, #3
 8023ca4:	d002      	beq.n	8023cac <ai_check_custom_types+0x14>
 8023ca6:	2000      	movs	r0, #0
 8023ca8:	b002      	add	sp, #8
 8023caa:	4770      	bx	lr
 8023cac:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8023cb0:	4293      	cmp	r3, r2
 8023cb2:	d004      	beq.n	8023cbe <ai_check_custom_types+0x26>
 8023cb4:	2001      	movs	r0, #1
 8023cb6:	f080 0001 	eor.w	r0, r0, #1
 8023cba:	b002      	add	sp, #8
 8023cbc:	4770      	bx	lr
 8023cbe:	7842      	ldrb	r2, [r0, #1]
 8023cc0:	3001      	adds	r0, #1
 8023cc2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8023cc6:	429a      	cmp	r2, r3
 8023cc8:	d1f4      	bne.n	8023cb4 <ai_check_custom_types+0x1c>
 8023cca:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8023cce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8023cd2:	429a      	cmp	r2, r3
 8023cd4:	d1ee      	bne.n	8023cb4 <ai_check_custom_types+0x1c>
 8023cd6:	7842      	ldrb	r2, [r0, #1]
 8023cd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8023cdc:	429a      	cmp	r2, r3
 8023cde:	d1e9      	bne.n	8023cb4 <ai_check_custom_types+0x1c>
 8023ce0:	2000      	movs	r0, #0
 8023ce2:	e7e8      	b.n	8023cb6 <ai_check_custom_types+0x1e>
 8023ce4:	84048403 	.word	0x84048403

08023ce8 <ai_layers_init_all>:
 8023ce8:	2100      	movs	r1, #0
 8023cea:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8023cec:	b13b      	cbz	r3, 8023cfe <ai_layers_init_all+0x16>
 8023cee:	691a      	ldr	r2, [r3, #16]
 8023cf0:	3101      	adds	r1, #1
 8023cf2:	60d8      	str	r0, [r3, #12]
 8023cf4:	429a      	cmp	r2, r3
 8023cf6:	4613      	mov	r3, r2
 8023cf8:	d001      	beq.n	8023cfe <ai_layers_init_all+0x16>
 8023cfa:	2a00      	cmp	r2, #0
 8023cfc:	d1f6      	bne.n	8023cec <ai_layers_init_all+0x4>
 8023cfe:	4608      	mov	r0, r1
 8023d00:	4770      	bx	lr
 8023d02:	bf00      	nop

08023d04 <ai_layers_post_init_all>:
 8023d04:	b538      	push	{r3, r4, r5, lr}
 8023d06:	2500      	movs	r5, #0
 8023d08:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8023d0a:	b16c      	cbz	r4, 8023d28 <ai_layers_post_init_all+0x24>
 8023d0c:	6863      	ldr	r3, [r4, #4]
 8023d0e:	07db      	lsls	r3, r3, #31
 8023d10:	d504      	bpl.n	8023d1c <ai_layers_post_init_all+0x18>
 8023d12:	6a23      	ldr	r3, [r4, #32]
 8023d14:	4620      	mov	r0, r4
 8023d16:	b10b      	cbz	r3, 8023d1c <ai_layers_post_init_all+0x18>
 8023d18:	3501      	adds	r5, #1
 8023d1a:	4798      	blx	r3
 8023d1c:	6923      	ldr	r3, [r4, #16]
 8023d1e:	42a3      	cmp	r3, r4
 8023d20:	461c      	mov	r4, r3
 8023d22:	d001      	beq.n	8023d28 <ai_layers_post_init_all+0x24>
 8023d24:	2b00      	cmp	r3, #0
 8023d26:	d1f0      	bne.n	8023d0a <ai_layers_post_init_all+0x6>
 8023d28:	4628      	mov	r0, r5
 8023d2a:	bd38      	pop	{r3, r4, r5, pc}

08023d2c <ai_layers_forward_all>:
 8023d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023d30:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8023d34:	4604      	mov	r4, r0
 8023d36:	f1b8 0f00 	cmp.w	r8, #0
 8023d3a:	d02a      	beq.n	8023d92 <ai_layers_forward_all+0x66>
 8023d3c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8023d3e:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8023d40:	b319      	cbz	r1, 8023d8a <ai_layers_forward_all+0x5e>
 8023d42:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8023d44:	2001      	movs	r0, #1
 8023d46:	47c0      	blx	r8
 8023d48:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8023d4a:	b1f6      	cbz	r6, 8023d8a <ai_layers_forward_all+0x5e>
 8023d4c:	2700      	movs	r7, #0
 8023d4e:	4631      	mov	r1, r6
 8023d50:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8023d52:	2002      	movs	r0, #2
 8023d54:	47c0      	blx	r8
 8023d56:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8023d58:	4628      	mov	r0, r5
 8023d5a:	696b      	ldr	r3, [r5, #20]
 8023d5c:	4798      	blx	r3
 8023d5e:	692e      	ldr	r6, [r5, #16]
 8023d60:	2003      	movs	r0, #3
 8023d62:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8023d64:	42b5      	cmp	r5, r6
 8023d66:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8023d68:	d007      	beq.n	8023d7a <ai_layers_forward_all+0x4e>
 8023d6a:	47c0      	blx	r8
 8023d6c:	3701      	adds	r7, #1
 8023d6e:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8023d70:	2e00      	cmp	r6, #0
 8023d72:	d1ec      	bne.n	8023d4e <ai_layers_forward_all+0x22>
 8023d74:	4638      	mov	r0, r7
 8023d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023d7a:	2003      	movs	r0, #3
 8023d7c:	3701      	adds	r7, #1
 8023d7e:	47c0      	blx	r8
 8023d80:	2300      	movs	r3, #0
 8023d82:	4638      	mov	r0, r7
 8023d84:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8023d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023d8a:	2700      	movs	r7, #0
 8023d8c:	4638      	mov	r0, r7
 8023d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023d92:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8023d94:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8023d96:	2d00      	cmp	r5, #0
 8023d98:	d0f7      	beq.n	8023d8a <ai_layers_forward_all+0x5e>
 8023d9a:	4647      	mov	r7, r8
 8023d9c:	696b      	ldr	r3, [r5, #20]
 8023d9e:	4628      	mov	r0, r5
 8023da0:	4798      	blx	r3
 8023da2:	462b      	mov	r3, r5
 8023da4:	692d      	ldr	r5, [r5, #16]
 8023da6:	429d      	cmp	r5, r3
 8023da8:	d004      	beq.n	8023db4 <ai_layers_forward_all+0x88>
 8023daa:	3701      	adds	r7, #1
 8023dac:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8023dae:	2d00      	cmp	r5, #0
 8023db0:	d1f4      	bne.n	8023d9c <ai_layers_forward_all+0x70>
 8023db2:	e7df      	b.n	8023d74 <ai_layers_forward_all+0x48>
 8023db4:	2300      	movs	r3, #0
 8023db6:	3701      	adds	r7, #1
 8023db8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8023dba:	e7db      	b.n	8023d74 <ai_layers_forward_all+0x48>

08023dbc <ai_layers_destroy_all>:
 8023dbc:	b538      	push	{r3, r4, r5, lr}
 8023dbe:	2500      	movs	r5, #0
 8023dc0:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8023dc2:	b16c      	cbz	r4, 8023de0 <ai_layers_destroy_all+0x24>
 8023dc4:	6863      	ldr	r3, [r4, #4]
 8023dc6:	075b      	lsls	r3, r3, #29
 8023dc8:	d504      	bpl.n	8023dd4 <ai_layers_destroy_all+0x18>
 8023dca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8023dcc:	4620      	mov	r0, r4
 8023dce:	b10b      	cbz	r3, 8023dd4 <ai_layers_destroy_all+0x18>
 8023dd0:	3501      	adds	r5, #1
 8023dd2:	4798      	blx	r3
 8023dd4:	6923      	ldr	r3, [r4, #16]
 8023dd6:	42a3      	cmp	r3, r4
 8023dd8:	461c      	mov	r4, r3
 8023dda:	d001      	beq.n	8023de0 <ai_layers_destroy_all+0x24>
 8023ddc:	2b00      	cmp	r3, #0
 8023dde:	d1f0      	bne.n	8023dc2 <ai_layers_destroy_all+0x6>
 8023de0:	4628      	mov	r0, r5
 8023de2:	bd38      	pop	{r3, r4, r5, pc}

08023de4 <forward_conv2d_deep_3x3_sssa8_ch>:
 8023de4:	6982      	ldr	r2, [r0, #24]
 8023de6:	8813      	ldrh	r3, [r2, #0]
 8023de8:	2b00      	cmp	r3, #0
 8023dea:	f000 80a6 	beq.w	8023f3a <forward_conv2d_deep_3x3_sssa8_ch+0x156>
 8023dee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023df2:	6854      	ldr	r4, [r2, #4]
 8023df4:	b099      	sub	sp, #100	@ 0x64
 8023df6:	6861      	ldr	r1, [r4, #4]
 8023df8:	b101      	cbz	r1, 8023dfc <forward_conv2d_deep_3x3_sssa8_ch+0x18>
 8023dfa:	6809      	ldr	r1, [r1, #0]
 8023dfc:	2b01      	cmp	r3, #1
 8023dfe:	f000 80b5 	beq.w	8023f6c <forward_conv2d_deep_3x3_sssa8_ch+0x188>
 8023e02:	6922      	ldr	r2, [r4, #16]
 8023e04:	b102      	cbz	r2, 8023e08 <forward_conv2d_deep_3x3_sssa8_ch+0x24>
 8023e06:	6812      	ldr	r2, [r2, #0]
 8023e08:	2b02      	cmp	r3, #2
 8023e0a:	f000 80aa 	beq.w	8023f62 <forward_conv2d_deep_3x3_sssa8_ch+0x17e>
 8023e0e:	69e5      	ldr	r5, [r4, #28]
 8023e10:	2d00      	cmp	r5, #0
 8023e12:	f000 809e 	beq.w	8023f52 <forward_conv2d_deep_3x3_sssa8_ch+0x16e>
 8023e16:	8b26      	ldrh	r6, [r4, #24]
 8023e18:	f8d5 e000 	ldr.w	lr, [r5]
 8023e1c:	2e01      	cmp	r6, #1
 8023e1e:	f240 809a 	bls.w	8023f56 <forward_conv2d_deep_3x3_sssa8_ch+0x172>
 8023e22:	686d      	ldr	r5, [r5, #4]
 8023e24:	2b03      	cmp	r3, #3
 8023e26:	f000 80a4 	beq.w	8023f72 <forward_conv2d_deep_3x3_sssa8_ch+0x18e>
 8023e2a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8023e2c:	2b00      	cmp	r3, #0
 8023e2e:	f000 8094 	beq.w	8023f5a <forward_conv2d_deep_3x3_sssa8_ch+0x176>
 8023e32:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 8023e34:	b104      	cbz	r4, 8023e38 <forward_conv2d_deep_3x3_sssa8_ch+0x54>
 8023e36:	685a      	ldr	r2, [r3, #4]
 8023e38:	681c      	ldr	r4, [r3, #0]
 8023e3a:	69ab      	ldr	r3, [r5, #24]
 8023e3c:	68d6      	ldr	r6, [r2, #12]
 8023e3e:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8023e42:	689b      	ldr	r3, [r3, #8]
 8023e44:	88b7      	ldrh	r7, [r6, #4]
 8023e46:	68cc      	ldr	r4, [r1, #12]
 8023e48:	9316      	str	r3, [sp, #88]	@ 0x58
 8023e4a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8023e4e:	9712      	str	r7, [sp, #72]	@ 0x48
 8023e50:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023e52:	68f7      	ldr	r7, [r6, #12]
 8023e54:	88a3      	ldrh	r3, [r4, #4]
 8023e56:	68b6      	ldr	r6, [r6, #8]
 8023e58:	680d      	ldr	r5, [r1, #0]
 8023e5a:	9614      	str	r6, [sp, #80]	@ 0x50
 8023e5c:	9713      	str	r7, [sp, #76]	@ 0x4c
 8023e5e:	f8de 6000 	ldr.w	r6, [lr]
 8023e62:	e9d4 4b02 	ldrd	r4, fp, [r4, #8]
 8023e66:	9415      	str	r4, [sp, #84]	@ 0x54
 8023e68:	6814      	ldr	r4, [r2, #0]
 8023e6a:	2d00      	cmp	r5, #0
 8023e6c:	d06a      	beq.n	8023f44 <forward_conv2d_deep_3x3_sssa8_ch+0x160>
 8023e6e:	686f      	ldr	r7, [r5, #4]
 8023e70:	2f00      	cmp	r7, #0
 8023e72:	d067      	beq.n	8023f44 <forward_conv2d_deep_3x3_sssa8_ch+0x160>
 8023e74:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 8023e78:	f1b8 0f00 	cmp.w	r8, #0
 8023e7c:	d062      	beq.n	8023f44 <forward_conv2d_deep_3x3_sssa8_ch+0x160>
 8023e7e:	683f      	ldr	r7, [r7, #0]
 8023e80:	ed97 0a00 	vldr	s0, [r7]
 8023e84:	2c00      	cmp	r4, #0
 8023e86:	d05a      	beq.n	8023f3e <forward_conv2d_deep_3x3_sssa8_ch+0x15a>
 8023e88:	6867      	ldr	r7, [r4, #4]
 8023e8a:	2f00      	cmp	r7, #0
 8023e8c:	d057      	beq.n	8023f3e <forward_conv2d_deep_3x3_sssa8_ch+0x15a>
 8023e8e:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 8023e92:	f1b8 0f00 	cmp.w	r8, #0
 8023e96:	d052      	beq.n	8023f3e <forward_conv2d_deep_3x3_sssa8_ch+0x15a>
 8023e98:	683f      	ldr	r7, [r7, #0]
 8023e9a:	edd7 0a00 	vldr	s1, [r7]
 8023e9e:	698f      	ldr	r7, [r1, #24]
 8023ea0:	6992      	ldr	r2, [r2, #24]
 8023ea2:	f8de 1018 	ldr.w	r1, [lr, #24]
 8023ea6:	f890 9041 	ldrb.w	r9, [r0, #65]	@ 0x41
 8023eaa:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8023eae:	68bf      	ldr	r7, [r7, #8]
 8023eb0:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8023eb4:	b116      	cbz	r6, 8023ebc <forward_conv2d_deep_3x3_sssa8_ch+0xd8>
 8023eb6:	6876      	ldr	r6, [r6, #4]
 8023eb8:	b106      	cbz	r6, 8023ebc <forward_conv2d_deep_3x3_sssa8_ch+0xd8>
 8023eba:	6836      	ldr	r6, [r6, #0]
 8023ebc:	b13d      	cbz	r5, 8023ece <forward_conv2d_deep_3x3_sssa8_ch+0xea>
 8023ebe:	6869      	ldr	r1, [r5, #4]
 8023ec0:	2900      	cmp	r1, #0
 8023ec2:	d042      	beq.n	8023f4a <forward_conv2d_deep_3x3_sssa8_ch+0x166>
 8023ec4:	886d      	ldrh	r5, [r5, #2]
 8023ec6:	b115      	cbz	r5, 8023ece <forward_conv2d_deep_3x3_sssa8_ch+0xea>
 8023ec8:	6849      	ldr	r1, [r1, #4]
 8023eca:	f991 5000 	ldrsb.w	r5, [r1]
 8023ece:	b13c      	cbz	r4, 8023ee0 <forward_conv2d_deep_3x3_sssa8_ch+0xfc>
 8023ed0:	6861      	ldr	r1, [r4, #4]
 8023ed2:	2900      	cmp	r1, #0
 8023ed4:	d03b      	beq.n	8023f4e <forward_conv2d_deep_3x3_sssa8_ch+0x16a>
 8023ed6:	8864      	ldrh	r4, [r4, #2]
 8023ed8:	b114      	cbz	r4, 8023ee0 <forward_conv2d_deep_3x3_sssa8_ch+0xfc>
 8023eda:	6849      	ldr	r1, [r1, #4]
 8023edc:	f991 4000 	ldrsb.w	r4, [r1]
 8023ee0:	9311      	str	r3, [sp, #68]	@ 0x44
 8023ee2:	edcd 0a10 	vstr	s1, [sp, #64]	@ 0x40
 8023ee6:	ed8d 0a0f 	vstr	s0, [sp, #60]	@ 0x3c
 8023eea:	e9dc 0100 	ldrd	r0, r1, [ip]
 8023eee:	f00d fcdd 	bl	80318ac <ai_array_get_byte_size>
 8023ef2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8023ef4:	f8bd 204c 	ldrh.w	r2, [sp, #76]	@ 0x4c
 8023ef8:	eddd 0a10 	vldr	s1, [sp, #64]	@ 0x40
 8023efc:	9209      	str	r2, [sp, #36]	@ 0x24
 8023efe:	fa1f f28b 	uxth.w	r2, fp
 8023f02:	ed9d 0a0f 	vldr	s0, [sp, #60]	@ 0x3c
 8023f06:	f8bd 1054 	ldrh.w	r1, [sp, #84]	@ 0x54
 8023f0a:	9503      	str	r5, [sp, #12]
 8023f0c:	e9cd 030b 	strd	r0, r3, [sp, #44]	@ 0x2c
 8023f10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023f12:	4638      	mov	r0, r7
 8023f14:	e9cd 4604 	strd	r4, r6, [sp, #16]
 8023f18:	9302      	str	r3, [sp, #8]
 8023f1a:	f8bd 4050 	ldrh.w	r4, [sp, #80]	@ 0x50
 8023f1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023f20:	9408      	str	r4, [sp, #32]
 8023f22:	2401      	movs	r4, #1
 8023f24:	e9cd 8300 	strd	r8, r3, [sp]
 8023f28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023f2a:	940a      	str	r4, [sp, #40]	@ 0x28
 8023f2c:	e9cd 9a06 	strd	r9, sl, [sp, #24]
 8023f30:	f001 ffea 	bl	8025f08 <forward_lite_conv2d_deep_3x3_sssa8_ch>
 8023f34:	b019      	add	sp, #100	@ 0x64
 8023f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f3a:	685b      	ldr	r3, [r3, #4]
 8023f3c:	deff      	udf	#255	@ 0xff
 8023f3e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8023f42:	e7ac      	b.n	8023e9e <forward_conv2d_deep_3x3_sssa8_ch+0xba>
 8023f44:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8023f48:	e79c      	b.n	8023e84 <forward_conv2d_deep_3x3_sssa8_ch+0xa0>
 8023f4a:	460d      	mov	r5, r1
 8023f4c:	e7bf      	b.n	8023ece <forward_conv2d_deep_3x3_sssa8_ch+0xea>
 8023f4e:	460c      	mov	r4, r1
 8023f50:	e7c6      	b.n	8023ee0 <forward_conv2d_deep_3x3_sssa8_ch+0xfc>
 8023f52:	46ae      	mov	lr, r5
 8023f54:	e766      	b.n	8023e24 <forward_conv2d_deep_3x3_sssa8_ch+0x40>
 8023f56:	2500      	movs	r5, #0
 8023f58:	e764      	b.n	8023e24 <forward_conv2d_deep_3x3_sssa8_ch+0x40>
 8023f5a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8023f5c:	b922      	cbnz	r2, 8023f68 <forward_conv2d_deep_3x3_sssa8_ch+0x184>
 8023f5e:	6993      	ldr	r3, [r2, #24]
 8023f60:	deff      	udf	#255	@ 0xff
 8023f62:	2300      	movs	r3, #0
 8023f64:	685b      	ldr	r3, [r3, #4]
 8023f66:	deff      	udf	#255	@ 0xff
 8023f68:	68db      	ldr	r3, [r3, #12]
 8023f6a:	deff      	udf	#255	@ 0xff
 8023f6c:	2300      	movs	r3, #0
 8023f6e:	685b      	ldr	r3, [r3, #4]
 8023f70:	deff      	udf	#255	@ 0xff
 8023f72:	2300      	movs	r3, #0
 8023f74:	685b      	ldr	r3, [r3, #4]
 8023f76:	deff      	udf	#255	@ 0xff

08023f78 <forward_conv2d_sssa8_ch>:
 8023f78:	6982      	ldr	r2, [r0, #24]
 8023f7a:	8813      	ldrh	r3, [r2, #0]
 8023f7c:	2b00      	cmp	r3, #0
 8023f7e:	f000 80cd 	beq.w	802411c <forward_conv2d_sssa8_ch+0x1a4>
 8023f82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f86:	6854      	ldr	r4, [r2, #4]
 8023f88:	b0a5      	sub	sp, #148	@ 0x94
 8023f8a:	6861      	ldr	r1, [r4, #4]
 8023f8c:	b101      	cbz	r1, 8023f90 <forward_conv2d_sssa8_ch+0x18>
 8023f8e:	6809      	ldr	r1, [r1, #0]
 8023f90:	2b01      	cmp	r3, #1
 8023f92:	f000 80dc 	beq.w	802414e <forward_conv2d_sssa8_ch+0x1d6>
 8023f96:	6922      	ldr	r2, [r4, #16]
 8023f98:	b102      	cbz	r2, 8023f9c <forward_conv2d_sssa8_ch+0x24>
 8023f9a:	6812      	ldr	r2, [r2, #0]
 8023f9c:	2b02      	cmp	r3, #2
 8023f9e:	f000 80d1 	beq.w	8024144 <forward_conv2d_sssa8_ch+0x1cc>
 8023fa2:	69e5      	ldr	r5, [r4, #28]
 8023fa4:	2d00      	cmp	r5, #0
 8023fa6:	f000 80c5 	beq.w	8024134 <forward_conv2d_sssa8_ch+0x1bc>
 8023faa:	8b26      	ldrh	r6, [r4, #24]
 8023fac:	f8d5 9000 	ldr.w	r9, [r5]
 8023fb0:	2e01      	cmp	r6, #1
 8023fb2:	f240 80c1 	bls.w	8024138 <forward_conv2d_sssa8_ch+0x1c0>
 8023fb6:	686d      	ldr	r5, [r5, #4]
 8023fb8:	2b03      	cmp	r3, #3
 8023fba:	f000 80cb 	beq.w	8024154 <forward_conv2d_sssa8_ch+0x1dc>
 8023fbe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8023fc0:	2b00      	cmp	r3, #0
 8023fc2:	f000 80bb 	beq.w	802413c <forward_conv2d_sssa8_ch+0x1c4>
 8023fc6:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 8023fc8:	b104      	cbz	r4, 8023fcc <forward_conv2d_sssa8_ch+0x54>
 8023fca:	685a      	ldr	r2, [r3, #4]
 8023fcc:	681c      	ldr	r4, [r3, #0]
 8023fce:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023fd2:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8023fd6:	f8be 4004 	ldrh.w	r4, [lr, #4]
 8023fda:	68cf      	ldr	r7, [r1, #12]
 8023fdc:	9418      	str	r4, [sp, #96]	@ 0x60
 8023fde:	f8de 400c 	ldr.w	r4, [lr, #12]
 8023fe2:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
 8023fe4:	9419      	str	r4, [sp, #100]	@ 0x64
 8023fe6:	f8de 4008 	ldr.w	r4, [lr, #8]
 8023fea:	f8d9 800c 	ldr.w	r8, [r9, #12]
 8023fee:	941a      	str	r4, [sp, #104]	@ 0x68
 8023ff0:	68fc      	ldr	r4, [r7, #12]
 8023ff2:	69ab      	ldr	r3, [r5, #24]
 8023ff4:	941b      	str	r4, [sp, #108]	@ 0x6c
 8023ff6:	8d04      	ldrh	r4, [r0, #40]	@ 0x28
 8023ff8:	689b      	ldr	r3, [r3, #8]
 8023ffa:	941c      	str	r4, [sp, #112]	@ 0x70
 8023ffc:	8d84      	ldrh	r4, [r0, #44]	@ 0x2c
 8023ffe:	9322      	str	r3, [sp, #136]	@ 0x88
 8024000:	941d      	str	r4, [sp, #116]	@ 0x74
 8024002:	8834      	ldrh	r4, [r6, #0]
 8024004:	680d      	ldr	r5, [r1, #0]
 8024006:	941e      	str	r4, [sp, #120]	@ 0x78
 8024008:	88b4      	ldrh	r4, [r6, #4]
 802400a:	88bb      	ldrh	r3, [r7, #4]
 802400c:	941f      	str	r4, [sp, #124]	@ 0x7c
 802400e:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8024012:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8024016:	9420      	str	r4, [sp, #128]	@ 0x80
 8024018:	f8d8 4004 	ldr.w	r4, [r8, #4]
 802401c:	9421      	str	r4, [sp, #132]	@ 0x84
 802401e:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8024022:	f8d9 6000 	ldr.w	r6, [r9]
 8024026:	9423      	str	r4, [sp, #140]	@ 0x8c
 8024028:	6814      	ldr	r4, [r2, #0]
 802402a:	2d00      	cmp	r5, #0
 802402c:	d07b      	beq.n	8024126 <forward_conv2d_sssa8_ch+0x1ae>
 802402e:	686f      	ldr	r7, [r5, #4]
 8024030:	2f00      	cmp	r7, #0
 8024032:	d078      	beq.n	8024126 <forward_conv2d_sssa8_ch+0x1ae>
 8024034:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 8024038:	f1b8 0f00 	cmp.w	r8, #0
 802403c:	d073      	beq.n	8024126 <forward_conv2d_sssa8_ch+0x1ae>
 802403e:	683f      	ldr	r7, [r7, #0]
 8024040:	ed97 0a00 	vldr	s0, [r7]
 8024044:	2c00      	cmp	r4, #0
 8024046:	d06b      	beq.n	8024120 <forward_conv2d_sssa8_ch+0x1a8>
 8024048:	6867      	ldr	r7, [r4, #4]
 802404a:	2f00      	cmp	r7, #0
 802404c:	d068      	beq.n	8024120 <forward_conv2d_sssa8_ch+0x1a8>
 802404e:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 8024052:	f1b8 0f00 	cmp.w	r8, #0
 8024056:	d063      	beq.n	8024120 <forward_conv2d_sssa8_ch+0x1a8>
 8024058:	683f      	ldr	r7, [r7, #0]
 802405a:	edd7 0a00 	vldr	s1, [r7]
 802405e:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8024062:	698a      	ldr	r2, [r1, #24]
 8024064:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8024068:	f890 7041 	ldrb.w	r7, [r0, #65]	@ 0x41
 802406c:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8024070:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8024074:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8024078:	b116      	cbz	r6, 8024080 <forward_conv2d_sssa8_ch+0x108>
 802407a:	6876      	ldr	r6, [r6, #4]
 802407c:	b106      	cbz	r6, 8024080 <forward_conv2d_sssa8_ch+0x108>
 802407e:	6836      	ldr	r6, [r6, #0]
 8024080:	b13d      	cbz	r5, 8024092 <forward_conv2d_sssa8_ch+0x11a>
 8024082:	6869      	ldr	r1, [r5, #4]
 8024084:	2900      	cmp	r1, #0
 8024086:	d051      	beq.n	802412c <forward_conv2d_sssa8_ch+0x1b4>
 8024088:	886d      	ldrh	r5, [r5, #2]
 802408a:	b115      	cbz	r5, 8024092 <forward_conv2d_sssa8_ch+0x11a>
 802408c:	6849      	ldr	r1, [r1, #4]
 802408e:	f991 5000 	ldrsb.w	r5, [r1]
 8024092:	b13c      	cbz	r4, 80240a4 <forward_conv2d_sssa8_ch+0x12c>
 8024094:	6861      	ldr	r1, [r4, #4]
 8024096:	2900      	cmp	r1, #0
 8024098:	d04a      	beq.n	8024130 <forward_conv2d_sssa8_ch+0x1b8>
 802409a:	8864      	ldrh	r4, [r4, #2]
 802409c:	b114      	cbz	r4, 80240a4 <forward_conv2d_sssa8_ch+0x12c>
 802409e:	6849      	ldr	r1, [r1, #4]
 80240a0:	f991 4000 	ldrsb.w	r4, [r1]
 80240a4:	9317      	str	r3, [sp, #92]	@ 0x5c
 80240a6:	edcd 0a16 	vstr	s1, [sp, #88]	@ 0x58
 80240aa:	ed8d 0a15 	vstr	s0, [sp, #84]	@ 0x54
 80240ae:	e9dc 0100 	ldrd	r0, r1, [ip]
 80240b2:	f00d fbfb 	bl	80318ac <ai_array_get_byte_size>
 80240b6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80240b8:	f8bd 2080 	ldrh.w	r2, [sp, #128]	@ 0x80
 80240bc:	fa1f f18b 	uxth.w	r1, fp
 80240c0:	9308      	str	r3, [sp, #32]
 80240c2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80240c4:	9203      	str	r2, [sp, #12]
 80240c6:	9307      	str	r3, [sp, #28]
 80240c8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80240ca:	f8bd 2064 	ldrh.w	r2, [sp, #100]	@ 0x64
 80240ce:	9306      	str	r3, [sp, #24]
 80240d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80240d2:	eddd 0a16 	vldr	s1, [sp, #88]	@ 0x58
 80240d6:	9305      	str	r3, [sp, #20]
 80240d8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80240da:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
 80240de:	9304      	str	r3, [sp, #16]
 80240e0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80240e2:	920f      	str	r2, [sp, #60]	@ 0x3c
 80240e4:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 80240e8:	f8bd 206c 	ldrh.w	r2, [sp, #108]	@ 0x6c
 80240ec:	e9cd 670b 	strd	r6, r7, [sp, #44]	@ 0x2c
 80240f0:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
 80240f4:	f8bd 7084 	ldrh.w	r7, [sp, #132]	@ 0x84
 80240f8:	f8bd 4068 	ldrh.w	r4, [sp, #104]	@ 0x68
 80240fc:	9702      	str	r7, [sp, #8]
 80240fe:	e9cd a300 	strd	sl, r3, [sp]
 8024102:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024104:	e9cd 0311 	strd	r0, r3, [sp, #68]	@ 0x44
 8024108:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802410a:	4640      	mov	r0, r8
 802410c:	940e      	str	r4, [sp, #56]	@ 0x38
 802410e:	2401      	movs	r4, #1
 8024110:	9410      	str	r4, [sp, #64]	@ 0x40
 8024112:	f001 ffa1 	bl	8026058 <forward_lite_conv2d_sssa8_ch>
 8024116:	b025      	add	sp, #148	@ 0x94
 8024118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802411c:	685b      	ldr	r3, [r3, #4]
 802411e:	deff      	udf	#255	@ 0xff
 8024120:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8024124:	e79b      	b.n	802405e <forward_conv2d_sssa8_ch+0xe6>
 8024126:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802412a:	e78b      	b.n	8024044 <forward_conv2d_sssa8_ch+0xcc>
 802412c:	460d      	mov	r5, r1
 802412e:	e7b0      	b.n	8024092 <forward_conv2d_sssa8_ch+0x11a>
 8024130:	460c      	mov	r4, r1
 8024132:	e7b7      	b.n	80240a4 <forward_conv2d_sssa8_ch+0x12c>
 8024134:	46a9      	mov	r9, r5
 8024136:	e73f      	b.n	8023fb8 <forward_conv2d_sssa8_ch+0x40>
 8024138:	2500      	movs	r5, #0
 802413a:	e73d      	b.n	8023fb8 <forward_conv2d_sssa8_ch+0x40>
 802413c:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 802413e:	b922      	cbnz	r2, 802414a <forward_conv2d_sssa8_ch+0x1d2>
 8024140:	6993      	ldr	r3, [r2, #24]
 8024142:	deff      	udf	#255	@ 0xff
 8024144:	2300      	movs	r3, #0
 8024146:	685b      	ldr	r3, [r3, #4]
 8024148:	deff      	udf	#255	@ 0xff
 802414a:	68db      	ldr	r3, [r3, #12]
 802414c:	deff      	udf	#255	@ 0xff
 802414e:	2300      	movs	r3, #0
 8024150:	685b      	ldr	r3, [r3, #4]
 8024152:	deff      	udf	#255	@ 0xff
 8024154:	2300      	movs	r3, #0
 8024156:	685b      	ldr	r3, [r3, #4]
 8024158:	deff      	udf	#255	@ 0xff
 802415a:	bf00      	nop

0802415c <func_dummy>:
 802415c:	4770      	bx	lr
 802415e:	bf00      	nop

08024160 <forward_conv2d_integer_SSSA>:
 8024160:	6983      	ldr	r3, [r0, #24]
 8024162:	881a      	ldrh	r2, [r3, #0]
 8024164:	2a00      	cmp	r2, #0
 8024166:	f000 812d 	beq.w	80243c4 <forward_conv2d_integer_SSSA+0x264>
 802416a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802416e:	6859      	ldr	r1, [r3, #4]
 8024170:	b0ad      	sub	sp, #180	@ 0xb4
 8024172:	684c      	ldr	r4, [r1, #4]
 8024174:	b104      	cbz	r4, 8024178 <forward_conv2d_integer_SSSA+0x18>
 8024176:	6824      	ldr	r4, [r4, #0]
 8024178:	2a01      	cmp	r2, #1
 802417a:	f000 82a4 	beq.w	80246c6 <forward_conv2d_integer_SSSA+0x566>
 802417e:	690b      	ldr	r3, [r1, #16]
 8024180:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024182:	b10b      	cbz	r3, 8024188 <forward_conv2d_integer_SSSA+0x28>
 8024184:	681b      	ldr	r3, [r3, #0]
 8024186:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024188:	2a02      	cmp	r2, #2
 802418a:	f000 8118 	beq.w	80243be <forward_conv2d_integer_SSSA+0x25e>
 802418e:	69cb      	ldr	r3, [r1, #28]
 8024190:	2b00      	cmp	r3, #0
 8024192:	f000 8243 	beq.w	802461c <forward_conv2d_integer_SSSA+0x4bc>
 8024196:	8b0e      	ldrh	r6, [r1, #24]
 8024198:	681d      	ldr	r5, [r3, #0]
 802419a:	2e01      	cmp	r6, #1
 802419c:	f200 8114 	bhi.w	80243c8 <forward_conv2d_integer_SSSA+0x268>
 80241a0:	2600      	movs	r6, #0
 80241a2:	2a03      	cmp	r2, #3
 80241a4:	f000 8292 	beq.w	80246cc <forward_conv2d_integer_SSSA+0x56c>
 80241a8:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80241aa:	2a00      	cmp	r2, #0
 80241ac:	f000 8291 	beq.w	80246d2 <forward_conv2d_integer_SSSA+0x572>
 80241b0:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80241b2:	2900      	cmp	r1, #0
 80241b4:	f000 8226 	beq.w	8024604 <forward_conv2d_integer_SSSA+0x4a4>
 80241b8:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80241bc:	9126      	str	r1, [sp, #152]	@ 0x98
 80241be:	68e7      	ldr	r7, [r4, #12]
 80241c0:	6812      	ldr	r2, [r2, #0]
 80241c2:	6879      	ldr	r1, [r7, #4]
 80241c4:	9224      	str	r2, [sp, #144]	@ 0x90
 80241c6:	9122      	str	r1, [sp, #136]	@ 0x88
 80241c8:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80241ca:	f8d9 c00c 	ldr.w	ip, [r9, #12]
 80241ce:	6989      	ldr	r1, [r1, #24]
 80241d0:	f8dc e004 	ldr.w	lr, [ip, #4]
 80241d4:	6889      	ldr	r1, [r1, #8]
 80241d6:	69b2      	ldr	r2, [r6, #24]
 80241d8:	911e      	str	r1, [sp, #120]	@ 0x78
 80241da:	fa1f f18e 	uxth.w	r1, lr
 80241de:	6896      	ldr	r6, [r2, #8]
 80241e0:	9117      	str	r1, [sp, #92]	@ 0x5c
 80241e2:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80241e6:	961c      	str	r6, [sp, #112]	@ 0x70
 80241e8:	9120      	str	r1, [sp, #128]	@ 0x80
 80241ea:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80241ee:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
 80241f0:	9121      	str	r1, [sp, #132]	@ 0x84
 80241f2:	68f9      	ldr	r1, [r7, #12]
 80241f4:	68ea      	ldr	r2, [r5, #12]
 80241f6:	9123      	str	r1, [sp, #140]	@ 0x8c
 80241f8:	68b9      	ldr	r1, [r7, #8]
 80241fa:	f8bd b088 	ldrh.w	fp, [sp, #136]	@ 0x88
 80241fe:	9125      	str	r1, [sp, #148]	@ 0x94
 8024200:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 8024202:	9115      	str	r1, [sp, #84]	@ 0x54
 8024204:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8024206:	9119      	str	r1, [sp, #100]	@ 0x64
 8024208:	8831      	ldrh	r1, [r6, #0]
 802420a:	9118      	str	r1, [sp, #96]	@ 0x60
 802420c:	88b1      	ldrh	r1, [r6, #4]
 802420e:	f8d0 c01c 	ldr.w	ip, [r0, #28]
 8024212:	9114      	str	r1, [sp, #80]	@ 0x50
 8024214:	6891      	ldr	r1, [r2, #8]
 8024216:	6852      	ldr	r2, [r2, #4]
 8024218:	911d      	str	r1, [sp, #116]	@ 0x74
 802421a:	921a      	str	r2, [sp, #104]	@ 0x68
 802421c:	2b00      	cmp	r3, #0
 802421e:	f000 81dd 	beq.w	80245dc <forward_conv2d_integer_SSSA+0x47c>
 8024222:	689b      	ldr	r3, [r3, #8]
 8024224:	2b00      	cmp	r3, #0
 8024226:	f000 81d9 	beq.w	80245dc <forward_conv2d_integer_SSSA+0x47c>
 802422a:	f8d3 a018 	ldr.w	sl, [r3, #24]
 802422e:	f1ba 0f00 	cmp.w	sl, #0
 8024232:	bf18      	it	ne
 8024234:	469a      	movne	sl, r3
 8024236:	6821      	ldr	r1, [r4, #0]
 8024238:	f8d9 2000 	ldr.w	r2, [r9]
 802423c:	682b      	ldr	r3, [r5, #0]
 802423e:	2900      	cmp	r1, #0
 8024240:	f000 81c5 	beq.w	80245ce <forward_conv2d_integer_SSSA+0x46e>
 8024244:	6848      	ldr	r0, [r1, #4]
 8024246:	2800      	cmp	r0, #0
 8024248:	f000 81c1 	beq.w	80245ce <forward_conv2d_integer_SSSA+0x46e>
 802424c:	884e      	ldrh	r6, [r1, #2]
 802424e:	2e00      	cmp	r6, #0
 8024250:	f000 81bd 	beq.w	80245ce <forward_conv2d_integer_SSSA+0x46e>
 8024254:	6800      	ldr	r0, [r0, #0]
 8024256:	edd0 7a00 	vldr	s15, [r0]
 802425a:	2a00      	cmp	r2, #0
 802425c:	f000 81a9 	beq.w	80245b2 <forward_conv2d_integer_SSSA+0x452>
 8024260:	6850      	ldr	r0, [r2, #4]
 8024262:	2800      	cmp	r0, #0
 8024264:	f000 81a5 	beq.w	80245b2 <forward_conv2d_integer_SSSA+0x452>
 8024268:	8856      	ldrh	r6, [r2, #2]
 802426a:	2e00      	cmp	r6, #0
 802426c:	f000 81a1 	beq.w	80245b2 <forward_conv2d_integer_SSSA+0x452>
 8024270:	6800      	ldr	r0, [r0, #0]
 8024272:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8024274:	ed90 0a00 	vldr	s0, [r0]
 8024278:	981d      	ldr	r0, [sp, #116]	@ 0x74
 802427a:	42b0      	cmp	r0, r6
 802427c:	f040 81a0 	bne.w	80245c0 <forward_conv2d_integer_SSSA+0x460>
 8024280:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8024282:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 8024284:	42b0      	cmp	r0, r6
 8024286:	f040 819b 	bne.w	80245c0 <forward_conv2d_integer_SSSA+0x460>
 802428a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 802428c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 802428e:	42b0      	cmp	r0, r6
 8024290:	f040 8196 	bne.w	80245c0 <forward_conv2d_integer_SSSA+0x460>
 8024294:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8024296:	9e25      	ldr	r6, [sp, #148]	@ 0x94
 8024298:	42b0      	cmp	r0, r6
 802429a:	f040 8191 	bne.w	80245c0 <forward_conv2d_integer_SSSA+0x460>
 802429e:	e9dd 0620 	ldrd	r0, r6, [sp, #128]	@ 0x80
 80242a2:	42b0      	cmp	r0, r6
 80242a4:	bf08      	it	eq
 80242a6:	f1bb 0f03 	cmpeq.w	fp, #3
 80242aa:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80242ac:	bf0c      	ite	eq
 80242ae:	2601      	moveq	r6, #1
 80242b0:	2600      	movne	r6, #0
 80242b2:	2801      	cmp	r0, #1
 80242b4:	f040 8189 	bne.w	80245ca <forward_conv2d_integer_SSSA+0x46a>
 80242b8:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80242ba:	2801      	cmp	r0, #1
 80242bc:	f040 8185 	bne.w	80245ca <forward_conv2d_integer_SSSA+0x46a>
 80242c0:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80242c2:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80242c4:	4338      	orrs	r0, r7
 80242c6:	f040 8180 	bne.w	80245ca <forward_conv2d_integer_SSSA+0x46a>
 80242ca:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 80242cc:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80242ce:	2801      	cmp	r0, #1
 80242d0:	bf08      	it	eq
 80242d2:	2f01      	cmpeq	r7, #1
 80242d4:	bf0c      	ite	eq
 80242d6:	2701      	moveq	r7, #1
 80242d8:	2700      	movne	r7, #0
 80242da:	69a8      	ldr	r0, [r5, #24]
 80242dc:	69a4      	ldr	r4, [r4, #24]
 80242de:	6880      	ldr	r0, [r0, #8]
 80242e0:	68a4      	ldr	r4, [r4, #8]
 80242e2:	9013      	str	r0, [sp, #76]	@ 0x4c
 80242e4:	f8d9 0018 	ldr.w	r0, [r9, #24]
 80242e8:	6885      	ldr	r5, [r0, #8]
 80242ea:	2900      	cmp	r1, #0
 80242ec:	f000 8174 	beq.w	80245d8 <forward_conv2d_integer_SSSA+0x478>
 80242f0:	6848      	ldr	r0, [r1, #4]
 80242f2:	2800      	cmp	r0, #0
 80242f4:	f000 8184 	beq.w	8024600 <forward_conv2d_integer_SSSA+0x4a0>
 80242f8:	8849      	ldrh	r1, [r1, #2]
 80242fa:	2900      	cmp	r1, #0
 80242fc:	f000 816c 	beq.w	80245d8 <forward_conv2d_integer_SSSA+0x478>
 8024300:	6841      	ldr	r1, [r0, #4]
 8024302:	f991 1000 	ldrsb.w	r1, [r1]
 8024306:	9116      	str	r1, [sp, #88]	@ 0x58
 8024308:	2a00      	cmp	r2, #0
 802430a:	f000 8163 	beq.w	80245d4 <forward_conv2d_integer_SSSA+0x474>
 802430e:	6851      	ldr	r1, [r2, #4]
 8024310:	2900      	cmp	r1, #0
 8024312:	f000 8173 	beq.w	80245fc <forward_conv2d_integer_SSSA+0x49c>
 8024316:	8852      	ldrh	r2, [r2, #2]
 8024318:	2a00      	cmp	r2, #0
 802431a:	f000 815b 	beq.w	80245d4 <forward_conv2d_integer_SSSA+0x474>
 802431e:	684a      	ldr	r2, [r1, #4]
 8024320:	f992 2000 	ldrsb.w	r2, [r2]
 8024324:	921b      	str	r2, [sp, #108]	@ 0x6c
 8024326:	b113      	cbz	r3, 802432e <forward_conv2d_integer_SSSA+0x1ce>
 8024328:	685b      	ldr	r3, [r3, #4]
 802432a:	b103      	cbz	r3, 802432e <forward_conv2d_integer_SSSA+0x1ce>
 802432c:	681b      	ldr	r3, [r3, #0]
 802432e:	f1bc 0f01 	cmp.w	ip, #1
 8024332:	f000 815f 	beq.w	80245f4 <forward_conv2d_integer_SSSA+0x494>
 8024336:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 802433a:	45c4      	cmp	ip, r8
 802433c:	bf0c      	ite	eq
 802433e:	f04f 0813 	moveq.w	r8, #19
 8024342:	f04f 0800 	movne.w	r8, #0
 8024346:	fa1f f68e 	uxth.w	r6, lr
 802434a:	e9dd 2120 	ldrd	r2, r1, [sp, #128]	@ 0x80
 802434e:	fb01 f202 	mul.w	r2, r1, r2
 8024352:	fb06 5202 	mla	r2, r6, r2, r5
 8024356:	4294      	cmp	r4, r2
 8024358:	f080 8149 	bcs.w	80245ee <forward_conv2d_integer_SSSA+0x48e>
 802435c:	9925      	ldr	r1, [sp, #148]	@ 0x94
 802435e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8024360:	fb01 f202 	mul.w	r2, r1, r2
 8024364:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 8024368:	fb01 4202 	mla	r2, r1, r2, r4
 802436c:	4295      	cmp	r5, r2
 802436e:	bf2c      	ite	cs
 8024370:	2200      	movcs	r2, #0
 8024372:	2201      	movcc	r2, #1
 8024374:	9227      	str	r2, [sp, #156]	@ 0x9c
 8024376:	2200      	movs	r2, #0
 8024378:	f10d 07a2 	add.w	r7, sp, #162	@ 0xa2
 802437c:	f1a8 0811 	sub.w	r8, r8, #17
 8024380:	f8ad 20a2 	strh.w	r2, [sp, #162]	@ 0xa2
 8024384:	4638      	mov	r0, r7
 8024386:	9229      	str	r2, [sp, #164]	@ 0xa4
 8024388:	ed93 7a00 	vldr	s14, [r3]
 802438c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024390:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8024394:	f003 f80a 	bl	80273ac <align_factor>
 8024398:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802439a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802439c:	699b      	ldr	r3, [r3, #24]
 802439e:	9029      	str	r0, [sp, #164]	@ 0xa4
 80243a0:	922a      	str	r2, [sp, #168]	@ 0xa8
 80243a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80243a6:	f00d fa81 	bl	80318ac <ai_array_get_byte_size>
 80243aa:	902b      	str	r0, [sp, #172]	@ 0xac
 80243ac:	f1b8 0f03 	cmp.w	r8, #3
 80243b0:	d846      	bhi.n	8024440 <forward_conv2d_integer_SSSA+0x2e0>
 80243b2:	e8df f018 	tbh	[pc, r8, lsl #1]
 80243b6:	00cf      	.short	0x00cf
 80243b8:	005c0096 	.word	0x005c0096
 80243bc:	000b      	.short	0x000b
 80243be:	2300      	movs	r3, #0
 80243c0:	685b      	ldr	r3, [r3, #4]
 80243c2:	deff      	udf	#255	@ 0xff
 80243c4:	6853      	ldr	r3, [r2, #4]
 80243c6:	deff      	udf	#255	@ 0xff
 80243c8:	685e      	ldr	r6, [r3, #4]
 80243ca:	e6ea      	b.n	80241a2 <forward_conv2d_integer_SSSA+0x42>
 80243cc:	f8bd 8068 	ldrh.w	r8, [sp, #104]	@ 0x68
 80243d0:	4658      	mov	r0, fp
 80243d2:	f8bd 6074 	ldrh.w	r6, [sp, #116]	@ 0x74
 80243d6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80243d8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80243da:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80243dc:	9303      	str	r3, [sp, #12]
 80243de:	4643      	mov	r3, r8
 80243e0:	9202      	str	r2, [sp, #8]
 80243e2:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80243e4:	e9cd 6100 	strd	r6, r1, [sp]
 80243e8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80243ea:	f003 feb7 	bl	802815c <st_sssa8_convolve_rank1upd>
 80243ee:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80243f0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80243f2:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80243f4:	9310      	str	r3, [sp, #64]	@ 0x40
 80243f6:	f8bd 3084 	ldrh.w	r3, [sp, #132]	@ 0x84
 80243fa:	9201      	str	r2, [sp, #4]
 80243fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80243fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024400:	f8bd 3080 	ldrh.w	r3, [sp, #128]	@ 0x80
 8024404:	950d      	str	r5, [sp, #52]	@ 0x34
 8024406:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8024408:	9200      	str	r2, [sp, #0]
 802440a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802440c:	465b      	mov	r3, fp
 802440e:	f8bd 208c 	ldrh.w	r2, [sp, #140]	@ 0x8c
 8024412:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 8024416:	950c      	str	r5, [sp, #48]	@ 0x30
 8024418:	f8cd 8008 	str.w	r8, [sp, #8]
 802441c:	e9cd 700a 	strd	r7, r0, [sp, #40]	@ 0x28
 8024420:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8024422:	9008      	str	r0, [sp, #32]
 8024424:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8024426:	9007      	str	r0, [sp, #28]
 8024428:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802442a:	9006      	str	r0, [sp, #24]
 802442c:	9818      	ldr	r0, [sp, #96]	@ 0x60
 802442e:	9005      	str	r0, [sp, #20]
 8024430:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8024432:	e9cd 6003 	strd	r6, r0, [sp, #12]
 8024436:	4620      	mov	r0, r4
 8024438:	ac29      	add	r4, sp, #164	@ 0xa4
 802443a:	9409      	str	r4, [sp, #36]	@ 0x24
 802443c:	f003 ff1a 	bl	8028274 <st_sssa8_convolve>
 8024440:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8024444:	0a1b      	lsrs	r3, r3, #8
 8024446:	d04a      	beq.n	80244de <forward_conv2d_integer_SSSA+0x37e>
 8024448:	f8d9 000c 	ldr.w	r0, [r9, #12]
 802444c:	2201      	movs	r2, #1
 802444e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8024452:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8024456:	4298      	cmp	r0, r3
 8024458:	fb01 f202 	mul.w	r2, r1, r2
 802445c:	d1f9      	bne.n	8024452 <forward_conv2d_integer_SSSA+0x2f2>
 802445e:	4653      	mov	r3, sl
 8024460:	4649      	mov	r1, r9
 8024462:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8024464:	9c26      	ldr	r4, [sp, #152]	@ 0x98
 8024466:	47a0      	blx	r4
 8024468:	b02d      	add	sp, #180	@ 0xb4
 802446a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802446e:	f8bd 6068 	ldrh.w	r6, [sp, #104]	@ 0x68
 8024472:	f8bd 8074 	ldrh.w	r8, [sp, #116]	@ 0x74
 8024476:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024478:	4632      	mov	r2, r6
 802447a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802447c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802447e:	9300      	str	r3, [sp, #0]
 8024480:	4643      	mov	r3, r8
 8024482:	f004 fccd 	bl	8028e20 <st_sssa8_conv_dw_Wadapt>
 8024486:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024488:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802448a:	4620      	mov	r0, r4
 802448c:	920c      	str	r2, [sp, #48]	@ 0x30
 802448e:	ac29      	add	r4, sp, #164	@ 0xa4
 8024490:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8024492:	9310      	str	r3, [sp, #64]	@ 0x40
 8024494:	f8bd 3084 	ldrh.w	r3, [sp, #132]	@ 0x84
 8024498:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 802449c:	930e      	str	r3, [sp, #56]	@ 0x38
 802449e:	f8bd 3080 	ldrh.w	r3, [sp, #128]	@ 0x80
 80244a2:	950d      	str	r5, [sp, #52]	@ 0x34
 80244a4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80244a6:	465b      	mov	r3, fp
 80244a8:	9602      	str	r6, [sp, #8]
 80244aa:	9409      	str	r4, [sp, #36]	@ 0x24
 80244ac:	e9cd 720a 	strd	r7, r2, [sp, #40]	@ 0x28
 80244b0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80244b2:	9208      	str	r2, [sp, #32]
 80244b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80244b6:	9207      	str	r2, [sp, #28]
 80244b8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80244ba:	9206      	str	r2, [sp, #24]
 80244bc:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80244be:	9205      	str	r2, [sp, #20]
 80244c0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80244c2:	e9cd 8203 	strd	r8, r2, [sp, #12]
 80244c6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80244c8:	9201      	str	r2, [sp, #4]
 80244ca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80244cc:	9200      	str	r2, [sp, #0]
 80244ce:	f8bd 208c 	ldrh.w	r2, [sp, #140]	@ 0x8c
 80244d2:	f004 fd63 	bl	8028f9c <st_sssa8_convolve_dw>
 80244d6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80244da:	0a1b      	lsrs	r3, r3, #8
 80244dc:	d1b4      	bne.n	8024448 <forward_conv2d_integer_SSSA+0x2e8>
 80244de:	2201      	movs	r2, #1
 80244e0:	e7bd      	b.n	802445e <forward_conv2d_integer_SSSA+0x2fe>
 80244e2:	f10d 08a8 	add.w	r8, sp, #168	@ 0xa8
 80244e6:	465a      	mov	r2, fp
 80244e8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80244ea:	4643      	mov	r3, r8
 80244ec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80244ee:	f004 fc33 	bl	8028d58 <st_sssa8_convolve_1x1_WeightsPrefetch>
 80244f2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80244f4:	2b00      	cmp	r3, #0
 80244f6:	f040 8094 	bne.w	8024622 <forward_conv2d_integer_SSSA+0x4c2>
 80244fa:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80244fc:	4620      	mov	r0, r4
 80244fe:	ac29      	add	r4, sp, #164	@ 0xa4
 8024500:	f8bd 208c 	ldrh.w	r2, [sp, #140]	@ 0x8c
 8024504:	930c      	str	r3, [sp, #48]	@ 0x30
 8024506:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024508:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 802450c:	950d      	str	r5, [sp, #52]	@ 0x34
 802450e:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8024512:	9409      	str	r4, [sp, #36]	@ 0x24
 8024514:	e9cd 730a 	strd	r7, r3, [sp, #40]	@ 0x28
 8024518:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802451a:	9308      	str	r3, [sp, #32]
 802451c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802451e:	9307      	str	r3, [sp, #28]
 8024520:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024522:	9306      	str	r3, [sp, #24]
 8024524:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024526:	9305      	str	r3, [sp, #20]
 8024528:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802452a:	9304      	str	r3, [sp, #16]
 802452c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802452e:	9301      	str	r3, [sp, #4]
 8024530:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024532:	9300      	str	r3, [sp, #0]
 8024534:	f8bd 3084 	ldrh.w	r3, [sp, #132]	@ 0x84
 8024538:	930e      	str	r3, [sp, #56]	@ 0x38
 802453a:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 802453e:	9303      	str	r3, [sp, #12]
 8024540:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8024544:	9302      	str	r3, [sp, #8]
 8024546:	f8bd 3080 	ldrh.w	r3, [sp, #128]	@ 0x80
 802454a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802454c:	465b      	mov	r3, fp
 802454e:	f004 fc11 	bl	8028d74 <st_sssa8_convolve_1x1>
 8024552:	e775      	b.n	8024440 <forward_conv2d_integer_SSSA+0x2e0>
 8024554:	f8bd 6068 	ldrh.w	r6, [sp, #104]	@ 0x68
 8024558:	4658      	mov	r0, fp
 802455a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802455c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802455e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8024560:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 8024564:	9303      	str	r3, [sp, #12]
 8024566:	4633      	mov	r3, r6
 8024568:	9202      	str	r2, [sp, #8]
 802456a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802456c:	e9cd 6100 	strd	r6, r1, [sp]
 8024570:	4641      	mov	r1, r8
 8024572:	f003 fdf3 	bl	802815c <st_sssa8_convolve_rank1upd>
 8024576:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8024578:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802457a:	900b      	str	r0, [sp, #44]	@ 0x2c
 802457c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802457e:	f8bd 3080 	ldrh.w	r3, [sp, #128]	@ 0x80
 8024582:	9509      	str	r5, [sp, #36]	@ 0x24
 8024584:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8024586:	9200      	str	r2, [sp, #0]
 8024588:	465a      	mov	r2, fp
 802458a:	930a      	str	r3, [sp, #40]	@ 0x28
 802458c:	4643      	mov	r3, r8
 802458e:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 8024592:	9508      	str	r5, [sp, #32]
 8024594:	e9cd 7006 	strd	r7, r0, [sp, #24]
 8024598:	981c      	ldr	r0, [sp, #112]	@ 0x70
 802459a:	9004      	str	r0, [sp, #16]
 802459c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802459e:	9003      	str	r0, [sp, #12]
 80245a0:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80245a2:	e9cd 6001 	strd	r6, r0, [sp, #4]
 80245a6:	4620      	mov	r0, r4
 80245a8:	ac29      	add	r4, sp, #164	@ 0xa4
 80245aa:	9405      	str	r4, [sp, #20]
 80245ac:	f005 f9f8 	bl	80299a0 <st_sssa8_convolve_rgb>
 80245b0:	e746      	b.n	8024440 <forward_conv2d_integer_SSSA+0x2e0>
 80245b2:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80245b4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80245b8:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80245ba:	42b0      	cmp	r0, r6
 80245bc:	f43f ae60 	beq.w	8024280 <forward_conv2d_integer_SSSA+0x120>
 80245c0:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80245c2:	2600      	movs	r6, #0
 80245c4:	2801      	cmp	r0, #1
 80245c6:	f43f ae77 	beq.w	80242b8 <forward_conv2d_integer_SSSA+0x158>
 80245ca:	2700      	movs	r7, #0
 80245cc:	e685      	b.n	80242da <forward_conv2d_integer_SSSA+0x17a>
 80245ce:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80245d2:	e642      	b.n	802425a <forward_conv2d_integer_SSSA+0xfa>
 80245d4:	921b      	str	r2, [sp, #108]	@ 0x6c
 80245d6:	e6a6      	b.n	8024326 <forward_conv2d_integer_SSSA+0x1c6>
 80245d8:	9116      	str	r1, [sp, #88]	@ 0x58
 80245da:	e695      	b.n	8024308 <forward_conv2d_integer_SSSA+0x1a8>
 80245dc:	f8d0 a020 	ldr.w	sl, [r0, #32]
 80245e0:	f1ba 0f00 	cmp.w	sl, #0
 80245e4:	f43f ae27 	beq.w	8024236 <forward_conv2d_integer_SSSA+0xd6>
 80245e8:	f8da a008 	ldr.w	sl, [sl, #8]
 80245ec:	e623      	b.n	8024236 <forward_conv2d_integer_SSSA+0xd6>
 80245ee:	2200      	movs	r2, #0
 80245f0:	9227      	str	r2, [sp, #156]	@ 0x9c
 80245f2:	e6c0      	b.n	8024376 <forward_conv2d_integer_SSSA+0x216>
 80245f4:	b15e      	cbz	r6, 802460e <forward_conv2d_integer_SSSA+0x4ae>
 80245f6:	f04f 0811 	mov.w	r8, #17
 80245fa:	e6a4      	b.n	8024346 <forward_conv2d_integer_SSSA+0x1e6>
 80245fc:	911b      	str	r1, [sp, #108]	@ 0x6c
 80245fe:	e692      	b.n	8024326 <forward_conv2d_integer_SSSA+0x1c6>
 8024600:	9016      	str	r0, [sp, #88]	@ 0x58
 8024602:	e681      	b.n	8024308 <forward_conv2d_integer_SSSA+0x1a8>
 8024604:	4936      	ldr	r1, [pc, #216]	@ (80246e0 <forward_conv2d_integer_SSSA+0x580>)
 8024606:	f8dd 907c 	ldr.w	r9, [sp, #124]	@ 0x7c
 802460a:	9126      	str	r1, [sp, #152]	@ 0x98
 802460c:	e5d7      	b.n	80241be <forward_conv2d_integer_SSSA+0x5e>
 802460e:	2f00      	cmp	r7, #0
 8024610:	bf14      	ite	ne
 8024612:	f04f 0812 	movne.w	r8, #18
 8024616:	f04f 0814 	moveq.w	r8, #20
 802461a:	e694      	b.n	8024346 <forward_conv2d_integer_SSSA+0x1e6>
 802461c:	461d      	mov	r5, r3
 802461e:	461e      	mov	r6, r3
 8024620:	e5bf      	b.n	80241a2 <forward_conv2d_integer_SSSA+0x42>
 8024622:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8024624:	2a00      	cmp	r2, #0
 8024626:	f43f af0b 	beq.w	8024440 <forward_conv2d_integer_SSSA+0x2e0>
 802462a:	9821      	ldr	r0, [sp, #132]	@ 0x84
 802462c:	f8bd 3088 	ldrh.w	r3, [sp, #136]	@ 0x88
 8024630:	fb00 f106 	mul.w	r1, r0, r6
 8024634:	f8bd 6068 	ldrh.w	r6, [sp, #104]	@ 0x68
 8024638:	b280      	uxth	r0, r0
 802463a:	f8cd 9090 	str.w	r9, [sp, #144]	@ 0x90
 802463e:	9123      	str	r1, [sp, #140]	@ 0x8c
 8024640:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8024642:	9621      	str	r6, [sp, #132]	@ 0x84
 8024644:	fb01 f303 	mul.w	r3, r1, r3
 8024648:	f8bd 6074 	ldrh.w	r6, [sp, #116]	@ 0x74
 802464c:	f8dd 908c 	ldr.w	r9, [sp, #140]	@ 0x8c
 8024650:	b289      	uxth	r1, r1
 8024652:	9620      	str	r6, [sp, #128]	@ 0x80
 8024654:	2600      	movs	r6, #0
 8024656:	901e      	str	r0, [sp, #120]	@ 0x78
 8024658:	f8cd a08c 	str.w	sl, [sp, #140]	@ 0x8c
 802465c:	469a      	mov	sl, r3
 802465e:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8024660:	465b      	mov	r3, fp
 8024662:	4693      	mov	fp, r2
 8024664:	9022      	str	r0, [sp, #136]	@ 0x88
 8024666:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8024668:	3601      	adds	r6, #1
 802466a:	4620      	mov	r0, r4
 802466c:	950d      	str	r5, [sp, #52]	@ 0x34
 802466e:	920e      	str	r2, [sp, #56]	@ 0x38
 8024670:	444d      	add	r5, r9
 8024672:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024674:	4454      	add	r4, sl
 8024676:	931d      	str	r3, [sp, #116]	@ 0x74
 8024678:	920c      	str	r2, [sp, #48]	@ 0x30
 802467a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802467c:	911a      	str	r1, [sp, #104]	@ 0x68
 802467e:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8024682:	e9cd 720a 	strd	r7, r2, [sp, #40]	@ 0x28
 8024686:	aa29      	add	r2, sp, #164	@ 0xa4
 8024688:	9209      	str	r2, [sp, #36]	@ 0x24
 802468a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802468c:	9208      	str	r2, [sp, #32]
 802468e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8024690:	9207      	str	r2, [sp, #28]
 8024692:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024694:	9206      	str	r2, [sp, #24]
 8024696:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024698:	9205      	str	r2, [sp, #20]
 802469a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802469c:	9204      	str	r2, [sp, #16]
 802469e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80246a0:	9203      	str	r2, [sp, #12]
 80246a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80246a4:	9202      	str	r2, [sp, #8]
 80246a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80246a8:	9201      	str	r2, [sp, #4]
 80246aa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80246ac:	9200      	str	r2, [sp, #0]
 80246ae:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80246b0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80246b2:	2201      	movs	r2, #1
 80246b4:	f004 fb5e 	bl	8028d74 <st_sssa8_convolve_1x1>
 80246b8:	45b3      	cmp	fp, r6
 80246ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80246bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80246be:	d1d2      	bne.n	8024666 <forward_conv2d_integer_SSSA+0x506>
 80246c0:	e9dd a923 	ldrd	sl, r9, [sp, #140]	@ 0x8c
 80246c4:	e6bc      	b.n	8024440 <forward_conv2d_integer_SSSA+0x2e0>
 80246c6:	2300      	movs	r3, #0
 80246c8:	685b      	ldr	r3, [r3, #4]
 80246ca:	deff      	udf	#255	@ 0xff
 80246cc:	2300      	movs	r3, #0
 80246ce:	685b      	ldr	r3, [r3, #4]
 80246d0:	deff      	udf	#255	@ 0xff
 80246d2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80246d4:	b90b      	cbnz	r3, 80246da <forward_conv2d_integer_SSSA+0x57a>
 80246d6:	699b      	ldr	r3, [r3, #24]
 80246d8:	deff      	udf	#255	@ 0xff
 80246da:	68d3      	ldr	r3, [r2, #12]
 80246dc:	deff      	udf	#255	@ 0xff
 80246de:	bf00      	nop
 80246e0:	0802415d 	.word	0x0802415d

080246e4 <forward_dense_integer_SSSA_ch>:
 80246e4:	6983      	ldr	r3, [r0, #24]
 80246e6:	8818      	ldrh	r0, [r3, #0]
 80246e8:	2800      	cmp	r0, #0
 80246ea:	f000 80af 	beq.w	802484c <forward_dense_integer_SSSA_ch+0x168>
 80246ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246f2:	685c      	ldr	r4, [r3, #4]
 80246f4:	b08f      	sub	sp, #60	@ 0x3c
 80246f6:	6863      	ldr	r3, [r4, #4]
 80246f8:	b103      	cbz	r3, 80246fc <forward_dense_integer_SSSA_ch+0x18>
 80246fa:	681b      	ldr	r3, [r3, #0]
 80246fc:	2801      	cmp	r0, #1
 80246fe:	f000 813b 	beq.w	8024978 <forward_dense_integer_SSSA_ch+0x294>
 8024702:	6922      	ldr	r2, [r4, #16]
 8024704:	b102      	cbz	r2, 8024708 <forward_dense_integer_SSSA_ch+0x24>
 8024706:	6812      	ldr	r2, [r2, #0]
 8024708:	2802      	cmp	r0, #2
 802470a:	f000 8138 	beq.w	802497e <forward_dense_integer_SSSA_ch+0x29a>
 802470e:	69e5      	ldr	r5, [r4, #28]
 8024710:	2d00      	cmp	r5, #0
 8024712:	f000 80f2 	beq.w	80248fa <forward_dense_integer_SSSA_ch+0x216>
 8024716:	8b26      	ldrh	r6, [r4, #24]
 8024718:	6829      	ldr	r1, [r5, #0]
 802471a:	2e01      	cmp	r6, #1
 802471c:	f240 8117 	bls.w	802494e <forward_dense_integer_SSSA_ch+0x26a>
 8024720:	686d      	ldr	r5, [r5, #4]
 8024722:	2803      	cmp	r0, #3
 8024724:	f000 812e 	beq.w	8024984 <forward_dense_integer_SSSA_ch+0x2a0>
 8024728:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 802472c:	69a8      	ldr	r0, [r5, #24]
 802472e:	f1b8 0f00 	cmp.w	r8, #0
 8024732:	f000 80f9 	beq.w	8024928 <forward_dense_integer_SSSA_ch+0x244>
 8024736:	6880      	ldr	r0, [r0, #8]
 8024738:	68dc      	ldr	r4, [r3, #12]
 802473a:	900d      	str	r0, [sp, #52]	@ 0x34
 802473c:	68d0      	ldr	r0, [r2, #12]
 802473e:	6866      	ldr	r6, [r4, #4]
 8024740:	f8d8 8000 	ldr.w	r8, [r8]
 8024744:	6995      	ldr	r5, [r2, #24]
 8024746:	fa1f fa86 	uxth.w	sl, r6
 802474a:	9609      	str	r6, [sp, #36]	@ 0x24
 802474c:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 8024750:	68c0      	ldr	r0, [r0, #12]
 8024752:	fa1f fb89 	uxth.w	fp, r9
 8024756:	fb00 f004 	mul.w	r0, r0, r4
 802475a:	699c      	ldr	r4, [r3, #24]
 802475c:	9008      	str	r0, [sp, #32]
 802475e:	f1b8 0f00 	cmp.w	r8, #0
 8024762:	d003      	beq.n	802476c <forward_dense_integer_SSSA_ch+0x88>
 8024764:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8024768:	f8d0 8008 	ldr.w	r8, [r0, #8]
 802476c:	681b      	ldr	r3, [r3, #0]
 802476e:	f8d2 c000 	ldr.w	ip, [r2]
 8024772:	6808      	ldr	r0, [r1, #0]
 8024774:	698a      	ldr	r2, [r1, #24]
 8024776:	2b00      	cmp	r3, #0
 8024778:	d076      	beq.n	8024868 <forward_dense_integer_SSSA_ch+0x184>
 802477a:	6859      	ldr	r1, [r3, #4]
 802477c:	2900      	cmp	r1, #0
 802477e:	f000 809f 	beq.w	80248c0 <forward_dense_integer_SSSA_ch+0x1dc>
 8024782:	885e      	ldrh	r6, [r3, #2]
 8024784:	2e00      	cmp	r6, #0
 8024786:	f000 808b 	beq.w	80248a0 <forward_dense_integer_SSSA_ch+0x1bc>
 802478a:	680f      	ldr	r7, [r1, #0]
 802478c:	ed97 0a00 	vldr	s0, [r7]
 8024790:	f1bc 0f00 	cmp.w	ip, #0
 8024794:	f000 808a 	beq.w	80248ac <forward_dense_integer_SSSA_ch+0x1c8>
 8024798:	f8dc e004 	ldr.w	lr, [ip, #4]
 802479c:	f1be 0f00 	cmp.w	lr, #0
 80247a0:	f000 8099 	beq.w	80248d6 <forward_dense_integer_SSSA_ch+0x1f2>
 80247a4:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 80247a8:	2e00      	cmp	r6, #0
 80247aa:	d051      	beq.n	8024850 <forward_dense_integer_SSSA_ch+0x16c>
 80247ac:	6897      	ldr	r7, [r2, #8]
 80247ae:	f8de 2000 	ldr.w	r2, [lr]
 80247b2:	68ad      	ldr	r5, [r5, #8]
 80247b4:	68a4      	ldr	r4, [r4, #8]
 80247b6:	edd2 0a00 	vldr	s1, [r2]
 80247ba:	2900      	cmp	r1, #0
 80247bc:	d052      	beq.n	8024864 <forward_dense_integer_SSSA_ch+0x180>
 80247be:	885b      	ldrh	r3, [r3, #2]
 80247c0:	2b00      	cmp	r3, #0
 80247c2:	f000 8091 	beq.w	80248e8 <forward_dense_integer_SSSA_ch+0x204>
 80247c6:	684b      	ldr	r3, [r1, #4]
 80247c8:	f993 3000 	ldrsb.w	r3, [r3]
 80247cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80247ce:	f1bc 0f00 	cmp.w	ip, #0
 80247d2:	f000 80ce 	beq.w	8024972 <forward_dense_integer_SSSA_ch+0x28e>
 80247d6:	f1be 0f00 	cmp.w	lr, #0
 80247da:	f000 808b 	beq.w	80248f4 <forward_dense_integer_SSSA_ch+0x210>
 80247de:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 80247e2:	2e00      	cmp	r6, #0
 80247e4:	d156      	bne.n	8024894 <forward_dense_integer_SSSA_ch+0x1b0>
 80247e6:	960b      	str	r6, [sp, #44]	@ 0x2c
 80247e8:	b110      	cbz	r0, 80247f0 <forward_dense_integer_SSSA_ch+0x10c>
 80247ea:	6840      	ldr	r0, [r0, #4]
 80247ec:	b100      	cbz	r0, 80247f0 <forward_dense_integer_SSSA_ch+0x10c>
 80247ee:	6800      	ldr	r0, [r0, #0]
 80247f0:	fa1f f989 	uxth.w	r9, r9
 80247f4:	4642      	mov	r2, r8
 80247f6:	4659      	mov	r1, fp
 80247f8:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
 80247fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80247fe:	f002 fe27 	bl	8027450 <align_factor_ch>
 8024802:	9b08      	ldr	r3, [sp, #32]
 8024804:	b1fb      	cbz	r3, 8024846 <forward_dense_integer_SSSA_ch+0x162>
 8024806:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 802480a:	4652      	mov	r2, sl
 802480c:	2600      	movs	r6, #0
 802480e:	468a      	mov	sl, r1
 8024810:	4639      	mov	r1, r7
 8024812:	4647      	mov	r7, r8
 8024814:	4698      	mov	r8, r3
 8024816:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024818:	3601      	adds	r6, #1
 802481a:	4620      	mov	r0, r4
 802481c:	4454      	add	r4, sl
 802481e:	9304      	str	r3, [sp, #16]
 8024820:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024822:	9303      	str	r3, [sp, #12]
 8024824:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024826:	9302      	str	r3, [sp, #8]
 8024828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802482a:	e9cd 5705 	strd	r5, r7, [sp, #20]
 802482e:	e9cd 7300 	strd	r7, r3, [sp]
 8024832:	465b      	mov	r3, fp
 8024834:	444d      	add	r5, r9
 8024836:	e9cd 1208 	strd	r1, r2, [sp, #32]
 802483a:	f005 fc97 	bl	802a16c <st_sssa8_ch_fully_connected>
 802483e:	4546      	cmp	r6, r8
 8024840:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8024844:	d1e7      	bne.n	8024816 <forward_dense_integer_SSSA_ch+0x132>
 8024846:	b00f      	add	sp, #60	@ 0x3c
 8024848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802484c:	6843      	ldr	r3, [r0, #4]
 802484e:	deff      	udf	#255	@ 0xff
 8024850:	68ad      	ldr	r5, [r5, #8]
 8024852:	68a4      	ldr	r4, [r4, #8]
 8024854:	6897      	ldr	r7, [r2, #8]
 8024856:	2b00      	cmp	r3, #0
 8024858:	d052      	beq.n	8024900 <forward_dense_integer_SSSA_ch+0x21c>
 802485a:	6859      	ldr	r1, [r3, #4]
 802485c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8024860:	2900      	cmp	r1, #0
 8024862:	d1ac      	bne.n	80247be <forward_dense_integer_SSSA_ch+0xda>
 8024864:	910c      	str	r1, [sp, #48]	@ 0x30
 8024866:	e7bc      	b.n	80247e2 <forward_dense_integer_SSSA_ch+0xfe>
 8024868:	f1bc 0f00 	cmp.w	ip, #0
 802486c:	d04d      	beq.n	802490a <forward_dense_integer_SSSA_ch+0x226>
 802486e:	f8dc e004 	ldr.w	lr, [ip, #4]
 8024872:	f1be 0f00 	cmp.w	lr, #0
 8024876:	d053      	beq.n	8024920 <forward_dense_integer_SSSA_ch+0x23c>
 8024878:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 802487c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8024880:	2e00      	cmp	r6, #0
 8024882:	d0e5      	beq.n	8024850 <forward_dense_integer_SSSA_ch+0x16c>
 8024884:	930c      	str	r3, [sp, #48]	@ 0x30
 8024886:	f8de 3000 	ldr.w	r3, [lr]
 802488a:	68ad      	ldr	r5, [r5, #8]
 802488c:	68a4      	ldr	r4, [r4, #8]
 802488e:	6897      	ldr	r7, [r2, #8]
 8024890:	edd3 0a00 	vldr	s1, [r3]
 8024894:	f8de 3004 	ldr.w	r3, [lr, #4]
 8024898:	f993 3000 	ldrsb.w	r3, [r3]
 802489c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802489e:	e7a3      	b.n	80247e8 <forward_dense_integer_SSSA_ch+0x104>
 80248a0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80248a4:	f1bc 0f00 	cmp.w	ip, #0
 80248a8:	f47f af76 	bne.w	8024798 <forward_dense_integer_SSSA_ch+0xb4>
 80248ac:	68ad      	ldr	r5, [r5, #8]
 80248ae:	68a4      	ldr	r4, [r4, #8]
 80248b0:	6897      	ldr	r7, [r2, #8]
 80248b2:	2e00      	cmp	r6, #0
 80248b4:	d14d      	bne.n	8024952 <forward_dense_integer_SSSA_ch+0x26e>
 80248b6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80248ba:	960c      	str	r6, [sp, #48]	@ 0x30
 80248bc:	960b      	str	r6, [sp, #44]	@ 0x2c
 80248be:	e793      	b.n	80247e8 <forward_dense_integer_SSSA_ch+0x104>
 80248c0:	f1bc 0f00 	cmp.w	ip, #0
 80248c4:	d021      	beq.n	802490a <forward_dense_integer_SSSA_ch+0x226>
 80248c6:	f8dc e004 	ldr.w	lr, [ip, #4]
 80248ca:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80248ce:	f1be 0f00 	cmp.w	lr, #0
 80248d2:	f47f af67 	bne.w	80247a4 <forward_dense_integer_SSSA_ch+0xc0>
 80248d6:	68ad      	ldr	r5, [r5, #8]
 80248d8:	68a4      	ldr	r4, [r4, #8]
 80248da:	6897      	ldr	r7, [r2, #8]
 80248dc:	b179      	cbz	r1, 80248fe <forward_dense_integer_SSSA_ch+0x21a>
 80248de:	885b      	ldrh	r3, [r3, #2]
 80248e0:	2b00      	cmp	r3, #0
 80248e2:	d13f      	bne.n	8024964 <forward_dense_integer_SSSA_ch+0x280>
 80248e4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80248e8:	2300      	movs	r3, #0
 80248ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80248ec:	f1be 0f00 	cmp.w	lr, #0
 80248f0:	f47f af75 	bne.w	80247de <forward_dense_integer_SSSA_ch+0xfa>
 80248f4:	2300      	movs	r3, #0
 80248f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80248f8:	e776      	b.n	80247e8 <forward_dense_integer_SSSA_ch+0x104>
 80248fa:	4629      	mov	r1, r5
 80248fc:	e711      	b.n	8024722 <forward_dense_integer_SSSA_ch+0x3e>
 80248fe:	460b      	mov	r3, r1
 8024900:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8024904:	930c      	str	r3, [sp, #48]	@ 0x30
 8024906:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024908:	e76e      	b.n	80247e8 <forward_dense_integer_SSSA_ch+0x104>
 802490a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802490e:	4663      	mov	r3, ip
 8024910:	eef0 0a40 	vmov.f32	s1, s0
 8024914:	68ad      	ldr	r5, [r5, #8]
 8024916:	68a4      	ldr	r4, [r4, #8]
 8024918:	6897      	ldr	r7, [r2, #8]
 802491a:	930c      	str	r3, [sp, #48]	@ 0x30
 802491c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802491e:	e763      	b.n	80247e8 <forward_dense_integer_SSSA_ch+0x104>
 8024920:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8024924:	4673      	mov	r3, lr
 8024926:	e7f3      	b.n	8024910 <forward_dense_integer_SSSA_ch+0x22c>
 8024928:	6880      	ldr	r0, [r0, #8]
 802492a:	68dc      	ldr	r4, [r3, #12]
 802492c:	900d      	str	r0, [sp, #52]	@ 0x34
 802492e:	68d0      	ldr	r0, [r2, #12]
 8024930:	6866      	ldr	r6, [r4, #4]
 8024932:	6995      	ldr	r5, [r2, #24]
 8024934:	fa1f fa86 	uxth.w	sl, r6
 8024938:	9609      	str	r6, [sp, #36]	@ 0x24
 802493a:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 802493e:	68c0      	ldr	r0, [r0, #12]
 8024940:	fa1f fb89 	uxth.w	fp, r9
 8024944:	fb00 f004 	mul.w	r0, r0, r4
 8024948:	699c      	ldr	r4, [r3, #24]
 802494a:	9008      	str	r0, [sp, #32]
 802494c:	e70e      	b.n	802476c <forward_dense_integer_SSSA_ch+0x88>
 802494e:	2500      	movs	r5, #0
 8024950:	e6e7      	b.n	8024722 <forward_dense_integer_SSSA_ch+0x3e>
 8024952:	684b      	ldr	r3, [r1, #4]
 8024954:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8024958:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 802495c:	f993 3000 	ldrsb.w	r3, [r3]
 8024960:	930c      	str	r3, [sp, #48]	@ 0x30
 8024962:	e741      	b.n	80247e8 <forward_dense_integer_SSSA_ch+0x104>
 8024964:	684b      	ldr	r3, [r1, #4]
 8024966:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 802496a:	f993 3000 	ldrsb.w	r3, [r3]
 802496e:	930c      	str	r3, [sp, #48]	@ 0x30
 8024970:	e7c0      	b.n	80248f4 <forward_dense_integer_SSSA_ch+0x210>
 8024972:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8024976:	e737      	b.n	80247e8 <forward_dense_integer_SSSA_ch+0x104>
 8024978:	2300      	movs	r3, #0
 802497a:	685b      	ldr	r3, [r3, #4]
 802497c:	deff      	udf	#255	@ 0xff
 802497e:	2300      	movs	r3, #0
 8024980:	685b      	ldr	r3, [r3, #4]
 8024982:	deff      	udf	#255	@ 0xff
 8024984:	2300      	movs	r3, #0
 8024986:	685b      	ldr	r3, [r3, #4]
 8024988:	deff      	udf	#255	@ 0xff
 802498a:	bf00      	nop

0802498c <forward_pad>:
 802498c:	7f03      	ldrb	r3, [r0, #28]
 802498e:	2b03      	cmp	r3, #3
 8024990:	d80b      	bhi.n	80249aa <forward_pad+0x1e>
 8024992:	e8df f003 	tbb	[pc, r3]
 8024996:	0608      	.short	0x0608
 8024998:	0204      	.short	0x0204
 802499a:	f000 bc1d 	b.w	80251d8 <forward_pad_8bit_ch1st_3x3_constant>
 802499e:	f000 bcad 	b.w	80252fc <forward_pad_edge>
 80249a2:	f000 bced 	b.w	8025380 <forward_pad_reflect>
 80249a6:	f000 bc61 	b.w	802526c <forward_pad_constant>
 80249aa:	4770      	bx	lr

080249ac <forward_concat>:
 80249ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249b0:	ed2d 8b04 	vpush	{d8-d9}
 80249b4:	6982      	ldr	r2, [r0, #24]
 80249b6:	b087      	sub	sp, #28
 80249b8:	8813      	ldrh	r3, [r2, #0]
 80249ba:	9002      	str	r0, [sp, #8]
 80249bc:	2b00      	cmp	r3, #0
 80249be:	f000 8290 	beq.w	8024ee2 <forward_concat+0x536>
 80249c2:	2b01      	cmp	r3, #1
 80249c4:	6856      	ldr	r6, [r2, #4]
 80249c6:	f000 828c 	beq.w	8024ee2 <forward_concat+0x536>
 80249ca:	6933      	ldr	r3, [r6, #16]
 80249cc:	9301      	str	r3, [sp, #4]
 80249ce:	b10b      	cbz	r3, 80249d4 <forward_concat+0x28>
 80249d0:	681b      	ldr	r3, [r3, #0]
 80249d2:	9301      	str	r3, [sp, #4]
 80249d4:	8830      	ldrh	r0, [r6, #0]
 80249d6:	2300      	movs	r3, #0
 80249d8:	4604      	mov	r4, r0
 80249da:	4619      	mov	r1, r3
 80249dc:	e00c      	b.n	80249f8 <forward_concat+0x4c>
 80249de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80249e2:	b172      	cbz	r2, 8024a02 <forward_concat+0x56>
 80249e4:	6992      	ldr	r2, [r2, #24]
 80249e6:	3301      	adds	r3, #1
 80249e8:	6812      	ldr	r2, [r2, #0]
 80249ea:	f3c2 4243 	ubfx	r2, r2, #17, #4
 80249ee:	2a01      	cmp	r2, #1
 80249f0:	bf0c      	ite	eq
 80249f2:	2201      	moveq	r2, #1
 80249f4:	2202      	movne	r2, #2
 80249f6:	4311      	orrs	r1, r2
 80249f8:	4298      	cmp	r0, r3
 80249fa:	d002      	beq.n	8024a02 <forward_concat+0x56>
 80249fc:	6872      	ldr	r2, [r6, #4]
 80249fe:	2a00      	cmp	r2, #0
 8024a00:	d1ed      	bne.n	80249de <forward_concat+0x32>
 8024a02:	9b01      	ldr	r3, [sp, #4]
 8024a04:	699a      	ldr	r2, [r3, #24]
 8024a06:	6813      	ldr	r3, [r2, #0]
 8024a08:	6897      	ldr	r7, [r2, #8]
 8024a0a:	f3c3 4243 	ubfx	r2, r3, #17, #4
 8024a0e:	2a01      	cmp	r2, #1
 8024a10:	d137      	bne.n	8024a82 <forward_concat+0xd6>
 8024a12:	2901      	cmp	r1, #1
 8024a14:	d13c      	bne.n	8024a90 <forward_concat+0xe4>
 8024a16:	f04f 0b00 	mov.w	fp, #0
 8024a1a:	455c      	cmp	r4, fp
 8024a1c:	d933      	bls.n	8024a86 <forward_concat+0xda>
 8024a1e:	6873      	ldr	r3, [r6, #4]
 8024a20:	b38b      	cbz	r3, 8024a86 <forward_concat+0xda>
 8024a22:	f853 402b 	ldr.w	r4, [r3, fp, lsl #2]
 8024a26:	b374      	cbz	r4, 8024a86 <forward_concat+0xda>
 8024a28:	9b02      	ldr	r3, [sp, #8]
 8024a2a:	6961      	ldr	r1, [r4, #20]
 8024a2c:	69d8      	ldr	r0, [r3, #28]
 8024a2e:	68e2      	ldr	r2, [r4, #12]
 8024a30:	9b01      	ldr	r3, [sp, #4]
 8024a32:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 8024a36:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8024a3a:	68db      	ldr	r3, [r3, #12]
 8024a3c:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8024a40:	fb02 f905 	mul.w	r9, r2, r5
 8024a44:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8024a48:	e9dc 0100 	ldrd	r0, r1, [ip]
 8024a4c:	fb03 f805 	mul.w	r8, r3, r5
 8024a50:	f00c ff2c 	bl	80318ac <ai_array_get_byte_size>
 8024a54:	69a3      	ldr	r3, [r4, #24]
 8024a56:	fbb0 f0f9 	udiv	r0, r0, r9
 8024a5a:	689c      	ldr	r4, [r3, #8]
 8024a5c:	fb09 4500 	mla	r5, r9, r0, r4
 8024a60:	42ac      	cmp	r4, r5
 8024a62:	d209      	bcs.n	8024a78 <forward_concat+0xcc>
 8024a64:	46ba      	mov	sl, r7
 8024a66:	4620      	mov	r0, r4
 8024a68:	444c      	add	r4, r9
 8024a6a:	4651      	mov	r1, sl
 8024a6c:	464a      	mov	r2, r9
 8024a6e:	f005 fe15 	bl	802a69c <st_int8_copy>
 8024a72:	42a5      	cmp	r5, r4
 8024a74:	44c2      	add	sl, r8
 8024a76:	d8f6      	bhi.n	8024a66 <forward_concat+0xba>
 8024a78:	444f      	add	r7, r9
 8024a7a:	f10b 0b01 	add.w	fp, fp, #1
 8024a7e:	8834      	ldrh	r4, [r6, #0]
 8024a80:	e7cb      	b.n	8024a1a <forward_concat+0x6e>
 8024a82:	2901      	cmp	r1, #1
 8024a84:	d108      	bne.n	8024a98 <forward_concat+0xec>
 8024a86:	b007      	add	sp, #28
 8024a88:	ecbd 8b04 	vpop	{d8-d9}
 8024a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a90:	2a01      	cmp	r2, #1
 8024a92:	d1f6      	bne.n	8024a82 <forward_concat+0xd6>
 8024a94:	078a      	lsls	r2, r1, #30
 8024a96:	d4f6      	bmi.n	8024a86 <forward_concat+0xda>
 8024a98:	9a01      	ldr	r2, [sp, #4]
 8024a9a:	6811      	ldr	r1, [r2, #0]
 8024a9c:	460c      	mov	r4, r1
 8024a9e:	2900      	cmp	r1, #0
 8024aa0:	f000 8209 	beq.w	8024eb6 <forward_concat+0x50a>
 8024aa4:	684a      	ldr	r2, [r1, #4]
 8024aa6:	2a00      	cmp	r2, #0
 8024aa8:	f000 8205 	beq.w	8024eb6 <forward_concat+0x50a>
 8024aac:	8849      	ldrh	r1, [r1, #2]
 8024aae:	2900      	cmp	r1, #0
 8024ab0:	f000 8201 	beq.w	8024eb6 <forward_concat+0x50a>
 8024ab4:	6812      	ldr	r2, [r2, #0]
 8024ab6:	edd2 8a00 	vldr	s17, [r2]
 8024aba:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8024abe:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8024ac2:	9603      	str	r6, [sp, #12]
 8024ac4:	4626      	mov	r6, r4
 8024ac6:	9305      	str	r3, [sp, #20]
 8024ac8:	2300      	movs	r3, #0
 8024aca:	ee87 9aa8 	vdiv.f32	s18, s15, s17
 8024ace:	ed9f 8ab2 	vldr	s16, [pc, #712]	@ 8024d98 <forward_concat+0x3ec>
 8024ad2:	4699      	mov	r9, r3
 8024ad4:	4548      	cmp	r0, r9
 8024ad6:	d9d6      	bls.n	8024a86 <forward_concat+0xda>
 8024ad8:	9b03      	ldr	r3, [sp, #12]
 8024ada:	685b      	ldr	r3, [r3, #4]
 8024adc:	2b00      	cmp	r3, #0
 8024ade:	d0d2      	beq.n	8024a86 <forward_concat+0xda>
 8024ae0:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8024ae4:	2b00      	cmp	r3, #0
 8024ae6:	d0ce      	beq.n	8024a86 <forward_concat+0xda>
 8024ae8:	9a02      	ldr	r2, [sp, #8]
 8024aea:	9304      	str	r3, [sp, #16]
 8024aec:	69d2      	ldr	r2, [r2, #28]
 8024aee:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
 8024af2:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 8024af6:	68d9      	ldr	r1, [r3, #12]
 8024af8:	9b01      	ldr	r3, [sp, #4]
 8024afa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8024afe:	fb01 fb04 	mul.w	fp, r1, r4
 8024b02:	68d9      	ldr	r1, [r3, #12]
 8024b04:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8024b08:	fb02 f804 	mul.w	r8, r2, r4
 8024b0c:	e9d0 4100 	ldrd	r4, r1, [r0]
 8024b10:	4620      	mov	r0, r4
 8024b12:	f00c fecb 	bl	80318ac <ai_array_get_byte_size>
 8024b16:	9b04      	ldr	r3, [sp, #16]
 8024b18:	f3c4 4243 	ubfx	r2, r4, #17, #4
 8024b1c:	6999      	ldr	r1, [r3, #24]
 8024b1e:	2a01      	cmp	r2, #1
 8024b20:	688c      	ldr	r4, [r1, #8]
 8024b22:	fbb0 f0fb 	udiv	r0, r0, fp
 8024b26:	fb0b 4500 	mla	r5, fp, r0, r4
 8024b2a:	d05f      	beq.n	8024bec <forward_concat+0x240>
 8024b2c:	681a      	ldr	r2, [r3, #0]
 8024b2e:	2a00      	cmp	r2, #0
 8024b30:	f000 80d3 	beq.w	8024cda <forward_concat+0x32e>
 8024b34:	6851      	ldr	r1, [r2, #4]
 8024b36:	2900      	cmp	r1, #0
 8024b38:	f000 8141 	beq.w	8024dbe <forward_concat+0x412>
 8024b3c:	8850      	ldrh	r0, [r2, #2]
 8024b3e:	2800      	cmp	r0, #0
 8024b40:	f000 813a 	beq.w	8024db8 <forward_concat+0x40c>
 8024b44:	680b      	ldr	r3, [r1, #0]
 8024b46:	edd3 6a00 	vldr	s13, [r3]
 8024b4a:	684b      	ldr	r3, [r1, #4]
 8024b4c:	f993 0000 	ldrsb.w	r0, [r3]
 8024b50:	2e00      	cmp	r6, #0
 8024b52:	f000 80c8 	beq.w	8024ce6 <forward_concat+0x33a>
 8024b56:	6873      	ldr	r3, [r6, #4]
 8024b58:	2b00      	cmp	r3, #0
 8024b5a:	f000 8134 	beq.w	8024dc6 <forward_concat+0x41a>
 8024b5e:	8871      	ldrh	r1, [r6, #2]
 8024b60:	b111      	cbz	r1, 8024b68 <forward_concat+0x1bc>
 8024b62:	685b      	ldr	r3, [r3, #4]
 8024b64:	f993 1000 	ldrsb.w	r1, [r3]
 8024b68:	eef4 8a66 	vcmp.f32	s17, s13
 8024b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b70:	bf0c      	ite	eq
 8024b72:	2301      	moveq	r3, #1
 8024b74:	2300      	movne	r3, #0
 8024b76:	4288      	cmp	r0, r1
 8024b78:	d102      	bne.n	8024b80 <forward_concat+0x1d4>
 8024b7a:	2b00      	cmp	r3, #0
 8024b7c:	f040 80b5 	bne.w	8024cea <forward_concat+0x33e>
 8024b80:	9905      	ldr	r1, [sp, #20]
 8024b82:	2900      	cmp	r1, #0
 8024b84:	d17e      	bne.n	8024c84 <forward_concat+0x2d8>
 8024b86:	2a00      	cmp	r2, #0
 8024b88:	f000 8198 	beq.w	8024ebc <forward_concat+0x510>
 8024b8c:	6851      	ldr	r1, [r2, #4]
 8024b8e:	2900      	cmp	r1, #0
 8024b90:	f000 818a 	beq.w	8024ea8 <forward_concat+0x4fc>
 8024b94:	8852      	ldrh	r2, [r2, #2]
 8024b96:	2a00      	cmp	r2, #0
 8024b98:	f000 8186 	beq.w	8024ea8 <forward_concat+0x4fc>
 8024b9c:	684a      	ldr	r2, [r1, #4]
 8024b9e:	f892 c000 	ldrb.w	ip, [r2]
 8024ba2:	2e00      	cmp	r6, #0
 8024ba4:	f000 8185 	beq.w	8024eb2 <forward_concat+0x506>
 8024ba8:	6871      	ldr	r1, [r6, #4]
 8024baa:	2900      	cmp	r1, #0
 8024bac:	f000 818c 	beq.w	8024ec8 <forward_concat+0x51c>
 8024bb0:	8872      	ldrh	r2, [r6, #2]
 8024bb2:	b10a      	cbz	r2, 8024bb8 <forward_concat+0x20c>
 8024bb4:	684a      	ldr	r2, [r1, #4]
 8024bb6:	7812      	ldrb	r2, [r2, #0]
 8024bb8:	4594      	cmp	ip, r2
 8024bba:	f040 8109 	bne.w	8024dd0 <forward_concat+0x424>
 8024bbe:	2b00      	cmp	r3, #0
 8024bc0:	f000 8106 	beq.w	8024dd0 <forward_concat+0x424>
 8024bc4:	42ac      	cmp	r4, r5
 8024bc6:	d209      	bcs.n	8024bdc <forward_concat+0x230>
 8024bc8:	46ba      	mov	sl, r7
 8024bca:	4620      	mov	r0, r4
 8024bcc:	445c      	add	r4, fp
 8024bce:	4651      	mov	r1, sl
 8024bd0:	465a      	mov	r2, fp
 8024bd2:	f005 fd63 	bl	802a69c <st_int8_copy>
 8024bd6:	42a5      	cmp	r5, r4
 8024bd8:	44c2      	add	sl, r8
 8024bda:	d8f6      	bhi.n	8024bca <forward_concat+0x21e>
 8024bdc:	eb07 0e0b 	add.w	lr, r7, fp
 8024be0:	4677      	mov	r7, lr
 8024be2:	9b03      	ldr	r3, [sp, #12]
 8024be4:	f109 0901 	add.w	r9, r9, #1
 8024be8:	8818      	ldrh	r0, [r3, #0]
 8024bea:	e773      	b.n	8024ad4 <forward_concat+0x128>
 8024bec:	f1bb 0f00 	cmp.w	fp, #0
 8024bf0:	4659      	mov	r1, fp
 8024bf2:	9b05      	ldr	r3, [sp, #20]
 8024bf4:	bfb8      	it	lt
 8024bf6:	f10b 0103 	addlt.w	r1, fp, #3
 8024bfa:	1089      	asrs	r1, r1, #2
 8024bfc:	2b00      	cmp	r3, #0
 8024bfe:	f040 8084 	bne.w	8024d0a <forward_concat+0x35e>
 8024c02:	2e00      	cmp	r6, #0
 8024c04:	f000 80e1 	beq.w	8024dca <forward_concat+0x41e>
 8024c08:	6873      	ldr	r3, [r6, #4]
 8024c0a:	2b00      	cmp	r3, #0
 8024c0c:	f000 80dd 	beq.w	8024dca <forward_concat+0x41e>
 8024c10:	8872      	ldrh	r2, [r6, #2]
 8024c12:	2a00      	cmp	r2, #0
 8024c14:	f000 80d9 	beq.w	8024dca <forward_concat+0x41e>
 8024c18:	685b      	ldr	r3, [r3, #4]
 8024c1a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8024c1e:	781b      	ldrb	r3, [r3, #0]
 8024c20:	ee06 3a90 	vmov	s13, r3
 8024c24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8024c28:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8024c2c:	42ac      	cmp	r4, r5
 8024c2e:	d227      	bcs.n	8024c80 <forward_concat+0x2d4>
 8024c30:	f1bb 0f03 	cmp.w	fp, #3
 8024c34:	eba8 0801 	sub.w	r8, r8, r1
 8024c38:	dd22      	ble.n	8024c80 <forward_concat+0x2d4>
 8024c3a:	46be      	mov	lr, r7
 8024c3c:	46f4      	mov	ip, lr
 8024c3e:	4620      	mov	r0, r4
 8024c40:	2200      	movs	r2, #0
 8024c42:	f810 3b01 	ldrb.w	r3, [r0], #1
 8024c46:	eef0 7a66 	vmov.f32	s15, s13
 8024c4a:	ee07 3a10 	vmov	s14, r3
 8024c4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8024c52:	eee7 7a09 	vfma.f32	s15, s14, s18
 8024c56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024c5a:	ee17 3a90 	vmov	r3, s15
 8024c5e:	f383 0308 	usat	r3, #8, r3
 8024c62:	3201      	adds	r2, #1
 8024c64:	f80c 3b01 	strb.w	r3, [ip], #1
 8024c68:	4291      	cmp	r1, r2
 8024c6a:	dcea      	bgt.n	8024c42 <forward_concat+0x296>
 8024c6c:	f1bb 0f03 	cmp.w	fp, #3
 8024c70:	bfcc      	ite	gt
 8024c72:	460b      	movgt	r3, r1
 8024c74:	2301      	movle	r3, #1
 8024c76:	441c      	add	r4, r3
 8024c78:	4443      	add	r3, r8
 8024c7a:	42a5      	cmp	r5, r4
 8024c7c:	449e      	add	lr, r3
 8024c7e:	d8dd      	bhi.n	8024c3c <forward_concat+0x290>
 8024c80:	440f      	add	r7, r1
 8024c82:	e7ae      	b.n	8024be2 <forward_concat+0x236>
 8024c84:	b142      	cbz	r2, 8024c98 <forward_concat+0x2ec>
 8024c86:	6851      	ldr	r1, [r2, #4]
 8024c88:	2900      	cmp	r1, #0
 8024c8a:	f000 811f 	beq.w	8024ecc <forward_concat+0x520>
 8024c8e:	8852      	ldrh	r2, [r2, #2]
 8024c90:	b112      	cbz	r2, 8024c98 <forward_concat+0x2ec>
 8024c92:	684a      	ldr	r2, [r1, #4]
 8024c94:	f992 2000 	ldrsb.w	r2, [r2]
 8024c98:	2e00      	cmp	r6, #0
 8024c9a:	f000 8111 	beq.w	8024ec0 <forward_concat+0x514>
 8024c9e:	6870      	ldr	r0, [r6, #4]
 8024ca0:	2800      	cmp	r0, #0
 8024ca2:	f000 810f 	beq.w	8024ec4 <forward_concat+0x518>
 8024ca6:	8871      	ldrh	r1, [r6, #2]
 8024ca8:	b111      	cbz	r1, 8024cb0 <forward_concat+0x304>
 8024caa:	6841      	ldr	r1, [r0, #4]
 8024cac:	f991 1000 	ldrsb.w	r1, [r1]
 8024cb0:	428a      	cmp	r2, r1
 8024cb2:	f040 80bf 	bne.w	8024e34 <forward_concat+0x488>
 8024cb6:	2b00      	cmp	r3, #0
 8024cb8:	f000 80bc 	beq.w	8024e34 <forward_concat+0x488>
 8024cbc:	42ac      	cmp	r4, r5
 8024cbe:	d28d      	bcs.n	8024bdc <forward_concat+0x230>
 8024cc0:	46ba      	mov	sl, r7
 8024cc2:	4620      	mov	r0, r4
 8024cc4:	445c      	add	r4, fp
 8024cc6:	4651      	mov	r1, sl
 8024cc8:	465a      	mov	r2, fp
 8024cca:	f005 fce7 	bl	802a69c <st_int8_copy>
 8024cce:	42a5      	cmp	r5, r4
 8024cd0:	44c2      	add	sl, r8
 8024cd2:	d8f6      	bhi.n	8024cc2 <forward_concat+0x316>
 8024cd4:	eb07 0e0b 	add.w	lr, r7, fp
 8024cd8:	e782      	b.n	8024be0 <forward_concat+0x234>
 8024cda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8024cde:	4610      	mov	r0, r2
 8024ce0:	2e00      	cmp	r6, #0
 8024ce2:	f47f af38 	bne.w	8024b56 <forward_concat+0x1aa>
 8024ce6:	4631      	mov	r1, r6
 8024ce8:	e73e      	b.n	8024b68 <forward_concat+0x1bc>
 8024cea:	42ac      	cmp	r4, r5
 8024cec:	f4bf af76 	bcs.w	8024bdc <forward_concat+0x230>
 8024cf0:	46ba      	mov	sl, r7
 8024cf2:	4620      	mov	r0, r4
 8024cf4:	445c      	add	r4, fp
 8024cf6:	4651      	mov	r1, sl
 8024cf8:	465a      	mov	r2, fp
 8024cfa:	f005 fccf 	bl	802a69c <st_int8_copy>
 8024cfe:	42a5      	cmp	r5, r4
 8024d00:	44c2      	add	sl, r8
 8024d02:	d8f6      	bhi.n	8024cf2 <forward_concat+0x346>
 8024d04:	eb07 0e0b 	add.w	lr, r7, fp
 8024d08:	e76a      	b.n	8024be0 <forward_concat+0x234>
 8024d0a:	2e00      	cmp	r6, #0
 8024d0c:	f000 80e0 	beq.w	8024ed0 <forward_concat+0x524>
 8024d10:	6873      	ldr	r3, [r6, #4]
 8024d12:	2b00      	cmp	r3, #0
 8024d14:	f000 80e2 	beq.w	8024edc <forward_concat+0x530>
 8024d18:	8872      	ldrh	r2, [r6, #2]
 8024d1a:	2a00      	cmp	r2, #0
 8024d1c:	f000 80db 	beq.w	8024ed6 <forward_concat+0x52a>
 8024d20:	685b      	ldr	r3, [r3, #4]
 8024d22:	f993 3000 	ldrsb.w	r3, [r3]
 8024d26:	ee06 3a90 	vmov	s13, r3
 8024d2a:	42ac      	cmp	r4, r5
 8024d2c:	d2a8      	bcs.n	8024c80 <forward_concat+0x2d4>
 8024d2e:	f1bb 0f03 	cmp.w	fp, #3
 8024d32:	eba8 0801 	sub.w	r8, r8, r1
 8024d36:	dda3      	ble.n	8024c80 <forward_concat+0x2d4>
 8024d38:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8024d3c:	46be      	mov	lr, r7
 8024d3e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8024d42:	46f4      	mov	ip, lr
 8024d44:	4620      	mov	r0, r4
 8024d46:	2200      	movs	r2, #0
 8024d48:	f810 3b01 	ldrb.w	r3, [r0], #1
 8024d4c:	eef0 7a66 	vmov.f32	s15, s13
 8024d50:	ee07 3a10 	vmov	s14, r3
 8024d54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8024d58:	eee7 7a09 	vfma.f32	s15, s14, s18
 8024d5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8024d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024d64:	d41a      	bmi.n	8024d9c <forward_concat+0x3f0>
 8024d66:	ee77 7a86 	vadd.f32	s15, s15, s12
 8024d6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024d6e:	ee17 3a90 	vmov	r3, s15
 8024d72:	f303 0307 	ssat	r3, #8, r3
 8024d76:	3201      	adds	r2, #1
 8024d78:	f80c 3b01 	strb.w	r3, [ip], #1
 8024d7c:	4291      	cmp	r1, r2
 8024d7e:	dce3      	bgt.n	8024d48 <forward_concat+0x39c>
 8024d80:	f1bb 0f03 	cmp.w	fp, #3
 8024d84:	bfcc      	ite	gt
 8024d86:	460b      	movgt	r3, r1
 8024d88:	2301      	movle	r3, #1
 8024d8a:	441c      	add	r4, r3
 8024d8c:	4443      	add	r3, r8
 8024d8e:	42a5      	cmp	r5, r4
 8024d90:	449e      	add	lr, r3
 8024d92:	d8d6      	bhi.n	8024d42 <forward_concat+0x396>
 8024d94:	440f      	add	r7, r1
 8024d96:	e724      	b.n	8024be2 <forward_concat+0x236>
 8024d98:	3efffffc 	.word	0x3efffffc
 8024d9c:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8024da0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024da4:	ee17 3a90 	vmov	r3, s15
 8024da8:	f303 0307 	ssat	r3, #8, r3
 8024dac:	3201      	adds	r2, #1
 8024dae:	f80c 3b01 	strb.w	r3, [ip], #1
 8024db2:	428a      	cmp	r2, r1
 8024db4:	dbc8      	blt.n	8024d48 <forward_concat+0x39c>
 8024db6:	e7e3      	b.n	8024d80 <forward_concat+0x3d4>
 8024db8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8024dbc:	e6c8      	b.n	8024b50 <forward_concat+0x1a4>
 8024dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8024dc2:	4608      	mov	r0, r1
 8024dc4:	e6c4      	b.n	8024b50 <forward_concat+0x1a4>
 8024dc6:	4619      	mov	r1, r3
 8024dc8:	e6ce      	b.n	8024b68 <forward_concat+0x1bc>
 8024dca:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8024dce:	e72d      	b.n	8024c2c <forward_concat+0x280>
 8024dd0:	42ac      	cmp	r4, r5
 8024dd2:	ee69 6a26 	vmul.f32	s13, s18, s13
 8024dd6:	f4bf af01 	bcs.w	8024bdc <forward_concat+0x230>
 8024dda:	f1bb 0f00 	cmp.w	fp, #0
 8024dde:	f77f aefd 	ble.w	8024bdc <forward_concat+0x230>
 8024de2:	ee07 2a90 	vmov	s15, r2
 8024de6:	eb07 0e0b 	add.w	lr, r7, fp
 8024dea:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8024dee:	4670      	mov	r0, lr
 8024df0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8024df4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8024df8:	463a      	mov	r2, r7
 8024dfa:	4621      	mov	r1, r4
 8024dfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024e00:	eeb0 7a46 	vmov.f32	s14, s12
 8024e04:	eba3 030c 	sub.w	r3, r3, ip
 8024e08:	ee07 3a90 	vmov	s15, r3
 8024e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024e10:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8024e14:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8024e18:	ee17 3a90 	vmov	r3, s15
 8024e1c:	f383 0308 	usat	r3, #8, r3
 8024e20:	f802 3b01 	strb.w	r3, [r2], #1
 8024e24:	4282      	cmp	r2, r0
 8024e26:	d1e9      	bne.n	8024dfc <forward_concat+0x450>
 8024e28:	445c      	add	r4, fp
 8024e2a:	4447      	add	r7, r8
 8024e2c:	4440      	add	r0, r8
 8024e2e:	42ac      	cmp	r4, r5
 8024e30:	d3e2      	bcc.n	8024df8 <forward_concat+0x44c>
 8024e32:	e6d5      	b.n	8024be0 <forward_concat+0x234>
 8024e34:	42ac      	cmp	r4, r5
 8024e36:	ee69 6a26 	vmul.f32	s13, s18, s13
 8024e3a:	f4bf aecf 	bcs.w	8024bdc <forward_concat+0x230>
 8024e3e:	f1bb 0f00 	cmp.w	fp, #0
 8024e42:	f77f aecb 	ble.w	8024bdc <forward_concat+0x230>
 8024e46:	ee07 1a90 	vmov	s15, r1
 8024e4a:	eb04 000b 	add.w	r0, r4, fp
 8024e4e:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8024e52:	46bc      	mov	ip, r7
 8024e54:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8024e58:	4601      	mov	r1, r0
 8024e5a:	46e6      	mov	lr, ip
 8024e5c:	f914 3b01 	ldrsb.w	r3, [r4], #1
 8024e60:	1a9b      	subs	r3, r3, r2
 8024e62:	ee07 3a90 	vmov	s15, r3
 8024e66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8024e6a:	eef0 7a46 	vmov.f32	s15, s12
 8024e6e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8024e72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8024e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024e7a:	bf4c      	ite	mi
 8024e7c:	ee77 7ac8 	vsubmi.f32	s15, s15, s16
 8024e80:	ee77 7aa5 	vaddpl.f32	s15, s15, s11
 8024e84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024e88:	ee17 3a90 	vmov	r3, s15
 8024e8c:	f303 0307 	ssat	r3, #8, r3
 8024e90:	428c      	cmp	r4, r1
 8024e92:	f80e 3b01 	strb.w	r3, [lr], #1
 8024e96:	d1e1      	bne.n	8024e5c <forward_concat+0x4b0>
 8024e98:	42a8      	cmp	r0, r5
 8024e9a:	44c4      	add	ip, r8
 8024e9c:	4459      	add	r1, fp
 8024e9e:	4604      	mov	r4, r0
 8024ea0:	f4bf ae9c 	bcs.w	8024bdc <forward_concat+0x230>
 8024ea4:	4458      	add	r0, fp
 8024ea6:	e7d8      	b.n	8024e5a <forward_concat+0x4ae>
 8024ea8:	f8dd c014 	ldr.w	ip, [sp, #20]
 8024eac:	2e00      	cmp	r6, #0
 8024eae:	f47f ae7b 	bne.w	8024ba8 <forward_concat+0x1fc>
 8024eb2:	4632      	mov	r2, r6
 8024eb4:	e680      	b.n	8024bb8 <forward_concat+0x20c>
 8024eb6:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8024eba:	e5fe      	b.n	8024aba <forward_concat+0x10e>
 8024ebc:	468c      	mov	ip, r1
 8024ebe:	e670      	b.n	8024ba2 <forward_concat+0x1f6>
 8024ec0:	4631      	mov	r1, r6
 8024ec2:	e6f5      	b.n	8024cb0 <forward_concat+0x304>
 8024ec4:	4601      	mov	r1, r0
 8024ec6:	e6f3      	b.n	8024cb0 <forward_concat+0x304>
 8024ec8:	460a      	mov	r2, r1
 8024eca:	e675      	b.n	8024bb8 <forward_concat+0x20c>
 8024ecc:	460a      	mov	r2, r1
 8024ece:	e6e3      	b.n	8024c98 <forward_concat+0x2ec>
 8024ed0:	ee06 6a90 	vmov	s13, r6
 8024ed4:	e729      	b.n	8024d2a <forward_concat+0x37e>
 8024ed6:	ee06 2a90 	vmov	s13, r2
 8024eda:	e726      	b.n	8024d2a <forward_concat+0x37e>
 8024edc:	ee06 3a90 	vmov	s13, r3
 8024ee0:	e723      	b.n	8024d2a <forward_concat+0x37e>
 8024ee2:	2300      	movs	r3, #0
 8024ee4:	685b      	ldr	r3, [r3, #4]
 8024ee6:	deff      	udf	#255	@ 0xff

08024ee8 <forward_reduce>:
 8024ee8:	6982      	ldr	r2, [r0, #24]
 8024eea:	8813      	ldrh	r3, [r2, #0]
 8024eec:	2b00      	cmp	r3, #0
 8024eee:	f000 808a 	beq.w	8025006 <forward_reduce+0x11e>
 8024ef2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ef6:	6852      	ldr	r2, [r2, #4]
 8024ef8:	b08b      	sub	sp, #44	@ 0x2c
 8024efa:	6856      	ldr	r6, [r2, #4]
 8024efc:	b106      	cbz	r6, 8024f00 <forward_reduce+0x18>
 8024efe:	6836      	ldr	r6, [r6, #0]
 8024f00:	2b01      	cmp	r3, #1
 8024f02:	f000 8082 	beq.w	802500a <forward_reduce+0x122>
 8024f06:	6913      	ldr	r3, [r2, #16]
 8024f08:	2b00      	cmp	r3, #0
 8024f0a:	f000 8081 	beq.w	8025010 <forward_reduce+0x128>
 8024f0e:	681c      	ldr	r4, [r3, #0]
 8024f10:	6972      	ldr	r2, [r6, #20]
 8024f12:	f104 0108 	add.w	r1, r4, #8
 8024f16:	6857      	ldr	r7, [r2, #4]
 8024f18:	2200      	movs	r2, #0
 8024f1a:	e9d0 3807 	ldrd	r3, r8, [r0, #28]
 8024f1e:	a803      	add	r0, sp, #12
 8024f20:	9301      	str	r3, [sp, #4]
 8024f22:	6963      	ldr	r3, [r4, #20]
 8024f24:	685d      	ldr	r5, [r3, #4]
 8024f26:	ab05      	add	r3, sp, #20
 8024f28:	9209      	str	r2, [sp, #36]	@ 0x24
 8024f2a:	9304      	str	r3, [sp, #16]
 8024f2c:	f240 5302 	movw	r3, #1282	@ 0x502
 8024f30:	e9cd 2205 	strd	r2, r2, [sp, #20]
 8024f34:	e9cd 2207 	strd	r2, r2, [sp, #28]
 8024f38:	9303      	str	r3, [sp, #12]
 8024f3a:	f106 0208 	add.w	r2, r6, #8
 8024f3e:	463b      	mov	r3, r7
 8024f40:	f00c fd16 	bl	8031970 <core_compute_offsets>
 8024f44:	69b3      	ldr	r3, [r6, #24]
 8024f46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024f4a:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8024f4e:	f00c fcad 	bl	80318ac <ai_array_get_byte_size>
 8024f52:	69a2      	ldr	r2, [r4, #24]
 8024f54:	6894      	ldr	r4, [r2, #8]
 8024f56:	e9d2 0100 	ldrd	r0, r1, [r2]
 8024f5a:	f00c fca7 	bl	80318ac <ai_array_get_byte_size>
 8024f5e:	eb04 0900 	add.w	r9, r4, r0
 8024f62:	454c      	cmp	r4, r9
 8024f64:	d209      	bcs.n	8024f7a <forward_reduce+0x92>
 8024f66:	46a2      	mov	sl, r4
 8024f68:	9b01      	ldr	r3, [sp, #4]
 8024f6a:	4651      	mov	r1, sl
 8024f6c:	44aa      	add	sl, r5
 8024f6e:	462a      	mov	r2, r5
 8024f70:	6898      	ldr	r0, [r3, #8]
 8024f72:	f005 fb93 	bl	802a69c <st_int8_copy>
 8024f76:	45d1      	cmp	r9, sl
 8024f78:	d8f6      	bhi.n	8024f68 <forward_reduce+0x80>
 8024f7a:	68f2      	ldr	r2, [r6, #12]
 8024f7c:	68d1      	ldr	r1, [r2, #12]
 8024f7e:	2900      	cmp	r1, #0
 8024f80:	d03e      	beq.n	8025000 <forward_reduce+0x118>
 8024f82:	2300      	movs	r3, #0
 8024f84:	6895      	ldr	r5, [r2, #8]
 8024f86:	9301      	str	r3, [sp, #4]
 8024f88:	2d00      	cmp	r5, #0
 8024f8a:	d039      	beq.n	8025000 <forward_reduce+0x118>
 8024f8c:	68b1      	ldr	r1, [r6, #8]
 8024f8e:	f04f 0a00 	mov.w	sl, #0
 8024f92:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8024f96:	f04f 0900 	mov.w	r9, #0
 8024f9a:	2904      	cmp	r1, #4
 8024f9c:	bf8c      	ite	hi
 8024f9e:	6910      	ldrhi	r0, [r2, #16]
 8024fa0:	2001      	movls	r0, #1
 8024fa2:	4581      	cmp	r9, r0
 8024fa4:	d21c      	bcs.n	8024fe0 <forward_reduce+0xf8>
 8024fa6:	6850      	ldr	r0, [r2, #4]
 8024fa8:	b180      	cbz	r0, 8024fcc <forward_reduce+0xe4>
 8024faa:	2500      	movs	r5, #0
 8024fac:	465a      	mov	r2, fp
 8024fae:	4621      	mov	r1, r4
 8024fb0:	4620      	mov	r0, r4
 8024fb2:	3501      	adds	r5, #1
 8024fb4:	47c0      	blx	r8
 8024fb6:	9904      	ldr	r1, [sp, #16]
 8024fb8:	68f2      	ldr	r2, [r6, #12]
 8024fba:	44bb      	add	fp, r7
 8024fbc:	6848      	ldr	r0, [r1, #4]
 8024fbe:	6851      	ldr	r1, [r2, #4]
 8024fc0:	4404      	add	r4, r0
 8024fc2:	42a9      	cmp	r1, r5
 8024fc4:	d8f2      	bhi.n	8024fac <forward_reduce+0xc4>
 8024fc6:	68b1      	ldr	r1, [r6, #8]
 8024fc8:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8024fcc:	9803      	ldr	r0, [sp, #12]
 8024fce:	f5b0 6fa0 	cmp.w	r0, #1280	@ 0x500
 8024fd2:	d302      	bcc.n	8024fda <forward_reduce+0xf2>
 8024fd4:	9804      	ldr	r0, [sp, #16]
 8024fd6:	6900      	ldr	r0, [r0, #16]
 8024fd8:	4404      	add	r4, r0
 8024fda:	f109 0901 	add.w	r9, r9, #1
 8024fde:	e7dc      	b.n	8024f9a <forward_reduce+0xb2>
 8024fe0:	9b04      	ldr	r3, [sp, #16]
 8024fe2:	f10a 0a01 	add.w	sl, sl, #1
 8024fe6:	6895      	ldr	r5, [r2, #8]
 8024fe8:	6898      	ldr	r0, [r3, #8]
 8024fea:	4555      	cmp	r5, sl
 8024fec:	4404      	add	r4, r0
 8024fee:	d8d2      	bhi.n	8024f96 <forward_reduce+0xae>
 8024ff0:	68d8      	ldr	r0, [r3, #12]
 8024ff2:	9b01      	ldr	r3, [sp, #4]
 8024ff4:	68d1      	ldr	r1, [r2, #12]
 8024ff6:	4404      	add	r4, r0
 8024ff8:	3301      	adds	r3, #1
 8024ffa:	428b      	cmp	r3, r1
 8024ffc:	9301      	str	r3, [sp, #4]
 8024ffe:	d3c3      	bcc.n	8024f88 <forward_reduce+0xa0>
 8025000:	b00b      	add	sp, #44	@ 0x2c
 8025002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025006:	685b      	ldr	r3, [r3, #4]
 8025008:	deff      	udf	#255	@ 0xff
 802500a:	2300      	movs	r3, #0
 802500c:	685b      	ldr	r3, [r3, #4]
 802500e:	deff      	udf	#255	@ 0xff
 8025010:	695b      	ldr	r3, [r3, #20]
 8025012:	deff      	udf	#255	@ 0xff

08025014 <forward_nl_integer>:
 8025014:	6982      	ldr	r2, [r0, #24]
 8025016:	8813      	ldrh	r3, [r2, #0]
 8025018:	2b00      	cmp	r3, #0
 802501a:	d02f      	beq.n	802507c <forward_nl_integer+0x68>
 802501c:	b470      	push	{r4, r5, r6}
 802501e:	6852      	ldr	r2, [r2, #4]
 8025020:	6855      	ldr	r5, [r2, #4]
 8025022:	b105      	cbz	r5, 8025026 <forward_nl_integer+0x12>
 8025024:	682d      	ldr	r5, [r5, #0]
 8025026:	2b01      	cmp	r3, #1
 8025028:	d048      	beq.n	80250bc <forward_nl_integer+0xa8>
 802502a:	6916      	ldr	r6, [r2, #16]
 802502c:	b106      	cbz	r6, 8025030 <forward_nl_integer+0x1c>
 802502e:	6836      	ldr	r6, [r6, #0]
 8025030:	68ab      	ldr	r3, [r5, #8]
 8025032:	0a1b      	lsrs	r3, r3, #8
 8025034:	d033      	beq.n	802509e <forward_nl_integer+0x8a>
 8025036:	68ec      	ldr	r4, [r5, #12]
 8025038:	2201      	movs	r2, #1
 802503a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802503e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8025042:	429c      	cmp	r4, r3
 8025044:	fb01 f202 	mul.w	r2, r1, r2
 8025048:	d1f9      	bne.n	802503e <forward_nl_integer+0x2a>
 802504a:	69ab      	ldr	r3, [r5, #24]
 802504c:	69c4      	ldr	r4, [r0, #28]
 802504e:	6819      	ldr	r1, [r3, #0]
 8025050:	69b0      	ldr	r0, [r6, #24]
 8025052:	020d      	lsls	r5, r1, #8
 8025054:	68a4      	ldr	r4, [r4, #8]
 8025056:	d513      	bpl.n	8025080 <forward_nl_integer+0x6c>
 8025058:	689e      	ldr	r6, [r3, #8]
 802505a:	6885      	ldr	r5, [r0, #8]
 802505c:	b162      	cbz	r2, 8025078 <forward_nl_integer+0x64>
 802505e:	1e70      	subs	r0, r6, #1
 8025060:	4603      	mov	r3, r0
 8025062:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8025066:	3302      	adds	r3, #2
 8025068:	f081 0180 	eor.w	r1, r1, #128	@ 0x80
 802506c:	1b9b      	subs	r3, r3, r6
 802506e:	5c61      	ldrb	r1, [r4, r1]
 8025070:	429a      	cmp	r2, r3
 8025072:	f805 1b01 	strb.w	r1, [r5], #1
 8025076:	d8f3      	bhi.n	8025060 <forward_nl_integer+0x4c>
 8025078:	bc70      	pop	{r4, r5, r6}
 802507a:	4770      	bx	lr
 802507c:	685b      	ldr	r3, [r3, #4]
 802507e:	deff      	udf	#255	@ 0xff
 8025080:	6899      	ldr	r1, [r3, #8]
 8025082:	6883      	ldr	r3, [r0, #8]
 8025084:	2a00      	cmp	r2, #0
 8025086:	d0f7      	beq.n	8025078 <forward_nl_integer+0x64>
 8025088:	3901      	subs	r1, #1
 802508a:	441a      	add	r2, r3
 802508c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8025090:	5c20      	ldrb	r0, [r4, r0]
 8025092:	f803 0b01 	strb.w	r0, [r3], #1
 8025096:	4293      	cmp	r3, r2
 8025098:	d1f8      	bne.n	802508c <forward_nl_integer+0x78>
 802509a:	bc70      	pop	{r4, r5, r6}
 802509c:	4770      	bx	lr
 802509e:	69ab      	ldr	r3, [r5, #24]
 80250a0:	69c0      	ldr	r0, [r0, #28]
 80250a2:	6819      	ldr	r1, [r3, #0]
 80250a4:	69b2      	ldr	r2, [r6, #24]
 80250a6:	0209      	lsls	r1, r1, #8
 80250a8:	6884      	ldr	r4, [r0, #8]
 80250aa:	d503      	bpl.n	80250b4 <forward_nl_integer+0xa0>
 80250ac:	6895      	ldr	r5, [r2, #8]
 80250ae:	2201      	movs	r2, #1
 80250b0:	689e      	ldr	r6, [r3, #8]
 80250b2:	e7d4      	b.n	802505e <forward_nl_integer+0x4a>
 80250b4:	6899      	ldr	r1, [r3, #8]
 80250b6:	6893      	ldr	r3, [r2, #8]
 80250b8:	2201      	movs	r2, #1
 80250ba:	e7e5      	b.n	8025088 <forward_nl_integer+0x74>
 80250bc:	2300      	movs	r3, #0
 80250be:	685b      	ldr	r3, [r3, #4]
 80250c0:	deff      	udf	#255	@ 0xff
 80250c2:	bf00      	nop

080250c4 <forward_bn>:
 80250c4:	6982      	ldr	r2, [r0, #24]
 80250c6:	8813      	ldrh	r3, [r2, #0]
 80250c8:	2b00      	cmp	r3, #0
 80250ca:	d030      	beq.n	802512e <forward_bn+0x6a>
 80250cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80250ce:	6852      	ldr	r2, [r2, #4]
 80250d0:	b083      	sub	sp, #12
 80250d2:	6855      	ldr	r5, [r2, #4]
 80250d4:	b105      	cbz	r5, 80250d8 <forward_bn+0x14>
 80250d6:	682d      	ldr	r5, [r5, #0]
 80250d8:	2b01      	cmp	r3, #1
 80250da:	d036      	beq.n	802514a <forward_bn+0x86>
 80250dc:	6916      	ldr	r6, [r2, #16]
 80250de:	b106      	cbz	r6, 80250e2 <forward_bn+0x1e>
 80250e0:	6836      	ldr	r6, [r6, #0]
 80250e2:	2b02      	cmp	r3, #2
 80250e4:	d025      	beq.n	8025132 <forward_bn+0x6e>
 80250e6:	69d3      	ldr	r3, [r2, #28]
 80250e8:	b333      	cbz	r3, 8025138 <forward_bn+0x74>
 80250ea:	8b12      	ldrh	r2, [r2, #24]
 80250ec:	681f      	ldr	r7, [r3, #0]
 80250ee:	2a01      	cmp	r2, #1
 80250f0:	d929      	bls.n	8025146 <forward_bn+0x82>
 80250f2:	685b      	ldr	r3, [r3, #4]
 80250f4:	e9d5 2002 	ldrd	r2, r0, [r5, #8]
 80250f8:	0a12      	lsrs	r2, r2, #8
 80250fa:	d022      	beq.n	8025142 <forward_bn+0x7e>
 80250fc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8025100:	2401      	movs	r4, #1
 8025102:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8025106:	4290      	cmp	r0, r2
 8025108:	fb01 f404 	mul.w	r4, r1, r4
 802510c:	d1f9      	bne.n	8025102 <forward_bn+0x3e>
 802510e:	69a9      	ldr	r1, [r5, #24]
 8025110:	69b6      	ldr	r6, [r6, #24]
 8025112:	69ba      	ldr	r2, [r7, #24]
 8025114:	6845      	ldr	r5, [r0, #4]
 8025116:	6889      	ldr	r1, [r1, #8]
 8025118:	68b0      	ldr	r0, [r6, #8]
 802511a:	6892      	ldr	r2, [r2, #8]
 802511c:	b10b      	cbz	r3, 8025122 <forward_bn+0x5e>
 802511e:	699b      	ldr	r3, [r3, #24]
 8025120:	689b      	ldr	r3, [r3, #8]
 8025122:	e9cd 4500 	strd	r4, r5, [sp]
 8025126:	f001 fdcf 	bl	8026cc8 <forward_lite_bn_if32of32wf32>
 802512a:	b003      	add	sp, #12
 802512c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802512e:	685b      	ldr	r3, [r3, #4]
 8025130:	deff      	udf	#255	@ 0xff
 8025132:	2300      	movs	r3, #0
 8025134:	685b      	ldr	r3, [r3, #4]
 8025136:	deff      	udf	#255	@ 0xff
 8025138:	e9d5 2002 	ldrd	r2, r0, [r5, #8]
 802513c:	461f      	mov	r7, r3
 802513e:	0a12      	lsrs	r2, r2, #8
 8025140:	d1dc      	bne.n	80250fc <forward_bn+0x38>
 8025142:	2401      	movs	r4, #1
 8025144:	e7e3      	b.n	802510e <forward_bn+0x4a>
 8025146:	2300      	movs	r3, #0
 8025148:	e7d4      	b.n	80250f4 <forward_bn+0x30>
 802514a:	2300      	movs	r3, #0
 802514c:	685b      	ldr	r3, [r3, #4]
 802514e:	deff      	udf	#255	@ 0xff

08025150 <forward_norm>:
 8025150:	6982      	ldr	r2, [r0, #24]
 8025152:	8813      	ldrh	r3, [r2, #0]
 8025154:	2b00      	cmp	r3, #0
 8025156:	d037      	beq.n	80251c8 <forward_norm+0x78>
 8025158:	6852      	ldr	r2, [r2, #4]
 802515a:	4684      	mov	ip, r0
 802515c:	6850      	ldr	r0, [r2, #4]
 802515e:	b100      	cbz	r0, 8025162 <forward_norm+0x12>
 8025160:	6800      	ldr	r0, [r0, #0]
 8025162:	2b01      	cmp	r3, #1
 8025164:	d034      	beq.n	80251d0 <forward_norm+0x80>
 8025166:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025168:	6917      	ldr	r7, [r2, #16]
 802516a:	b085      	sub	sp, #20
 802516c:	b107      	cbz	r7, 8025170 <forward_norm+0x20>
 802516e:	683f      	ldr	r7, [r7, #0]
 8025170:	f89c 401c 	ldrb.w	r4, [ip, #28]
 8025174:	6941      	ldr	r1, [r0, #20]
 8025176:	6882      	ldr	r2, [r0, #8]
 8025178:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
 802517c:	68c5      	ldr	r5, [r0, #12]
 802517e:	0a12      	lsrs	r2, r2, #8
 8025180:	6849      	ldr	r1, [r1, #4]
 8025182:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8025186:	fb96 f6f1 	sdiv	r6, r6, r1
 802518a:	d01f      	beq.n	80251cc <forward_norm+0x7c>
 802518c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8025190:	2401      	movs	r4, #1
 8025192:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8025196:	4295      	cmp	r5, r2
 8025198:	fb01 f404 	mul.w	r4, r1, r4
 802519c:	d1f9      	bne.n	8025192 <forward_norm+0x42>
 802519e:	69ba      	ldr	r2, [r7, #24]
 80251a0:	6981      	ldr	r1, [r0, #24]
 80251a2:	ed9c 0a08 	vldr	s0, [ip, #32]
 80251a6:	6890      	ldr	r0, [r2, #8]
 80251a8:	6889      	ldr	r1, [r1, #8]
 80251aa:	e9cd 6400 	strd	r6, r4, [sp]
 80251ae:	f89c 2025 	ldrb.w	r2, [ip, #37]	@ 0x25
 80251b2:	f89c 4024 	ldrb.w	r4, [ip, #36]	@ 0x24
 80251b6:	9402      	str	r4, [sp, #8]
 80251b8:	1e54      	subs	r4, r2, #1
 80251ba:	2c02      	cmp	r4, #2
 80251bc:	bf88      	it	hi
 80251be:	2200      	movhi	r2, #0
 80251c0:	f001 fe12 	bl	8026de8 <forward_lite_norm_if32of32>
 80251c4:	b005      	add	sp, #20
 80251c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80251c8:	685b      	ldr	r3, [r3, #4]
 80251ca:	deff      	udf	#255	@ 0xff
 80251cc:	2401      	movs	r4, #1
 80251ce:	e7e6      	b.n	802519e <forward_norm+0x4e>
 80251d0:	2300      	movs	r3, #0
 80251d2:	685b      	ldr	r3, [r3, #4]
 80251d4:	deff      	udf	#255	@ 0xff
 80251d6:	bf00      	nop

080251d8 <forward_pad_8bit_ch1st_3x3_constant>:
 80251d8:	6982      	ldr	r2, [r0, #24]
 80251da:	8813      	ldrh	r3, [r2, #0]
 80251dc:	2b00      	cmp	r3, #0
 80251de:	d03e      	beq.n	802525e <forward_pad_8bit_ch1st_3x3_constant+0x86>
 80251e0:	6852      	ldr	r2, [r2, #4]
 80251e2:	6851      	ldr	r1, [r2, #4]
 80251e4:	b101      	cbz	r1, 80251e8 <forward_pad_8bit_ch1st_3x3_constant+0x10>
 80251e6:	6809      	ldr	r1, [r1, #0]
 80251e8:	2b01      	cmp	r3, #1
 80251ea:	d03c      	beq.n	8025266 <forward_pad_8bit_ch1st_3x3_constant+0x8e>
 80251ec:	6913      	ldr	r3, [r2, #16]
 80251ee:	2b00      	cmp	r3, #0
 80251f0:	d037      	beq.n	8025262 <forward_pad_8bit_ch1st_3x3_constant+0x8a>
 80251f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80251f6:	e9d0 5209 	ldrd	r5, r2, [r0, #36]	@ 0x24
 80251fa:	681f      	ldr	r7, [r3, #0]
 80251fc:	b085      	sub	sp, #20
 80251fe:	68cb      	ldr	r3, [r1, #12]
 8025200:	f9b5 8008 	ldrsh.w	r8, [r5, #8]
 8025204:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8025208:	f9b5 900c 	ldrsh.w	r9, [r5, #12]
 802520c:	68db      	ldr	r3, [r3, #12]
 802520e:	6892      	ldr	r2, [r2, #8]
 8025210:	e9d5 0400 	ldrd	r0, r4, [r5]
 8025214:	e9d1 6105 	ldrd	r6, r1, [r1, #20]
 8025218:	4320      	orrs	r0, r4
 802521a:	6875      	ldr	r5, [r6, #4]
 802521c:	b204      	sxth	r4, r0
 802521e:	6888      	ldr	r0, [r1, #8]
 8025220:	e9d7 7105 	ldrd	r7, r1, [r7, #20]
 8025224:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8025228:	6889      	ldr	r1, [r1, #8]
 802522a:	68f7      	ldr	r7, [r6, #12]
 802522c:	b974      	cbnz	r4, 802524c <forward_pad_8bit_ch1st_3x3_constant+0x74>
 802522e:	f1b8 0f02 	cmp.w	r8, #2
 8025232:	d10b      	bne.n	802524c <forward_pad_8bit_ch1st_3x3_constant+0x74>
 8025234:	f1b9 0f02 	cmp.w	r9, #2
 8025238:	d108      	bne.n	802524c <forward_pad_8bit_ch1st_3x3_constant+0x74>
 802523a:	e9cd 7e02 	strd	r7, lr, [sp, #8]
 802523e:	e9cd c500 	strd	ip, r5, [sp]
 8025242:	f001 fe09 	bl	8026e58 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022>
 8025246:	b005      	add	sp, #20
 8025248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802524c:	e9cd 7e02 	strd	r7, lr, [sp, #8]
 8025250:	e9cd c500 	strd	ip, r5, [sp]
 8025254:	f001 fe34 	bl	8026ec0 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111>
 8025258:	b005      	add	sp, #20
 802525a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802525e:	685b      	ldr	r3, [r3, #4]
 8025260:	deff      	udf	#255	@ 0xff
 8025262:	699b      	ldr	r3, [r3, #24]
 8025264:	deff      	udf	#255	@ 0xff
 8025266:	2300      	movs	r3, #0
 8025268:	685b      	ldr	r3, [r3, #4]
 802526a:	deff      	udf	#255	@ 0xff

0802526c <forward_pad_constant>:
 802526c:	6982      	ldr	r2, [r0, #24]
 802526e:	8813      	ldrh	r3, [r2, #0]
 8025270:	2b00      	cmp	r3, #0
 8025272:	d03b      	beq.n	80252ec <forward_pad_constant+0x80>
 8025274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025278:	6852      	ldr	r2, [r2, #4]
 802527a:	b088      	sub	sp, #32
 802527c:	6854      	ldr	r4, [r2, #4]
 802527e:	b104      	cbz	r4, 8025282 <forward_pad_constant+0x16>
 8025280:	6824      	ldr	r4, [r4, #0]
 8025282:	2b01      	cmp	r3, #1
 8025284:	d034      	beq.n	80252f0 <forward_pad_constant+0x84>
 8025286:	6913      	ldr	r3, [r2, #16]
 8025288:	2b00      	cmp	r3, #0
 802528a:	d034      	beq.n	80252f6 <forward_pad_constant+0x8a>
 802528c:	6819      	ldr	r1, [r3, #0]
 802528e:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8025290:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8025292:	f9b5 600c 	ldrsh.w	r6, [r5, #12]
 8025296:	69a3      	ldr	r3, [r4, #24]
 8025298:	6967      	ldr	r7, [r4, #20]
 802529a:	f8d3 8000 	ldr.w	r8, [r3]
 802529e:	6892      	ldr	r2, [r2, #8]
 80252a0:	e9d1 0105 	ldrd	r0, r1, [r1, #20]
 80252a4:	e9d0 ec02 	ldrd	lr, ip, [r0, #8]
 80252a8:	6889      	ldr	r1, [r1, #8]
 80252aa:	fb0e f606 	mul.w	r6, lr, r6
 80252ae:	6898      	ldr	r0, [r3, #8]
 80252b0:	f3c8 13c6 	ubfx	r3, r8, #7, #7
 80252b4:	9606      	str	r6, [sp, #24]
 80252b6:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 80252ba:	fb0e f606 	mul.w	r6, lr, r6
 80252be:	9605      	str	r6, [sp, #20]
 80252c0:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 80252c4:	fb0c f606 	mul.w	r6, ip, r6
 80252c8:	9604      	str	r6, [sp, #16]
 80252ca:	f9b5 5000 	ldrsh.w	r5, [r5]
 80252ce:	fb0c f505 	mul.w	r5, ip, r5
 80252d2:	9503      	str	r5, [sp, #12]
 80252d4:	68fd      	ldr	r5, [r7, #12]
 80252d6:	9502      	str	r5, [sp, #8]
 80252d8:	687d      	ldr	r5, [r7, #4]
 80252da:	9501      	str	r5, [sp, #4]
 80252dc:	68e4      	ldr	r4, [r4, #12]
 80252de:	68e4      	ldr	r4, [r4, #12]
 80252e0:	9400      	str	r4, [sp, #0]
 80252e2:	f001 fead 	bl	8027040 <forward_lite_pad_constant>
 80252e6:	b008      	add	sp, #32
 80252e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80252ec:	685b      	ldr	r3, [r3, #4]
 80252ee:	deff      	udf	#255	@ 0xff
 80252f0:	2300      	movs	r3, #0
 80252f2:	685b      	ldr	r3, [r3, #4]
 80252f4:	deff      	udf	#255	@ 0xff
 80252f6:	699b      	ldr	r3, [r3, #24]
 80252f8:	deff      	udf	#255	@ 0xff
 80252fa:	bf00      	nop

080252fc <forward_pad_edge>:
 80252fc:	6982      	ldr	r2, [r0, #24]
 80252fe:	8813      	ldrh	r3, [r2, #0]
 8025300:	2b00      	cmp	r3, #0
 8025302:	d035      	beq.n	8025370 <forward_pad_edge+0x74>
 8025304:	6851      	ldr	r1, [r2, #4]
 8025306:	684a      	ldr	r2, [r1, #4]
 8025308:	b102      	cbz	r2, 802530c <forward_pad_edge+0x10>
 802530a:	6812      	ldr	r2, [r2, #0]
 802530c:	2b01      	cmp	r3, #1
 802530e:	d031      	beq.n	8025374 <forward_pad_edge+0x78>
 8025310:	690b      	ldr	r3, [r1, #16]
 8025312:	2b00      	cmp	r3, #0
 8025314:	d031      	beq.n	802537a <forward_pad_edge+0x7e>
 8025316:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025318:	681b      	ldr	r3, [r3, #0]
 802531a:	b089      	sub	sp, #36	@ 0x24
 802531c:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 802531e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8025322:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 8025326:	6990      	ldr	r0, [r2, #24]
 8025328:	6957      	ldr	r7, [r2, #20]
 802532a:	6880      	ldr	r0, [r0, #8]
 802532c:	f8de 200c 	ldr.w	r2, [lr, #12]
 8025330:	e9d3 c105 	ldrd	ip, r1, [r3, #20]
 8025334:	f9b5 3000 	ldrsh.w	r3, [r5]
 8025338:	f8dc 400c 	ldr.w	r4, [ip, #12]
 802533c:	6889      	ldr	r1, [r1, #8]
 802533e:	fb04 f606 	mul.w	r6, r4, r6
 8025342:	9606      	str	r6, [sp, #24]
 8025344:	f8dc c008 	ldr.w	ip, [ip, #8]
 8025348:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 802534c:	9403      	str	r4, [sp, #12]
 802534e:	fb0c f606 	mul.w	r6, ip, r6
 8025352:	fb03 f404 	mul.w	r4, r3, r4
 8025356:	9605      	str	r6, [sp, #20]
 8025358:	9404      	str	r4, [sp, #16]
 802535a:	68bc      	ldr	r4, [r7, #8]
 802535c:	9402      	str	r4, [sp, #8]
 802535e:	68fc      	ldr	r4, [r7, #12]
 8025360:	9401      	str	r4, [sp, #4]
 8025362:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
 8025366:	9400      	str	r4, [sp, #0]
 8025368:	f001 ff06 	bl	8027178 <forward_lite_pad_edge>
 802536c:	b009      	add	sp, #36	@ 0x24
 802536e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025370:	685b      	ldr	r3, [r3, #4]
 8025372:	deff      	udf	#255	@ 0xff
 8025374:	2300      	movs	r3, #0
 8025376:	685b      	ldr	r3, [r3, #4]
 8025378:	deff      	udf	#255	@ 0xff
 802537a:	699b      	ldr	r3, [r3, #24]
 802537c:	deff      	udf	#255	@ 0xff
 802537e:	bf00      	nop

08025380 <forward_pad_reflect>:
 8025380:	6982      	ldr	r2, [r0, #24]
 8025382:	8813      	ldrh	r3, [r2, #0]
 8025384:	2b00      	cmp	r3, #0
 8025386:	d044      	beq.n	8025412 <forward_pad_reflect+0x92>
 8025388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802538c:	6852      	ldr	r2, [r2, #4]
 802538e:	b08f      	sub	sp, #60	@ 0x3c
 8025390:	6857      	ldr	r7, [r2, #4]
 8025392:	b107      	cbz	r7, 8025396 <forward_pad_reflect+0x16>
 8025394:	683f      	ldr	r7, [r7, #0]
 8025396:	2b01      	cmp	r3, #1
 8025398:	d03d      	beq.n	8025416 <forward_pad_reflect+0x96>
 802539a:	6913      	ldr	r3, [r2, #16]
 802539c:	2b00      	cmp	r3, #0
 802539e:	d03d      	beq.n	802541c <forward_pad_reflect+0x9c>
 80253a0:	6819      	ldr	r1, [r3, #0]
 80253a2:	68fa      	ldr	r2, [r7, #12]
 80253a4:	e9d2 8302 	ldrd	r8, r3, [r2, #8]
 80253a8:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 80253ac:	f5b4 6fa0 	cmp.w	r4, #1280	@ 0x500
 80253b0:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 80253b2:	e9d1 0105 	ldrd	r0, r1, [r1, #20]
 80253b6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80253ba:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 80253be:	f9b4 b000 	ldrsh.w	fp, [r4]
 80253c2:	6889      	ldr	r1, [r1, #8]
 80253c4:	e9d0 5c02 	ldrd	r5, ip, [r0, #8]
 80253c8:	e9d7 7005 	ldrd	r7, r0, [r7, #20]
 80253cc:	fb05 f606 	mul.w	r6, r5, r6
 80253d0:	6880      	ldr	r0, [r0, #8]
 80253d2:	e9d2 a902 	ldrd	sl, r9, [r2, #8]
 80253d6:	bf2c      	ite	cs
 80253d8:	6912      	ldrcs	r2, [r2, #16]
 80253da:	2201      	movcc	r2, #1
 80253dc:	960c      	str	r6, [sp, #48]	@ 0x30
 80253de:	fb05 f60e 	mul.w	r6, r5, lr
 80253e2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80253e4:	fb0c f60b 	mul.w	r6, ip, fp
 80253e8:	960a      	str	r6, [sp, #40]	@ 0x28
 80253ea:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
 80253ee:	9409      	str	r4, [sp, #36]	@ 0x24
 80253f0:	e9cd eb07 	strd	lr, fp, [sp, #28]
 80253f4:	e9cd c505 	strd	ip, r5, [sp, #20]
 80253f8:	68bc      	ldr	r4, [r7, #8]
 80253fa:	9404      	str	r4, [sp, #16]
 80253fc:	68fc      	ldr	r4, [r7, #12]
 80253fe:	f8cd 8000 	str.w	r8, [sp]
 8025402:	9403      	str	r4, [sp, #12]
 8025404:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8025408:	f001 ff28 	bl	802725c <forward_lite_pad_reflect>
 802540c:	b00f      	add	sp, #60	@ 0x3c
 802540e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025412:	685b      	ldr	r3, [r3, #4]
 8025414:	deff      	udf	#255	@ 0xff
 8025416:	2300      	movs	r3, #0
 8025418:	685b      	ldr	r3, [r3, #4]
 802541a:	deff      	udf	#255	@ 0xff
 802541c:	68db      	ldr	r3, [r3, #12]
 802541e:	deff      	udf	#255	@ 0xff

08025420 <forward_mp_integer_INT8>:
 8025420:	6983      	ldr	r3, [r0, #24]
 8025422:	881a      	ldrh	r2, [r3, #0]
 8025424:	2a00      	cmp	r2, #0
 8025426:	d07d      	beq.n	8025524 <forward_mp_integer_INT8+0x104>
 8025428:	6859      	ldr	r1, [r3, #4]
 802542a:	684b      	ldr	r3, [r1, #4]
 802542c:	b103      	cbz	r3, 8025430 <forward_mp_integer_INT8+0x10>
 802542e:	681b      	ldr	r3, [r3, #0]
 8025430:	2a01      	cmp	r2, #1
 8025432:	f000 8100 	beq.w	8025636 <forward_mp_integer_INT8+0x216>
 8025436:	690a      	ldr	r2, [r1, #16]
 8025438:	2a00      	cmp	r2, #0
 802543a:	f000 80ff 	beq.w	802563c <forward_mp_integer_INT8+0x21c>
 802543e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025442:	68de      	ldr	r6, [r3, #12]
 8025444:	b095      	sub	sp, #84	@ 0x54
 8025446:	6811      	ldr	r1, [r2, #0]
 8025448:	681c      	ldr	r4, [r3, #0]
 802544a:	f8d3 b018 	ldr.w	fp, [r3, #24]
 802544e:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 8025452:	8932      	ldrh	r2, [r6, #8]
 8025454:	89b3      	ldrh	r3, [r6, #12]
 8025456:	8b86      	ldrh	r6, [r0, #28]
 8025458:	6b07      	ldr	r7, [r0, #48]	@ 0x30
 802545a:	960d      	str	r6, [sp, #52]	@ 0x34
 802545c:	8c06      	ldrh	r6, [r0, #32]
 802545e:	68cd      	ldr	r5, [r1, #12]
 8025460:	960e      	str	r6, [sp, #56]	@ 0x38
 8025462:	88be      	ldrh	r6, [r7, #4]
 8025464:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8025468:	960f      	str	r6, [sp, #60]	@ 0x3c
 802546a:	883e      	ldrh	r6, [r7, #0]
 802546c:	f8b5 800c 	ldrh.w	r8, [r5, #12]
 8025470:	9610      	str	r6, [sp, #64]	@ 0x40
 8025472:	8c86      	ldrh	r6, [r0, #36]	@ 0x24
 8025474:	8d00      	ldrh	r0, [r0, #40]	@ 0x28
 8025476:	9611      	str	r6, [sp, #68]	@ 0x44
 8025478:	f8d1 a018 	ldr.w	sl, [r1, #24]
 802547c:	680e      	ldr	r6, [r1, #0]
 802547e:	9012      	str	r0, [sp, #72]	@ 0x48
 8025480:	2c00      	cmp	r4, #0
 8025482:	d069      	beq.n	8025558 <forward_mp_integer_INT8+0x138>
 8025484:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8025488:	f1b9 0f00 	cmp.w	r9, #0
 802548c:	d04c      	beq.n	8025528 <forward_mp_integer_INT8+0x108>
 802548e:	8865      	ldrh	r5, [r4, #2]
 8025490:	2d00      	cmp	r5, #0
 8025492:	d079      	beq.n	8025588 <forward_mp_integer_INT8+0x168>
 8025494:	f8d9 1000 	ldr.w	r1, [r9]
 8025498:	ed91 0a00 	vldr	s0, [r1]
 802549c:	2e00      	cmp	r6, #0
 802549e:	d077      	beq.n	8025590 <forward_mp_integer_INT8+0x170>
 80254a0:	6877      	ldr	r7, [r6, #4]
 80254a2:	2f00      	cmp	r7, #0
 80254a4:	d047      	beq.n	8025536 <forward_mp_integer_INT8+0x116>
 80254a6:	8871      	ldrh	r1, [r6, #2]
 80254a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80254aa:	2900      	cmp	r1, #0
 80254ac:	d05e      	beq.n	802556c <forward_mp_integer_INT8+0x14c>
 80254ae:	683d      	ldr	r5, [r7, #0]
 80254b0:	eef0 7a40 	vmov.f32	s15, s0
 80254b4:	f8db 0008 	ldr.w	r0, [fp, #8]
 80254b8:	ed95 7a00 	vldr	s14, [r5]
 80254bc:	f8da 1008 	ldr.w	r1, [sl, #8]
 80254c0:	ee80 0a07 	vdiv.f32	s0, s0, s14
 80254c4:	f1b9 0f00 	cmp.w	r9, #0
 80254c8:	d05c      	beq.n	8025584 <forward_mp_integer_INT8+0x164>
 80254ca:	8864      	ldrh	r4, [r4, #2]
 80254cc:	2c00      	cmp	r4, #0
 80254ce:	d03e      	beq.n	802554e <forward_mp_integer_INT8+0x12e>
 80254d0:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80254d4:	f994 4000 	ldrsb.w	r4, [r4]
 80254d8:	2e00      	cmp	r6, #0
 80254da:	d03b      	beq.n	8025554 <forward_mp_integer_INT8+0x134>
 80254dc:	2f00      	cmp	r7, #0
 80254de:	d039      	beq.n	8025554 <forward_mp_integer_INT8+0x134>
 80254e0:	8875      	ldrh	r5, [r6, #2]
 80254e2:	9513      	str	r5, [sp, #76]	@ 0x4c
 80254e4:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80254e6:	b115      	cbz	r5, 80254ee <forward_mp_integer_INT8+0xce>
 80254e8:	687d      	ldr	r5, [r7, #4]
 80254ea:	f995 5000 	ldrsb.w	r5, [r5]
 80254ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80254f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80254f6:	da5d      	bge.n	80255b4 <forward_mp_integer_INT8+0x194>
 80254f8:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
 80254fc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80254fe:	9406      	str	r4, [sp, #24]
 8025500:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025502:	9405      	str	r4, [sp, #20]
 8025504:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025506:	9404      	str	r4, [sp, #16]
 8025508:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802550a:	9403      	str	r4, [sp, #12]
 802550c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802550e:	9402      	str	r4, [sp, #8]
 8025510:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025512:	e9cd e807 	strd	lr, r8, [sp, #28]
 8025516:	e9cd c400 	strd	ip, r4, [sp]
 802551a:	f001 faf5 	bl	8026b08 <forward_lite_maxpool_is8os8_scaleneg>
 802551e:	b015      	add	sp, #84	@ 0x54
 8025520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025524:	6853      	ldr	r3, [r2, #4]
 8025526:	deff      	udf	#255	@ 0xff
 8025528:	2e00      	cmp	r6, #0
 802552a:	d03b      	beq.n	80255a4 <forward_mp_integer_INT8+0x184>
 802552c:	6877      	ldr	r7, [r6, #4]
 802552e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8025532:	2f00      	cmp	r7, #0
 8025534:	d1b7      	bne.n	80254a6 <forward_mp_integer_INT8+0x86>
 8025536:	f8db 0008 	ldr.w	r0, [fp, #8]
 802553a:	f8da 1008 	ldr.w	r1, [sl, #8]
 802553e:	f1b9 0f00 	cmp.w	r9, #0
 8025542:	d073      	beq.n	802562c <forward_mp_integer_INT8+0x20c>
 8025544:	8864      	ldrh	r4, [r4, #2]
 8025546:	2c00      	cmp	r4, #0
 8025548:	d169      	bne.n	802561e <forward_mp_integer_INT8+0x1fe>
 802554a:	eef0 7a40 	vmov.f32	s15, s0
 802554e:	2400      	movs	r4, #0
 8025550:	2f00      	cmp	r7, #0
 8025552:	d1c5      	bne.n	80254e0 <forward_mp_integer_INT8+0xc0>
 8025554:	2500      	movs	r5, #0
 8025556:	e7ca      	b.n	80254ee <forward_mp_integer_INT8+0xce>
 8025558:	2e00      	cmp	r6, #0
 802555a:	d041      	beq.n	80255e0 <forward_mp_integer_INT8+0x1c0>
 802555c:	6877      	ldr	r7, [r6, #4]
 802555e:	b30f      	cbz	r7, 80255a4 <forward_mp_integer_INT8+0x184>
 8025560:	8871      	ldrh	r1, [r6, #2]
 8025562:	9113      	str	r1, [sp, #76]	@ 0x4c
 8025564:	2900      	cmp	r1, #0
 8025566:	d14c      	bne.n	8025602 <forward_mp_integer_INT8+0x1e2>
 8025568:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802556c:	f8db 0008 	ldr.w	r0, [fp, #8]
 8025570:	f8da 1008 	ldr.w	r1, [sl, #8]
 8025574:	b194      	cbz	r4, 802559c <forward_mp_integer_INT8+0x17c>
 8025576:	f8d4 9004 	ldr.w	r9, [r4, #4]
 802557a:	eef0 7a40 	vmov.f32	s15, s0
 802557e:	f1b9 0f00 	cmp.w	r9, #0
 8025582:	d1a2      	bne.n	80254ca <forward_mp_integer_INT8+0xaa>
 8025584:	464c      	mov	r4, r9
 8025586:	e7ad      	b.n	80254e4 <forward_mp_integer_INT8+0xc4>
 8025588:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802558c:	2e00      	cmp	r6, #0
 802558e:	d187      	bne.n	80254a0 <forward_mp_integer_INT8+0x80>
 8025590:	f8db 0008 	ldr.w	r0, [fp, #8]
 8025594:	f8da 1008 	ldr.w	r1, [sl, #8]
 8025598:	bb5d      	cbnz	r5, 80255f2 <forward_mp_integer_INT8+0x1d2>
 802559a:	462c      	mov	r4, r5
 802559c:	eef0 7a40 	vmov.f32	s15, s0
 80255a0:	4625      	mov	r5, r4
 80255a2:	e7a4      	b.n	80254ee <forward_mp_integer_INT8+0xce>
 80255a4:	2400      	movs	r4, #0
 80255a6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80255aa:	f8db 0008 	ldr.w	r0, [fp, #8]
 80255ae:	f8da 1008 	ldr.w	r1, [sl, #8]
 80255b2:	4625      	mov	r5, r4
 80255b4:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
 80255b8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80255ba:	9406      	str	r4, [sp, #24]
 80255bc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80255be:	9405      	str	r4, [sp, #20]
 80255c0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80255c2:	9404      	str	r4, [sp, #16]
 80255c4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80255c6:	9403      	str	r4, [sp, #12]
 80255c8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80255ca:	9402      	str	r4, [sp, #8]
 80255cc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80255ce:	e9cd e807 	strd	lr, r8, [sp, #28]
 80255d2:	e9cd c400 	strd	ip, r4, [sp]
 80255d6:	f000 fb15 	bl	8025c04 <forward_lite_maxpool_is8os8_scalepos>
 80255da:	b015      	add	sp, #84	@ 0x54
 80255dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80255e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80255e4:	4634      	mov	r4, r6
 80255e6:	f8db 0008 	ldr.w	r0, [fp, #8]
 80255ea:	4635      	mov	r5, r6
 80255ec:	f8da 1008 	ldr.w	r1, [sl, #8]
 80255f0:	e7e0      	b.n	80255b4 <forward_mp_integer_INT8+0x194>
 80255f2:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80255f6:	eef0 7a40 	vmov.f32	s15, s0
 80255fa:	4635      	mov	r5, r6
 80255fc:	f994 4000 	ldrsb.w	r4, [r4]
 8025600:	e775      	b.n	80254ee <forward_mp_integer_INT8+0xce>
 8025602:	683d      	ldr	r5, [r7, #0]
 8025604:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025608:	f8db 0008 	ldr.w	r0, [fp, #8]
 802560c:	edd5 6a00 	vldr	s13, [r5]
 8025610:	eef0 7a47 	vmov.f32	s15, s14
 8025614:	f8da 1008 	ldr.w	r1, [sl, #8]
 8025618:	ee87 0a26 	vdiv.f32	s0, s14, s13
 802561c:	e764      	b.n	80254e8 <forward_mp_integer_INT8+0xc8>
 802561e:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8025622:	eef0 7a40 	vmov.f32	s15, s0
 8025626:	f994 4000 	ldrsb.w	r4, [r4]
 802562a:	e793      	b.n	8025554 <forward_mp_integer_INT8+0x134>
 802562c:	eef0 7a40 	vmov.f32	s15, s0
 8025630:	464c      	mov	r4, r9
 8025632:	464d      	mov	r5, r9
 8025634:	e75b      	b.n	80254ee <forward_mp_integer_INT8+0xce>
 8025636:	2300      	movs	r3, #0
 8025638:	685b      	ldr	r3, [r3, #4]
 802563a:	deff      	udf	#255	@ 0xff
 802563c:	68d3      	ldr	r3, [r2, #12]
 802563e:	deff      	udf	#255	@ 0xff

08025640 <forward_ap_integer_INT8>:
 8025640:	6983      	ldr	r3, [r0, #24]
 8025642:	881a      	ldrh	r2, [r3, #0]
 8025644:	2a00      	cmp	r2, #0
 8025646:	d059      	beq.n	80256fc <forward_ap_integer_INT8+0xbc>
 8025648:	6859      	ldr	r1, [r3, #4]
 802564a:	684b      	ldr	r3, [r1, #4]
 802564c:	b103      	cbz	r3, 8025650 <forward_ap_integer_INT8+0x10>
 802564e:	681b      	ldr	r3, [r3, #0]
 8025650:	2a01      	cmp	r2, #1
 8025652:	f000 80df 	beq.w	8025814 <forward_ap_integer_INT8+0x1d4>
 8025656:	690a      	ldr	r2, [r1, #16]
 8025658:	2a00      	cmp	r2, #0
 802565a:	f000 80de 	beq.w	802581a <forward_ap_integer_INT8+0x1da>
 802565e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025662:	68de      	ldr	r6, [r3, #12]
 8025664:	b095      	sub	sp, #84	@ 0x54
 8025666:	6811      	ldr	r1, [r2, #0]
 8025668:	681c      	ldr	r4, [r3, #0]
 802566a:	f8d3 b018 	ldr.w	fp, [r3, #24]
 802566e:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 8025672:	8932      	ldrh	r2, [r6, #8]
 8025674:	89b3      	ldrh	r3, [r6, #12]
 8025676:	8b86      	ldrh	r6, [r0, #28]
 8025678:	6b07      	ldr	r7, [r0, #48]	@ 0x30
 802567a:	960d      	str	r6, [sp, #52]	@ 0x34
 802567c:	8c06      	ldrh	r6, [r0, #32]
 802567e:	68cd      	ldr	r5, [r1, #12]
 8025680:	960e      	str	r6, [sp, #56]	@ 0x38
 8025682:	88be      	ldrh	r6, [r7, #4]
 8025684:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8025688:	960f      	str	r6, [sp, #60]	@ 0x3c
 802568a:	883e      	ldrh	r6, [r7, #0]
 802568c:	f8b5 800c 	ldrh.w	r8, [r5, #12]
 8025690:	9610      	str	r6, [sp, #64]	@ 0x40
 8025692:	8c86      	ldrh	r6, [r0, #36]	@ 0x24
 8025694:	8d00      	ldrh	r0, [r0, #40]	@ 0x28
 8025696:	9611      	str	r6, [sp, #68]	@ 0x44
 8025698:	f8d1 a018 	ldr.w	sl, [r1, #24]
 802569c:	680e      	ldr	r6, [r1, #0]
 802569e:	9012      	str	r0, [sp, #72]	@ 0x48
 80256a0:	2c00      	cmp	r4, #0
 80256a2:	d054      	beq.n	802574e <forward_ap_integer_INT8+0x10e>
 80256a4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80256a8:	f1b9 0f00 	cmp.w	r9, #0
 80256ac:	d028      	beq.n	8025700 <forward_ap_integer_INT8+0xc0>
 80256ae:	8865      	ldrh	r5, [r4, #2]
 80256b0:	2d00      	cmp	r5, #0
 80256b2:	d077      	beq.n	80257a4 <forward_ap_integer_INT8+0x164>
 80256b4:	f8d9 1000 	ldr.w	r1, [r9]
 80256b8:	ed91 0a00 	vldr	s0, [r1]
 80256bc:	2e00      	cmp	r6, #0
 80256be:	d075      	beq.n	80257ac <forward_ap_integer_INT8+0x16c>
 80256c0:	6877      	ldr	r7, [r6, #4]
 80256c2:	b327      	cbz	r7, 802570e <forward_ap_integer_INT8+0xce>
 80256c4:	8871      	ldrh	r1, [r6, #2]
 80256c6:	9113      	str	r1, [sp, #76]	@ 0x4c
 80256c8:	2900      	cmp	r1, #0
 80256ca:	d031      	beq.n	8025730 <forward_ap_integer_INT8+0xf0>
 80256cc:	683d      	ldr	r5, [r7, #0]
 80256ce:	f8db 0008 	ldr.w	r0, [fp, #8]
 80256d2:	f8da 1008 	ldr.w	r1, [sl, #8]
 80256d6:	edd5 0a00 	vldr	s1, [r5]
 80256da:	f1b9 0f00 	cmp.w	r9, #0
 80256de:	d034      	beq.n	802574a <forward_ap_integer_INT8+0x10a>
 80256e0:	8864      	ldrh	r4, [r4, #2]
 80256e2:	b304      	cbz	r4, 8025726 <forward_ap_integer_INT8+0xe6>
 80256e4:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80256e8:	f994 4000 	ldrsb.w	r4, [r4]
 80256ec:	b1f6      	cbz	r6, 802572c <forward_ap_integer_INT8+0xec>
 80256ee:	b1ef      	cbz	r7, 802572c <forward_ap_integer_INT8+0xec>
 80256f0:	8875      	ldrh	r5, [r6, #2]
 80256f2:	9513      	str	r5, [sp, #76]	@ 0x4c
 80256f4:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80256f6:	2d00      	cmp	r5, #0
 80256f8:	d03e      	beq.n	8025778 <forward_ap_integer_INT8+0x138>
 80256fa:	e03a      	b.n	8025772 <forward_ap_integer_INT8+0x132>
 80256fc:	6853      	ldr	r3, [r2, #4]
 80256fe:	deff      	udf	#255	@ 0xff
 8025700:	2e00      	cmp	r6, #0
 8025702:	d05d      	beq.n	80257c0 <forward_ap_integer_INT8+0x180>
 8025704:	6877      	ldr	r7, [r6, #4]
 8025706:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802570a:	2f00      	cmp	r7, #0
 802570c:	d1da      	bne.n	80256c4 <forward_ap_integer_INT8+0x84>
 802570e:	f8db 0008 	ldr.w	r0, [fp, #8]
 8025712:	f8da 1008 	ldr.w	r1, [sl, #8]
 8025716:	f1b9 0f00 	cmp.w	r9, #0
 802571a:	d076      	beq.n	802580a <forward_ap_integer_INT8+0x1ca>
 802571c:	8864      	ldrh	r4, [r4, #2]
 802571e:	2c00      	cmp	r4, #0
 8025720:	d16c      	bne.n	80257fc <forward_ap_integer_INT8+0x1bc>
 8025722:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8025726:	2400      	movs	r4, #0
 8025728:	2f00      	cmp	r7, #0
 802572a:	d1e1      	bne.n	80256f0 <forward_ap_integer_INT8+0xb0>
 802572c:	2500      	movs	r5, #0
 802572e:	e023      	b.n	8025778 <forward_ap_integer_INT8+0x138>
 8025730:	f8db 0008 	ldr.w	r0, [fp, #8]
 8025734:	f8da 1008 	ldr.w	r1, [sl, #8]
 8025738:	2c00      	cmp	r4, #0
 802573a:	d03d      	beq.n	80257b8 <forward_ap_integer_INT8+0x178>
 802573c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8025740:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8025744:	f1b9 0f00 	cmp.w	r9, #0
 8025748:	d1ca      	bne.n	80256e0 <forward_ap_integer_INT8+0xa0>
 802574a:	464c      	mov	r4, r9
 802574c:	e7d2      	b.n	80256f4 <forward_ap_integer_INT8+0xb4>
 802574e:	2e00      	cmp	r6, #0
 8025750:	d036      	beq.n	80257c0 <forward_ap_integer_INT8+0x180>
 8025752:	6877      	ldr	r7, [r6, #4]
 8025754:	2f00      	cmp	r7, #0
 8025756:	d03e      	beq.n	80257d6 <forward_ap_integer_INT8+0x196>
 8025758:	8871      	ldrh	r1, [r6, #2]
 802575a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802575e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8025760:	2900      	cmp	r1, #0
 8025762:	d0e5      	beq.n	8025730 <forward_ap_integer_INT8+0xf0>
 8025764:	683d      	ldr	r5, [r7, #0]
 8025766:	f8db 0008 	ldr.w	r0, [fp, #8]
 802576a:	f8da 1008 	ldr.w	r1, [sl, #8]
 802576e:	edd5 0a00 	vldr	s1, [r5]
 8025772:	687d      	ldr	r5, [r7, #4]
 8025774:	f995 5000 	ldrsb.w	r5, [r5]
 8025778:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
 802577c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802577e:	9406      	str	r4, [sp, #24]
 8025780:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025782:	9405      	str	r4, [sp, #20]
 8025784:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025786:	9404      	str	r4, [sp, #16]
 8025788:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802578a:	9403      	str	r4, [sp, #12]
 802578c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802578e:	9402      	str	r4, [sp, #8]
 8025790:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025792:	e9cd e807 	strd	lr, r8, [sp, #28]
 8025796:	e9cd c400 	strd	ip, r4, [sp]
 802579a:	f000 fb15 	bl	8025dc8 <forward_lite_avepool_is8os8>
 802579e:	b015      	add	sp, #84	@ 0x54
 80257a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80257a4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80257a8:	2e00      	cmp	r6, #0
 80257aa:	d189      	bne.n	80256c0 <forward_ap_integer_INT8+0x80>
 80257ac:	f8db 0008 	ldr.w	r0, [fp, #8]
 80257b0:	f8da 1008 	ldr.w	r1, [sl, #8]
 80257b4:	b9d5      	cbnz	r5, 80257ec <forward_ap_integer_INT8+0x1ac>
 80257b6:	462c      	mov	r4, r5
 80257b8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80257bc:	4625      	mov	r5, r4
 80257be:	e7db      	b.n	8025778 <forward_ap_integer_INT8+0x138>
 80257c0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80257c4:	4634      	mov	r4, r6
 80257c6:	f8db 0008 	ldr.w	r0, [fp, #8]
 80257ca:	4635      	mov	r5, r6
 80257cc:	f8da 1008 	ldr.w	r1, [sl, #8]
 80257d0:	eef0 0a40 	vmov.f32	s1, s0
 80257d4:	e7d0      	b.n	8025778 <forward_ap_integer_INT8+0x138>
 80257d6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80257da:	463c      	mov	r4, r7
 80257dc:	f8db 0008 	ldr.w	r0, [fp, #8]
 80257e0:	463d      	mov	r5, r7
 80257e2:	f8da 1008 	ldr.w	r1, [sl, #8]
 80257e6:	eef0 0a40 	vmov.f32	s1, s0
 80257ea:	e7c5      	b.n	8025778 <forward_ap_integer_INT8+0x138>
 80257ec:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80257f0:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80257f4:	4635      	mov	r5, r6
 80257f6:	f994 4000 	ldrsb.w	r4, [r4]
 80257fa:	e7bd      	b.n	8025778 <forward_ap_integer_INT8+0x138>
 80257fc:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8025800:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8025804:	f994 4000 	ldrsb.w	r4, [r4]
 8025808:	e790      	b.n	802572c <forward_ap_integer_INT8+0xec>
 802580a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 802580e:	464c      	mov	r4, r9
 8025810:	464d      	mov	r5, r9
 8025812:	e7b1      	b.n	8025778 <forward_ap_integer_INT8+0x138>
 8025814:	2300      	movs	r3, #0
 8025816:	685b      	ldr	r3, [r3, #4]
 8025818:	deff      	udf	#255	@ 0xff
 802581a:	68d3      	ldr	r3, [r2, #12]
 802581c:	deff      	udf	#255	@ 0xff
 802581e:	bf00      	nop

08025820 <forward_eltwise_integer_INT8>:
 8025820:	6982      	ldr	r2, [r0, #24]
 8025822:	8813      	ldrh	r3, [r2, #0]
 8025824:	2b00      	cmp	r3, #0
 8025826:	d04e      	beq.n	80258c6 <forward_eltwise_integer_INT8+0xa6>
 8025828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802582c:	ed2d 8b02 	vpush	{d8}
 8025830:	6852      	ldr	r2, [r2, #4]
 8025832:	b0ab      	sub	sp, #172	@ 0xac
 8025834:	6854      	ldr	r4, [r2, #4]
 8025836:	2c00      	cmp	r4, #0
 8025838:	f000 81d2 	beq.w	8025be0 <forward_eltwise_integer_INT8+0x3c0>
 802583c:	e9d4 5400 	ldrd	r5, r4, [r4]
 8025840:	2b01      	cmp	r3, #1
 8025842:	f000 81d1 	beq.w	8025be8 <forward_eltwise_integer_INT8+0x3c8>
 8025846:	6916      	ldr	r6, [r2, #16]
 8025848:	b106      	cbz	r6, 802584c <forward_eltwise_integer_INT8+0x2c>
 802584a:	6836      	ldr	r6, [r6, #0]
 802584c:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8025850:	f105 0108 	add.w	r1, r5, #8
 8025854:	f104 0b08 	add.w	fp, r4, #8
 8025858:	e9d0 7307 	ldrd	r7, r3, [r0, #28]
 802585c:	68a0      	ldr	r0, [r4, #8]
 802585e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025860:	ea8c 0300 	eor.w	r3, ip, r0
 8025864:	f3cc 2c17 	ubfx	ip, ip, #8, #24
 8025868:	f033 03ff 	bics.w	r3, r3, #255	@ 0xff
 802586c:	d10e      	bne.n	802588c <forward_eltwise_integer_INT8+0x6c>
 802586e:	4663      	mov	r3, ip
 8025870:	4686      	mov	lr, r0
 8025872:	2b00      	cmp	r3, #0
 8025874:	f000 81b0 	beq.w	8025bd8 <forward_eltwise_integer_INT8+0x3b8>
 8025878:	3b01      	subs	r3, #1
 802587a:	68e2      	ldr	r2, [r4, #12]
 802587c:	68e8      	ldr	r0, [r5, #12]
 802587e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8025882:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8025886:	4290      	cmp	r0, r2
 8025888:	d0f3      	beq.n	8025872 <forward_eltwise_integer_INT8+0x52>
 802588a:	4670      	mov	r0, lr
 802588c:	2300      	movs	r3, #0
 802588e:	9308      	str	r3, [sp, #32]
 8025890:	f10c 33ff 	add.w	r3, ip, #4294967295
 8025894:	009b      	lsls	r3, r3, #2
 8025896:	e005      	b.n	80258a4 <forward_eltwise_integer_INT8+0x84>
 8025898:	68ea      	ldr	r2, [r5, #12]
 802589a:	58d2      	ldr	r2, [r2, r3]
 802589c:	3b04      	subs	r3, #4
 802589e:	2a01      	cmp	r2, #1
 80258a0:	f040 8197 	bne.w	8025bd2 <forward_eltwise_integer_INT8+0x3b2>
 80258a4:	1d1a      	adds	r2, r3, #4
 80258a6:	d1f7      	bne.n	8025898 <forward_eltwise_integer_INT8+0x78>
 80258a8:	f04f 0a01 	mov.w	sl, #1
 80258ac:	f3c0 2017 	ubfx	r0, r0, #8, #24
 80258b0:	b158      	cbz	r0, 80258ca <forward_eltwise_integer_INT8+0xaa>
 80258b2:	3801      	subs	r0, #1
 80258b4:	68e3      	ldr	r3, [r4, #12]
 80258b6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80258ba:	2b01      	cmp	r3, #1
 80258bc:	d0f8      	beq.n	80258b0 <forward_eltwise_integer_INT8+0x90>
 80258be:	2300      	movs	r3, #0
 80258c0:	46d1      	mov	r9, sl
 80258c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80258c4:	e005      	b.n	80258d2 <forward_eltwise_integer_INT8+0xb2>
 80258c6:	685b      	ldr	r3, [r3, #4]
 80258c8:	deff      	udf	#255	@ 0xff
 80258ca:	2301      	movs	r3, #1
 80258cc:	f08a 0901 	eor.w	r9, sl, #1
 80258d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80258d2:	6972      	ldr	r2, [r6, #20]
 80258d4:	2000      	movs	r0, #0
 80258d6:	696b      	ldr	r3, [r5, #20]
 80258d8:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80258dc:	aa1b      	add	r2, sp, #108	@ 0x6c
 80258de:	685b      	ldr	r3, [r3, #4]
 80258e0:	9216      	str	r2, [sp, #88]	@ 0x58
 80258e2:	f240 5201 	movw	r2, #1281	@ 0x501
 80258e6:	901f      	str	r0, [sp, #124]	@ 0x7c
 80258e8:	9215      	str	r2, [sp, #84]	@ 0x54
 80258ea:	465a      	mov	r2, fp
 80258ec:	930d      	str	r3, [sp, #52]	@ 0x34
 80258ee:	910c      	str	r1, [sp, #48]	@ 0x30
 80258f0:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
 80258f4:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
 80258f8:	a815      	add	r0, sp, #84	@ 0x54
 80258fa:	f00c f811 	bl	8031920 <core_get_broadcasted_shape>
 80258fe:	69ab      	ldr	r3, [r5, #24]
 8025900:	f8d5 c000 	ldr.w	ip, [r5]
 8025904:	930a      	str	r3, [sp, #40]	@ 0x28
 8025906:	6832      	ldr	r2, [r6, #0]
 8025908:	6820      	ldr	r0, [r4, #0]
 802590a:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	@ 0x30
 802590e:	f1bc 0f00 	cmp.w	ip, #0
 8025912:	d019      	beq.n	8025948 <forward_eltwise_integer_INT8+0x128>
 8025914:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8025918:	b1b5      	cbz	r5, 8025948 <forward_eltwise_integer_INT8+0x128>
 802591a:	f8bc e002 	ldrh.w	lr, [ip, #2]
 802591e:	f1be 0f00 	cmp.w	lr, #0
 8025922:	d011      	beq.n	8025948 <forward_eltwise_integer_INT8+0x128>
 8025924:	682d      	ldr	r5, [r5, #0]
 8025926:	682d      	ldr	r5, [r5, #0]
 8025928:	950f      	str	r5, [sp, #60]	@ 0x3c
 802592a:	b990      	cbnz	r0, 8025952 <forward_eltwise_integer_INT8+0x132>
 802592c:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8025930:	9510      	str	r5, [sp, #64]	@ 0x40
 8025932:	b1da      	cbz	r2, 802596c <forward_eltwise_integer_INT8+0x14c>
 8025934:	6855      	ldr	r5, [r2, #4]
 8025936:	b1cd      	cbz	r5, 802596c <forward_eltwise_integer_INT8+0x14c>
 8025938:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 802593c:	f1be 0f00 	cmp.w	lr, #0
 8025940:	d014      	beq.n	802596c <forward_eltwise_integer_INT8+0x14c>
 8025942:	682d      	ldr	r5, [r5, #0]
 8025944:	682d      	ldr	r5, [r5, #0]
 8025946:	e013      	b.n	8025970 <forward_eltwise_integer_INT8+0x150>
 8025948:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 802594c:	950f      	str	r5, [sp, #60]	@ 0x3c
 802594e:	2800      	cmp	r0, #0
 8025950:	d0ec      	beq.n	802592c <forward_eltwise_integer_INT8+0x10c>
 8025952:	6845      	ldr	r5, [r0, #4]
 8025954:	2d00      	cmp	r5, #0
 8025956:	d0e9      	beq.n	802592c <forward_eltwise_integer_INT8+0x10c>
 8025958:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 802595c:	f1be 0f00 	cmp.w	lr, #0
 8025960:	d0e4      	beq.n	802592c <forward_eltwise_integer_INT8+0x10c>
 8025962:	682d      	ldr	r5, [r5, #0]
 8025964:	682d      	ldr	r5, [r5, #0]
 8025966:	9510      	str	r5, [sp, #64]	@ 0x40
 8025968:	2a00      	cmp	r2, #0
 802596a:	d1e3      	bne.n	8025934 <forward_eltwise_integer_INT8+0x114>
 802596c:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8025970:	69a4      	ldr	r4, [r4, #24]
 8025972:	69b6      	ldr	r6, [r6, #24]
 8025974:	9511      	str	r5, [sp, #68]	@ 0x44
 8025976:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8025978:	68a4      	ldr	r4, [r4, #8]
 802597a:	68ad      	ldr	r5, [r5, #8]
 802597c:	68b6      	ldr	r6, [r6, #8]
 802597e:	f1bc 0f00 	cmp.w	ip, #0
 8025982:	d00e      	beq.n	80259a2 <forward_eltwise_integer_INT8+0x182>
 8025984:	f8dc e004 	ldr.w	lr, [ip, #4]
 8025988:	f1be 0f00 	cmp.w	lr, #0
 802598c:	f000 80ff 	beq.w	8025b8e <forward_eltwise_integer_INT8+0x36e>
 8025990:	f8bc c002 	ldrh.w	ip, [ip, #2]
 8025994:	f1bc 0f00 	cmp.w	ip, #0
 8025998:	d003      	beq.n	80259a2 <forward_eltwise_integer_INT8+0x182>
 802599a:	f8de c004 	ldr.w	ip, [lr, #4]
 802599e:	f99c c000 	ldrsb.w	ip, [ip]
 80259a2:	f88d c039 	strb.w	ip, [sp, #57]	@ 0x39
 80259a6:	b158      	cbz	r0, 80259c0 <forward_eltwise_integer_INT8+0x1a0>
 80259a8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80259ac:	f1bc 0f00 	cmp.w	ip, #0
 80259b0:	f000 80eb 	beq.w	8025b8a <forward_eltwise_integer_INT8+0x36a>
 80259b4:	8840      	ldrh	r0, [r0, #2]
 80259b6:	b118      	cbz	r0, 80259c0 <forward_eltwise_integer_INT8+0x1a0>
 80259b8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80259bc:	f990 0000 	ldrsb.w	r0, [r0]
 80259c0:	f88d 003a 	strb.w	r0, [sp, #58]	@ 0x3a
 80259c4:	b142      	cbz	r2, 80259d8 <forward_eltwise_integer_INT8+0x1b8>
 80259c6:	6850      	ldr	r0, [r2, #4]
 80259c8:	2800      	cmp	r0, #0
 80259ca:	f000 80dc 	beq.w	8025b86 <forward_eltwise_integer_INT8+0x366>
 80259ce:	8852      	ldrh	r2, [r2, #2]
 80259d0:	b112      	cbz	r2, 80259d8 <forward_eltwise_integer_INT8+0x1b8>
 80259d2:	6842      	ldr	r2, [r0, #4]
 80259d4:	f992 2000 	ldrsb.w	r2, [r2]
 80259d8:	f88d 203b 	strb.w	r2, [sp, #59]	@ 0x3b
 80259dc:	9a08      	ldr	r2, [sp, #32]
 80259de:	b912      	cbnz	r2, 80259e6 <forward_eltwise_integer_INT8+0x1c6>
 80259e0:	f1b9 0f00 	cmp.w	r9, #0
 80259e4:	d02d      	beq.n	8025a42 <forward_eltwise_integer_INT8+0x222>
 80259e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80259e8:	4553      	cmp	r3, sl
 80259ea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80259ec:	bf14      	ite	ne
 80259ee:	f1ca 0102 	rsbne	r1, sl, #2
 80259f2:	2100      	moveq	r1, #0
 80259f4:	0a1b      	lsrs	r3, r3, #8
 80259f6:	f000 80f5 	beq.w	8025be4 <forward_eltwise_integer_INT8+0x3c4>
 80259fa:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 80259fc:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 8025a00:	2301      	movs	r3, #1
 8025a02:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8025a06:	4297      	cmp	r7, r2
 8025a08:	fb00 f303 	mul.w	r3, r0, r3
 8025a0c:	d1f9      	bne.n	8025a02 <forward_eltwise_integer_INT8+0x1e2>
 8025a0e:	4622      	mov	r2, r4
 8025a10:	f10d 043b 	add.w	r4, sp, #59	@ 0x3b
 8025a14:	9106      	str	r1, [sp, #24]
 8025a16:	4630      	mov	r0, r6
 8025a18:	9405      	str	r4, [sp, #20]
 8025a1a:	ac11      	add	r4, sp, #68	@ 0x44
 8025a1c:	4629      	mov	r1, r5
 8025a1e:	9404      	str	r4, [sp, #16]
 8025a20:	f10d 043a 	add.w	r4, sp, #58	@ 0x3a
 8025a24:	9403      	str	r4, [sp, #12]
 8025a26:	ac10      	add	r4, sp, #64	@ 0x40
 8025a28:	9402      	str	r4, [sp, #8]
 8025a2a:	f10d 0439 	add.w	r4, sp, #57	@ 0x39
 8025a2e:	9401      	str	r4, [sp, #4]
 8025a30:	ac0f      	add	r4, sp, #60	@ 0x3c
 8025a32:	9400      	str	r4, [sp, #0]
 8025a34:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025a36:	47a0      	blx	r4
 8025a38:	b02b      	add	sp, #172	@ 0xac
 8025a3a:	ecbd 8b02 	vpop	{d8}
 8025a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025a42:	aa20      	add	r2, sp, #128	@ 0x80
 8025a44:	a817      	add	r0, sp, #92	@ 0x5c
 8025a46:	9308      	str	r3, [sp, #32]
 8025a48:	9218      	str	r2, [sp, #96]	@ 0x60
 8025a4a:	aa25      	add	r2, sp, #148	@ 0x94
 8025a4c:	f8cd 9080 	str.w	r9, [sp, #128]	@ 0x80
 8025a50:	921a      	str	r2, [sp, #104]	@ 0x68
 8025a52:	f240 5202 	movw	r2, #1282	@ 0x502
 8025a56:	f8cd 9094 	str.w	r9, [sp, #148]	@ 0x94
 8025a5a:	9217      	str	r2, [sp, #92]	@ 0x5c
 8025a5c:	9219      	str	r2, [sp, #100]	@ 0x64
 8025a5e:	aa15      	add	r2, sp, #84	@ 0x54
 8025a60:	e9cd 9921 	strd	r9, r9, [sp, #132]	@ 0x84
 8025a64:	e9cd 9923 	strd	r9, r9, [sp, #140]	@ 0x8c
 8025a68:	e9cd 9926 	strd	r9, r9, [sp, #152]	@ 0x98
 8025a6c:	e9cd 9928 	strd	r9, r9, [sp, #160]	@ 0xa0
 8025a70:	f00b ff7e 	bl	8031970 <core_compute_offsets>
 8025a74:	9b08      	ldr	r3, [sp, #32]
 8025a76:	aa15      	add	r2, sp, #84	@ 0x54
 8025a78:	4659      	mov	r1, fp
 8025a7a:	a819      	add	r0, sp, #100	@ 0x64
 8025a7c:	f00b ff78 	bl	8031970 <core_compute_offsets>
 8025a80:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8025a82:	68d3      	ldr	r3, [r2, #12]
 8025a84:	2b00      	cmp	r3, #0
 8025a86:	d0d7      	beq.n	8025a38 <forward_eltwise_integer_INT8+0x218>
 8025a88:	6891      	ldr	r1, [r2, #8]
 8025a8a:	eddf 8a59 	vldr	s17, [pc, #356]	@ 8025bf0 <forward_eltwise_integer_INT8+0x3d0>
 8025a8e:	468c      	mov	ip, r1
 8025a90:	f8cd 9020 	str.w	r9, [sp, #32]
 8025a94:	f1bc 0f00 	cmp.w	ip, #0
 8025a98:	d0ce      	beq.n	8025a38 <forward_eltwise_integer_INT8+0x218>
 8025a9a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8025a9c:	f04f 0b00 	mov.w	fp, #0
 8025aa0:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8025aa4:	f04f 0a00 	mov.w	sl, #0
 8025aa8:	2804      	cmp	r0, #4
 8025aaa:	bf8c      	ite	hi
 8025aac:	6911      	ldrhi	r1, [r2, #16]
 8025aae:	2101      	movls	r1, #1
 8025ab0:	458a      	cmp	sl, r1
 8025ab2:	d26e      	bcs.n	8025b92 <forward_eltwise_integer_INT8+0x372>
 8025ab4:	6851      	ldr	r1, [r2, #4]
 8025ab6:	2900      	cmp	r1, #0
 8025ab8:	d054      	beq.n	8025b64 <forward_eltwise_integer_INT8+0x344>
 8025aba:	eeb6 8a00 	vmov.f32	s16, #96	@ 0x3f000000  0.5
 8025abe:	f04f 0900 	mov.w	r9, #0
 8025ac2:	f995 2000 	ldrsb.w	r2, [r5]
 8025ac6:	a814      	add	r0, sp, #80	@ 0x50
 8025ac8:	f99d 1039 	ldrsb.w	r1, [sp, #57]	@ 0x39
 8025acc:	eddd 6a0f 	vldr	s13, [sp, #60]	@ 0x3c
 8025ad0:	1a53      	subs	r3, r2, r1
 8025ad2:	f99d 103a 	ldrsb.w	r1, [sp, #58]	@ 0x3a
 8025ad6:	ed9d 7a10 	vldr	s14, [sp, #64]	@ 0x40
 8025ada:	ee07 3a90 	vmov	s15, r3
 8025ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025ae2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8025ae6:	edcd 7a12 	vstr	s15, [sp, #72]	@ 0x48
 8025aea:	f994 2000 	ldrsb.w	r2, [r4]
 8025aee:	1a53      	subs	r3, r2, r1
 8025af0:	aa13      	add	r2, sp, #76	@ 0x4c
 8025af2:	a912      	add	r1, sp, #72	@ 0x48
 8025af4:	ee07 3a90 	vmov	s15, r3
 8025af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025afc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8025b00:	edcd 7a13 	vstr	s15, [sp, #76]	@ 0x4c
 8025b04:	47b8      	blx	r7
 8025b06:	ed9d 6a14 	vldr	s12, [sp, #80]	@ 0x50
 8025b0a:	eddd 6a11 	vldr	s13, [sp, #68]	@ 0x44
 8025b0e:	f99d 303b 	ldrsb.w	r3, [sp, #59]	@ 0x3b
 8025b12:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8025b16:	ee07 3a10 	vmov	s14, r3
 8025b1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8025b1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025b22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8025b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025b2a:	fe38 7a28 	vselgt.f32	s14, s16, s17
 8025b2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025b32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8025b36:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
 8025b3a:	ee17 2a10 	vmov	r2, s14
 8025b3e:	f302 0207 	ssat	r2, #8, r2
 8025b42:	7032      	strb	r2, [r6, #0]
 8025b44:	f109 0901 	add.w	r9, r9, #1
 8025b48:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8025b4a:	4446      	add	r6, r8
 8025b4c:	6852      	ldr	r2, [r2, #4]
 8025b4e:	4415      	add	r5, r2
 8025b50:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8025b52:	6852      	ldr	r2, [r2, #4]
 8025b54:	4414      	add	r4, r2
 8025b56:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8025b58:	6851      	ldr	r1, [r2, #4]
 8025b5a:	4549      	cmp	r1, r9
 8025b5c:	d8b1      	bhi.n	8025ac2 <forward_eltwise_integer_INT8+0x2a2>
 8025b5e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8025b60:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8025b64:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8025b66:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 8025b6a:	d302      	bcc.n	8025b72 <forward_eltwise_integer_INT8+0x352>
 8025b6c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8025b6e:	6909      	ldr	r1, [r1, #16]
 8025b70:	440d      	add	r5, r1
 8025b72:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8025b74:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 8025b78:	d302      	bcc.n	8025b80 <forward_eltwise_integer_INT8+0x360>
 8025b7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8025b7c:	6909      	ldr	r1, [r1, #16]
 8025b7e:	440c      	add	r4, r1
 8025b80:	f10a 0a01 	add.w	sl, sl, #1
 8025b84:	e790      	b.n	8025aa8 <forward_eltwise_integer_INT8+0x288>
 8025b86:	4602      	mov	r2, r0
 8025b88:	e726      	b.n	80259d8 <forward_eltwise_integer_INT8+0x1b8>
 8025b8a:	4660      	mov	r0, ip
 8025b8c:	e718      	b.n	80259c0 <forward_eltwise_integer_INT8+0x1a0>
 8025b8e:	46f4      	mov	ip, lr
 8025b90:	e707      	b.n	80259a2 <forward_eltwise_integer_INT8+0x182>
 8025b92:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 8025b96:	f10b 0b01 	add.w	fp, fp, #1
 8025b9a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8025b9c:	f8de 1008 	ldr.w	r1, [lr, #8]
 8025ba0:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8025ba4:	440d      	add	r5, r1
 8025ba6:	6899      	ldr	r1, [r3, #8]
 8025ba8:	45dc      	cmp	ip, fp
 8025baa:	440c      	add	r4, r1
 8025bac:	f63f af7a 	bhi.w	8025aa4 <forward_eltwise_integer_INT8+0x284>
 8025bb0:	f8de 000c 	ldr.w	r0, [lr, #12]
 8025bb4:	9908      	ldr	r1, [sp, #32]
 8025bb6:	4405      	add	r5, r0
 8025bb8:	68d0      	ldr	r0, [r2, #12]
 8025bba:	3101      	adds	r1, #1
 8025bbc:	68db      	ldr	r3, [r3, #12]
 8025bbe:	4288      	cmp	r0, r1
 8025bc0:	441c      	add	r4, r3
 8025bc2:	9108      	str	r1, [sp, #32]
 8025bc4:	f63f af66 	bhi.w	8025a94 <forward_eltwise_integer_INT8+0x274>
 8025bc8:	b02b      	add	sp, #172	@ 0xac
 8025bca:	ecbd 8b02 	vpop	{d8}
 8025bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025bd2:	f04f 0a00 	mov.w	sl, #0
 8025bd6:	e669      	b.n	80258ac <forward_eltwise_integer_INT8+0x8c>
 8025bd8:	2301      	movs	r3, #1
 8025bda:	4670      	mov	r0, lr
 8025bdc:	9308      	str	r3, [sp, #32]
 8025bde:	e657      	b.n	8025890 <forward_eltwise_integer_INT8+0x70>
 8025be0:	4625      	mov	r5, r4
 8025be2:	e62d      	b.n	8025840 <forward_eltwise_integer_INT8+0x20>
 8025be4:	2301      	movs	r3, #1
 8025be6:	e712      	b.n	8025a0e <forward_eltwise_integer_INT8+0x1ee>
 8025be8:	2300      	movs	r3, #0
 8025bea:	685b      	ldr	r3, [r3, #4]
 8025bec:	deff      	udf	#255	@ 0xff
 8025bee:	bf00      	nop
 8025bf0:	befffffc 	.word	0xbefffffc

08025bf4 <forward_lite_node_convert_integer_is8of32>:
 8025bf4:	f000 b90e 	b.w	8025e14 <lite_convert_is8of32>

08025bf8 <forward_lite_node_convert_integer_iu8of32>:
 8025bf8:	f000 b91e 	b.w	8025e38 <lite_convert_iu8of32>

08025bfc <forward_lite_node_convert_integer_if32os8>:
 8025bfc:	f000 b92e 	b.w	8025e5c <lite_convert_if32os8>

08025c00 <forward_lite_node_convert_integer_if32ou8>:
 8025c00:	f000 b962 	b.w	8025ec8 <lite_convert_if32ou8>

08025c04 <forward_lite_maxpool_is8os8_scalepos>:
 8025c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c08:	b095      	sub	sp, #84	@ 0x54
 8025c0a:	4614      	mov	r4, r2
 8025c0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8025c10:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8025c14:	f99d 009c 	ldrsb.w	r0, [sp, #156]	@ 0x9c
 8025c18:	910d      	str	r1, [sp, #52]	@ 0x34
 8025c1a:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8025c1e:	930c      	str	r3, [sp, #48]	@ 0x30
 8025c20:	910e      	str	r1, [sp, #56]	@ 0x38
 8025c22:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 8025c26:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 8025c2a:	910f      	str	r1, [sp, #60]	@ 0x3c
 8025c2c:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 8025c30:	9206      	str	r2, [sp, #24]
 8025c32:	9110      	str	r1, [sp, #64]	@ 0x40
 8025c34:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 8025c38:	f8bd a078 	ldrh.w	sl, [sp, #120]	@ 0x78
 8025c3c:	9111      	str	r1, [sp, #68]	@ 0x44
 8025c3e:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 8025c42:	f99d 20a0 	ldrsb.w	r2, [sp, #160]	@ 0xa0
 8025c46:	9112      	str	r1, [sp, #72]	@ 0x48
 8025c48:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 8025c4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025c4e:	9107      	str	r1, [sp, #28]
 8025c50:	9003      	str	r0, [sp, #12]
 8025c52:	2b00      	cmp	r3, #0
 8025c54:	f000 8094 	beq.w	8025d80 <forward_lite_maxpool_is8os8_scalepos+0x17c>
 8025c58:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8025c5c:	eeb4 0a67 	vcmp.f32	s0, s15
 8025c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c64:	bf0c      	ite	eq
 8025c66:	2301      	moveq	r3, #1
 8025c68:	2300      	movne	r3, #0
 8025c6a:	4290      	cmp	r0, r2
 8025c6c:	bf14      	ite	ne
 8025c6e:	2300      	movne	r3, #0
 8025c70:	f003 0301 	andeq.w	r3, r3, #1
 8025c74:	9301      	str	r3, [sp, #4]
 8025c76:	2900      	cmp	r1, #0
 8025c78:	f000 8082 	beq.w	8025d80 <forward_lite_maxpool_is8os8_scalepos+0x17c>
 8025c7c:	f1ba 0f00 	cmp.w	sl, #0
 8025c80:	d07e      	beq.n	8025d80 <forward_lite_maxpool_is8os8_scalepos+0x17c>
 8025c82:	ee07 2a90 	vmov	s15, r2
 8025c86:	2300      	movs	r3, #0
 8025c88:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 8025dc4 <forward_lite_maxpool_is8os8_scalepos+0x1c0>
 8025c8c:	fb04 fb0a 	mul.w	fp, r4, sl
 8025c90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8025c94:	9304      	str	r3, [sp, #16]
 8025c96:	9b04      	ldr	r3, [sp, #16]
 8025c98:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8025c9c:	9907      	ldr	r1, [sp, #28]
 8025c9e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025ca0:	fb03 f202 	mul.w	r2, r3, r2
 8025ca4:	fb03 f301 	mul.w	r3, r3, r1
 8025ca8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8025caa:	9308      	str	r3, [sp, #32]
 8025cac:	2300      	movs	r3, #0
 8025cae:	9305      	str	r3, [sp, #20]
 8025cb0:	1a53      	subs	r3, r2, r1
 8025cb2:	1a8a      	subs	r2, r1, r2
 8025cb4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8025cb6:	2b00      	cmp	r3, #0
 8025cb8:	eb02 0c01 	add.w	ip, r2, r1
 8025cbc:	bfd8      	it	le
 8025cbe:	4691      	movle	r9, r2
 8025cc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025cc2:	bfc8      	it	gt
 8025cc4:	f04f 0900 	movgt.w	r9, #0
 8025cc8:	4594      	cmp	ip, r2
 8025cca:	444b      	add	r3, r9
 8025ccc:	bfa8      	it	ge
 8025cce:	4694      	movge	ip, r2
 8025cd0:	9a06      	ldr	r2, [sp, #24]
 8025cd2:	fb02 f303 	mul.w	r3, r2, r3
 8025cd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8025cd8:	9a05      	ldr	r2, [sp, #20]
 8025cda:	f04f 0e00 	mov.w	lr, #0
 8025cde:	9908      	ldr	r1, [sp, #32]
 8025ce0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025ce2:	eb02 0801 	add.w	r8, r2, r1
 8025ce6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8025ce8:	fb03 f302 	mul.w	r3, r3, r2
 8025cec:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025cee:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025cf0:	fb0a 2808 	mla	r8, sl, r8, r2
 8025cf4:	1a5a      	subs	r2, r3, r1
 8025cf6:	1acb      	subs	r3, r1, r3
 8025cf8:	9906      	ldr	r1, [sp, #24]
 8025cfa:	2a00      	cmp	r2, #0
 8025cfc:	bfd8      	it	le
 8025cfe:	461f      	movle	r7, r3
 8025d00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025d02:	bfc8      	it	gt
 8025d04:	2700      	movgt	r7, #0
 8025d06:	18d3      	adds	r3, r2, r3
 8025d08:	1a8a      	subs	r2, r1, r2
 8025d0a:	4294      	cmp	r4, r2
 8025d0c:	443b      	add	r3, r7
 8025d0e:	bfa8      	it	ge
 8025d10:	4614      	movge	r4, r2
 8025d12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025d14:	fb0a 2303 	mla	r3, sl, r3, r2
 8025d18:	9302      	str	r3, [sp, #8]
 8025d1a:	45e1      	cmp	r9, ip
 8025d1c:	da4e      	bge.n	8025dbc <forward_lite_maxpool_is8os8_scalepos+0x1b8>
 8025d1e:	9b02      	ldr	r3, [sp, #8]
 8025d20:	464d      	mov	r5, r9
 8025d22:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8025d26:	eb03 060e 	add.w	r6, r3, lr
 8025d2a:	42a7      	cmp	r7, r4
 8025d2c:	da0a      	bge.n	8025d44 <forward_lite_maxpool_is8os8_scalepos+0x140>
 8025d2e:	4632      	mov	r2, r6
 8025d30:	463b      	mov	r3, r7
 8025d32:	f992 0000 	ldrsb.w	r0, [r2]
 8025d36:	3301      	adds	r3, #1
 8025d38:	4452      	add	r2, sl
 8025d3a:	4281      	cmp	r1, r0
 8025d3c:	bfb8      	it	lt
 8025d3e:	4601      	movlt	r1, r0
 8025d40:	429c      	cmp	r4, r3
 8025d42:	d1f6      	bne.n	8025d32 <forward_lite_maxpool_is8os8_scalepos+0x12e>
 8025d44:	3501      	adds	r5, #1
 8025d46:	445e      	add	r6, fp
 8025d48:	45ac      	cmp	ip, r5
 8025d4a:	d1ee      	bne.n	8025d2a <forward_lite_maxpool_is8os8_scalepos+0x126>
 8025d4c:	9b01      	ldr	r3, [sp, #4]
 8025d4e:	b1d3      	cbz	r3, 8025d86 <forward_lite_maxpool_is8os8_scalepos+0x182>
 8025d50:	f888 1000 	strb.w	r1, [r8]
 8025d54:	f10e 0e01 	add.w	lr, lr, #1
 8025d58:	f108 0801 	add.w	r8, r8, #1
 8025d5c:	fa1f f38e 	uxth.w	r3, lr
 8025d60:	459a      	cmp	sl, r3
 8025d62:	d8da      	bhi.n	8025d1a <forward_lite_maxpool_is8os8_scalepos+0x116>
 8025d64:	9b05      	ldr	r3, [sp, #20]
 8025d66:	9a07      	ldr	r2, [sp, #28]
 8025d68:	3301      	adds	r3, #1
 8025d6a:	b29b      	uxth	r3, r3
 8025d6c:	429a      	cmp	r2, r3
 8025d6e:	9305      	str	r3, [sp, #20]
 8025d70:	d8b2      	bhi.n	8025cd8 <forward_lite_maxpool_is8os8_scalepos+0xd4>
 8025d72:	9b04      	ldr	r3, [sp, #16]
 8025d74:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025d76:	3301      	adds	r3, #1
 8025d78:	b29b      	uxth	r3, r3
 8025d7a:	429a      	cmp	r2, r3
 8025d7c:	9304      	str	r3, [sp, #16]
 8025d7e:	d88a      	bhi.n	8025c96 <forward_lite_maxpool_is8os8_scalepos+0x92>
 8025d80:	b015      	add	sp, #84	@ 0x54
 8025d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025d86:	9b03      	ldr	r3, [sp, #12]
 8025d88:	eeb0 7a66 	vmov.f32	s14, s13
 8025d8c:	1ac9      	subs	r1, r1, r3
 8025d8e:	ee07 1a90 	vmov	s15, r1
 8025d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025d96:	eea7 7a80 	vfma.f32	s14, s15, s0
 8025d9a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8025d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025da2:	fe65 7a86 	vselge.f32	s15, s11, s12
 8025da6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025daa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025dae:	ee17 3a90 	vmov	r3, s15
 8025db2:	f303 0307 	ssat	r3, #8, r3
 8025db6:	f888 3000 	strb.w	r3, [r8]
 8025dba:	e7cb      	b.n	8025d54 <forward_lite_maxpool_is8os8_scalepos+0x150>
 8025dbc:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8025dc0:	e7c4      	b.n	8025d4c <forward_lite_maxpool_is8os8_scalepos+0x148>
 8025dc2:	bf00      	nop
 8025dc4:	befffffc 	.word	0xbefffffc

08025dc8 <forward_lite_avepool_is8os8>:
 8025dc8:	b410      	push	{r4}
 8025dca:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8025dce:	9401      	str	r4, [sp, #4]
 8025dd0:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8025dd4:	9402      	str	r4, [sp, #8]
 8025dd6:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8025dda:	9403      	str	r4, [sp, #12]
 8025ddc:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8025de0:	9404      	str	r4, [sp, #16]
 8025de2:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8025de6:	9405      	str	r4, [sp, #20]
 8025de8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8025dec:	9406      	str	r4, [sp, #24]
 8025dee:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8025df2:	9407      	str	r4, [sp, #28]
 8025df4:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8025df8:	9408      	str	r4, [sp, #32]
 8025dfa:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8025dfe:	9409      	str	r4, [sp, #36]	@ 0x24
 8025e00:	f99d 4028 	ldrsb.w	r4, [sp, #40]	@ 0x28
 8025e04:	940a      	str	r4, [sp, #40]	@ 0x28
 8025e06:	f99d 402c 	ldrsb.w	r4, [sp, #44]	@ 0x2c
 8025e0a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025e10:	f001 be0c 	b.w	8027a2c <st_int8_avepool>

08025e14 <lite_convert_is8of32>:
 8025e14:	2a00      	cmp	r2, #0
 8025e16:	dd0e      	ble.n	8025e36 <lite_convert_is8of32+0x22>
 8025e18:	4402      	add	r2, r0
 8025e1a:	f910 cb01 	ldrsb.w	ip, [r0], #1
 8025e1e:	ebac 0c03 	sub.w	ip, ip, r3
 8025e22:	4290      	cmp	r0, r2
 8025e24:	ee07 ca90 	vmov	s15, ip
 8025e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025e2c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8025e30:	ece1 7a01 	vstmia	r1!, {s15}
 8025e34:	d1f1      	bne.n	8025e1a <lite_convert_is8of32+0x6>
 8025e36:	4770      	bx	lr

08025e38 <lite_convert_iu8of32>:
 8025e38:	2a00      	cmp	r2, #0
 8025e3a:	dd0e      	ble.n	8025e5a <lite_convert_iu8of32+0x22>
 8025e3c:	4402      	add	r2, r0
 8025e3e:	f810 cb01 	ldrb.w	ip, [r0], #1
 8025e42:	ebac 0c03 	sub.w	ip, ip, r3
 8025e46:	4290      	cmp	r0, r2
 8025e48:	ee07 ca90 	vmov	s15, ip
 8025e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025e50:	ee67 7a80 	vmul.f32	s15, s15, s0
 8025e54:	ece1 7a01 	vstmia	r1!, {s15}
 8025e58:	d1f1      	bne.n	8025e3e <lite_convert_iu8of32+0x6>
 8025e5a:	4770      	bx	lr

08025e5c <lite_convert_if32os8>:
 8025e5c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8025e60:	2a00      	cmp	r2, #0
 8025e62:	ee87 6a80 	vdiv.f32	s12, s15, s0
 8025e66:	ee07 3a90 	vmov	s15, r3
 8025e6a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8025e6e:	dd28      	ble.n	8025ec2 <lite_convert_if32os8+0x66>
 8025e70:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8025e74:	440a      	add	r2, r1
 8025e76:	eddf 5a13 	vldr	s11, [pc, #76]	@ 8025ec4 <lite_convert_if32os8+0x68>
 8025e7a:	eef0 7a66 	vmov.f32	s15, s13
 8025e7e:	ecb0 7a01 	vldmia	r0!, {s14}
 8025e82:	eee7 7a06 	vfma.f32	s15, s14, s12
 8025e86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8025e8a:	ee37 7a85 	vadd.f32	s14, s15, s10
 8025e8e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8025e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e96:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8025e9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025e9e:	db08      	blt.n	8025eb2 <lite_convert_if32os8+0x56>
 8025ea0:	ee17 3a10 	vmov	r3, s14
 8025ea4:	f303 0307 	ssat	r3, #8, r3
 8025ea8:	f801 3b01 	strb.w	r3, [r1], #1
 8025eac:	4291      	cmp	r1, r2
 8025eae:	d1e4      	bne.n	8025e7a <lite_convert_if32os8+0x1e>
 8025eb0:	4770      	bx	lr
 8025eb2:	ee17 3a90 	vmov	r3, s15
 8025eb6:	f303 0307 	ssat	r3, #8, r3
 8025eba:	f801 3b01 	strb.w	r3, [r1], #1
 8025ebe:	4291      	cmp	r1, r2
 8025ec0:	d1db      	bne.n	8025e7a <lite_convert_if32os8+0x1e>
 8025ec2:	4770      	bx	lr
 8025ec4:	3efffffc 	.word	0x3efffffc

08025ec8 <lite_convert_if32ou8>:
 8025ec8:	ee07 3a10 	vmov	s14, r3
 8025ecc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8025ed0:	2a00      	cmp	r2, #0
 8025ed2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8025ed6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8025eda:	dd14      	ble.n	8025f06 <lite_convert_if32ou8+0x3e>
 8025edc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8025ee0:	440a      	add	r2, r1
 8025ee2:	ee87 6a80 	vdiv.f32	s12, s15, s0
 8025ee6:	ecb0 7a01 	vldmia	r0!, {s14}
 8025eea:	eef0 7a66 	vmov.f32	s15, s13
 8025eee:	eee7 7a06 	vfma.f32	s15, s14, s12
 8025ef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025ef6:	ee17 3a90 	vmov	r3, s15
 8025efa:	f383 0308 	usat	r3, #8, r3
 8025efe:	f801 3b01 	strb.w	r3, [r1], #1
 8025f02:	4291      	cmp	r1, r2
 8025f04:	d1ef      	bne.n	8025ee6 <lite_convert_if32ou8+0x1e>
 8025f06:	4770      	bx	lr

08025f08 <forward_lite_conv2d_deep_3x3_sssa8_ch>:
 8025f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f0c:	b097      	sub	sp, #92	@ 0x5c
 8025f0e:	4605      	mov	r5, r0
 8025f10:	e9cd 130d 	strd	r1, r3, [sp, #52]	@ 0x34
 8025f14:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	@ 0xa4
 8025f18:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	@ 0xa0
 8025f1c:	f8bd 9084 	ldrh.w	r9, [sp, #132]	@ 0x84
 8025f20:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 8025f22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025f24:	fb03 f301 	mul.w	r3, r3, r1
 8025f28:	f8dd b080 	ldr.w	fp, [sp, #128]	@ 0x80
 8025f2c:	9110      	str	r1, [sp, #64]	@ 0x40
 8025f2e:	fb09 6303 	mla	r3, r9, r3, r6
 8025f32:	f99d 108c 	ldrsb.w	r1, [sp, #140]	@ 0x8c
 8025f36:	f8dd a088 	ldr.w	sl, [sp, #136]	@ 0x88
 8025f3a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8025f3c:	4298      	cmp	r0, r3
 8025f3e:	f89d 1098 	ldrb.w	r1, [sp, #152]	@ 0x98
 8025f42:	f99d 7090 	ldrsb.w	r7, [sp, #144]	@ 0x90
 8025f46:	9114      	str	r1, [sp, #80]	@ 0x50
 8025f48:	d207      	bcs.n	8025f5a <forward_lite_conv2d_deep_3x3_sssa8_ch+0x52>
 8025f4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025f4c:	fb03 f202 	mul.w	r2, r3, r2
 8025f50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025f52:	fb03 0202 	mla	r2, r3, r2, r0
 8025f56:	4296      	cmp	r6, r2
 8025f58:	d377      	bcc.n	802604a <forward_lite_conv2d_deep_3x3_sssa8_ch+0x142>
 8025f5a:	2301      	movs	r3, #1
 8025f5c:	9315      	str	r3, [sp, #84]	@ 0x54
 8025f5e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8025f60:	4649      	mov	r1, r9
 8025f62:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8025f64:	ea4f 0849 	mov.w	r8, r9, lsl #1
 8025f68:	eba3 0449 	sub.w	r4, r3, r9, lsl #1
 8025f6c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025f6e:	441c      	add	r4, r3
 8025f70:	461a      	mov	r2, r3
 8025f72:	4623      	mov	r3, r4
 8025f74:	f001 fa6c 	bl	8027450 <align_factor_ch>
 8025f78:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025f7a:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8025f7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8025f80:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025f82:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8025f86:	9211      	str	r2, [sp, #68]	@ 0x44
 8025f88:	f1b9 0f00 	cmp.w	r9, #0
 8025f8c:	d062      	beq.n	8026054 <forward_lite_conv2d_deep_3x3_sssa8_ch+0x14c>
 8025f8e:	4623      	mov	r3, r4
 8025f90:	1d10      	adds	r0, r2, #4
 8025f92:	f04f 0e01 	mov.w	lr, #1
 8025f96:	eb04 0c08 	add.w	ip, r4, r8
 8025f9a:	f933 2b02 	ldrsh.w	r2, [r3], #2
 8025f9e:	1e51      	subs	r1, r2, #1
 8025fa0:	fa0e f402 	lsl.w	r4, lr, r2
 8025fa4:	fa07 f202 	lsl.w	r2, r7, r2
 8025fa8:	b289      	uxth	r1, r1
 8025faa:	eb02 0254 	add.w	r2, r2, r4, lsr #1
 8025fae:	2914      	cmp	r1, #20
 8025fb0:	d844      	bhi.n	802603c <forward_lite_conv2d_deep_3x3_sssa8_ch+0x134>
 8025fb2:	459c      	cmp	ip, r3
 8025fb4:	f840 2c04 	str.w	r2, [r0, #-4]
 8025fb8:	f100 0004 	add.w	r0, r0, #4
 8025fbc:	d1ed      	bne.n	8025f9a <forward_lite_conv2d_deep_3x3_sssa8_ch+0x92>
 8025fbe:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	@ 0xac
 8025fc2:	189c      	adds	r4, r3, r2
 8025fc4:	eba4 0408 	sub.w	r4, r4, r8
 8025fc8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8025fcc:	fb13 f802 	smulbb	r8, r3, r2
 8025fd0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025fd2:	fa1f f888 	uxth.w	r8, r8
 8025fd6:	2b00      	cmp	r3, #0
 8025fd8:	d02d      	beq.n	8026036 <forward_lite_conv2d_deep_3x3_sssa8_ch+0x12e>
 8025fda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025fdc:	4659      	mov	r1, fp
 8025fde:	2700      	movs	r7, #0
 8025fe0:	46cb      	mov	fp, r9
 8025fe2:	fb09 f002 	mul.w	r0, r9, r2
 8025fe6:	4652      	mov	r2, sl
 8025fe8:	4699      	mov	r9, r3
 8025fea:	46a2      	mov	sl, r4
 8025fec:	4644      	mov	r4, r8
 8025fee:	4680      	mov	r8, r0
 8025ff0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8025ff2:	3701      	adds	r7, #1
 8025ff4:	4628      	mov	r0, r5
 8025ff6:	f8cd a004 	str.w	sl, [sp, #4]
 8025ffa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025ffc:	4425      	add	r5, r4
 8025ffe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026000:	9222      	str	r2, [sp, #136]	@ 0x88
 8026002:	930a      	str	r3, [sp, #40]	@ 0x28
 8026004:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026006:	9120      	str	r1, [sp, #128]	@ 0x80
 8026008:	9309      	str	r3, [sp, #36]	@ 0x24
 802600a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802600c:	9308      	str	r3, [sp, #32]
 802600e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026010:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8026014:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026016:	9305      	str	r3, [sp, #20]
 8026018:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802601a:	9304      	str	r3, [sp, #16]
 802601c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802601e:	e9cd b302 	strd	fp, r3, [sp, #8]
 8026022:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026024:	9300      	str	r3, [sp, #0]
 8026026:	4633      	mov	r3, r6
 8026028:	f009 ffea 	bl	8030000 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3>
 802602c:	45b9      	cmp	r9, r7
 802602e:	4446      	add	r6, r8
 8026030:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8026032:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8026034:	d1dc      	bne.n	8025ff0 <forward_lite_conv2d_deep_3x3_sssa8_ch+0xe8>
 8026036:	b017      	add	sp, #92	@ 0x5c
 8026038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802603c:	459c      	cmp	ip, r3
 802603e:	f840 7c04 	str.w	r7, [r0, #-4]
 8026042:	f100 0004 	add.w	r0, r0, #4
 8026046:	d1a8      	bne.n	8025f9a <forward_lite_conv2d_deep_3x3_sssa8_ch+0x92>
 8026048:	e7b9      	b.n	8025fbe <forward_lite_conv2d_deep_3x3_sssa8_ch+0xb6>
 802604a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802604c:	9315      	str	r3, [sp, #84]	@ 0x54
 802604e:	2301      	movs	r3, #1
 8026050:	9310      	str	r3, [sp, #64]	@ 0x40
 8026052:	e784      	b.n	8025f5e <forward_lite_conv2d_deep_3x3_sssa8_ch+0x56>
 8026054:	9311      	str	r3, [sp, #68]	@ 0x44
 8026056:	e7b5      	b.n	8025fc4 <forward_lite_conv2d_deep_3x3_sssa8_ch+0xbc>

08026058 <forward_lite_conv2d_sssa8_ch>:
 8026058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802605c:	ed2d 8b06 	vpush	{d8-d10}
 8026060:	b0e3      	sub	sp, #396	@ 0x18c
 8026062:	469a      	mov	sl, r3
 8026064:	4605      	mov	r5, r0
 8026066:	f8bd 3200 	ldrh.w	r3, [sp, #512]	@ 0x200
 802606a:	9215      	str	r2, [sp, #84]	@ 0x54
 802606c:	f8bd 2204 	ldrh.w	r2, [sp, #516]	@ 0x204
 8026070:	9126      	str	r1, [sp, #152]	@ 0x98
 8026072:	9314      	str	r3, [sp, #80]	@ 0x50
 8026074:	f8bd 11cc 	ldrh.w	r1, [sp, #460]	@ 0x1cc
 8026078:	fb03 f302 	mul.w	r3, r3, r2
 802607c:	922f      	str	r2, [sp, #188]	@ 0xbc
 802607e:	9a7f      	ldr	r2, [sp, #508]	@ 0x1fc
 8026080:	ee08 1a90 	vmov	s17, r1
 8026084:	9320      	str	r3, [sp, #128]	@ 0x80
 8026086:	fb01 2303 	mla	r3, r1, r3, r2
 802608a:	f8bd 21d0 	ldrh.w	r2, [sp, #464]	@ 0x1d0
 802608e:	f99d 91ec 	ldrsb.w	r9, [sp, #492]	@ 0x1ec
 8026092:	922c      	str	r2, [sp, #176]	@ 0xb0
 8026094:	4298      	cmp	r0, r3
 8026096:	f8bd 21d4 	ldrh.w	r2, [sp, #468]	@ 0x1d4
 802609a:	f99d 61f0 	ldrsb.w	r6, [sp, #496]	@ 0x1f0
 802609e:	922b      	str	r2, [sp, #172]	@ 0xac
 80260a0:	f8bd 21d8 	ldrh.w	r2, [sp, #472]	@ 0x1d8
 80260a4:	f8bd 8208 	ldrh.w	r8, [sp, #520]	@ 0x208
 80260a8:	9216      	str	r2, [sp, #88]	@ 0x58
 80260aa:	f8bd 21dc 	ldrh.w	r2, [sp, #476]	@ 0x1dc
 80260ae:	f8dd b20c 	ldr.w	fp, [sp, #524]	@ 0x20c
 80260b2:	9230      	str	r2, [sp, #192]	@ 0xc0
 80260b4:	f8bd 21e0 	ldrh.w	r2, [sp, #480]	@ 0x1e0
 80260b8:	922d      	str	r2, [sp, #180]	@ 0xb4
 80260ba:	f8bd 21e4 	ldrh.w	r2, [sp, #484]	@ 0x1e4
 80260be:	9234      	str	r2, [sp, #208]	@ 0xd0
 80260c0:	f89d 21f8 	ldrb.w	r2, [sp, #504]	@ 0x1f8
 80260c4:	9227      	str	r2, [sp, #156]	@ 0x9c
 80260c6:	f0c0 82ef 	bcc.w	80266a8 <forward_lite_conv2d_sssa8_ch+0x650>
 80260ca:	2300      	movs	r3, #0
 80260cc:	932e      	str	r3, [sp, #184]	@ 0xb8
 80260ce:	ee18 1a90 	vmov	r1, s17
 80260d2:	9a84      	ldr	r2, [sp, #528]	@ 0x210
 80260d4:	987d      	ldr	r0, [sp, #500]	@ 0x1f4
 80260d6:	ebab 0341 	sub.w	r3, fp, r1, lsl #1
 80260da:	004f      	lsls	r7, r1, #1
 80260dc:	18d4      	adds	r4, r2, r3
 80260de:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80260e0:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 80260e2:	3b02      	subs	r3, #2
 80260e4:	2b01      	cmp	r3, #1
 80260e6:	4623      	mov	r3, r4
 80260e8:	bf98      	it	ls
 80260ea:	2200      	movls	r2, #0
 80260ec:	922e      	str	r2, [sp, #184]	@ 0xb8
 80260ee:	9a84      	ldr	r2, [sp, #528]	@ 0x210
 80260f0:	f001 f9ae 	bl	8027450 <align_factor_ch>
 80260f4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80260f6:	07db      	lsls	r3, r3, #31
 80260f8:	d506      	bpl.n	8026108 <forward_lite_conv2d_sssa8_ch+0xb0>
 80260fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80260fc:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 80260fe:	3302      	adds	r3, #2
 8026100:	3202      	adds	r2, #2
 8026102:	fb02 f303 	mul.w	r3, r2, r3
 8026106:	9320      	str	r3, [sp, #128]	@ 0x80
 8026108:	9b7a      	ldr	r3, [sp, #488]	@ 0x1e8
 802610a:	ee18 2a90 	vmov	r2, s17
 802610e:	9972      	ldr	r1, [sp, #456]	@ 0x1c8
 8026110:	4650      	mov	r0, sl
 8026112:	9301      	str	r3, [sp, #4]
 8026114:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 8026116:	e9cd 9302 	strd	r9, r3, [sp, #8]
 802611a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802611c:	9300      	str	r3, [sp, #0]
 802611e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026120:	f001 ff92 	bl	8028048 <st_sssa8_ch_convolve_rank1upd>
 8026124:	ee18 2a90 	vmov	r2, s17
 8026128:	9984      	ldr	r1, [sp, #528]	@ 0x210
 802612a:	18bb      	adds	r3, r7, r2
 802612c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8026130:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	@ 0xac
 8026134:	911b      	str	r1, [sp, #108]	@ 0x6c
 8026136:	fb10 f303 	smulbb	r3, r0, r3
 802613a:	fb13 f30a 	smulbb	r3, r3, sl
 802613e:	b29b      	uxth	r3, r3
 8026140:	931f      	str	r3, [sp, #124]	@ 0x7c
 8026142:	ebc2 7342 	rsb	r3, r2, r2, lsl #29
 8026146:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 802614a:	ee09 3a90 	vmov	s19, r3
 802614e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8026152:	9325      	str	r3, [sp, #148]	@ 0x94
 8026154:	b1da      	cbz	r2, 802618e <forward_lite_conv2d_sssa8_ch+0x136>
 8026156:	4622      	mov	r2, r4
 8026158:	1d18      	adds	r0, r3, #4
 802615a:	f04f 0c01 	mov.w	ip, #1
 802615e:	eb04 0e07 	add.w	lr, r4, r7
 8026162:	f932 3b02 	ldrsh.w	r3, [r2], #2
 8026166:	1e59      	subs	r1, r3, #1
 8026168:	fa0c f403 	lsl.w	r4, ip, r3
 802616c:	fa06 f303 	lsl.w	r3, r6, r3
 8026170:	b289      	uxth	r1, r1
 8026172:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8026176:	2914      	cmp	r1, #20
 8026178:	f200 8262 	bhi.w	8026640 <forward_lite_conv2d_sssa8_ch+0x5e8>
 802617c:	4572      	cmp	r2, lr
 802617e:	f840 3c04 	str.w	r3, [r0, #-4]
 8026182:	f100 0004 	add.w	r0, r0, #4
 8026186:	d1ec      	bne.n	8026162 <forward_lite_conv2d_sssa8_ch+0x10a>
 8026188:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 802618a:	eb03 040b 	add.w	r4, r3, fp
 802618e:	1be3      	subs	r3, r4, r7
 8026190:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8026192:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8026194:	aa42      	add	r2, sp, #264	@ 0x108
 8026196:	9324      	str	r3, [sp, #144]	@ 0x90
 8026198:	a84e      	add	r0, sp, #312	@ 0x138
 802619a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802619c:	fb01 f604 	mul.w	r6, r1, r4
 80261a0:	914b      	str	r1, [sp, #300]	@ 0x12c
 80261a2:	a958      	add	r1, sp, #352	@ 0x160
 80261a4:	9344      	str	r3, [sp, #272]	@ 0x110
 80261a6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80261a8:	fb0a f704 	mul.w	r7, sl, r4
 80261ac:	944c      	str	r4, [sp, #304]	@ 0x130
 80261ae:	9343      	str	r3, [sp, #268]	@ 0x10c
 80261b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80261b2:	9348      	str	r3, [sp, #288]	@ 0x120
 80261b4:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80261b6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80261b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80261ba:	935a      	str	r3, [sp, #360]	@ 0x168
 80261bc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80261be:	935b      	str	r3, [sp, #364]	@ 0x16c
 80261c0:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80261c2:	935c      	str	r3, [sp, #368]	@ 0x170
 80261c4:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80261c6:	935d      	str	r3, [sp, #372]	@ 0x174
 80261c8:	ab4a      	add	r3, sp, #296	@ 0x128
 80261ca:	9300      	str	r3, [sp, #0]
 80261cc:	ab46      	add	r3, sp, #280	@ 0x118
 80261ce:	f001 fbb9 	bl	8027944 <ai_padding_opt_init>
 80261d2:	fb0a f306 	mul.w	r3, sl, r6
 80261d6:	ee18 2a90 	vmov	r2, s17
 80261da:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80261dc:	fb02 f403 	mul.w	r4, r2, r3
 80261e0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80261e2:	fb07 f301 	mul.w	r3, r7, r1
 80261e6:	f5b4 6f20 	cmp.w	r4, #2560	@ 0xa00
 80261ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80261ee:	bfa8      	it	ge
 80261f0:	f44f 6420 	movge.w	r4, #2560	@ 0xa00
 80261f4:	f1b8 0f01 	cmp.w	r8, #1
 80261f8:	ee09 3a10 	vmov	s18, r3
 80261fc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80261fe:	f003 0202 	and.w	r2, r3, #2
 8026202:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8026206:	9238      	str	r2, [sp, #224]	@ 0xe0
 8026208:	9322      	str	r3, [sp, #136]	@ 0x88
 802620a:	f000 8237 	beq.w	802667c <forward_lite_conv2d_sssa8_ch+0x624>
 802620e:	2300      	movs	r3, #0
 8026210:	9337      	str	r3, [sp, #220]	@ 0xdc
 8026212:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8026214:	fbb4 f3f3 	udiv	r3, r4, r3
 8026218:	b29b      	uxth	r3, r3
 802621a:	4619      	mov	r1, r3
 802621c:	ee18 3a90 	vmov	r3, s17
 8026220:	4299      	cmp	r1, r3
 8026222:	bf28      	it	cs
 8026224:	4619      	movcs	r1, r3
 8026226:	fbb3 f2f1 	udiv	r2, r3, r1
 802622a:	fb01 3312 	mls	r3, r1, r2, r3
 802622e:	b292      	uxth	r2, r2
 8026230:	9121      	str	r1, [sp, #132]	@ 0x84
 8026232:	b29b      	uxth	r3, r3
 8026234:	9239      	str	r2, [sp, #228]	@ 0xe4
 8026236:	b11b      	cbz	r3, 8026240 <forward_lite_conv2d_sssa8_ch+0x1e8>
 8026238:	4613      	mov	r3, r2
 802623a:	3301      	adds	r3, #1
 802623c:	b29b      	uxth	r3, r3
 802623e:	9339      	str	r3, [sp, #228]	@ 0xe4
 8026240:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026242:	2b01      	cmp	r3, #1
 8026244:	f000 823d 	beq.w	80266c2 <forward_lite_conv2d_sssa8_ch+0x66a>
 8026248:	9a39      	ldr	r2, [sp, #228]	@ 0xe4
 802624a:	1e53      	subs	r3, r2, #1
 802624c:	b29b      	uxth	r3, r3
 802624e:	9335      	str	r3, [sp, #212]	@ 0xd4
 8026250:	2a00      	cmp	r2, #0
 8026252:	f000 8137 	beq.w	80264c4 <forward_lite_conv2d_sssa8_ch+0x46c>
 8026256:	fb0a f306 	mul.w	r3, sl, r6
 802625a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802625c:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 802625e:	fa0f f689 	sxth.w	r6, r9
 8026262:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026266:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026268:	ee0a aa10 	vmov	s20, sl
 802626c:	46b1      	mov	r9, r6
 802626e:	9319      	str	r3, [sp, #100]	@ 0x64
 8026270:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8026272:	edcd 8a36 	vstr	s17, [sp, #216]	@ 0xd8
 8026276:	fb03 f302 	mul.w	r3, r3, r2
 802627a:	425b      	negs	r3, r3
 802627c:	1a5b      	subs	r3, r3, r1
 802627e:	fb0a 5303 	mla	r3, sl, r3, r5
 8026282:	9339      	str	r3, [sp, #228]	@ 0xe4
 8026284:	fb0a f302 	mul.w	r3, sl, r2
 8026288:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802628a:	f1a2 0203 	sub.w	r2, r2, #3
 802628e:	9312      	str	r3, [sp, #72]	@ 0x48
 8026290:	fab2 f282 	clz	r2, r2
 8026294:	0952      	lsrs	r2, r2, #5
 8026296:	922a      	str	r2, [sp, #168]	@ 0xa8
 8026298:	f00a 0203 	and.w	r2, sl, #3
 802629c:	9213      	str	r2, [sp, #76]	@ 0x4c
 802629e:	007a      	lsls	r2, r7, #1
 80262a0:	921c      	str	r2, [sp, #112]	@ 0x70
 80262a2:	ea4f 024a 	mov.w	r2, sl, lsl #1
 80262a6:	9231      	str	r2, [sp, #196]	@ 0xc4
 80262a8:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 80262aa:	fb02 f303 	mul.w	r3, r2, r3
 80262ae:	9332      	str	r3, [sp, #200]	@ 0xc8
 80262b0:	424b      	negs	r3, r1
 80262b2:	9333      	str	r3, [sp, #204]	@ 0xcc
 80262b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80262b6:	fb0a f303 	mul.w	r3, sl, r3
 80262ba:	46ba      	mov	sl, r7
 80262bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80262be:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 80262c0:	b953      	cbnz	r3, 80262d8 <forward_lite_conv2d_sssa8_ch+0x280>
 80262c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80262c4:	2b00      	cmp	r3, #0
 80262c6:	f040 81d1 	bne.w	802666c <forward_lite_conv2d_sssa8_ch+0x614>
 80262ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80262cc:	ee19 1a10 	vmov	r1, s18
 80262d0:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80262d2:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 80262d4:	f001 fa7c 	bl	80277d0 <st_int8_to16_dual_interleaved>
 80262d8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80262da:	2b03      	cmp	r3, #3
 80262dc:	f000 81ba 	beq.w	8026654 <forward_lite_conv2d_sssa8_ch+0x5fc>
 80262e0:	9b7f      	ldr	r3, [sp, #508]	@ 0x1fc
 80262e2:	931e      	str	r3, [sp, #120]	@ 0x78
 80262e4:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80262e6:	2b00      	cmp	r3, #0
 80262e8:	f000 80b5 	beq.w	8026456 <forward_lite_conv2d_sssa8_ch+0x3fe>
 80262ec:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80262ee:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 80262f0:	1ad2      	subs	r2, r2, r3
 80262f2:	425b      	negs	r3, r3
 80262f4:	9317      	str	r3, [sp, #92]	@ 0x5c
 80262f6:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80262f8:	9211      	str	r2, [sp, #68]	@ 0x44
 80262fa:	9323      	str	r3, [sp, #140]	@ 0x8c
 80262fc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80262fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8026300:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026302:	9329      	str	r3, [sp, #164]	@ 0xa4
 8026304:	a84e      	add	r0, sp, #312	@ 0x138
 8026306:	f001 fb77 	bl	80279f8 <ai_padding_opt_phase1>
 802630a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802630c:	2b00      	cmp	r3, #0
 802630e:	d074      	beq.n	80263fa <forward_lite_conv2d_sssa8_ch+0x3a2>
 8026310:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8026312:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026314:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8026316:	1a9b      	subs	r3, r3, r2
 8026318:	fb01 f303 	mul.w	r3, r1, r3
 802631c:	931d      	str	r3, [sp, #116]	@ 0x74
 802631e:	e9dd 312c 	ldrd	r3, r1, [sp, #176]	@ 0xb0
 8026322:	1a5f      	subs	r7, r3, r1
 8026324:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8026326:	4413      	add	r3, r2
 8026328:	9328      	str	r3, [sp, #160]	@ 0xa0
 802632a:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 802632c:	930c      	str	r3, [sp, #48]	@ 0x30
 802632e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026330:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026332:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026334:	9310      	str	r3, [sp, #64]	@ 0x40
 8026336:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 8026338:	2b00      	cmp	r3, #0
 802633a:	f000 80d9 	beq.w	80264f0 <forward_lite_conv2d_sssa8_ch+0x498>
 802633e:	3b01      	subs	r3, #1
 8026340:	934e      	str	r3, [sp, #312]	@ 0x138
 8026342:	2301      	movs	r3, #1
 8026344:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 8026348:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802634a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802634c:	4293      	cmp	r3, r2
 802634e:	da40      	bge.n	80263d2 <forward_lite_conv2d_sssa8_ch+0x37a>
 8026350:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026352:	ee08 aa10 	vmov	s16, sl
 8026356:	9d31      	ldr	r5, [sp, #196]	@ 0xc4
 8026358:	ee1a 8a10 	vmov	r8, s20
 802635c:	1afb      	subs	r3, r7, r3
 802635e:	9e26      	ldr	r6, [sp, #152]	@ 0x98
 8026360:	fb05 f303 	mul.w	r3, r5, r3
 8026364:	9318      	str	r3, [sp, #96]	@ 0x60
 8026366:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026368:	930d      	str	r3, [sp, #52]	@ 0x34
 802636a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802636c:	930e      	str	r3, [sp, #56]	@ 0x38
 802636e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026370:	42bc      	cmp	r4, r7
 8026372:	da22      	bge.n	80263ba <forward_lite_conv2d_sssa8_ch+0x362>
 8026374:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026376:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026378:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 802637c:	4293      	cmp	r3, r2
 802637e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8026382:	bf8c      	ite	hi
 8026384:	2300      	movhi	r3, #0
 8026386:	2301      	movls	r3, #1
 8026388:	930b      	str	r3, [sp, #44]	@ 0x2c
 802638a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802638c:	2b00      	cmp	r3, #0
 802638e:	f000 809e 	beq.w	80264ce <forward_lite_conv2d_sssa8_ch+0x476>
 8026392:	42a6      	cmp	r6, r4
 8026394:	4651      	mov	r1, sl
 8026396:	4642      	mov	r2, r8
 8026398:	4648      	mov	r0, r9
 802639a:	d903      	bls.n	80263a4 <forward_lite_conv2d_sssa8_ch+0x34c>
 802639c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802639e:	2b00      	cmp	r3, #0
 80263a0:	f000 8124 	beq.w	80265ec <forward_lite_conv2d_sssa8_ch+0x594>
 80263a4:	f001 fc3a 	bl	8027c1c <st_int16_fill>
 80263a8:	3401      	adds	r4, #1
 80263aa:	44aa      	add	sl, r5
 80263ac:	44c3      	add	fp, r8
 80263ae:	42bc      	cmp	r4, r7
 80263b0:	d1ef      	bne.n	8026392 <forward_lite_conv2d_sssa8_ch+0x33a>
 80263b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80263b4:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80263b6:	4413      	add	r3, r2
 80263b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80263ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80263bc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80263be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80263c0:	440a      	add	r2, r1
 80263c2:	3301      	adds	r3, #1
 80263c4:	920d      	str	r2, [sp, #52]	@ 0x34
 80263c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80263c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80263ca:	4293      	cmp	r3, r2
 80263cc:	d1cf      	bne.n	802636e <forward_lite_conv2d_sssa8_ch+0x316>
 80263ce:	ee18 aa10 	vmov	sl, s16
 80263d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80263d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80263d6:	4293      	cmp	r3, r2
 80263d8:	f000 80bf 	beq.w	802655a <forward_lite_conv2d_sssa8_ch+0x502>
 80263dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80263de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80263e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80263e2:	440a      	add	r2, r1
 80263e4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80263e6:	3301      	adds	r3, #1
 80263e8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80263ea:	440f      	add	r7, r1
 80263ec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80263ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80263f0:	440a      	add	r2, r1
 80263f2:	920c      	str	r2, [sp, #48]	@ 0x30
 80263f4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80263f6:	429a      	cmp	r2, r3
 80263f8:	d19d      	bne.n	8026336 <forward_lite_conv2d_sssa8_ch+0x2de>
 80263fa:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 80263fc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80263fe:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026400:	440a      	add	r2, r1
 8026402:	3301      	adds	r3, #1
 8026404:	9211      	str	r2, [sp, #68]	@ 0x44
 8026406:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8026408:	9329      	str	r3, [sp, #164]	@ 0xa4
 802640a:	440a      	add	r2, r1
 802640c:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 802640e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8026410:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8026412:	440a      	add	r2, r1
 8026414:	9223      	str	r2, [sp, #140]	@ 0x8c
 8026416:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8026418:	429a      	cmp	r2, r3
 802641a:	f47f af73 	bne.w	8026304 <forward_lite_conv2d_sssa8_ch+0x2ac>
 802641e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8026420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026422:	4299      	cmp	r1, r3
 8026424:	d017      	beq.n	8026456 <forward_lite_conv2d_sssa8_ch+0x3fe>
 8026426:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8026428:	ee19 2a90 	vmov	r2, s19
 802642c:	ee19 0a10 	vmov	r0, s18
 8026430:	9307      	str	r3, [sp, #28]
 8026432:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026434:	9306      	str	r3, [sp, #24]
 8026436:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8026438:	9305      	str	r3, [sp, #20]
 802643a:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 802643c:	9304      	str	r3, [sp, #16]
 802643e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026440:	9303      	str	r3, [sp, #12]
 8026442:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8026444:	9302      	str	r3, [sp, #8]
 8026446:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026448:	9301      	str	r3, [sp, #4]
 802644a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802644c:	9300      	str	r3, [sp, #0]
 802644e:	ee18 3a90 	vmov	r3, s17
 8026452:	f004 fa3f 	bl	802a8d4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8026456:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8026458:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 802645a:	1a9b      	subs	r3, r3, r2
 802645c:	b299      	uxth	r1, r3
 802645e:	4613      	mov	r3, r2
 8026460:	428a      	cmp	r2, r1
 8026462:	9136      	str	r1, [sp, #216]	@ 0xd8
 8026464:	bf28      	it	cs
 8026466:	460b      	movcs	r3, r1
 8026468:	2b00      	cmp	r3, #0
 802646a:	f000 80f1 	beq.w	8026650 <forward_lite_conv2d_sssa8_ch+0x5f8>
 802646e:	9972      	ldr	r1, [sp, #456]	@ 0x1c8
 8026470:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8026472:	fb00 1102 	mla	r1, r0, r2, r1
 8026476:	9172      	str	r1, [sp, #456]	@ 0x1c8
 8026478:	ee19 1a90 	vmov	r1, s19
 802647c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8026480:	ee09 1a90 	vmov	s19, r1
 8026484:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8026486:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 802648a:	9124      	str	r1, [sp, #144]	@ 0x90
 802648c:	9984      	ldr	r1, [sp, #528]	@ 0x210
 802648e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8026492:	9184      	str	r1, [sp, #528]	@ 0x210
 8026494:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8026496:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802649a:	9125      	str	r1, [sp, #148]	@ 0x94
 802649c:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 802649e:	2900      	cmp	r1, #0
 80264a0:	f000 80de 	beq.w	8026660 <forward_lite_conv2d_sssa8_ch+0x608>
 80264a4:	997f      	ldr	r1, [sp, #508]	@ 0x1fc
 80264a6:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80264a8:	9321      	str	r3, [sp, #132]	@ 0x84
 80264aa:	fb00 1202 	mla	r2, r0, r2, r1
 80264ae:	927f      	str	r2, [sp, #508]	@ 0x1fc
 80264b0:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80264b2:	3b01      	subs	r3, #1
 80264b4:	b29b      	uxth	r3, r3
 80264b6:	461a      	mov	r2, r3
 80264b8:	9335      	str	r3, [sp, #212]	@ 0xd4
 80264ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80264be:	429a      	cmp	r2, r3
 80264c0:	f47f aefd 	bne.w	80262be <forward_lite_conv2d_sssa8_ch+0x266>
 80264c4:	b063      	add	sp, #396	@ 0x18c
 80264c6:	ecbd 8b06 	vpop	{d8-d10}
 80264ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80264ce:	42a6      	cmp	r6, r4
 80264d0:	4642      	mov	r2, r8
 80264d2:	4651      	mov	r1, sl
 80264d4:	4648      	mov	r0, r9
 80264d6:	d903      	bls.n	80264e0 <forward_lite_conv2d_sssa8_ch+0x488>
 80264d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80264da:	2b00      	cmp	r3, #0
 80264dc:	f000 8082 	beq.w	80265e4 <forward_lite_conv2d_sssa8_ch+0x58c>
 80264e0:	f001 fb9c 	bl	8027c1c <st_int16_fill>
 80264e4:	3401      	adds	r4, #1
 80264e6:	44aa      	add	sl, r5
 80264e8:	44c3      	add	fp, r8
 80264ea:	42bc      	cmp	r4, r7
 80264ec:	d1ef      	bne.n	80264ce <forward_lite_conv2d_sssa8_ch+0x476>
 80264ee:	e760      	b.n	80263b2 <forward_lite_conv2d_sssa8_ch+0x35a>
 80264f0:	9b4f      	ldr	r3, [sp, #316]	@ 0x13c
 80264f2:	b933      	cbnz	r3, 8026502 <forward_lite_conv2d_sssa8_ch+0x4aa>
 80264f4:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 80264f6:	3b01      	subs	r3, #1
 80264f8:	9350      	str	r3, [sp, #320]	@ 0x140
 80264fa:	2301      	movs	r3, #1
 80264fc:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 8026500:	e722      	b.n	8026348 <forward_lite_conv2d_sssa8_ch+0x2f0>
 8026502:	3b01      	subs	r3, #1
 8026504:	934f      	str	r3, [sp, #316]	@ 0x13c
 8026506:	f8bd 315c 	ldrh.w	r3, [sp, #348]	@ 0x15c
 802650a:	2b01      	cmp	r3, #1
 802650c:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 8026510:	f43f af1a 	beq.w	8026348 <forward_lite_conv2d_sssa8_ch+0x2f0>
 8026514:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026516:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8026518:	2b00      	cmp	r3, #0
 802651a:	d148      	bne.n	80265ae <forward_lite_conv2d_sssa8_ch+0x556>
 802651c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802651e:	429c      	cmp	r4, r3
 8026520:	f6bf af57 	bge.w	80263d2 <forward_lite_conv2d_sssa8_ch+0x37a>
 8026524:	970b      	str	r7, [sp, #44]	@ 0x2c
 8026526:	4698      	mov	r8, r3
 8026528:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 802652a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802652c:	f8dd b070 	ldr.w	fp, [sp, #112]	@ 0x70
 8026530:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8026532:	3401      	adds	r4, #1
 8026534:	4629      	mov	r1, r5
 8026536:	4630      	mov	r0, r6
 8026538:	4652      	mov	r2, sl
 802653a:	f001 f81b 	bl	8027574 <st_int8_to16_no_shift_interleaved>
 802653e:	4544      	cmp	r4, r8
 8026540:	445d      	add	r5, fp
 8026542:	443e      	add	r6, r7
 8026544:	d1f5      	bne.n	8026532 <forward_lite_conv2d_sssa8_ch+0x4da>
 8026546:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8026548:	e9dd 370a 	ldrd	r3, r7, [sp, #40]	@ 0x28
 802654c:	4413      	add	r3, r2
 802654e:	930a      	str	r3, [sp, #40]	@ 0x28
 8026550:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8026552:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026554:	4293      	cmp	r3, r2
 8026556:	f47f af41 	bne.w	80263dc <forward_lite_conv2d_sssa8_ch+0x384>
 802655a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802655c:	2b00      	cmp	r3, #0
 802655e:	d149      	bne.n	80265f4 <forward_lite_conv2d_sssa8_ch+0x59c>
 8026560:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026562:	2b00      	cmp	r3, #0
 8026564:	d046      	beq.n	80265f4 <forward_lite_conv2d_sssa8_ch+0x59c>
 8026566:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8026568:	ee19 2a90 	vmov	r2, s19
 802656c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 802656e:	ee19 0a10 	vmov	r0, s18
 8026572:	9308      	str	r3, [sp, #32]
 8026574:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026576:	9307      	str	r3, [sp, #28]
 8026578:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802657a:	9306      	str	r3, [sp, #24]
 802657c:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 802657e:	9305      	str	r3, [sp, #20]
 8026580:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026582:	9304      	str	r3, [sp, #16]
 8026584:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8026586:	9303      	str	r3, [sp, #12]
 8026588:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802658a:	9302      	str	r3, [sp, #8]
 802658c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802658e:	9300      	str	r3, [sp, #0]
 8026590:	2302      	movs	r3, #2
 8026592:	9301      	str	r3, [sp, #4]
 8026594:	ee18 3a90 	vmov	r3, s17
 8026598:	f00a faec 	bl	8030b74 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 802659c:	901e      	str	r0, [sp, #120]	@ 0x78
 802659e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80265a0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80265a2:	3b01      	subs	r3, #1
 80265a4:	4293      	cmp	r3, r2
 80265a6:	d045      	beq.n	8026634 <forward_lite_conv2d_sssa8_ch+0x5dc>
 80265a8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80265aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80265ac:	e716      	b.n	80263dc <forward_lite_conv2d_sssa8_ch+0x384>
 80265ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80265b0:	429c      	cmp	r4, r3
 80265b2:	f6bf af0e 	bge.w	80263d2 <forward_lite_conv2d_sssa8_ch+0x37a>
 80265b6:	970b      	str	r7, [sp, #44]	@ 0x2c
 80265b8:	4698      	mov	r8, r3
 80265ba:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80265bc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80265be:	f8dd b070 	ldr.w	fp, [sp, #112]	@ 0x70
 80265c2:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80265c4:	3401      	adds	r4, #1
 80265c6:	4629      	mov	r1, r5
 80265c8:	4630      	mov	r0, r6
 80265ca:	4652      	mov	r2, sl
 80265cc:	f000 ff70 	bl	80274b0 <st_int8_to16_no_shift>
 80265d0:	4544      	cmp	r4, r8
 80265d2:	445d      	add	r5, fp
 80265d4:	443e      	add	r6, r7
 80265d6:	d1f5      	bne.n	80265c4 <forward_lite_conv2d_sssa8_ch+0x56c>
 80265d8:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80265da:	e9dd 370a 	ldrd	r3, r7, [sp, #40]	@ 0x28
 80265de:	4413      	add	r3, r2
 80265e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80265e2:	e7b5      	b.n	8026550 <forward_lite_conv2d_sssa8_ch+0x4f8>
 80265e4:	4658      	mov	r0, fp
 80265e6:	f000 ffc5 	bl	8027574 <st_int8_to16_no_shift_interleaved>
 80265ea:	e77b      	b.n	80264e4 <forward_lite_conv2d_sssa8_ch+0x48c>
 80265ec:	4658      	mov	r0, fp
 80265ee:	f000 ff5f 	bl	80274b0 <st_int8_to16_no_shift>
 80265f2:	e6d9      	b.n	80263a8 <forward_lite_conv2d_sssa8_ch+0x350>
 80265f4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80265f6:	ee19 2a90 	vmov	r2, s19
 80265fa:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80265fc:	ee19 0a10 	vmov	r0, s18
 8026600:	9308      	str	r3, [sp, #32]
 8026602:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026604:	9307      	str	r3, [sp, #28]
 8026606:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8026608:	9306      	str	r3, [sp, #24]
 802660a:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 802660c:	9305      	str	r3, [sp, #20]
 802660e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026610:	9304      	str	r3, [sp, #16]
 8026612:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8026614:	9303      	str	r3, [sp, #12]
 8026616:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026618:	9302      	str	r3, [sp, #8]
 802661a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802661c:	9300      	str	r3, [sp, #0]
 802661e:	2300      	movs	r3, #0
 8026620:	9301      	str	r3, [sp, #4]
 8026622:	ee18 3a90 	vmov	r3, s17
 8026626:	f00a faa5 	bl	8030b74 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 802662a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802662c:	901e      	str	r0, [sp, #120]	@ 0x78
 802662e:	2b03      	cmp	r3, #3
 8026630:	d1ba      	bne.n	80265a8 <forward_lite_conv2d_sssa8_ch+0x550>
 8026632:	e7b4      	b.n	802659e <forward_lite_conv2d_sssa8_ch+0x546>
 8026634:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8026636:	3302      	adds	r3, #2
 8026638:	931e      	str	r3, [sp, #120]	@ 0x78
 802663a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802663c:	930a      	str	r3, [sp, #40]	@ 0x28
 802663e:	e6cd      	b.n	80263dc <forward_lite_conv2d_sssa8_ch+0x384>
 8026640:	4572      	cmp	r2, lr
 8026642:	f840 6c04 	str.w	r6, [r0, #-4]
 8026646:	f100 0004 	add.w	r0, r0, #4
 802664a:	f47f ad8a 	bne.w	8026162 <forward_lite_conv2d_sssa8_ch+0x10a>
 802664e:	e59b      	b.n	8026188 <forward_lite_conv2d_sssa8_ch+0x130>
 8026650:	9321      	str	r3, [sp, #132]	@ 0x84
 8026652:	e72d      	b.n	80264b0 <forward_lite_conv2d_sssa8_ch+0x458>
 8026654:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8026656:	9a7f      	ldr	r2, [sp, #508]	@ 0x1fc
 8026658:	3303      	adds	r3, #3
 802665a:	18d3      	adds	r3, r2, r3
 802665c:	931e      	str	r3, [sp, #120]	@ 0x78
 802665e:	e641      	b.n	80262e4 <forward_lite_conv2d_sssa8_ch+0x28c>
 8026660:	4611      	mov	r1, r2
 8026662:	9a7f      	ldr	r2, [sp, #508]	@ 0x1fc
 8026664:	9321      	str	r3, [sp, #132]	@ 0x84
 8026666:	440a      	add	r2, r1
 8026668:	927f      	str	r2, [sp, #508]	@ 0x1fc
 802666a:	e721      	b.n	80264b0 <forward_lite_conv2d_sssa8_ch+0x458>
 802666c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802666e:	ee19 1a10 	vmov	r1, s18
 8026672:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8026674:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 8026676:	f000 ffc1 	bl	80275fc <st_int8_to16_dual>
 802667a:	e62d      	b.n	80262d8 <forward_lite_conv2d_sssa8_ch+0x280>
 802667c:	ee18 1a90 	vmov	r1, s17
 8026680:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8026682:	fb02 f301 	mul.w	r3, r2, r1
 8026686:	42a3      	cmp	r3, r4
 8026688:	f73f adc1 	bgt.w	802620e <forward_lite_conv2d_sssa8_ch+0x1b6>
 802668c:	f01a 0f03 	tst.w	sl, #3
 8026690:	f8cd 80dc 	str.w	r8, [sp, #220]	@ 0xdc
 8026694:	f040 822e 	bne.w	8026af4 <forward_lite_conv2d_sssa8_ch+0xa9c>
 8026698:	ee18 3a90 	vmov	r3, s17
 802669c:	ee19 1a10 	vmov	r1, s18
 80266a0:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 80266a2:	f001 f895 	bl	80277d0 <st_int8_to16_dual_interleaved>
 80266a6:	e5b4      	b.n	8026212 <forward_lite_conv2d_sssa8_ch+0x1ba>
 80266a8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80266aa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80266ac:	fb02 f303 	mul.w	r3, r2, r3
 80266b0:	9a7f      	ldr	r2, [sp, #508]	@ 0x1fc
 80266b2:	fb0a 0303 	mla	r3, sl, r3, r0
 80266b6:	429a      	cmp	r2, r3
 80266b8:	bf2c      	ite	cs
 80266ba:	2300      	movcs	r3, #0
 80266bc:	2301      	movcc	r3, #1
 80266be:	932e      	str	r3, [sp, #184]	@ 0xb8
 80266c0:	e505      	b.n	80260ce <forward_lite_conv2d_sssa8_ch+0x76>
 80266c2:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80266c4:	2b00      	cmp	r3, #0
 80266c6:	f43f aefd 	beq.w	80264c4 <forward_lite_conv2d_sssa8_ch+0x46c>
 80266ca:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 80266cc:	fb0a f306 	mul.w	r3, sl, r6
 80266d0:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80266d2:	fa0f f989 	sxth.w	r9, r9
 80266d6:	9238      	str	r2, [sp, #224]	@ 0xe0
 80266d8:	ee0a aa90 	vmov	s21, sl
 80266dc:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80266de:	fb01 f40a 	mul.w	r4, r1, sl
 80266e2:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 80266e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80266e8:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 80266ea:	9413      	str	r4, [sp, #76]	@ 0x4c
 80266ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80266ee:	fb01 f302 	mul.w	r3, r1, r2
 80266f2:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80266f4:	425b      	negs	r3, r3
 80266f6:	1a1b      	subs	r3, r3, r0
 80266f8:	fb0a 5303 	mla	r3, sl, r3, r5
 80266fc:	9d7f      	ldr	r5, [sp, #508]	@ 0x1fc
 80266fe:	9335      	str	r3, [sp, #212]	@ 0xd4
 8026700:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8026702:	953c      	str	r5, [sp, #240]	@ 0xf0
 8026704:	3b01      	subs	r3, #1
 8026706:	b29b      	uxth	r3, r3
 8026708:	9341      	str	r3, [sp, #260]	@ 0x104
 802670a:	1ccb      	adds	r3, r1, #3
 802670c:	18eb      	adds	r3, r5, r3
 802670e:	933b      	str	r3, [sp, #236]	@ 0xec
 8026710:	f00a 0303 	and.w	r3, sl, #3
 8026714:	9312      	str	r3, [sp, #72]	@ 0x48
 8026716:	007b      	lsls	r3, r7, #1
 8026718:	931c      	str	r3, [sp, #112]	@ 0x70
 802671a:	ea4f 034a 	mov.w	r3, sl, lsl #1
 802671e:	9334      	str	r3, [sp, #208]	@ 0xd0
 8026720:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8026722:	1a9b      	subs	r3, r3, r2
 8026724:	9310      	str	r3, [sp, #64]	@ 0x40
 8026726:	4253      	negs	r3, r2
 8026728:	9318      	str	r3, [sp, #96]	@ 0x60
 802672a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802672c:	fb03 f304 	mul.w	r3, r3, r4
 8026730:	933e      	str	r3, [sp, #248]	@ 0xf8
 8026732:	4243      	negs	r3, r0
 8026734:	a84e      	add	r0, sp, #312	@ 0x138
 8026736:	933a      	str	r3, [sp, #232]	@ 0xe8
 8026738:	1c8b      	adds	r3, r1, #2
 802673a:	9340      	str	r3, [sp, #256]	@ 0x100
 802673c:	ee18 3a90 	vmov	r3, s17
 8026740:	fb01 f303 	mul.w	r3, r1, r3
 8026744:	933f      	str	r3, [sp, #252]	@ 0xfc
 8026746:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026748:	fb03 f30a 	mul.w	r3, r3, sl
 802674c:	46ca      	mov	sl, r9
 802674e:	9319      	str	r3, [sp, #100]	@ 0x64
 8026750:	f001 f952 	bl	80279f8 <ai_padding_opt_phase1>
 8026754:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8026756:	2b03      	cmp	r3, #3
 8026758:	f000 81b6 	beq.w	8026ac8 <forward_lite_conv2d_sssa8_ch+0xa70>
 802675c:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 802675e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8026760:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8026762:	933d      	str	r3, [sp, #244]	@ 0xf4
 8026764:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8026766:	b953      	cbnz	r3, 802677e <forward_lite_conv2d_sssa8_ch+0x726>
 8026768:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802676a:	2b00      	cmp	r3, #0
 802676c:	f040 81ba 	bne.w	8026ae4 <forward_lite_conv2d_sssa8_ch+0xa8c>
 8026770:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026772:	ee19 1a10 	vmov	r1, s18
 8026776:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8026778:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 802677a:	f001 f829 	bl	80277d0 <st_int8_to16_dual_interleaved>
 802677e:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8026780:	2b00      	cmp	r3, #0
 8026782:	f000 817f 	beq.w	8026a84 <forward_lite_conv2d_sssa8_ch+0xa2c>
 8026786:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8026788:	eeb0 aa69 	vmov.f32	s20, s19
 802678c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802678e:	46b8      	mov	r8, r7
 8026790:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8026792:	1a9b      	subs	r3, r3, r2
 8026794:	edcd 8a32 	vstr	s17, [sp, #200]	@ 0xc8
 8026798:	fb01 f303 	mul.w	r3, r1, r3
 802679c:	931d      	str	r3, [sp, #116]	@ 0x74
 802679e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80267a0:	18d3      	adds	r3, r2, r3
 80267a2:	9333      	str	r3, [sp, #204]	@ 0xcc
 80267a4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80267a6:	9331      	str	r3, [sp, #196]	@ 0xc4
 80267a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80267aa:	9323      	str	r3, [sp, #140]	@ 0x8c
 80267ac:	9b72      	ldr	r3, [sp, #456]	@ 0x1c8
 80267ae:	9336      	str	r3, [sp, #216]	@ 0xd8
 80267b0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80267b2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80267b4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80267b6:	932e      	str	r3, [sp, #184]	@ 0xb8
 80267b8:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 80267ba:	932a      	str	r3, [sp, #168]	@ 0xa8
 80267bc:	9a52      	ldr	r2, [sp, #328]	@ 0x148
 80267be:	9b51      	ldr	r3, [sp, #324]	@ 0x144
 80267c0:	924f      	str	r2, [sp, #316]	@ 0x13c
 80267c2:	9a53      	ldr	r2, [sp, #332]	@ 0x14c
 80267c4:	934e      	str	r3, [sp, #312]	@ 0x138
 80267c6:	9250      	str	r2, [sp, #320]	@ 0x140
 80267c8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80267ca:	2a00      	cmp	r2, #0
 80267cc:	f000 8120 	beq.w	8026a10 <forward_lite_conv2d_sssa8_ch+0x9b8>
 80267d0:	e9dd 212c 	ldrd	r2, r1, [sp, #176]	@ 0xb0
 80267d4:	1a57      	subs	r7, r2, r1
 80267d6:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 80267d8:	920c      	str	r2, [sp, #48]	@ 0x30
 80267da:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 80267dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80267de:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80267e0:	921e      	str	r2, [sp, #120]	@ 0x78
 80267e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80267e4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80267e6:	2200      	movs	r2, #0
 80267e8:	9211      	str	r2, [sp, #68]	@ 0x44
 80267ea:	2b00      	cmp	r3, #0
 80267ec:	d05f      	beq.n	80268ae <forward_lite_conv2d_sssa8_ch+0x856>
 80267ee:	3b01      	subs	r3, #1
 80267f0:	934e      	str	r3, [sp, #312]	@ 0x138
 80267f2:	2301      	movs	r3, #1
 80267f4:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 80267f8:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 80267fa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80267fc:	4293      	cmp	r3, r2
 80267fe:	dd3f      	ble.n	8026880 <forward_lite_conv2d_sssa8_ch+0x828>
 8026800:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026802:	ee08 8a10 	vmov	s16, r8
 8026806:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 8026808:	ee1a 9a90 	vmov	r9, s21
 802680c:	1afb      	subs	r3, r7, r3
 802680e:	9e26      	ldr	r6, [sp, #152]	@ 0x98
 8026810:	fb05 f303 	mul.w	r3, r5, r3
 8026814:	9317      	str	r3, [sp, #92]	@ 0x5c
 8026816:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026818:	930d      	str	r3, [sp, #52]	@ 0x34
 802681a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802681c:	930e      	str	r3, [sp, #56]	@ 0x38
 802681e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026820:	42bc      	cmp	r4, r7
 8026822:	da21      	bge.n	8026868 <forward_lite_conv2d_sssa8_ch+0x810>
 8026824:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026826:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8026828:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 802682c:	4293      	cmp	r3, r2
 802682e:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 8026832:	bf34      	ite	cc
 8026834:	2300      	movcc	r3, #0
 8026836:	2301      	movcs	r3, #1
 8026838:	930a      	str	r3, [sp, #40]	@ 0x28
 802683a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802683c:	2b00      	cmp	r3, #0
 802683e:	d03f      	beq.n	80268c0 <forward_lite_conv2d_sssa8_ch+0x868>
 8026840:	42b4      	cmp	r4, r6
 8026842:	4641      	mov	r1, r8
 8026844:	464a      	mov	r2, r9
 8026846:	4650      	mov	r0, sl
 8026848:	d203      	bcs.n	8026852 <forward_lite_conv2d_sssa8_ch+0x7fa>
 802684a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802684c:	2b00      	cmp	r3, #0
 802684e:	f000 80bf 	beq.w	80269d0 <forward_lite_conv2d_sssa8_ch+0x978>
 8026852:	f001 f9e3 	bl	8027c1c <st_int16_fill>
 8026856:	3401      	adds	r4, #1
 8026858:	44a8      	add	r8, r5
 802685a:	44cb      	add	fp, r9
 802685c:	42a7      	cmp	r7, r4
 802685e:	d1ef      	bne.n	8026840 <forward_lite_conv2d_sssa8_ch+0x7e8>
 8026860:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026862:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8026864:	4413      	add	r3, r2
 8026866:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026868:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802686a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802686c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802686e:	440a      	add	r2, r1
 8026870:	3301      	adds	r3, #1
 8026872:	920d      	str	r2, [sp, #52]	@ 0x34
 8026874:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8026876:	930e      	str	r3, [sp, #56]	@ 0x38
 8026878:	4293      	cmp	r3, r2
 802687a:	d1d0      	bne.n	802681e <forward_lite_conv2d_sssa8_ch+0x7c6>
 802687c:	ee18 8a10 	vmov	r8, s16
 8026880:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8026882:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8026884:	4293      	cmp	r3, r2
 8026886:	d055      	beq.n	8026934 <forward_lite_conv2d_sssa8_ch+0x8dc>
 8026888:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802688a:	9919      	ldr	r1, [sp, #100]	@ 0x64
 802688c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802688e:	440a      	add	r2, r1
 8026890:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8026892:	3301      	adds	r3, #1
 8026894:	920f      	str	r2, [sp, #60]	@ 0x3c
 8026896:	440f      	add	r7, r1
 8026898:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802689a:	9311      	str	r3, [sp, #68]	@ 0x44
 802689c:	440a      	add	r2, r1
 802689e:	920c      	str	r2, [sp, #48]	@ 0x30
 80268a0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80268a2:	429a      	cmp	r2, r3
 80268a4:	f000 8098 	beq.w	80269d8 <forward_lite_conv2d_sssa8_ch+0x980>
 80268a8:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 80268aa:	2b00      	cmp	r3, #0
 80268ac:	d19f      	bne.n	80267ee <forward_lite_conv2d_sssa8_ch+0x796>
 80268ae:	9b4f      	ldr	r3, [sp, #316]	@ 0x13c
 80268b0:	b9b3      	cbnz	r3, 80268e0 <forward_lite_conv2d_sssa8_ch+0x888>
 80268b2:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 80268b4:	3b01      	subs	r3, #1
 80268b6:	9350      	str	r3, [sp, #320]	@ 0x140
 80268b8:	2301      	movs	r3, #1
 80268ba:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 80268be:	e79b      	b.n	80267f8 <forward_lite_conv2d_sssa8_ch+0x7a0>
 80268c0:	42b4      	cmp	r4, r6
 80268c2:	464a      	mov	r2, r9
 80268c4:	4641      	mov	r1, r8
 80268c6:	4650      	mov	r0, sl
 80268c8:	d202      	bcs.n	80268d0 <forward_lite_conv2d_sssa8_ch+0x878>
 80268ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80268cc:	2b00      	cmp	r3, #0
 80268ce:	d07b      	beq.n	80269c8 <forward_lite_conv2d_sssa8_ch+0x970>
 80268d0:	f001 f9a4 	bl	8027c1c <st_int16_fill>
 80268d4:	3401      	adds	r4, #1
 80268d6:	44a8      	add	r8, r5
 80268d8:	44cb      	add	fp, r9
 80268da:	42bc      	cmp	r4, r7
 80268dc:	d1f0      	bne.n	80268c0 <forward_lite_conv2d_sssa8_ch+0x868>
 80268de:	e7bf      	b.n	8026860 <forward_lite_conv2d_sssa8_ch+0x808>
 80268e0:	3b01      	subs	r3, #1
 80268e2:	934f      	str	r3, [sp, #316]	@ 0x13c
 80268e4:	f8bd 315c 	ldrh.w	r3, [sp, #348]	@ 0x15c
 80268e8:	2b01      	cmp	r3, #1
 80268ea:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 80268ee:	d083      	beq.n	80267f8 <forward_lite_conv2d_sssa8_ch+0x7a0>
 80268f0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80268f2:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80268f4:	2b00      	cmp	r3, #0
 80268f6:	d14b      	bne.n	8026990 <forward_lite_conv2d_sssa8_ch+0x938>
 80268f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80268fa:	429c      	cmp	r4, r3
 80268fc:	dac0      	bge.n	8026880 <forward_lite_conv2d_sssa8_ch+0x828>
 80268fe:	970a      	str	r7, [sp, #40]	@ 0x28
 8026900:	461f      	mov	r7, r3
 8026902:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8026904:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8026906:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
 802690a:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
 802690e:	3401      	adds	r4, #1
 8026910:	4629      	mov	r1, r5
 8026912:	4630      	mov	r0, r6
 8026914:	4642      	mov	r2, r8
 8026916:	f000 fe2d 	bl	8027574 <st_int8_to16_no_shift_interleaved>
 802691a:	42bc      	cmp	r4, r7
 802691c:	444d      	add	r5, r9
 802691e:	445e      	add	r6, fp
 8026920:	d1f5      	bne.n	802690e <forward_lite_conv2d_sssa8_ch+0x8b6>
 8026922:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8026924:	e9dd 730a 	ldrd	r7, r3, [sp, #40]	@ 0x28
 8026928:	4413      	add	r3, r2
 802692a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802692c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802692e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8026930:	4293      	cmp	r3, r2
 8026932:	d1a9      	bne.n	8026888 <forward_lite_conv2d_sssa8_ch+0x830>
 8026934:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8026936:	ee19 0a10 	vmov	r0, s18
 802693a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802693c:	9308      	str	r3, [sp, #32]
 802693e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026940:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026942:	9307      	str	r3, [sp, #28]
 8026944:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026946:	3401      	adds	r4, #1
 8026948:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 802694a:	9306      	str	r3, [sp, #24]
 802694c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802694e:	9411      	str	r4, [sp, #68]	@ 0x44
 8026950:	9305      	str	r3, [sp, #20]
 8026952:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026954:	9304      	str	r3, [sp, #16]
 8026956:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8026958:	9303      	str	r3, [sp, #12]
 802695a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802695c:	9302      	str	r3, [sp, #8]
 802695e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026960:	9300      	str	r3, [sp, #0]
 8026962:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026964:	4413      	add	r3, r2
 8026966:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8026968:	930f      	str	r3, [sp, #60]	@ 0x3c
 802696a:	4417      	add	r7, r2
 802696c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802696e:	4413      	add	r3, r2
 8026970:	ee1a 2a10 	vmov	r2, s20
 8026974:	930c      	str	r3, [sp, #48]	@ 0x30
 8026976:	2300      	movs	r3, #0
 8026978:	9301      	str	r3, [sp, #4]
 802697a:	ee18 3a90 	vmov	r3, s17
 802697e:	f00a f8f9 	bl	8030b74 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8026982:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8026984:	901e      	str	r0, [sp, #120]	@ 0x78
 8026986:	42a3      	cmp	r3, r4
 8026988:	d042      	beq.n	8026a10 <forward_lite_conv2d_sssa8_ch+0x9b8>
 802698a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802698c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802698e:	e78b      	b.n	80268a8 <forward_lite_conv2d_sssa8_ch+0x850>
 8026990:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026992:	429c      	cmp	r4, r3
 8026994:	f6bf af74 	bge.w	8026880 <forward_lite_conv2d_sssa8_ch+0x828>
 8026998:	970a      	str	r7, [sp, #40]	@ 0x28
 802699a:	461f      	mov	r7, r3
 802699c:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 802699e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80269a0:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
 80269a4:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
 80269a8:	3401      	adds	r4, #1
 80269aa:	4629      	mov	r1, r5
 80269ac:	4630      	mov	r0, r6
 80269ae:	4642      	mov	r2, r8
 80269b0:	f000 fd7e 	bl	80274b0 <st_int8_to16_no_shift>
 80269b4:	42bc      	cmp	r4, r7
 80269b6:	444d      	add	r5, r9
 80269b8:	445e      	add	r6, fp
 80269ba:	d1f5      	bne.n	80269a8 <forward_lite_conv2d_sssa8_ch+0x950>
 80269bc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80269be:	e9dd 730a 	ldrd	r7, r3, [sp, #40]	@ 0x28
 80269c2:	4413      	add	r3, r2
 80269c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80269c6:	e7b1      	b.n	802692c <forward_lite_conv2d_sssa8_ch+0x8d4>
 80269c8:	4658      	mov	r0, fp
 80269ca:	f000 fdd3 	bl	8027574 <st_int8_to16_no_shift_interleaved>
 80269ce:	e781      	b.n	80268d4 <forward_lite_conv2d_sssa8_ch+0x87c>
 80269d0:	4658      	mov	r0, fp
 80269d2:	f000 fd6d 	bl	80274b0 <st_int8_to16_no_shift>
 80269d6:	e73e      	b.n	8026856 <forward_lite_conv2d_sssa8_ch+0x7fe>
 80269d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80269da:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80269dc:	428b      	cmp	r3, r1
 80269de:	d017      	beq.n	8026a10 <forward_lite_conv2d_sssa8_ch+0x9b8>
 80269e0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80269e2:	ee1a 2a10 	vmov	r2, s20
 80269e6:	ee19 0a10 	vmov	r0, s18
 80269ea:	9307      	str	r3, [sp, #28]
 80269ec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80269ee:	9306      	str	r3, [sp, #24]
 80269f0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80269f2:	9305      	str	r3, [sp, #20]
 80269f4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80269f6:	9304      	str	r3, [sp, #16]
 80269f8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80269fa:	9303      	str	r3, [sp, #12]
 80269fc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80269fe:	9302      	str	r3, [sp, #8]
 8026a00:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026a02:	9301      	str	r3, [sp, #4]
 8026a04:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026a06:	9300      	str	r3, [sp, #0]
 8026a08:	ee18 3a90 	vmov	r3, s17
 8026a0c:	f003 ff62 	bl	802a8d4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8026a10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8026a12:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8026a14:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8026a16:	1a9b      	subs	r3, r3, r2
 8026a18:	4411      	add	r1, r2
 8026a1a:	9128      	str	r1, [sp, #160]	@ 0xa0
 8026a1c:	b299      	uxth	r1, r3
 8026a1e:	4613      	mov	r3, r2
 8026a20:	428a      	cmp	r2, r1
 8026a22:	9132      	str	r1, [sp, #200]	@ 0xc8
 8026a24:	bf28      	it	cs
 8026a26:	460b      	movcs	r3, r1
 8026a28:	b29b      	uxth	r3, r3
 8026a2a:	2b00      	cmp	r3, #0
 8026a2c:	d051      	beq.n	8026ad2 <forward_lite_conv2d_sssa8_ch+0xa7a>
 8026a2e:	ee1a 4a10 	vmov	r4, s20
 8026a32:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8026a34:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8026a36:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8026a3a:	fb01 0002 	mla	r0, r1, r2, r0
 8026a3e:	ee0a 4a10 	vmov	s20, r4
 8026a42:	9c2e      	ldr	r4, [sp, #184]	@ 0xb8
 8026a44:	9036      	str	r0, [sp, #216]	@ 0xd8
 8026a46:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8026a4a:	942e      	str	r4, [sp, #184]	@ 0xb8
 8026a4c:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 8026a4e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8026a52:	942a      	str	r4, [sp, #168]	@ 0xa8
 8026a54:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8026a56:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8026a5a:	9229      	str	r2, [sp, #164]	@ 0xa4
 8026a5c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026a5e:	2a00      	cmp	r2, #0
 8026a60:	d139      	bne.n	8026ad6 <forward_lite_conv2d_sssa8_ch+0xa7e>
 8026a62:	460a      	mov	r2, r1
 8026a64:	ee19 1a10 	vmov	r1, s18
 8026a68:	9323      	str	r3, [sp, #140]	@ 0x8c
 8026a6a:	f000 feb1 	bl	80277d0 <st_int8_to16_dual_interleaved>
 8026a6e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8026a70:	3b01      	subs	r3, #1
 8026a72:	b29b      	uxth	r3, r3
 8026a74:	461a      	mov	r2, r3
 8026a76:	9331      	str	r3, [sp, #196]	@ 0xc4
 8026a78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8026a7c:	429a      	cmp	r2, r3
 8026a7e:	f47f ae9d 	bne.w	80267bc <forward_lite_conv2d_sssa8_ch+0x764>
 8026a82:	4647      	mov	r7, r8
 8026a84:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 8026a86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026a88:	4413      	add	r3, r2
 8026a8a:	9310      	str	r3, [sp, #64]	@ 0x40
 8026a8c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026a8e:	4413      	add	r3, r2
 8026a90:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 8026a92:	9318      	str	r3, [sp, #96]	@ 0x60
 8026a94:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8026a96:	4413      	add	r3, r2
 8026a98:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 8026a9a:	9335      	str	r3, [sp, #212]	@ 0xd4
 8026a9c:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8026a9e:	4413      	add	r3, r2
 8026aa0:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8026aa2:	933b      	str	r3, [sp, #236]	@ 0xec
 8026aa4:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 8026aa6:	4413      	add	r3, r2
 8026aa8:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 8026aaa:	933c      	str	r3, [sp, #240]	@ 0xf0
 8026aac:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8026aae:	3301      	adds	r3, #1
 8026ab0:	9338      	str	r3, [sp, #224]	@ 0xe0
 8026ab2:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8026ab4:	4293      	cmp	r3, r2
 8026ab6:	f77f ad05 	ble.w	80264c4 <forward_lite_conv2d_sssa8_ch+0x46c>
 8026aba:	a84e      	add	r0, sp, #312	@ 0x138
 8026abc:	f000 ff9c 	bl	80279f8 <ai_padding_opt_phase1>
 8026ac0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8026ac2:	2b03      	cmp	r3, #3
 8026ac4:	f47f ae4a 	bne.w	802675c <forward_lite_conv2d_sssa8_ch+0x704>
 8026ac8:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8026aca:	933d      	str	r3, [sp, #244]	@ 0xf4
 8026acc:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8026ace:	9328      	str	r3, [sp, #160]	@ 0xa0
 8026ad0:	e648      	b.n	8026764 <forward_lite_conv2d_sssa8_ch+0x70c>
 8026ad2:	9323      	str	r3, [sp, #140]	@ 0x8c
 8026ad4:	e7cb      	b.n	8026a6e <forward_lite_conv2d_sssa8_ch+0xa16>
 8026ad6:	460a      	mov	r2, r1
 8026ad8:	ee19 1a10 	vmov	r1, s18
 8026adc:	9323      	str	r3, [sp, #140]	@ 0x8c
 8026ade:	f000 fd8d 	bl	80275fc <st_int8_to16_dual>
 8026ae2:	e7c4      	b.n	8026a6e <forward_lite_conv2d_sssa8_ch+0xa16>
 8026ae4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026ae6:	ee19 1a10 	vmov	r1, s18
 8026aea:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8026aec:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 8026aee:	f000 fd85 	bl	80275fc <st_int8_to16_dual>
 8026af2:	e644      	b.n	802677e <forward_lite_conv2d_sssa8_ch+0x726>
 8026af4:	ee18 3a90 	vmov	r3, s17
 8026af8:	ee19 1a10 	vmov	r1, s18
 8026afc:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 8026afe:	f000 fd7d 	bl	80275fc <st_int8_to16_dual>
 8026b02:	f7ff bb86 	b.w	8026212 <forward_lite_conv2d_sssa8_ch+0x1ba>
 8026b06:	bf00      	nop

08026b08 <forward_lite_maxpool_is8os8_scaleneg>:
 8026b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026b0c:	b095      	sub	sp, #84	@ 0x54
 8026b0e:	4614      	mov	r4, r2
 8026b10:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8026b14:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8026b18:	f99d 009c 	ldrsb.w	r0, [sp, #156]	@ 0x9c
 8026b1c:	910d      	str	r1, [sp, #52]	@ 0x34
 8026b1e:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8026b22:	930c      	str	r3, [sp, #48]	@ 0x30
 8026b24:	910e      	str	r1, [sp, #56]	@ 0x38
 8026b26:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 8026b2a:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 8026b2e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8026b30:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 8026b34:	9206      	str	r2, [sp, #24]
 8026b36:	9110      	str	r1, [sp, #64]	@ 0x40
 8026b38:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 8026b3c:	f8bd a078 	ldrh.w	sl, [sp, #120]	@ 0x78
 8026b40:	9111      	str	r1, [sp, #68]	@ 0x44
 8026b42:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 8026b46:	f99d 20a0 	ldrsb.w	r2, [sp, #160]	@ 0xa0
 8026b4a:	9112      	str	r1, [sp, #72]	@ 0x48
 8026b4c:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 8026b50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026b52:	9107      	str	r1, [sp, #28]
 8026b54:	9003      	str	r0, [sp, #12]
 8026b56:	2b00      	cmp	r3, #0
 8026b58:	f000 8093 	beq.w	8026c82 <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 8026b5c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8026b60:	eeb4 0a67 	vcmp.f32	s0, s15
 8026b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b68:	bf0c      	ite	eq
 8026b6a:	2301      	moveq	r3, #1
 8026b6c:	2300      	movne	r3, #0
 8026b6e:	4290      	cmp	r0, r2
 8026b70:	bf14      	ite	ne
 8026b72:	2300      	movne	r3, #0
 8026b74:	f003 0301 	andeq.w	r3, r3, #1
 8026b78:	9301      	str	r3, [sp, #4]
 8026b7a:	2900      	cmp	r1, #0
 8026b7c:	f000 8081 	beq.w	8026c82 <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 8026b80:	f1ba 0f00 	cmp.w	sl, #0
 8026b84:	d07d      	beq.n	8026c82 <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 8026b86:	ee07 2a90 	vmov	s15, r2
 8026b8a:	2300      	movs	r3, #0
 8026b8c:	ed9f 6a4d 	vldr	s12, [pc, #308]	@ 8026cc4 <forward_lite_maxpool_is8os8_scaleneg+0x1bc>
 8026b90:	fb04 fb0a 	mul.w	fp, r4, sl
 8026b94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8026b98:	9304      	str	r3, [sp, #16]
 8026b9a:	9b04      	ldr	r3, [sp, #16]
 8026b9c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8026ba0:	9907      	ldr	r1, [sp, #28]
 8026ba2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026ba4:	fb03 f202 	mul.w	r2, r3, r2
 8026ba8:	fb03 f301 	mul.w	r3, r3, r1
 8026bac:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8026bae:	9308      	str	r3, [sp, #32]
 8026bb0:	2300      	movs	r3, #0
 8026bb2:	9305      	str	r3, [sp, #20]
 8026bb4:	1a53      	subs	r3, r2, r1
 8026bb6:	1a8a      	subs	r2, r1, r2
 8026bb8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8026bba:	2b00      	cmp	r3, #0
 8026bbc:	eb02 0c01 	add.w	ip, r2, r1
 8026bc0:	bfd8      	it	le
 8026bc2:	4691      	movle	r9, r2
 8026bc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026bc6:	bfc8      	it	gt
 8026bc8:	f04f 0900 	movgt.w	r9, #0
 8026bcc:	4594      	cmp	ip, r2
 8026bce:	444b      	add	r3, r9
 8026bd0:	bfa8      	it	ge
 8026bd2:	4694      	movge	ip, r2
 8026bd4:	9a06      	ldr	r2, [sp, #24]
 8026bd6:	fb02 f303 	mul.w	r3, r2, r3
 8026bda:	9309      	str	r3, [sp, #36]	@ 0x24
 8026bdc:	9a05      	ldr	r2, [sp, #20]
 8026bde:	f04f 0e00 	mov.w	lr, #0
 8026be2:	9908      	ldr	r1, [sp, #32]
 8026be4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026be6:	eb02 0801 	add.w	r8, r2, r1
 8026bea:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8026bec:	fb03 f302 	mul.w	r3, r3, r2
 8026bf0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8026bf2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026bf4:	fb0a 2808 	mla	r8, sl, r8, r2
 8026bf8:	1a5a      	subs	r2, r3, r1
 8026bfa:	1acb      	subs	r3, r1, r3
 8026bfc:	9906      	ldr	r1, [sp, #24]
 8026bfe:	2a00      	cmp	r2, #0
 8026c00:	bfd8      	it	le
 8026c02:	461f      	movle	r7, r3
 8026c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026c06:	bfc8      	it	gt
 8026c08:	2700      	movgt	r7, #0
 8026c0a:	18d3      	adds	r3, r2, r3
 8026c0c:	1a8a      	subs	r2, r1, r2
 8026c0e:	4294      	cmp	r4, r2
 8026c10:	443b      	add	r3, r7
 8026c12:	bfa8      	it	ge
 8026c14:	4614      	movge	r4, r2
 8026c16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026c18:	fb0a 2303 	mla	r3, sl, r3, r2
 8026c1c:	9302      	str	r3, [sp, #8]
 8026c1e:	45e1      	cmp	r9, ip
 8026c20:	da4d      	bge.n	8026cbe <forward_lite_maxpool_is8os8_scaleneg+0x1b6>
 8026c22:	9b02      	ldr	r3, [sp, #8]
 8026c24:	464d      	mov	r5, r9
 8026c26:	217f      	movs	r1, #127	@ 0x7f
 8026c28:	eb03 060e 	add.w	r6, r3, lr
 8026c2c:	42a7      	cmp	r7, r4
 8026c2e:	da0a      	bge.n	8026c46 <forward_lite_maxpool_is8os8_scaleneg+0x13e>
 8026c30:	4632      	mov	r2, r6
 8026c32:	463b      	mov	r3, r7
 8026c34:	f992 0000 	ldrsb.w	r0, [r2]
 8026c38:	3301      	adds	r3, #1
 8026c3a:	4452      	add	r2, sl
 8026c3c:	4281      	cmp	r1, r0
 8026c3e:	bfa8      	it	ge
 8026c40:	4601      	movge	r1, r0
 8026c42:	429c      	cmp	r4, r3
 8026c44:	d1f6      	bne.n	8026c34 <forward_lite_maxpool_is8os8_scaleneg+0x12c>
 8026c46:	3501      	adds	r5, #1
 8026c48:	445e      	add	r6, fp
 8026c4a:	45ac      	cmp	ip, r5
 8026c4c:	d1ee      	bne.n	8026c2c <forward_lite_maxpool_is8os8_scaleneg+0x124>
 8026c4e:	9b01      	ldr	r3, [sp, #4]
 8026c50:	b1d3      	cbz	r3, 8026c88 <forward_lite_maxpool_is8os8_scaleneg+0x180>
 8026c52:	f888 1000 	strb.w	r1, [r8]
 8026c56:	f10e 0e01 	add.w	lr, lr, #1
 8026c5a:	f108 0801 	add.w	r8, r8, #1
 8026c5e:	fa1f f38e 	uxth.w	r3, lr
 8026c62:	459a      	cmp	sl, r3
 8026c64:	d8db      	bhi.n	8026c1e <forward_lite_maxpool_is8os8_scaleneg+0x116>
 8026c66:	9b05      	ldr	r3, [sp, #20]
 8026c68:	9a07      	ldr	r2, [sp, #28]
 8026c6a:	3301      	adds	r3, #1
 8026c6c:	b29b      	uxth	r3, r3
 8026c6e:	429a      	cmp	r2, r3
 8026c70:	9305      	str	r3, [sp, #20]
 8026c72:	d8b3      	bhi.n	8026bdc <forward_lite_maxpool_is8os8_scaleneg+0xd4>
 8026c74:	9b04      	ldr	r3, [sp, #16]
 8026c76:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8026c78:	3301      	adds	r3, #1
 8026c7a:	b29b      	uxth	r3, r3
 8026c7c:	429a      	cmp	r2, r3
 8026c7e:	9304      	str	r3, [sp, #16]
 8026c80:	d88b      	bhi.n	8026b9a <forward_lite_maxpool_is8os8_scaleneg+0x92>
 8026c82:	b015      	add	sp, #84	@ 0x54
 8026c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026c88:	9b03      	ldr	r3, [sp, #12]
 8026c8a:	eeb0 7a66 	vmov.f32	s14, s13
 8026c8e:	1ac9      	subs	r1, r1, r3
 8026c90:	ee07 1a90 	vmov	s15, r1
 8026c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026c98:	eea7 7a80 	vfma.f32	s14, s15, s0
 8026c9c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8026ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026ca4:	fe65 7a86 	vselge.f32	s15, s11, s12
 8026ca8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026cac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8026cb0:	ee17 3a90 	vmov	r3, s15
 8026cb4:	f303 0307 	ssat	r3, #8, r3
 8026cb8:	f888 3000 	strb.w	r3, [r8]
 8026cbc:	e7cb      	b.n	8026c56 <forward_lite_maxpool_is8os8_scaleneg+0x14e>
 8026cbe:	217f      	movs	r1, #127	@ 0x7f
 8026cc0:	e7c5      	b.n	8026c4e <forward_lite_maxpool_is8os8_scaleneg+0x146>
 8026cc2:	bf00      	nop
 8026cc4:	befffffc 	.word	0xbefffffc

08026cc8 <forward_lite_bn_if32of32wf32>:
 8026cc8:	b410      	push	{r4}
 8026cca:	4684      	mov	ip, r0
 8026ccc:	461c      	mov	r4, r3
 8026cce:	4608      	mov	r0, r1
 8026cd0:	9b01      	ldr	r3, [sp, #4]
 8026cd2:	4661      	mov	r1, ip
 8026cd4:	9201      	str	r2, [sp, #4]
 8026cd6:	9a02      	ldr	r2, [sp, #8]
 8026cd8:	9402      	str	r4, [sp, #8]
 8026cda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026cde:	f00b b987 	b.w	8031ff0 <bnl_kernel_if32of32>
 8026ce2:	bf00      	nop

08026ce4 <_func_norm_array_f32>:
 8026ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ce8:	ed2d 8b04 	vpush	{d8-d9}
 8026cec:	b089      	sub	sp, #36	@ 0x24
 8026cee:	fb03 f302 	mul.w	r3, r3, r2
 8026cf2:	9104      	str	r1, [sp, #16]
 8026cf4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8026cf6:	9201      	str	r2, [sp, #4]
 8026cf8:	9006      	str	r0, [sp, #24]
 8026cfa:	9305      	str	r3, [sp, #20]
 8026cfc:	2900      	cmp	r1, #0
 8026cfe:	d059      	beq.n	8026db4 <_func_norm_array_f32+0xd0>
 8026d00:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8026d04:	009b      	lsls	r3, r3, #2
 8026d06:	eef0 8a40 	vmov.f32	s17, s0
 8026d0a:	0094      	lsls	r4, r2, #2
 8026d0c:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8026d10:	2a00      	cmp	r2, #0
 8026d12:	d04f      	beq.n	8026db4 <_func_norm_array_f32+0xd0>
 8026d14:	9a04      	ldr	r2, [sp, #16]
 8026d16:	4413      	add	r3, r2
 8026d18:	eeb0 9a60 	vmov.f32	s18, s1
 8026d1c:	9307      	str	r3, [sp, #28]
 8026d1e:	2300      	movs	r3, #0
 8026d20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8026d24:	9b02      	ldr	r3, [sp, #8]
 8026d26:	9a07      	ldr	r2, [sp, #28]
 8026d28:	eb02 0b83 	add.w	fp, r2, r3, lsl #2
 8026d2c:	9a01      	ldr	r2, [sp, #4]
 8026d2e:	18d7      	adds	r7, r2, r3
 8026d30:	9a04      	ldr	r2, [sp, #16]
 8026d32:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8026d36:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8026d3a:	9a06      	ldr	r2, [sp, #24]
 8026d3c:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8026d40:	45ab      	cmp	fp, r5
 8026d42:	46a9      	mov	r9, r5
 8026d44:	46b2      	mov	sl, r6
 8026d46:	d925      	bls.n	8026d94 <_func_norm_array_f32+0xb0>
 8026d48:	ed9f 8a26 	vldr	s16, [pc, #152]	@ 8026de4 <_func_norm_array_f32+0x100>
 8026d4c:	46a8      	mov	r8, r5
 8026d4e:	ed98 0a00 	vldr	s0, [r8]
 8026d52:	44a0      	add	r8, r4
 8026d54:	eef0 0a68 	vmov.f32	s1, s17
 8026d58:	eeb0 0ac0 	vabs.f32	s0, s0
 8026d5c:	f010 facc 	bl	80372f8 <powf>
 8026d60:	45c3      	cmp	fp, r8
 8026d62:	ee38 8a00 	vadd.f32	s16, s16, s0
 8026d66:	d8f2      	bhi.n	8026d4e <_func_norm_array_f32+0x6a>
 8026d68:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8026d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d70:	d030      	beq.n	8026dd4 <_func_norm_array_f32+0xf0>
 8026d72:	ee89 0a08 	vdiv.f32	s0, s18, s16
 8026d76:	eef0 0a69 	vmov.f32	s1, s19
 8026d7a:	f010 fabd 	bl	80372f8 <powf>
 8026d7e:	9b01      	ldr	r3, [sp, #4]
 8026d80:	2b01      	cmp	r3, #1
 8026d82:	d11c      	bne.n	8026dbe <_func_norm_array_f32+0xda>
 8026d84:	ecf9 7a01 	vldmia	r9!, {s15}
 8026d88:	ee67 7a80 	vmul.f32	s15, s15, s0
 8026d8c:	45cb      	cmp	fp, r9
 8026d8e:	ecea 7a01 	vstmia	sl!, {s15}
 8026d92:	d8f7      	bhi.n	8026d84 <_func_norm_array_f32+0xa0>
 8026d94:	3504      	adds	r5, #4
 8026d96:	f10b 0b04 	add.w	fp, fp, #4
 8026d9a:	3604      	adds	r6, #4
 8026d9c:	42bd      	cmp	r5, r7
 8026d9e:	d1cf      	bne.n	8026d40 <_func_norm_array_f32+0x5c>
 8026da0:	9a02      	ldr	r2, [sp, #8]
 8026da2:	9905      	ldr	r1, [sp, #20]
 8026da4:	9b03      	ldr	r3, [sp, #12]
 8026da6:	440a      	add	r2, r1
 8026da8:	3301      	adds	r3, #1
 8026daa:	9202      	str	r2, [sp, #8]
 8026dac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8026dae:	9303      	str	r3, [sp, #12]
 8026db0:	429a      	cmp	r2, r3
 8026db2:	d1b7      	bne.n	8026d24 <_func_norm_array_f32+0x40>
 8026db4:	b009      	add	sp, #36	@ 0x24
 8026db6:	ecbd 8b04 	vpop	{d8-d9}
 8026dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026dbe:	edd9 7a00 	vldr	s15, [r9]
 8026dc2:	44a1      	add	r9, r4
 8026dc4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8026dc8:	45cb      	cmp	fp, r9
 8026dca:	edca 7a00 	vstr	s15, [sl]
 8026dce:	44a2      	add	sl, r4
 8026dd0:	d8f5      	bhi.n	8026dbe <_func_norm_array_f32+0xda>
 8026dd2:	e7df      	b.n	8026d94 <_func_norm_array_f32+0xb0>
 8026dd4:	eef0 0a69 	vmov.f32	s1, s19
 8026dd8:	eeb0 0a49 	vmov.f32	s0, s18
 8026ddc:	f010 fa8c 	bl	80372f8 <powf>
 8026de0:	e7cd      	b.n	8026d7e <_func_norm_array_f32+0x9a>
 8026de2:	bf00      	nop
 8026de4:	00000000 	.word	0x00000000

08026de8 <forward_lite_norm_if32of32>:
 8026de8:	b470      	push	{r4, r5, r6}
 8026dea:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8026dee:	4614      	mov	r4, r2
 8026df0:	9e03      	ldr	r6, [sp, #12]
 8026df2:	461a      	mov	r2, r3
 8026df4:	9b04      	ldr	r3, [sp, #16]
 8026df6:	b195      	cbz	r5, 8026e1e <forward_lite_norm_if32of32+0x36>
 8026df8:	ee07 2a90 	vmov	s15, r2
 8026dfc:	eef8 0a67 	vcvt.f32.u32	s1, s15
 8026e00:	b98c      	cbnz	r4, 8026e26 <forward_lite_norm_if32of32+0x3e>
 8026e02:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8026e06:	eeb4 0a67 	vcmp.f32	s0, s15
 8026e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026e0e:	d113      	bne.n	8026e38 <forward_lite_norm_if32of32+0x50>
 8026e10:	2e01      	cmp	r6, #1
 8026e12:	d111      	bne.n	8026e38 <forward_lite_norm_if32of32+0x50>
 8026e14:	eeb0 0a60 	vmov.f32	s0, s1
 8026e18:	bc70      	pop	{r4, r5, r6}
 8026e1a:	f00b b967 	b.w	80320ec <func_norm_l2_fast_array_f32>
 8026e1e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8026e22:	2c00      	cmp	r4, #0
 8026e24:	d0ed      	beq.n	8026e02 <forward_lite_norm_if32of32+0x1a>
 8026e26:	2c01      	cmp	r4, #1
 8026e28:	eeb0 0a60 	vmov.f32	s0, s1
 8026e2c:	d011      	beq.n	8026e52 <forward_lite_norm_if32of32+0x6a>
 8026e2e:	2c02      	cmp	r4, #2
 8026e30:	d00c      	beq.n	8026e4c <forward_lite_norm_if32of32+0x64>
 8026e32:	bc70      	pop	{r4, r5, r6}
 8026e34:	f00b b920 	b.w	8032078 <func_norm_max_array_f32>
 8026e38:	fb06 f402 	mul.w	r4, r6, r2
 8026e3c:	fbb3 f4f4 	udiv	r4, r3, r4
 8026e40:	4613      	mov	r3, r2
 8026e42:	9403      	str	r4, [sp, #12]
 8026e44:	4632      	mov	r2, r6
 8026e46:	bc70      	pop	{r4, r5, r6}
 8026e48:	f7ff bf4c 	b.w	8026ce4 <_func_norm_array_f32>
 8026e4c:	bc70      	pop	{r4, r5, r6}
 8026e4e:	f00b b94d 	b.w	80320ec <func_norm_l2_fast_array_f32>
 8026e52:	bc70      	pop	{r4, r5, r6}
 8026e54:	f00b b994 	b.w	8032180 <func_norm_l1_fast_array_f32>

08026e58 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022>:
 8026e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e5c:	b083      	sub	sp, #12
 8026e5e:	f992 0000 	ldrsb.w	r0, [r2]
 8026e62:	f04f 0500 	mov.w	r5, #0
 8026e66:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8026e6a:	f360 0507 	bfi	r5, r0, #0, #8
 8026e6e:	f1b9 0f00 	cmp.w	r9, #0
 8026e72:	f360 250f 	bfi	r5, r0, #8, #8
 8026e76:	dd20      	ble.n	8026eba <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x62>
 8026e78:	461c      	mov	r4, r3
 8026e7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026e7c:	460f      	mov	r7, r1
 8026e7e:	f04f 0800 	mov.w	r8, #0
 8026e82:	1c9e      	adds	r6, r3, #2
 8026e84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026e86:	fb06 fb04 	mul.w	fp, r6, r4
 8026e8a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8026e8e:	2c00      	cmp	r4, #0
 8026e90:	dd08      	ble.n	8026ea4 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x4c>
 8026e92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026e94:	18f9      	adds	r1, r7, r3
 8026e96:	2300      	movs	r3, #0
 8026e98:	3301      	adds	r3, #1
 8026e9a:	800d      	strh	r5, [r1, #0]
 8026e9c:	4431      	add	r1, r6
 8026e9e:	429c      	cmp	r4, r3
 8026ea0:	d1fa      	bne.n	8026e98 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x40>
 8026ea2:	445f      	add	r7, fp
 8026ea4:	f108 0801 	add.w	r8, r8, #1
 8026ea8:	4639      	mov	r1, r7
 8026eaa:	4652      	mov	r2, sl
 8026eac:	9001      	str	r0, [sp, #4]
 8026eae:	f003 fc97 	bl	802a7e0 <st_int8_fill>
 8026eb2:	45c1      	cmp	r9, r8
 8026eb4:	4457      	add	r7, sl
 8026eb6:	9801      	ldr	r0, [sp, #4]
 8026eb8:	d1e9      	bne.n	8026e8e <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x36>
 8026eba:	b003      	add	sp, #12
 8026ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026ec0 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111>:
 8026ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ec4:	461e      	mov	r6, r3
 8026ec6:	b085      	sub	sp, #20
 8026ec8:	f992 8000 	ldrsb.w	r8, [r2]
 8026ecc:	f04f 0500 	mov.w	r5, #0
 8026ed0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026ed2:	2e06      	cmp	r6, #6
 8026ed4:	f368 0507 	bfi	r5, r8, #0, #8
 8026ed8:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8026eda:	460c      	mov	r4, r1
 8026edc:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 8026ee0:	f368 250f 	bfi	r5, r8, #8, #8
 8026ee4:	9303      	str	r3, [sp, #12]
 8026ee6:	d07a      	beq.n	8026fde <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x11e>
 8026ee8:	2e03      	cmp	r6, #3
 8026eea:	d04e      	beq.n	8026f8a <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xca>
 8026eec:	2b00      	cmp	r3, #0
 8026eee:	db05      	blt.n	8026efc <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x3c>
 8026ef0:	1c5a      	adds	r2, r3, #1
 8026ef2:	4608      	mov	r0, r1
 8026ef4:	4641      	mov	r1, r8
 8026ef6:	4414      	add	r4, r2
 8026ef8:	f00c ffcb 	bl	8033e92 <memset>
 8026efc:	1e7b      	subs	r3, r7, #1
 8026efe:	3e01      	subs	r6, #1
 8026f00:	2b00      	cmp	r3, #0
 8026f02:	9301      	str	r3, [sp, #4]
 8026f04:	dd27      	ble.n	8026f56 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x96>
 8026f06:	9b03      	ldr	r3, [sp, #12]
 8026f08:	f10a 0702 	add.w	r7, sl, #2
 8026f0c:	f04f 0b00 	mov.w	fp, #0
 8026f10:	1c5a      	adds	r2, r3, #1
 8026f12:	fb07 f306 	mul.w	r3, r7, r6
 8026f16:	ea4f 0942 	mov.w	r9, r2, lsl #1
 8026f1a:	9302      	str	r3, [sp, #8]
 8026f1c:	4643      	mov	r3, r8
 8026f1e:	46c8      	mov	r8, r9
 8026f20:	4699      	mov	r9, r3
 8026f22:	2e00      	cmp	r6, #0
 8026f24:	eb04 010a 	add.w	r1, r4, sl
 8026f28:	dd09      	ble.n	8026f3e <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x7e>
 8026f2a:	468c      	mov	ip, r1
 8026f2c:	2300      	movs	r3, #0
 8026f2e:	3301      	adds	r3, #1
 8026f30:	f8ac 5000 	strh.w	r5, [ip]
 8026f34:	44bc      	add	ip, r7
 8026f36:	42b3      	cmp	r3, r6
 8026f38:	d1f9      	bne.n	8026f2e <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x6e>
 8026f3a:	9b02      	ldr	r3, [sp, #8]
 8026f3c:	4419      	add	r1, r3
 8026f3e:	4642      	mov	r2, r8
 8026f40:	4648      	mov	r0, r9
 8026f42:	f10b 0b01 	add.w	fp, fp, #1
 8026f46:	eb01 0408 	add.w	r4, r1, r8
 8026f4a:	f003 fc49 	bl	802a7e0 <st_int8_fill>
 8026f4e:	9b01      	ldr	r3, [sp, #4]
 8026f50:	459b      	cmp	fp, r3
 8026f52:	d1e6      	bne.n	8026f22 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x62>
 8026f54:	46c8      	mov	r8, r9
 8026f56:	2e00      	cmp	r6, #0
 8026f58:	eb04 000a 	add.w	r0, r4, sl
 8026f5c:	dd0a      	ble.n	8026f74 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xb4>
 8026f5e:	f10a 0702 	add.w	r7, sl, #2
 8026f62:	4602      	mov	r2, r0
 8026f64:	2300      	movs	r3, #0
 8026f66:	3301      	adds	r3, #1
 8026f68:	8015      	strh	r5, [r2, #0]
 8026f6a:	443a      	add	r2, r7
 8026f6c:	429e      	cmp	r6, r3
 8026f6e:	d1fa      	bne.n	8026f66 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xa6>
 8026f70:	fb07 0006 	mla	r0, r7, r6, r0
 8026f74:	9b03      	ldr	r3, [sp, #12]
 8026f76:	2b00      	cmp	r3, #0
 8026f78:	db2e      	blt.n	8026fd8 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x118>
 8026f7a:	461a      	mov	r2, r3
 8026f7c:	4641      	mov	r1, r8
 8026f7e:	3201      	adds	r2, #1
 8026f80:	b005      	add	sp, #20
 8026f82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f86:	f00c bf84 	b.w	8033e92 <memset>
 8026f8a:	fa5f f388 	uxtb.w	r3, r8
 8026f8e:	2f00      	cmp	r7, #0
 8026f90:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8026f94:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8026f98:	b292      	uxth	r2, r2
 8026f9a:	ea43 0302 	orr.w	r3, r3, r2
 8026f9e:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8026fa2:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8026fa6:	ea42 0203 	orr.w	r2, r2, r3
 8026faa:	b29b      	uxth	r3, r3
 8026fac:	dd14      	ble.n	8026fd8 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x118>
 8026fae:	eb07 0987 	add.w	r9, r7, r7, lsl #2
 8026fb2:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8026fb6:	4449      	add	r1, r9
 8026fb8:	6022      	str	r2, [r4, #0]
 8026fba:	3419      	adds	r4, #25
 8026fbc:	f824 3c15 	strh.w	r3, [r4, #-21]
 8026fc0:	f824 5c10 	strh.w	r5, [r4, #-16]
 8026fc4:	f824 3c0b 	strh.w	r3, [r4, #-11]
 8026fc8:	f804 8c06 	strb.w	r8, [r4, #-6]
 8026fcc:	f844 2c05 	str.w	r2, [r4, #-5]
 8026fd0:	f804 8c01 	strb.w	r8, [r4, #-1]
 8026fd4:	428c      	cmp	r4, r1
 8026fd6:	d1ef      	bne.n	8026fb8 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xf8>
 8026fd8:	b005      	add	sp, #20
 8026fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026fde:	fa5f f388 	uxtb.w	r3, r8
 8026fe2:	2f00      	cmp	r7, #0
 8026fe4:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8026fe8:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8026fec:	b292      	uxth	r2, r2
 8026fee:	ea43 0302 	orr.w	r3, r3, r2
 8026ff2:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8026ff6:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8026ffa:	ea43 0302 	orr.w	r3, r3, r2
 8026ffe:	ddeb      	ble.n	8026fd8 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x118>
 8027000:	340f      	adds	r4, #15
 8027002:	2200      	movs	r2, #0
 8027004:	3201      	adds	r2, #1
 8027006:	f844 3c0f 	str.w	r3, [r4, #-15]
 802700a:	f844 3c0b 	str.w	r3, [r4, #-11]
 802700e:	3440      	adds	r4, #64	@ 0x40
 8027010:	4297      	cmp	r7, r2
 8027012:	f804 8c47 	strb.w	r8, [r4, #-71]
 8027016:	f824 5c40 	strh.w	r5, [r4, #-64]
 802701a:	f824 5c38 	strh.w	r5, [r4, #-56]
 802701e:	f824 5c30 	strh.w	r5, [r4, #-48]
 8027022:	f824 5c28 	strh.w	r5, [r4, #-40]
 8027026:	f824 5c20 	strh.w	r5, [r4, #-32]
 802702a:	f804 8c18 	strb.w	r8, [r4, #-24]
 802702e:	f844 3c17 	str.w	r3, [r4, #-23]
 8027032:	f844 3c13 	str.w	r3, [r4, #-19]
 8027036:	d1e5      	bne.n	8027004 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x144>
 8027038:	b005      	add	sp, #20
 802703a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802703e:	bf00      	nop

08027040 <forward_lite_pad_constant>:
 8027040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027044:	b085      	sub	sp, #20
 8027046:	4616      	mov	r6, r2
 8027048:	4681      	mov	r9, r0
 802704a:	2b08      	cmp	r3, #8
 802704c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802704e:	460c      	mov	r4, r1
 8027050:	9201      	str	r2, [sp, #4]
 8027052:	e9dd 2011 	ldrd	r2, r0, [sp, #68]	@ 0x44
 8027056:	e9dd 5a0f 	ldrd	r5, sl, [sp, #60]	@ 0x3c
 802705a:	e9dd 7813 	ldrd	r7, r8, [sp, #76]	@ 0x4c
 802705e:	9002      	str	r0, [sp, #8]
 8027060:	d051      	beq.n	8027106 <forward_lite_pad_constant+0xc6>
 8027062:	2a00      	cmp	r2, #0
 8027064:	dd11      	ble.n	802708a <forward_lite_pad_constant+0x4a>
 8027066:	f8cd 8000 	str.w	r8, [sp]
 802706a:	f04f 0b00 	mov.w	fp, #0
 802706e:	46b8      	mov	r8, r7
 8027070:	4617      	mov	r7, r2
 8027072:	44ab      	add	fp, r5
 8027074:	4621      	mov	r1, r4
 8027076:	462a      	mov	r2, r5
 8027078:	4630      	mov	r0, r6
 802707a:	f003 fb0f 	bl	802a69c <st_int8_copy>
 802707e:	455f      	cmp	r7, fp
 8027080:	442c      	add	r4, r5
 8027082:	dcf6      	bgt.n	8027072 <forward_lite_pad_constant+0x32>
 8027084:	4647      	mov	r7, r8
 8027086:	f8dd 8000 	ldr.w	r8, [sp]
 802708a:	9b01      	ldr	r3, [sp, #4]
 802708c:	2b00      	cmp	r3, #0
 802708e:	dd29      	ble.n	80270e4 <forward_lite_pad_constant+0xa4>
 8027090:	2300      	movs	r3, #0
 8027092:	9300      	str	r3, [sp, #0]
 8027094:	2f00      	cmp	r7, #0
 8027096:	dd0a      	ble.n	80270ae <forward_lite_pad_constant+0x6e>
 8027098:	f04f 0b00 	mov.w	fp, #0
 802709c:	44ab      	add	fp, r5
 802709e:	4621      	mov	r1, r4
 80270a0:	462a      	mov	r2, r5
 80270a2:	4630      	mov	r0, r6
 80270a4:	f003 fafa 	bl	802a69c <st_int8_copy>
 80270a8:	455f      	cmp	r7, fp
 80270aa:	442c      	add	r4, r5
 80270ac:	dcf6      	bgt.n	802709c <forward_lite_pad_constant+0x5c>
 80270ae:	4621      	mov	r1, r4
 80270b0:	4648      	mov	r0, r9
 80270b2:	4652      	mov	r2, sl
 80270b4:	4454      	add	r4, sl
 80270b6:	f003 faf1 	bl	802a69c <st_int8_copy>
 80270ba:	f1b8 0f00 	cmp.w	r8, #0
 80270be:	44d1      	add	r9, sl
 80270c0:	dd0a      	ble.n	80270d8 <forward_lite_pad_constant+0x98>
 80270c2:	f04f 0b00 	mov.w	fp, #0
 80270c6:	44ab      	add	fp, r5
 80270c8:	4621      	mov	r1, r4
 80270ca:	462a      	mov	r2, r5
 80270cc:	4630      	mov	r0, r6
 80270ce:	f003 fae5 	bl	802a69c <st_int8_copy>
 80270d2:	45d8      	cmp	r8, fp
 80270d4:	442c      	add	r4, r5
 80270d6:	dcf6      	bgt.n	80270c6 <forward_lite_pad_constant+0x86>
 80270d8:	9b00      	ldr	r3, [sp, #0]
 80270da:	9a01      	ldr	r2, [sp, #4]
 80270dc:	3301      	adds	r3, #1
 80270de:	429a      	cmp	r2, r3
 80270e0:	9300      	str	r3, [sp, #0]
 80270e2:	d1d7      	bne.n	8027094 <forward_lite_pad_constant+0x54>
 80270e4:	9b02      	ldr	r3, [sp, #8]
 80270e6:	2b00      	cmp	r3, #0
 80270e8:	dd0a      	ble.n	8027100 <forward_lite_pad_constant+0xc0>
 80270ea:	2700      	movs	r7, #0
 80270ec:	4698      	mov	r8, r3
 80270ee:	442f      	add	r7, r5
 80270f0:	4621      	mov	r1, r4
 80270f2:	462a      	mov	r2, r5
 80270f4:	4630      	mov	r0, r6
 80270f6:	f003 fad1 	bl	802a69c <st_int8_copy>
 80270fa:	45b8      	cmp	r8, r7
 80270fc:	442c      	add	r4, r5
 80270fe:	dcf6      	bgt.n	80270ee <forward_lite_pad_constant+0xae>
 8027100:	b005      	add	sp, #20
 8027102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027106:	f996 5000 	ldrsb.w	r5, [r6]
 802710a:	4414      	add	r4, r2
 802710c:	4628      	mov	r0, r5
 802710e:	9403      	str	r4, [sp, #12]
 8027110:	f003 fb66 	bl	802a7e0 <st_int8_fill>
 8027114:	9b01      	ldr	r3, [sp, #4]
 8027116:	2b00      	cmp	r3, #0
 8027118:	dd26      	ble.n	8027168 <forward_lite_pad_constant+0x128>
 802711a:	eb08 030a 	add.w	r3, r8, sl
 802711e:	2600      	movs	r6, #0
 8027120:	eb03 0b07 	add.w	fp, r3, r7
 8027124:	eb07 030a 	add.w	r3, r7, sl
 8027128:	9300      	str	r3, [sp, #0]
 802712a:	4643      	mov	r3, r8
 802712c:	46b0      	mov	r8, r6
 802712e:	461e      	mov	r6, r3
 8027130:	4621      	mov	r1, r4
 8027132:	4628      	mov	r0, r5
 8027134:	463a      	mov	r2, r7
 8027136:	f108 0801 	add.w	r8, r8, #1
 802713a:	f003 fb51 	bl	802a7e0 <st_int8_fill>
 802713e:	19e1      	adds	r1, r4, r7
 8027140:	4648      	mov	r0, r9
 8027142:	4652      	mov	r2, sl
 8027144:	f003 faaa 	bl	802a69c <st_int8_copy>
 8027148:	9b00      	ldr	r3, [sp, #0]
 802714a:	4632      	mov	r2, r6
 802714c:	4628      	mov	r0, r5
 802714e:	18e1      	adds	r1, r4, r3
 8027150:	44d1      	add	r9, sl
 8027152:	f003 fb45 	bl	802a7e0 <st_int8_fill>
 8027156:	9b01      	ldr	r3, [sp, #4]
 8027158:	445c      	add	r4, fp
 802715a:	4543      	cmp	r3, r8
 802715c:	d1e8      	bne.n	8027130 <forward_lite_pad_constant+0xf0>
 802715e:	461a      	mov	r2, r3
 8027160:	9b03      	ldr	r3, [sp, #12]
 8027162:	fb0b 3302 	mla	r3, fp, r2, r3
 8027166:	9303      	str	r3, [sp, #12]
 8027168:	4628      	mov	r0, r5
 802716a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802716e:	b005      	add	sp, #20
 8027170:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027174:	f003 bb34 	b.w	802a7e0 <st_int8_fill>

08027178 <forward_lite_pad_edge>:
 8027178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802717c:	ed2d 8b02 	vpush	{d8}
 8027180:	b087      	sub	sp, #28
 8027182:	9305      	str	r3, [sp, #20]
 8027184:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027186:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	@ 0x48
 802718a:	18cd      	adds	r5, r1, r3
 802718c:	1e13      	subs	r3, r2, #0
 802718e:	f8dd 905c 	ldr.w	r9, [sp, #92]	@ 0x5c
 8027192:	9103      	str	r1, [sp, #12]
 8027194:	9504      	str	r5, [sp, #16]
 8027196:	9301      	str	r3, [sp, #4]
 8027198:	e9dd 4a14 	ldrd	r4, sl, [sp, #80]	@ 0x50
 802719c:	dd36      	ble.n	802720c <forward_lite_pad_edge+0x94>
 802719e:	fb04 f308 	mul.w	r3, r4, r8
 80271a2:	4607      	mov	r7, r0
 80271a4:	ee08 aa10 	vmov	s16, sl
 80271a8:	9302      	str	r3, [sp, #8]
 80271aa:	2300      	movs	r3, #0
 80271ac:	9300      	str	r3, [sp, #0]
 80271ae:	f1b9 0f00 	cmp.w	r9, #0
 80271b2:	dd09      	ble.n	80271c8 <forward_lite_pad_edge+0x50>
 80271b4:	2600      	movs	r6, #0
 80271b6:	4426      	add	r6, r4
 80271b8:	4629      	mov	r1, r5
 80271ba:	4622      	mov	r2, r4
 80271bc:	4638      	mov	r0, r7
 80271be:	f003 fa6d 	bl	802a69c <st_int8_copy>
 80271c2:	45b1      	cmp	r9, r6
 80271c4:	4425      	add	r5, r4
 80271c6:	dcf6      	bgt.n	80271b6 <forward_lite_pad_edge+0x3e>
 80271c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80271ca:	4638      	mov	r0, r7
 80271cc:	4629      	mov	r1, r5
 80271ce:	461a      	mov	r2, r3
 80271d0:	441f      	add	r7, r3
 80271d2:	441d      	add	r5, r3
 80271d4:	f003 fa62 	bl	802a69c <st_int8_copy>
 80271d8:	f1b8 0f00 	cmp.w	r8, #0
 80271dc:	eba7 0a04 	sub.w	sl, r7, r4
 80271e0:	dd0c      	ble.n	80271fc <forward_lite_pad_edge+0x84>
 80271e2:	46ab      	mov	fp, r5
 80271e4:	2600      	movs	r6, #0
 80271e6:	3601      	adds	r6, #1
 80271e8:	4659      	mov	r1, fp
 80271ea:	4622      	mov	r2, r4
 80271ec:	4650      	mov	r0, sl
 80271ee:	f003 fa55 	bl	802a69c <st_int8_copy>
 80271f2:	4546      	cmp	r6, r8
 80271f4:	44a3      	add	fp, r4
 80271f6:	d1f6      	bne.n	80271e6 <forward_lite_pad_edge+0x6e>
 80271f8:	9b02      	ldr	r3, [sp, #8]
 80271fa:	441d      	add	r5, r3
 80271fc:	9b00      	ldr	r3, [sp, #0]
 80271fe:	9a01      	ldr	r2, [sp, #4]
 8027200:	3301      	adds	r3, #1
 8027202:	429a      	cmp	r2, r3
 8027204:	9300      	str	r3, [sp, #0]
 8027206:	d1d2      	bne.n	80271ae <forward_lite_pad_edge+0x36>
 8027208:	ee18 aa10 	vmov	sl, s16
 802720c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8027210:	4293      	cmp	r3, r2
 8027212:	d009      	beq.n	8027228 <forward_lite_pad_edge+0xb0>
 8027214:	461c      	mov	r4, r3
 8027216:	4615      	mov	r5, r2
 8027218:	4621      	mov	r1, r4
 802721a:	4454      	add	r4, sl
 802721c:	4652      	mov	r2, sl
 802721e:	4628      	mov	r0, r5
 8027220:	f003 fa3c 	bl	802a69c <st_int8_copy>
 8027224:	42a5      	cmp	r5, r4
 8027226:	d1f7      	bne.n	8027218 <forward_lite_pad_edge+0xa0>
 8027228:	9a01      	ldr	r2, [sp, #4]
 802722a:	9b05      	ldr	r3, [sp, #20]
 802722c:	4413      	add	r3, r2
 802722e:	9a03      	ldr	r2, [sp, #12]
 8027230:	3b01      	subs	r3, #1
 8027232:	fb0a 2503 	mla	r5, sl, r3, r2
 8027236:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8027238:	18ec      	adds	r4, r5, r3
 802723a:	42a5      	cmp	r5, r4
 802723c:	d009      	beq.n	8027252 <forward_lite_pad_edge+0xda>
 802723e:	f1ca 0600 	rsb	r6, sl, #0
 8027242:	4621      	mov	r1, r4
 8027244:	4434      	add	r4, r6
 8027246:	4652      	mov	r2, sl
 8027248:	4628      	mov	r0, r5
 802724a:	f003 fa27 	bl	802a69c <st_int8_copy>
 802724e:	42a5      	cmp	r5, r4
 8027250:	d1f7      	bne.n	8027242 <forward_lite_pad_edge+0xca>
 8027252:	b007      	add	sp, #28
 8027254:	ecbd 8b02 	vpop	{d8}
 8027258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802725c <forward_lite_pad_reflect>:
 802725c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027260:	b08f      	sub	sp, #60	@ 0x3c
 8027262:	460e      	mov	r6, r1
 8027264:	2b00      	cmp	r3, #0
 8027266:	4684      	mov	ip, r0
 8027268:	f9bd 5080 	ldrsh.w	r5, [sp, #128]	@ 0x80
 802726c:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 802726e:	f9bd e084 	ldrsh.w	lr, [sp, #132]	@ 0x84
 8027272:	910b      	str	r1, [sp, #44]	@ 0x2c
 8027274:	4437      	add	r7, r6
 8027276:	9002      	str	r0, [sp, #8]
 8027278:	950c      	str	r5, [sp, #48]	@ 0x30
 802727a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 802727c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8027280:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8027282:	f8dd 9078 	ldr.w	r9, [sp, #120]	@ 0x78
 8027286:	f9bd 007c 	ldrsh.w	r0, [sp, #124]	@ 0x7c
 802728a:	9d23      	ldr	r5, [sp, #140]	@ 0x8c
 802728c:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8027290:	9307      	str	r3, [sp, #28]
 8027292:	dd58      	ble.n	8027346 <forward_lite_pad_reflect+0xea>
 8027294:	4408      	add	r0, r1
 8027296:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027298:	f1c9 0a00 	rsb	sl, r9, #0
 802729c:	fb02 f200 	mul.w	r2, r2, r0
 80272a0:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80272a2:	4403      	add	r3, r0
 80272a4:	9206      	str	r2, [sp, #24]
 80272a6:	442b      	add	r3, r5
 80272a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80272aa:	197b      	adds	r3, r7, r5
 80272ac:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80272ae:	9301      	str	r3, [sp, #4]
 80272b0:	1e8b      	subs	r3, r1, #2
 80272b2:	fb04 f101 	mul.w	r1, r4, r1
 80272b6:	fb04 c303 	mla	r3, r4, r3, ip
 80272ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80272bc:	9304      	str	r3, [sp, #16]
 80272be:	fb08 2305 	mla	r3, r8, r5, r2
 80272c2:	fb09 6303 	mla	r3, r9, r3, r6
 80272c6:	9303      	str	r3, [sp, #12]
 80272c8:	fb09 f308 	mul.w	r3, r9, r8
 80272cc:	9308      	str	r3, [sp, #32]
 80272ce:	2300      	movs	r3, #0
 80272d0:	9305      	str	r3, [sp, #20]
 80272d2:	9b01      	ldr	r3, [sp, #4]
 80272d4:	42bb      	cmp	r3, r7
 80272d6:	d00a      	beq.n	80272ee <forward_lite_pad_reflect+0x92>
 80272d8:	461d      	mov	r5, r3
 80272da:	9e02      	ldr	r6, [sp, #8]
 80272dc:	4455      	add	r5, sl
 80272de:	4426      	add	r6, r4
 80272e0:	4622      	mov	r2, r4
 80272e2:	4629      	mov	r1, r5
 80272e4:	4630      	mov	r0, r6
 80272e6:	f003 f9d9 	bl	802a69c <st_int8_copy>
 80272ea:	42bd      	cmp	r5, r7
 80272ec:	d1f6      	bne.n	80272dc <forward_lite_pad_reflect+0x80>
 80272ee:	9b02      	ldr	r3, [sp, #8]
 80272f0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80272f2:	4618      	mov	r0, r3
 80272f4:	9901      	ldr	r1, [sp, #4]
 80272f6:	4413      	add	r3, r2
 80272f8:	9302      	str	r3, [sp, #8]
 80272fa:	f003 f9cf 	bl	802a69c <st_int8_copy>
 80272fe:	9b06      	ldr	r3, [sp, #24]
 8027300:	4543      	cmp	r3, r8
 8027302:	da0d      	bge.n	8027320 <forward_lite_pad_reflect+0xc4>
 8027304:	461d      	mov	r5, r3
 8027306:	e9dd b603 	ldrd	fp, r6, [sp, #12]
 802730a:	3501      	adds	r5, #1
 802730c:	4659      	mov	r1, fp
 802730e:	4630      	mov	r0, r6
 8027310:	4622      	mov	r2, r4
 8027312:	f003 f9c3 	bl	802a69c <st_int8_copy>
 8027316:	45a8      	cmp	r8, r5
 8027318:	44cb      	add	fp, r9
 802731a:	eba6 0604 	sub.w	r6, r6, r4
 802731e:	d1f4      	bne.n	802730a <forward_lite_pad_reflect+0xae>
 8027320:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8027322:	9901      	ldr	r1, [sp, #4]
 8027324:	4417      	add	r7, r2
 8027326:	9b05      	ldr	r3, [sp, #20]
 8027328:	4411      	add	r1, r2
 802732a:	9a04      	ldr	r2, [sp, #16]
 802732c:	3301      	adds	r3, #1
 802732e:	9101      	str	r1, [sp, #4]
 8027330:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8027332:	9305      	str	r3, [sp, #20]
 8027334:	440a      	add	r2, r1
 8027336:	9908      	ldr	r1, [sp, #32]
 8027338:	9204      	str	r2, [sp, #16]
 802733a:	9a03      	ldr	r2, [sp, #12]
 802733c:	440a      	add	r2, r1
 802733e:	9203      	str	r2, [sp, #12]
 8027340:	9a07      	ldr	r2, [sp, #28]
 8027342:	429a      	cmp	r2, r3
 8027344:	d1c5      	bne.n	80272d2 <forward_lite_pad_reflect+0x76>
 8027346:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8027348:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802734a:	fb03 f404 	mul.w	r4, r3, r4
 802734e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027350:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8027354:	42a3      	cmp	r3, r4
 8027356:	d00c      	beq.n	8027372 <forward_lite_pad_reflect+0x116>
 8027358:	461d      	mov	r5, r3
 802735a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802735c:	425e      	negs	r6, r3
 802735e:	461f      	mov	r7, r3
 8027360:	4629      	mov	r1, r5
 8027362:	4620      	mov	r0, r4
 8027364:	443d      	add	r5, r7
 8027366:	4434      	add	r4, r6
 8027368:	463a      	mov	r2, r7
 802736a:	f003 f997 	bl	802a69c <st_int8_copy>
 802736e:	42a5      	cmp	r5, r4
 8027370:	d1f6      	bne.n	8027360 <forward_lite_pad_reflect+0x104>
 8027372:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8027374:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8027376:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8027378:	3b01      	subs	r3, #1
 802737a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 802737c:	fb02 f505 	mul.w	r5, r2, r5
 8027380:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8027382:	fb01 2403 	mla	r4, r1, r3, r2
 8027386:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 802738a:	42ac      	cmp	r4, r5
 802738c:	d00a      	beq.n	80273a4 <forward_lite_pad_reflect+0x148>
 802738e:	424e      	negs	r6, r1
 8027390:	460f      	mov	r7, r1
 8027392:	4621      	mov	r1, r4
 8027394:	4628      	mov	r0, r5
 8027396:	4434      	add	r4, r6
 8027398:	443d      	add	r5, r7
 802739a:	463a      	mov	r2, r7
 802739c:	f003 f97e 	bl	802a69c <st_int8_copy>
 80273a0:	42ac      	cmp	r4, r5
 80273a2:	d1f6      	bne.n	8027392 <forward_lite_pad_reflect+0x136>
 80273a4:	b00f      	add	sp, #60	@ 0x3c
 80273a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80273aa:	bf00      	nop

080273ac <align_factor>:
 80273ac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80273b0:	4602      	mov	r2, r0
 80273b2:	b508      	push	{r3, lr}
 80273b4:	eeb4 0a67 	vcmp.f32	s0, s15
 80273b8:	2300      	movs	r3, #0
 80273ba:	8003      	strh	r3, [r0, #0]
 80273bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80273c0:	d524      	bpl.n	802740c <align_factor+0x60>
 80273c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80273c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80273ca:	dd1f      	ble.n	802740c <align_factor+0x60>
 80273cc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80273d0:	2301      	movs	r3, #1
 80273d2:	e005      	b.n	80273e0 <align_factor+0x34>
 80273d4:	8013      	strh	r3, [r2, #0]
 80273d6:	b28b      	uxth	r3, r1
 80273d8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80273dc:	2b21      	cmp	r3, #33	@ 0x21
 80273de:	d02b      	beq.n	8027438 <align_factor+0x8c>
 80273e0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80273e4:	1c59      	adds	r1, r3, #1
 80273e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80273ea:	d4f3      	bmi.n	80273d4 <align_factor+0x28>
 80273ec:	eddf 7a17 	vldr	s15, [pc, #92]	@ 802744c <align_factor+0xa0>
 80273f0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80273f4:	ee17 0a90 	vmov	r0, s15
 80273f8:	f7e9 f95c 	bl	80106b4 <__aeabi_f2lz>
 80273fc:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8027400:	d003      	beq.n	802740a <align_factor+0x5e>
 8027402:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8027406:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 802740a:	bd08      	pop	{r3, pc}
 802740c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8027410:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8027414:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8027418:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 802741c:	e005      	b.n	802742a <align_factor+0x7e>
 802741e:	8013      	strh	r3, [r2, #0]
 8027420:	b28b      	uxth	r3, r1
 8027422:	ee20 0a07 	vmul.f32	s0, s0, s14
 8027426:	4283      	cmp	r3, r0
 8027428:	d00a      	beq.n	8027440 <align_factor+0x94>
 802742a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802742e:	1e59      	subs	r1, r3, #1
 8027430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027434:	dcf3      	bgt.n	802741e <align_factor+0x72>
 8027436:	e7d9      	b.n	80273ec <align_factor+0x40>
 8027438:	2300      	movs	r3, #0
 802743a:	4618      	mov	r0, r3
 802743c:	8013      	strh	r3, [r2, #0]
 802743e:	bd08      	pop	{r3, pc}
 8027440:	f64f 73e2 	movw	r3, #65506	@ 0xffe2
 8027444:	ee30 0a00 	vadd.f32	s0, s0, s0
 8027448:	8013      	strh	r3, [r2, #0]
 802744a:	e7cf      	b.n	80273ec <align_factor+0x40>
 802744c:	4f000000 	.word	0x4f000000

08027450 <align_factor_ch>:
 8027450:	b361      	cbz	r1, 80274ac <align_factor_ch+0x5c>
 8027452:	ee80 7a20 	vdiv.f32	s14, s0, s1
 8027456:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802745a:	b570      	push	{r4, r5, r6, lr}
 802745c:	1e9d      	subs	r5, r3, #2
 802745e:	1f14      	subs	r4, r2, #4
 8027460:	2600      	movs	r6, #0
 8027462:	ecf0 7a01 	vldmia	r0!, {s15}
 8027466:	ee67 7a27 	vmul.f32	s15, s14, s15
 802746a:	ee17 ea90 	vmov	lr, s15
 802746e:	f3ce 52c7 	ubfx	r2, lr, #23, #8
 8027472:	f3ce 0c16 	ubfx	ip, lr, #0, #23
 8027476:	f1be 0f00 	cmp.w	lr, #0
 802747a:	f50c 0c00 	add.w	ip, ip, #8388608	@ 0x800000
 802747e:	f1c2 027e 	rsb	r2, r2, #126	@ 0x7e
 8027482:	bfb8      	it	lt
 8027484:	f1cc 0c00 	rsblt	ip, ip, #0
 8027488:	2a1f      	cmp	r2, #31
 802748a:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 802748e:	dc06      	bgt.n	802749e <align_factor_ch+0x4e>
 8027490:	4281      	cmp	r1, r0
 8027492:	f825 2f02 	strh.w	r2, [r5, #2]!
 8027496:	f844 3f04 	str.w	r3, [r4, #4]!
 802749a:	d1e2      	bne.n	8027462 <align_factor_ch+0x12>
 802749c:	bd70      	pop	{r4, r5, r6, pc}
 802749e:	4281      	cmp	r1, r0
 80274a0:	f825 6f02 	strh.w	r6, [r5, #2]!
 80274a4:	f844 6f04 	str.w	r6, [r4, #4]!
 80274a8:	d1db      	bne.n	8027462 <align_factor_ch+0x12>
 80274aa:	bd70      	pop	{r4, r5, r6, pc}
 80274ac:	4770      	bx	lr
 80274ae:	bf00      	nop

080274b0 <st_int8_to16_no_shift>:
 80274b0:	b570      	push	{r4, r5, r6, lr}
 80274b2:	f1b2 0410 	subs.w	r4, r2, #16
 80274b6:	f04f 0e00 	mov.w	lr, #0
 80274ba:	d438      	bmi.n	802752e <st_int8_to16_no_shift+0x7e>
 80274bc:	f8d0 c000 	ldr.w	ip, [r0]
 80274c0:	6843      	ldr	r3, [r0, #4]
 80274c2:	fa2f f59c 	sxtb16	r5, ip, ror #8
 80274c6:	fa2f fc8c 	sxtb16	ip, ip
 80274ca:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 80274ce:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 80274d2:	fa2f f593 	sxtb16	r5, r3, ror #8
 80274d6:	3010      	adds	r0, #16
 80274d8:	604e      	str	r6, [r1, #4]
 80274da:	f8c1 c000 	str.w	ip, [r1]
 80274de:	fa2f f383 	sxtb16	r3, r3
 80274e2:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 80274e6:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 80274ea:	60ce      	str	r6, [r1, #12]
 80274ec:	608b      	str	r3, [r1, #8]
 80274ee:	f850 cc08 	ldr.w	ip, [r0, #-8]
 80274f2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80274f6:	fa2f f59c 	sxtb16	r5, ip, ror #8
 80274fa:	fa2f fc8c 	sxtb16	ip, ip
 80274fe:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 8027502:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 8027506:	fa2f f593 	sxtb16	r5, r3, ror #8
 802750a:	f10e 0e10 	add.w	lr, lr, #16
 802750e:	f8c1 c010 	str.w	ip, [r1, #16]
 8027512:	614e      	str	r6, [r1, #20]
 8027514:	3120      	adds	r1, #32
 8027516:	45a6      	cmp	lr, r4
 8027518:	fa2f f383 	sxtb16	r3, r3
 802751c:	eac5 4c23 	pkhtb	ip, r5, r3, asr #16
 8027520:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 8027524:	f841 cc04 	str.w	ip, [r1, #-4]
 8027528:	f841 3c08 	str.w	r3, [r1, #-8]
 802752c:	ddc6      	ble.n	80274bc <st_int8_to16_no_shift+0xc>
 802752e:	1f16      	subs	r6, r2, #4
 8027530:	4576      	cmp	r6, lr
 8027532:	db12      	blt.n	802755a <st_int8_to16_no_shift+0xaa>
 8027534:	f850 3b04 	ldr.w	r3, [r0], #4
 8027538:	fa2f f493 	sxtb16	r4, r3, ror #8
 802753c:	f10e 0e04 	add.w	lr, lr, #4
 8027540:	3108      	adds	r1, #8
 8027542:	fa2f f383 	sxtb16	r3, r3
 8027546:	45b6      	cmp	lr, r6
 8027548:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
 802754c:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 8027550:	f841 5c04 	str.w	r5, [r1, #-4]
 8027554:	f841 3c08 	str.w	r3, [r1, #-8]
 8027558:	ddec      	ble.n	8027534 <st_int8_to16_no_shift+0x84>
 802755a:	4572      	cmp	r2, lr
 802755c:	dd08      	ble.n	8027570 <st_int8_to16_no_shift+0xc0>
 802755e:	eba2 020e 	sub.w	r2, r2, lr
 8027562:	4402      	add	r2, r0
 8027564:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8027568:	4290      	cmp	r0, r2
 802756a:	f821 3b02 	strh.w	r3, [r1], #2
 802756e:	d1f9      	bne.n	8027564 <st_int8_to16_no_shift+0xb4>
 8027570:	bd70      	pop	{r4, r5, r6, pc}
 8027572:	bf00      	nop

08027574 <st_int8_to16_no_shift_interleaved>:
 8027574:	b570      	push	{r4, r5, r6, lr}
 8027576:	f1b2 0510 	subs.w	r5, r2, #16
 802757a:	f04f 0e00 	mov.w	lr, #0
 802757e:	d428      	bmi.n	80275d2 <st_int8_to16_no_shift_interleaved+0x5e>
 8027580:	f8d0 c000 	ldr.w	ip, [r0]
 8027584:	6843      	ldr	r3, [r0, #4]
 8027586:	fa2f f69c 	sxtb16	r6, ip, ror #8
 802758a:	fa2f fc8c 	sxtb16	ip, ip
 802758e:	fa2f f493 	sxtb16	r4, r3, ror #8
 8027592:	3010      	adds	r0, #16
 8027594:	600e      	str	r6, [r1, #0]
 8027596:	f8c1 c004 	str.w	ip, [r1, #4]
 802759a:	608c      	str	r4, [r1, #8]
 802759c:	fa2f f383 	sxtb16	r3, r3
 80275a0:	60cb      	str	r3, [r1, #12]
 80275a2:	f850 cc08 	ldr.w	ip, [r0, #-8]
 80275a6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80275aa:	fa2f f69c 	sxtb16	r6, ip, ror #8
 80275ae:	fa2f fc8c 	sxtb16	ip, ip
 80275b2:	fa2f f493 	sxtb16	r4, r3, ror #8
 80275b6:	f10e 0e10 	add.w	lr, lr, #16
 80275ba:	610e      	str	r6, [r1, #16]
 80275bc:	f8c1 c014 	str.w	ip, [r1, #20]
 80275c0:	3120      	adds	r1, #32
 80275c2:	45ae      	cmp	lr, r5
 80275c4:	f841 4c08 	str.w	r4, [r1, #-8]
 80275c8:	fa2f f383 	sxtb16	r3, r3
 80275cc:	f841 3c04 	str.w	r3, [r1, #-4]
 80275d0:	ddd6      	ble.n	8027580 <st_int8_to16_no_shift_interleaved+0xc>
 80275d2:	3a04      	subs	r2, #4
 80275d4:	4572      	cmp	r2, lr
 80275d6:	db0f      	blt.n	80275f8 <st_int8_to16_no_shift_interleaved+0x84>
 80275d8:	ebae 0e00 	sub.w	lr, lr, r0
 80275dc:	f850 3b04 	ldr.w	r3, [r0], #4
 80275e0:	fa2f f493 	sxtb16	r4, r3, ror #8
 80275e4:	eb00 0c0e 	add.w	ip, r0, lr
 80275e8:	600c      	str	r4, [r1, #0]
 80275ea:	3108      	adds	r1, #8
 80275ec:	4562      	cmp	r2, ip
 80275ee:	fa2f f383 	sxtb16	r3, r3
 80275f2:	f841 3c04 	str.w	r3, [r1, #-4]
 80275f6:	daf1      	bge.n	80275dc <st_int8_to16_no_shift_interleaved+0x68>
 80275f8:	bd70      	pop	{r4, r5, r6, pc}
 80275fa:	bf00      	nop

080275fc <st_int8_to16_dual>:
 80275fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027600:	4698      	mov	r8, r3
 8027602:	085b      	lsrs	r3, r3, #1
 8027604:	eb00 0c02 	add.w	ip, r0, r2
 8027608:	f000 80b9 	beq.w	802777e <st_int8_to16_dual+0x182>
 802760c:	f1a2 0710 	sub.w	r7, r2, #16
 8027610:	1f16      	subs	r6, r2, #4
 8027612:	2f00      	cmp	r7, #0
 8027614:	f04f 0500 	mov.w	r5, #0
 8027618:	db73      	blt.n	8027702 <st_int8_to16_dual+0x106>
 802761a:	f8d0 e000 	ldr.w	lr, [r0]
 802761e:	f8dc 4000 	ldr.w	r4, [ip]
 8027622:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8027626:	fa2f fe8e 	sxtb16	lr, lr
 802762a:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 802762e:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 8027632:	fa2f f994 	sxtb16	r9, r4, ror #8
 8027636:	f8c1 e000 	str.w	lr, [r1]
 802763a:	f8c1 a008 	str.w	sl, [r1, #8]
 802763e:	fa2f f484 	sxtb16	r4, r4
 8027642:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 8027646:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 802764a:	f8c1 e00c 	str.w	lr, [r1, #12]
 802764e:	604c      	str	r4, [r1, #4]
 8027650:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8027654:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8027658:	fa2f f99e 	sxtb16	r9, lr, ror #8
 802765c:	fa2f fe8e 	sxtb16	lr, lr
 8027660:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 8027664:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 8027668:	fa2f f994 	sxtb16	r9, r4, ror #8
 802766c:	f8c1 e010 	str.w	lr, [r1, #16]
 8027670:	f8c1 a018 	str.w	sl, [r1, #24]
 8027674:	fa2f f484 	sxtb16	r4, r4
 8027678:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 802767c:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 8027680:	f8c1 e01c 	str.w	lr, [r1, #28]
 8027684:	614c      	str	r4, [r1, #20]
 8027686:	f8d0 e008 	ldr.w	lr, [r0, #8]
 802768a:	f8dc 4008 	ldr.w	r4, [ip, #8]
 802768e:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8027692:	fa2f fe8e 	sxtb16	lr, lr
 8027696:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 802769a:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 802769e:	fa2f f994 	sxtb16	r9, r4, ror #8
 80276a2:	3010      	adds	r0, #16
 80276a4:	f10c 0c10 	add.w	ip, ip, #16
 80276a8:	f8c1 e020 	str.w	lr, [r1, #32]
 80276ac:	f8c1 a028 	str.w	sl, [r1, #40]	@ 0x28
 80276b0:	fa2f f484 	sxtb16	r4, r4
 80276b4:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 80276b8:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 80276bc:	f8c1 e02c 	str.w	lr, [r1, #44]	@ 0x2c
 80276c0:	624c      	str	r4, [r1, #36]	@ 0x24
 80276c2:	f850 ec04 	ldr.w	lr, [r0, #-4]
 80276c6:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 80276ca:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 80276ce:	fa2f fe8e 	sxtb16	lr, lr
 80276d2:	eaca 492e 	pkhtb	r9, sl, lr, asr #16
 80276d6:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 80276da:	fa2f fa94 	sxtb16	sl, r4, ror #8
 80276de:	3510      	adds	r5, #16
 80276e0:	f8c1 e030 	str.w	lr, [r1, #48]	@ 0x30
 80276e4:	f8c1 9038 	str.w	r9, [r1, #56]	@ 0x38
 80276e8:	3140      	adds	r1, #64	@ 0x40
 80276ea:	42bd      	cmp	r5, r7
 80276ec:	fa2f f484 	sxtb16	r4, r4
 80276f0:	eaca 4e24 	pkhtb	lr, sl, r4, asr #16
 80276f4:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 80276f8:	f841 ec04 	str.w	lr, [r1, #-4]
 80276fc:	f841 4c0c 	str.w	r4, [r1, #-12]
 8027700:	dd8b      	ble.n	802761a <st_int8_to16_dual+0x1e>
 8027702:	42ae      	cmp	r6, r5
 8027704:	db1e      	blt.n	8027744 <st_int8_to16_dual+0x148>
 8027706:	f850 4b04 	ldr.w	r4, [r0], #4
 802770a:	f85c eb04 	ldr.w	lr, [ip], #4
 802770e:	fa2f fa94 	sxtb16	sl, r4, ror #8
 8027712:	fa2f f484 	sxtb16	r4, r4
 8027716:	eaca 4924 	pkhtb	r9, sl, r4, asr #16
 802771a:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 802771e:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 8027722:	3504      	adds	r5, #4
 8027724:	600c      	str	r4, [r1, #0]
 8027726:	f8c1 9008 	str.w	r9, [r1, #8]
 802772a:	3110      	adds	r1, #16
 802772c:	42b5      	cmp	r5, r6
 802772e:	fa2f fe8e 	sxtb16	lr, lr
 8027732:	eaca 442e 	pkhtb	r4, sl, lr, asr #16
 8027736:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 802773a:	f841 4c04 	str.w	r4, [r1, #-4]
 802773e:	f841 ec0c 	str.w	lr, [r1, #-12]
 8027742:	dde0      	ble.n	8027706 <st_int8_to16_dual+0x10a>
 8027744:	42aa      	cmp	r2, r5
 8027746:	dd40      	ble.n	80277ca <st_int8_to16_dual+0x1ce>
 8027748:	1b55      	subs	r5, r2, r5
 802774a:	1d0c      	adds	r4, r1, #4
 802774c:	46e6      	mov	lr, ip
 802774e:	eb00 0a05 	add.w	sl, r0, r5
 8027752:	f910 9b01 	ldrsb.w	r9, [r0], #1
 8027756:	3404      	adds	r4, #4
 8027758:	f824 9c08 	strh.w	r9, [r4, #-8]
 802775c:	4550      	cmp	r0, sl
 802775e:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 8027762:	f824 9c06 	strh.w	r9, [r4, #-6]
 8027766:	d1f4      	bne.n	8027752 <st_int8_to16_dual+0x156>
 8027768:	44ac      	add	ip, r5
 802776a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 802776e:	3b01      	subs	r3, #1
 8027770:	eb0a 0002 	add.w	r0, sl, r2
 8027774:	4494      	add	ip, r2
 8027776:	b29b      	uxth	r3, r3
 8027778:	2b00      	cmp	r3, #0
 802777a:	f47f af4a 	bne.w	8027612 <st_int8_to16_dual+0x16>
 802777e:	f018 0f01 	tst.w	r8, #1
 8027782:	d020      	beq.n	80277c6 <st_int8_to16_dual+0x1ca>
 8027784:	1f17      	subs	r7, r2, #4
 8027786:	f04f 0400 	mov.w	r4, #0
 802778a:	d411      	bmi.n	80277b0 <st_int8_to16_dual+0x1b4>
 802778c:	f850 3b04 	ldr.w	r3, [r0], #4
 8027790:	fa2f f593 	sxtb16	r5, r3, ror #8
 8027794:	3404      	adds	r4, #4
 8027796:	3108      	adds	r1, #8
 8027798:	fa2f f383 	sxtb16	r3, r3
 802779c:	42a7      	cmp	r7, r4
 802779e:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 80277a2:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 80277a6:	f841 6c04 	str.w	r6, [r1, #-4]
 80277aa:	f841 3c08 	str.w	r3, [r1, #-8]
 80277ae:	daed      	bge.n	802778c <st_int8_to16_dual+0x190>
 80277b0:	42a2      	cmp	r2, r4
 80277b2:	dd08      	ble.n	80277c6 <st_int8_to16_dual+0x1ca>
 80277b4:	1b13      	subs	r3, r2, r4
 80277b6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80277ba:	f910 2b01 	ldrsb.w	r2, [r0], #1
 80277be:	f821 2b02 	strh.w	r2, [r1], #2
 80277c2:	428b      	cmp	r3, r1
 80277c4:	d1f9      	bne.n	80277ba <st_int8_to16_dual+0x1be>
 80277c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80277ca:	4682      	mov	sl, r0
 80277cc:	e7cf      	b.n	802776e <st_int8_to16_dual+0x172>
 80277ce:	bf00      	nop

080277d0 <st_int8_to16_dual_interleaved>:
 80277d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80277d4:	4698      	mov	r8, r3
 80277d6:	085b      	lsrs	r3, r3, #1
 80277d8:	eb00 0c02 	add.w	ip, r0, r2
 80277dc:	f000 808f 	beq.w	80278fe <st_int8_to16_dual_interleaved+0x12e>
 80277e0:	f1a2 0710 	sub.w	r7, r2, #16
 80277e4:	1f16      	subs	r6, r2, #4
 80277e6:	2f00      	cmp	r7, #0
 80277e8:	f04f 0e00 	mov.w	lr, #0
 80277ec:	db4e      	blt.n	802788c <st_int8_to16_dual_interleaved+0xbc>
 80277ee:	6805      	ldr	r5, [r0, #0]
 80277f0:	f8dc 4000 	ldr.w	r4, [ip]
 80277f4:	fa2f fa95 	sxtb16	sl, r5, ror #8
 80277f8:	fa2f f585 	sxtb16	r5, r5
 80277fc:	fa2f f994 	sxtb16	r9, r4, ror #8
 8027800:	f8c1 a000 	str.w	sl, [r1]
 8027804:	f8c1 9004 	str.w	r9, [r1, #4]
 8027808:	608d      	str	r5, [r1, #8]
 802780a:	fa2f f484 	sxtb16	r4, r4
 802780e:	60cc      	str	r4, [r1, #12]
 8027810:	6845      	ldr	r5, [r0, #4]
 8027812:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8027816:	fa2f fa95 	sxtb16	sl, r5, ror #8
 802781a:	fa2f f585 	sxtb16	r5, r5
 802781e:	fa2f f994 	sxtb16	r9, r4, ror #8
 8027822:	f8c1 a010 	str.w	sl, [r1, #16]
 8027826:	f8c1 9014 	str.w	r9, [r1, #20]
 802782a:	618d      	str	r5, [r1, #24]
 802782c:	fa2f f484 	sxtb16	r4, r4
 8027830:	61cc      	str	r4, [r1, #28]
 8027832:	6885      	ldr	r5, [r0, #8]
 8027834:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8027838:	fa2f fa95 	sxtb16	sl, r5, ror #8
 802783c:	fa2f f585 	sxtb16	r5, r5
 8027840:	fa2f f994 	sxtb16	r9, r4, ror #8
 8027844:	3010      	adds	r0, #16
 8027846:	f10c 0c10 	add.w	ip, ip, #16
 802784a:	f8c1 a020 	str.w	sl, [r1, #32]
 802784e:	f8c1 9024 	str.w	r9, [r1, #36]	@ 0x24
 8027852:	628d      	str	r5, [r1, #40]	@ 0x28
 8027854:	fa2f f484 	sxtb16	r4, r4
 8027858:	62cc      	str	r4, [r1, #44]	@ 0x2c
 802785a:	f850 5c04 	ldr.w	r5, [r0, #-4]
 802785e:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 8027862:	fa2f fa95 	sxtb16	sl, r5, ror #8
 8027866:	fa2f f585 	sxtb16	r5, r5
 802786a:	fa2f f994 	sxtb16	r9, r4, ror #8
 802786e:	f10e 0e10 	add.w	lr, lr, #16
 8027872:	f8c1 a030 	str.w	sl, [r1, #48]	@ 0x30
 8027876:	f8c1 9034 	str.w	r9, [r1, #52]	@ 0x34
 802787a:	3140      	adds	r1, #64	@ 0x40
 802787c:	45be      	cmp	lr, r7
 802787e:	f841 5c08 	str.w	r5, [r1, #-8]
 8027882:	fa2f f484 	sxtb16	r4, r4
 8027886:	f841 4c04 	str.w	r4, [r1, #-4]
 802788a:	ddb0      	ble.n	80277ee <st_int8_to16_dual_interleaved+0x1e>
 802788c:	4576      	cmp	r6, lr
 802788e:	db18      	blt.n	80278c2 <st_int8_to16_dual_interleaved+0xf2>
 8027890:	f850 5b04 	ldr.w	r5, [r0], #4
 8027894:	f85c 4b04 	ldr.w	r4, [ip], #4
 8027898:	fa2f fa95 	sxtb16	sl, r5, ror #8
 802789c:	fa2f f585 	sxtb16	r5, r5
 80278a0:	fa2f f994 	sxtb16	r9, r4, ror #8
 80278a4:	f10e 0e04 	add.w	lr, lr, #4
 80278a8:	f8c1 a000 	str.w	sl, [r1]
 80278ac:	f8c1 9004 	str.w	r9, [r1, #4]
 80278b0:	3110      	adds	r1, #16
 80278b2:	45b6      	cmp	lr, r6
 80278b4:	f841 5c08 	str.w	r5, [r1, #-8]
 80278b8:	fa2f f484 	sxtb16	r4, r4
 80278bc:	f841 4c04 	str.w	r4, [r1, #-4]
 80278c0:	dde6      	ble.n	8027890 <st_int8_to16_dual_interleaved+0xc0>
 80278c2:	4572      	cmp	r2, lr
 80278c4:	dd3c      	ble.n	8027940 <st_int8_to16_dual_interleaved+0x170>
 80278c6:	eba2 0e0e 	sub.w	lr, r2, lr
 80278ca:	1d0c      	adds	r4, r1, #4
 80278cc:	4665      	mov	r5, ip
 80278ce:	eb00 0a0e 	add.w	sl, r0, lr
 80278d2:	f910 9b01 	ldrsb.w	r9, [r0], #1
 80278d6:	3404      	adds	r4, #4
 80278d8:	f824 9c08 	strh.w	r9, [r4, #-8]
 80278dc:	4550      	cmp	r0, sl
 80278de:	f915 9b01 	ldrsb.w	r9, [r5], #1
 80278e2:	f824 9c06 	strh.w	r9, [r4, #-6]
 80278e6:	d1f4      	bne.n	80278d2 <st_int8_to16_dual_interleaved+0x102>
 80278e8:	44f4      	add	ip, lr
 80278ea:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80278ee:	3b01      	subs	r3, #1
 80278f0:	eb0a 0002 	add.w	r0, sl, r2
 80278f4:	4494      	add	ip, r2
 80278f6:	b29b      	uxth	r3, r3
 80278f8:	2b00      	cmp	r3, #0
 80278fa:	f47f af74 	bne.w	80277e6 <st_int8_to16_dual_interleaved+0x16>
 80278fe:	f018 0f01 	tst.w	r8, #1
 8027902:	d01b      	beq.n	802793c <st_int8_to16_dual_interleaved+0x16c>
 8027904:	1f16      	subs	r6, r2, #4
 8027906:	f04f 0400 	mov.w	r4, #0
 802790a:	d40c      	bmi.n	8027926 <st_int8_to16_dual_interleaved+0x156>
 802790c:	f850 3b04 	ldr.w	r3, [r0], #4
 8027910:	fa2f f593 	sxtb16	r5, r3, ror #8
 8027914:	3404      	adds	r4, #4
 8027916:	600d      	str	r5, [r1, #0]
 8027918:	3108      	adds	r1, #8
 802791a:	42a6      	cmp	r6, r4
 802791c:	fa2f f383 	sxtb16	r3, r3
 8027920:	f841 3c04 	str.w	r3, [r1, #-4]
 8027924:	daf2      	bge.n	802790c <st_int8_to16_dual_interleaved+0x13c>
 8027926:	42a2      	cmp	r2, r4
 8027928:	dd08      	ble.n	802793c <st_int8_to16_dual_interleaved+0x16c>
 802792a:	1b13      	subs	r3, r2, r4
 802792c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8027930:	f910 2b01 	ldrsb.w	r2, [r0], #1
 8027934:	f821 2b02 	strh.w	r2, [r1], #2
 8027938:	428b      	cmp	r3, r1
 802793a:	d1f9      	bne.n	8027930 <st_int8_to16_dual_interleaved+0x160>
 802793c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027940:	4682      	mov	sl, r0
 8027942:	e7d4      	b.n	80278ee <st_int8_to16_dual_interleaved+0x11e>

08027944 <ai_padding_opt_init>:
 8027944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027948:	2700      	movs	r7, #0
 802794a:	9c07      	ldr	r4, [sp, #28]
 802794c:	e9c0 7700 	strd	r7, r7, [r0]
 8027950:	6087      	str	r7, [r0, #8]
 8027952:	46b9      	mov	r9, r7
 8027954:	690e      	ldr	r6, [r1, #16]
 8027956:	f1c6 0c00 	rsb	ip, r6, #0
 802795a:	689e      	ldr	r6, [r3, #8]
 802795c:	42be      	cmp	r6, r7
 802795e:	dd1c      	ble.n	802799a <ai_padding_opt_init+0x56>
 8027960:	463e      	mov	r6, r7
 8027962:	46be      	mov	lr, r7
 8027964:	e010      	b.n	8027988 <ai_padding_opt_init+0x44>
 8027966:	6895      	ldr	r5, [r2, #8]
 8027968:	eba5 080c 	sub.w	r8, r5, ip
 802796c:	68a5      	ldr	r5, [r4, #8]
 802796e:	45a8      	cmp	r8, r5
 8027970:	da10      	bge.n	8027994 <ai_padding_opt_init+0x50>
 8027972:	f109 0901 	add.w	r9, r9, #1
 8027976:	f8c0 9008 	str.w	r9, [r0, #8]
 802797a:	688d      	ldr	r5, [r1, #8]
 802797c:	f10e 0e01 	add.w	lr, lr, #1
 8027980:	44ac      	add	ip, r5
 8027982:	689d      	ldr	r5, [r3, #8]
 8027984:	4575      	cmp	r5, lr
 8027986:	dd09      	ble.n	802799c <ai_padding_opt_init+0x58>
 8027988:	f1bc 0f00 	cmp.w	ip, #0
 802798c:	daeb      	bge.n	8027966 <ai_padding_opt_init+0x22>
 802798e:	3601      	adds	r6, #1
 8027990:	6006      	str	r6, [r0, #0]
 8027992:	e7f2      	b.n	802797a <ai_padding_opt_init+0x36>
 8027994:	3701      	adds	r7, #1
 8027996:	6047      	str	r7, [r0, #4]
 8027998:	e7ef      	b.n	802797a <ai_padding_opt_init+0x36>
 802799a:	463e      	mov	r6, r7
 802799c:	2500      	movs	r5, #0
 802799e:	f8c0 9014 	str.w	r9, [r0, #20]
 80279a2:	e9c0 6703 	strd	r6, r7, [r0, #12]
 80279a6:	e9c0 5506 	strd	r5, r5, [r0, #24]
 80279aa:	6205      	str	r5, [r0, #32]
 80279ac:	694e      	ldr	r6, [r1, #20]
 80279ae:	f1c6 0c00 	rsb	ip, r6, #0
 80279b2:	685e      	ldr	r6, [r3, #4]
 80279b4:	42ae      	cmp	r6, r5
 80279b6:	dd1c      	ble.n	80279f2 <ai_padding_opt_init+0xae>
 80279b8:	46ae      	mov	lr, r5
 80279ba:	e00f      	b.n	80279dc <ai_padding_opt_init+0x98>
 80279bc:	6855      	ldr	r5, [r2, #4]
 80279be:	6866      	ldr	r6, [r4, #4]
 80279c0:	eba5 050c 	sub.w	r5, r5, ip
 80279c4:	42b5      	cmp	r5, r6
 80279c6:	da10      	bge.n	80279ea <ai_padding_opt_init+0xa6>
 80279c8:	6a05      	ldr	r5, [r0, #32]
 80279ca:	3501      	adds	r5, #1
 80279cc:	6205      	str	r5, [r0, #32]
 80279ce:	68cd      	ldr	r5, [r1, #12]
 80279d0:	f10e 0e01 	add.w	lr, lr, #1
 80279d4:	44ac      	add	ip, r5
 80279d6:	685d      	ldr	r5, [r3, #4]
 80279d8:	4575      	cmp	r5, lr
 80279da:	dd0a      	ble.n	80279f2 <ai_padding_opt_init+0xae>
 80279dc:	f1bc 0f00 	cmp.w	ip, #0
 80279e0:	daec      	bge.n	80279bc <ai_padding_opt_init+0x78>
 80279e2:	6985      	ldr	r5, [r0, #24]
 80279e4:	3501      	adds	r5, #1
 80279e6:	6185      	str	r5, [r0, #24]
 80279e8:	e7f1      	b.n	80279ce <ai_padding_opt_init+0x8a>
 80279ea:	69c5      	ldr	r5, [r0, #28]
 80279ec:	3501      	adds	r5, #1
 80279ee:	61c5      	str	r5, [r0, #28]
 80279f0:	e7ed      	b.n	80279ce <ai_padding_opt_init+0x8a>
 80279f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80279f6:	bf00      	nop

080279f8 <ai_padding_opt_phase1>:
 80279f8:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 80279fc:	b923      	cbnz	r3, 8027a08 <ai_padding_opt_phase1+0x10>
 80279fe:	b17a      	cbz	r2, 8027a20 <ai_padding_opt_phase1+0x28>
 8027a00:	3a01      	subs	r2, #1
 8027a02:	8483      	strh	r3, [r0, #36]	@ 0x24
 8027a04:	61c2      	str	r2, [r0, #28]
 8027a06:	e004      	b.n	8027a12 <ai_padding_opt_phase1+0x1a>
 8027a08:	b152      	cbz	r2, 8027a20 <ai_padding_opt_phase1+0x28>
 8027a0a:	2201      	movs	r2, #1
 8027a0c:	3b01      	subs	r3, #1
 8027a0e:	8482      	strh	r2, [r0, #36]	@ 0x24
 8027a10:	6183      	str	r3, [r0, #24]
 8027a12:	68c3      	ldr	r3, [r0, #12]
 8027a14:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 8027a18:	6003      	str	r3, [r0, #0]
 8027a1a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8027a1e:	4770      	bx	lr
 8027a20:	6a03      	ldr	r3, [r0, #32]
 8027a22:	2201      	movs	r2, #1
 8027a24:	3b01      	subs	r3, #1
 8027a26:	8482      	strh	r2, [r0, #36]	@ 0x24
 8027a28:	6203      	str	r3, [r0, #32]
 8027a2a:	e7f2      	b.n	8027a12 <ai_padding_opt_phase1+0x1a>

08027a2c <st_int8_avepool>:
 8027a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a30:	b095      	sub	sp, #84	@ 0x54
 8027a32:	eec0 5a20 	vdiv.f32	s11, s0, s1
 8027a36:	930c      	str	r3, [sp, #48]	@ 0x30
 8027a38:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 8027a3c:	f8bd a078 	ldrh.w	sl, [sp, #120]	@ 0x78
 8027a40:	9206      	str	r2, [sp, #24]
 8027a42:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027a44:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8027a48:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8027a4c:	910d      	str	r1, [sp, #52]	@ 0x34
 8027a4e:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8027a52:	910e      	str	r1, [sp, #56]	@ 0x38
 8027a54:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 8027a58:	910f      	str	r1, [sp, #60]	@ 0x3c
 8027a5a:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 8027a5e:	9110      	str	r1, [sp, #64]	@ 0x40
 8027a60:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 8027a64:	9111      	str	r1, [sp, #68]	@ 0x44
 8027a66:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 8027a6a:	9112      	str	r1, [sp, #72]	@ 0x48
 8027a6c:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 8027a70:	9107      	str	r1, [sp, #28]
 8027a72:	f99d 109c 	ldrsb.w	r1, [sp, #156]	@ 0x9c
 8027a76:	ee03 1a10 	vmov	s6, r1
 8027a7a:	f99d 10a0 	ldrsb.w	r1, [sp, #160]	@ 0xa0
 8027a7e:	2b00      	cmp	r3, #0
 8027a80:	f000 80aa 	beq.w	8027bd8 <st_int8_avepool+0x1ac>
 8027a84:	eeb4 0a60 	vcmp.f32	s0, s1
 8027a88:	2300      	movs	r3, #0
 8027a8a:	fb02 fb0a 	mul.w	fp, r2, sl
 8027a8e:	ee13 2a10 	vmov	r2, s6
 8027a92:	9304      	str	r3, [sp, #16]
 8027a94:	ee03 1a90 	vmov	s7, r1
 8027a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027a9c:	ed9f 6a5d 	vldr	s12, [pc, #372]	@ 8027c14 <st_int8_avepool+0x1e8>
 8027aa0:	eddf 2a5d 	vldr	s5, [pc, #372]	@ 8027c18 <st_int8_avepool+0x1ec>
 8027aa4:	bf08      	it	eq
 8027aa6:	2301      	moveq	r3, #1
 8027aa8:	428a      	cmp	r2, r1
 8027aaa:	bf14      	ite	ne
 8027aac:	2300      	movne	r3, #0
 8027aae:	f003 0301 	andeq.w	r3, r3, #1
 8027ab2:	9302      	str	r3, [sp, #8]
 8027ab4:	9a07      	ldr	r2, [sp, #28]
 8027ab6:	2a00      	cmp	r2, #0
 8027ab8:	f000 8087 	beq.w	8027bca <st_int8_avepool+0x19e>
 8027abc:	9904      	ldr	r1, [sp, #16]
 8027abe:	eef8 4ac3 	vcvt.f32.s32	s9, s6
 8027ac2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8027ac4:	eeb8 5ae3 	vcvt.f32.s32	s10, s7
 8027ac8:	fb01 f202 	mul.w	r2, r1, r2
 8027acc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8027ace:	fb01 f303 	mul.w	r3, r1, r3
 8027ad2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8027ad4:	9208      	str	r2, [sp, #32]
 8027ad6:	2200      	movs	r2, #0
 8027ad8:	1a1b      	subs	r3, r3, r0
 8027ada:	9205      	str	r2, [sp, #20]
 8027adc:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8027ae0:	440b      	add	r3, r1
 8027ae2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8027ae4:	9201      	str	r2, [sp, #4]
 8027ae6:	4299      	cmp	r1, r3
 8027ae8:	bfa8      	it	ge
 8027aea:	4619      	movge	r1, r3
 8027aec:	9b06      	ldr	r3, [sp, #24]
 8027aee:	4689      	mov	r9, r1
 8027af0:	fb02 f303 	mul.w	r3, r2, r3
 8027af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8027af6:	f1ba 0f00 	cmp.w	sl, #0
 8027afa:	d060      	beq.n	8027bbe <st_int8_avepool+0x192>
 8027afc:	9a05      	ldr	r2, [sp, #20]
 8027afe:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8027b02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027b04:	f04f 0800 	mov.w	r8, #0
 8027b08:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8027b0a:	fb02 f303 	mul.w	r3, r2, r3
 8027b0e:	9c06      	ldr	r4, [sp, #24]
 8027b10:	1a5b      	subs	r3, r3, r1
 8027b12:	9908      	ldr	r1, [sp, #32]
 8027b14:	440a      	add	r2, r1
 8027b16:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8027b18:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
 8027b1c:	fb0a 1202 	mla	r2, sl, r2, r1
 8027b20:	9200      	str	r2, [sp, #0]
 8027b22:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027b24:	4413      	add	r3, r2
 8027b26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8027b28:	429c      	cmp	r4, r3
 8027b2a:	bfa8      	it	ge
 8027b2c:	461c      	movge	r4, r3
 8027b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027b30:	4463      	add	r3, ip
 8027b32:	eba4 0e0c 	sub.w	lr, r4, ip
 8027b36:	fb0a 2303 	mla	r3, sl, r3, r2
 8027b3a:	9303      	str	r3, [sp, #12]
 8027b3c:	9d01      	ldr	r5, [sp, #4]
 8027b3e:	45a9      	cmp	r9, r5
 8027b40:	dd62      	ble.n	8027c08 <st_int8_avepool+0x1dc>
 8027b42:	2700      	movs	r7, #0
 8027b44:	9b03      	ldr	r3, [sp, #12]
 8027b46:	4639      	mov	r1, r7
 8027b48:	eb08 0603 	add.w	r6, r8, r3
 8027b4c:	4564      	cmp	r4, ip
 8027b4e:	dd09      	ble.n	8027b64 <st_int8_avepool+0x138>
 8027b50:	4632      	mov	r2, r6
 8027b52:	4663      	mov	r3, ip
 8027b54:	3301      	adds	r3, #1
 8027b56:	f992 0000 	ldrsb.w	r0, [r2]
 8027b5a:	4452      	add	r2, sl
 8027b5c:	429c      	cmp	r4, r3
 8027b5e:	4401      	add	r1, r0
 8027b60:	d1f8      	bne.n	8027b54 <st_int8_avepool+0x128>
 8027b62:	4477      	add	r7, lr
 8027b64:	3501      	adds	r5, #1
 8027b66:	445e      	add	r6, fp
 8027b68:	45a9      	cmp	r9, r5
 8027b6a:	d1ef      	bne.n	8027b4c <st_int8_avepool+0x120>
 8027b6c:	9b02      	ldr	r3, [sp, #8]
 8027b6e:	bbb3      	cbnz	r3, 8027bde <st_int8_avepool+0x1b2>
 8027b70:	ee07 1a90 	vmov	s15, r1
 8027b74:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8027b78:	ee07 7a90 	vmov	s15, r7
 8027b7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8027b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8027b84:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8027b88:	eeb0 7a45 	vmov.f32	s14, s10
 8027b8c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8027b90:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8027b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027b98:	fe64 7a06 	vselge.f32	s15, s8, s12
 8027b9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8027ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027ba4:	ee17 3a90 	vmov	r3, s15
 8027ba8:	f303 0307 	ssat	r3, #8, r3
 8027bac:	9a00      	ldr	r2, [sp, #0]
 8027bae:	7013      	strb	r3, [r2, #0]
 8027bb0:	4613      	mov	r3, r2
 8027bb2:	f108 0801 	add.w	r8, r8, #1
 8027bb6:	3301      	adds	r3, #1
 8027bb8:	45d0      	cmp	r8, sl
 8027bba:	9300      	str	r3, [sp, #0]
 8027bbc:	d1be      	bne.n	8027b3c <st_int8_avepool+0x110>
 8027bbe:	9b05      	ldr	r3, [sp, #20]
 8027bc0:	9a07      	ldr	r2, [sp, #28]
 8027bc2:	3301      	adds	r3, #1
 8027bc4:	4293      	cmp	r3, r2
 8027bc6:	9305      	str	r3, [sp, #20]
 8027bc8:	db95      	blt.n	8027af6 <st_int8_avepool+0xca>
 8027bca:	9b04      	ldr	r3, [sp, #16]
 8027bcc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8027bce:	3301      	adds	r3, #1
 8027bd0:	429a      	cmp	r2, r3
 8027bd2:	9304      	str	r3, [sp, #16]
 8027bd4:	f73f af6e 	bgt.w	8027ab4 <st_int8_avepool+0x88>
 8027bd8:	b015      	add	sp, #84	@ 0x54
 8027bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027bde:	2900      	cmp	r1, #0
 8027be0:	db09      	blt.n	8027bf6 <st_int8_avepool+0x1ca>
 8027be2:	eb01 0167 	add.w	r1, r1, r7, asr #1
 8027be6:	fbb1 f7f7 	udiv	r7, r1, r7
 8027bea:	f307 0307 	ssat	r3, #8, r7
 8027bee:	9a00      	ldr	r2, [sp, #0]
 8027bf0:	7013      	strb	r3, [r2, #0]
 8027bf2:	4613      	mov	r3, r2
 8027bf4:	e7dd      	b.n	8027bb2 <st_int8_avepool+0x186>
 8027bf6:	2f00      	cmp	r7, #0
 8027bf8:	463b      	mov	r3, r7
 8027bfa:	bfb8      	it	lt
 8027bfc:	1c7b      	addlt	r3, r7, #1
 8027bfe:	eba1 0363 	sub.w	r3, r1, r3, asr #1
 8027c02:	fb93 f7f7 	sdiv	r7, r3, r7
 8027c06:	e7f0      	b.n	8027bea <st_int8_avepool+0x1be>
 8027c08:	9b02      	ldr	r3, [sp, #8]
 8027c0a:	b913      	cbnz	r3, 8027c12 <st_int8_avepool+0x1e6>
 8027c0c:	eef0 7a62 	vmov.f32	s15, s5
 8027c10:	e7b8      	b.n	8027b84 <st_int8_avepool+0x158>
 8027c12:	deff      	udf	#255	@ 0xff
 8027c14:	befffffc 	.word	0xbefffffc
 8027c18:	7fc00000 	.word	0x7fc00000

08027c1c <st_int16_fill>:
 8027c1c:	b510      	push	{r4, lr}
 8027c1e:	eac0 4400 	pkhbt	r4, r0, r0, lsl #16
 8027c22:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 8027c26:	d013      	beq.n	8027c50 <st_int16_fill+0x34>
 8027c28:	f10e 33ff 	add.w	r3, lr, #4294967295
 8027c2c:	2b03      	cmp	r3, #3
 8027c2e:	460b      	mov	r3, r1
 8027c30:	d919      	bls.n	8027c66 <st_int16_fill+0x4a>
 8027c32:	f011 0f07 	tst.w	r1, #7
 8027c36:	d116      	bne.n	8027c66 <st_int16_fill+0x4a>
 8027c38:	f04f 0c00 	mov.w	ip, #0
 8027c3c:	f10c 0c01 	add.w	ip, ip, #1
 8027c40:	45e6      	cmp	lr, ip
 8027c42:	e9c3 4400 	strd	r4, r4, [r3]
 8027c46:	f103 0308 	add.w	r3, r3, #8
 8027c4a:	d1f7      	bne.n	8027c3c <st_int16_fill+0x20>
 8027c4c:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 8027c50:	f012 0203 	ands.w	r2, r2, #3
 8027c54:	d006      	beq.n	8027c64 <st_int16_fill+0x48>
 8027c56:	3a01      	subs	r2, #1
 8027c58:	8008      	strh	r0, [r1, #0]
 8027c5a:	d003      	beq.n	8027c64 <st_int16_fill+0x48>
 8027c5c:	2a01      	cmp	r2, #1
 8027c5e:	8048      	strh	r0, [r1, #2]
 8027c60:	bf18      	it	ne
 8027c62:	8088      	strhne	r0, [r1, #4]
 8027c64:	bd10      	pop	{r4, pc}
 8027c66:	46f4      	mov	ip, lr
 8027c68:	f1bc 0c01 	subs.w	ip, ip, #1
 8027c6c:	601c      	str	r4, [r3, #0]
 8027c6e:	605c      	str	r4, [r3, #4]
 8027c70:	f103 0308 	add.w	r3, r3, #8
 8027c74:	d1f8      	bne.n	8027c68 <st_int16_fill+0x4c>
 8027c76:	e7e9      	b.n	8027c4c <st_int16_fill+0x30>

08027c78 <st_f32_to_int16>:
 8027c78:	b530      	push	{r4, r5, lr}
 8027c7a:	0895      	lsrs	r5, r2, #2
 8027c7c:	d069      	beq.n	8027d52 <st_f32_to_int16+0xda>
 8027c7e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8027c82:	f100 0c10 	add.w	ip, r0, #16
 8027c86:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 8027c8a:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 8027de0 <st_f32_to_int16+0x168>
 8027c8e:	f101 0e08 	add.w	lr, r1, #8
 8027c92:	462c      	mov	r4, r5
 8027c94:	ed5c 6a04 	vldr	s13, [ip, #-16]
 8027c98:	ee66 6a86 	vmul.f32	s13, s13, s12
 8027c9c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8027ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ca4:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8027ca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8027cac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027cb0:	ee17 3a90 	vmov	r3, s15
 8027cb4:	f303 030f 	ssat	r3, #16, r3
 8027cb8:	f82e 3c08 	strh.w	r3, [lr, #-8]
 8027cbc:	ed5c 6a03 	vldr	s13, [ip, #-12]
 8027cc0:	ee66 6a86 	vmul.f32	s13, s13, s12
 8027cc4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8027cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ccc:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8027cd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8027cd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027cd8:	ee17 3a90 	vmov	r3, s15
 8027cdc:	f303 030f 	ssat	r3, #16, r3
 8027ce0:	f82e 3c06 	strh.w	r3, [lr, #-6]
 8027ce4:	ed5c 6a02 	vldr	s13, [ip, #-8]
 8027ce8:	ee66 6a86 	vmul.f32	s13, s13, s12
 8027cec:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8027cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027cf4:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8027cf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8027cfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027d00:	ee17 3a90 	vmov	r3, s15
 8027d04:	f303 030f 	ssat	r3, #16, r3
 8027d08:	f82e 3c04 	strh.w	r3, [lr, #-4]
 8027d0c:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8027d10:	ee67 7a86 	vmul.f32	s15, s15, s12
 8027d14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8027d18:	ee77 6a87 	vadd.f32	s13, s15, s14
 8027d1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027d24:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8027d28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027d2c:	bfcc      	ite	gt
 8027d2e:	ee16 3a90 	vmovgt	r3, s13
 8027d32:	ee17 3a90 	vmovle	r3, s15
 8027d36:	f303 030f 	ssat	r3, #16, r3
 8027d3a:	3c01      	subs	r4, #1
 8027d3c:	f82e 3c02 	strh.w	r3, [lr, #-2]
 8027d40:	f10c 0c10 	add.w	ip, ip, #16
 8027d44:	f10e 0e08 	add.w	lr, lr, #8
 8027d48:	d1a4      	bne.n	8027c94 <st_f32_to_int16+0x1c>
 8027d4a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8027d4e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8027d52:	f012 0203 	ands.w	r2, r2, #3
 8027d56:	d042      	beq.n	8027dde <st_f32_to_int16+0x166>
 8027d58:	edd0 6a00 	vldr	s13, [r0]
 8027d5c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8027d60:	eddf 5a1f 	vldr	s11, [pc, #124]	@ 8027de0 <st_f32_to_int16+0x168>
 8027d64:	eebe 6a00 	vmov.f32	s12, #224	@ 0xbf000000 -0.5
 8027d68:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8027d6c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8027d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027d74:	fe77 7a06 	vselgt.f32	s15, s14, s12
 8027d78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8027d7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027d80:	ee17 3a90 	vmov	r3, s15
 8027d84:	f303 030f 	ssat	r3, #16, r3
 8027d88:	3a01      	subs	r2, #1
 8027d8a:	800b      	strh	r3, [r1, #0]
 8027d8c:	d027      	beq.n	8027dde <st_f32_to_int16+0x166>
 8027d8e:	edd0 7a01 	vldr	s15, [r0, #4]
 8027d92:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8027d96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8027d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027d9e:	fe77 6a06 	vselgt.f32	s13, s14, s12
 8027da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8027da6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027daa:	ee17 3a90 	vmov	r3, s15
 8027dae:	f303 030f 	ssat	r3, #16, r3
 8027db2:	2a01      	cmp	r2, #1
 8027db4:	804b      	strh	r3, [r1, #2]
 8027db6:	d012      	beq.n	8027dde <st_f32_to_int16+0x166>
 8027db8:	edd0 7a02 	vldr	s15, [r0, #8]
 8027dbc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8027dc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8027dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027dc8:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8027dcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8027dd0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8027dd4:	ee17 3a10 	vmov	r3, s14
 8027dd8:	f303 030f 	ssat	r3, #16, r3
 8027ddc:	808b      	strh	r3, [r1, #4]
 8027dde:	bd30      	pop	{r4, r5, pc}
 8027de0:	47000000 	.word	0x47000000

08027de4 <st_f32_to_int8>:
 8027de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027de6:	0895      	lsrs	r5, r2, #2
 8027de8:	d06f      	beq.n	8027eca <st_f32_to_int8+0xe6>
 8027dea:	f101 0c04 	add.w	ip, r1, #4
 8027dee:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8027df2:	eebe 5a00 	vmov.f32	s10, #224	@ 0xbf000000 -0.5
 8027df6:	f100 0e10 	add.w	lr, r0, #16
 8027dfa:	eddf 5a5f 	vldr	s11, [pc, #380]	@ 8027f78 <st_f32_to_int8+0x194>
 8027dfe:	00ae      	lsls	r6, r5, #2
 8027e00:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 8027e04:	ed1e 7a04 	vldr	s14, [lr, #-16]
 8027e08:	ee27 7a25 	vmul.f32	s14, s14, s11
 8027e0c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8027e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e14:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8027e18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8027e1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027e20:	ee17 3a90 	vmov	r3, s15
 8027e24:	b21b      	sxth	r3, r3
 8027e26:	f303 0307 	ssat	r3, #8, r3
 8027e2a:	f80c 3c04 	strb.w	r3, [ip, #-4]
 8027e2e:	ed1e 7a03 	vldr	s14, [lr, #-12]
 8027e32:	ee27 7a25 	vmul.f32	s14, s14, s11
 8027e36:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8027e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e3e:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8027e42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8027e46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027e4a:	ee17 3a90 	vmov	r3, s15
 8027e4e:	b21b      	sxth	r3, r3
 8027e50:	f303 0307 	ssat	r3, #8, r3
 8027e54:	f80c 3c03 	strb.w	r3, [ip, #-3]
 8027e58:	ed1e 7a02 	vldr	s14, [lr, #-8]
 8027e5c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8027e60:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8027e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e68:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8027e6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8027e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027e74:	ee17 3a90 	vmov	r3, s15
 8027e78:	b21b      	sxth	r3, r3
 8027e7a:	f303 0307 	ssat	r3, #8, r3
 8027e7e:	f80c 3c02 	strb.w	r3, [ip, #-2]
 8027e82:	ed5e 6a01 	vldr	s13, [lr, #-4]
 8027e86:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8027e8a:	ee76 7a86 	vadd.f32	s15, s13, s12
 8027e8e:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8027e92:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8027e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027e9a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8027e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ea2:	ee17 3a90 	vmov	r3, s15
 8027ea6:	ee17 7a10 	vmov	r7, s14
 8027eaa:	b21b      	sxth	r3, r3
 8027eac:	b23f      	sxth	r7, r7
 8027eae:	dd56      	ble.n	8027f5e <st_f32_to_int8+0x17a>
 8027eb0:	f303 0307 	ssat	r3, #8, r3
 8027eb4:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8027eb8:	f10c 0c04 	add.w	ip, ip, #4
 8027ebc:	f10e 0e10 	add.w	lr, lr, #16
 8027ec0:	4564      	cmp	r4, ip
 8027ec2:	d19f      	bne.n	8027e04 <st_f32_to_int8+0x20>
 8027ec4:	4431      	add	r1, r6
 8027ec6:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8027eca:	f012 0203 	ands.w	r2, r2, #3
 8027ece:	d045      	beq.n	8027f5c <st_f32_to_int8+0x178>
 8027ed0:	edd0 6a00 	vldr	s13, [r0]
 8027ed4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8027ed8:	eddf 5a27 	vldr	s11, [pc, #156]	@ 8027f78 <st_f32_to_int8+0x194>
 8027edc:	eebe 6a00 	vmov.f32	s12, #224	@ 0xbf000000 -0.5
 8027ee0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8027ee4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8027ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027eec:	fe77 7a06 	vselgt.f32	s15, s14, s12
 8027ef0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8027ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027ef8:	ee17 3a90 	vmov	r3, s15
 8027efc:	b21b      	sxth	r3, r3
 8027efe:	f303 0307 	ssat	r3, #8, r3
 8027f02:	3a01      	subs	r2, #1
 8027f04:	700b      	strb	r3, [r1, #0]
 8027f06:	d029      	beq.n	8027f5c <st_f32_to_int8+0x178>
 8027f08:	edd0 6a01 	vldr	s13, [r0, #4]
 8027f0c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8027f10:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8027f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027f18:	fe77 7a06 	vselgt.f32	s15, s14, s12
 8027f1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8027f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027f24:	ee17 3a90 	vmov	r3, s15
 8027f28:	b21b      	sxth	r3, r3
 8027f2a:	f303 0307 	ssat	r3, #8, r3
 8027f2e:	2a01      	cmp	r2, #1
 8027f30:	704b      	strb	r3, [r1, #1]
 8027f32:	d013      	beq.n	8027f5c <st_f32_to_int8+0x178>
 8027f34:	edd0 6a02 	vldr	s13, [r0, #8]
 8027f38:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8027f3c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8027f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027f44:	fe77 7a06 	vselgt.f32	s15, s14, s12
 8027f48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8027f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027f50:	ee17 3a90 	vmov	r3, s15
 8027f54:	b21b      	sxth	r3, r3
 8027f56:	f303 0307 	ssat	r3, #8, r3
 8027f5a:	708b      	strb	r3, [r1, #2]
 8027f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027f5e:	f307 0707 	ssat	r7, #8, r7
 8027f62:	f80c 7c01 	strb.w	r7, [ip, #-1]
 8027f66:	f10c 0c04 	add.w	ip, ip, #4
 8027f6a:	f10e 0e10 	add.w	lr, lr, #16
 8027f6e:	45a4      	cmp	ip, r4
 8027f70:	f47f af48 	bne.w	8027e04 <st_f32_to_int8+0x20>
 8027f74:	e7a6      	b.n	8027ec4 <st_f32_to_int8+0xe0>
 8027f76:	bf00      	nop
 8027f78:	43000000 	.word	0x43000000

08027f7c <st_int16_to_f32>:
 8027f7c:	b530      	push	{r4, r5, lr}
 8027f7e:	0894      	lsrs	r4, r2, #2
 8027f80:	d038      	beq.n	8027ff4 <st_int16_to_f32+0x78>
 8027f82:	f100 0c08 	add.w	ip, r0, #8
 8027f86:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8028044 <st_int16_to_f32+0xc8>
 8027f8a:	f101 0310 	add.w	r3, r1, #16
 8027f8e:	46a6      	mov	lr, r4
 8027f90:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 8027f94:	3310      	adds	r3, #16
 8027f96:	f10c 0c08 	add.w	ip, ip, #8
 8027f9a:	f1be 0e01 	subs.w	lr, lr, #1
 8027f9e:	ee07 5a90 	vmov	s15, r5
 8027fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027fa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8027faa:	ed43 7a08 	vstr	s15, [r3, #-32]	@ 0xffffffe0
 8027fae:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 8027fb2:	ee07 5a90 	vmov	s15, r5
 8027fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027fba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8027fbe:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
 8027fc2:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 8027fc6:	ee07 5a90 	vmov	s15, r5
 8027fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027fce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8027fd2:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 8027fd6:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 8027fda:	ee07 5a90 	vmov	s15, r5
 8027fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8027fe6:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8027fea:	d1d1      	bne.n	8027f90 <st_int16_to_f32+0x14>
 8027fec:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8027ff0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8027ff4:	f012 0203 	ands.w	r2, r2, #3
 8027ff8:	d023      	beq.n	8028042 <st_int16_to_f32+0xc6>
 8027ffa:	f9b0 3000 	ldrsh.w	r3, [r0]
 8027ffe:	3a01      	subs	r2, #1
 8028000:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8028044 <st_int16_to_f32+0xc8>
 8028004:	ee07 3a90 	vmov	s15, r3
 8028008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802800c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8028010:	edc1 7a00 	vstr	s15, [r1]
 8028014:	d015      	beq.n	8028042 <st_int16_to_f32+0xc6>
 8028016:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802801a:	2a01      	cmp	r2, #1
 802801c:	ee07 3a90 	vmov	s15, r3
 8028020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8028028:	edc1 7a01 	vstr	s15, [r1, #4]
 802802c:	d009      	beq.n	8028042 <st_int16_to_f32+0xc6>
 802802e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8028032:	ee07 3a90 	vmov	s15, r3
 8028036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802803a:	ee67 7a87 	vmul.f32	s15, s15, s14
 802803e:	edc1 7a02 	vstr	s15, [r1, #8]
 8028042:	bd30      	pop	{r4, r5, pc}
 8028044:	38000000 	.word	0x38000000

08028048 <st_sssa8_ch_convolve_rank1upd>:
 8028048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802804c:	b085      	sub	sp, #20
 802804e:	f8bd 4038 	ldrh.w	r4, [sp, #56]	@ 0x38
 8028052:	f99d b040 	ldrsb.w	fp, [sp, #64]	@ 0x40
 8028056:	fb13 f304 	smulbb	r3, r3, r4
 802805a:	460c      	mov	r4, r1
 802805c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802805e:	fb13 f500 	smulbb	r5, r3, r0
 8028062:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8028064:	2a00      	cmp	r2, #0
 8028066:	d070      	beq.n	802814a <st_sssa8_ch_convolve_rank1upd+0x102>
 8028068:	b2ad      	uxth	r5, r5
 802806a:	f1a1 0904 	sub.w	r9, r1, #4
 802806e:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 8028072:	08af      	lsrs	r7, r5, #2
 8028074:	f005 0503 	and.w	r5, r5, #3
 8028078:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
 802807c:	1e69      	subs	r1, r5, #1
 802807e:	f1a7 0381 	sub.w	r3, r7, #129	@ 0x81
 8028082:	f1a7 0280 	sub.w	r2, r7, #128	@ 0x80
 8028086:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 802808a:	b289      	uxth	r1, r1
 802808c:	9100      	str	r1, [sp, #0]
 802808e:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 8028092:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 8028096:	b292      	uxth	r2, r2
 8028098:	9202      	str	r2, [sp, #8]
 802809a:	025a      	lsls	r2, r3, #9
 802809c:	3301      	adds	r3, #1
 802809e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80280a2:	025b      	lsls	r3, r3, #9
 80280a4:	9203      	str	r2, [sp, #12]
 80280a6:	9301      	str	r3, [sp, #4]
 80280a8:	2f80      	cmp	r7, #128	@ 0x80
 80280aa:	d953      	bls.n	8028154 <st_sssa8_ch_convolve_rank1upd+0x10c>
 80280ac:	9b03      	ldr	r3, [sp, #12]
 80280ae:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 80280b2:	2600      	movs	r6, #0
 80280b4:	eb04 0c03 	add.w	ip, r4, r3
 80280b8:	f5a0 7100 	sub.w	r1, r0, #512	@ 0x200
 80280bc:	2200      	movs	r2, #0
 80280be:	f851 3b04 	ldr.w	r3, [r1], #4
 80280c2:	fa2f fe83 	sxtb16	lr, r3
 80280c6:	4281      	cmp	r1, r0
 80280c8:	ea4f 2333 	mov.w	r3, r3, ror #8
 80280cc:	fa92 f21e 	qadd16	r2, r2, lr
 80280d0:	fa2f f383 	sxtb16	r3, r3
 80280d4:	fa92 f213 	qadd16	r2, r2, r3
 80280d8:	d1f1      	bne.n	80280be <st_sssa8_ch_convolve_rank1upd+0x76>
 80280da:	f501 7000 	add.w	r0, r1, #512	@ 0x200
 80280de:	b213      	sxth	r3, r2
 80280e0:	4560      	cmp	r0, ip
 80280e2:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80280e6:	441e      	add	r6, r3
 80280e8:	d1e6      	bne.n	80280b8 <st_sssa8_ch_convolve_rank1upd+0x70>
 80280ea:	9b01      	ldr	r3, [sp, #4]
 80280ec:	18e1      	adds	r1, r4, r3
 80280ee:	9c02      	ldr	r4, [sp, #8]
 80280f0:	b374      	cbz	r4, 8028150 <st_sssa8_ch_convolve_rank1upd+0x108>
 80280f2:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80280f6:	2200      	movs	r2, #0
 80280f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80280fc:	fa2f f083 	sxtb16	r0, r3
 8028100:	428c      	cmp	r4, r1
 8028102:	ea4f 2333 	mov.w	r3, r3, ror #8
 8028106:	fa92 f210 	qadd16	r2, r2, r0
 802810a:	fa2f f383 	sxtb16	r3, r3
 802810e:	fa92 f213 	qadd16	r2, r2, r3
 8028112:	d1f1      	bne.n	80280f8 <st_sssa8_ch_convolve_rank1upd+0xb0>
 8028114:	b213      	sxth	r3, r2
 8028116:	eb03 4322 	add.w	r3, r3, r2, asr #16
 802811a:	441e      	add	r6, r3
 802811c:	b16d      	cbz	r5, 802813a <st_sssa8_ch_convolve_rank1upd+0xf2>
 802811e:	f994 3000 	ldrsb.w	r3, [r4]
 8028122:	441e      	add	r6, r3
 8028124:	9b00      	ldr	r3, [sp, #0]
 8028126:	b13b      	cbz	r3, 8028138 <st_sssa8_ch_convolve_rank1upd+0xf0>
 8028128:	f994 3001 	ldrsb.w	r3, [r4, #1]
 802812c:	2d02      	cmp	r5, #2
 802812e:	441e      	add	r6, r3
 8028130:	d002      	beq.n	8028138 <st_sssa8_ch_convolve_rank1upd+0xf0>
 8028132:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8028136:	441e      	add	r6, r3
 8028138:	442c      	add	r4, r5
 802813a:	f859 3f04 	ldr.w	r3, [r9, #4]!
 802813e:	fb06 331b 	mls	r3, r6, fp, r3
 8028142:	f84a 3b04 	str.w	r3, [sl], #4
 8028146:	45c2      	cmp	sl, r8
 8028148:	d1ae      	bne.n	80280a8 <st_sssa8_ch_convolve_rank1upd+0x60>
 802814a:	b005      	add	sp, #20
 802814c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028150:	460c      	mov	r4, r1
 8028152:	e7e3      	b.n	802811c <st_sssa8_ch_convolve_rank1upd+0xd4>
 8028154:	4621      	mov	r1, r4
 8028156:	2600      	movs	r6, #0
 8028158:	463c      	mov	r4, r7
 802815a:	e7c9      	b.n	80280f0 <st_sssa8_ch_convolve_rank1upd+0xa8>

0802815c <st_sssa8_convolve_rank1upd>:
 802815c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028160:	b085      	sub	sp, #20
 8028162:	f8bd 4038 	ldrh.w	r4, [sp, #56]	@ 0x38
 8028166:	f99d b040 	ldrsb.w	fp, [sp, #64]	@ 0x40
 802816a:	fb13 f304 	smulbb	r3, r3, r4
 802816e:	fb13 f500 	smulbb	r5, r3, r0
 8028172:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8028174:	2a00      	cmp	r2, #0
 8028176:	d073      	beq.n	8028260 <st_sssa8_convolve_rank1upd+0x104>
 8028178:	b2ad      	uxth	r5, r5
 802817a:	460c      	mov	r4, r1
 802817c:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
 8028180:	ea4f 0995 	mov.w	r9, r5, lsr #2
 8028184:	eb03 0a85 	add.w	sl, r3, r5, lsl #2
 8028188:	f005 0503 	and.w	r5, r5, #3
 802818c:	f1a9 0381 	sub.w	r3, r9, #129	@ 0x81
 8028190:	eb08 0782 	add.w	r7, r8, r2, lsl #2
 8028194:	1e69      	subs	r1, r5, #1
 8028196:	f1a9 0280 	sub.w	r2, r9, #128	@ 0x80
 802819a:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 802819e:	b289      	uxth	r1, r1
 80281a0:	9100      	str	r1, [sp, #0]
 80281a2:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 80281a6:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 80281aa:	b292      	uxth	r2, r2
 80281ac:	9202      	str	r2, [sp, #8]
 80281ae:	025a      	lsls	r2, r3, #9
 80281b0:	3301      	adds	r3, #1
 80281b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80281b6:	025b      	lsls	r3, r3, #9
 80281b8:	9203      	str	r2, [sp, #12]
 80281ba:	9301      	str	r3, [sp, #4]
 80281bc:	f1b9 0f80 	cmp.w	r9, #128	@ 0x80
 80281c0:	d953      	bls.n	802826a <st_sssa8_convolve_rank1upd+0x10e>
 80281c2:	9b03      	ldr	r3, [sp, #12]
 80281c4:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 80281c8:	2600      	movs	r6, #0
 80281ca:	eb04 0c03 	add.w	ip, r4, r3
 80281ce:	f5a0 7100 	sub.w	r1, r0, #512	@ 0x200
 80281d2:	2200      	movs	r2, #0
 80281d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80281d8:	fa2f fe83 	sxtb16	lr, r3
 80281dc:	4281      	cmp	r1, r0
 80281de:	ea4f 2333 	mov.w	r3, r3, ror #8
 80281e2:	fa92 f21e 	qadd16	r2, r2, lr
 80281e6:	fa2f f383 	sxtb16	r3, r3
 80281ea:	fa92 f213 	qadd16	r2, r2, r3
 80281ee:	d1f1      	bne.n	80281d4 <st_sssa8_convolve_rank1upd+0x78>
 80281f0:	f501 7000 	add.w	r0, r1, #512	@ 0x200
 80281f4:	b213      	sxth	r3, r2
 80281f6:	4560      	cmp	r0, ip
 80281f8:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80281fc:	441e      	add	r6, r3
 80281fe:	d1e6      	bne.n	80281ce <st_sssa8_convolve_rank1upd+0x72>
 8028200:	9b01      	ldr	r3, [sp, #4]
 8028202:	18e1      	adds	r1, r4, r3
 8028204:	9c02      	ldr	r4, [sp, #8]
 8028206:	b374      	cbz	r4, 8028266 <st_sssa8_convolve_rank1upd+0x10a>
 8028208:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 802820c:	2200      	movs	r2, #0
 802820e:	f851 3b04 	ldr.w	r3, [r1], #4
 8028212:	fa2f f083 	sxtb16	r0, r3
 8028216:	428c      	cmp	r4, r1
 8028218:	ea4f 2333 	mov.w	r3, r3, ror #8
 802821c:	fa92 f210 	qadd16	r2, r2, r0
 8028220:	fa2f f383 	sxtb16	r3, r3
 8028224:	fa92 f213 	qadd16	r2, r2, r3
 8028228:	d1f1      	bne.n	802820e <st_sssa8_convolve_rank1upd+0xb2>
 802822a:	b213      	sxth	r3, r2
 802822c:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8028230:	441e      	add	r6, r3
 8028232:	b16d      	cbz	r5, 8028250 <st_sssa8_convolve_rank1upd+0xf4>
 8028234:	f994 3000 	ldrsb.w	r3, [r4]
 8028238:	441e      	add	r6, r3
 802823a:	9b00      	ldr	r3, [sp, #0]
 802823c:	b13b      	cbz	r3, 802824e <st_sssa8_convolve_rank1upd+0xf2>
 802823e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8028242:	2d02      	cmp	r5, #2
 8028244:	441e      	add	r6, r3
 8028246:	d002      	beq.n	802824e <st_sssa8_convolve_rank1upd+0xf2>
 8028248:	f994 3002 	ldrsb.w	r3, [r4, #2]
 802824c:	441e      	add	r6, r3
 802824e:	442c      	add	r4, r5
 8028250:	f858 3b04 	ldr.w	r3, [r8], #4
 8028254:	fb06 331b 	mls	r3, r6, fp, r3
 8028258:	45b8      	cmp	r8, r7
 802825a:	f84a 3b04 	str.w	r3, [sl], #4
 802825e:	d1ad      	bne.n	80281bc <st_sssa8_convolve_rank1upd+0x60>
 8028260:	b005      	add	sp, #20
 8028262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028266:	460c      	mov	r4, r1
 8028268:	e7e3      	b.n	8028232 <st_sssa8_convolve_rank1upd+0xd6>
 802826a:	4621      	mov	r1, r4
 802826c:	2600      	movs	r6, #0
 802826e:	464c      	mov	r4, r9
 8028270:	e7c9      	b.n	8028206 <st_sssa8_convolve_rank1upd+0xaa>
 8028272:	bf00      	nop

08028274 <st_sssa8_convolve>:
 8028274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028278:	ed2d 8b06 	vpush	{d8-d10}
 802827c:	b0cb      	sub	sp, #300	@ 0x12c
 802827e:	469a      	mov	sl, r3
 8028280:	4689      	mov	r9, r1
 8028282:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8028284:	900a      	str	r0, [sp, #40]	@ 0x28
 8028286:	9207      	str	r2, [sp, #28]
 8028288:	f8bd 0174 	ldrh.w	r0, [sp, #372]	@ 0x174
 802828c:	f8bd 2170 	ldrh.w	r2, [sp, #368]	@ 0x170
 8028290:	f9b3 1000 	ldrsh.w	r1, [r3]
 8028294:	fb12 f300 	smulbb	r3, r2, r0
 8028298:	901e      	str	r0, [sp, #120]	@ 0x78
 802829a:	f8bd 41a0 	ldrh.w	r4, [sp, #416]	@ 0x1a0
 802829e:	fb13 f30a 	smulbb	r3, r3, sl
 80282a2:	9214      	str	r2, [sp, #80]	@ 0x50
 80282a4:	940f      	str	r4, [sp, #60]	@ 0x3c
 80282a6:	1e4a      	subs	r2, r1, #1
 80282a8:	b298      	uxth	r0, r3
 80282aa:	9b63      	ldr	r3, [sp, #396]	@ 0x18c
 80282ac:	f8bd 41a4 	ldrh.w	r4, [sp, #420]	@ 0x1a4
 80282b0:	681b      	ldr	r3, [r3, #0]
 80282b2:	921c      	str	r2, [sp, #112]	@ 0x70
 80282b4:	b292      	uxth	r2, r2
 80282b6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80282b8:	f8bd 316c 	ldrh.w	r3, [sp, #364]	@ 0x16c
 80282bc:	2a14      	cmp	r2, #20
 80282be:	941d      	str	r4, [sp, #116]	@ 0x74
 80282c0:	ee09 3a10 	vmov	s18, r3
 80282c4:	f8bd 3178 	ldrh.w	r3, [sp, #376]	@ 0x178
 80282c8:	9c6a      	ldr	r4, [sp, #424]	@ 0x1a8
 80282ca:	9312      	str	r3, [sp, #72]	@ 0x48
 80282cc:	f8bd 317c 	ldrh.w	r3, [sp, #380]	@ 0x17c
 80282d0:	9015      	str	r0, [sp, #84]	@ 0x54
 80282d2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80282d6:	931f      	str	r3, [sp, #124]	@ 0x7c
 80282d8:	f8bd 3180 	ldrh.w	r3, [sp, #384]	@ 0x180
 80282dc:	ee0a 0a10 	vmov	s20, r0
 80282e0:	f99d 8194 	ldrsb.w	r8, [sp, #404]	@ 0x194
 80282e4:	930d      	str	r3, [sp, #52]	@ 0x34
 80282e6:	f8bd 3184 	ldrh.w	r3, [sp, #388]	@ 0x184
 80282ea:	9118      	str	r1, [sp, #96]	@ 0x60
 80282ec:	931b      	str	r3, [sp, #108]	@ 0x6c
 80282ee:	f99d 3198 	ldrsb.w	r3, [sp, #408]	@ 0x198
 80282f2:	f200 8164 	bhi.w	80285be <st_sssa8_convolve+0x34a>
 80282f6:	2201      	movs	r2, #1
 80282f8:	408b      	lsls	r3, r1
 80282fa:	408a      	lsls	r2, r1
 80282fc:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8028300:	9316      	str	r3, [sp, #88]	@ 0x58
 8028302:	9b07      	ldr	r3, [sp, #28]
 8028304:	a940      	add	r1, sp, #256	@ 0x100
 8028306:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8028308:	a836      	add	r0, sp, #216	@ 0xd8
 802830a:	932b      	str	r3, [sp, #172]	@ 0xac
 802830c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802830e:	fb0a f502 	mul.w	r5, sl, r2
 8028312:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 8028314:	9330      	str	r3, [sp, #192]	@ 0xc0
 8028316:	ee08 5a90 	vmov	s17, r5
 802831a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802831c:	9234      	str	r2, [sp, #208]	@ 0xd0
 802831e:	aa2a      	add	r2, sp, #168	@ 0xa8
 8028320:	932f      	str	r3, [sp, #188]	@ 0xbc
 8028322:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028324:	f8cd 90b0 	str.w	r9, [sp, #176]	@ 0xb0
 8028328:	9342      	str	r3, [sp, #264]	@ 0x108
 802832a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802832c:	9433      	str	r4, [sp, #204]	@ 0xcc
 802832e:	9343      	str	r3, [sp, #268]	@ 0x10c
 8028330:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8028332:	9344      	str	r3, [sp, #272]	@ 0x110
 8028334:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028336:	9345      	str	r3, [sp, #276]	@ 0x114
 8028338:	ab32      	add	r3, sp, #200	@ 0xc8
 802833a:	9300      	str	r3, [sp, #0]
 802833c:	ab2e      	add	r3, sp, #184	@ 0xb8
 802833e:	f7ff fb01 	bl	8027944 <ai_padding_opt_init>
 8028342:	ee19 2a10 	vmov	r2, s18
 8028346:	996a      	ldr	r1, [sp, #424]	@ 0x1a8
 8028348:	fb05 2304 	mla	r3, r5, r4, r2
 802834c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8028350:	ee09 3a90 	vmov	s19, r3
 8028354:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8028356:	fb02 f303 	mul.w	r3, r2, r3
 802835a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 802835e:	f340 82e1 	ble.w	8028924 <st_sssa8_convolve+0x6b0>
 8028362:	2300      	movs	r3, #0
 8028364:	9325      	str	r3, [sp, #148]	@ 0x94
 8028366:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8028368:	ee19 1a10 	vmov	r1, s18
 802836c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802836e:	fb02 f303 	mul.w	r3, r2, r3
 8028372:	9a67      	ldr	r2, [sp, #412]	@ 0x19c
 8028374:	fb01 2303 	mla	r3, r1, r3, r2
 8028378:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802837a:	4299      	cmp	r1, r3
 802837c:	f080 8121 	bcs.w	80285c2 <st_sssa8_convolve+0x34e>
 8028380:	9b07      	ldr	r3, [sp, #28]
 8028382:	fb03 f209 	mul.w	r2, r3, r9
 8028386:	9b67      	ldr	r3, [sp, #412]	@ 0x19c
 8028388:	fb0a 1202 	mla	r2, sl, r2, r1
 802838c:	4293      	cmp	r3, r2
 802838e:	bf2c      	ite	cs
 8028390:	2200      	movcs	r2, #0
 8028392:	2201      	movcc	r2, #1
 8028394:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8028396:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 802839a:	fbb3 f3f1 	udiv	r3, r3, r1
 802839e:	ee19 1a10 	vmov	r1, s18
 80283a2:	f023 0301 	bic.w	r3, r3, #1
 80283a6:	428b      	cmp	r3, r1
 80283a8:	bf28      	it	cs
 80283aa:	460b      	movcs	r3, r1
 80283ac:	2b01      	cmp	r3, #1
 80283ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80283b0:	f240 8110 	bls.w	80285d4 <st_sssa8_convolve+0x360>
 80283b4:	4618      	mov	r0, r3
 80283b6:	ee19 3a10 	vmov	r3, s18
 80283ba:	fbb1 f1f0 	udiv	r1, r1, r0
 80283be:	fb00 3311 	mls	r3, r0, r1, r3
 80283c2:	b289      	uxth	r1, r1
 80283c4:	b29b      	uxth	r3, r3
 80283c6:	9120      	str	r1, [sp, #128]	@ 0x80
 80283c8:	2b00      	cmp	r3, #0
 80283ca:	f000 80fc 	beq.w	80285c6 <st_sssa8_convolve+0x352>
 80283ce:	2a00      	cmp	r2, #0
 80283d0:	f040 8335 	bne.w	8028a3e <st_sssa8_convolve+0x7ca>
 80283d4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80283d6:	fa0f f888 	sxth.w	r8, r8
 80283da:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80283dc:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 80283e0:	fb03 f30a 	mul.w	r3, r3, sl
 80283e4:	ee0a 8a90 	vmov	s21, r8
 80283e8:	ed8d 9a22 	vstr	s18, [sp, #136]	@ 0x88
 80283ec:	46d0      	mov	r8, sl
 80283ee:	fb02 f303 	mul.w	r3, r2, r3
 80283f2:	9a6a      	ldr	r2, [sp, #424]	@ 0x1a8
 80283f4:	46da      	mov	sl, fp
 80283f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80283fa:	9311      	str	r3, [sp, #68]	@ 0x44
 80283fc:	ee18 3a90 	vmov	r3, s17
 8028400:	005b      	lsls	r3, r3, #1
 8028402:	9313      	str	r3, [sp, #76]	@ 0x4c
 8028404:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8028406:	2b00      	cmp	r3, #0
 8028408:	f000 80d1 	beq.w	80285ae <st_sssa8_convolve+0x33a>
 802840c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802840e:	2b00      	cmp	r3, #0
 8028410:	f000 80a8 	beq.w	8028564 <st_sssa8_convolve+0x2f0>
 8028414:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028416:	2400      	movs	r4, #0
 8028418:	9f6a      	ldr	r7, [sp, #424]	@ 0x1a8
 802841a:	425b      	negs	r3, r3
 802841c:	4625      	mov	r5, r4
 802841e:	46bb      	mov	fp, r7
 8028420:	ee1a 7a90 	vmov	r7, s21
 8028424:	b29b      	uxth	r3, r3
 8028426:	931c      	str	r3, [sp, #112]	@ 0x70
 8028428:	9b67      	ldr	r3, [sp, #412]	@ 0x19c
 802842a:	9319      	str	r3, [sp, #100]	@ 0x64
 802842c:	a836      	add	r0, sp, #216	@ 0xd8
 802842e:	f7ff fae3 	bl	80279f8 <ai_padding_opt_phase1>
 8028432:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028434:	2b00      	cmp	r3, #0
 8028436:	f000 82fc 	beq.w	8028a32 <st_sssa8_convolve+0x7be>
 802843a:	b2a3      	uxth	r3, r4
 802843c:	2000      	movs	r0, #0
 802843e:	9321      	str	r3, [sp, #132]	@ 0x84
 8028440:	4601      	mov	r1, r0
 8028442:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	@ 0x78
 8028446:	1a9a      	subs	r2, r3, r2
 8028448:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802844a:	fb03 2305 	mla	r3, r3, r5, r2
 802844e:	9309      	str	r3, [sp, #36]	@ 0x24
 8028450:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8028452:	425a      	negs	r2, r3
 8028454:	b293      	uxth	r3, r2
 8028456:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028458:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	@ 0x70
 802845c:	9310      	str	r3, [sp, #64]	@ 0x40
 802845e:	465b      	mov	r3, fp
 8028460:	46d3      	mov	fp, sl
 8028462:	469a      	mov	sl, r3
 8028464:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
 8028466:	2a00      	cmp	r2, #0
 8028468:	f000 8270 	beq.w	802894c <st_sssa8_convolve+0x6d8>
 802846c:	3a01      	subs	r2, #1
 802846e:	9236      	str	r2, [sp, #216]	@ 0xd8
 8028470:	2201      	movs	r2, #1
 8028472:	f8ad 20fe 	strh.w	r2, [sp, #254]	@ 0xfe
 8028476:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028478:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802847a:	4293      	cmp	r3, r2
 802847c:	f280 8274 	bge.w	8028968 <st_sssa8_convolve+0x6f4>
 8028480:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8028482:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8028484:	fb01 3102 	mla	r1, r1, r2, r3
 8028488:	b283      	uxth	r3, r0
 802848a:	930e      	str	r3, [sp, #56]	@ 0x38
 802848c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802848e:	1acd      	subs	r5, r1, r3
 8028490:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8028494:	930c      	str	r3, [sp, #48]	@ 0x30
 8028496:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028498:	461a      	mov	r2, r3
 802849a:	9306      	str	r3, [sp, #24]
 802849c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802849e:	42ab      	cmp	r3, r5
 80284a0:	da20      	bge.n	80284e4 <st_sssa8_convolve+0x270>
 80284a2:	9907      	ldr	r1, [sp, #28]
 80284a4:	461c      	mov	r4, r3
 80284a6:	469e      	mov	lr, r3
 80284a8:	4291      	cmp	r1, r2
 80284aa:	fb09 f202 	mul.w	r2, r9, r2
 80284ae:	bfcc      	ite	gt
 80284b0:	2600      	movgt	r6, #0
 80284b2:	2601      	movle	r6, #1
 80284b4:	9208      	str	r2, [sp, #32]
 80284b6:	9a06      	ldr	r2, [sp, #24]
 80284b8:	ea46 76d2 	orr.w	r6, r6, r2, lsr #31
 80284bc:	0fe3      	lsrs	r3, r4, #31
 80284be:	4642      	mov	r2, r8
 80284c0:	4651      	mov	r1, sl
 80284c2:	4638      	mov	r0, r7
 80284c4:	45f1      	cmp	r9, lr
 80284c6:	bfd8      	it	le
 80284c8:	f043 0301 	orrle.w	r3, r3, #1
 80284cc:	b913      	cbnz	r3, 80284d4 <st_sssa8_convolve+0x260>
 80284ce:	2e00      	cmp	r6, #0
 80284d0:	f000 8233 	beq.w	802893a <st_sssa8_convolve+0x6c6>
 80284d4:	f7ff fba2 	bl	8027c1c <st_int16_fill>
 80284d8:	3401      	adds	r4, #1
 80284da:	44da      	add	sl, fp
 80284dc:	b224      	sxth	r4, r4
 80284de:	42ac      	cmp	r4, r5
 80284e0:	46a6      	mov	lr, r4
 80284e2:	dbeb      	blt.n	80284bc <st_sssa8_convolve+0x248>
 80284e4:	9b06      	ldr	r3, [sp, #24]
 80284e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80284e8:	3301      	adds	r3, #1
 80284ea:	b21b      	sxth	r3, r3
 80284ec:	428b      	cmp	r3, r1
 80284ee:	461a      	mov	r2, r3
 80284f0:	9306      	str	r3, [sp, #24]
 80284f2:	dbd3      	blt.n	802849c <st_sssa8_convolve+0x228>
 80284f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80284f6:	4553      	cmp	r3, sl
 80284f8:	f000 823c 	beq.w	8028974 <st_sssa8_convolve+0x700>
 80284fc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80284fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028500:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8028502:	441a      	add	r2, r3
 8028504:	3001      	adds	r0, #1
 8028506:	b293      	uxth	r3, r2
 8028508:	b200      	sxth	r0, r0
 802850a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802850c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802850e:	4601      	mov	r1, r0
 8028510:	4283      	cmp	r3, r0
 8028512:	dca7      	bgt.n	8028464 <st_sssa8_convolve+0x1f0>
 8028514:	4653      	mov	r3, sl
 8028516:	46da      	mov	sl, fp
 8028518:	469b      	mov	fp, r3
 802851a:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 802851c:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	@ 0x6c
 8028520:	3401      	adds	r4, #1
 8028522:	441a      	add	r2, r3
 8028524:	b224      	sxth	r4, r4
 8028526:	b293      	uxth	r3, r2
 8028528:	4625      	mov	r5, r4
 802852a:	931c      	str	r3, [sp, #112]	@ 0x70
 802852c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802852e:	42a3      	cmp	r3, r4
 8028530:	f73f af7c 	bgt.w	802842c <st_sssa8_convolve+0x1b8>
 8028534:	9b6a      	ldr	r3, [sp, #424]	@ 0x1a8
 8028536:	455b      	cmp	r3, fp
 8028538:	d014      	beq.n	8028564 <st_sssa8_convolve+0x2f0>
 802853a:	4619      	mov	r1, r3
 802853c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802853e:	ee1a 2a10 	vmov	r2, s20
 8028542:	ee19 0a90 	vmov	r0, s19
 8028546:	9305      	str	r3, [sp, #20]
 8028548:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802854a:	9304      	str	r3, [sp, #16]
 802854c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802854e:	9303      	str	r3, [sp, #12]
 8028550:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028552:	9302      	str	r3, [sp, #8]
 8028554:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8028556:	9301      	str	r3, [sp, #4]
 8028558:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802855a:	9300      	str	r3, [sp, #0]
 802855c:	ee19 3a10 	vmov	r3, s18
 8028560:	f003 f970 	bl	802b844 <st_sssa8_nn_mat_mult_kernel_single_opt>
 8028564:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8028566:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8028568:	1a9b      	subs	r3, r3, r2
 802856a:	b299      	uxth	r1, r3
 802856c:	4613      	mov	r3, r2
 802856e:	428a      	cmp	r2, r1
 8028570:	9122      	str	r1, [sp, #136]	@ 0x88
 8028572:	bf28      	it	cs
 8028574:	460b      	movcs	r3, r1
 8028576:	b29b      	uxth	r3, r3
 8028578:	b16b      	cbz	r3, 8028596 <st_sssa8_convolve+0x322>
 802857a:	995a      	ldr	r1, [sp, #360]	@ 0x168
 802857c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802857e:	fb00 1102 	mla	r1, r0, r2, r1
 8028582:	915a      	str	r1, [sp, #360]	@ 0x168
 8028584:	ee1a 1a10 	vmov	r1, s20
 8028588:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802858c:	ee0a 1a10 	vmov	s20, r1
 8028590:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8028592:	4411      	add	r1, r2
 8028594:	9167      	str	r1, [sp, #412]	@ 0x19c
 8028596:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8028598:	1e4a      	subs	r2, r1, #1
 802859a:	b292      	uxth	r2, r2
 802859c:	2900      	cmp	r1, #0
 802859e:	f000 8128 	beq.w	80287f2 <st_sssa8_convolve+0x57e>
 80285a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80285a4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80285a6:	9220      	str	r2, [sp, #128]	@ 0x80
 80285a8:	2b00      	cmp	r3, #0
 80285aa:	f47f af2f 	bne.w	802840c <st_sssa8_convolve+0x198>
 80285ae:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80285b0:	ee19 1a90 	vmov	r1, s19
 80285b4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80285b6:	985a      	ldr	r0, [sp, #360]	@ 0x168
 80285b8:	f7ff f820 	bl	80275fc <st_int8_to16_dual>
 80285bc:	e726      	b.n	802840c <st_sssa8_convolve+0x198>
 80285be:	9316      	str	r3, [sp, #88]	@ 0x58
 80285c0:	e69f      	b.n	8028302 <st_sssa8_convolve+0x8e>
 80285c2:	2200      	movs	r2, #0
 80285c4:	e6e6      	b.n	8028394 <st_sssa8_convolve+0x120>
 80285c6:	2a00      	cmp	r2, #0
 80285c8:	f040 823d 	bne.w	8028a46 <st_sssa8_convolve+0x7d2>
 80285cc:	1e4b      	subs	r3, r1, #1
 80285ce:	b29b      	uxth	r3, r3
 80285d0:	9320      	str	r3, [sp, #128]	@ 0x80
 80285d2:	e6ff      	b.n	80283d4 <st_sssa8_convolve+0x160>
 80285d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80285d6:	2b00      	cmp	r3, #0
 80285d8:	f000 810b 	beq.w	80287f2 <st_sssa8_convolve+0x57e>
 80285dc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80285de:	fa0f f888 	sxth.w	r8, r8
 80285e2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80285e4:	2400      	movs	r4, #0
 80285e6:	fb03 f30a 	mul.w	r3, r3, sl
 80285ea:	4647      	mov	r7, r8
 80285ec:	4625      	mov	r5, r4
 80285ee:	46c8      	mov	r8, r9
 80285f0:	fb02 f303 	mul.w	r3, r2, r3
 80285f4:	9a6a      	ldr	r2, [sp, #424]	@ 0x1a8
 80285f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80285fa:	4691      	mov	r9, r2
 80285fc:	9310      	str	r3, [sp, #64]	@ 0x40
 80285fe:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028600:	425b      	negs	r3, r3
 8028602:	b29b      	uxth	r3, r3
 8028604:	9319      	str	r3, [sp, #100]	@ 0x64
 8028606:	ee18 3a90 	vmov	r3, s17
 802860a:	005b      	lsls	r3, r3, #1
 802860c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802860e:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8028612:	469b      	mov	fp, r3
 8028614:	a836      	add	r0, sp, #216	@ 0xd8
 8028616:	f7ff f9ef 	bl	80279f8 <ai_padding_opt_phase1>
 802861a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802861c:	2b00      	cmp	r3, #0
 802861e:	f000 817e 	beq.w	802891e <st_sssa8_convolve+0x6aa>
 8028622:	b2a3      	uxth	r3, r4
 8028624:	2000      	movs	r0, #0
 8028626:	931a      	str	r3, [sp, #104]	@ 0x68
 8028628:	4601      	mov	r1, r0
 802862a:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	@ 0x78
 802862e:	1a9a      	subs	r2, r3, r2
 8028630:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8028632:	fb05 2303 	mla	r3, r5, r3, r2
 8028636:	9309      	str	r3, [sp, #36]	@ 0x24
 8028638:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802863a:	425a      	negs	r2, r3
 802863c:	b293      	uxth	r3, r2
 802863e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028640:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8028644:	9311      	str	r3, [sp, #68]	@ 0x44
 8028646:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
 8028648:	2a00      	cmp	r2, #0
 802864a:	f000 80e1 	beq.w	8028810 <st_sssa8_convolve+0x59c>
 802864e:	3a01      	subs	r2, #1
 8028650:	9236      	str	r2, [sp, #216]	@ 0xd8
 8028652:	2201      	movs	r2, #1
 8028654:	f8ad 20fe 	strh.w	r2, [sp, #254]	@ 0xfe
 8028658:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802865a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802865c:	4293      	cmp	r3, r2
 802865e:	f280 80e5 	bge.w	802882c <st_sssa8_convolve+0x5b8>
 8028662:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8028664:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8028666:	fb01 3102 	mla	r1, r1, r2, r3
 802866a:	b283      	uxth	r3, r0
 802866c:	930e      	str	r3, [sp, #56]	@ 0x38
 802866e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8028670:	1acd      	subs	r5, r1, r3
 8028672:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8028676:	930c      	str	r3, [sp, #48]	@ 0x30
 8028678:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802867a:	461a      	mov	r2, r3
 802867c:	9306      	str	r3, [sp, #24]
 802867e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8028680:	42ab      	cmp	r3, r5
 8028682:	da20      	bge.n	80286c6 <st_sssa8_convolve+0x452>
 8028684:	9907      	ldr	r1, [sp, #28]
 8028686:	461c      	mov	r4, r3
 8028688:	469e      	mov	lr, r3
 802868a:	4291      	cmp	r1, r2
 802868c:	fb02 f208 	mul.w	r2, r2, r8
 8028690:	bfcc      	ite	gt
 8028692:	2600      	movgt	r6, #0
 8028694:	2601      	movle	r6, #1
 8028696:	9208      	str	r2, [sp, #32]
 8028698:	9a06      	ldr	r2, [sp, #24]
 802869a:	ea46 76d2 	orr.w	r6, r6, r2, lsr #31
 802869e:	0fe3      	lsrs	r3, r4, #31
 80286a0:	4652      	mov	r2, sl
 80286a2:	4649      	mov	r1, r9
 80286a4:	4638      	mov	r0, r7
 80286a6:	45f0      	cmp	r8, lr
 80286a8:	bfd8      	it	le
 80286aa:	f043 0301 	orrle.w	r3, r3, #1
 80286ae:	b913      	cbnz	r3, 80286b6 <st_sssa8_convolve+0x442>
 80286b0:	2e00      	cmp	r6, #0
 80286b2:	f000 80a4 	beq.w	80287fe <st_sssa8_convolve+0x58a>
 80286b6:	f7ff fab1 	bl	8027c1c <st_int16_fill>
 80286ba:	3401      	adds	r4, #1
 80286bc:	44d9      	add	r9, fp
 80286be:	b224      	sxth	r4, r4
 80286c0:	42ac      	cmp	r4, r5
 80286c2:	46a6      	mov	lr, r4
 80286c4:	dbeb      	blt.n	802869e <st_sssa8_convolve+0x42a>
 80286c6:	9b06      	ldr	r3, [sp, #24]
 80286c8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80286ca:	3301      	adds	r3, #1
 80286cc:	b21b      	sxth	r3, r3
 80286ce:	428b      	cmp	r3, r1
 80286d0:	461a      	mov	r2, r3
 80286d2:	9306      	str	r3, [sp, #24]
 80286d4:	dbd3      	blt.n	802867e <st_sssa8_convolve+0x40a>
 80286d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80286d8:	454b      	cmp	r3, r9
 80286da:	f000 80ad 	beq.w	8028838 <st_sssa8_convolve+0x5c4>
 80286de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80286e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80286e2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80286e4:	441a      	add	r2, r3
 80286e6:	3001      	adds	r0, #1
 80286e8:	b293      	uxth	r3, r2
 80286ea:	b200      	sxth	r0, r0
 80286ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80286ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80286f0:	4601      	mov	r1, r0
 80286f2:	4283      	cmp	r3, r0
 80286f4:	dca7      	bgt.n	8028646 <st_sssa8_convolve+0x3d2>
 80286f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80286f8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80286fa:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80286fc:	441a      	add	r2, r3
 80286fe:	3401      	adds	r4, #1
 8028700:	b293      	uxth	r3, r2
 8028702:	b224      	sxth	r4, r4
 8028704:	9319      	str	r3, [sp, #100]	@ 0x64
 8028706:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028708:	4625      	mov	r5, r4
 802870a:	42a3      	cmp	r3, r4
 802870c:	dc82      	bgt.n	8028614 <st_sssa8_convolve+0x3a0>
 802870e:	9b6a      	ldr	r3, [sp, #424]	@ 0x1a8
 8028710:	454b      	cmp	r3, r9
 8028712:	d06e      	beq.n	80287f2 <st_sssa8_convolve+0x57e>
 8028714:	ee19 3a10 	vmov	r3, s18
 8028718:	2b00      	cmp	r3, #0
 802871a:	d06a      	beq.n	80287f2 <st_sssa8_convolve+0x57e>
 802871c:	9a67      	ldr	r2, [sp, #412]	@ 0x19c
 802871e:	3301      	adds	r3, #1
 8028720:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8028722:	ee1a ea10 	vmov	lr, s20
 8028726:	eb02 0903 	add.w	r9, r2, r3
 802872a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802872c:	1c57      	adds	r7, r2, #1
 802872e:	2201      	movs	r2, #1
 8028730:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8028734:	f003 0103 	and.w	r1, r3, #3
 8028738:	1e83      	subs	r3, r0, #2
 802873a:	f1c0 0b01 	rsb	fp, r0, #1
 802873e:	985a      	ldr	r0, [sp, #360]	@ 0x168
 8028740:	fa02 fa03 	lsl.w	sl, r2, r3
 8028744:	f108 33ff 	add.w	r3, r8, #4294967295
 8028748:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802874c:	b29b      	uxth	r3, r3
 802874e:	4413      	add	r3, r2
 8028750:	1e4a      	subs	r2, r1, #1
 8028752:	b292      	uxth	r2, r2
 8028754:	9208      	str	r2, [sp, #32]
 8028756:	009a      	lsls	r2, r3, #2
 8028758:	9207      	str	r2, [sp, #28]
 802875a:	9a6a      	ldr	r2, [sp, #424]	@ 0x1a8
 802875c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8028760:	9306      	str	r3, [sp, #24]
 8028762:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028764:	f85e 3b04 	ldr.w	r3, [lr], #4
 8028768:	2a00      	cmp	r2, #0
 802876a:	f000 8165 	beq.w	8028a38 <st_sssa8_convolve+0x7c4>
 802876e:	9a07      	ldr	r2, [sp, #28]
 8028770:	9c6a      	ldr	r4, [sp, #424]	@ 0x1a8
 8028772:	1885      	adds	r5, r0, r2
 8028774:	f850 2b04 	ldr.w	r2, [r0], #4
 8028778:	fa2f f692 	sxtb16	r6, r2, ror #8
 802877c:	fa2f f282 	sxtb16	r2, r2
 8028780:	f8d4 8000 	ldr.w	r8, [r4]
 8028784:	eac6 4c22 	pkhtb	ip, r6, r2, asr #16
 8028788:	eac2 4206 	pkhbt	r2, r2, r6, lsl #16
 802878c:	fb22 3308 	smlad	r3, r2, r8, r3
 8028790:	6862      	ldr	r2, [r4, #4]
 8028792:	3408      	adds	r4, #8
 8028794:	fb2c 3302 	smlad	r3, ip, r2, r3
 8028798:	42a8      	cmp	r0, r5
 802879a:	d1eb      	bne.n	8028774 <st_sssa8_convolve+0x500>
 802879c:	9a06      	ldr	r2, [sp, #24]
 802879e:	2900      	cmp	r1, #0
 80287a0:	f000 80ae 	beq.w	8028900 <st_sssa8_convolve+0x68c>
 80287a4:	f995 0000 	ldrsb.w	r0, [r5]
 80287a8:	8814      	ldrh	r4, [r2, #0]
 80287aa:	fb14 3300 	smlabb	r3, r4, r0, r3
 80287ae:	9808      	ldr	r0, [sp, #32]
 80287b0:	b158      	cbz	r0, 80287ca <st_sssa8_convolve+0x556>
 80287b2:	f995 0001 	ldrsb.w	r0, [r5, #1]
 80287b6:	2902      	cmp	r1, #2
 80287b8:	8854      	ldrh	r4, [r2, #2]
 80287ba:	fb14 3300 	smlabb	r3, r4, r0, r3
 80287be:	d004      	beq.n	80287ca <st_sssa8_convolve+0x556>
 80287c0:	8890      	ldrh	r0, [r2, #4]
 80287c2:	f995 2002 	ldrsb.w	r2, [r5, #2]
 80287c6:	fb10 3302 	smlabb	r3, r0, r2, r3
 80287ca:	1868      	adds	r0, r5, r1
 80287cc:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80287ce:	2a15      	cmp	r2, #21
 80287d0:	f340 808a 	ble.w	80288e8 <st_sssa8_convolve+0x674>
 80287d4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80287d6:	fb53 a302 	smmla	r3, r3, r2, sl
 80287da:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80287dc:	4113      	asrs	r3, r2
 80287de:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80287e0:	4413      	add	r3, r2
 80287e2:	f303 0307 	ssat	r3, #8, r3
 80287e6:	b25b      	sxtb	r3, r3
 80287e8:	f807 3c01 	strb.w	r3, [r7, #-1]
 80287ec:	3701      	adds	r7, #1
 80287ee:	45b9      	cmp	r9, r7
 80287f0:	d1b7      	bne.n	8028762 <st_sssa8_convolve+0x4ee>
 80287f2:	2000      	movs	r0, #0
 80287f4:	b04b      	add	sp, #300	@ 0x12c
 80287f6:	ecbd 8b06 	vpop	{d8-d10}
 80287fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80287fe:	9b08      	ldr	r3, [sp, #32]
 8028800:	eb03 000e 	add.w	r0, r3, lr
 8028804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028806:	fb0a 3000 	mla	r0, sl, r0, r3
 802880a:	f7fe fe51 	bl	80274b0 <st_int8_to16_no_shift>
 802880e:	e754      	b.n	80286ba <st_sssa8_convolve+0x446>
 8028810:	9a37      	ldr	r2, [sp, #220]	@ 0xdc
 8028812:	2a00      	cmp	r2, #0
 8028814:	d133      	bne.n	802887e <st_sssa8_convolve+0x60a>
 8028816:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8028818:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802881a:	3a01      	subs	r2, #1
 802881c:	9238      	str	r2, [sp, #224]	@ 0xe0
 802881e:	2201      	movs	r2, #1
 8028820:	f8ad 20fe 	strh.w	r2, [sp, #254]	@ 0xfe
 8028824:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028826:	4293      	cmp	r3, r2
 8028828:	f6ff af1b 	blt.w	8028662 <st_sssa8_convolve+0x3ee>
 802882c:	b283      	uxth	r3, r0
 802882e:	930e      	str	r3, [sp, #56]	@ 0x38
 8028830:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028832:	454b      	cmp	r3, r9
 8028834:	f47f af53 	bne.w	80286de <st_sssa8_convolve+0x46a>
 8028838:	9b67      	ldr	r3, [sp, #412]	@ 0x19c
 802883a:	ee1a 2a10 	vmov	r2, s20
 802883e:	996a      	ldr	r1, [sp, #424]	@ 0x1a8
 8028840:	9304      	str	r3, [sp, #16]
 8028842:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8028844:	985a      	ldr	r0, [sp, #360]	@ 0x168
 8028846:	9303      	str	r3, [sp, #12]
 8028848:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802884a:	9302      	str	r3, [sp, #8]
 802884c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802884e:	9301      	str	r3, [sp, #4]
 8028850:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8028852:	9300      	str	r3, [sp, #0]
 8028854:	ee19 3a10 	vmov	r3, s18
 8028858:	f002 fa06 	bl	802ac68 <st_sssa8_nn_mat_mult_kernel>
 802885c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802885e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8028860:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028862:	440b      	add	r3, r1
 8028864:	9067      	str	r0, [sp, #412]	@ 0x19c
 8028866:	3201      	adds	r2, #1
 8028868:	f8dd 91a8 	ldr.w	r9, [sp, #424]	@ 0x1a8
 802886c:	b29b      	uxth	r3, r3
 802886e:	b210      	sxth	r0, r2
 8028870:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028872:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028874:	4601      	mov	r1, r0
 8028876:	4283      	cmp	r3, r0
 8028878:	f73f aee5 	bgt.w	8028646 <st_sssa8_convolve+0x3d2>
 802887c:	e73b      	b.n	80286f6 <st_sssa8_convolve+0x482>
 802887e:	3a01      	subs	r2, #1
 8028880:	9237      	str	r2, [sp, #220]	@ 0xdc
 8028882:	f8bd 20fc 	ldrh.w	r2, [sp, #252]	@ 0xfc
 8028886:	2a01      	cmp	r2, #1
 8028888:	f8ad 20fe 	strh.w	r2, [sp, #254]	@ 0xfe
 802888c:	f43f aee4 	beq.w	8028658 <st_sssa8_convolve+0x3e4>
 8028890:	b283      	uxth	r3, r0
 8028892:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028894:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8028896:	f9bd 402c 	ldrsh.w	r4, [sp, #44]	@ 0x2c
 802889a:	4288      	cmp	r0, r1
 802889c:	930e      	str	r3, [sp, #56]	@ 0x38
 802889e:	f6bf af1a 	bge.w	80286d6 <st_sssa8_convolve+0x462>
 80288a2:	ee08 7a10 	vmov	s16, r7
 80288a6:	f8cd b020 	str.w	fp, [sp, #32]
 80288aa:	464f      	mov	r7, r9
 80288ac:	46c3      	mov	fp, r8
 80288ae:	4605      	mov	r5, r0
 80288b0:	ee18 2a90 	vmov	r2, s17
 80288b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80288b6:	4688      	mov	r8, r1
 80288b8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80288bc:	3501      	adds	r5, #1
 80288be:	fb00 400b 	mla	r0, r0, fp, r4
 80288c2:	4639      	mov	r1, r7
 80288c4:	9206      	str	r2, [sp, #24]
 80288c6:	b22d      	sxth	r5, r5
 80288c8:	fb0a 9000 	mla	r0, sl, r0, r9
 80288cc:	f7fe fdf0 	bl	80274b0 <st_int8_to16_no_shift>
 80288d0:	4437      	add	r7, r6
 80288d2:	4545      	cmp	r5, r8
 80288d4:	4628      	mov	r0, r5
 80288d6:	9a06      	ldr	r2, [sp, #24]
 80288d8:	dbf0      	blt.n	80288bc <st_sssa8_convolve+0x648>
 80288da:	46b9      	mov	r9, r7
 80288dc:	46d8      	mov	r8, fp
 80288de:	ee18 7a10 	vmov	r7, s16
 80288e2:	f8dd b020 	ldr.w	fp, [sp, #32]
 80288e6:	e6f6      	b.n	80286d6 <st_sssa8_convolve+0x462>
 80288e8:	2a00      	cmp	r2, #0
 80288ea:	dd0b      	ble.n	8028904 <st_sssa8_convolve+0x690>
 80288ec:	005b      	lsls	r3, r3, #1
 80288ee:	e9dd 5416 	ldrd	r5, r4, [sp, #88]	@ 0x58
 80288f2:	fb53 5304 	smmla	r3, r3, r4, r5
 80288f6:	4113      	asrs	r3, r2
 80288f8:	f303 0307 	ssat	r3, #8, r3
 80288fc:	b25b      	sxtb	r3, r3
 80288fe:	e773      	b.n	80287e8 <st_sssa8_convolve+0x574>
 8028900:	4628      	mov	r0, r5
 8028902:	e763      	b.n	80287cc <st_sssa8_convolve+0x558>
 8028904:	fa03 f30b 	lsl.w	r3, r3, fp
 8028908:	f303 031f 	ssat	r3, #32, r3
 802890c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802890e:	fb53 f312 	smmulr	r3, r3, r2
 8028912:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8028914:	4413      	add	r3, r2
 8028916:	f303 0307 	ssat	r3, #8, r3
 802891a:	b25b      	sxtb	r3, r3
 802891c:	e764      	b.n	80287e8 <st_sssa8_convolve+0x574>
 802891e:	b2a3      	uxth	r3, r4
 8028920:	931a      	str	r3, [sp, #104]	@ 0x68
 8028922:	e6e8      	b.n	80286f6 <st_sssa8_convolve+0x482>
 8028924:	ee19 3a10 	vmov	r3, s18
 8028928:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802892a:	ee19 1a90 	vmov	r1, s19
 802892e:	985a      	ldr	r0, [sp, #360]	@ 0x168
 8028930:	f7fe fe64 	bl	80275fc <st_int8_to16_dual>
 8028934:	2301      	movs	r3, #1
 8028936:	9325      	str	r3, [sp, #148]	@ 0x94
 8028938:	e515      	b.n	8028366 <st_sssa8_convolve+0xf2>
 802893a:	9b08      	ldr	r3, [sp, #32]
 802893c:	eb03 000e 	add.w	r0, r3, lr
 8028940:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028942:	fb08 3000 	mla	r0, r8, r0, r3
 8028946:	f7fe fdb3 	bl	80274b0 <st_int8_to16_no_shift>
 802894a:	e5c5      	b.n	80284d8 <st_sssa8_convolve+0x264>
 802894c:	9a37      	ldr	r2, [sp, #220]	@ 0xdc
 802894e:	2a00      	cmp	r2, #0
 8028950:	d135      	bne.n	80289be <st_sssa8_convolve+0x74a>
 8028952:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8028954:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028956:	3a01      	subs	r2, #1
 8028958:	9238      	str	r2, [sp, #224]	@ 0xe0
 802895a:	2201      	movs	r2, #1
 802895c:	f8ad 20fe 	strh.w	r2, [sp, #254]	@ 0xfe
 8028960:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028962:	4293      	cmp	r3, r2
 8028964:	f6ff ad8c 	blt.w	8028480 <st_sssa8_convolve+0x20c>
 8028968:	b283      	uxth	r3, r0
 802896a:	930e      	str	r3, [sp, #56]	@ 0x38
 802896c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802896e:	4553      	cmp	r3, sl
 8028970:	f47f adc4 	bne.w	80284fc <st_sssa8_convolve+0x288>
 8028974:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8028976:	ee1a 2a10 	vmov	r2, s20
 802897a:	996a      	ldr	r1, [sp, #424]	@ 0x1a8
 802897c:	ee19 0a90 	vmov	r0, s19
 8028980:	9305      	str	r3, [sp, #20]
 8028982:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8028984:	9304      	str	r3, [sp, #16]
 8028986:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028988:	9303      	str	r3, [sp, #12]
 802898a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802898c:	9302      	str	r3, [sp, #8]
 802898e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8028990:	9301      	str	r3, [sp, #4]
 8028992:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8028994:	9300      	str	r3, [sp, #0]
 8028996:	ee19 3a10 	vmov	r3, s18
 802899a:	f002 fc91 	bl	802b2c0 <st_sssa8_nn_mat_mult_kernel_opt>
 802899e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80289a0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80289a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80289a4:	440b      	add	r3, r1
 80289a6:	9019      	str	r0, [sp, #100]	@ 0x64
 80289a8:	3201      	adds	r2, #1
 80289aa:	b29b      	uxth	r3, r3
 80289ac:	b210      	sxth	r0, r2
 80289ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80289b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80289b2:	4601      	mov	r1, r0
 80289b4:	4283      	cmp	r3, r0
 80289b6:	dd38      	ble.n	8028a2a <st_sssa8_convolve+0x7b6>
 80289b8:	f8dd a1a8 	ldr.w	sl, [sp, #424]	@ 0x1a8
 80289bc:	e552      	b.n	8028464 <st_sssa8_convolve+0x1f0>
 80289be:	3a01      	subs	r2, #1
 80289c0:	9237      	str	r2, [sp, #220]	@ 0xdc
 80289c2:	f8bd 20fc 	ldrh.w	r2, [sp, #252]	@ 0xfc
 80289c6:	2a01      	cmp	r2, #1
 80289c8:	f8ad 20fe 	strh.w	r2, [sp, #254]	@ 0xfe
 80289cc:	f43f ad53 	beq.w	8028476 <st_sssa8_convolve+0x202>
 80289d0:	b283      	uxth	r3, r0
 80289d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80289d4:	f9bd 402c 	ldrsh.w	r4, [sp, #44]	@ 0x2c
 80289d8:	930e      	str	r3, [sp, #56]	@ 0x38
 80289da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80289dc:	428b      	cmp	r3, r1
 80289de:	f6bf ad89 	bge.w	80284f4 <st_sssa8_convolve+0x280>
 80289e2:	ee08 7a10 	vmov	s16, r7
 80289e6:	f8cd b020 	str.w	fp, [sp, #32]
 80289ea:	4657      	mov	r7, sl
 80289ec:	46cb      	mov	fp, r9
 80289ee:	461d      	mov	r5, r3
 80289f0:	4618      	mov	r0, r3
 80289f2:	ee18 2a90 	vmov	r2, s17
 80289f6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80289f8:	4689      	mov	r9, r1
 80289fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80289fe:	3501      	adds	r5, #1
 8028a00:	fb00 400b 	mla	r0, r0, fp, r4
 8028a04:	4639      	mov	r1, r7
 8028a06:	9206      	str	r2, [sp, #24]
 8028a08:	b22d      	sxth	r5, r5
 8028a0a:	fb08 a000 	mla	r0, r8, r0, sl
 8028a0e:	f7fe fd4f 	bl	80274b0 <st_int8_to16_no_shift>
 8028a12:	4437      	add	r7, r6
 8028a14:	454d      	cmp	r5, r9
 8028a16:	4628      	mov	r0, r5
 8028a18:	9a06      	ldr	r2, [sp, #24]
 8028a1a:	dbf0      	blt.n	80289fe <st_sssa8_convolve+0x78a>
 8028a1c:	46ba      	mov	sl, r7
 8028a1e:	46d9      	mov	r9, fp
 8028a20:	ee18 7a10 	vmov	r7, s16
 8028a24:	f8dd b020 	ldr.w	fp, [sp, #32]
 8028a28:	e564      	b.n	80284f4 <st_sssa8_convolve+0x280>
 8028a2a:	46da      	mov	sl, fp
 8028a2c:	f8dd b1a8 	ldr.w	fp, [sp, #424]	@ 0x1a8
 8028a30:	e573      	b.n	802851a <st_sssa8_convolve+0x2a6>
 8028a32:	b2a3      	uxth	r3, r4
 8028a34:	9321      	str	r3, [sp, #132]	@ 0x84
 8028a36:	e570      	b.n	802851a <st_sssa8_convolve+0x2a6>
 8028a38:	4605      	mov	r5, r0
 8028a3a:	9a6a      	ldr	r2, [sp, #424]	@ 0x1a8
 8028a3c:	e6af      	b.n	802879e <st_sssa8_convolve+0x52a>
 8028a3e:	460b      	mov	r3, r1
 8028a40:	3301      	adds	r3, #1
 8028a42:	b29b      	uxth	r3, r3
 8028a44:	9320      	str	r3, [sp, #128]	@ 0x80
 8028a46:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028a48:	2b00      	cmp	r3, #0
 8028a4a:	f43f aed2 	beq.w	80287f2 <st_sssa8_convolve+0x57e>
 8028a4e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8028a50:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 8028a54:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8028a56:	2400      	movs	r4, #0
 8028a58:	fb03 f30a 	mul.w	r3, r3, sl
 8028a5c:	fa0f f888 	sxth.w	r8, r8
 8028a60:	f8cd b088 	str.w	fp, [sp, #136]	@ 0x88
 8028a64:	4625      	mov	r5, r4
 8028a66:	fb02 f303 	mul.w	r3, r2, r3
 8028a6a:	9a6a      	ldr	r2, [sp, #424]	@ 0x1a8
 8028a6c:	46d3      	mov	fp, sl
 8028a6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8028a72:	9311      	str	r3, [sp, #68]	@ 0x44
 8028a74:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028a76:	3b01      	subs	r3, #1
 8028a78:	b29b      	uxth	r3, r3
 8028a7a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8028a7c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028a7e:	425b      	negs	r3, r3
 8028a80:	b29b      	uxth	r3, r3
 8028a82:	9326      	str	r3, [sp, #152]	@ 0x98
 8028a84:	ee18 3a90 	vmov	r3, s17
 8028a88:	005b      	lsls	r3, r3, #1
 8028a8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8028a8c:	a836      	add	r0, sp, #216	@ 0xd8
 8028a8e:	f7fe ffb3 	bl	80279f8 <ai_padding_opt_phase1>
 8028a92:	ee19 3a10 	vmov	r3, s18
 8028a96:	9a67      	ldr	r2, [sp, #412]	@ 0x19c
 8028a98:	fb05 f303 	mul.w	r3, r5, r3
 8028a9c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8028a9e:	fb01 2303 	mla	r3, r1, r3, r2
 8028aa2:	9321      	str	r3, [sp, #132]	@ 0x84
 8028aa4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8028aa6:	2b00      	cmp	r3, #0
 8028aa8:	f000 8147 	beq.w	8028d3a <st_sssa8_convolve+0xac6>
 8028aac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028aae:	2b00      	cmp	r3, #0
 8028ab0:	f000 814e 	beq.w	8028d50 <st_sssa8_convolve+0xadc>
 8028ab4:	b2a3      	uxth	r3, r4
 8028ab6:	eef0 aa4a 	vmov.f32	s21, s20
 8028aba:	46ca      	mov	sl, r9
 8028abc:	ee08 8a10 	vmov	s16, r8
 8028ac0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8028ac2:	ed8d 9a24 	vstr	s18, [sp, #144]	@ 0x90
 8028ac6:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	@ 0x78
 8028aca:	1a9b      	subs	r3, r3, r2
 8028acc:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8028ace:	fb05 3302 	mla	r3, r5, r2, r3
 8028ad2:	9309      	str	r3, [sp, #36]	@ 0x24
 8028ad4:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	@ 0x98
 8028ad8:	9310      	str	r3, [sp, #64]	@ 0x40
 8028ada:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8028adc:	9323      	str	r3, [sp, #140]	@ 0x8c
 8028ade:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8028ae0:	9319      	str	r3, [sp, #100]	@ 0x64
 8028ae2:	9b5a      	ldr	r3, [sp, #360]	@ 0x168
 8028ae4:	9327      	str	r3, [sp, #156]	@ 0x9c
 8028ae6:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8028ae8:	9a39      	ldr	r2, [sp, #228]	@ 0xe4
 8028aea:	9337      	str	r3, [sp, #220]	@ 0xdc
 8028aec:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8028aee:	9236      	str	r2, [sp, #216]	@ 0xd8
 8028af0:	9338      	str	r3, [sp, #224]	@ 0xe0
 8028af2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028af4:	2b00      	cmp	r3, #0
 8028af6:	f000 80e5 	beq.w	8028cc4 <st_sssa8_convolve+0xa50>
 8028afa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8028afc:	2000      	movs	r0, #0
 8028afe:	9f6a      	ldr	r7, [sp, #424]	@ 0x1a8
 8028b00:	425b      	negs	r3, r3
 8028b02:	4601      	mov	r1, r0
 8028b04:	46b9      	mov	r9, r7
 8028b06:	b29b      	uxth	r3, r3
 8028b08:	930c      	str	r3, [sp, #48]	@ 0x30
 8028b0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8028b0c:	931c      	str	r3, [sp, #112]	@ 0x70
 8028b0e:	2a00      	cmp	r2, #0
 8028b10:	d056      	beq.n	8028bc0 <st_sssa8_convolve+0x94c>
 8028b12:	3a01      	subs	r2, #1
 8028b14:	9236      	str	r2, [sp, #216]	@ 0xd8
 8028b16:	2201      	movs	r2, #1
 8028b18:	f8ad 20fe 	strh.w	r2, [sp, #254]	@ 0xfe
 8028b1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028b1e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8028b20:	4293      	cmp	r3, r2
 8028b22:	dd5a      	ble.n	8028bda <st_sssa8_convolve+0x966>
 8028b24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8028b26:	ee18 8a10 	vmov	r8, s16
 8028b2a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8028b2c:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8028b2e:	fb01 3102 	mla	r1, r1, r2, r3
 8028b32:	b283      	uxth	r3, r0
 8028b34:	930e      	str	r3, [sp, #56]	@ 0x38
 8028b36:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8028b38:	1acd      	subs	r5, r1, r3
 8028b3a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8028b3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028b40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028b42:	461a      	mov	r2, r3
 8028b44:	9306      	str	r3, [sp, #24]
 8028b46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028b48:	42ab      	cmp	r3, r5
 8028b4a:	da1f      	bge.n	8028b8c <st_sssa8_convolve+0x918>
 8028b4c:	9906      	ldr	r1, [sp, #24]
 8028b4e:	461c      	mov	r4, r3
 8028b50:	469e      	mov	lr, r3
 8028b52:	0fce      	lsrs	r6, r1, #31
 8028b54:	9907      	ldr	r1, [sp, #28]
 8028b56:	4291      	cmp	r1, r2
 8028b58:	bfd8      	it	le
 8028b5a:	f046 0601 	orrle.w	r6, r6, #1
 8028b5e:	fb0a f202 	mul.w	r2, sl, r2
 8028b62:	9208      	str	r2, [sp, #32]
 8028b64:	45f2      	cmp	sl, lr
 8028b66:	465a      	mov	r2, fp
 8028b68:	4649      	mov	r1, r9
 8028b6a:	4640      	mov	r0, r8
 8028b6c:	bfcc      	ite	gt
 8028b6e:	2300      	movgt	r3, #0
 8028b70:	2301      	movle	r3, #1
 8028b72:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 8028b76:	d101      	bne.n	8028b7c <st_sssa8_convolve+0x908>
 8028b78:	2e00      	cmp	r6, #0
 8028b7a:	d058      	beq.n	8028c2e <st_sssa8_convolve+0x9ba>
 8028b7c:	f7ff f84e 	bl	8027c1c <st_int16_fill>
 8028b80:	3401      	adds	r4, #1
 8028b82:	44b9      	add	r9, r7
 8028b84:	b224      	sxth	r4, r4
 8028b86:	42ac      	cmp	r4, r5
 8028b88:	46a6      	mov	lr, r4
 8028b8a:	dbeb      	blt.n	8028b64 <st_sssa8_convolve+0x8f0>
 8028b8c:	9b06      	ldr	r3, [sp, #24]
 8028b8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028b90:	3301      	adds	r3, #1
 8028b92:	b21b      	sxth	r3, r3
 8028b94:	428b      	cmp	r3, r1
 8028b96:	461a      	mov	r2, r3
 8028b98:	9306      	str	r3, [sp, #24]
 8028b9a:	dbd4      	blt.n	8028b46 <st_sssa8_convolve+0x8d2>
 8028b9c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8028b9e:	454b      	cmp	r3, r9
 8028ba0:	d020      	beq.n	8028be4 <st_sssa8_convolve+0x970>
 8028ba2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8028ba4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8028ba8:	3001      	adds	r0, #1
 8028baa:	441a      	add	r2, r3
 8028bac:	b200      	sxth	r0, r0
 8028bae:	b293      	uxth	r3, r2
 8028bb0:	4601      	mov	r1, r0
 8028bb2:	930c      	str	r3, [sp, #48]	@ 0x30
 8028bb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028bb6:	4283      	cmp	r3, r0
 8028bb8:	dd6c      	ble.n	8028c94 <st_sssa8_convolve+0xa20>
 8028bba:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
 8028bbc:	2a00      	cmp	r2, #0
 8028bbe:	d1a8      	bne.n	8028b12 <st_sssa8_convolve+0x89e>
 8028bc0:	9a37      	ldr	r2, [sp, #220]	@ 0xdc
 8028bc2:	2a00      	cmp	r2, #0
 8028bc4:	d13c      	bne.n	8028c40 <st_sssa8_convolve+0x9cc>
 8028bc6:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8028bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028bca:	3a01      	subs	r2, #1
 8028bcc:	9238      	str	r2, [sp, #224]	@ 0xe0
 8028bce:	2201      	movs	r2, #1
 8028bd0:	f8ad 20fe 	strh.w	r2, [sp, #254]	@ 0xfe
 8028bd4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8028bd6:	4293      	cmp	r3, r2
 8028bd8:	dca4      	bgt.n	8028b24 <st_sssa8_convolve+0x8b0>
 8028bda:	b283      	uxth	r3, r0
 8028bdc:	930e      	str	r3, [sp, #56]	@ 0x38
 8028bde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8028be0:	454b      	cmp	r3, r9
 8028be2:	d1de      	bne.n	8028ba2 <st_sssa8_convolve+0x92e>
 8028be4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028be6:	ee1a 2a90 	vmov	r2, s21
 8028bea:	996a      	ldr	r1, [sp, #424]	@ 0x1a8
 8028bec:	ee19 0a90 	vmov	r0, s19
 8028bf0:	9305      	str	r3, [sp, #20]
 8028bf2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8028bf4:	9304      	str	r3, [sp, #16]
 8028bf6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028bf8:	9303      	str	r3, [sp, #12]
 8028bfa:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028bfc:	9302      	str	r3, [sp, #8]
 8028bfe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8028c00:	9301      	str	r3, [sp, #4]
 8028c02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8028c04:	9300      	str	r3, [sp, #0]
 8028c06:	ee19 3a10 	vmov	r3, s18
 8028c0a:	f002 fb59 	bl	802b2c0 <st_sssa8_nn_mat_mult_kernel_opt>
 8028c0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028c10:	901c      	str	r0, [sp, #112]	@ 0x70
 8028c12:	3201      	adds	r2, #1
 8028c14:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	@ 0x30
 8028c18:	b210      	sxth	r0, r2
 8028c1a:	440b      	add	r3, r1
 8028c1c:	4601      	mov	r1, r0
 8028c1e:	b29b      	uxth	r3, r3
 8028c20:	930c      	str	r3, [sp, #48]	@ 0x30
 8028c22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028c24:	4283      	cmp	r3, r0
 8028c26:	dd4d      	ble.n	8028cc4 <st_sssa8_convolve+0xa50>
 8028c28:	f8dd 91a8 	ldr.w	r9, [sp, #424]	@ 0x1a8
 8028c2c:	e7c5      	b.n	8028bba <st_sssa8_convolve+0x946>
 8028c2e:	9b08      	ldr	r3, [sp, #32]
 8028c30:	eb03 000e 	add.w	r0, r3, lr
 8028c34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028c36:	fb0b 3000 	mla	r0, fp, r0, r3
 8028c3a:	f7fe fc39 	bl	80274b0 <st_int8_to16_no_shift>
 8028c3e:	e79f      	b.n	8028b80 <st_sssa8_convolve+0x90c>
 8028c40:	3a01      	subs	r2, #1
 8028c42:	9237      	str	r2, [sp, #220]	@ 0xdc
 8028c44:	f8bd 20fc 	ldrh.w	r2, [sp, #252]	@ 0xfc
 8028c48:	2a01      	cmp	r2, #1
 8028c4a:	f8ad 20fe 	strh.w	r2, [sp, #254]	@ 0xfe
 8028c4e:	f43f af65 	beq.w	8028b1c <st_sssa8_convolve+0x8a8>
 8028c52:	b283      	uxth	r3, r0
 8028c54:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8028c56:	f9bd 4030 	ldrsh.w	r4, [sp, #48]	@ 0x30
 8028c5a:	930e      	str	r3, [sp, #56]	@ 0x38
 8028c5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028c5e:	429f      	cmp	r7, r3
 8028c60:	dd9c      	ble.n	8028b9c <st_sssa8_convolve+0x928>
 8028c62:	46c8      	mov	r8, r9
 8028c64:	461d      	mov	r5, r3
 8028c66:	4618      	mov	r0, r3
 8028c68:	ee18 2a90 	vmov	r2, s17
 8028c6c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8028c6e:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8028c72:	3501      	adds	r5, #1
 8028c74:	fb00 400a 	mla	r0, r0, sl, r4
 8028c78:	4641      	mov	r1, r8
 8028c7a:	9206      	str	r2, [sp, #24]
 8028c7c:	b22d      	sxth	r5, r5
 8028c7e:	fb0b 9000 	mla	r0, fp, r0, r9
 8028c82:	f7fe fc15 	bl	80274b0 <st_int8_to16_no_shift>
 8028c86:	44b0      	add	r8, r6
 8028c88:	42bd      	cmp	r5, r7
 8028c8a:	4628      	mov	r0, r5
 8028c8c:	9a06      	ldr	r2, [sp, #24]
 8028c8e:	dbf0      	blt.n	8028c72 <st_sssa8_convolve+0x9fe>
 8028c90:	46c1      	mov	r9, r8
 8028c92:	e783      	b.n	8028b9c <st_sssa8_convolve+0x928>
 8028c94:	9b6a      	ldr	r3, [sp, #424]	@ 0x1a8
 8028c96:	4599      	cmp	r9, r3
 8028c98:	d014      	beq.n	8028cc4 <st_sssa8_convolve+0xa50>
 8028c9a:	4619      	mov	r1, r3
 8028c9c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028c9e:	ee1a 2a90 	vmov	r2, s21
 8028ca2:	ee19 0a90 	vmov	r0, s19
 8028ca6:	9305      	str	r3, [sp, #20]
 8028ca8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8028caa:	9304      	str	r3, [sp, #16]
 8028cac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028cae:	9303      	str	r3, [sp, #12]
 8028cb0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028cb2:	9302      	str	r3, [sp, #8]
 8028cb4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8028cb6:	9301      	str	r3, [sp, #4]
 8028cb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8028cba:	9300      	str	r3, [sp, #0]
 8028cbc:	ee19 3a10 	vmov	r3, s18
 8028cc0:	f002 fdc0 	bl	802b844 <st_sssa8_nn_mat_mult_kernel_single_opt>
 8028cc4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8028cc6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028cc8:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8028cca:	1a9b      	subs	r3, r3, r2
 8028ccc:	4411      	add	r1, r2
 8028cce:	b29b      	uxth	r3, r3
 8028cd0:	9121      	str	r1, [sp, #132]	@ 0x84
 8028cd2:	429a      	cmp	r2, r3
 8028cd4:	9324      	str	r3, [sp, #144]	@ 0x90
 8028cd6:	bf28      	it	cs
 8028cd8:	461a      	movcs	r2, r3
 8028cda:	b294      	uxth	r4, r2
 8028cdc:	b954      	cbnz	r4, 8028cf4 <st_sssa8_convolve+0xa80>
 8028cde:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8028ce0:	3b01      	subs	r3, #1
 8028ce2:	b29b      	uxth	r3, r3
 8028ce4:	461a      	mov	r2, r3
 8028ce6:	9323      	str	r3, [sp, #140]	@ 0x8c
 8028ce8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8028cec:	429a      	cmp	r2, r3
 8028cee:	d013      	beq.n	8028d18 <st_sssa8_convolve+0xaa4>
 8028cf0:	9419      	str	r4, [sp, #100]	@ 0x64
 8028cf2:	e6f8      	b.n	8028ae6 <st_sssa8_convolve+0x872>
 8028cf4:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8028cf6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8028cf8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8028cfa:	fb02 1003 	mla	r0, r2, r3, r1
 8028cfe:	ee1a 1a90 	vmov	r1, s21
 8028d02:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8028d06:	ee19 1a90 	vmov	r1, s19
 8028d0a:	9027      	str	r0, [sp, #156]	@ 0x9c
 8028d0c:	ee0a 3a90 	vmov	s21, r3
 8028d10:	4623      	mov	r3, r4
 8028d12:	f7fe fc73 	bl	80275fc <st_int8_to16_dual>
 8028d16:	e7e2      	b.n	8028cde <st_sssa8_convolve+0xa6a>
 8028d18:	46d1      	mov	r9, sl
 8028d1a:	ee18 8a10 	vmov	r8, s16
 8028d1e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028d20:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8028d22:	9c28      	ldr	r4, [sp, #160]	@ 0xa0
 8028d24:	4413      	add	r3, r2
 8028d26:	3401      	adds	r4, #1
 8028d28:	b29b      	uxth	r3, r3
 8028d2a:	b224      	sxth	r4, r4
 8028d2c:	9326      	str	r3, [sp, #152]	@ 0x98
 8028d2e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028d30:	4625      	mov	r5, r4
 8028d32:	42a3      	cmp	r3, r4
 8028d34:	f73f aeaa 	bgt.w	8028a8c <st_sssa8_convolve+0x818>
 8028d38:	e55b      	b.n	80287f2 <st_sssa8_convolve+0x57e>
 8028d3a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8028d3c:	ee19 1a90 	vmov	r1, s19
 8028d40:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8028d42:	985a      	ldr	r0, [sp, #360]	@ 0x168
 8028d44:	f7fe fc5a 	bl	80275fc <st_int8_to16_dual>
 8028d48:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028d4a:	2b00      	cmp	r3, #0
 8028d4c:	f47f aeb2 	bne.w	8028ab4 <st_sssa8_convolve+0x840>
 8028d50:	b2a3      	uxth	r3, r4
 8028d52:	9328      	str	r3, [sp, #160]	@ 0xa0
 8028d54:	e7e3      	b.n	8028d1e <st_sssa8_convolve+0xaaa>
 8028d56:	bf00      	nop

08028d58 <st_sssa8_convolve_1x1_WeightsPrefetch>:
 8028d58:	fb02 fc01 	mul.w	ip, r2, r1
 8028d5c:	b510      	push	{r4, lr}
 8028d5e:	685c      	ldr	r4, [r3, #4]
 8028d60:	ebb4 0f4c 	cmp.w	r4, ip, lsl #1
 8028d64:	da01      	bge.n	8028d6a <st_sssa8_convolve_1x1_WeightsPrefetch+0x12>
 8028d66:	2000      	movs	r0, #0
 8028d68:	bd10      	pop	{r4, pc}
 8028d6a:	681b      	ldr	r3, [r3, #0]
 8028d6c:	f009 fa42 	bl	80321f4 <st_sssa8_fullW_prefetch>
 8028d70:	2000      	movs	r0, #0
 8028d72:	bd10      	pop	{r4, pc}

08028d74 <st_sssa8_convolve_1x1>:
 8028d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028d78:	b08b      	sub	sp, #44	@ 0x2c
 8028d7a:	f8bd 5058 	ldrh.w	r5, [sp, #88]	@ 0x58
 8028d7e:	f8bd 6054 	ldrh.w	r6, [sp, #84]	@ 0x54
 8028d82:	2d01      	cmp	r5, #1
 8028d84:	f8bd 705c 	ldrh.w	r7, [sp, #92]	@ 0x5c
 8028d88:	f8bd 4060 	ldrh.w	r4, [sp, #96]	@ 0x60
 8028d8c:	f8bd b064 	ldrh.w	fp, [sp, #100]	@ 0x64
 8028d90:	f8bd 9068 	ldrh.w	r9, [sp, #104]	@ 0x68
 8028d94:	f8bd a06c 	ldrh.w	sl, [sp, #108]	@ 0x6c
 8028d98:	f99d 807c 	ldrsb.w	r8, [sp, #124]	@ 0x7c
 8028d9c:	f99d c080 	ldrsb.w	ip, [sp, #128]	@ 0x80
 8028da0:	f8dd e090 	ldr.w	lr, [sp, #144]	@ 0x90
 8028da4:	d139      	bne.n	8028e1a <st_sssa8_convolve_1x1+0xa6>
 8028da6:	2f01      	cmp	r7, #1
 8028da8:	d137      	bne.n	8028e1a <st_sssa8_convolve_1x1+0xa6>
 8028daa:	ea54 040b 	orrs.w	r4, r4, fp
 8028dae:	d134      	bne.n	8028e1a <st_sssa8_convolve_1x1+0xa6>
 8028db0:	f1b9 0f01 	cmp.w	r9, #1
 8028db4:	d131      	bne.n	8028e1a <st_sssa8_convolve_1x1+0xa6>
 8028db6:	f1ba 0f01 	cmp.w	sl, #1
 8028dba:	d12e      	bne.n	8028e1a <st_sssa8_convolve_1x1+0xa6>
 8028dbc:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 8028dbe:	f9b4 7000 	ldrsh.w	r7, [r4]
 8028dc2:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 8028dc4:	f8d4 9000 	ldr.w	r9, [r4]
 8028dc8:	1e7c      	subs	r4, r7, #1
 8028dca:	b2a4      	uxth	r4, r4
 8028dcc:	2c14      	cmp	r4, #20
 8028dce:	e9de 5e00 	ldrd	r5, lr, [lr]
 8028dd2:	d91b      	bls.n	8028e0c <st_sssa8_convolve_1x1+0x98>
 8028dd4:	4664      	mov	r4, ip
 8028dd6:	9304      	str	r3, [sp, #16]
 8028dd8:	fb06 f303 	mul.w	r3, r6, r3
 8028ddc:	fb01 f202 	mul.w	r2, r1, r2
 8028de0:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8028de2:	ebbe 0f43 	cmp.w	lr, r3, lsl #1
 8028de6:	9507      	str	r5, [sp, #28]
 8028de8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8028dea:	bfb8      	it	lt
 8028dec:	2500      	movlt	r5, #0
 8028dee:	f8cd 9000 	str.w	r9, [sp]
 8028df2:	9603      	str	r6, [sp, #12]
 8028df4:	9508      	str	r5, [sp, #32]
 8028df6:	e9cd 7201 	strd	r7, r2, [sp, #4]
 8028dfa:	e9cd 8405 	strd	r8, r4, [sp, #20]
 8028dfe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8028e00:	f009 fafa 	bl	80323f8 <st_sssa8_nn_mat_mult_nt_t>
 8028e04:	2000      	movs	r0, #0
 8028e06:	b00b      	add	sp, #44	@ 0x2c
 8028e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028e0c:	2401      	movs	r4, #1
 8028e0e:	fa0c fc07 	lsl.w	ip, ip, r7
 8028e12:	40bc      	lsls	r4, r7
 8028e14:	eb0c 0454 	add.w	r4, ip, r4, lsr #1
 8028e18:	e7dd      	b.n	8028dd6 <st_sssa8_convolve_1x1+0x62>
 8028e1a:	f06f 0002 	mvn.w	r0, #2
 8028e1e:	e7f2      	b.n	8028e06 <st_sssa8_convolve_1x1+0x92>

08028e20 <st_sssa8_conv_dw_Wadapt>:
 8028e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e24:	088c      	lsrs	r4, r1, #2
 8028e26:	b089      	sub	sp, #36	@ 0x24
 8028e28:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028e2a:	9007      	str	r0, [sp, #28]
 8028e2c:	9404      	str	r4, [sp, #16]
 8028e2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028e32:	d056      	beq.n	8028ee2 <st_sssa8_conv_dw_Wadapt+0xc2>
 8028e34:	fb03 f902 	mul.w	r9, r3, r2
 8028e38:	461f      	mov	r7, r3
 8028e3a:	4684      	mov	ip, r0
 8028e3c:	4616      	mov	r6, r2
 8028e3e:	f3c9 094f 	ubfx	r9, r9, #1, #16
 8028e42:	1e62      	subs	r2, r4, #1
 8028e44:	fb16 fb07 	smulbb	fp, r6, r7
 8028e48:	f10c 0a04 	add.w	sl, ip, #4
 8028e4c:	f109 33ff 	add.w	r3, r9, #4294967295
 8028e50:	b292      	uxth	r2, r2
 8028e52:	f00b 0601 	and.w	r6, fp, #1
 8028e56:	46e0      	mov	r8, ip
 8028e58:	b29b      	uxth	r3, r3
 8028e5a:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 8028e5e:	9601      	str	r6, [sp, #4]
 8028e60:	1c58      	adds	r0, r3, #1
 8028e62:	011b      	lsls	r3, r3, #4
 8028e64:	004f      	lsls	r7, r1, #1
 8028e66:	3320      	adds	r3, #32
 8028e68:	0102      	lsls	r2, r0, #4
 8028e6a:	9303      	str	r3, [sp, #12]
 8028e6c:	fb00 f301 	mul.w	r3, r0, r1
 8028e70:	9202      	str	r2, [sp, #8]
 8028e72:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 8028e76:	4644      	mov	r4, r8
 8028e78:	f1b9 0f00 	cmp.w	r9, #0
 8028e7c:	d06d      	beq.n	8028f5a <st_sssa8_conv_dw_Wadapt+0x13a>
 8028e7e:	9b03      	ldr	r3, [sp, #12]
 8028e80:	f105 0210 	add.w	r2, r5, #16
 8028e84:	eb05 0e03 	add.w	lr, r5, r3
 8028e88:	3210      	adds	r2, #16
 8028e8a:	5866      	ldr	r6, [r4, r1]
 8028e8c:	6823      	ldr	r3, [r4, #0]
 8028e8e:	443c      	add	r4, r7
 8028e90:	4572      	cmp	r2, lr
 8028e92:	eac6 4023 	pkhtb	r0, r6, r3, asr #16
 8028e96:	eac3 4306 	pkhbt	r3, r3, r6, lsl #16
 8028e9a:	ea4f 2630 	mov.w	r6, r0, ror #8
 8028e9e:	ea4f 2c33 	mov.w	ip, r3, ror #8
 8028ea2:	fa2f f080 	sxtb16	r0, r0
 8028ea6:	fa2f f383 	sxtb16	r3, r3
 8028eaa:	fa2f f686 	sxtb16	r6, r6
 8028eae:	f842 3c20 	str.w	r3, [r2, #-32]
 8028eb2:	f842 0c18 	str.w	r0, [r2, #-24]
 8028eb6:	fa2f f38c 	sxtb16	r3, ip
 8028eba:	f842 6c14 	str.w	r6, [r2, #-20]
 8028ebe:	f842 3c1c 	str.w	r3, [r2, #-28]
 8028ec2:	d1e1      	bne.n	8028e88 <st_sssa8_conv_dw_Wadapt+0x68>
 8028ec4:	9b02      	ldr	r3, [sp, #8]
 8028ec6:	eb0b 0408 	add.w	r4, fp, r8
 8028eca:	18ea      	adds	r2, r5, r3
 8028ecc:	9b01      	ldr	r3, [sp, #4]
 8028ece:	bb6b      	cbnz	r3, 8028f2c <st_sssa8_conv_dw_Wadapt+0x10c>
 8028ed0:	4615      	mov	r5, r2
 8028ed2:	f108 0804 	add.w	r8, r8, #4
 8028ed6:	45d0      	cmp	r8, sl
 8028ed8:	d1cd      	bne.n	8028e76 <st_sssa8_conv_dw_Wadapt+0x56>
 8028eda:	9b04      	ldr	r3, [sp, #16]
 8028edc:	009b      	lsls	r3, r3, #2
 8028ede:	b29b      	uxth	r3, r3
 8028ee0:	9304      	str	r3, [sp, #16]
 8028ee2:	f011 0303 	ands.w	r3, r1, #3
 8028ee6:	d035      	beq.n	8028f54 <st_sssa8_conv_dw_Wadapt+0x134>
 8028ee8:	e9dd 2005 	ldrd	r2, r0, [sp, #20]
 8028eec:	fb12 f000 	smulbb	r0, r2, r0
 8028ef0:	b280      	uxth	r0, r0
 8028ef2:	b378      	cbz	r0, 8028f54 <st_sssa8_conv_dw_Wadapt+0x134>
 8028ef4:	2901      	cmp	r1, #1
 8028ef6:	d132      	bne.n	8028f5e <st_sssa8_conv_dw_Wadapt+0x13e>
 8028ef8:	0047      	lsls	r7, r0, #1
 8028efa:	f8dd c010 	ldr.w	ip, [sp, #16]
 8028efe:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8028f02:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8028f06:	4664      	mov	r4, ip
 8028f08:	4601      	mov	r1, r0
 8028f0a:	1e63      	subs	r3, r4, #1
 8028f0c:	1c62      	adds	r2, r4, #1
 8028f0e:	4626      	mov	r6, r4
 8028f10:	4473      	add	r3, lr
 8028f12:	b294      	uxth	r4, r2
 8028f14:	f913 2f01 	ldrsb.w	r2, [r3, #1]!
 8028f18:	f825 2b02 	strh.w	r2, [r5], #2
 8028f1c:	428d      	cmp	r5, r1
 8028f1e:	d1f9      	bne.n	8028f14 <st_sssa8_conv_dw_Wadapt+0xf4>
 8028f20:	4566      	cmp	r6, ip
 8028f22:	4605      	mov	r5, r0
 8028f24:	4439      	add	r1, r7
 8028f26:	d015      	beq.n	8028f54 <st_sssa8_conv_dw_Wadapt+0x134>
 8028f28:	4438      	add	r0, r7
 8028f2a:	e7ee      	b.n	8028f0a <st_sssa8_conv_dw_Wadapt+0xea>
 8028f2c:	6823      	ldr	r3, [r4, #0]
 8028f2e:	f102 0508 	add.w	r5, r2, #8
 8028f32:	eac3 2003 	pkhbt	r0, r3, r3, lsl #8
 8028f36:	eac3 6323 	pkhtb	r3, r3, r3, asr #24
 8028f3a:	fa2f f080 	sxtb16	r0, r0
 8028f3e:	ea4f 4333 	mov.w	r3, r3, ror #16
 8028f42:	8010      	strh	r0, [r2, #0]
 8028f44:	fa2f f383 	sxtb16	r3, r3
 8028f48:	0c00      	lsrs	r0, r0, #16
 8028f4a:	8093      	strh	r3, [r2, #4]
 8028f4c:	0c1b      	lsrs	r3, r3, #16
 8028f4e:	8050      	strh	r0, [r2, #2]
 8028f50:	80d3      	strh	r3, [r2, #6]
 8028f52:	e7be      	b.n	8028ed2 <st_sssa8_conv_dw_Wadapt+0xb2>
 8028f54:	b009      	add	sp, #36	@ 0x24
 8028f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028f5a:	462a      	mov	r2, r5
 8028f5c:	e7b6      	b.n	8028ecc <st_sssa8_conv_dw_Wadapt+0xac>
 8028f5e:	9a04      	ldr	r2, [sp, #16]
 8028f60:	eb05 0740 	add.w	r7, r5, r0, lsl #1
 8028f64:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8028f68:	0040      	lsls	r0, r0, #1
 8028f6a:	4413      	add	r3, r2
 8028f6c:	463c      	mov	r4, r7
 8028f6e:	4694      	mov	ip, r2
 8028f70:	b29e      	uxth	r6, r3
 8028f72:	462b      	mov	r3, r5
 8028f74:	f10c 0501 	add.w	r5, ip, #1
 8028f78:	eb0e 020c 	add.w	r2, lr, ip
 8028f7c:	fa1f fc85 	uxth.w	ip, r5
 8028f80:	f992 5000 	ldrsb.w	r5, [r2]
 8028f84:	440a      	add	r2, r1
 8028f86:	f823 5b02 	strh.w	r5, [r3], #2
 8028f8a:	42a3      	cmp	r3, r4
 8028f8c:	d1f8      	bne.n	8028f80 <st_sssa8_conv_dw_Wadapt+0x160>
 8028f8e:	45b4      	cmp	ip, r6
 8028f90:	4404      	add	r4, r0
 8028f92:	463b      	mov	r3, r7
 8028f94:	d0de      	beq.n	8028f54 <st_sssa8_conv_dw_Wadapt+0x134>
 8028f96:	4407      	add	r7, r0
 8028f98:	e7ec      	b.n	8028f74 <st_sssa8_conv_dw_Wadapt+0x154>
 8028f9a:	bf00      	nop

08028f9c <st_sssa8_convolve_dw>:
 8028f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028fa0:	ed2d 8b02 	vpush	{d8}
 8028fa4:	b0db      	sub	sp, #364	@ 0x16c
 8028fa6:	9316      	str	r3, [sp, #88]	@ 0x58
 8028fa8:	9b70      	ldr	r3, [sp, #448]	@ 0x1c0
 8028faa:	912d      	str	r1, [sp, #180]	@ 0xb4
 8028fac:	f9b3 1000 	ldrsh.w	r1, [r3]
 8028fb0:	9b6f      	ldr	r3, [sp, #444]	@ 0x1bc
 8028fb2:	9212      	str	r2, [sp, #72]	@ 0x48
 8028fb4:	681b      	ldr	r3, [r3, #0]
 8028fb6:	f8bd 21a0 	ldrh.w	r2, [sp, #416]	@ 0x1a0
 8028fba:	9309      	str	r3, [sp, #36]	@ 0x24
 8028fbc:	1e4b      	subs	r3, r1, #1
 8028fbe:	922c      	str	r2, [sp, #176]	@ 0xb0
 8028fc0:	f8bd 21a4 	ldrh.w	r2, [sp, #420]	@ 0x1a4
 8028fc4:	9314      	str	r3, [sp, #80]	@ 0x50
 8028fc6:	9231      	str	r2, [sp, #196]	@ 0xc4
 8028fc8:	b29a      	uxth	r2, r3
 8028fca:	f8bd 31a8 	ldrh.w	r3, [sp, #424]	@ 0x1a8
 8028fce:	9018      	str	r0, [sp, #96]	@ 0x60
 8028fd0:	2a14      	cmp	r2, #20
 8028fd2:	9327      	str	r3, [sp, #156]	@ 0x9c
 8028fd4:	f8bd 31ac 	ldrh.w	r3, [sp, #428]	@ 0x1ac
 8028fd8:	f8bd 01d0 	ldrh.w	r0, [sp, #464]	@ 0x1d0
 8028fdc:	9332      	str	r3, [sp, #200]	@ 0xc8
 8028fde:	f8bd 31b0 	ldrh.w	r3, [sp, #432]	@ 0x1b0
 8028fe2:	9022      	str	r0, [sp, #136]	@ 0x88
 8028fe4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8028fe6:	f8bd 31b4 	ldrh.w	r3, [sp, #436]	@ 0x1b4
 8028fea:	f8bd 01d4 	ldrh.w	r0, [sp, #468]	@ 0x1d4
 8028fee:	9333      	str	r3, [sp, #204]	@ 0xcc
 8028ff0:	f99d 31c4 	ldrsb.w	r3, [sp, #452]	@ 0x1c4
 8028ff4:	f8bd 719c 	ldrh.w	r7, [sp, #412]	@ 0x19c
 8028ff8:	9317      	str	r3, [sp, #92]	@ 0x5c
 8028ffa:	9105      	str	r1, [sp, #20]
 8028ffc:	f99d 31c8 	ldrsb.w	r3, [sp, #456]	@ 0x1c8
 8029000:	9034      	str	r0, [sp, #208]	@ 0xd0
 8029002:	f200 84bf 	bhi.w	8029984 <st_sssa8_convolve_dw+0x9e8>
 8029006:	2201      	movs	r2, #1
 8029008:	408b      	lsls	r3, r1
 802900a:	408a      	lsls	r2, r1
 802900c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8029010:	9307      	str	r3, [sp, #28]
 8029012:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8029014:	a950      	add	r1, sp, #320	@ 0x140
 8029016:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 8029018:	a846      	add	r0, sp, #280	@ 0x118
 802901a:	933c      	str	r3, [sp, #240]	@ 0xf0
 802901c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802901e:	9243      	str	r2, [sp, #268]	@ 0x10c
 8029020:	933b      	str	r3, [sp, #236]	@ 0xec
 8029022:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8029024:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8029026:	9252      	str	r2, [sp, #328]	@ 0x148
 8029028:	9340      	str	r3, [sp, #256]	@ 0x100
 802902a:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 802902c:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 802902e:	9253      	str	r2, [sp, #332]	@ 0x14c
 8029030:	933f      	str	r3, [sp, #252]	@ 0xfc
 8029032:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8029034:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029036:	9254      	str	r2, [sp, #336]	@ 0x150
 8029038:	9344      	str	r3, [sp, #272]	@ 0x110
 802903a:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 802903c:	fb03 f303 	mul.w	r3, r3, r3
 8029040:	9255      	str	r2, [sp, #340]	@ 0x154
 8029042:	fb07 f303 	mul.w	r3, r7, r3
 8029046:	9a76      	ldr	r2, [sp, #472]	@ 0x1d8
 8029048:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802904c:	aa3a      	add	r2, sp, #232	@ 0xe8
 802904e:	9315      	str	r3, [sp, #84]	@ 0x54
 8029050:	ab42      	add	r3, sp, #264	@ 0x108
 8029052:	9300      	str	r3, [sp, #0]
 8029054:	ab3e      	add	r3, sp, #248	@ 0xf8
 8029056:	f7fe fc75 	bl	8027944 <ai_padding_opt_init>
 802905a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802905c:	fbb7 f3f3 	udiv	r3, r7, r3
 8029060:	079a      	lsls	r2, r3, #30
 8029062:	9319      	str	r3, [sp, #100]	@ 0x64
 8029064:	f040 848b 	bne.w	802997e <st_sssa8_convolve_dw+0x9e2>
 8029068:	2204      	movs	r2, #4
 802906a:	109b      	asrs	r3, r3, #2
 802906c:	9219      	str	r2, [sp, #100]	@ 0x64
 802906e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8029070:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8029072:	4252      	negs	r2, r2
 8029074:	eac2 4b02 	pkhbt	fp, r2, r2, lsl #16
 8029078:	2900      	cmp	r1, #0
 802907a:	f000 81a9 	beq.w	80293d0 <st_sssa8_convolve_dw+0x434>
 802907e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8029080:	08be      	lsrs	r6, r7, #2
 8029082:	9d2c      	ldr	r5, [sp, #176]	@ 0xb0
 8029084:	46d8      	mov	r8, fp
 8029086:	9831      	ldr	r0, [sp, #196]	@ 0xc4
 8029088:	fb01 f303 	mul.w	r3, r1, r3
 802908c:	1e72      	subs	r2, r6, #1
 802908e:	9624      	str	r6, [sp, #144]	@ 0x90
 8029090:	932f      	str	r3, [sp, #188]	@ 0xbc
 8029092:	fb00 f305 	mul.w	r3, r0, r5
 8029096:	b292      	uxth	r2, r2
 8029098:	f3c3 044f 	ubfx	r4, r3, #1, #16
 802909c:	fb15 f300 	smulbb	r3, r5, r0
 80290a0:	9805      	ldr	r0, [sp, #20]
 80290a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80290a4:	1e81      	subs	r1, r0, #2
 80290a6:	b298      	uxth	r0, r3
 80290a8:	f003 0301 	and.w	r3, r3, #1
 80290ac:	9023      	str	r0, [sp, #140]	@ 0x8c
 80290ae:	3801      	subs	r0, #1
 80290b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80290b2:	1e63      	subs	r3, r4, #1
 80290b4:	2401      	movs	r4, #1
 80290b6:	b280      	uxth	r0, r0
 80290b8:	b29b      	uxth	r3, r3
 80290ba:	408c      	lsls	r4, r1
 80290bc:	3001      	adds	r0, #1
 80290be:	9413      	str	r4, [sp, #76]	@ 0x4c
 80290c0:	9c32      	ldr	r4, [sp, #200]	@ 0xc8
 80290c2:	901b      	str	r0, [sp, #108]	@ 0x6c
 80290c4:	1c58      	adds	r0, r3, #1
 80290c6:	4261      	negs	r1, r4
 80290c8:	011b      	lsls	r3, r3, #4
 80290ca:	b28c      	uxth	r4, r1
 80290cc:	932a      	str	r3, [sp, #168]	@ 0xa8
 80290ce:	1c53      	adds	r3, r2, #1
 80290d0:	9430      	str	r4, [sp, #192]	@ 0xc0
 80290d2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80290d4:	1e61      	subs	r1, r4, #1
 80290d6:	9120      	str	r1, [sp, #128]	@ 0x80
 80290d8:	08a1      	lsrs	r1, r4, #2
 80290da:	f024 0403 	bic.w	r4, r4, #3
 80290de:	0089      	lsls	r1, r1, #2
 80290e0:	9421      	str	r4, [sp, #132]	@ 0x84
 80290e2:	9c6e      	ldr	r4, [sp, #440]	@ 0x1b8
 80290e4:	9126      	str	r1, [sp, #152]	@ 0x98
 80290e6:	f104 0120 	add.w	r1, r4, #32
 80290ea:	0104      	lsls	r4, r0, #4
 80290ec:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80290f0:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80290f2:	9410      	str	r4, [sp, #64]	@ 0x40
 80290f4:	2400      	movs	r4, #0
 80290f6:	920d      	str	r2, [sp, #52]	@ 0x34
 80290f8:	fb00 f207 	mul.w	r2, r0, r7
 80290fc:	0052      	lsls	r2, r2, #1
 80290fe:	920f      	str	r2, [sp, #60]	@ 0x3c
 8029100:	fb01 f205 	mul.w	r2, r1, r5
 8029104:	e9dd 1520 	ldrd	r1, r5, [sp, #128]	@ 0x80
 8029108:	9237      	str	r2, [sp, #220]	@ 0xdc
 802910a:	f007 0203 	and.w	r2, r7, #3
 802910e:	1b49      	subs	r1, r1, r5
 8029110:	4625      	mov	r5, r4
 8029112:	921e      	str	r2, [sp, #120]	@ 0x78
 8029114:	9125      	str	r1, [sp, #148]	@ 0x94
 8029116:	0079      	lsls	r1, r7, #1
 8029118:	9129      	str	r1, [sp, #164]	@ 0xa4
 802911a:	0099      	lsls	r1, r3, #2
 802911c:	912b      	str	r1, [sp, #172]	@ 0xac
 802911e:	996e      	ldr	r1, [sp, #440]	@ 0x1b8
 8029120:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8029124:	9338      	str	r3, [sp, #224]	@ 0xe0
 8029126:	00b3      	lsls	r3, r6, #2
 8029128:	463e      	mov	r6, r7
 802912a:	9339      	str	r3, [sp, #228]	@ 0xe4
 802912c:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802912e:	0043      	lsls	r3, r0, #1
 8029130:	932e      	str	r3, [sp, #184]	@ 0xb8
 8029132:	f89d 305c 	ldrb.w	r3, [sp, #92]	@ 0x5c
 8029136:	ee08 3a10 	vmov	s16, r3
 802913a:	a846      	add	r0, sp, #280	@ 0x118
 802913c:	f7fe fc5c 	bl	80279f8 <ai_padding_opt_phase1>
 8029140:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8029142:	2b00      	cmp	r3, #0
 8029144:	f000 8421 	beq.w	802998a <st_sssa8_convolve_dw+0x9ee>
 8029148:	b2a3      	uxth	r3, r4
 802914a:	9336      	str	r3, [sp, #216]	@ 0xd8
 802914c:	e9dd 3231 	ldrd	r3, r2, [sp, #196]	@ 0xc4
 8029150:	1a9b      	subs	r3, r3, r2
 8029152:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 8029154:	fb02 3305 	mla	r3, r2, r5, r3
 8029158:	f9bd 20c0 	ldrsh.w	r2, [sp, #192]	@ 0xc0
 802915c:	9311      	str	r3, [sp, #68]	@ 0x44
 802915e:	2300      	movs	r3, #0
 8029160:	921f      	str	r2, [sp, #124]	@ 0x7c
 8029162:	4619      	mov	r1, r3
 8029164:	9a46      	ldr	r2, [sp, #280]	@ 0x118
 8029166:	2a00      	cmp	r2, #0
 8029168:	f000 81f3 	beq.w	8029552 <st_sssa8_convolve_dw+0x5b6>
 802916c:	3a01      	subs	r2, #1
 802916e:	9246      	str	r2, [sp, #280]	@ 0x118
 8029170:	2201      	movs	r2, #1
 8029172:	f8ad 213e 	strh.w	r2, [sp, #318]	@ 0x13e
 8029176:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8029178:	2a01      	cmp	r2, #1
 802917a:	f000 8261 	beq.w	8029640 <st_sssa8_convolve_dw+0x6a4>
 802917e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8029180:	2a04      	cmp	r2, #4
 8029182:	f000 8394 	beq.w	80298ae <st_sssa8_convolve_dw+0x912>
 8029186:	b29b      	uxth	r3, r3
 8029188:	2a02      	cmp	r2, #2
 802918a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802918c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802918e:	931c      	str	r3, [sp, #112]	@ 0x70
 8029190:	f000 82a5 	beq.w	80296de <st_sssa8_convolve_dw+0x742>
 8029194:	4282      	cmp	r2, r0
 8029196:	dd46      	ble.n	8029226 <st_sssa8_convolve_dw+0x28a>
 8029198:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 802919a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802919c:	fb01 0102 	mla	r1, r1, r2, r0
 80291a0:	fb13 f302 	smulbb	r3, r3, r2
 80291a4:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80291a6:	1a1b      	subs	r3, r3, r0
 80291a8:	1a0f      	subs	r7, r1, r0
 80291aa:	b21b      	sxth	r3, r3
 80291ac:	42bb      	cmp	r3, r7
 80291ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80291b0:	da39      	bge.n	8029226 <st_sssa8_convolve_dw+0x28a>
 80291b2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80291b4:	46b3      	mov	fp, r6
 80291b6:	f8cd 80d4 	str.w	r8, [sp, #212]	@ 0xd4
 80291ba:	ee18 aa10 	vmov	sl, s16
 80291be:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
 80291c2:	f8dd 80b4 	ldr.w	r8, [sp, #180]	@ 0xb4
 80291c6:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 80291c8:	9703      	str	r7, [sp, #12]
 80291ca:	9306      	str	r3, [sp, #24]
 80291cc:	9a06      	ldr	r2, [sp, #24]
 80291ce:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80291d0:	0fd2      	lsrs	r2, r2, #31
 80291d2:	4299      	cmp	r1, r3
 80291d4:	bfd8      	it	le
 80291d6:	f042 0201 	orrle.w	r2, r2, #1
 80291da:	fb08 f303 	mul.w	r3, r8, r3
 80291de:	9204      	str	r2, [sp, #16]
 80291e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80291e2:	9308      	str	r3, [sp, #32]
 80291e4:	4614      	mov	r4, r2
 80291e6:	0fe3      	lsrs	r3, r4, #31
 80291e8:	4590      	cmp	r8, r2
 80291ea:	bfd8      	it	le
 80291ec:	f043 0301 	orrle.w	r3, r3, #1
 80291f0:	b91b      	cbnz	r3, 80291fa <st_sssa8_convolve_dw+0x25e>
 80291f2:	9b04      	ldr	r3, [sp, #16]
 80291f4:	2b00      	cmp	r3, #0
 80291f6:	f000 813e 	beq.w	8029476 <st_sssa8_convolve_dw+0x4da>
 80291fa:	465a      	mov	r2, fp
 80291fc:	4649      	mov	r1, r9
 80291fe:	4650      	mov	r0, sl
 8029200:	f002 fcc6 	bl	802bb90 <st_uint8_fill>
 8029204:	3401      	adds	r4, #1
 8029206:	9b03      	ldr	r3, [sp, #12]
 8029208:	44d9      	add	r9, fp
 802920a:	b224      	sxth	r4, r4
 802920c:	429c      	cmp	r4, r3
 802920e:	4622      	mov	r2, r4
 8029210:	dbe9      	blt.n	80291e6 <st_sssa8_convolve_dw+0x24a>
 8029212:	9b06      	ldr	r3, [sp, #24]
 8029214:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029216:	3301      	adds	r3, #1
 8029218:	b21b      	sxth	r3, r3
 802921a:	428b      	cmp	r3, r1
 802921c:	9306      	str	r3, [sp, #24]
 802921e:	dbd5      	blt.n	80291cc <st_sssa8_convolve_dw+0x230>
 8029220:	f8dd 80d4 	ldr.w	r8, [sp, #212]	@ 0xd4
 8029224:	465e      	mov	r6, fp
 8029226:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029228:	2b00      	cmp	r3, #0
 802922a:	f000 81d0 	beq.w	80295ce <st_sssa8_convolve_dw+0x632>
 802922e:	9b6e      	ldr	r3, [sp, #440]	@ 0x1b8
 8029230:	46b3      	mov	fp, r6
 8029232:	9f76      	ldr	r7, [sp, #472]	@ 0x1d8
 8029234:	f103 0e10 	add.w	lr, r3, #16
 8029238:	9b73      	ldr	r3, [sp, #460]	@ 0x1cc
 802923a:	3304      	adds	r3, #4
 802923c:	f8cd e010 	str.w	lr, [sp, #16]
 8029240:	f8dd e0a4 	ldr.w	lr, [sp, #164]	@ 0xa4
 8029244:	9306      	str	r3, [sp, #24]
 8029246:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8029248:	9303      	str	r3, [sp, #12]
 802924a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802924c:	3320      	adds	r3, #32
 802924e:	930e      	str	r3, [sp, #56]	@ 0x38
 8029250:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 8029254:	930a      	str	r3, [sp, #40]	@ 0x28
 8029256:	9b05      	ldr	r3, [sp, #20]
 8029258:	f1c3 0301 	rsb	r3, r3, #1
 802925c:	931a      	str	r3, [sp, #104]	@ 0x68
 802925e:	9b04      	ldr	r3, [sp, #16]
 8029260:	9a03      	ldr	r2, [sp, #12]
 8029262:	e953 5404 	ldrd	r5, r4, [r3, #-16]
 8029266:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 802926a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802926c:	b3ab      	cbz	r3, 80292da <st_sssa8_convolve_dw+0x33e>
 802926e:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8029270:	f107 0310 	add.w	r3, r7, #16
 8029274:	9708      	str	r7, [sp, #32]
 8029276:	eb07 0c06 	add.w	ip, r7, r6
 802927a:	465e      	mov	r6, fp
 802927c:	f8d2 b000 	ldr.w	fp, [r2]
 8029280:	f852 9006 	ldr.w	r9, [r2, r6]
 8029284:	4472      	add	r2, lr
 8029286:	eacb 4a09 	pkhbt	sl, fp, r9, lsl #16
 802928a:	f853 7c10 	ldr.w	r7, [r3, #-16]
 802928e:	eac9 492b 	pkhtb	r9, r9, fp, asr #16
 8029292:	fa28 fb8a 	sxtab16	fp, r8, sl
 8029296:	fb27 550b 	smlad	r5, r7, fp, r5
 802929a:	ea4f 2a3a 	mov.w	sl, sl, ror #8
 802929e:	f853 7c0c 	ldr.w	r7, [r3, #-12]
 80292a2:	fa28 fa8a 	sxtab16	sl, r8, sl
 80292a6:	fb27 440a 	smlad	r4, r7, sl, r4
 80292aa:	f853 7c08 	ldr.w	r7, [r3, #-8]
 80292ae:	fa28 fa89 	sxtab16	sl, r8, r9
 80292b2:	fb27 000a 	smlad	r0, r7, sl, r0
 80292b6:	ea4f 2939 	mov.w	r9, r9, ror #8
 80292ba:	f853 7c04 	ldr.w	r7, [r3, #-4]
 80292be:	fa28 f989 	sxtab16	r9, r8, r9
 80292c2:	fb27 1109 	smlad	r1, r7, r9, r1
 80292c6:	3310      	adds	r3, #16
 80292c8:	459c      	cmp	ip, r3
 80292ca:	d1d7      	bne.n	802927c <st_sssa8_convolve_dw+0x2e0>
 80292cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80292ce:	46b3      	mov	fp, r6
 80292d0:	9f08      	ldr	r7, [sp, #32]
 80292d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80292d4:	441f      	add	r7, r3
 80292d6:	9b03      	ldr	r3, [sp, #12]
 80292d8:	189a      	adds	r2, r3, r2
 80292da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80292dc:	b1e3      	cbz	r3, 8029318 <st_sssa8_convolve_dw+0x37c>
 80292de:	6813      	ldr	r3, [r2, #0]
 80292e0:	3708      	adds	r7, #8
 80292e2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80292e4:	b25a      	sxtb	r2, r3
 80292e6:	f837 cc08 	ldrh.w	ip, [r7, #-8]
 80292ea:	f837 9c06 	ldrh.w	r9, [r7, #-6]
 80292ee:	1b92      	subs	r2, r2, r6
 80292f0:	f837 ac04 	ldrh.w	sl, [r7, #-4]
 80292f4:	fb1c 5502 	smlabb	r5, ip, r2, r5
 80292f8:	f343 2207 	sbfx	r2, r3, #8, #8
 80292fc:	1b92      	subs	r2, r2, r6
 80292fe:	fb19 4402 	smlabb	r4, r9, r2, r4
 8029302:	f343 4207 	sbfx	r2, r3, #16, #8
 8029306:	ebc6 6323 	rsb	r3, r6, r3, asr #24
 802930a:	1b92      	subs	r2, r2, r6
 802930c:	fb1a 0002 	smlabb	r0, sl, r2, r0
 8029310:	f837 2c02 	ldrh.w	r2, [r7, #-2]
 8029314:	fb12 1103 	smlabb	r1, r2, r3, r1
 8029318:	9b05      	ldr	r3, [sp, #20]
 802931a:	2b15      	cmp	r3, #21
 802931c:	dd5e      	ble.n	80293dc <st_sssa8_convolve_dw+0x440>
 802931e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8029320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029322:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8029324:	fb55 2503 	smmla	r5, r5, r3, r2
 8029328:	fb54 2c03 	smmla	ip, r4, r3, r2
 802932c:	4135      	asrs	r5, r6
 802932e:	9c07      	ldr	r4, [sp, #28]
 8029330:	fb50 2003 	smmla	r0, r0, r3, r2
 8029334:	4425      	add	r5, r4
 8029336:	fb51 2103 	smmla	r1, r1, r3, r2
 802933a:	f305 0507 	ssat	r5, #8, r5
 802933e:	fa4c f406 	asr.w	r4, ip, r6
 8029342:	9b07      	ldr	r3, [sp, #28]
 8029344:	b26d      	sxtb	r5, r5
 8029346:	441c      	add	r4, r3
 8029348:	f304 0207 	ssat	r2, #8, r4
 802934c:	4130      	asrs	r0, r6
 802934e:	b252      	sxtb	r2, r2
 8029350:	4418      	add	r0, r3
 8029352:	f300 0007 	ssat	r0, #8, r0
 8029356:	4131      	asrs	r1, r6
 8029358:	b240      	sxtb	r0, r0
 802935a:	4419      	add	r1, r3
 802935c:	f301 0307 	ssat	r3, #8, r1
 8029360:	b25b      	sxtb	r3, r3
 8029362:	9903      	ldr	r1, [sp, #12]
 8029364:	9c04      	ldr	r4, [sp, #16]
 8029366:	3104      	adds	r1, #4
 8029368:	3410      	adds	r4, #16
 802936a:	9103      	str	r1, [sp, #12]
 802936c:	2100      	movs	r1, #0
 802936e:	9404      	str	r4, [sp, #16]
 8029370:	f365 0107 	bfi	r1, r5, #0, #8
 8029374:	f362 210f 	bfi	r1, r2, #8, #8
 8029378:	f360 4117 	bfi	r1, r0, #16, #8
 802937c:	f363 611f 	bfi	r1, r3, #24, #8
 8029380:	9b06      	ldr	r3, [sp, #24]
 8029382:	f843 1c04 	str.w	r1, [r3, #-4]
 8029386:	3304      	adds	r3, #4
 8029388:	9306      	str	r3, [sp, #24]
 802938a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802938c:	42a3      	cmp	r3, r4
 802938e:	f47f af66 	bne.w	802925e <st_sssa8_convolve_dw+0x2c2>
 8029392:	9b73      	ldr	r3, [sp, #460]	@ 0x1cc
 8029394:	4639      	mov	r1, r7
 8029396:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8029398:	465e      	mov	r6, fp
 802939a:	4413      	add	r3, r2
 802939c:	9373      	str	r3, [sp, #460]	@ 0x1cc
 802939e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80293a0:	2b00      	cmp	r3, #0
 80293a2:	f040 81f9 	bne.w	8029798 <st_sssa8_convolve_dw+0x7fc>
 80293a6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80293a8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80293aa:	3301      	adds	r3, #1
 80293ac:	b21b      	sxth	r3, r3
 80293ae:	429a      	cmp	r2, r3
 80293b0:	4619      	mov	r1, r3
 80293b2:	f73f aed7 	bgt.w	8029164 <st_sssa8_convolve_dw+0x1c8>
 80293b6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80293b8:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 80293ba:	9c36      	ldr	r4, [sp, #216]	@ 0xd8
 80293bc:	4413      	add	r3, r2
 80293be:	3401      	adds	r4, #1
 80293c0:	b29b      	uxth	r3, r3
 80293c2:	b224      	sxth	r4, r4
 80293c4:	9330      	str	r3, [sp, #192]	@ 0xc0
 80293c6:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80293c8:	4625      	mov	r5, r4
 80293ca:	42a3      	cmp	r3, r4
 80293cc:	f73f aeb5 	bgt.w	802913a <st_sssa8_convolve_dw+0x19e>
 80293d0:	2000      	movs	r0, #0
 80293d2:	b05b      	add	sp, #364	@ 0x16c
 80293d4:	ecbd 8b02 	vpop	{d8}
 80293d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80293dc:	2b00      	cmp	r3, #0
 80293de:	dd20      	ble.n	8029422 <st_sssa8_convolve_dw+0x486>
 80293e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80293e2:	006d      	lsls	r5, r5, #1
 80293e4:	9e07      	ldr	r6, [sp, #28]
 80293e6:	0064      	lsls	r4, r4, #1
 80293e8:	fb55 6502 	smmla	r5, r5, r2, r6
 80293ec:	0040      	lsls	r0, r0, #1
 80293ee:	411d      	asrs	r5, r3
 80293f0:	0049      	lsls	r1, r1, #1
 80293f2:	fb54 6402 	smmla	r4, r4, r2, r6
 80293f6:	fb50 6002 	smmla	r0, r0, r2, r6
 80293fa:	fb51 6102 	smmla	r1, r1, r2, r6
 80293fe:	f305 0507 	ssat	r5, #8, r5
 8029402:	b26d      	sxtb	r5, r5
 8029404:	fa44 f203 	asr.w	r2, r4, r3
 8029408:	f302 0207 	ssat	r2, #8, r2
 802940c:	b252      	sxtb	r2, r2
 802940e:	4118      	asrs	r0, r3
 8029410:	f300 0007 	ssat	r0, #8, r0
 8029414:	b240      	sxtb	r0, r0
 8029416:	fa41 f303 	asr.w	r3, r1, r3
 802941a:	f303 0307 	ssat	r3, #8, r3
 802941e:	b25b      	sxtb	r3, r3
 8029420:	e79f      	b.n	8029362 <st_sssa8_convolve_dw+0x3c6>
 8029422:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8029424:	409d      	lsls	r5, r3
 8029426:	f305 051f 	ssat	r5, #32, r5
 802942a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 802942c:	fb55 f516 	smmulr	r5, r5, r6
 8029430:	fa04 f203 	lsl.w	r2, r4, r3
 8029434:	f302 021f 	ssat	r2, #32, r2
 8029438:	fb52 f216 	smmulr	r2, r2, r6
 802943c:	4098      	lsls	r0, r3
 802943e:	f300 001f 	ssat	r0, #32, r0
 8029442:	fb50 f016 	smmulr	r0, r0, r6
 8029446:	fa01 f303 	lsl.w	r3, r1, r3
 802944a:	f303 031f 	ssat	r3, #32, r3
 802944e:	fb53 f316 	smmulr	r3, r3, r6
 8029452:	9907      	ldr	r1, [sp, #28]
 8029454:	440d      	add	r5, r1
 8029456:	f305 0507 	ssat	r5, #8, r5
 802945a:	b26d      	sxtb	r5, r5
 802945c:	440a      	add	r2, r1
 802945e:	f302 0207 	ssat	r2, #8, r2
 8029462:	b252      	sxtb	r2, r2
 8029464:	4408      	add	r0, r1
 8029466:	f300 0007 	ssat	r0, #8, r0
 802946a:	b240      	sxtb	r0, r0
 802946c:	440b      	add	r3, r1
 802946e:	f303 0307 	ssat	r3, #8, r3
 8029472:	b25b      	sxtb	r3, r3
 8029474:	e775      	b.n	8029362 <st_sssa8_convolve_dw+0x3c6>
 8029476:	9b08      	ldr	r3, [sp, #32]
 8029478:	9918      	ldr	r1, [sp, #96]	@ 0x60
 802947a:	441a      	add	r2, r3
 802947c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802947e:	fb03 1502 	mla	r5, r3, r2, r1
 8029482:	2b00      	cmp	r3, #0
 8029484:	f43f aebe 	beq.w	8029204 <st_sssa8_convolve_dw+0x268>
 8029488:	2e00      	cmp	r6, #0
 802948a:	f43f aebb 	beq.w	8029204 <st_sssa8_convolve_dw+0x268>
 802948e:	4648      	mov	r0, r9
 8029490:	464a      	mov	r2, r9
 8029492:	ee07 aa90 	vmov	s15, sl
 8029496:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
 802949a:	f8cd b074 	str.w	fp, [sp, #116]	@ 0x74
 802949e:	eb05 0e03 	add.w	lr, r5, r3
 80294a2:	46c3      	mov	fp, r8
 80294a4:	f8dd 9094 	ldr.w	r9, [sp, #148]	@ 0x94
 80294a8:	f8dd c084 	ldr.w	ip, [sp, #132]	@ 0x84
 80294ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	@ 0x80
 80294b0:	f8dd a098 	ldr.w	sl, [sp, #152]	@ 0x98
 80294b4:	941a      	str	r4, [sp, #104]	@ 0x68
 80294b6:	3501      	adds	r5, #1
 80294b8:	4614      	mov	r4, r2
 80294ba:	42aa      	cmp	r2, r5
 80294bc:	f105 31ff 	add.w	r1, r5, #4294967295
 80294c0:	4432      	add	r2, r6
 80294c2:	bf34      	ite	cc
 80294c4:	2300      	movcc	r3, #0
 80294c6:	2301      	movcs	r3, #1
 80294c8:	428a      	cmp	r2, r1
 80294ca:	bf98      	it	ls
 80294cc:	f043 0301 	orrls.w	r3, r3, #1
 80294d0:	b393      	cbz	r3, 8029538 <st_sssa8_convolve_dw+0x59c>
 80294d2:	f1b8 0f05 	cmp.w	r8, #5
 80294d6:	d92f      	bls.n	8029538 <st_sssa8_convolve_dw+0x59c>
 80294d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80294dc:	2100      	movs	r1, #0
 80294de:	eb00 070a 	add.w	r7, r0, sl
 80294e2:	f363 0107 	bfi	r1, r3, #0, #8
 80294e6:	f363 210f 	bfi	r1, r3, #8, #8
 80294ea:	f363 4117 	bfi	r1, r3, #16, #8
 80294ee:	f363 611f 	bfi	r1, r3, #24, #8
 80294f2:	4603      	mov	r3, r0
 80294f4:	f843 1b04 	str.w	r1, [r3], #4
 80294f8:	429f      	cmp	r7, r3
 80294fa:	d1fb      	bne.n	80294f4 <st_sssa8_convolve_dw+0x558>
 80294fc:	4566      	cmp	r6, ip
 80294fe:	eb04 030c 	add.w	r3, r4, ip
 8029502:	d00d      	beq.n	8029520 <st_sssa8_convolve_dw+0x584>
 8029504:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8029508:	f804 100c 	strb.w	r1, [r4, ip]
 802950c:	f1b9 0f00 	cmp.w	r9, #0
 8029510:	d006      	beq.n	8029520 <st_sssa8_convolve_dw+0x584>
 8029512:	f1b9 0f01 	cmp.w	r9, #1
 8029516:	7059      	strb	r1, [r3, #1]
 8029518:	d002      	beq.n	8029520 <st_sssa8_convolve_dw+0x584>
 802951a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802951e:	7099      	strb	r1, [r3, #2]
 8029520:	45ae      	cmp	lr, r5
 8029522:	4430      	add	r0, r6
 8029524:	d1c7      	bne.n	80294b6 <st_sssa8_convolve_dw+0x51a>
 8029526:	46d8      	mov	r8, fp
 8029528:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
 802952c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 802952e:	ee17 aa90 	vmov	sl, s15
 8029532:	f8dd b074 	ldr.w	fp, [sp, #116]	@ 0x74
 8029536:	e665      	b.n	8029204 <st_sssa8_convolve_dw+0x268>
 8029538:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802953c:	f804 3b01 	strb.w	r3, [r4], #1
 8029540:	4294      	cmp	r4, r2
 8029542:	d0ed      	beq.n	8029520 <st_sssa8_convolve_dw+0x584>
 8029544:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8029548:	f804 3b01 	strb.w	r3, [r4], #1
 802954c:	4294      	cmp	r4, r2
 802954e:	d1f3      	bne.n	8029538 <st_sssa8_convolve_dw+0x59c>
 8029550:	e7e6      	b.n	8029520 <st_sssa8_convolve_dw+0x584>
 8029552:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8029554:	2a00      	cmp	r2, #0
 8029556:	d069      	beq.n	802962c <st_sssa8_convolve_dw+0x690>
 8029558:	3a01      	subs	r2, #1
 802955a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802955c:	9247      	str	r2, [sp, #284]	@ 0x11c
 802955e:	2801      	cmp	r0, #1
 8029560:	f8bd 213c 	ldrh.w	r2, [sp, #316]	@ 0x13c
 8029564:	f8ad 213e 	strh.w	r2, [sp, #318]	@ 0x13e
 8029568:	f47f ae09 	bne.w	802917e <st_sssa8_convolve_dw+0x1e2>
 802956c:	2a01      	cmp	r2, #1
 802956e:	d067      	beq.n	8029640 <st_sssa8_convolve_dw+0x6a4>
 8029570:	b29b      	uxth	r3, r3
 8029572:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8029574:	931c      	str	r3, [sp, #112]	@ 0x70
 8029576:	fb13 f502 	smulbb	r5, r3, r2
 802957a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802957c:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 802957e:	1aed      	subs	r5, r5, r3
 8029580:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8029582:	4293      	cmp	r3, r2
 8029584:	b22d      	sxth	r5, r5
 8029586:	f77f ae4e 	ble.w	8029226 <st_sssa8_convolve_dw+0x28a>
 802958a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 802958c:	4614      	mov	r4, r2
 802958e:	f8cd 800c 	str.w	r8, [sp, #12]
 8029592:	4610      	mov	r0, r2
 8029594:	46b8      	mov	r8, r7
 8029596:	9604      	str	r6, [sp, #16]
 8029598:	9f37      	ldr	r7, [sp, #220]	@ 0xdc
 802959a:	4699      	mov	r9, r3
 802959c:	f8dd a060 	ldr.w	sl, [sp, #96]	@ 0x60
 80295a0:	f8dd b0b4 	ldr.w	fp, [sp, #180]	@ 0xb4
 80295a4:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80295a6:	3401      	adds	r4, #1
 80295a8:	fb00 500b 	mla	r0, r0, fp, r5
 80295ac:	4641      	mov	r1, r8
 80295ae:	463a      	mov	r2, r7
 80295b0:	b224      	sxth	r4, r4
 80295b2:	fb06 a000 	mla	r0, r6, r0, sl
 80295b6:	f001 f871 	bl	802a69c <st_int8_copy>
 80295ba:	44b8      	add	r8, r7
 80295bc:	454c      	cmp	r4, r9
 80295be:	4620      	mov	r0, r4
 80295c0:	dbf1      	blt.n	80295a6 <st_sssa8_convolve_dw+0x60a>
 80295c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80295c4:	e9dd 8603 	ldrd	r8, r6, [sp, #12]
 80295c8:	2b00      	cmp	r3, #0
 80295ca:	f47f ae30 	bne.w	802922e <st_sssa8_convolve_dw+0x292>
 80295ce:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80295d0:	2b00      	cmp	r3, #0
 80295d2:	f43f aee8 	beq.w	80293a6 <st_sssa8_convolve_dw+0x40a>
 80295d6:	2e01      	cmp	r6, #1
 80295d8:	f040 81da 	bne.w	8029990 <st_sssa8_convolve_dw+0x9f4>
 80295dc:	9b73      	ldr	r3, [sp, #460]	@ 0x1cc
 80295de:	f103 0c01 	add.w	ip, r3, #1
 80295e2:	9b6e      	ldr	r3, [sp, #440]	@ 0x1b8
 80295e4:	681a      	ldr	r2, [r3, #0]
 80295e6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80295e8:	b173      	cbz	r3, 8029608 <st_sssa8_convolve_dw+0x66c>
 80295ea:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80295ec:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80295ee:	f9bd 705c 	ldrsh.w	r7, [sp, #92]	@ 0x5c
 80295f2:	18cd      	adds	r5, r1, r3
 80295f4:	9876      	ldr	r0, [sp, #472]	@ 0x1d8
 80295f6:	f911 3b01 	ldrsb.w	r3, [r1], #1
 80295fa:	f830 4b02 	ldrh.w	r4, [r0], #2
 80295fe:	1bdb      	subs	r3, r3, r7
 8029600:	42a9      	cmp	r1, r5
 8029602:	fb13 2204 	smlabb	r2, r3, r4, r2
 8029606:	d1f6      	bne.n	80295f6 <st_sssa8_convolve_dw+0x65a>
 8029608:	9b05      	ldr	r3, [sp, #20]
 802960a:	2b15      	cmp	r3, #21
 802960c:	f340 8129 	ble.w	8029862 <st_sssa8_convolve_dw+0x8c6>
 8029610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029612:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8029614:	fb52 1303 	smmla	r3, r2, r3, r1
 8029618:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802961a:	4113      	asrs	r3, r2
 802961c:	9a07      	ldr	r2, [sp, #28]
 802961e:	4413      	add	r3, r2
 8029620:	f303 0307 	ssat	r3, #8, r3
 8029624:	b25b      	sxtb	r3, r3
 8029626:	f80c 3c01 	strb.w	r3, [ip, #-1]
 802962a:	e108      	b.n	802983e <st_sssa8_convolve_dw+0x8a2>
 802962c:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 802962e:	3a01      	subs	r2, #1
 8029630:	9248      	str	r2, [sp, #288]	@ 0x120
 8029632:	2201      	movs	r2, #1
 8029634:	f8ad 213e 	strh.w	r2, [sp, #318]	@ 0x13e
 8029638:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802963a:	2a01      	cmp	r2, #1
 802963c:	f47f ad9f 	bne.w	802917e <st_sssa8_convolve_dw+0x1e2>
 8029640:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8029642:	b29b      	uxth	r3, r3
 8029644:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8029646:	931c      	str	r3, [sp, #112]	@ 0x70
 8029648:	4290      	cmp	r0, r2
 802964a:	f77f adec 	ble.w	8029226 <st_sssa8_convolve_dw+0x28a>
 802964e:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8029650:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8029652:	fb01 4100 	mla	r1, r1, r0, r4
 8029656:	fb13 f300 	smulbb	r3, r3, r0
 802965a:	9c27      	ldr	r4, [sp, #156]	@ 0x9c
 802965c:	1b1b      	subs	r3, r3, r4
 802965e:	1b0d      	subs	r5, r1, r4
 8029660:	b21b      	sxth	r3, r3
 8029662:	42ab      	cmp	r3, r5
 8029664:	9306      	str	r3, [sp, #24]
 8029666:	f6bf adde 	bge.w	8029226 <st_sssa8_convolve_dw+0x28a>
 802966a:	f8cd 8020 	str.w	r8, [sp, #32]
 802966e:	4693      	mov	fp, r2
 8029670:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 8029674:	4613      	mov	r3, r2
 8029676:	9f2d      	ldr	r7, [sp, #180]	@ 0xb4
 8029678:	46b1      	mov	r9, r6
 802967a:	ee18 8a10 	vmov	r8, s16
 802967e:	ea4f 76db 	mov.w	r6, fp, lsr #31
 8029682:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8029684:	f8dd e018 	ldr.w	lr, [sp, #24]
 8029688:	429a      	cmp	r2, r3
 802968a:	bfd8      	it	le
 802968c:	f046 0601 	orrle.w	r6, r6, #1
 8029690:	fb07 f303 	mul.w	r3, r7, r3
 8029694:	4674      	mov	r4, lr
 8029696:	9304      	str	r3, [sp, #16]
 8029698:	9603      	str	r6, [sp, #12]
 802969a:	4577      	cmp	r7, lr
 802969c:	464a      	mov	r2, r9
 802969e:	4651      	mov	r1, sl
 80296a0:	4640      	mov	r0, r8
 80296a2:	bfcc      	ite	gt
 80296a4:	2300      	movgt	r3, #0
 80296a6:	2301      	movle	r3, #1
 80296a8:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 80296ac:	d103      	bne.n	80296b6 <st_sssa8_convolve_dw+0x71a>
 80296ae:	9b03      	ldr	r3, [sp, #12]
 80296b0:	2b00      	cmp	r3, #0
 80296b2:	f000 80f2 	beq.w	802989a <st_sssa8_convolve_dw+0x8fe>
 80296b6:	f002 fa6b 	bl	802bb90 <st_uint8_fill>
 80296ba:	3401      	adds	r4, #1
 80296bc:	44ca      	add	sl, r9
 80296be:	b224      	sxth	r4, r4
 80296c0:	42ac      	cmp	r4, r5
 80296c2:	46a6      	mov	lr, r4
 80296c4:	dbe9      	blt.n	802969a <st_sssa8_convolve_dw+0x6fe>
 80296c6:	f10b 0b01 	add.w	fp, fp, #1
 80296ca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80296cc:	fa0f fb8b 	sxth.w	fp, fp
 80296d0:	4593      	cmp	fp, r2
 80296d2:	465b      	mov	r3, fp
 80296d4:	dbd3      	blt.n	802967e <st_sssa8_convolve_dw+0x6e2>
 80296d6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80296da:	464e      	mov	r6, r9
 80296dc:	e5a3      	b.n	8029226 <st_sssa8_convolve_dw+0x28a>
 80296de:	4282      	cmp	r2, r0
 80296e0:	f77f ada1 	ble.w	8029226 <st_sssa8_convolve_dw+0x28a>
 80296e4:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80296e6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80296e8:	fb01 0102 	mla	r1, r1, r2, r0
 80296ec:	fb13 f302 	smulbb	r3, r3, r2
 80296f0:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80296f2:	1a1b      	subs	r3, r3, r0
 80296f4:	1a0d      	subs	r5, r1, r0
 80296f6:	b21b      	sxth	r3, r3
 80296f8:	42ab      	cmp	r3, r5
 80296fa:	9304      	str	r3, [sp, #16]
 80296fc:	f6bf ad93 	bge.w	8029226 <st_sssa8_convolve_dw+0x28a>
 8029700:	f8dd a07c 	ldr.w	sl, [sp, #124]	@ 0x7c
 8029704:	f8cd 8018 	str.w	r8, [sp, #24]
 8029708:	46b0      	mov	r8, r6
 802970a:	46d1      	mov	r9, sl
 802970c:	4653      	mov	r3, sl
 802970e:	f8dd b054 	ldr.w	fp, [sp, #84]	@ 0x54
 8029712:	ee18 aa10 	vmov	sl, s16
 8029716:	9f2d      	ldr	r7, [sp, #180]	@ 0xb4
 8029718:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802971a:	9904      	ldr	r1, [sp, #16]
 802971c:	429a      	cmp	r2, r3
 802971e:	fb03 f307 	mul.w	r3, r3, r7
 8029722:	460c      	mov	r4, r1
 8029724:	bfcc      	ite	gt
 8029726:	2600      	movgt	r6, #0
 8029728:	2601      	movle	r6, #1
 802972a:	9303      	str	r3, [sp, #12]
 802972c:	ea46 76d9 	orr.w	r6, r6, r9, lsr #31
 8029730:	0fe3      	lsrs	r3, r4, #31
 8029732:	428f      	cmp	r7, r1
 8029734:	bfd8      	it	le
 8029736:	f043 0301 	orrle.w	r3, r3, #1
 802973a:	b903      	cbnz	r3, 802973e <st_sssa8_convolve_dw+0x7a2>
 802973c:	b1b6      	cbz	r6, 802976c <st_sssa8_convolve_dw+0x7d0>
 802973e:	4642      	mov	r2, r8
 8029740:	4659      	mov	r1, fp
 8029742:	4650      	mov	r0, sl
 8029744:	f002 fa24 	bl	802bb90 <st_uint8_fill>
 8029748:	3401      	adds	r4, #1
 802974a:	44c3      	add	fp, r8
 802974c:	b224      	sxth	r4, r4
 802974e:	42ac      	cmp	r4, r5
 8029750:	4621      	mov	r1, r4
 8029752:	dbed      	blt.n	8029730 <st_sssa8_convolve_dw+0x794>
 8029754:	f109 0901 	add.w	r9, r9, #1
 8029758:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802975a:	fa0f f989 	sxth.w	r9, r9
 802975e:	4591      	cmp	r9, r2
 8029760:	464b      	mov	r3, r9
 8029762:	dbd9      	blt.n	8029718 <st_sssa8_convolve_dw+0x77c>
 8029764:	4646      	mov	r6, r8
 8029766:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802976a:	e55c      	b.n	8029226 <st_sssa8_convolve_dw+0x28a>
 802976c:	9b03      	ldr	r3, [sp, #12]
 802976e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8029770:	440b      	add	r3, r1
 8029772:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8029774:	fb02 1303 	mla	r3, r2, r3, r1
 8029778:	2a00      	cmp	r2, #0
 802977a:	d0e5      	beq.n	8029748 <st_sssa8_convolve_dw+0x7ac>
 802977c:	eb03 0c02 	add.w	ip, r3, r2
 8029780:	4658      	mov	r0, fp
 8029782:	f813 1b01 	ldrb.w	r1, [r3], #1
 8029786:	4563      	cmp	r3, ip
 8029788:	ea4f 2201 	mov.w	r2, r1, lsl #8
 802978c:	fa32 f281 	uxtab16	r2, r2, r1
 8029790:	f820 2b02 	strh.w	r2, [r0], #2
 8029794:	d1f5      	bne.n	8029782 <st_sssa8_convolve_dw+0x7e6>
 8029796:	e7d7      	b.n	8029748 <st_sssa8_convolve_dw+0x7ac>
 8029798:	e9dd e738 	ldrd	lr, r7, [sp, #224]	@ 0xe0
 802979c:	443b      	add	r3, r7
 802979e:	f8cd 800c 	str.w	r8, [sp, #12]
 80297a2:	f9bd 505c 	ldrsh.w	r5, [sp, #92]	@ 0x5c
 80297a6:	460a      	mov	r2, r1
 80297a8:	fa1f f983 	uxth.w	r9, r3
 80297ac:	9b73      	ldr	r3, [sp, #460]	@ 0x1cc
 80297ae:	f103 0c01 	add.w	ip, r3, #1
 80297b2:	9b05      	ldr	r3, [sp, #20]
 80297b4:	f1c3 0a01 	rsb	sl, r3, #1
 80297b8:	4698      	mov	r8, r3
 80297ba:	1c7b      	adds	r3, r7, #1
 80297bc:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80297be:	19c8      	adds	r0, r1, r7
 80297c0:	b29f      	uxth	r7, r3
 80297c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80297c4:	f85e 1b04 	ldr.w	r1, [lr], #4
 80297c8:	2b00      	cmp	r3, #0
 80297ca:	f000 80d6 	beq.w	802997a <st_sssa8_convolve_dw+0x9de>
 80297ce:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80297d0:	eb02 0b03 	add.w	fp, r2, r3
 80297d4:	f990 3000 	ldrsb.w	r3, [r0]
 80297d8:	4430      	add	r0, r6
 80297da:	f832 4b02 	ldrh.w	r4, [r2], #2
 80297de:	1b5b      	subs	r3, r3, r5
 80297e0:	455a      	cmp	r2, fp
 80297e2:	fb14 1103 	smlabb	r1, r4, r3, r1
 80297e6:	d1f5      	bne.n	80297d4 <st_sssa8_convolve_dw+0x838>
 80297e8:	f1b8 0f15 	cmp.w	r8, #21
 80297ec:	dd12      	ble.n	8029814 <st_sssa8_convolve_dw+0x878>
 80297ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80297f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80297f2:	fb51 2303 	smmla	r3, r1, r3, r2
 80297f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80297f8:	4113      	asrs	r3, r2
 80297fa:	9a07      	ldr	r2, [sp, #28]
 80297fc:	4413      	add	r3, r2
 80297fe:	f303 0307 	ssat	r3, #8, r3
 8029802:	b25b      	sxtb	r3, r3
 8029804:	454f      	cmp	r7, r9
 8029806:	f80c 3c01 	strb.w	r3, [ip, #-1]
 802980a:	f10c 0c01 	add.w	ip, ip, #1
 802980e:	d014      	beq.n	802983a <st_sssa8_convolve_dw+0x89e>
 8029810:	465a      	mov	r2, fp
 8029812:	e7d2      	b.n	80297ba <st_sssa8_convolve_dw+0x81e>
 8029814:	f1b8 0f00 	cmp.w	r8, #0
 8029818:	dd16      	ble.n	8029848 <st_sssa8_convolve_dw+0x8ac>
 802981a:	004b      	lsls	r3, r1, #1
 802981c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802981e:	9907      	ldr	r1, [sp, #28]
 8029820:	fb53 1302 	smmla	r3, r3, r2, r1
 8029824:	fa43 f308 	asr.w	r3, r3, r8
 8029828:	f303 0307 	ssat	r3, #8, r3
 802982c:	b25b      	sxtb	r3, r3
 802982e:	454f      	cmp	r7, r9
 8029830:	f10c 0c01 	add.w	ip, ip, #1
 8029834:	f80c 3c02 	strb.w	r3, [ip, #-2]
 8029838:	d1ea      	bne.n	8029810 <st_sssa8_convolve_dw+0x874>
 802983a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 802983e:	9b73      	ldr	r3, [sp, #460]	@ 0x1cc
 8029840:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8029842:	4413      	add	r3, r2
 8029844:	9373      	str	r3, [sp, #460]	@ 0x1cc
 8029846:	e5ae      	b.n	80293a6 <st_sssa8_convolve_dw+0x40a>
 8029848:	fa01 f30a 	lsl.w	r3, r1, sl
 802984c:	f303 031f 	ssat	r3, #32, r3
 8029850:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029852:	fb53 f312 	smmulr	r3, r3, r2
 8029856:	9a07      	ldr	r2, [sp, #28]
 8029858:	4413      	add	r3, r2
 802985a:	f303 0307 	ssat	r3, #8, r3
 802985e:	b25b      	sxtb	r3, r3
 8029860:	e7d0      	b.n	8029804 <st_sssa8_convolve_dw+0x868>
 8029862:	2b00      	cmp	r3, #0
 8029864:	4619      	mov	r1, r3
 8029866:	dd09      	ble.n	802987c <st_sssa8_convolve_dw+0x8e0>
 8029868:	0053      	lsls	r3, r2, #1
 802986a:	9807      	ldr	r0, [sp, #28]
 802986c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802986e:	fb53 0302 	smmla	r3, r3, r2, r0
 8029872:	410b      	asrs	r3, r1
 8029874:	f303 0307 	ssat	r3, #8, r3
 8029878:	b25b      	sxtb	r3, r3
 802987a:	e6d4      	b.n	8029626 <st_sssa8_convolve_dw+0x68a>
 802987c:	f1c3 0301 	rsb	r3, r3, #1
 8029880:	fa02 f303 	lsl.w	r3, r2, r3
 8029884:	f303 031f 	ssat	r3, #32, r3
 8029888:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802988a:	fb53 f312 	smmulr	r3, r3, r2
 802988e:	9a07      	ldr	r2, [sp, #28]
 8029890:	4413      	add	r3, r2
 8029892:	f303 0307 	ssat	r3, #8, r3
 8029896:	b25b      	sxtb	r3, r3
 8029898:	e6c5      	b.n	8029626 <st_sssa8_convolve_dw+0x68a>
 802989a:	9b04      	ldr	r3, [sp, #16]
 802989c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802989e:	eb03 000e 	add.w	r0, r3, lr
 80298a2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80298a4:	fb02 3000 	mla	r0, r2, r0, r3
 80298a8:	f000 fef8 	bl	802a69c <st_int8_copy>
 80298ac:	e705      	b.n	80296ba <st_sssa8_convolve_dw+0x71e>
 80298ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80298b0:	b29b      	uxth	r3, r3
 80298b2:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80298b4:	931c      	str	r3, [sp, #112]	@ 0x70
 80298b6:	4282      	cmp	r2, r0
 80298b8:	f77f acb5 	ble.w	8029226 <st_sssa8_convolve_dw+0x28a>
 80298bc:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80298be:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80298c0:	fb01 0102 	mla	r1, r1, r2, r0
 80298c4:	fb13 f302 	smulbb	r3, r3, r2
 80298c8:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80298ca:	1a1b      	subs	r3, r3, r0
 80298cc:	1a0d      	subs	r5, r1, r0
 80298ce:	b21b      	sxth	r3, r3
 80298d0:	42ab      	cmp	r3, r5
 80298d2:	9304      	str	r3, [sp, #16]
 80298d4:	f6bf aca7 	bge.w	8029226 <st_sssa8_convolve_dw+0x28a>
 80298d8:	f8dd 907c 	ldr.w	r9, [sp, #124]	@ 0x7c
 80298dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80298e0:	46b0      	mov	r8, r6
 80298e2:	46cb      	mov	fp, r9
 80298e4:	464b      	mov	r3, r9
 80298e6:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 80298ea:	ee18 9a10 	vmov	r9, s16
 80298ee:	9f2d      	ldr	r7, [sp, #180]	@ 0xb4
 80298f0:	ea4f 76db 	mov.w	r6, fp, lsr #31
 80298f4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80298f6:	9904      	ldr	r1, [sp, #16]
 80298f8:	429a      	cmp	r2, r3
 80298fa:	bfd8      	it	le
 80298fc:	f046 0601 	orrle.w	r6, r6, #1
 8029900:	fb03 f307 	mul.w	r3, r3, r7
 8029904:	460c      	mov	r4, r1
 8029906:	9303      	str	r3, [sp, #12]
 8029908:	428f      	cmp	r7, r1
 802990a:	bfcc      	ite	gt
 802990c:	2300      	movgt	r3, #0
 802990e:	2301      	movle	r3, #1
 8029910:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 8029914:	d100      	bne.n	8029918 <st_sssa8_convolve_dw+0x97c>
 8029916:	b1b6      	cbz	r6, 8029946 <st_sssa8_convolve_dw+0x9aa>
 8029918:	4642      	mov	r2, r8
 802991a:	4651      	mov	r1, sl
 802991c:	4648      	mov	r0, r9
 802991e:	f002 f937 	bl	802bb90 <st_uint8_fill>
 8029922:	3401      	adds	r4, #1
 8029924:	44c2      	add	sl, r8
 8029926:	b224      	sxth	r4, r4
 8029928:	42ac      	cmp	r4, r5
 802992a:	4621      	mov	r1, r4
 802992c:	dbec      	blt.n	8029908 <st_sssa8_convolve_dw+0x96c>
 802992e:	f10b 0b01 	add.w	fp, fp, #1
 8029932:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8029934:	fa0f fb8b 	sxth.w	fp, fp
 8029938:	4593      	cmp	fp, r2
 802993a:	465b      	mov	r3, fp
 802993c:	dbd8      	blt.n	80298f0 <st_sssa8_convolve_dw+0x954>
 802993e:	4646      	mov	r6, r8
 8029940:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8029944:	e46f      	b.n	8029226 <st_sssa8_convolve_dw+0x28a>
 8029946:	9b03      	ldr	r3, [sp, #12]
 8029948:	185a      	adds	r2, r3, r1
 802994a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802994c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 802994e:	fb01 3202 	mla	r2, r1, r2, r3
 8029952:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8029954:	2b00      	cmp	r3, #0
 8029956:	d0e4      	beq.n	8029922 <st_sssa8_convolve_dw+0x986>
 8029958:	18d0      	adds	r0, r2, r3
 802995a:	4651      	mov	r1, sl
 802995c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8029960:	4282      	cmp	r2, r0
 8029962:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8029966:	eac3 4303 	pkhbt	r3, r3, r3, lsl #16
 802996a:	ea4f 2c33 	mov.w	ip, r3, ror #8
 802996e:	fa33 f38c 	uxtab16	r3, r3, ip
 8029972:	f841 3b04 	str.w	r3, [r1], #4
 8029976:	d1f1      	bne.n	802995c <st_sssa8_convolve_dw+0x9c0>
 8029978:	e7d3      	b.n	8029922 <st_sssa8_convolve_dw+0x986>
 802997a:	4693      	mov	fp, r2
 802997c:	e734      	b.n	80297e8 <st_sssa8_convolve_dw+0x84c>
 802997e:	2301      	movs	r3, #1
 8029980:	f7ff bb75 	b.w	802906e <st_sssa8_convolve_dw+0xd2>
 8029984:	9307      	str	r3, [sp, #28]
 8029986:	f7ff bb44 	b.w	8029012 <st_sssa8_convolve_dw+0x76>
 802998a:	b2a3      	uxth	r3, r4
 802998c:	9336      	str	r3, [sp, #216]	@ 0xd8
 802998e:	e512      	b.n	80293b6 <st_sssa8_convolve_dw+0x41a>
 8029990:	9b76      	ldr	r3, [sp, #472]	@ 0x1d8
 8029992:	f8dd e1b8 	ldr.w	lr, [sp, #440]	@ 0x1b8
 8029996:	4619      	mov	r1, r3
 8029998:	9f24      	ldr	r7, [sp, #144]	@ 0x90
 802999a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802999c:	e6fe      	b.n	802979c <st_sssa8_convolve_dw+0x800>
 802999e:	bf00      	nop

080299a0 <st_sssa8_convolve_rgb>:
 80299a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80299a4:	ed2d 8b02 	vpush	{d8}
 80299a8:	b0c7      	sub	sp, #284	@ 0x11c
 80299aa:	2a03      	cmp	r2, #3
 80299ac:	4682      	mov	sl, r0
 80299ae:	468b      	mov	fp, r1
 80299b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80299b2:	f8bd 3148 	ldrh.w	r3, [sp, #328]	@ 0x148
 80299b6:	f8bd 414c 	ldrh.w	r4, [sp, #332]	@ 0x14c
 80299ba:	9312      	str	r3, [sp, #72]	@ 0x48
 80299bc:	f8bd 3150 	ldrh.w	r3, [sp, #336]	@ 0x150
 80299c0:	f8bd 5170 	ldrh.w	r5, [sp, #368]	@ 0x170
 80299c4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80299c6:	f8bd 3154 	ldrh.w	r3, [sp, #340]	@ 0x154
 80299ca:	f99d 6164 	ldrsb.w	r6, [sp, #356]	@ 0x164
 80299ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80299d0:	9410      	str	r4, [sp, #64]	@ 0x40
 80299d2:	f99d 3168 	ldrsb.w	r3, [sp, #360]	@ 0x168
 80299d6:	950e      	str	r5, [sp, #56]	@ 0x38
 80299d8:	e9dd 1057 	ldrd	r1, r0, [sp, #348]	@ 0x15c
 80299dc:	f040 83c2 	bne.w	802a164 <st_sssa8_convolve_rgb+0x7c4>
 80299e0:	680a      	ldr	r2, [r1, #0]
 80299e2:	f9b0 0000 	ldrsh.w	r0, [r0]
 80299e6:	9216      	str	r2, [sp, #88]	@ 0x58
 80299e8:	fb14 f204 	smulbb	r2, r4, r4
 80299ec:	4601      	mov	r1, r0
 80299ee:	9017      	str	r0, [sp, #92]	@ 0x5c
 80299f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80299f4:	b294      	uxth	r4, r2
 80299f6:	1e42      	subs	r2, r0, #1
 80299f8:	985d      	ldr	r0, [sp, #372]	@ 0x174
 80299fa:	921c      	str	r2, [sp, #112]	@ 0x70
 80299fc:	b292      	uxth	r2, r2
 80299fe:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8029a02:	9413      	str	r4, [sp, #76]	@ 0x4c
 8029a04:	2a14      	cmp	r2, #20
 8029a06:	901e      	str	r0, [sp, #120]	@ 0x78
 8029a08:	f240 83a4 	bls.w	802a154 <st_sssa8_convolve_rgb+0x7b4>
 8029a0c:	9314      	str	r3, [sp, #80]	@ 0x50
 8029a0e:	462b      	mov	r3, r5
 8029a10:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8029a12:	a93c      	add	r1, sp, #240	@ 0xf0
 8029a14:	a832      	add	r0, sp, #200	@ 0xc8
 8029a16:	fb02 f402 	mul.w	r4, r2, r2
 8029a1a:	e9cd 332b 	strd	r3, r3, [sp, #172]	@ 0xac
 8029a1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8029a20:	0065      	lsls	r5, r4, #1
 8029a22:	e9cd 3340 	strd	r3, r3, [sp, #256]	@ 0x100
 8029a26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029a28:	e9cd 333e 	strd	r3, r3, [sp, #248]	@ 0xf8
 8029a2c:	ab2e      	add	r3, sp, #184	@ 0xb8
 8029a2e:	e9cd 222f 	strd	r2, r2, [sp, #188]	@ 0xbc
 8029a32:	9300      	str	r3, [sp, #0]
 8029a34:	aa26      	add	r2, sp, #152	@ 0x98
 8029a36:	ab2a      	add	r3, sp, #168	@ 0xa8
 8029a38:	e9cd bb27 	strd	fp, fp, [sp, #156]	@ 0x9c
 8029a3c:	f7fd ff82 	bl	8027944 <ai_padding_opt_init>
 8029a40:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8029a42:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8029a46:	995d      	ldr	r1, [sp, #372]	@ 0x174
 8029a48:	4413      	add	r3, r2
 8029a4a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8029a4e:	ee08 3a10 	vmov	s16, r3
 8029a52:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8029a54:	fb02 f303 	mul.w	r3, r2, r3
 8029a58:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8029a5c:	f340 8370 	ble.w	802a140 <st_sssa8_convolve_rgb+0x7a0>
 8029a60:	2300      	movs	r3, #0
 8029a62:	9321      	str	r3, [sp, #132]	@ 0x84
 8029a64:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8029a66:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8029a6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8029a6e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8029a70:	f023 0301 	bic.w	r3, r3, #1
 8029a74:	4293      	cmp	r3, r2
 8029a76:	bf28      	it	cs
 8029a78:	4613      	movcs	r3, r2
 8029a7a:	2b01      	cmp	r3, #1
 8029a7c:	931f      	str	r3, [sp, #124]	@ 0x7c
 8029a7e:	f240 81a4 	bls.w	8029dca <st_sssa8_convolve_rgb+0x42a>
 8029a82:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8029a84:	4613      	mov	r3, r2
 8029a86:	fbb2 f2f1 	udiv	r2, r2, r1
 8029a8a:	fb01 3312 	mls	r3, r1, r2, r3
 8029a8e:	b292      	uxth	r2, r2
 8029a90:	b29b      	uxth	r3, r3
 8029a92:	921d      	str	r2, [sp, #116]	@ 0x74
 8029a94:	b11b      	cbz	r3, 8029a9e <st_sssa8_convolve_rgb+0xfe>
 8029a96:	4613      	mov	r3, r2
 8029a98:	3301      	adds	r3, #1
 8029a9a:	b29b      	uxth	r3, r3
 8029a9c:	931d      	str	r3, [sp, #116]	@ 0x74
 8029a9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029aa0:	2b00      	cmp	r3, #0
 8029aa2:	f000 8184 	beq.w	8029dae <st_sssa8_convolve_rgb+0x40e>
 8029aa6:	192b      	adds	r3, r5, r4
 8029aa8:	9a5d      	ldr	r2, [sp, #372]	@ 0x174
 8029aaa:	b235      	sxth	r5, r6
 8029aac:	2600      	movs	r6, #0
 8029aae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8029ab2:	4657      	mov	r7, sl
 8029ab4:	4634      	mov	r4, r6
 8029ab6:	46aa      	mov	sl, r5
 8029ab8:	9311      	str	r3, [sp, #68]	@ 0x44
 8029aba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8029abc:	425b      	negs	r3, r3
 8029abe:	b29a      	uxth	r2, r3
 8029ac0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8029ac2:	3b01      	subs	r3, #1
 8029ac4:	9224      	str	r2, [sp, #144]	@ 0x90
 8029ac6:	9220      	str	r2, [sp, #128]	@ 0x80
 8029ac8:	b29b      	uxth	r3, r3
 8029aca:	9325      	str	r3, [sp, #148]	@ 0x94
 8029acc:	a832      	add	r0, sp, #200	@ 0xc8
 8029ace:	f7fd ff93 	bl	80279f8 <ai_padding_opt_phase1>
 8029ad2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8029ad4:	9a5b      	ldr	r2, [sp, #364]	@ 0x16c
 8029ad6:	fb04 f303 	mul.w	r3, r4, r3
 8029ada:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8029adc:	fb01 2303 	mla	r3, r1, r3, r2
 8029ae0:	9319      	str	r3, [sp, #100]	@ 0x64
 8029ae2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8029ae4:	2b00      	cmp	r3, #0
 8029ae6:	f000 8168 	beq.w	8029dba <st_sssa8_convolve_rgb+0x41a>
 8029aea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8029aec:	2b00      	cmp	r3, #0
 8029aee:	f000 814f 	beq.w	8029d90 <st_sssa8_convolve_rgb+0x3f0>
 8029af2:	b2b3      	uxth	r3, r6
 8029af4:	9323      	str	r3, [sp, #140]	@ 0x8c
 8029af6:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	@ 0x3c
 8029afa:	1a9b      	subs	r3, r3, r2
 8029afc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029afe:	fb04 3302 	mla	r3, r4, r2, r3
 8029b02:	9308      	str	r3, [sp, #32]
 8029b04:	f9bd 3080 	ldrsh.w	r3, [sp, #128]	@ 0x80
 8029b08:	930d      	str	r3, [sp, #52]	@ 0x34
 8029b0a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8029b0c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8029b0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8029b10:	931c      	str	r3, [sp, #112]	@ 0x70
 8029b12:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8029b14:	9315      	str	r3, [sp, #84]	@ 0x54
 8029b16:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8029b18:	9322      	str	r3, [sp, #136]	@ 0x88
 8029b1a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8029b1c:	ee08 3a90 	vmov	s17, r3
 8029b20:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8029b22:	2000      	movs	r0, #0
 8029b24:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8029b26:	9333      	str	r3, [sp, #204]	@ 0xcc
 8029b28:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8029b2a:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8029b2c:	9334      	str	r3, [sp, #208]	@ 0xd0
 8029b2e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029b30:	9118      	str	r1, [sp, #96]	@ 0x60
 8029b32:	4601      	mov	r1, r0
 8029b34:	9309      	str	r3, [sp, #36]	@ 0x24
 8029b36:	9232      	str	r2, [sp, #200]	@ 0xc8
 8029b38:	9b5d      	ldr	r3, [sp, #372]	@ 0x174
 8029b3a:	2a00      	cmp	r2, #0
 8029b3c:	d05b      	beq.n	8029bf6 <st_sssa8_convolve_rgb+0x256>
 8029b3e:	3a01      	subs	r2, #1
 8029b40:	9232      	str	r2, [sp, #200]	@ 0xc8
 8029b42:	2201      	movs	r2, #1
 8029b44:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 8029b48:	9a08      	ldr	r2, [sp, #32]
 8029b4a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8029b4c:	42a2      	cmp	r2, r4
 8029b4e:	dd5f      	ble.n	8029c10 <st_sssa8_convolve_rgb+0x270>
 8029b50:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8029b52:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8029b54:	970a      	str	r7, [sp, #40]	@ 0x28
 8029b56:	fb01 2104 	mla	r1, r1, r4, r2
 8029b5a:	b282      	uxth	r2, r0
 8029b5c:	920c      	str	r2, [sp, #48]	@ 0x30
 8029b5e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029b60:	1a8d      	subs	r5, r1, r2
 8029b62:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	@ 0x24
 8029b66:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029b68:	4690      	mov	r8, r2
 8029b6a:	4689      	mov	r9, r1
 8029b6c:	4545      	cmp	r5, r8
 8029b6e:	dd26      	ble.n	8029bbe <st_sssa8_convolve_rgb+0x21e>
 8029b70:	ea4f 7ed9 	mov.w	lr, r9, lsr #31
 8029b74:	1d9a      	adds	r2, r3, #6
 8029b76:	4640      	mov	r0, r8
 8029b78:	fb01 f30b 	mul.w	r3, r1, fp
 8029b7c:	458b      	cmp	fp, r1
 8029b7e:	bfd8      	it	le
 8029b80:	f04e 0e01 	orrle.w	lr, lr, #1
 8029b84:	4646      	mov	r6, r8
 8029b86:	9307      	str	r3, [sp, #28]
 8029b88:	2400      	movs	r4, #0
 8029b8a:	0fc1      	lsrs	r1, r0, #31
 8029b8c:	1c47      	adds	r7, r0, #1
 8029b8e:	4613      	mov	r3, r2
 8029b90:	f36a 040f 	bfi	r4, sl, #0, #16
 8029b94:	45b3      	cmp	fp, r6
 8029b96:	bfd8      	it	le
 8029b98:	f041 0101 	orrle.w	r1, r1, #1
 8029b9c:	f1a2 0c06 	sub.w	ip, r2, #6
 8029ba0:	f36a 441f 	bfi	r4, sl, #16, #16
 8029ba4:	b911      	cbnz	r1, 8029bac <st_sssa8_convolve_rgb+0x20c>
 8029ba6:	f1be 0f00 	cmp.w	lr, #0
 8029baa:	d059      	beq.n	8029c60 <st_sssa8_convolve_rgb+0x2c0>
 8029bac:	b238      	sxth	r0, r7
 8029bae:	f842 4c04 	str.w	r4, [r2, #-4]
 8029bb2:	f822 ac06 	strh.w	sl, [r2, #-6]
 8029bb6:	3206      	adds	r2, #6
 8029bb8:	42a8      	cmp	r0, r5
 8029bba:	4606      	mov	r6, r0
 8029bbc:	dbe4      	blt.n	8029b88 <st_sssa8_convolve_rgb+0x1e8>
 8029bbe:	f109 0901 	add.w	r9, r9, #1
 8029bc2:	9a08      	ldr	r2, [sp, #32]
 8029bc4:	fa0f f989 	sxth.w	r9, r9
 8029bc8:	4591      	cmp	r9, r2
 8029bca:	4649      	mov	r1, r9
 8029bcc:	dbce      	blt.n	8029b6c <st_sssa8_convolve_rgb+0x1cc>
 8029bce:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8029bd0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8029bd2:	429a      	cmp	r2, r3
 8029bd4:	d021      	beq.n	8029c1a <st_sssa8_convolve_rgb+0x27a>
 8029bd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029bd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029bda:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029bdc:	440a      	add	r2, r1
 8029bde:	3001      	adds	r0, #1
 8029be0:	b292      	uxth	r2, r2
 8029be2:	b200      	sxth	r0, r0
 8029be4:	9209      	str	r2, [sp, #36]	@ 0x24
 8029be6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8029be8:	4601      	mov	r1, r0
 8029bea:	4282      	cmp	r2, r0
 8029bec:	f340 808f 	ble.w	8029d0e <st_sssa8_convolve_rgb+0x36e>
 8029bf0:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8029bf2:	2a00      	cmp	r2, #0
 8029bf4:	d1a3      	bne.n	8029b3e <st_sssa8_convolve_rgb+0x19e>
 8029bf6:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 8029bf8:	2a00      	cmp	r2, #0
 8029bfa:	d14c      	bne.n	8029c96 <st_sssa8_convolve_rgb+0x2f6>
 8029bfc:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 8029bfe:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8029c00:	3a01      	subs	r2, #1
 8029c02:	9234      	str	r2, [sp, #208]	@ 0xd0
 8029c04:	2201      	movs	r2, #1
 8029c06:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 8029c0a:	9a08      	ldr	r2, [sp, #32]
 8029c0c:	42a2      	cmp	r2, r4
 8029c0e:	dc9f      	bgt.n	8029b50 <st_sssa8_convolve_rgb+0x1b0>
 8029c10:	b282      	uxth	r2, r0
 8029c12:	920c      	str	r2, [sp, #48]	@ 0x30
 8029c14:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8029c16:	429a      	cmp	r2, r3
 8029c18:	d1dd      	bne.n	8029bd6 <st_sssa8_convolve_rgb+0x236>
 8029c1a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029c1c:	ee18 2a90 	vmov	r2, s17
 8029c20:	995d      	ldr	r1, [sp, #372]	@ 0x174
 8029c22:	ee18 0a10 	vmov	r0, s16
 8029c26:	9305      	str	r3, [sp, #20]
 8029c28:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8029c2a:	9304      	str	r3, [sp, #16]
 8029c2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8029c2e:	9303      	str	r3, [sp, #12]
 8029c30:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8029c32:	9302      	str	r3, [sp, #8]
 8029c34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8029c36:	9301      	str	r3, [sp, #4]
 8029c38:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8029c3a:	9300      	str	r3, [sp, #0]
 8029c3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8029c3e:	f001 fb3f 	bl	802b2c0 <st_sssa8_nn_mat_mult_kernel_opt>
 8029c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029c44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029c46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029c48:	440b      	add	r3, r1
 8029c4a:	9018      	str	r0, [sp, #96]	@ 0x60
 8029c4c:	3201      	adds	r2, #1
 8029c4e:	b29b      	uxth	r3, r3
 8029c50:	b210      	sxth	r0, r2
 8029c52:	9309      	str	r3, [sp, #36]	@ 0x24
 8029c54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029c56:	4601      	mov	r1, r0
 8029c58:	4283      	cmp	r3, r0
 8029c5a:	dd6f      	ble.n	8029d3c <st_sssa8_convolve_rgb+0x39c>
 8029c5c:	9b5d      	ldr	r3, [sp, #372]	@ 0x174
 8029c5e:	e7c7      	b.n	8029bf0 <st_sssa8_convolve_rgb+0x250>
 8029c60:	9b07      	ldr	r3, [sp, #28]
 8029c62:	3001      	adds	r0, #1
 8029c64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8029c66:	441e      	add	r6, r3
 8029c68:	b200      	sxth	r0, r0
 8029c6a:	4613      	mov	r3, r2
 8029c6c:	3206      	adds	r2, #6
 8029c6e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8029c72:	42a8      	cmp	r0, r5
 8029c74:	5989      	ldr	r1, [r1, r6]
 8029c76:	4606      	mov	r6, r0
 8029c78:	fa2f f481 	sxtb16	r4, r1
 8029c7c:	ea4f 2131 	mov.w	r1, r1, ror #8
 8029c80:	fa2f f181 	sxtb16	r1, r1
 8029c84:	eac1 0104 	pkhbt	r1, r1, r4
 8029c88:	f8cc 1002 	str.w	r1, [ip, #2]
 8029c8c:	f822 4c0c 	strh.w	r4, [r2, #-12]
 8029c90:	f6ff af7a 	blt.w	8029b88 <st_sssa8_convolve_rgb+0x1e8>
 8029c94:	e793      	b.n	8029bbe <st_sssa8_convolve_rgb+0x21e>
 8029c96:	3a01      	subs	r2, #1
 8029c98:	9233      	str	r2, [sp, #204]	@ 0xcc
 8029c9a:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	@ 0xec
 8029c9e:	2a01      	cmp	r2, #1
 8029ca0:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 8029ca4:	f43f af50 	beq.w	8029b48 <st_sssa8_convolve_rgb+0x1a8>
 8029ca8:	9a08      	ldr	r2, [sp, #32]
 8029caa:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8029cac:	42a2      	cmp	r2, r4
 8029cae:	ddaf      	ble.n	8029c10 <st_sssa8_convolve_rgb+0x270>
 8029cb0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8029cb2:	4696      	mov	lr, r2
 8029cb4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8029cb6:	f9bd c024 	ldrsh.w	ip, [sp, #36]	@ 0x24
 8029cba:	fb01 2104 	mla	r1, r1, r4, r2
 8029cbe:	b282      	uxth	r2, r0
 8029cc0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8029cc2:	920c      	str	r2, [sp, #48]	@ 0x30
 8029cc4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029cc6:	4626      	mov	r6, r4
 8029cc8:	1a8d      	subs	r5, r1, r2
 8029cca:	4565      	cmp	r5, ip
 8029ccc:	dd19      	ble.n	8029d02 <st_sssa8_convolve_rgb+0x362>
 8029cce:	fb04 f00b 	mul.w	r0, r4, fp
 8029cd2:	4661      	mov	r1, ip
 8029cd4:	4662      	mov	r2, ip
 8029cd6:	4402      	add	r2, r0
 8029cd8:	3101      	adds	r1, #1
 8029cda:	3306      	adds	r3, #6
 8029cdc:	b209      	sxth	r1, r1
 8029cde:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8029ce2:	42a9      	cmp	r1, r5
 8029ce4:	58ba      	ldr	r2, [r7, r2]
 8029ce6:	fa2f f482 	sxtb16	r4, r2
 8029cea:	ea4f 2232 	mov.w	r2, r2, ror #8
 8029cee:	f823 4c06 	strh.w	r4, [r3, #-6]
 8029cf2:	fa2f f282 	sxtb16	r2, r2
 8029cf6:	eac2 0204 	pkhbt	r2, r2, r4
 8029cfa:	f843 2c04 	str.w	r2, [r3, #-4]
 8029cfe:	460a      	mov	r2, r1
 8029d00:	dbe9      	blt.n	8029cd6 <st_sssa8_convolve_rgb+0x336>
 8029d02:	3601      	adds	r6, #1
 8029d04:	b236      	sxth	r6, r6
 8029d06:	4576      	cmp	r6, lr
 8029d08:	4634      	mov	r4, r6
 8029d0a:	dbde      	blt.n	8029cca <st_sssa8_convolve_rgb+0x32a>
 8029d0c:	e760      	b.n	8029bd0 <st_sssa8_convolve_rgb+0x230>
 8029d0e:	9a5d      	ldr	r2, [sp, #372]	@ 0x174
 8029d10:	429a      	cmp	r2, r3
 8029d12:	d013      	beq.n	8029d3c <st_sssa8_convolve_rgb+0x39c>
 8029d14:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029d16:	4611      	mov	r1, r2
 8029d18:	ee18 0a10 	vmov	r0, s16
 8029d1c:	ee18 2a90 	vmov	r2, s17
 8029d20:	9305      	str	r3, [sp, #20]
 8029d22:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8029d24:	9304      	str	r3, [sp, #16]
 8029d26:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8029d28:	9303      	str	r3, [sp, #12]
 8029d2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8029d2c:	9302      	str	r3, [sp, #8]
 8029d2e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8029d30:	9301      	str	r3, [sp, #4]
 8029d32:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8029d34:	9300      	str	r3, [sp, #0]
 8029d36:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8029d38:	f001 fd84 	bl	802b844 <st_sssa8_nn_mat_mult_kernel_single_opt>
 8029d3c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8029d3e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029d40:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8029d42:	1a9b      	subs	r3, r3, r2
 8029d44:	4411      	add	r1, r2
 8029d46:	b29b      	uxth	r3, r3
 8029d48:	9119      	str	r1, [sp, #100]	@ 0x64
 8029d4a:	429a      	cmp	r2, r3
 8029d4c:	931c      	str	r3, [sp, #112]	@ 0x70
 8029d4e:	bf28      	it	cs
 8029d50:	461a      	movcs	r2, r3
 8029d52:	b294      	uxth	r4, r2
 8029d54:	b954      	cbnz	r4, 8029d6c <st_sssa8_convolve_rgb+0x3cc>
 8029d56:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8029d58:	3b01      	subs	r3, #1
 8029d5a:	b29b      	uxth	r3, r3
 8029d5c:	461a      	mov	r2, r3
 8029d5e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8029d60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8029d64:	429a      	cmp	r2, r3
 8029d66:	d015      	beq.n	8029d94 <st_sssa8_convolve_rgb+0x3f4>
 8029d68:	9415      	str	r4, [sp, #84]	@ 0x54
 8029d6a:	e6d9      	b.n	8029b20 <st_sssa8_convolve_rgb+0x180>
 8029d6c:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8029d6e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8029d70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8029d72:	fb02 1003 	mla	r0, r2, r3, r1
 8029d76:	ee18 1a90 	vmov	r1, s17
 8029d7a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8029d7e:	ee18 1a10 	vmov	r1, s16
 8029d82:	9022      	str	r0, [sp, #136]	@ 0x88
 8029d84:	ee08 3a90 	vmov	s17, r3
 8029d88:	4623      	mov	r3, r4
 8029d8a:	f7fd fc37 	bl	80275fc <st_int8_to16_dual>
 8029d8e:	e7e2      	b.n	8029d56 <st_sssa8_convolve_rgb+0x3b6>
 8029d90:	b2b3      	uxth	r3, r6
 8029d92:	9323      	str	r3, [sp, #140]	@ 0x8c
 8029d94:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029d96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029d98:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8029d9a:	4413      	add	r3, r2
 8029d9c:	3601      	adds	r6, #1
 8029d9e:	b29b      	uxth	r3, r3
 8029da0:	b236      	sxth	r6, r6
 8029da2:	9320      	str	r3, [sp, #128]	@ 0x80
 8029da4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029da6:	4634      	mov	r4, r6
 8029da8:	42b3      	cmp	r3, r6
 8029daa:	f73f ae8f 	bgt.w	8029acc <st_sssa8_convolve_rgb+0x12c>
 8029dae:	2000      	movs	r0, #0
 8029db0:	b047      	add	sp, #284	@ 0x11c
 8029db2:	ecbd 8b02 	vpop	{d8}
 8029db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029dba:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8029dbc:	ee18 1a10 	vmov	r1, s16
 8029dc0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8029dc2:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8029dc4:	f7fd fc1a 	bl	80275fc <st_int8_to16_dual>
 8029dc8:	e68f      	b.n	8029aea <st_sssa8_convolve_rgb+0x14a>
 8029dca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029dcc:	2b00      	cmp	r3, #0
 8029dce:	d0ee      	beq.n	8029dae <st_sssa8_convolve_rgb+0x40e>
 8029dd0:	4425      	add	r5, r4
 8029dd2:	9b5d      	ldr	r3, [sp, #372]	@ 0x174
 8029dd4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029dd6:	2100      	movs	r1, #0
 8029dd8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8029ddc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8029dde:	b230      	sxth	r0, r6
 8029de0:	9f5d      	ldr	r7, [sp, #372]	@ 0x174
 8029de2:	9318      	str	r3, [sp, #96]	@ 0x60
 8029de4:	4253      	negs	r3, r2
 8029de6:	1aa2      	subs	r2, r4, r2
 8029de8:	4606      	mov	r6, r0
 8029dea:	b29b      	uxth	r3, r3
 8029dec:	9115      	str	r1, [sp, #84]	@ 0x54
 8029dee:	921b      	str	r2, [sp, #108]	@ 0x6c
 8029df0:	465a      	mov	r2, fp
 8029df2:	9319      	str	r3, [sp, #100]	@ 0x64
 8029df4:	46d3      	mov	fp, sl
 8029df6:	9311      	str	r3, [sp, #68]	@ 0x44
 8029df8:	4692      	mov	sl, r2
 8029dfa:	460b      	mov	r3, r1
 8029dfc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029dfe:	a832      	add	r0, sp, #200	@ 0xc8
 8029e00:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8029e02:	fb01 2303 	mla	r3, r1, r3, r2
 8029e06:	9307      	str	r3, [sp, #28]
 8029e08:	f7fd fdf6 	bl	80279f8 <ai_padding_opt_phase1>
 8029e0c:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8029e10:	2100      	movs	r1, #0
 8029e12:	930c      	str	r3, [sp, #48]	@ 0x30
 8029e14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8029e16:	9309      	str	r3, [sp, #36]	@ 0x24
 8029e18:	460b      	mov	r3, r1
 8029e1a:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8029e1c:	2a00      	cmp	r2, #0
 8029e1e:	f000 8111 	beq.w	802a044 <st_sssa8_convolve_rgb+0x6a4>
 8029e22:	3a01      	subs	r2, #1
 8029e24:	9232      	str	r2, [sp, #200]	@ 0xc8
 8029e26:	2201      	movs	r2, #1
 8029e28:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 8029e2c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029e2e:	9807      	ldr	r0, [sp, #28]
 8029e30:	4282      	cmp	r2, r0
 8029e32:	f280 8115 	bge.w	802a060 <st_sssa8_convolve_rgb+0x6c0>
 8029e36:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8029e38:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8029e3a:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 8029e3e:	fb03 2300 	mla	r3, r3, r0, r2
 8029e42:	b28a      	uxth	r2, r1
 8029e44:	920a      	str	r2, [sp, #40]	@ 0x28
 8029e46:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029e48:	1a9c      	subs	r4, r3, r2
 8029e4a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8029e4e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029e50:	469b      	mov	fp, r3
 8029e52:	4691      	mov	r9, r2
 8029e54:	45a3      	cmp	fp, r4
 8029e56:	da29      	bge.n	8029eac <st_sssa8_convolve_rgb+0x50c>
 8029e58:	ea4f 78d9 	mov.w	r8, r9, lsr #31
 8029e5c:	1dbb      	adds	r3, r7, #6
 8029e5e:	4659      	mov	r1, fp
 8029e60:	465d      	mov	r5, fp
 8029e62:	4592      	cmp	sl, r2
 8029e64:	bfd8      	it	le
 8029e66:	f048 0801 	orrle.w	r8, r8, #1
 8029e6a:	fb02 f20a 	mul.w	r2, r2, sl
 8029e6e:	9208      	str	r2, [sp, #32]
 8029e70:	2000      	movs	r0, #0
 8029e72:	0fca      	lsrs	r2, r1, #31
 8029e74:	f101 0c01 	add.w	ip, r1, #1
 8029e78:	461f      	mov	r7, r3
 8029e7a:	f366 000f 	bfi	r0, r6, #0, #16
 8029e7e:	45aa      	cmp	sl, r5
 8029e80:	bfd8      	it	le
 8029e82:	f042 0201 	orrle.w	r2, r2, #1
 8029e86:	f1a3 0e06 	sub.w	lr, r3, #6
 8029e8a:	f366 401f 	bfi	r0, r6, #16, #16
 8029e8e:	b91a      	cbnz	r2, 8029e98 <st_sssa8_convolve_rgb+0x4f8>
 8029e90:	f1b8 0f00 	cmp.w	r8, #0
 8029e94:	f000 80bc 	beq.w	802a010 <st_sssa8_convolve_rgb+0x670>
 8029e98:	fa0f f18c 	sxth.w	r1, ip
 8029e9c:	f843 0c04 	str.w	r0, [r3, #-4]
 8029ea0:	f823 6c06 	strh.w	r6, [r3, #-6]
 8029ea4:	3306      	adds	r3, #6
 8029ea6:	42a1      	cmp	r1, r4
 8029ea8:	460d      	mov	r5, r1
 8029eaa:	dbe1      	blt.n	8029e70 <st_sssa8_convolve_rgb+0x4d0>
 8029eac:	f109 0901 	add.w	r9, r9, #1
 8029eb0:	9b07      	ldr	r3, [sp, #28]
 8029eb2:	fa0f f989 	sxth.w	r9, r9
 8029eb6:	4599      	cmp	r9, r3
 8029eb8:	464a      	mov	r2, r9
 8029eba:	dbcb      	blt.n	8029e54 <st_sssa8_convolve_rgb+0x4b4>
 8029ebc:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8029ec0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029ec2:	42bb      	cmp	r3, r7
 8029ec4:	f000 80d2 	beq.w	802a06c <st_sssa8_convolve_rgb+0x6cc>
 8029ec8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8029eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029ecc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029ece:	3101      	adds	r1, #1
 8029ed0:	4413      	add	r3, r2
 8029ed2:	b209      	sxth	r1, r1
 8029ed4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8029ed6:	b29b      	uxth	r3, r3
 8029ed8:	428a      	cmp	r2, r1
 8029eda:	9309      	str	r3, [sp, #36]	@ 0x24
 8029edc:	460b      	mov	r3, r1
 8029ede:	dc9c      	bgt.n	8029e1a <st_sssa8_convolve_rgb+0x47a>
 8029ee0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8029ee2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8029ee4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029ee6:	3201      	adds	r2, #1
 8029ee8:	440b      	add	r3, r1
 8029eea:	b212      	sxth	r2, r2
 8029eec:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8029eee:	b29b      	uxth	r3, r3
 8029ef0:	9215      	str	r2, [sp, #84]	@ 0x54
 8029ef2:	4291      	cmp	r1, r2
 8029ef4:	9311      	str	r3, [sp, #68]	@ 0x44
 8029ef6:	4613      	mov	r3, r2
 8029ef8:	dc80      	bgt.n	8029dfc <st_sssa8_convolve_rgb+0x45c>
 8029efa:	9b5d      	ldr	r3, [sp, #372]	@ 0x174
 8029efc:	42bb      	cmp	r3, r7
 8029efe:	f43f af56 	beq.w	8029dae <st_sssa8_convolve_rgb+0x40e>
 8029f02:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8029f04:	2b00      	cmp	r3, #0
 8029f06:	f43f af52 	beq.w	8029dae <st_sssa8_convolve_rgb+0x40e>
 8029f0a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8029f0c:	3301      	adds	r3, #1
 8029f0e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8029f10:	f1a2 0e04 	sub.w	lr, r2, #4
 8029f14:	9a5b      	ldr	r2, [sp, #364]	@ 0x16c
 8029f16:	f1c0 0b01 	rsb	fp, r0, #1
 8029f1a:	eb02 0903 	add.w	r9, r2, r3
 8029f1e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8029f20:	1c57      	adds	r7, r2, #1
 8029f22:	2201      	movs	r2, #1
 8029f24:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8029f28:	f003 0103 	and.w	r1, r3, #3
 8029f2c:	1e83      	subs	r3, r0, #2
 8029f2e:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8029f30:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8029f34:	fa02 fa03 	lsl.w	sl, r2, r3
 8029f38:	f108 33ff 	add.w	r3, r8, #4294967295
 8029f3c:	b29b      	uxth	r3, r3
 8029f3e:	4413      	add	r3, r2
 8029f40:	1e4a      	subs	r2, r1, #1
 8029f42:	b292      	uxth	r2, r2
 8029f44:	9207      	str	r2, [sp, #28]
 8029f46:	009a      	lsls	r2, r3, #2
 8029f48:	9208      	str	r2, [sp, #32]
 8029f4a:	9a5d      	ldr	r2, [sp, #372]	@ 0x174
 8029f4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8029f50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029f52:	9309      	str	r3, [sp, #36]	@ 0x24
 8029f54:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 8029f58:	2a00      	cmp	r2, #0
 8029f5a:	d044      	beq.n	8029fe6 <st_sssa8_convolve_rgb+0x646>
 8029f5c:	9a08      	ldr	r2, [sp, #32]
 8029f5e:	9c5d      	ldr	r4, [sp, #372]	@ 0x174
 8029f60:	1885      	adds	r5, r0, r2
 8029f62:	f850 2b04 	ldr.w	r2, [r0], #4
 8029f66:	fa2f f692 	sxtb16	r6, r2, ror #8
 8029f6a:	fa2f f282 	sxtb16	r2, r2
 8029f6e:	f8d4 8000 	ldr.w	r8, [r4]
 8029f72:	eac6 4c22 	pkhtb	ip, r6, r2, asr #16
 8029f76:	eac2 4206 	pkhbt	r2, r2, r6, lsl #16
 8029f7a:	fb22 3308 	smlad	r3, r2, r8, r3
 8029f7e:	6862      	ldr	r2, [r4, #4]
 8029f80:	3408      	adds	r4, #8
 8029f82:	fb2c 3302 	smlad	r3, ip, r2, r3
 8029f86:	42a8      	cmp	r0, r5
 8029f88:	d1eb      	bne.n	8029f62 <st_sssa8_convolve_rgb+0x5c2>
 8029f8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029f8c:	b379      	cbz	r1, 8029fee <st_sssa8_convolve_rgb+0x64e>
 8029f8e:	f995 0000 	ldrsb.w	r0, [r5]
 8029f92:	8814      	ldrh	r4, [r2, #0]
 8029f94:	fb14 3300 	smlabb	r3, r4, r0, r3
 8029f98:	9807      	ldr	r0, [sp, #28]
 8029f9a:	b158      	cbz	r0, 8029fb4 <st_sssa8_convolve_rgb+0x614>
 8029f9c:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8029fa0:	2902      	cmp	r1, #2
 8029fa2:	8854      	ldrh	r4, [r2, #2]
 8029fa4:	fb14 3300 	smlabb	r3, r4, r0, r3
 8029fa8:	d004      	beq.n	8029fb4 <st_sssa8_convolve_rgb+0x614>
 8029faa:	8890      	ldrh	r0, [r2, #4]
 8029fac:	f995 2002 	ldrsb.w	r2, [r5, #2]
 8029fb0:	fb10 3302 	smlabb	r3, r0, r2, r3
 8029fb4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8029fb6:	1868      	adds	r0, r5, r1
 8029fb8:	2a15      	cmp	r2, #21
 8029fba:	dd1c      	ble.n	8029ff6 <st_sssa8_convolve_rgb+0x656>
 8029fbc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8029fbe:	fb53 a302 	smmla	r3, r3, r2, sl
 8029fc2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8029fc4:	4113      	asrs	r3, r2
 8029fc6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8029fc8:	4413      	add	r3, r2
 8029fca:	f303 0307 	ssat	r3, #8, r3
 8029fce:	b25b      	sxtb	r3, r3
 8029fd0:	f807 3c01 	strb.w	r3, [r7, #-1]
 8029fd4:	3701      	adds	r7, #1
 8029fd6:	45b9      	cmp	r9, r7
 8029fd8:	f43f aee9 	beq.w	8029dae <st_sssa8_convolve_rgb+0x40e>
 8029fdc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029fde:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 8029fe2:	2a00      	cmp	r2, #0
 8029fe4:	d1ba      	bne.n	8029f5c <st_sssa8_convolve_rgb+0x5bc>
 8029fe6:	4605      	mov	r5, r0
 8029fe8:	9a5d      	ldr	r2, [sp, #372]	@ 0x174
 8029fea:	2900      	cmp	r1, #0
 8029fec:	d1cf      	bne.n	8029f8e <st_sssa8_convolve_rgb+0x5ee>
 8029fee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8029ff0:	4628      	mov	r0, r5
 8029ff2:	2a15      	cmp	r2, #21
 8029ff4:	dce2      	bgt.n	8029fbc <st_sssa8_convolve_rgb+0x61c>
 8029ff6:	2a00      	cmp	r2, #0
 8029ff8:	f340 8095 	ble.w	802a126 <st_sssa8_convolve_rgb+0x786>
 8029ffc:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8029ffe:	005b      	lsls	r3, r3, #1
 802a000:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802a002:	fb53 5304 	smmla	r3, r3, r4, r5
 802a006:	4113      	asrs	r3, r2
 802a008:	f303 0307 	ssat	r3, #8, r3
 802a00c:	b25b      	sxtb	r3, r3
 802a00e:	e7df      	b.n	8029fd0 <st_sssa8_convolve_rgb+0x630>
 802a010:	9a08      	ldr	r2, [sp, #32]
 802a012:	3101      	adds	r1, #1
 802a014:	3306      	adds	r3, #6
 802a016:	4415      	add	r5, r2
 802a018:	b209      	sxth	r1, r1
 802a01a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802a01c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802a020:	42a1      	cmp	r1, r4
 802a022:	5952      	ldr	r2, [r2, r5]
 802a024:	460d      	mov	r5, r1
 802a026:	fa2f f082 	sxtb16	r0, r2
 802a02a:	ea4f 2232 	mov.w	r2, r2, ror #8
 802a02e:	fa2f f282 	sxtb16	r2, r2
 802a032:	eac2 0200 	pkhbt	r2, r2, r0
 802a036:	f8ce 2002 	str.w	r2, [lr, #2]
 802a03a:	f823 0c0c 	strh.w	r0, [r3, #-12]
 802a03e:	f6ff af17 	blt.w	8029e70 <st_sssa8_convolve_rgb+0x4d0>
 802a042:	e733      	b.n	8029eac <st_sssa8_convolve_rgb+0x50c>
 802a044:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 802a046:	2a00      	cmp	r2, #0
 802a048:	d130      	bne.n	802a0ac <st_sssa8_convolve_rgb+0x70c>
 802a04a:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 802a04c:	9807      	ldr	r0, [sp, #28]
 802a04e:	3a01      	subs	r2, #1
 802a050:	9234      	str	r2, [sp, #208]	@ 0xd0
 802a052:	2201      	movs	r2, #1
 802a054:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 802a058:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802a05a:	4282      	cmp	r2, r0
 802a05c:	f6ff aeeb 	blt.w	8029e36 <st_sssa8_convolve_rgb+0x496>
 802a060:	b28b      	uxth	r3, r1
 802a062:	930a      	str	r3, [sp, #40]	@ 0x28
 802a064:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802a066:	42bb      	cmp	r3, r7
 802a068:	f47f af2e 	bne.w	8029ec8 <st_sssa8_convolve_rgb+0x528>
 802a06c:	9b5b      	ldr	r3, [sp, #364]	@ 0x16c
 802a06e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802a070:	9304      	str	r3, [sp, #16]
 802a072:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802a074:	995d      	ldr	r1, [sp, #372]	@ 0x174
 802a076:	9303      	str	r3, [sp, #12]
 802a078:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a07a:	981a      	ldr	r0, [sp, #104]	@ 0x68
 802a07c:	9302      	str	r3, [sp, #8]
 802a07e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802a080:	9301      	str	r3, [sp, #4]
 802a082:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a084:	9300      	str	r3, [sp, #0]
 802a086:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802a088:	f000 fdee 	bl	802ac68 <st_sssa8_nn_mat_mult_kernel>
 802a08c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802a08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a090:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802a092:	3101      	adds	r1, #1
 802a094:	9f5d      	ldr	r7, [sp, #372]	@ 0x174
 802a096:	4413      	add	r3, r2
 802a098:	b209      	sxth	r1, r1
 802a09a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802a09c:	b29b      	uxth	r3, r3
 802a09e:	905b      	str	r0, [sp, #364]	@ 0x16c
 802a0a0:	428a      	cmp	r2, r1
 802a0a2:	9309      	str	r3, [sp, #36]	@ 0x24
 802a0a4:	460b      	mov	r3, r1
 802a0a6:	f73f aeb8 	bgt.w	8029e1a <st_sssa8_convolve_rgb+0x47a>
 802a0aa:	e719      	b.n	8029ee0 <st_sssa8_convolve_rgb+0x540>
 802a0ac:	3a01      	subs	r2, #1
 802a0ae:	9233      	str	r2, [sp, #204]	@ 0xcc
 802a0b0:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	@ 0xec
 802a0b4:	2a01      	cmp	r2, #1
 802a0b6:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
 802a0ba:	f43f aeb7 	beq.w	8029e2c <st_sssa8_convolve_rgb+0x48c>
 802a0be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802a0c0:	9807      	ldr	r0, [sp, #28]
 802a0c2:	4282      	cmp	r2, r0
 802a0c4:	dacc      	bge.n	802a060 <st_sssa8_convolve_rgb+0x6c0>
 802a0c6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802a0c8:	4686      	mov	lr, r0
 802a0ca:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802a0cc:	f9bd c024 	ldrsh.w	ip, [sp, #36]	@ 0x24
 802a0d0:	fb03 2300 	mla	r3, r3, r0, r2
 802a0d4:	b28a      	uxth	r2, r1
 802a0d6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802a0d8:	920a      	str	r2, [sp, #40]	@ 0x28
 802a0da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a0dc:	4605      	mov	r5, r0
 802a0de:	1a9c      	subs	r4, r3, r2
 802a0e0:	45a4      	cmp	ip, r4
 802a0e2:	da1a      	bge.n	802a11a <st_sssa8_convolve_rgb+0x77a>
 802a0e4:	fb00 f10a 	mul.w	r1, r0, sl
 802a0e8:	4662      	mov	r2, ip
 802a0ea:	4663      	mov	r3, ip
 802a0ec:	440b      	add	r3, r1
 802a0ee:	3201      	adds	r2, #1
 802a0f0:	3706      	adds	r7, #6
 802a0f2:	b212      	sxth	r2, r2
 802a0f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802a0f8:	42a2      	cmp	r2, r4
 802a0fa:	f85b 3003 	ldr.w	r3, [fp, r3]
 802a0fe:	fa2f f083 	sxtb16	r0, r3
 802a102:	ea4f 2333 	mov.w	r3, r3, ror #8
 802a106:	f827 0c06 	strh.w	r0, [r7, #-6]
 802a10a:	fa2f f383 	sxtb16	r3, r3
 802a10e:	eac3 0300 	pkhbt	r3, r3, r0
 802a112:	f847 3c04 	str.w	r3, [r7, #-4]
 802a116:	4613      	mov	r3, r2
 802a118:	dbe8      	blt.n	802a0ec <st_sssa8_convolve_rgb+0x74c>
 802a11a:	3501      	adds	r5, #1
 802a11c:	b22d      	sxth	r5, r5
 802a11e:	4575      	cmp	r5, lr
 802a120:	4628      	mov	r0, r5
 802a122:	dbdd      	blt.n	802a0e0 <st_sssa8_convolve_rgb+0x740>
 802a124:	e6cc      	b.n	8029ec0 <st_sssa8_convolve_rgb+0x520>
 802a126:	fa03 f30b 	lsl.w	r3, r3, fp
 802a12a:	f303 031f 	ssat	r3, #32, r3
 802a12e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802a130:	fb53 f312 	smmulr	r3, r3, r2
 802a134:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802a136:	4413      	add	r3, r2
 802a138:	f303 0307 	ssat	r3, #8, r3
 802a13c:	b25b      	sxtb	r3, r3
 802a13e:	e747      	b.n	8029fd0 <st_sssa8_convolve_rgb+0x630>
 802a140:	4613      	mov	r3, r2
 802a142:	ee18 1a10 	vmov	r1, s16
 802a146:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802a148:	981a      	ldr	r0, [sp, #104]	@ 0x68
 802a14a:	f7fd fa57 	bl	80275fc <st_int8_to16_dual>
 802a14e:	2301      	movs	r3, #1
 802a150:	9321      	str	r3, [sp, #132]	@ 0x84
 802a152:	e487      	b.n	8029a64 <st_sssa8_convolve_rgb+0xc4>
 802a154:	2201      	movs	r2, #1
 802a156:	408b      	lsls	r3, r1
 802a158:	408a      	lsls	r2, r1
 802a15a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 802a15e:	9314      	str	r3, [sp, #80]	@ 0x50
 802a160:	462b      	mov	r3, r5
 802a162:	e455      	b.n	8029a10 <st_sssa8_convolve_rgb+0x70>
 802a164:	f06f 0002 	mvn.w	r0, #2
 802a168:	e622      	b.n	8029db0 <st_sssa8_convolve_rgb+0x410>
 802a16a:	bf00      	nop

0802a16c <st_sssa8_ch_fully_connected>:
 802a16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a170:	b097      	sub	sp, #92	@ 0x5c
 802a172:	468a      	mov	sl, r1
 802a174:	4693      	mov	fp, r2
 802a176:	4619      	mov	r1, r3
 802a178:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802a17a:	9314      	str	r3, [sp, #80]	@ 0x50
 802a17c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 802a180:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 802a184:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 802a186:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802a18a:	f99d e088 	ldrsb.w	lr, [sp, #136]	@ 0x88
 802a18e:	9512      	str	r5, [sp, #72]	@ 0x48
 802a190:	930d      	str	r3, [sp, #52]	@ 0x34
 802a192:	f99d 308c 	ldrsb.w	r3, [sp, #140]	@ 0x8c
 802a196:	2900      	cmp	r1, #0
 802a198:	f000 827b 	beq.w	802a692 <st_sssa8_ch_fully_connected+0x526>
 802a19c:	463c      	mov	r4, r7
 802a19e:	3504      	adds	r5, #4
 802a1a0:	ea4f 0841 	mov.w	r8, r1, lsl #1
 802a1a4:	f04f 0c01 	mov.w	ip, #1
 802a1a8:	eb07 0741 	add.w	r7, r7, r1, lsl #1
 802a1ac:	f934 2b02 	ldrsh.w	r2, [r4], #2
 802a1b0:	1e51      	subs	r1, r2, #1
 802a1b2:	fa0c f602 	lsl.w	r6, ip, r2
 802a1b6:	fa03 f202 	lsl.w	r2, r3, r2
 802a1ba:	b289      	uxth	r1, r1
 802a1bc:	eb02 0256 	add.w	r2, r2, r6, lsr #1
 802a1c0:	2914      	cmp	r1, #20
 802a1c2:	f200 81e8 	bhi.w	802a596 <st_sssa8_ch_fully_connected+0x42a>
 802a1c6:	42bc      	cmp	r4, r7
 802a1c8:	f845 2c04 	str.w	r2, [r5, #-4]
 802a1cc:	f105 0504 	add.w	r5, r5, #4
 802a1d0:	d1ec      	bne.n	802a1ac <st_sssa8_ch_fully_connected+0x40>
 802a1d2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802a1d4:	fa1f f38e 	uxth.w	r3, lr
 802a1d8:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 802a1da:	eba7 0508 	sub.w	r5, r7, r8
 802a1de:	0852      	lsrs	r2, r2, #1
 802a1e0:	f8cd e000 	str.w	lr, [sp]
 802a1e4:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 802a1e8:	4631      	mov	r1, r6
 802a1ea:	4614      	mov	r4, r2
 802a1ec:	9215      	str	r2, [sp, #84]	@ 0x54
 802a1ee:	465a      	mov	r2, fp
 802a1f0:	9513      	str	r5, [sp, #76]	@ 0x4c
 802a1f2:	f000 fb39 	bl	802a868 <st_int8_reordered_no_shift_zero>
 802a1f6:	2c00      	cmp	r4, #0
 802a1f8:	f000 8179 	beq.w	802a4ee <st_sssa8_ch_fully_connected+0x382>
 802a1fc:	9824      	ldr	r0, [sp, #144]	@ 0x90
 802a1fe:	1e62      	subs	r2, r4, #1
 802a200:	f1ab 0310 	sub.w	r3, fp, #16
 802a204:	46d9      	mov	r9, fp
 802a206:	b292      	uxth	r2, r2
 802a208:	f100 0110 	add.w	r1, r0, #16
 802a20c:	091b      	lsrs	r3, r3, #4
 802a20e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 802a212:	3301      	adds	r3, #1
 802a214:	920e      	str	r2, [sp, #56]	@ 0x38
 802a216:	f1ab 0203 	sub.w	r2, fp, #3
 802a21a:	920f      	str	r2, [sp, #60]	@ 0x3c
 802a21c:	4602      	mov	r2, r0
 802a21e:	3208      	adds	r2, #8
 802a220:	9208      	str	r2, [sp, #32]
 802a222:	1d2a      	adds	r2, r5, #4
 802a224:	9207      	str	r2, [sp, #28]
 802a226:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802a228:	3202      	adds	r2, #2
 802a22a:	9204      	str	r2, [sp, #16]
 802a22c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802a22e:	3204      	adds	r2, #4
 802a230:	9205      	str	r2, [sp, #20]
 802a232:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802a234:	3204      	adds	r2, #4
 802a236:	9206      	str	r2, [sp, #24]
 802a238:	011a      	lsls	r2, r3, #4
 802a23a:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 802a23e:	9209      	str	r2, [sp, #36]	@ 0x24
 802a240:	9310      	str	r3, [sp, #64]	@ 0x40
 802a242:	f1ab 0304 	sub.w	r3, fp, #4
 802a246:	9311      	str	r3, [sp, #68]	@ 0x44
 802a248:	9b08      	ldr	r3, [sp, #32]
 802a24a:	f1b9 0f0f 	cmp.w	r9, #15
 802a24e:	eb0a 0b09 	add.w	fp, sl, r9
 802a252:	e953 1302 	ldrd	r1, r3, [r3, #-8]
 802a256:	f340 81ef 	ble.w	802a638 <st_sssa8_ch_fully_connected+0x4cc>
 802a25a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a25c:	465c      	mov	r4, fp
 802a25e:	eb0a 0502 	add.w	r5, sl, r2
 802a262:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802a264:	f8da 6000 	ldr.w	r6, [sl]
 802a268:	6820      	ldr	r0, [r4, #0]
 802a26a:	ea4f 2736 	mov.w	r7, r6, ror #8
 802a26e:	f8d2 e000 	ldr.w	lr, [r2]
 802a272:	ea4f 2c30 	mov.w	ip, r0, ror #8
 802a276:	fa2f f787 	sxtb16	r7, r7
 802a27a:	fa2f f686 	sxtb16	r6, r6
 802a27e:	fa2f fc8c 	sxtb16	ip, ip
 802a282:	fa2f f080 	sxtb16	r0, r0
 802a286:	fb2e 1106 	smlad	r1, lr, r6, r1
 802a28a:	fb2e 3300 	smlad	r3, lr, r0, r3
 802a28e:	f8d2 e004 	ldr.w	lr, [r2, #4]
 802a292:	fb2e 1707 	smlad	r7, lr, r7, r1
 802a296:	fb2e 3e0c 	smlad	lr, lr, ip, r3
 802a29a:	f8da 1004 	ldr.w	r1, [sl, #4]
 802a29e:	6860      	ldr	r0, [r4, #4]
 802a2a0:	ea4f 2631 	mov.w	r6, r1, ror #8
 802a2a4:	6893      	ldr	r3, [r2, #8]
 802a2a6:	ea4f 2c30 	mov.w	ip, r0, ror #8
 802a2aa:	fa2f f686 	sxtb16	r6, r6
 802a2ae:	fa2f f181 	sxtb16	r1, r1
 802a2b2:	fa2f fc8c 	sxtb16	ip, ip
 802a2b6:	fa2f f080 	sxtb16	r0, r0
 802a2ba:	fb23 7101 	smlad	r1, r3, r1, r7
 802a2be:	fb23 e300 	smlad	r3, r3, r0, lr
 802a2c2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802a2c6:	fb2e 1606 	smlad	r6, lr, r6, r1
 802a2ca:	fb2e 3e0c 	smlad	lr, lr, ip, r3
 802a2ce:	f8da 0008 	ldr.w	r0, [sl, #8]
 802a2d2:	68a1      	ldr	r1, [r4, #8]
 802a2d4:	ea4f 2c30 	mov.w	ip, r0, ror #8
 802a2d8:	6913      	ldr	r3, [r2, #16]
 802a2da:	ea4f 2731 	mov.w	r7, r1, ror #8
 802a2de:	fa2f fc8c 	sxtb16	ip, ip
 802a2e2:	fa2f f080 	sxtb16	r0, r0
 802a2e6:	fa2f f787 	sxtb16	r7, r7
 802a2ea:	fa2f f181 	sxtb16	r1, r1
 802a2ee:	fb23 6000 	smlad	r0, r3, r0, r6
 802a2f2:	fb23 e301 	smlad	r3, r3, r1, lr
 802a2f6:	6951      	ldr	r1, [r2, #20]
 802a2f8:	fb21 000c 	smlad	r0, r1, ip, r0
 802a2fc:	fb21 3c07 	smlad	ip, r1, r7, r3
 802a300:	f8da 100c 	ldr.w	r1, [sl, #12]
 802a304:	3410      	adds	r4, #16
 802a306:	f854 ec04 	ldr.w	lr, [r4, #-4]
 802a30a:	f10a 0a10 	add.w	sl, sl, #16
 802a30e:	ea4f 2731 	mov.w	r7, r1, ror #8
 802a312:	6993      	ldr	r3, [r2, #24]
 802a314:	ea4f 263e 	mov.w	r6, lr, ror #8
 802a318:	fa2f f787 	sxtb16	r7, r7
 802a31c:	fa2f f181 	sxtb16	r1, r1
 802a320:	fa2f fe8e 	sxtb16	lr, lr
 802a324:	fa2f f686 	sxtb16	r6, r6
 802a328:	fb23 0101 	smlad	r1, r3, r1, r0
 802a32c:	fb23 c00e 	smlad	r0, r3, lr, ip
 802a330:	69d3      	ldr	r3, [r2, #28]
 802a332:	3220      	adds	r2, #32
 802a334:	fb23 1107 	smlad	r1, r3, r7, r1
 802a338:	fb23 0306 	smlad	r3, r3, r6, r0
 802a33c:	4555      	cmp	r5, sl
 802a33e:	d191      	bne.n	802a264 <st_sssa8_ch_fully_connected+0xf8>
 802a340:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a342:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802a344:	4493      	add	fp, r2
 802a346:	4690      	mov	r8, r2
 802a348:	9003      	str	r0, [sp, #12]
 802a34a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a34c:	4542      	cmp	r2, r8
 802a34e:	f340 8171 	ble.w	802a634 <st_sssa8_ch_fully_connected+0x4c8>
 802a352:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802a354:	46dc      	mov	ip, fp
 802a356:	9d03      	ldr	r5, [sp, #12]
 802a358:	eba2 0208 	sub.w	r2, r2, r8
 802a35c:	0892      	lsrs	r2, r2, #2
 802a35e:	920c      	str	r2, [sp, #48]	@ 0x30
 802a360:	3201      	adds	r2, #1
 802a362:	0090      	lsls	r0, r2, #2
 802a364:	920b      	str	r2, [sp, #44]	@ 0x2c
 802a366:	eb0a 0e82 	add.w	lr, sl, r2, lsl #2
 802a36a:	900a      	str	r0, [sp, #40]	@ 0x28
 802a36c:	f85a 7b04 	ldr.w	r7, [sl], #4
 802a370:	f85c 0b04 	ldr.w	r0, [ip], #4
 802a374:	ea4f 2637 	mov.w	r6, r7, ror #8
 802a378:	682a      	ldr	r2, [r5, #0]
 802a37a:	ea4f 2430 	mov.w	r4, r0, ror #8
 802a37e:	fa2f f686 	sxtb16	r6, r6
 802a382:	fa2f f787 	sxtb16	r7, r7
 802a386:	fa2f f484 	sxtb16	r4, r4
 802a38a:	fa2f f080 	sxtb16	r0, r0
 802a38e:	fb22 1107 	smlad	r1, r2, r7, r1
 802a392:	fb22 3200 	smlad	r2, r2, r0, r3
 802a396:	686b      	ldr	r3, [r5, #4]
 802a398:	3508      	adds	r5, #8
 802a39a:	fb23 1106 	smlad	r1, r3, r6, r1
 802a39e:	fb23 2304 	smlad	r3, r3, r4, r2
 802a3a2:	45d6      	cmp	lr, sl
 802a3a4:	d1e2      	bne.n	802a36c <st_sssa8_ch_fully_connected+0x200>
 802a3a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a3a8:	f108 0804 	add.w	r8, r8, #4
 802a3ac:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802a3ae:	4493      	add	fp, r2
 802a3b0:	9a03      	ldr	r2, [sp, #12]
 802a3b2:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 802a3b6:	9203      	str	r2, [sp, #12]
 802a3b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802a3ba:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 802a3be:	45c1      	cmp	r9, r8
 802a3c0:	dd37      	ble.n	802a432 <st_sssa8_ch_fully_connected+0x2c6>
 802a3c2:	9c03      	ldr	r4, [sp, #12]
 802a3c4:	f99e 0000 	ldrsb.w	r0, [lr]
 802a3c8:	f9b4 2000 	ldrsh.w	r2, [r4]
 802a3cc:	fb12 1100 	smlabb	r1, r2, r0, r1
 802a3d0:	f99b 0000 	ldrsb.w	r0, [fp]
 802a3d4:	fb12 3300 	smlabb	r3, r2, r0, r3
 802a3d8:	f108 0201 	add.w	r2, r8, #1
 802a3dc:	454a      	cmp	r2, r9
 802a3de:	da25      	bge.n	802a42c <st_sssa8_ch_fully_connected+0x2c0>
 802a3e0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 802a3e4:	f99e 0001 	ldrsb.w	r0, [lr, #1]
 802a3e8:	fb12 1100 	smlabb	r1, r2, r0, r1
 802a3ec:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 802a3f0:	fb12 3300 	smlabb	r3, r2, r0, r3
 802a3f4:	f108 0202 	add.w	r2, r8, #2
 802a3f8:	4591      	cmp	r9, r2
 802a3fa:	dd17      	ble.n	802a42c <st_sssa8_ch_fully_connected+0x2c0>
 802a3fc:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 802a400:	f99e 0002 	ldrsb.w	r0, [lr, #2]
 802a404:	fb12 1100 	smlabb	r1, r2, r0, r1
 802a408:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 802a40c:	fb12 3300 	smlabb	r3, r2, r0, r3
 802a410:	f108 0203 	add.w	r2, r8, #3
 802a414:	4591      	cmp	r9, r2
 802a416:	dd09      	ble.n	802a42c <st_sssa8_ch_fully_connected+0x2c0>
 802a418:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 802a41c:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 802a420:	fb12 3300 	smlabb	r3, r2, r0, r3
 802a424:	f99e 0003 	ldrsb.w	r0, [lr, #3]
 802a428:	fb12 1100 	smlabb	r1, r2, r0, r1
 802a42c:	eba9 0808 	sub.w	r8, r9, r8
 802a430:	44c6      	add	lr, r8
 802a432:	9d07      	ldr	r5, [sp, #28]
 802a434:	f935 0c04 	ldrsh.w	r0, [r5, #-4]
 802a438:	2815      	cmp	r0, #21
 802a43a:	f340 80c2 	ble.w	802a5c2 <st_sssa8_ch_fully_connected+0x456>
 802a43e:	1e84      	subs	r4, r0, #2
 802a440:	2201      	movs	r2, #1
 802a442:	3801      	subs	r0, #1
 802a444:	fa02 f404 	lsl.w	r4, r2, r4
 802a448:	9a05      	ldr	r2, [sp, #20]
 802a44a:	f852 2c04 	ldr.w	r2, [r2, #-4]
 802a44e:	fb51 4202 	smmla	r2, r1, r2, r4
 802a452:	9906      	ldr	r1, [sp, #24]
 802a454:	4102      	asrs	r2, r0
 802a456:	1eac      	subs	r4, r5, #2
 802a458:	f851 1c04 	ldr.w	r1, [r1, #-4]
 802a45c:	440a      	add	r2, r1
 802a45e:	f302 0207 	ssat	r2, #8, r2
 802a462:	9904      	ldr	r1, [sp, #16]
 802a464:	b252      	sxtb	r2, r2
 802a466:	1e48      	subs	r0, r1, #1
 802a468:	f801 2c02 	strb.w	r2, [r1, #-2]
 802a46c:	f9b4 4000 	ldrsh.w	r4, [r4]
 802a470:	2c15      	cmp	r4, #21
 802a472:	f340 8098 	ble.w	802a5a6 <st_sssa8_ch_fully_connected+0x43a>
 802a476:	1ea1      	subs	r1, r4, #2
 802a478:	2201      	movs	r2, #1
 802a47a:	3c01      	subs	r4, #1
 802a47c:	fa02 f101 	lsl.w	r1, r2, r1
 802a480:	9a05      	ldr	r2, [sp, #20]
 802a482:	6812      	ldr	r2, [r2, #0]
 802a484:	fb53 1302 	smmla	r3, r3, r2, r1
 802a488:	9a06      	ldr	r2, [sp, #24]
 802a48a:	4123      	asrs	r3, r4
 802a48c:	6812      	ldr	r2, [r2, #0]
 802a48e:	4413      	add	r3, r2
 802a490:	f303 0307 	ssat	r3, #8, r3
 802a494:	b25b      	sxtb	r3, r3
 802a496:	9a07      	ldr	r2, [sp, #28]
 802a498:	eb0e 0a09 	add.w	sl, lr, r9
 802a49c:	7003      	strb	r3, [r0, #0]
 802a49e:	3204      	adds	r2, #4
 802a4a0:	9b08      	ldr	r3, [sp, #32]
 802a4a2:	9207      	str	r2, [sp, #28]
 802a4a4:	3308      	adds	r3, #8
 802a4a6:	9a04      	ldr	r2, [sp, #16]
 802a4a8:	9308      	str	r3, [sp, #32]
 802a4aa:	3202      	adds	r2, #2
 802a4ac:	9204      	str	r2, [sp, #16]
 802a4ae:	9a05      	ldr	r2, [sp, #20]
 802a4b0:	3208      	adds	r2, #8
 802a4b2:	9205      	str	r2, [sp, #20]
 802a4b4:	9a06      	ldr	r2, [sp, #24]
 802a4b6:	3208      	adds	r2, #8
 802a4b8:	9206      	str	r2, [sp, #24]
 802a4ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802a4bc:	429a      	cmp	r2, r3
 802a4be:	f47f aec3 	bne.w	802a248 <st_sssa8_ch_fully_connected+0xdc>
 802a4c2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802a4c4:	46cb      	mov	fp, r9
 802a4c6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802a4c8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 802a4cc:	9220      	str	r2, [sp, #128]	@ 0x80
 802a4ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802a4d0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802a4d4:	9213      	str	r2, [sp, #76]	@ 0x4c
 802a4d6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802a4d8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 802a4dc:	9224      	str	r2, [sp, #144]	@ 0x90
 802a4de:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802a4e0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 802a4e4:	9225      	str	r2, [sp, #148]	@ 0x94
 802a4e6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802a4e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802a4ec:	9312      	str	r3, [sp, #72]	@ 0x48
 802a4ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802a4f0:	07db      	lsls	r3, r3, #31
 802a4f2:	d54c      	bpl.n	802a58e <st_sssa8_ch_fully_connected+0x422>
 802a4f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a4f6:	ea5f 079b 	movs.w	r7, fp, lsr #2
 802a4fa:	681b      	ldr	r3, [r3, #0]
 802a4fc:	f000 80c7 	beq.w	802a68e <st_sssa8_ch_fully_connected+0x522>
 802a500:	eb0a 0687 	add.w	r6, sl, r7, lsl #2
 802a504:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802a506:	f85a 2b04 	ldr.w	r2, [sl], #4
 802a50a:	3008      	adds	r0, #8
 802a50c:	f850 5c08 	ldr.w	r5, [r0, #-8]
 802a510:	ea4f 2132 	mov.w	r1, r2, ror #8
 802a514:	f850 4c04 	ldr.w	r4, [r0, #-4]
 802a518:	fa2f f282 	sxtb16	r2, r2
 802a51c:	fa2f f181 	sxtb16	r1, r1
 802a520:	fb25 3302 	smlad	r3, r5, r2, r3
 802a524:	fb24 3301 	smlad	r3, r4, r1, r3
 802a528:	45b2      	cmp	sl, r6
 802a52a:	d1ec      	bne.n	802a506 <st_sssa8_ch_fully_connected+0x39a>
 802a52c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802a52e:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 802a532:	920d      	str	r2, [sp, #52]	@ 0x34
 802a534:	f01b 0203 	ands.w	r2, fp, #3
 802a538:	d014      	beq.n	802a564 <st_sssa8_ch_fully_connected+0x3f8>
 802a53a:	3a01      	subs	r2, #1
 802a53c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802a53e:	f996 1000 	ldrsb.w	r1, [r6]
 802a542:	8820      	ldrh	r0, [r4, #0]
 802a544:	b292      	uxth	r2, r2
 802a546:	fb10 3301 	smlabb	r3, r0, r1, r3
 802a54a:	b15a      	cbz	r2, 802a564 <st_sssa8_ch_fully_connected+0x3f8>
 802a54c:	f996 1001 	ldrsb.w	r1, [r6, #1]
 802a550:	2a01      	cmp	r2, #1
 802a552:	8860      	ldrh	r0, [r4, #2]
 802a554:	fb10 3301 	smlabb	r3, r0, r1, r3
 802a558:	d004      	beq.n	802a564 <st_sssa8_ch_fully_connected+0x3f8>
 802a55a:	f996 2002 	ldrsb.w	r2, [r6, #2]
 802a55e:	88a1      	ldrh	r1, [r4, #4]
 802a560:	fb11 3302 	smlabb	r3, r1, r2, r3
 802a564:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802a566:	f9b2 2000 	ldrsh.w	r2, [r2]
 802a56a:	2a15      	cmp	r2, #21
 802a56c:	dd69      	ble.n	802a642 <st_sssa8_ch_fully_connected+0x4d6>
 802a56e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802a570:	1e95      	subs	r5, r2, #2
 802a572:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802a574:	3a01      	subs	r2, #1
 802a576:	6804      	ldr	r4, [r0, #0]
 802a578:	2001      	movs	r0, #1
 802a57a:	6809      	ldr	r1, [r1, #0]
 802a57c:	40a8      	lsls	r0, r5
 802a57e:	fb53 0301 	smmla	r3, r3, r1, r0
 802a582:	4113      	asrs	r3, r2
 802a584:	4423      	add	r3, r4
 802a586:	f303 0307 	ssat	r3, #8, r3
 802a58a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802a58c:	7013      	strb	r3, [r2, #0]
 802a58e:	2000      	movs	r0, #0
 802a590:	b017      	add	sp, #92	@ 0x5c
 802a592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a596:	42bc      	cmp	r4, r7
 802a598:	f845 3c04 	str.w	r3, [r5, #-4]
 802a59c:	f105 0504 	add.w	r5, r5, #4
 802a5a0:	f47f ae04 	bne.w	802a1ac <st_sssa8_ch_fully_connected+0x40>
 802a5a4:	e615      	b.n	802a1d2 <st_sssa8_ch_fully_connected+0x66>
 802a5a6:	2c00      	cmp	r4, #0
 802a5a8:	dd1f      	ble.n	802a5ea <st_sssa8_ch_fully_connected+0x47e>
 802a5aa:	9a05      	ldr	r2, [sp, #20]
 802a5ac:	005b      	lsls	r3, r3, #1
 802a5ae:	9906      	ldr	r1, [sp, #24]
 802a5b0:	6812      	ldr	r2, [r2, #0]
 802a5b2:	6809      	ldr	r1, [r1, #0]
 802a5b4:	fb53 1302 	smmla	r3, r3, r2, r1
 802a5b8:	4123      	asrs	r3, r4
 802a5ba:	f303 0307 	ssat	r3, #8, r3
 802a5be:	b25b      	sxtb	r3, r3
 802a5c0:	e769      	b.n	802a496 <st_sssa8_ch_fully_connected+0x32a>
 802a5c2:	2800      	cmp	r0, #0
 802a5c4:	dd21      	ble.n	802a60a <st_sssa8_ch_fully_connected+0x49e>
 802a5c6:	462c      	mov	r4, r5
 802a5c8:	9a05      	ldr	r2, [sp, #20]
 802a5ca:	004d      	lsls	r5, r1, #1
 802a5cc:	9906      	ldr	r1, [sp, #24]
 802a5ce:	f852 2c04 	ldr.w	r2, [r2, #-4]
 802a5d2:	3c02      	subs	r4, #2
 802a5d4:	f851 1c04 	ldr.w	r1, [r1, #-4]
 802a5d8:	fb55 1502 	smmla	r5, r5, r2, r1
 802a5dc:	4105      	asrs	r5, r0
 802a5de:	f305 0207 	ssat	r2, #8, r5
 802a5e2:	9904      	ldr	r1, [sp, #16]
 802a5e4:	b252      	sxtb	r2, r2
 802a5e6:	1e48      	subs	r0, r1, #1
 802a5e8:	e73e      	b.n	802a468 <st_sssa8_ch_fully_connected+0x2fc>
 802a5ea:	f1c4 0401 	rsb	r4, r4, #1
 802a5ee:	40a3      	lsls	r3, r4
 802a5f0:	f303 031f 	ssat	r3, #32, r3
 802a5f4:	9a05      	ldr	r2, [sp, #20]
 802a5f6:	6812      	ldr	r2, [r2, #0]
 802a5f8:	fb53 f212 	smmulr	r2, r3, r2
 802a5fc:	9b06      	ldr	r3, [sp, #24]
 802a5fe:	681b      	ldr	r3, [r3, #0]
 802a600:	4413      	add	r3, r2
 802a602:	f303 0307 	ssat	r3, #8, r3
 802a606:	b25b      	sxtb	r3, r3
 802a608:	e745      	b.n	802a496 <st_sssa8_ch_fully_connected+0x32a>
 802a60a:	f1c0 0001 	rsb	r0, r0, #1
 802a60e:	1eac      	subs	r4, r5, #2
 802a610:	4081      	lsls	r1, r0
 802a612:	f301 011f 	ssat	r1, #32, r1
 802a616:	9a05      	ldr	r2, [sp, #20]
 802a618:	f852 2c04 	ldr.w	r2, [r2, #-4]
 802a61c:	fb51 f212 	smmulr	r2, r1, r2
 802a620:	9906      	ldr	r1, [sp, #24]
 802a622:	f851 1c04 	ldr.w	r1, [r1, #-4]
 802a626:	440a      	add	r2, r1
 802a628:	f302 0207 	ssat	r2, #8, r2
 802a62c:	9904      	ldr	r1, [sp, #16]
 802a62e:	b252      	sxtb	r2, r2
 802a630:	1e48      	subs	r0, r1, #1
 802a632:	e719      	b.n	802a468 <st_sssa8_ch_fully_connected+0x2fc>
 802a634:	46d6      	mov	lr, sl
 802a636:	e6c2      	b.n	802a3be <st_sssa8_ch_fully_connected+0x252>
 802a638:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802a63a:	f04f 0800 	mov.w	r8, #0
 802a63e:	9203      	str	r2, [sp, #12]
 802a640:	e683      	b.n	802a34a <st_sssa8_ch_fully_connected+0x1de>
 802a642:	2a00      	cmp	r2, #0
 802a644:	dd0f      	ble.n	802a666 <st_sssa8_ch_fully_connected+0x4fa>
 802a646:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802a648:	005b      	lsls	r3, r3, #1
 802a64a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802a64c:	6809      	ldr	r1, [r1, #0]
 802a64e:	6800      	ldr	r0, [r0, #0]
 802a650:	fb53 0301 	smmla	r3, r3, r1, r0
 802a654:	4113      	asrs	r3, r2
 802a656:	f303 0307 	ssat	r3, #8, r3
 802a65a:	2000      	movs	r0, #0
 802a65c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802a65e:	7013      	strb	r3, [r2, #0]
 802a660:	b017      	add	sp, #92	@ 0x5c
 802a662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a666:	f1c2 0201 	rsb	r2, r2, #1
 802a66a:	4093      	lsls	r3, r2
 802a66c:	f303 031f 	ssat	r3, #32, r3
 802a670:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802a672:	6812      	ldr	r2, [r2, #0]
 802a674:	fb53 f312 	smmulr	r3, r3, r2
 802a678:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802a67a:	6812      	ldr	r2, [r2, #0]
 802a67c:	4413      	add	r3, r2
 802a67e:	f303 0307 	ssat	r3, #8, r3
 802a682:	2000      	movs	r0, #0
 802a684:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802a686:	7013      	strb	r3, [r2, #0]
 802a688:	b017      	add	sp, #92	@ 0x5c
 802a68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a68e:	4656      	mov	r6, sl
 802a690:	e750      	b.n	802a534 <st_sssa8_ch_fully_connected+0x3c8>
 802a692:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
 802a696:	9212      	str	r2, [sp, #72]	@ 0x48
 802a698:	e59b      	b.n	802a1d2 <st_sssa8_ch_fully_connected+0x66>
 802a69a:	bf00      	nop

0802a69c <st_int8_copy>:
 802a69c:	4288      	cmp	r0, r1
 802a69e:	d023      	beq.n	802a6e8 <st_int8_copy+0x4c>
 802a6a0:	b312      	cbz	r2, 802a6e8 <st_int8_copy+0x4c>
 802a6a2:	4288      	cmp	r0, r1
 802a6a4:	eb00 0302 	add.w	r3, r0, r2
 802a6a8:	d20b      	bcs.n	802a6c2 <st_int8_copy+0x26>
 802a6aa:	4299      	cmp	r1, r3
 802a6ac:	d209      	bcs.n	802a6c2 <st_int8_copy+0x26>
 802a6ae:	4298      	cmp	r0, r3
 802a6b0:	440a      	add	r2, r1
 802a6b2:	d219      	bcs.n	802a6e8 <st_int8_copy+0x4c>
 802a6b4:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 802a6b8:	4298      	cmp	r0, r3
 802a6ba:	f802 1d01 	strb.w	r1, [r2, #-1]!
 802a6be:	d1f9      	bne.n	802a6b4 <st_int8_copy+0x18>
 802a6c0:	4770      	bx	lr
 802a6c2:	2a03      	cmp	r2, #3
 802a6c4:	d811      	bhi.n	802a6ea <st_int8_copy+0x4e>
 802a6c6:	f810 3b01 	ldrb.w	r3, [r0], #1
 802a6ca:	f801 3b01 	strb.w	r3, [r1], #1
 802a6ce:	2a01      	cmp	r2, #1
 802a6d0:	d00a      	beq.n	802a6e8 <st_int8_copy+0x4c>
 802a6d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 802a6d6:	f801 3b01 	strb.w	r3, [r1], #1
 802a6da:	2a02      	cmp	r2, #2
 802a6dc:	d004      	beq.n	802a6e8 <st_int8_copy+0x4c>
 802a6de:	f810 3b01 	ldrb.w	r3, [r0], #1
 802a6e2:	f801 3b01 	strb.w	r3, [r1], #1
 802a6e6:	4770      	bx	lr
 802a6e8:	4770      	bx	lr
 802a6ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802a6ee:	f001 0403 	and.w	r4, r1, #3
 802a6f2:	f000 0e03 	and.w	lr, r0, #3
 802a6f6:	f1c4 0304 	rsb	r3, r4, #4
 802a6fa:	eba2 0c03 	sub.w	ip, r2, r3
 802a6fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 802a702:	f801 3b01 	strb.w	r3, [r1], #1
 802a706:	2c03      	cmp	r4, #3
 802a708:	f1c4 0202 	rsb	r2, r4, #2
 802a70c:	d00e      	beq.n	802a72c <st_int8_copy+0x90>
 802a70e:	f810 3b01 	ldrb.w	r3, [r0], #1
 802a712:	f801 3b01 	strb.w	r3, [r1], #1
 802a716:	2a00      	cmp	r2, #0
 802a718:	dd08      	ble.n	802a72c <st_int8_copy+0x90>
 802a71a:	f810 3b01 	ldrb.w	r3, [r0], #1
 802a71e:	f801 3b01 	strb.w	r3, [r1], #1
 802a722:	b91c      	cbnz	r4, 802a72c <st_int8_copy+0x90>
 802a724:	f810 3b01 	ldrb.w	r3, [r0], #1
 802a728:	f801 3b01 	strb.w	r3, [r1], #1
 802a72c:	4574      	cmp	r4, lr
 802a72e:	d02b      	beq.n	802a788 <st_int8_copy+0xec>
 802a730:	ea4f 131c 	mov.w	r3, ip, lsr #4
 802a734:	1e5a      	subs	r2, r3, #1
 802a736:	b153      	cbz	r3, 802a74e <st_int8_copy+0xb2>
 802a738:	f850 3b04 	ldr.w	r3, [r0], #4
 802a73c:	f850 4b04 	ldr.w	r4, [r0], #4
 802a740:	f850 5b04 	ldr.w	r5, [r0], #4
 802a744:	f850 6b04 	ldr.w	r6, [r0], #4
 802a748:	c178      	stmia	r1!, {r3, r4, r5, r6}
 802a74a:	3a01      	subs	r2, #1
 802a74c:	d2f4      	bcs.n	802a738 <st_int8_copy+0x9c>
 802a74e:	f01c 0f08 	tst.w	ip, #8
 802a752:	d004      	beq.n	802a75e <st_int8_copy+0xc2>
 802a754:	f850 3b04 	ldr.w	r3, [r0], #4
 802a758:	f850 4b04 	ldr.w	r4, [r0], #4
 802a75c:	c118      	stmia	r1!, {r3, r4}
 802a75e:	f01c 0f04 	tst.w	ip, #4
 802a762:	d003      	beq.n	802a76c <st_int8_copy+0xd0>
 802a764:	f850 3b04 	ldr.w	r3, [r0], #4
 802a768:	f841 3b04 	str.w	r3, [r1], #4
 802a76c:	f01c 0f02 	tst.w	ip, #2
 802a770:	d003      	beq.n	802a77a <st_int8_copy+0xde>
 802a772:	f830 3b02 	ldrh.w	r3, [r0], #2
 802a776:	f821 3b02 	strh.w	r3, [r1], #2
 802a77a:	f01c 0f01 	tst.w	ip, #1
 802a77e:	d001      	beq.n	802a784 <st_int8_copy+0xe8>
 802a780:	7803      	ldrb	r3, [r0, #0]
 802a782:	700b      	strb	r3, [r1, #0]
 802a784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802a788:	ea4f 139c 	mov.w	r3, ip, lsr #6
 802a78c:	f103 39ff 	add.w	r9, r3, #4294967295
 802a790:	b183      	cbz	r3, 802a7b4 <st_int8_copy+0x118>
 802a792:	4688      	mov	r8, r1
 802a794:	4686      	mov	lr, r0
 802a796:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 802a79a:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 802a79e:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 802a7a2:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 802a7a6:	f109 39ff 	add.w	r9, r9, #4294967295
 802a7aa:	4641      	mov	r1, r8
 802a7ac:	4670      	mov	r0, lr
 802a7ae:	f1b9 3fff 	cmp.w	r9, #4294967295
 802a7b2:	d1ee      	bne.n	802a792 <st_int8_copy+0xf6>
 802a7b4:	f01c 0f20 	tst.w	ip, #32
 802a7b8:	d007      	beq.n	802a7ca <st_int8_copy+0x12e>
 802a7ba:	4688      	mov	r8, r1
 802a7bc:	4686      	mov	lr, r0
 802a7be:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 802a7c2:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 802a7c6:	4641      	mov	r1, r8
 802a7c8:	4670      	mov	r0, lr
 802a7ca:	f01c 0f10 	tst.w	ip, #16
 802a7ce:	d001      	beq.n	802a7d4 <st_int8_copy+0x138>
 802a7d0:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 802a7d2:	c178      	stmia	r1!, {r3, r4, r5, r6}
 802a7d4:	f01c 0f08 	tst.w	ip, #8
 802a7d8:	d0c1      	beq.n	802a75e <st_int8_copy+0xc2>
 802a7da:	c818      	ldmia	r0!, {r3, r4}
 802a7dc:	c118      	stmia	r1!, {r3, r4}
 802a7de:	e7be      	b.n	802a75e <st_int8_copy+0xc2>

0802a7e0 <st_int8_fill>:
 802a7e0:	fa5f fc80 	uxtb.w	ip, r0
 802a7e4:	0203      	lsls	r3, r0, #8
 802a7e6:	ea4c 6c00 	orr.w	ip, ip, r0, lsl #24
 802a7ea:	b29b      	uxth	r3, r3
 802a7ec:	ea4c 0c03 	orr.w	ip, ip, r3
 802a7f0:	0403      	lsls	r3, r0, #16
 802a7f2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 802a7f6:	ea4c 0c03 	orr.w	ip, ip, r3
 802a7fa:	078b      	lsls	r3, r1, #30
 802a7fc:	d008      	beq.n	802a810 <st_int8_fill+0x30>
 802a7fe:	b90a      	cbnz	r2, 802a804 <st_int8_fill+0x24>
 802a800:	e02c      	b.n	802a85c <st_int8_fill+0x7c>
 802a802:	b362      	cbz	r2, 802a85e <st_int8_fill+0x7e>
 802a804:	f801 0b01 	strb.w	r0, [r1], #1
 802a808:	078b      	lsls	r3, r1, #30
 802a80a:	f102 32ff 	add.w	r2, r2, #4294967295
 802a80e:	d1f8      	bne.n	802a802 <st_int8_fill+0x22>
 802a810:	0913      	lsrs	r3, r2, #4
 802a812:	d025      	beq.n	802a860 <st_int8_fill+0x80>
 802a814:	f841 cb04 	str.w	ip, [r1], #4
 802a818:	f841 cb04 	str.w	ip, [r1], #4
 802a81c:	f841 cb04 	str.w	ip, [r1], #4
 802a820:	f841 cb04 	str.w	ip, [r1], #4
 802a824:	3b01      	subs	r3, #1
 802a826:	d1f5      	bne.n	802a814 <st_int8_fill+0x34>
 802a828:	f3c2 0381 	ubfx	r3, r2, #2, #2
 802a82c:	f002 0203 	and.w	r2, r2, #3
 802a830:	b14b      	cbz	r3, 802a846 <st_int8_fill+0x66>
 802a832:	f841 cb04 	str.w	ip, [r1], #4
 802a836:	3b01      	subs	r3, #1
 802a838:	d005      	beq.n	802a846 <st_int8_fill+0x66>
 802a83a:	f841 cb04 	str.w	ip, [r1], #4
 802a83e:	2b01      	cmp	r3, #1
 802a840:	d001      	beq.n	802a846 <st_int8_fill+0x66>
 802a842:	f841 cb04 	str.w	ip, [r1], #4
 802a846:	b14a      	cbz	r2, 802a85c <st_int8_fill+0x7c>
 802a848:	f801 0b01 	strb.w	r0, [r1], #1
 802a84c:	3a01      	subs	r2, #1
 802a84e:	d005      	beq.n	802a85c <st_int8_fill+0x7c>
 802a850:	f801 0b01 	strb.w	r0, [r1], #1
 802a854:	2a01      	cmp	r2, #1
 802a856:	d001      	beq.n	802a85c <st_int8_fill+0x7c>
 802a858:	f801 0b01 	strb.w	r0, [r1], #1
 802a85c:	4770      	bx	lr
 802a85e:	4770      	bx	lr
 802a860:	0893      	lsrs	r3, r2, #2
 802a862:	f002 0203 	and.w	r2, r2, #3
 802a866:	e7e3      	b.n	802a830 <st_int8_fill+0x50>

0802a868 <st_int8_reordered_no_shift_zero>:
 802a868:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a86a:	0897      	lsrs	r7, r2, #2
 802a86c:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 802a870:	d02d      	beq.n	802a8ce <st_int8_reordered_no_shift_zero+0x66>
 802a872:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 802a876:	468e      	mov	lr, r1
 802a878:	f850 cb04 	ldr.w	ip, [r0], #4
 802a87c:	fa2f f49c 	sxtb16	r4, ip, ror #8
 802a880:	fad4 f403 	ssub16	r4, r4, r3
 802a884:	fa2f fc8c 	sxtb16	ip, ip
 802a888:	fadc fc03 	ssub16	ip, ip, r3
 802a88c:	42a8      	cmp	r0, r5
 802a88e:	f8ce c000 	str.w	ip, [lr]
 802a892:	f8ce 4004 	str.w	r4, [lr, #4]
 802a896:	f10e 0e08 	add.w	lr, lr, #8
 802a89a:	d1ed      	bne.n	802a878 <st_int8_reordered_no_shift_zero+0x10>
 802a89c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 802a8a0:	f012 0203 	ands.w	r2, r2, #3
 802a8a4:	d012      	beq.n	802a8cc <st_int8_reordered_no_shift_zero+0x64>
 802a8a6:	f995 0000 	ldrsb.w	r0, [r5]
 802a8aa:	b273      	sxtb	r3, r6
 802a8ac:	3a01      	subs	r2, #1
 802a8ae:	eba0 0003 	sub.w	r0, r0, r3
 802a8b2:	8008      	strh	r0, [r1, #0]
 802a8b4:	d00a      	beq.n	802a8cc <st_int8_reordered_no_shift_zero+0x64>
 802a8b6:	f995 0001 	ldrsb.w	r0, [r5, #1]
 802a8ba:	2a01      	cmp	r2, #1
 802a8bc:	eba0 0003 	sub.w	r0, r0, r3
 802a8c0:	8048      	strh	r0, [r1, #2]
 802a8c2:	d003      	beq.n	802a8cc <st_int8_reordered_no_shift_zero+0x64>
 802a8c4:	f995 2002 	ldrsb.w	r2, [r5, #2]
 802a8c8:	1ad3      	subs	r3, r2, r3
 802a8ca:	808b      	strh	r3, [r1, #4]
 802a8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a8ce:	4605      	mov	r5, r0
 802a8d0:	e7e6      	b.n	802a8a0 <st_int8_reordered_no_shift_zero+0x38>
 802a8d2:	bf00      	nop

0802a8d4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 802a8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a8d8:	b093      	sub	sp, #76	@ 0x4c
 802a8da:	f8bd 4074 	ldrh.w	r4, [sp, #116]	@ 0x74
 802a8de:	920a      	str	r2, [sp, #40]	@ 0x28
 802a8e0:	f8bd 2078 	ldrh.w	r2, [sp, #120]	@ 0x78
 802a8e4:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a8e6:	920d      	str	r2, [sp, #52]	@ 0x34
 802a8e8:	0862      	lsrs	r2, r4, #1
 802a8ea:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 802a8ee:	940c      	str	r4, [sp, #48]	@ 0x30
 802a8f0:	9104      	str	r1, [sp, #16]
 802a8f2:	930e      	str	r3, [sp, #56]	@ 0x38
 802a8f4:	920b      	str	r2, [sp, #44]	@ 0x2c
 802a8f6:	2b00      	cmp	r3, #0
 802a8f8:	f000 8184 	beq.w	802ac04 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x330>
 802a8fc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a8fe:	b299      	uxth	r1, r3
 802a900:	4613      	mov	r3, r2
 802a902:	2b00      	cmp	r3, #0
 802a904:	f000 80d7 	beq.w	802aab6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e2>
 802a908:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802a90a:	3b01      	subs	r3, #1
 802a90c:	0897      	lsrs	r7, r2, #2
 802a90e:	f002 0203 	and.w	r2, r2, #3
 802a912:	b29b      	uxth	r3, r3
 802a914:	9201      	str	r2, [sp, #4]
 802a916:	1c4a      	adds	r2, r1, #1
 802a918:	0049      	lsls	r1, r1, #1
 802a91a:	9703      	str	r7, [sp, #12]
 802a91c:	9105      	str	r1, [sp, #20]
 802a91e:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 802a920:	4411      	add	r1, r2
 802a922:	9102      	str	r1, [sp, #8]
 802a924:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802a926:	f101 0210 	add.w	r2, r1, #16
 802a92a:	f101 0c08 	add.w	ip, r1, #8
 802a92e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802a932:	9a01      	ldr	r2, [sp, #4]
 802a934:	9306      	str	r3, [sp, #24]
 802a936:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802a938:	f103 0e04 	add.w	lr, r3, #4
 802a93c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a93e:	f103 0508 	add.w	r5, r3, #8
 802a942:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802a944:	f103 0408 	add.w	r4, r3, #8
 802a948:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802a94a:	1c5e      	adds	r6, r3, #1
 802a94c:	013b      	lsls	r3, r7, #4
 802a94e:	9307      	str	r3, [sp, #28]
 802a950:	9b04      	ldr	r3, [sp, #16]
 802a952:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802a956:	9308      	str	r3, [sp, #32]
 802a958:	0093      	lsls	r3, r2, #2
 802a95a:	9309      	str	r3, [sp, #36]	@ 0x24
 802a95c:	f85c 3c08 	ldr.w	r3, [ip, #-8]
 802a960:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 802a964:	9311      	str	r3, [sp, #68]	@ 0x44
 802a966:	9903      	ldr	r1, [sp, #12]
 802a968:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802a96a:	9211      	str	r2, [sp, #68]	@ 0x44
 802a96c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802a96e:	2900      	cmp	r1, #0
 802a970:	f000 8146 	beq.w	802ac00 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32c>
 802a974:	4688      	mov	r8, r1
 802a976:	9f04      	ldr	r7, [sp, #16]
 802a978:	4601      	mov	r1, r0
 802a97a:	f8d7 9000 	ldr.w	r9, [r7]
 802a97e:	f8d1 a000 	ldr.w	sl, [r1]
 802a982:	fb2a 3a09 	smlad	sl, sl, r9, r3
 802a986:	684b      	ldr	r3, [r1, #4]
 802a988:	fb23 2909 	smlad	r9, r3, r9, r2
 802a98c:	f8d7 b004 	ldr.w	fp, [r7, #4]
 802a990:	3110      	adds	r1, #16
 802a992:	f851 3c08 	ldr.w	r3, [r1, #-8]
 802a996:	3708      	adds	r7, #8
 802a998:	f851 2c04 	ldr.w	r2, [r1, #-4]
 802a99c:	fb23 a30b 	smlad	r3, r3, fp, sl
 802a9a0:	fb22 920b 	smlad	r2, r2, fp, r9
 802a9a4:	f1b8 0801 	subs.w	r8, r8, #1
 802a9a8:	d1e7      	bne.n	802a97a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xa6>
 802a9aa:	9907      	ldr	r1, [sp, #28]
 802a9ac:	4408      	add	r0, r1
 802a9ae:	9908      	ldr	r1, [sp, #32]
 802a9b0:	9f01      	ldr	r7, [sp, #4]
 802a9b2:	b31f      	cbz	r7, 802a9fc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x128>
 802a9b4:	f9b1 7000 	ldrsh.w	r7, [r1]
 802a9b8:	f8b0 8000 	ldrh.w	r8, [r0]
 802a9bc:	fb17 3308 	smlabb	r3, r7, r8, r3
 802a9c0:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 802a9c4:	fb18 2207 	smlabb	r2, r8, r7, r2
 802a9c8:	9f01      	ldr	r7, [sp, #4]
 802a9ca:	2f01      	cmp	r7, #1
 802a9cc:	d014      	beq.n	802a9f8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x124>
 802a9ce:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 802a9d2:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 802a9d6:	fb17 3308 	smlabb	r3, r7, r8, r3
 802a9da:	f8b0 8006 	ldrh.w	r8, [r0, #6]
 802a9de:	fb18 2207 	smlabb	r2, r8, r7, r2
 802a9e2:	9f01      	ldr	r7, [sp, #4]
 802a9e4:	2f02      	cmp	r7, #2
 802a9e6:	d007      	beq.n	802a9f8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x124>
 802a9e8:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 802a9ec:	8907      	ldrh	r7, [r0, #8]
 802a9ee:	fb17 3301 	smlabb	r3, r7, r1, r3
 802a9f2:	8947      	ldrh	r7, [r0, #10]
 802a9f4:	fb11 2207 	smlabb	r2, r1, r7, r2
 802a9f8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802a9fa:	4408      	add	r0, r1
 802a9fc:	f93e 9c04 	ldrsh.w	r9, [lr, #-4]
 802aa00:	f1b9 0f15 	cmp.w	r9, #21
 802aa04:	f340 80af 	ble.w	802ab66 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x292>
 802aa08:	f109 38ff 	add.w	r8, r9, #4294967295
 802aa0c:	f1a9 0702 	sub.w	r7, r9, #2
 802aa10:	2101      	movs	r1, #1
 802aa12:	fa01 f707 	lsl.w	r7, r1, r7
 802aa16:	f855 1c08 	ldr.w	r1, [r5, #-8]
 802aa1a:	fb53 7101 	smmla	r1, r3, r1, r7
 802aa1e:	f854 3c08 	ldr.w	r3, [r4, #-8]
 802aa22:	fa41 f108 	asr.w	r1, r1, r8
 802aa26:	1f27      	subs	r7, r4, #4
 802aa28:	f1a5 0804 	sub.w	r8, r5, #4
 802aa2c:	440b      	add	r3, r1
 802aa2e:	f1ae 0102 	sub.w	r1, lr, #2
 802aa32:	f303 0307 	ssat	r3, #8, r3
 802aa36:	b25b      	sxtb	r3, r3
 802aa38:	f806 3c01 	strb.w	r3, [r6, #-1]
 802aa3c:	f9b1 1000 	ldrsh.w	r1, [r1]
 802aa40:	2915      	cmp	r1, #21
 802aa42:	f340 80ab 	ble.w	802ab9c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2c8>
 802aa46:	f8d8 3000 	ldr.w	r3, [r8]
 802aa4a:	f04f 0901 	mov.w	r9, #1
 802aa4e:	f8d7 8000 	ldr.w	r8, [r7]
 802aa52:	1e8f      	subs	r7, r1, #2
 802aa54:	3901      	subs	r1, #1
 802aa56:	fa09 f707 	lsl.w	r7, r9, r7
 802aa5a:	fb52 7303 	smmla	r3, r2, r3, r7
 802aa5e:	410b      	asrs	r3, r1
 802aa60:	4443      	add	r3, r8
 802aa62:	f303 0307 	ssat	r3, #8, r3
 802aa66:	b25b      	sxtb	r3, r3
 802aa68:	9a02      	ldr	r2, [sp, #8]
 802aa6a:	f10c 0c08 	add.w	ip, ip, #8
 802aa6e:	f10e 0e04 	add.w	lr, lr, #4
 802aa72:	3508      	adds	r5, #8
 802aa74:	f802 3c01 	strb.w	r3, [r2, #-1]
 802aa78:	3408      	adds	r4, #8
 802aa7a:	9b05      	ldr	r3, [sp, #20]
 802aa7c:	441a      	add	r2, r3
 802aa7e:	441e      	add	r6, r3
 802aa80:	9b06      	ldr	r3, [sp, #24]
 802aa82:	9202      	str	r2, [sp, #8]
 802aa84:	459c      	cmp	ip, r3
 802aa86:	f47f af69 	bne.w	802a95c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x88>
 802aa8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802aa8c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802aa8e:	9905      	ldr	r1, [sp, #20]
 802aa90:	fb03 2201 	mla	r2, r3, r1, r2
 802aa94:	9223      	str	r2, [sp, #140]	@ 0x8c
 802aa96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802aa98:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 802aa9c:	920a      	str	r2, [sp, #40]	@ 0x28
 802aa9e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 802aaa0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802aaa4:	921f      	str	r2, [sp, #124]	@ 0x7c
 802aaa6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802aaa8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 802aaac:	9220      	str	r2, [sp, #128]	@ 0x80
 802aaae:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802aab0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802aab4:	9321      	str	r3, [sp, #132]	@ 0x84
 802aab6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802aab8:	07db      	lsls	r3, r3, #31
 802aaba:	d546      	bpl.n	802ab4a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 802aabc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802aabe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802aac0:	0896      	lsrs	r6, r2, #2
 802aac2:	681b      	ldr	r3, [r3, #0]
 802aac4:	f000 80cd 	beq.w	802ac62 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x38e>
 802aac8:	00f7      	lsls	r7, r6, #3
 802aaca:	9904      	ldr	r1, [sp, #16]
 802aacc:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 802aad0:	6804      	ldr	r4, [r0, #0]
 802aad2:	3008      	adds	r0, #8
 802aad4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 802aad8:	680d      	ldr	r5, [r1, #0]
 802aada:	fb24 3305 	smlad	r3, r4, r5, r3
 802aade:	684c      	ldr	r4, [r1, #4]
 802aae0:	3108      	adds	r1, #8
 802aae2:	fb22 3304 	smlad	r3, r2, r4, r3
 802aae6:	42b0      	cmp	r0, r6
 802aae8:	d1f2      	bne.n	802aad0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1fc>
 802aaea:	9a04      	ldr	r2, [sp, #16]
 802aaec:	443a      	add	r2, r7
 802aaee:	9204      	str	r2, [sp, #16]
 802aaf0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802aaf2:	f012 0203 	ands.w	r2, r2, #3
 802aaf6:	d011      	beq.n	802ab1c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 802aaf8:	3a01      	subs	r2, #1
 802aafa:	9c04      	ldr	r4, [sp, #16]
 802aafc:	8831      	ldrh	r1, [r6, #0]
 802aafe:	8820      	ldrh	r0, [r4, #0]
 802ab00:	b292      	uxth	r2, r2
 802ab02:	fb10 3301 	smlabb	r3, r0, r1, r3
 802ab06:	b14a      	cbz	r2, 802ab1c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 802ab08:	8860      	ldrh	r0, [r4, #2]
 802ab0a:	2a01      	cmp	r2, #1
 802ab0c:	8871      	ldrh	r1, [r6, #2]
 802ab0e:	fb10 3301 	smlabb	r3, r0, r1, r3
 802ab12:	d003      	beq.n	802ab1c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 802ab14:	88b1      	ldrh	r1, [r6, #4]
 802ab16:	88a2      	ldrh	r2, [r4, #4]
 802ab18:	fb11 3302 	smlabb	r3, r1, r2, r3
 802ab1c:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 802ab1e:	f9b2 2000 	ldrsh.w	r2, [r2]
 802ab22:	2a15      	cmp	r2, #21
 802ab24:	dd79      	ble.n	802ac1a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x346>
 802ab26:	9821      	ldr	r0, [sp, #132]	@ 0x84
 802ab28:	1e95      	subs	r5, r2, #2
 802ab2a:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802ab2c:	3a01      	subs	r2, #1
 802ab2e:	6804      	ldr	r4, [r0, #0]
 802ab30:	2001      	movs	r0, #1
 802ab32:	6809      	ldr	r1, [r1, #0]
 802ab34:	40a8      	lsls	r0, r5
 802ab36:	fb53 0301 	smmla	r3, r3, r1, r0
 802ab3a:	4113      	asrs	r3, r2
 802ab3c:	4423      	add	r3, r4
 802ab3e:	f303 0307 	ssat	r3, #8, r3
 802ab42:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802ab44:	f802 3b01 	strb.w	r3, [r2], #1
 802ab48:	9223      	str	r2, [sp, #140]	@ 0x8c
 802ab4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802ab4c:	2b00      	cmp	r3, #0
 802ab4e:	d05c      	beq.n	802ac0a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x336>
 802ab50:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802ab52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802ab54:	fb02 f303 	mul.w	r3, r2, r3
 802ab58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802ab5a:	f1c3 0301 	rsb	r3, r3, #1
 802ab5e:	18d0      	adds	r0, r2, r3
 802ab60:	b013      	add	sp, #76	@ 0x4c
 802ab62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ab66:	f1b9 0f00 	cmp.w	r9, #0
 802ab6a:	dd24      	ble.n	802abb6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e2>
 802ab6c:	f855 1c08 	ldr.w	r1, [r5, #-8]
 802ab70:	005b      	lsls	r3, r3, #1
 802ab72:	f854 7c08 	ldr.w	r7, [r4, #-8]
 802ab76:	f1a5 0804 	sub.w	r8, r5, #4
 802ab7a:	fb53 7301 	smmla	r3, r3, r1, r7
 802ab7e:	1f27      	subs	r7, r4, #4
 802ab80:	fa43 f309 	asr.w	r3, r3, r9
 802ab84:	f1ae 0102 	sub.w	r1, lr, #2
 802ab88:	f303 0307 	ssat	r3, #8, r3
 802ab8c:	b25b      	sxtb	r3, r3
 802ab8e:	f806 3c01 	strb.w	r3, [r6, #-1]
 802ab92:	f9b1 1000 	ldrsh.w	r1, [r1]
 802ab96:	2915      	cmp	r1, #21
 802ab98:	f73f af55 	bgt.w	802aa46 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x172>
 802ab9c:	2900      	cmp	r1, #0
 802ab9e:	dd20      	ble.n	802abe2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x30e>
 802aba0:	0053      	lsls	r3, r2, #1
 802aba2:	683f      	ldr	r7, [r7, #0]
 802aba4:	f8d8 2000 	ldr.w	r2, [r8]
 802aba8:	fb53 7302 	smmla	r3, r3, r2, r7
 802abac:	410b      	asrs	r3, r1
 802abae:	f303 0307 	ssat	r3, #8, r3
 802abb2:	b25b      	sxtb	r3, r3
 802abb4:	e758      	b.n	802aa68 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x194>
 802abb6:	f1c9 0701 	rsb	r7, r9, #1
 802abba:	f1ae 0102 	sub.w	r1, lr, #2
 802abbe:	fa03 f707 	lsl.w	r7, r3, r7
 802abc2:	f307 071f 	ssat	r7, #32, r7
 802abc6:	f1a5 0804 	sub.w	r8, r5, #4
 802abca:	f855 3c08 	ldr.w	r3, [r5, #-8]
 802abce:	fb57 f713 	smmulr	r7, r7, r3
 802abd2:	f854 3c08 	ldr.w	r3, [r4, #-8]
 802abd6:	443b      	add	r3, r7
 802abd8:	1f27      	subs	r7, r4, #4
 802abda:	f303 0307 	ssat	r3, #8, r3
 802abde:	b25b      	sxtb	r3, r3
 802abe0:	e72a      	b.n	802aa38 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x164>
 802abe2:	f1c1 0101 	rsb	r1, r1, #1
 802abe6:	408a      	lsls	r2, r1
 802abe8:	f302 021f 	ssat	r2, #32, r2
 802abec:	f8d8 3000 	ldr.w	r3, [r8]
 802abf0:	fb52 f313 	smmulr	r3, r2, r3
 802abf4:	683a      	ldr	r2, [r7, #0]
 802abf6:	4413      	add	r3, r2
 802abf8:	f303 0307 	ssat	r3, #8, r3
 802abfc:	b25b      	sxtb	r3, r3
 802abfe:	e733      	b.n	802aa68 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x194>
 802ac00:	9904      	ldr	r1, [sp, #16]
 802ac02:	e6d5      	b.n	802a9b0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xdc>
 802ac04:	2101      	movs	r1, #1
 802ac06:	4613      	mov	r3, r2
 802ac08:	e67b      	b.n	802a902 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e>
 802ac0a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802ac0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ac0e:	1a9b      	subs	r3, r3, r2
 802ac10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802ac12:	18d0      	adds	r0, r2, r3
 802ac14:	b013      	add	sp, #76	@ 0x4c
 802ac16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ac1a:	2a00      	cmp	r2, #0
 802ac1c:	dd0e      	ble.n	802ac3c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x368>
 802ac1e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802ac20:	005b      	lsls	r3, r3, #1
 802ac22:	9821      	ldr	r0, [sp, #132]	@ 0x84
 802ac24:	6809      	ldr	r1, [r1, #0]
 802ac26:	6800      	ldr	r0, [r0, #0]
 802ac28:	fb53 0301 	smmla	r3, r3, r1, r0
 802ac2c:	4113      	asrs	r3, r2
 802ac2e:	f303 0307 	ssat	r3, #8, r3
 802ac32:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802ac34:	f802 3b01 	strb.w	r3, [r2], #1
 802ac38:	9223      	str	r2, [sp, #140]	@ 0x8c
 802ac3a:	e786      	b.n	802ab4a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 802ac3c:	f1c2 0201 	rsb	r2, r2, #1
 802ac40:	4093      	lsls	r3, r2
 802ac42:	f303 031f 	ssat	r3, #32, r3
 802ac46:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802ac48:	6812      	ldr	r2, [r2, #0]
 802ac4a:	fb53 f312 	smmulr	r3, r3, r2
 802ac4e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802ac50:	6812      	ldr	r2, [r2, #0]
 802ac52:	4413      	add	r3, r2
 802ac54:	f303 0307 	ssat	r3, #8, r3
 802ac58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802ac5a:	f802 3b01 	strb.w	r3, [r2], #1
 802ac5e:	9223      	str	r2, [sp, #140]	@ 0x8c
 802ac60:	e773      	b.n	802ab4a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 802ac62:	4606      	mov	r6, r0
 802ac64:	e744      	b.n	802aaf0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x21c>
 802ac66:	bf00      	nop

0802ac68 <st_sssa8_nn_mat_mult_kernel>:
 802ac68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ac6c:	b09f      	sub	sp, #124	@ 0x7c
 802ac6e:	4684      	mov	ip, r0
 802ac70:	0858      	lsrs	r0, r3, #1
 802ac72:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 802ac74:	f8bd 40a0 	ldrh.w	r4, [sp, #160]	@ 0xa0
 802ac78:	f9bd 50a4 	ldrsh.w	r5, [sp, #164]	@ 0xa4
 802ac7c:	441e      	add	r6, r3
 802ac7e:	931b      	str	r3, [sp, #108]	@ 0x6c
 802ac80:	9110      	str	r1, [sp, #64]	@ 0x40
 802ac82:	921a      	str	r2, [sp, #104]	@ 0x68
 802ac84:	9407      	str	r4, [sp, #28]
 802ac86:	950f      	str	r5, [sp, #60]	@ 0x3c
 802ac88:	9619      	str	r6, [sp, #100]	@ 0x64
 802ac8a:	901d      	str	r0, [sp, #116]	@ 0x74
 802ac8c:	f000 8213 	beq.w	802b0b6 <st_sssa8_nn_mat_mult_kernel+0x44e>
 802ac90:	460f      	mov	r7, r1
 802ac92:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 802ac96:	4696      	mov	lr, r2
 802ac98:	1e42      	subs	r2, r0, #1
 802ac9a:	9111      	str	r1, [sp, #68]	@ 0x44
 802ac9c:	2001      	movs	r0, #1
 802ac9e:	1ea9      	subs	r1, r5, #2
 802aca0:	f1a4 0310 	sub.w	r3, r4, #16
 802aca4:	b292      	uxth	r2, r2
 802aca6:	4088      	lsls	r0, r1
 802aca8:	091b      	lsrs	r3, r3, #4
 802acaa:	f10e 0110 	add.w	r1, lr, #16
 802acae:	9017      	str	r0, [sp, #92]	@ 0x5c
 802acb0:	4670      	mov	r0, lr
 802acb2:	3301      	adds	r3, #1
 802acb4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 802acb8:	3008      	adds	r0, #8
 802acba:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802acbc:	9212      	str	r2, [sp, #72]	@ 0x48
 802acbe:	4622      	mov	r2, r4
 802acc0:	9008      	str	r0, [sp, #32]
 802acc2:	3c03      	subs	r4, #3
 802acc4:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 802acc6:	9413      	str	r4, [sp, #76]	@ 0x4c
 802acc8:	3002      	adds	r0, #2
 802acca:	900a      	str	r0, [sp, #40]	@ 0x28
 802accc:	1cb0      	adds	r0, r6, #2
 802acce:	9009      	str	r0, [sp, #36]	@ 0x24
 802acd0:	0118      	lsls	r0, r3, #4
 802acd2:	900b      	str	r0, [sp, #44]	@ 0x2c
 802acd4:	eb07 1043 	add.w	r0, r7, r3, lsl #5
 802acd8:	eb01 1343 	add.w	r3, r1, r3, lsl #5
 802acdc:	9015      	str	r0, [sp, #84]	@ 0x54
 802acde:	9314      	str	r3, [sp, #80]	@ 0x50
 802ace0:	1f13      	subs	r3, r2, #4
 802ace2:	9316      	str	r3, [sp, #88]	@ 0x58
 802ace4:	f1c5 0301 	rsb	r3, r5, #1
 802ace8:	931c      	str	r3, [sp, #112]	@ 0x70
 802acea:	1e6b      	subs	r3, r5, #1
 802acec:	9318      	str	r3, [sp, #96]	@ 0x60
 802acee:	9b07      	ldr	r3, [sp, #28]
 802acf0:	4666      	mov	r6, ip
 802acf2:	9908      	ldr	r1, [sp, #32]
 802acf4:	18f5      	adds	r5, r6, r3
 802acf6:	2b0f      	cmp	r3, #15
 802acf8:	e951 2b02 	ldrd	r2, fp, [r1, #-8]
 802acfc:	9503      	str	r5, [sp, #12]
 802acfe:	f340 82a9 	ble.w	802b254 <st_sssa8_nn_mat_mult_kernel+0x5ec>
 802ad02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802ad04:	4659      	mov	r1, fp
 802ad06:	9500      	str	r5, [sp, #0]
 802ad08:	18f3      	adds	r3, r6, r3
 802ad0a:	e9dd 0410 	ldrd	r0, r4, [sp, #64]	@ 0x40
 802ad0e:	9301      	str	r3, [sp, #4]
 802ad10:	4613      	mov	r3, r2
 802ad12:	f8d0 e000 	ldr.w	lr, [r0]
 802ad16:	f8d4 8000 	ldr.w	r8, [r4]
 802ad1a:	f8dc 6000 	ldr.w	r6, [ip]
 802ad1e:	fa2f f796 	sxtb16	r7, r6, ror #8
 802ad22:	9d00      	ldr	r5, [sp, #0]
 802ad24:	fa2f f686 	sxtb16	r6, r6
 802ad28:	682d      	ldr	r5, [r5, #0]
 802ad2a:	eac7 4a26 	pkhtb	sl, r7, r6, asr #16
 802ad2e:	eac6 4607 	pkhbt	r6, r6, r7, lsl #16
 802ad32:	fa2f f795 	sxtb16	r7, r5, ror #8
 802ad36:	fa2f f585 	sxtb16	r5, r5
 802ad3a:	eac7 4925 	pkhtb	r9, r7, r5, asr #16
 802ad3e:	eac5 4507 	pkhbt	r5, r5, r7, lsl #16
 802ad42:	fb26 270e 	smlad	r7, r6, lr, r2
 802ad46:	fb26 3608 	smlad	r6, r6, r8, r3
 802ad4a:	fb25 b30e 	smlad	r3, r5, lr, fp
 802ad4e:	fb25 1508 	smlad	r5, r5, r8, r1
 802ad52:	f8d0 8004 	ldr.w	r8, [r0, #4]
 802ad56:	f8d4 e004 	ldr.w	lr, [r4, #4]
 802ad5a:	fb2a 7708 	smlad	r7, sl, r8, r7
 802ad5e:	fb2a 660e 	smlad	r6, sl, lr, r6
 802ad62:	fb29 3808 	smlad	r8, r9, r8, r3
 802ad66:	fb29 5e0e 	smlad	lr, r9, lr, r5
 802ad6a:	6881      	ldr	r1, [r0, #8]
 802ad6c:	f8d4 b008 	ldr.w	fp, [r4, #8]
 802ad70:	f8dc 5004 	ldr.w	r5, [ip, #4]
 802ad74:	fa2f f295 	sxtb16	r2, r5, ror #8
 802ad78:	9b00      	ldr	r3, [sp, #0]
 802ad7a:	fa2f f585 	sxtb16	r5, r5
 802ad7e:	685b      	ldr	r3, [r3, #4]
 802ad80:	eac2 4a25 	pkhtb	sl, r2, r5, asr #16
 802ad84:	eac5 4502 	pkhbt	r5, r5, r2, lsl #16
 802ad88:	fa2f f293 	sxtb16	r2, r3, ror #8
 802ad8c:	fa2f f383 	sxtb16	r3, r3
 802ad90:	eac2 4923 	pkhtb	r9, r2, r3, asr #16
 802ad94:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 802ad98:	fb25 7701 	smlad	r7, r5, r1, r7
 802ad9c:	fb25 650b 	smlad	r5, r5, fp, r6
 802ada0:	fb23 8101 	smlad	r1, r3, r1, r8
 802ada4:	fb23 e30b 	smlad	r3, r3, fp, lr
 802ada8:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 802adac:	68e6      	ldr	r6, [r4, #12]
 802adae:	fb2a 770e 	smlad	r7, sl, lr, r7
 802adb2:	fb2a 5506 	smlad	r5, sl, r6, r5
 802adb6:	fb29 1e0e 	smlad	lr, r9, lr, r1
 802adba:	fb29 3606 	smlad	r6, r9, r6, r3
 802adbe:	6901      	ldr	r1, [r0, #16]
 802adc0:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802adc4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 802adc8:	fa2f fa92 	sxtb16	sl, r2, ror #8
 802adcc:	9b00      	ldr	r3, [sp, #0]
 802adce:	fa2f f282 	sxtb16	r2, r2
 802add2:	689b      	ldr	r3, [r3, #8]
 802add4:	eaca 4922 	pkhtb	r9, sl, r2, asr #16
 802add8:	eac2 420a 	pkhbt	r2, r2, sl, lsl #16
 802addc:	fa2f fb93 	sxtb16	fp, r3, ror #8
 802ade0:	fa2f f383 	sxtb16	r3, r3
 802ade4:	eacb 4a23 	pkhtb	sl, fp, r3, asr #16
 802ade8:	eac3 430b 	pkhbt	r3, r3, fp, lsl #16
 802adec:	fb22 7701 	smlad	r7, r2, r1, r7
 802adf0:	fb22 5208 	smlad	r2, r2, r8, r5
 802adf4:	fb23 e101 	smlad	r1, r3, r1, lr
 802adf8:	fb23 6308 	smlad	r3, r3, r8, r6
 802adfc:	f8d0 8014 	ldr.w	r8, [r0, #20]
 802ae00:	f8d4 e014 	ldr.w	lr, [r4, #20]
 802ae04:	fb29 7708 	smlad	r7, r9, r8, r7
 802ae08:	fb29 290e 	smlad	r9, r9, lr, r2
 802ae0c:	fb2a 1808 	smlad	r8, sl, r8, r1
 802ae10:	fb2a 3e0e 	smlad	lr, sl, lr, r3
 802ae14:	f8dc 600c 	ldr.w	r6, [ip, #12]
 802ae18:	f10c 0c10 	add.w	ip, ip, #16
 802ae1c:	6981      	ldr	r1, [r0, #24]
 802ae1e:	f8d4 b018 	ldr.w	fp, [r4, #24]
 802ae22:	fa2f f296 	sxtb16	r2, r6, ror #8
 802ae26:	9b00      	ldr	r3, [sp, #0]
 802ae28:	fa2f f686 	sxtb16	r6, r6
 802ae2c:	68dd      	ldr	r5, [r3, #12]
 802ae2e:	3310      	adds	r3, #16
 802ae30:	9300      	str	r3, [sp, #0]
 802ae32:	eac2 4326 	pkhtb	r3, r2, r6, asr #16
 802ae36:	eac6 4602 	pkhbt	r6, r6, r2, lsl #16
 802ae3a:	fa2f f295 	sxtb16	r2, r5, ror #8
 802ae3e:	fa2f f585 	sxtb16	r5, r5
 802ae42:	eac2 4a25 	pkhtb	sl, r2, r5, asr #16
 802ae46:	eac5 4502 	pkhbt	r5, r5, r2, lsl #16
 802ae4a:	fb26 7201 	smlad	r2, r6, r1, r7
 802ae4e:	fb26 960b 	smlad	r6, r6, fp, r9
 802ae52:	fb25 8101 	smlad	r1, r5, r1, r8
 802ae56:	fb25 e50b 	smlad	r5, r5, fp, lr
 802ae5a:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 802ae5e:	3420      	adds	r4, #32
 802ae60:	f854 7c04 	ldr.w	r7, [r4, #-4]
 802ae64:	3020      	adds	r0, #32
 802ae66:	fb23 220b 	smlad	r2, r3, fp, r2
 802ae6a:	fb23 6307 	smlad	r3, r3, r7, r6
 802ae6e:	fb2a 1b0b 	smlad	fp, sl, fp, r1
 802ae72:	fb2a 5107 	smlad	r1, sl, r7, r5
 802ae76:	9d01      	ldr	r5, [sp, #4]
 802ae78:	4565      	cmp	r5, ip
 802ae7a:	f47f af4a 	bne.w	802ad12 <st_sssa8_nn_mat_mult_kernel+0xaa>
 802ae7e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802ae80:	9803      	ldr	r0, [sp, #12]
 802ae82:	4420      	add	r0, r4
 802ae84:	9003      	str	r0, [sp, #12]
 802ae86:	9814      	ldr	r0, [sp, #80]	@ 0x50
 802ae88:	9004      	str	r0, [sp, #16]
 802ae8a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802ae8c:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802ae90:	4620      	mov	r0, r4
 802ae92:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802ae94:	4284      	cmp	r4, r0
 802ae96:	f340 81e9 	ble.w	802b26c <st_sssa8_nn_mat_mult_kernel+0x604>
 802ae9a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802ae9c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 802aea0:	1a20      	subs	r0, r4, r0
 802aea2:	f8cd c000 	str.w	ip, [sp]
 802aea6:	0880      	lsrs	r0, r0, #2
 802aea8:	900c      	str	r0, [sp, #48]	@ 0x30
 802aeaa:	3001      	adds	r0, #1
 802aeac:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 802aeb0:	0084      	lsls	r4, r0, #2
 802aeb2:	900d      	str	r0, [sp, #52]	@ 0x34
 802aeb4:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 802aeb8:	940e      	str	r4, [sp, #56]	@ 0x38
 802aeba:	e9cd a001 	strd	sl, r0, [sp, #4]
 802aebe:	9800      	ldr	r0, [sp, #0]
 802aec0:	f8d6 9000 	ldr.w	r9, [r6]
 802aec4:	f850 4b04 	ldr.w	r4, [r0], #4
 802aec8:	f8d7 8000 	ldr.w	r8, [r7]
 802aecc:	9000      	str	r0, [sp, #0]
 802aece:	fa2f fc94 	sxtb16	ip, r4, ror #8
 802aed2:	9d01      	ldr	r5, [sp, #4]
 802aed4:	fa2f f484 	sxtb16	r4, r4
 802aed8:	f855 0b04 	ldr.w	r0, [r5], #4
 802aedc:	eacc 4e24 	pkhtb	lr, ip, r4, asr #16
 802aee0:	9501      	str	r5, [sp, #4]
 802aee2:	eac4 440c 	pkhbt	r4, r4, ip, lsl #16
 802aee6:	fa2f fa90 	sxtb16	sl, r0, ror #8
 802aeea:	fa2f f080 	sxtb16	r0, r0
 802aeee:	eaca 4c20 	pkhtb	ip, sl, r0, asr #16
 802aef2:	eac0 400a 	pkhbt	r0, r0, sl, lsl #16
 802aef6:	fb24 2209 	smlad	r2, r4, r9, r2
 802aefa:	fb24 3308 	smlad	r3, r4, r8, r3
 802aefe:	fb20 bb09 	smlad	fp, r0, r9, fp
 802af02:	fb20 1008 	smlad	r0, r0, r8, r1
 802af06:	6874      	ldr	r4, [r6, #4]
 802af08:	3708      	adds	r7, #8
 802af0a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 802af0e:	3608      	adds	r6, #8
 802af10:	fb2e 2204 	smlad	r2, lr, r4, r2
 802af14:	fb2e 3301 	smlad	r3, lr, r1, r3
 802af18:	fb2c bb04 	smlad	fp, ip, r4, fp
 802af1c:	fb2c 0101 	smlad	r1, ip, r1, r0
 802af20:	9802      	ldr	r0, [sp, #8]
 802af22:	9c00      	ldr	r4, [sp, #0]
 802af24:	42a0      	cmp	r0, r4
 802af26:	d1ca      	bne.n	802aebe <st_sssa8_nn_mat_mult_kernel+0x256>
 802af28:	9803      	ldr	r0, [sp, #12]
 802af2a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802af2c:	4420      	add	r0, r4
 802af2e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802af30:	9003      	str	r0, [sp, #12]
 802af32:	9806      	ldr	r0, [sp, #24]
 802af34:	3004      	adds	r0, #4
 802af36:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 802af3a:	9c05      	ldr	r4, [sp, #20]
 802af3c:	9006      	str	r0, [sp, #24]
 802af3e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802af40:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 802af44:	9405      	str	r4, [sp, #20]
 802af46:	9c04      	ldr	r4, [sp, #16]
 802af48:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 802af4c:	9004      	str	r0, [sp, #16]
 802af4e:	e9dd 7606 	ldrd	r7, r6, [sp, #24]
 802af52:	42be      	cmp	r6, r7
 802af54:	dd5e      	ble.n	802b014 <st_sssa8_nn_mat_mult_kernel+0x3ac>
 802af56:	9802      	ldr	r0, [sp, #8]
 802af58:	9c05      	ldr	r4, [sp, #20]
 802af5a:	f990 5000 	ldrsb.w	r5, [r0]
 802af5e:	9803      	ldr	r0, [sp, #12]
 802af60:	f9b4 4000 	ldrsh.w	r4, [r4]
 802af64:	f990 0000 	ldrsb.w	r0, [r0]
 802af68:	fb14 2205 	smlabb	r2, r4, r5, r2
 802af6c:	fb14 bb00 	smlabb	fp, r4, r0, fp
 802af70:	9c04      	ldr	r4, [sp, #16]
 802af72:	f9b4 4000 	ldrsh.w	r4, [r4]
 802af76:	fb14 1100 	smlabb	r1, r4, r0, r1
 802af7a:	1c78      	adds	r0, r7, #1
 802af7c:	fb14 3305 	smlabb	r3, r4, r5, r3
 802af80:	4286      	cmp	r6, r0
 802af82:	dd41      	ble.n	802b008 <st_sssa8_nn_mat_mult_kernel+0x3a0>
 802af84:	9802      	ldr	r0, [sp, #8]
 802af86:	9c05      	ldr	r4, [sp, #20]
 802af88:	f990 5001 	ldrsb.w	r5, [r0, #1]
 802af8c:	9803      	ldr	r0, [sp, #12]
 802af8e:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 802af92:	f990 0001 	ldrsb.w	r0, [r0, #1]
 802af96:	fb14 2205 	smlabb	r2, r4, r5, r2
 802af9a:	fb14 bb00 	smlabb	fp, r4, r0, fp
 802af9e:	9c04      	ldr	r4, [sp, #16]
 802afa0:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 802afa4:	fb14 1100 	smlabb	r1, r4, r0, r1
 802afa8:	1cb8      	adds	r0, r7, #2
 802afaa:	fb14 3305 	smlabb	r3, r4, r5, r3
 802afae:	4286      	cmp	r6, r0
 802afb0:	dd2a      	ble.n	802b008 <st_sssa8_nn_mat_mult_kernel+0x3a0>
 802afb2:	9802      	ldr	r0, [sp, #8]
 802afb4:	9c05      	ldr	r4, [sp, #20]
 802afb6:	f990 5002 	ldrsb.w	r5, [r0, #2]
 802afba:	9803      	ldr	r0, [sp, #12]
 802afbc:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 802afc0:	f990 0002 	ldrsb.w	r0, [r0, #2]
 802afc4:	fb14 2205 	smlabb	r2, r4, r5, r2
 802afc8:	fb14 bb00 	smlabb	fp, r4, r0, fp
 802afcc:	9c04      	ldr	r4, [sp, #16]
 802afce:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 802afd2:	fb14 1100 	smlabb	r1, r4, r0, r1
 802afd6:	1cf8      	adds	r0, r7, #3
 802afd8:	fb14 3305 	smlabb	r3, r4, r5, r3
 802afdc:	4286      	cmp	r6, r0
 802afde:	dd13      	ble.n	802b008 <st_sssa8_nn_mat_mult_kernel+0x3a0>
 802afe0:	9d05      	ldr	r5, [sp, #20]
 802afe2:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
 802afe6:	9d03      	ldr	r5, [sp, #12]
 802afe8:	f995 4003 	ldrsb.w	r4, [r5, #3]
 802afec:	9d04      	ldr	r5, [sp, #16]
 802afee:	fb10 bb04 	smlabb	fp, r0, r4, fp
 802aff2:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 802aff6:	fb15 1104 	smlabb	r1, r5, r4, r1
 802affa:	9c02      	ldr	r4, [sp, #8]
 802affc:	f994 4003 	ldrsb.w	r4, [r4, #3]
 802b000:	fb10 2204 	smlabb	r2, r0, r4, r2
 802b004:	fb15 3304 	smlabb	r3, r5, r4, r3
 802b008:	e9dd 4006 	ldrd	r4, r0, [sp, #24]
 802b00c:	1b00      	subs	r0, r0, r4
 802b00e:	9c02      	ldr	r4, [sp, #8]
 802b010:	4404      	add	r4, r0
 802b012:	9402      	str	r4, [sp, #8]
 802b014:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802b016:	2815      	cmp	r0, #21
 802b018:	f340 80c7 	ble.w	802b1aa <st_sssa8_nn_mat_mult_kernel+0x542>
 802b01c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 802b01e:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 802b020:	9e2a      	ldr	r6, [sp, #168]	@ 0xa8
 802b022:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 802b024:	fb53 4306 	smmla	r3, r3, r6, r4
 802b028:	fb52 4000 	smmla	r0, r2, r0, r4
 802b02c:	4622      	mov	r2, r4
 802b02e:	4128      	asrs	r0, r5
 802b030:	9c2b      	ldr	r4, [sp, #172]	@ 0xac
 802b032:	4420      	add	r0, r4
 802b034:	4614      	mov	r4, r2
 802b036:	fb5b 2206 	smmla	r2, fp, r6, r2
 802b03a:	fb51 4106 	smmla	r1, r1, r6, r4
 802b03e:	f300 0007 	ssat	r0, #8, r0
 802b042:	412a      	asrs	r2, r5
 802b044:	9c2b      	ldr	r4, [sp, #172]	@ 0xac
 802b046:	b240      	sxtb	r0, r0
 802b048:	4422      	add	r2, r4
 802b04a:	f302 0207 	ssat	r2, #8, r2
 802b04e:	412b      	asrs	r3, r5
 802b050:	b252      	sxtb	r2, r2
 802b052:	4423      	add	r3, r4
 802b054:	f303 0307 	ssat	r3, #8, r3
 802b058:	4129      	asrs	r1, r5
 802b05a:	b25b      	sxtb	r3, r3
 802b05c:	4421      	add	r1, r4
 802b05e:	f301 0107 	ssat	r1, #8, r1
 802b062:	b249      	sxtb	r1, r1
 802b064:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802b066:	f804 2c01 	strb.w	r2, [r4, #-1]
 802b06a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802b06c:	f804 0c02 	strb.w	r0, [r4, #-2]
 802b070:	4620      	mov	r0, r4
 802b072:	f802 3c02 	strb.w	r3, [r2, #-2]
 802b076:	4613      	mov	r3, r2
 802b078:	f802 1c01 	strb.w	r1, [r2, #-1]
 802b07c:	3302      	adds	r3, #2
 802b07e:	9a08      	ldr	r2, [sp, #32]
 802b080:	9902      	ldr	r1, [sp, #8]
 802b082:	9c07      	ldr	r4, [sp, #28]
 802b084:	3208      	adds	r2, #8
 802b086:	9309      	str	r3, [sp, #36]	@ 0x24
 802b088:	4421      	add	r1, r4
 802b08a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802b08c:	9208      	str	r2, [sp, #32]
 802b08e:	468c      	mov	ip, r1
 802b090:	429a      	cmp	r2, r3
 802b092:	f100 0102 	add.w	r1, r0, #2
 802b096:	910a      	str	r1, [sp, #40]	@ 0x28
 802b098:	f47f ae29 	bne.w	802acee <st_sssa8_nn_mat_mult_kernel+0x86>
 802b09c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802b09e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802b0a0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 802b0a4:	921a      	str	r2, [sp, #104]	@ 0x68
 802b0a6:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 802b0a8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 802b0ac:	922c      	str	r2, [sp, #176]	@ 0xb0
 802b0ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802b0b0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802b0b4:	9319      	str	r3, [sp, #100]	@ 0x64
 802b0b6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802b0b8:	07db      	lsls	r3, r3, #31
 802b0ba:	d570      	bpl.n	802b19e <st_sssa8_nn_mat_mult_kernel+0x536>
 802b0bc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802b0be:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802b0c0:	681a      	ldr	r2, [r3, #0]
 802b0c2:	9b07      	ldr	r3, [sp, #28]
 802b0c4:	ea5f 0893 	movs.w	r8, r3, lsr #2
 802b0c8:	eb04 0e43 	add.w	lr, r4, r3, lsl #1
 802b0cc:	f000 80f4 	beq.w	802b2b8 <st_sssa8_nn_mat_mult_kernel+0x650>
 802b0d0:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 802b0d4:	4675      	mov	r5, lr
 802b0d6:	4610      	mov	r0, r2
 802b0d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 802b0dc:	fa2f f793 	sxtb16	r7, r3, ror #8
 802b0e0:	fa2f f383 	sxtb16	r3, r3
 802b0e4:	6821      	ldr	r1, [r4, #0]
 802b0e6:	eac7 4623 	pkhtb	r6, r7, r3, asr #16
 802b0ea:	eac3 4307 	pkhbt	r3, r3, r7, lsl #16
 802b0ee:	fb23 2101 	smlad	r1, r3, r1, r2
 802b0f2:	682a      	ldr	r2, [r5, #0]
 802b0f4:	fb23 0302 	smlad	r3, r3, r2, r0
 802b0f8:	6862      	ldr	r2, [r4, #4]
 802b0fa:	3508      	adds	r5, #8
 802b0fc:	f855 0c04 	ldr.w	r0, [r5, #-4]
 802b100:	3408      	adds	r4, #8
 802b102:	fb26 1202 	smlad	r2, r6, r2, r1
 802b106:	fb26 3000 	smlad	r0, r6, r0, r3
 802b10a:	45cc      	cmp	ip, r9
 802b10c:	d1e4      	bne.n	802b0d8 <st_sssa8_nn_mat_mult_kernel+0x470>
 802b10e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b110:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 802b114:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 802b118:	9310      	str	r3, [sp, #64]	@ 0x40
 802b11a:	9b07      	ldr	r3, [sp, #28]
 802b11c:	f013 0303 	ands.w	r3, r3, #3
 802b120:	d020      	beq.n	802b164 <st_sssa8_nn_mat_mult_kernel+0x4fc>
 802b122:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802b124:	3b01      	subs	r3, #1
 802b126:	f999 1000 	ldrsb.w	r1, [r9]
 802b12a:	882c      	ldrh	r4, [r5, #0]
 802b12c:	b29b      	uxth	r3, r3
 802b12e:	fb14 2201 	smlabb	r2, r4, r1, r2
 802b132:	f8be 4000 	ldrh.w	r4, [lr]
 802b136:	fb14 0001 	smlabb	r0, r4, r1, r0
 802b13a:	b19b      	cbz	r3, 802b164 <st_sssa8_nn_mat_mult_kernel+0x4fc>
 802b13c:	f999 1001 	ldrsb.w	r1, [r9, #1]
 802b140:	2b01      	cmp	r3, #1
 802b142:	886c      	ldrh	r4, [r5, #2]
 802b144:	fb14 2201 	smlabb	r2, r4, r1, r2
 802b148:	f8be 4002 	ldrh.w	r4, [lr, #2]
 802b14c:	fb14 0001 	smlabb	r0, r4, r1, r0
 802b150:	d008      	beq.n	802b164 <st_sssa8_nn_mat_mult_kernel+0x4fc>
 802b152:	f999 3002 	ldrsb.w	r3, [r9, #2]
 802b156:	88a9      	ldrh	r1, [r5, #4]
 802b158:	fb11 2203 	smlabb	r2, r1, r3, r2
 802b15c:	f8be 1004 	ldrh.w	r1, [lr, #4]
 802b160:	fb11 0003 	smlabb	r0, r1, r3, r0
 802b164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802b166:	2b15      	cmp	r3, #21
 802b168:	f340 8083 	ble.w	802b272 <st_sssa8_nn_mat_mult_kernel+0x60a>
 802b16c:	1e9c      	subs	r4, r3, #2
 802b16e:	1e59      	subs	r1, r3, #1
 802b170:	2301      	movs	r3, #1
 802b172:	40a3      	lsls	r3, r4
 802b174:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 802b176:	fb52 3204 	smmla	r2, r2, r4, r3
 802b17a:	fb50 3304 	smmla	r3, r0, r4, r3
 802b17e:	410a      	asrs	r2, r1
 802b180:	982b      	ldr	r0, [sp, #172]	@ 0xac
 802b182:	4402      	add	r2, r0
 802b184:	f302 0207 	ssat	r2, #8, r2
 802b188:	410b      	asrs	r3, r1
 802b18a:	4601      	mov	r1, r0
 802b18c:	440b      	add	r3, r1
 802b18e:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 802b190:	f801 2b01 	strb.w	r2, [r1], #1
 802b194:	f303 0307 	ssat	r3, #8, r3
 802b198:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802b19a:	912c      	str	r1, [sp, #176]	@ 0xb0
 802b19c:	7013      	strb	r3, [r2, #0]
 802b19e:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802b1a0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802b1a2:	4418      	add	r0, r3
 802b1a4:	b01f      	add	sp, #124	@ 0x7c
 802b1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b1aa:	2800      	cmp	r0, #0
 802b1ac:	dd23      	ble.n	802b1f6 <st_sssa8_nn_mat_mult_kernel+0x58e>
 802b1ae:	0052      	lsls	r2, r2, #1
 802b1b0:	005b      	lsls	r3, r3, #1
 802b1b2:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 802b1b6:	0049      	lsls	r1, r1, #1
 802b1b8:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	@ 0xa8
 802b1bc:	fb52 5204 	smmla	r2, r2, r4, r5
 802b1c0:	fb53 5304 	smmla	r3, r3, r4, r5
 802b1c4:	4604      	mov	r4, r0
 802b1c6:	fa42 f000 	asr.w	r0, r2, r0
 802b1ca:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 802b1cc:	fb5b 5b02 	smmla	fp, fp, r2, r5
 802b1d0:	fb51 5102 	smmla	r1, r1, r2, r5
 802b1d4:	f300 0007 	ssat	r0, #8, r0
 802b1d8:	b240      	sxtb	r0, r0
 802b1da:	fa4b f204 	asr.w	r2, fp, r4
 802b1de:	f302 0207 	ssat	r2, #8, r2
 802b1e2:	b252      	sxtb	r2, r2
 802b1e4:	4123      	asrs	r3, r4
 802b1e6:	f303 0307 	ssat	r3, #8, r3
 802b1ea:	b25b      	sxtb	r3, r3
 802b1ec:	4121      	asrs	r1, r4
 802b1ee:	f301 0107 	ssat	r1, #8, r1
 802b1f2:	b249      	sxtb	r1, r1
 802b1f4:	e736      	b.n	802b064 <st_sssa8_nn_mat_mult_kernel+0x3fc>
 802b1f6:	981c      	ldr	r0, [sp, #112]	@ 0x70
 802b1f8:	4082      	lsls	r2, r0
 802b1fa:	f302 021f 	ssat	r2, #32, r2
 802b1fe:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 802b200:	fb52 f214 	smmulr	r2, r2, r4
 802b204:	fa03 f400 	lsl.w	r4, r3, r0
 802b208:	f304 041f 	ssat	r4, #32, r4
 802b20c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802b20e:	fb54 f413 	smmulr	r4, r4, r3
 802b212:	fa0b f300 	lsl.w	r3, fp, r0
 802b216:	f303 031f 	ssat	r3, #32, r3
 802b21a:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 802b21c:	fb53 f315 	smmulr	r3, r3, r5
 802b220:	4081      	lsls	r1, r0
 802b222:	f301 011f 	ssat	r1, #32, r1
 802b226:	fb51 f115 	smmulr	r1, r1, r5
 802b22a:	982b      	ldr	r0, [sp, #172]	@ 0xac
 802b22c:	4410      	add	r0, r2
 802b22e:	f300 0007 	ssat	r0, #8, r0
 802b232:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 802b234:	b240      	sxtb	r0, r0
 802b236:	441a      	add	r2, r3
 802b238:	f302 0207 	ssat	r2, #8, r2
 802b23c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802b23e:	b252      	sxtb	r2, r2
 802b240:	4423      	add	r3, r4
 802b242:	f303 0307 	ssat	r3, #8, r3
 802b246:	9c2b      	ldr	r4, [sp, #172]	@ 0xac
 802b248:	b25b      	sxtb	r3, r3
 802b24a:	4421      	add	r1, r4
 802b24c:	f301 0107 	ssat	r1, #8, r1
 802b250:	b249      	sxtb	r1, r1
 802b252:	e707      	b.n	802b064 <st_sssa8_nn_mat_mult_kernel+0x3fc>
 802b254:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802b256:	2000      	movs	r0, #0
 802b258:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802b25a:	4659      	mov	r1, fp
 802b25c:	9304      	str	r3, [sp, #16]
 802b25e:	4284      	cmp	r4, r0
 802b260:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b262:	9006      	str	r0, [sp, #24]
 802b264:	9305      	str	r3, [sp, #20]
 802b266:	4613      	mov	r3, r2
 802b268:	f73f ae17 	bgt.w	802ae9a <st_sssa8_nn_mat_mult_kernel+0x232>
 802b26c:	f8cd c008 	str.w	ip, [sp, #8]
 802b270:	e66d      	b.n	802af4e <st_sssa8_nn_mat_mult_kernel+0x2e6>
 802b272:	2b00      	cmp	r3, #0
 802b274:	4619      	mov	r1, r3
 802b276:	dd0c      	ble.n	802b292 <st_sssa8_nn_mat_mult_kernel+0x62a>
 802b278:	0043      	lsls	r3, r0, #1
 802b27a:	0052      	lsls	r2, r2, #1
 802b27c:	e9dd 042a 	ldrd	r0, r4, [sp, #168]	@ 0xa8
 802b280:	fb52 4200 	smmla	r2, r2, r0, r4
 802b284:	fb53 4300 	smmla	r3, r3, r0, r4
 802b288:	410a      	asrs	r2, r1
 802b28a:	f302 0207 	ssat	r2, #8, r2
 802b28e:	410b      	asrs	r3, r1
 802b290:	e77d      	b.n	802b18e <st_sssa8_nn_mat_mult_kernel+0x526>
 802b292:	f1c3 0301 	rsb	r3, r3, #1
 802b296:	409a      	lsls	r2, r3
 802b298:	f302 021f 	ssat	r2, #32, r2
 802b29c:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 802b29e:	fb52 f211 	smmulr	r2, r2, r1
 802b2a2:	fa00 f303 	lsl.w	r3, r0, r3
 802b2a6:	f303 031f 	ssat	r3, #32, r3
 802b2aa:	fb53 f311 	smmulr	r3, r3, r1
 802b2ae:	992b      	ldr	r1, [sp, #172]	@ 0xac
 802b2b0:	440a      	add	r2, r1
 802b2b2:	f302 0207 	ssat	r2, #8, r2
 802b2b6:	e769      	b.n	802b18c <st_sssa8_nn_mat_mult_kernel+0x524>
 802b2b8:	46e1      	mov	r9, ip
 802b2ba:	4610      	mov	r0, r2
 802b2bc:	e72d      	b.n	802b11a <st_sssa8_nn_mat_mult_kernel+0x4b2>
 802b2be:	bf00      	nop

0802b2c0 <st_sssa8_nn_mat_mult_kernel_opt>:
 802b2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b2c4:	b09b      	sub	sp, #108	@ 0x6c
 802b2c6:	4683      	mov	fp, r0
 802b2c8:	f8bd 6090 	ldrh.w	r6, [sp, #144]	@ 0x90
 802b2cc:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 802b2ce:	f8bd 4094 	ldrh.w	r4, [sp, #148]	@ 0x94
 802b2d2:	0870      	lsrs	r0, r6, #1
 802b2d4:	f9bd 5098 	ldrsh.w	r5, [sp, #152]	@ 0x98
 802b2d8:	441f      	add	r7, r3
 802b2da:	9318      	str	r3, [sp, #96]	@ 0x60
 802b2dc:	9616      	str	r6, [sp, #88]	@ 0x58
 802b2de:	9109      	str	r1, [sp, #36]	@ 0x24
 802b2e0:	9215      	str	r2, [sp, #84]	@ 0x54
 802b2e2:	9401      	str	r4, [sp, #4]
 802b2e4:	9508      	str	r5, [sp, #32]
 802b2e6:	9714      	str	r7, [sp, #80]	@ 0x50
 802b2e8:	9019      	str	r0, [sp, #100]	@ 0x64
 802b2ea:	f000 81a7 	beq.w	802b63c <st_sssa8_nn_mat_mult_kernel_opt+0x37c>
 802b2ee:	460e      	mov	r6, r1
 802b2f0:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 802b2f4:	4694      	mov	ip, r2
 802b2f6:	1e42      	subs	r2, r0, #1
 802b2f8:	910a      	str	r1, [sp, #40]	@ 0x28
 802b2fa:	2001      	movs	r0, #1
 802b2fc:	1ea9      	subs	r1, r5, #2
 802b2fe:	f1a4 0310 	sub.w	r3, r4, #16
 802b302:	b292      	uxth	r2, r2
 802b304:	46d9      	mov	r9, fp
 802b306:	4088      	lsls	r0, r1
 802b308:	091b      	lsrs	r3, r3, #4
 802b30a:	f10c 0110 	add.w	r1, ip, #16
 802b30e:	9012      	str	r0, [sp, #72]	@ 0x48
 802b310:	4660      	mov	r0, ip
 802b312:	3301      	adds	r3, #1
 802b314:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 802b318:	3008      	adds	r0, #8
 802b31a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802b31c:	920b      	str	r2, [sp, #44]	@ 0x2c
 802b31e:	4622      	mov	r2, r4
 802b320:	9002      	str	r0, [sp, #8]
 802b322:	3c03      	subs	r4, #3
 802b324:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 802b326:	940c      	str	r4, [sp, #48]	@ 0x30
 802b328:	3002      	adds	r0, #2
 802b32a:	9004      	str	r0, [sp, #16]
 802b32c:	1cb8      	adds	r0, r7, #2
 802b32e:	9003      	str	r0, [sp, #12]
 802b330:	eb06 1043 	add.w	r0, r6, r3, lsl #5
 802b334:	900d      	str	r0, [sp, #52]	@ 0x34
 802b336:	0118      	lsls	r0, r3, #4
 802b338:	9010      	str	r0, [sp, #64]	@ 0x40
 802b33a:	0198      	lsls	r0, r3, #6
 802b33c:	eb01 1343 	add.w	r3, r1, r3, lsl #5
 802b340:	900e      	str	r0, [sp, #56]	@ 0x38
 802b342:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b344:	1f13      	subs	r3, r2, #4
 802b346:	9311      	str	r3, [sp, #68]	@ 0x44
 802b348:	f1c5 0301 	rsb	r3, r5, #1
 802b34c:	9317      	str	r3, [sp, #92]	@ 0x5c
 802b34e:	1e6b      	subs	r3, r5, #1
 802b350:	9313      	str	r3, [sp, #76]	@ 0x4c
 802b352:	9901      	ldr	r1, [sp, #4]
 802b354:	9a02      	ldr	r2, [sp, #8]
 802b356:	290f      	cmp	r1, #15
 802b358:	e952 3202 	ldrd	r3, r2, [r2, #-8]
 802b35c:	f340 8238 	ble.w	802b7d0 <st_sssa8_nn_mat_mult_kernel_opt+0x510>
 802b360:	464d      	mov	r5, r9
 802b362:	4611      	mov	r1, r2
 802b364:	4618      	mov	r0, r3
 802b366:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 802b368:	e9dd 4609 	ldrd	r4, r6, [sp, #36]	@ 0x24
 802b36c:	f8d4 e000 	ldr.w	lr, [r4]
 802b370:	f8d6 b000 	ldr.w	fp, [r6]
 802b374:	f8d5 8000 	ldr.w	r8, [r5]
 802b378:	f8d5 a004 	ldr.w	sl, [r5, #4]
 802b37c:	fb28 330e 	smlad	r3, r8, lr, r3
 802b380:	fb28 080b 	smlad	r8, r8, fp, r0
 802b384:	fb2a 2e0e 	smlad	lr, sl, lr, r2
 802b388:	fb2a 110b 	smlad	r1, sl, fp, r1
 802b38c:	6862      	ldr	r2, [r4, #4]
 802b38e:	f8d6 c004 	ldr.w	ip, [r6, #4]
 802b392:	f8d5 a008 	ldr.w	sl, [r5, #8]
 802b396:	68e8      	ldr	r0, [r5, #12]
 802b398:	fb2a 3302 	smlad	r3, sl, r2, r3
 802b39c:	fb2a 8a0c 	smlad	sl, sl, ip, r8
 802b3a0:	fb20 e202 	smlad	r2, r0, r2, lr
 802b3a4:	fb20 100c 	smlad	r0, r0, ip, r1
 802b3a8:	f8d4 e008 	ldr.w	lr, [r4, #8]
 802b3ac:	f8d6 c008 	ldr.w	ip, [r6, #8]
 802b3b0:	f8d5 8010 	ldr.w	r8, [r5, #16]
 802b3b4:	6969      	ldr	r1, [r5, #20]
 802b3b6:	fb28 330e 	smlad	r3, r8, lr, r3
 802b3ba:	fb28 a80c 	smlad	r8, r8, ip, sl
 802b3be:	fb21 2e0e 	smlad	lr, r1, lr, r2
 802b3c2:	fb21 010c 	smlad	r1, r1, ip, r0
 802b3c6:	68e0      	ldr	r0, [r4, #12]
 802b3c8:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 802b3cc:	f8d5 c018 	ldr.w	ip, [r5, #24]
 802b3d0:	69ea      	ldr	r2, [r5, #28]
 802b3d2:	fb2c 3300 	smlad	r3, ip, r0, r3
 802b3d6:	fb2c 8c0a 	smlad	ip, ip, sl, r8
 802b3da:	fb22 e000 	smlad	r0, r2, r0, lr
 802b3de:	fb22 120a 	smlad	r2, r2, sl, r1
 802b3e2:	f8d4 e010 	ldr.w	lr, [r4, #16]
 802b3e6:	f8d6 a010 	ldr.w	sl, [r6, #16]
 802b3ea:	f8d5 8020 	ldr.w	r8, [r5, #32]
 802b3ee:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 802b3f0:	fb28 330e 	smlad	r3, r8, lr, r3
 802b3f4:	fb28 c80a 	smlad	r8, r8, sl, ip
 802b3f8:	fb21 0e0e 	smlad	lr, r1, lr, r0
 802b3fc:	fb21 210a 	smlad	r1, r1, sl, r2
 802b400:	6960      	ldr	r0, [r4, #20]
 802b402:	f8d6 a014 	ldr.w	sl, [r6, #20]
 802b406:	f8d5 c028 	ldr.w	ip, [r5, #40]	@ 0x28
 802b40a:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 802b40c:	fb2c 3300 	smlad	r3, ip, r0, r3
 802b410:	fb2c 8c0a 	smlad	ip, ip, sl, r8
 802b414:	fb22 e000 	smlad	r0, r2, r0, lr
 802b418:	fb22 120a 	smlad	r2, r2, sl, r1
 802b41c:	f8d4 e018 	ldr.w	lr, [r4, #24]
 802b420:	f8d6 a018 	ldr.w	sl, [r6, #24]
 802b424:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 802b428:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 802b42a:	fb28 330e 	smlad	r3, r8, lr, r3
 802b42e:	fb28 c80a 	smlad	r8, r8, sl, ip
 802b432:	fb21 0e0e 	smlad	lr, r1, lr, r0
 802b436:	fb21 210a 	smlad	r1, r1, sl, r2
 802b43a:	69e2      	ldr	r2, [r4, #28]
 802b43c:	3620      	adds	r6, #32
 802b43e:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 802b440:	3420      	adds	r4, #32
 802b442:	f8d5 c03c 	ldr.w	ip, [r5, #60]	@ 0x3c
 802b446:	3540      	adds	r5, #64	@ 0x40
 802b448:	f856 ac04 	ldr.w	sl, [r6, #-4]
 802b44c:	fb20 3302 	smlad	r3, r0, r2, r3
 802b450:	fb20 800a 	smlad	r0, r0, sl, r8
 802b454:	fb2c e202 	smlad	r2, ip, r2, lr
 802b458:	fb2c 110a 	smlad	r1, ip, sl, r1
 802b45c:	42a7      	cmp	r7, r4
 802b45e:	d185      	bne.n	802b36c <st_sssa8_nn_mat_mult_kernel_opt+0xac>
 802b460:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802b462:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 802b466:	44a9      	add	r9, r5
 802b468:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802b46a:	9500      	str	r5, [sp, #0]
 802b46c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802b46e:	45ab      	cmp	fp, r5
 802b470:	da3e      	bge.n	802b4f0 <st_sssa8_nn_mat_mult_kernel_opt+0x230>
 802b472:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802b474:	f8dd c000 	ldr.w	ip, [sp]
 802b478:	eba5 050b 	sub.w	r5, r5, fp
 802b47c:	08ad      	lsrs	r5, r5, #2
 802b47e:	462e      	mov	r6, r5
 802b480:	9505      	str	r5, [sp, #20]
 802b482:	464d      	mov	r5, r9
 802b484:	3601      	adds	r6, #1
 802b486:	00f7      	lsls	r7, r6, #3
 802b488:	9606      	str	r6, [sp, #24]
 802b48a:	eb04 08c6 	add.w	r8, r4, r6, lsl #3
 802b48e:	9707      	str	r7, [sp, #28]
 802b490:	4617      	mov	r7, r2
 802b492:	6822      	ldr	r2, [r4, #0]
 802b494:	f8dc a000 	ldr.w	sl, [ip]
 802b498:	f8d5 e000 	ldr.w	lr, [r5]
 802b49c:	686e      	ldr	r6, [r5, #4]
 802b49e:	fb2e 3302 	smlad	r3, lr, r2, r3
 802b4a2:	fb2e 000a 	smlad	r0, lr, sl, r0
 802b4a6:	fb26 7202 	smlad	r2, r6, r2, r7
 802b4aa:	fb26 110a 	smlad	r1, r6, sl, r1
 802b4ae:	6867      	ldr	r7, [r4, #4]
 802b4b0:	f10c 0c08 	add.w	ip, ip, #8
 802b4b4:	68ae      	ldr	r6, [r5, #8]
 802b4b6:	3408      	adds	r4, #8
 802b4b8:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 802b4bc:	3510      	adds	r5, #16
 802b4be:	f85c ac04 	ldr.w	sl, [ip, #-4]
 802b4c2:	fb26 3307 	smlad	r3, r6, r7, r3
 802b4c6:	fb26 000a 	smlad	r0, r6, sl, r0
 802b4ca:	fb2e 2707 	smlad	r7, lr, r7, r2
 802b4ce:	fb2e 110a 	smlad	r1, lr, sl, r1
 802b4d2:	45a0      	cmp	r8, r4
 802b4d4:	d1dd      	bne.n	802b492 <st_sssa8_nn_mat_mult_kernel_opt+0x1d2>
 802b4d6:	9d06      	ldr	r5, [sp, #24]
 802b4d8:	463a      	mov	r2, r7
 802b4da:	9e07      	ldr	r6, [sp, #28]
 802b4dc:	eb09 1905 	add.w	r9, r9, r5, lsl #4
 802b4e0:	9d00      	ldr	r5, [sp, #0]
 802b4e2:	4435      	add	r5, r6
 802b4e4:	9e05      	ldr	r6, [sp, #20]
 802b4e6:	9500      	str	r5, [sp, #0]
 802b4e8:	f10b 0504 	add.w	r5, fp, #4
 802b4ec:	eb05 0b86 	add.w	fp, r5, r6, lsl #2
 802b4f0:	9d01      	ldr	r5, [sp, #4]
 802b4f2:	455d      	cmp	r5, fp
 802b4f4:	dd57      	ble.n	802b5a6 <st_sssa8_nn_mat_mult_kernel_opt+0x2e6>
 802b4f6:	f9b4 6000 	ldrsh.w	r6, [r4]
 802b4fa:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 802b4fe:	f9b9 7000 	ldrsh.w	r7, [r9]
 802b502:	fb06 2205 	mla	r2, r6, r5, r2
 802b506:	fb07 3306 	mla	r3, r7, r6, r3
 802b50a:	9e00      	ldr	r6, [sp, #0]
 802b50c:	f9b6 6000 	ldrsh.w	r6, [r6]
 802b510:	fb06 1105 	mla	r1, r6, r5, r1
 802b514:	f10b 0501 	add.w	r5, fp, #1
 802b518:	fb07 0006 	mla	r0, r7, r6, r0
 802b51c:	9e01      	ldr	r6, [sp, #4]
 802b51e:	42ae      	cmp	r6, r5
 802b520:	dd3c      	ble.n	802b59c <st_sssa8_nn_mat_mult_kernel_opt+0x2dc>
 802b522:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 802b526:	f9b9 5006 	ldrsh.w	r5, [r9, #6]
 802b52a:	f9b9 7004 	ldrsh.w	r7, [r9, #4]
 802b52e:	fb06 2205 	mla	r2, r6, r5, r2
 802b532:	fb07 3306 	mla	r3, r7, r6, r3
 802b536:	9e00      	ldr	r6, [sp, #0]
 802b538:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
 802b53c:	fb06 1105 	mla	r1, r6, r5, r1
 802b540:	f10b 0502 	add.w	r5, fp, #2
 802b544:	fb07 0006 	mla	r0, r7, r6, r0
 802b548:	9e01      	ldr	r6, [sp, #4]
 802b54a:	42ae      	cmp	r6, r5
 802b54c:	dd26      	ble.n	802b59c <st_sssa8_nn_mat_mult_kernel_opt+0x2dc>
 802b54e:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
 802b552:	f9b9 500a 	ldrsh.w	r5, [r9, #10]
 802b556:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 802b55a:	fb06 2205 	mla	r2, r6, r5, r2
 802b55e:	fb07 3306 	mla	r3, r7, r6, r3
 802b562:	9e00      	ldr	r6, [sp, #0]
 802b564:	f9b6 6004 	ldrsh.w	r6, [r6, #4]
 802b568:	fb06 1105 	mla	r1, r6, r5, r1
 802b56c:	f10b 0503 	add.w	r5, fp, #3
 802b570:	fb07 0006 	mla	r0, r7, r6, r0
 802b574:	9e01      	ldr	r6, [sp, #4]
 802b576:	42ae      	cmp	r6, r5
 802b578:	dd10      	ble.n	802b59c <st_sssa8_nn_mat_mult_kernel_opt+0x2dc>
 802b57a:	9e00      	ldr	r6, [sp, #0]
 802b57c:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
 802b580:	f9b6 6006 	ldrsh.w	r6, [r6, #6]
 802b584:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 802b588:	fb04 3305 	mla	r3, r4, r5, r3
 802b58c:	fb04 0006 	mla	r0, r4, r6, r0
 802b590:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 802b594:	fb05 2204 	mla	r2, r5, r4, r2
 802b598:	fb06 1104 	mla	r1, r6, r4, r1
 802b59c:	9c01      	ldr	r4, [sp, #4]
 802b59e:	eba4 0b0b 	sub.w	fp, r4, fp
 802b5a2:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 802b5a6:	9c08      	ldr	r4, [sp, #32]
 802b5a8:	2c15      	cmp	r4, #21
 802b5aa:	f340 80bf 	ble.w	802b72c <st_sssa8_nn_mat_mult_kernel_opt+0x46c>
 802b5ae:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802b5b0:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 802b5b2:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
 802b5b4:	9c27      	ldr	r4, [sp, #156]	@ 0x9c
 802b5b6:	fb50 5007 	smmla	r0, r0, r7, r5
 802b5ba:	fb53 5404 	smmla	r4, r3, r4, r5
 802b5be:	462b      	mov	r3, r5
 802b5c0:	4134      	asrs	r4, r6
 802b5c2:	9d28      	ldr	r5, [sp, #160]	@ 0xa0
 802b5c4:	442c      	add	r4, r5
 802b5c6:	461d      	mov	r5, r3
 802b5c8:	fb52 3307 	smmla	r3, r2, r7, r3
 802b5cc:	fb51 5107 	smmla	r1, r1, r7, r5
 802b5d0:	f304 0407 	ssat	r4, #8, r4
 802b5d4:	4133      	asrs	r3, r6
 802b5d6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802b5d8:	b264      	sxtb	r4, r4
 802b5da:	4413      	add	r3, r2
 802b5dc:	f303 0307 	ssat	r3, #8, r3
 802b5e0:	4130      	asrs	r0, r6
 802b5e2:	b25b      	sxtb	r3, r3
 802b5e4:	4410      	add	r0, r2
 802b5e6:	f300 0007 	ssat	r0, #8, r0
 802b5ea:	4131      	asrs	r1, r6
 802b5ec:	b240      	sxtb	r0, r0
 802b5ee:	188a      	adds	r2, r1, r2
 802b5f0:	f302 0207 	ssat	r2, #8, r2
 802b5f4:	b252      	sxtb	r2, r2
 802b5f6:	9904      	ldr	r1, [sp, #16]
 802b5f8:	f801 3c01 	strb.w	r3, [r1, #-1]
 802b5fc:	3102      	adds	r1, #2
 802b5fe:	9b03      	ldr	r3, [sp, #12]
 802b600:	f801 4c04 	strb.w	r4, [r1, #-4]
 802b604:	3302      	adds	r3, #2
 802b606:	f803 2c03 	strb.w	r2, [r3, #-3]
 802b60a:	9a02      	ldr	r2, [sp, #8]
 802b60c:	f803 0c04 	strb.w	r0, [r3, #-4]
 802b610:	3208      	adds	r2, #8
 802b612:	9303      	str	r3, [sp, #12]
 802b614:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802b616:	9202      	str	r2, [sp, #8]
 802b618:	4293      	cmp	r3, r2
 802b61a:	9104      	str	r1, [sp, #16]
 802b61c:	f47f ae99 	bne.w	802b352 <st_sssa8_nn_mat_mult_kernel_opt+0x92>
 802b620:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802b622:	46cb      	mov	fp, r9
 802b624:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802b626:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 802b62a:	9215      	str	r2, [sp, #84]	@ 0x54
 802b62c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802b62e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 802b632:	9229      	str	r2, [sp, #164]	@ 0xa4
 802b634:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802b636:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802b63a:	9314      	str	r3, [sp, #80]	@ 0x50
 802b63c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b63e:	07db      	lsls	r3, r3, #31
 802b640:	d56b      	bpl.n	802b71a <st_sssa8_nn_mat_mult_kernel_opt+0x45a>
 802b642:	9a01      	ldr	r2, [sp, #4]
 802b644:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802b646:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802b648:	0896      	lsrs	r6, r2, #2
 802b64a:	681b      	ldr	r3, [r3, #0]
 802b64c:	eb00 0742 	add.w	r7, r0, r2, lsl #1
 802b650:	f000 80f4 	beq.w	802b83c <st_sssa8_nn_mat_mult_kernel_opt+0x57c>
 802b654:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 802b658:	463c      	mov	r4, r7
 802b65a:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
 802b65e:	461a      	mov	r2, r3
 802b660:	f8db 5000 	ldr.w	r5, [fp]
 802b664:	f10b 0b08 	add.w	fp, fp, #8
 802b668:	f85b 1c04 	ldr.w	r1, [fp, #-4]
 802b66c:	f8d0 c000 	ldr.w	ip, [r0]
 802b670:	fb25 330c 	smlad	r3, r5, ip, r3
 802b674:	f8d4 c000 	ldr.w	ip, [r4]
 802b678:	fb25 220c 	smlad	r2, r5, ip, r2
 802b67c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 802b680:	3408      	adds	r4, #8
 802b682:	f854 5c04 	ldr.w	r5, [r4, #-4]
 802b686:	3008      	adds	r0, #8
 802b688:	fb21 330c 	smlad	r3, r1, ip, r3
 802b68c:	fb21 2205 	smlad	r2, r1, r5, r2
 802b690:	45b3      	cmp	fp, r6
 802b692:	d1e5      	bne.n	802b660 <st_sssa8_nn_mat_mult_kernel_opt+0x3a0>
 802b694:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802b696:	4477      	add	r7, lr
 802b698:	4471      	add	r1, lr
 802b69a:	9109      	str	r1, [sp, #36]	@ 0x24
 802b69c:	9901      	ldr	r1, [sp, #4]
 802b69e:	f011 0103 	ands.w	r1, r1, #3
 802b6a2:	d01d      	beq.n	802b6e0 <st_sssa8_nn_mat_mult_kernel_opt+0x420>
 802b6a4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802b6a6:	3901      	subs	r1, #1
 802b6a8:	f9b6 0000 	ldrsh.w	r0, [r6]
 802b6ac:	882c      	ldrh	r4, [r5, #0]
 802b6ae:	b289      	uxth	r1, r1
 802b6b0:	fb14 3300 	smlabb	r3, r4, r0, r3
 802b6b4:	883c      	ldrh	r4, [r7, #0]
 802b6b6:	fb14 2200 	smlabb	r2, r4, r0, r2
 802b6ba:	b189      	cbz	r1, 802b6e0 <st_sssa8_nn_mat_mult_kernel_opt+0x420>
 802b6bc:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 802b6c0:	2901      	cmp	r1, #1
 802b6c2:	886c      	ldrh	r4, [r5, #2]
 802b6c4:	fb14 3300 	smlabb	r3, r4, r0, r3
 802b6c8:	887c      	ldrh	r4, [r7, #2]
 802b6ca:	fb14 2200 	smlabb	r2, r4, r0, r2
 802b6ce:	d007      	beq.n	802b6e0 <st_sssa8_nn_mat_mult_kernel_opt+0x420>
 802b6d0:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 802b6d4:	88a8      	ldrh	r0, [r5, #4]
 802b6d6:	fb11 3300 	smlabb	r3, r1, r0, r3
 802b6da:	88b8      	ldrh	r0, [r7, #4]
 802b6dc:	fb11 2200 	smlabb	r2, r1, r0, r2
 802b6e0:	9908      	ldr	r1, [sp, #32]
 802b6e2:	2915      	cmp	r1, #21
 802b6e4:	dd7c      	ble.n	802b7e0 <st_sssa8_nn_mat_mult_kernel_opt+0x520>
 802b6e6:	1e8c      	subs	r4, r1, #2
 802b6e8:	1e48      	subs	r0, r1, #1
 802b6ea:	2101      	movs	r1, #1
 802b6ec:	40a1      	lsls	r1, r4
 802b6ee:	9c27      	ldr	r4, [sp, #156]	@ 0x9c
 802b6f0:	fb53 1404 	smmla	r4, r3, r4, r1
 802b6f4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b6f6:	fb52 1303 	smmla	r3, r2, r3, r1
 802b6fa:	fa44 f200 	asr.w	r2, r4, r0
 802b6fe:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802b700:	440a      	add	r2, r1
 802b702:	f302 0207 	ssat	r2, #8, r2
 802b706:	4103      	asrs	r3, r0
 802b708:	440b      	add	r3, r1
 802b70a:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 802b70c:	f801 2b01 	strb.w	r2, [r1], #1
 802b710:	f303 0307 	ssat	r3, #8, r3
 802b714:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802b716:	9129      	str	r1, [sp, #164]	@ 0xa4
 802b718:	7013      	strb	r3, [r2, #0]
 802b71a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b71c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802b71e:	ebc3 0042 	rsb	r0, r3, r2, lsl #1
 802b722:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802b724:	4418      	add	r0, r3
 802b726:	b01b      	add	sp, #108	@ 0x6c
 802b728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b72c:	2c00      	cmp	r4, #0
 802b72e:	dd23      	ble.n	802b778 <st_sssa8_nn_mat_mult_kernel_opt+0x4b8>
 802b730:	005b      	lsls	r3, r3, #1
 802b732:	0040      	lsls	r0, r0, #1
 802b734:	0052      	lsls	r2, r2, #1
 802b736:	0049      	lsls	r1, r1, #1
 802b738:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 802b73c:	fb53 6305 	smmla	r3, r3, r5, r6
 802b740:	fb50 6005 	smmla	r0, r0, r5, r6
 802b744:	4625      	mov	r5, r4
 802b746:	fa43 f404 	asr.w	r4, r3, r4
 802b74a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b74c:	fb52 6203 	smmla	r2, r2, r3, r6
 802b750:	fb51 6103 	smmla	r1, r1, r3, r6
 802b754:	f304 0407 	ssat	r4, #8, r4
 802b758:	b264      	sxtb	r4, r4
 802b75a:	fa42 f305 	asr.w	r3, r2, r5
 802b75e:	f303 0307 	ssat	r3, #8, r3
 802b762:	b25b      	sxtb	r3, r3
 802b764:	4128      	asrs	r0, r5
 802b766:	f300 0007 	ssat	r0, #8, r0
 802b76a:	b240      	sxtb	r0, r0
 802b76c:	fa41 f205 	asr.w	r2, r1, r5
 802b770:	f302 0207 	ssat	r2, #8, r2
 802b774:	b252      	sxtb	r2, r2
 802b776:	e73e      	b.n	802b5f6 <st_sssa8_nn_mat_mult_kernel_opt+0x336>
 802b778:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 802b77a:	fa03 f405 	lsl.w	r4, r3, r5
 802b77e:	f304 041f 	ssat	r4, #32, r4
 802b782:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b784:	fb54 f413 	smmulr	r4, r4, r3
 802b788:	40a8      	lsls	r0, r5
 802b78a:	f300 001f 	ssat	r0, #32, r0
 802b78e:	fb50 f013 	smmulr	r0, r0, r3
 802b792:	fa02 f305 	lsl.w	r3, r2, r5
 802b796:	f303 031f 	ssat	r3, #32, r3
 802b79a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802b79c:	fb53 f312 	smmulr	r3, r3, r2
 802b7a0:	40a9      	lsls	r1, r5
 802b7a2:	f301 021f 	ssat	r2, #32, r1
 802b7a6:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 802b7a8:	fb52 f211 	smmulr	r2, r2, r1
 802b7ac:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802b7ae:	440c      	add	r4, r1
 802b7b0:	f304 0407 	ssat	r4, #8, r4
 802b7b4:	b264      	sxtb	r4, r4
 802b7b6:	440b      	add	r3, r1
 802b7b8:	f303 0307 	ssat	r3, #8, r3
 802b7bc:	b25b      	sxtb	r3, r3
 802b7be:	4408      	add	r0, r1
 802b7c0:	f300 0007 	ssat	r0, #8, r0
 802b7c4:	b240      	sxtb	r0, r0
 802b7c6:	440a      	add	r2, r1
 802b7c8:	f302 0207 	ssat	r2, #8, r2
 802b7cc:	b252      	sxtb	r2, r2
 802b7ce:	e712      	b.n	802b5f6 <st_sssa8_nn_mat_mult_kernel_opt+0x336>
 802b7d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802b7d2:	4618      	mov	r0, r3
 802b7d4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802b7d6:	f04f 0b00 	mov.w	fp, #0
 802b7da:	9100      	str	r1, [sp, #0]
 802b7dc:	4611      	mov	r1, r2
 802b7de:	e645      	b.n	802b46c <st_sssa8_nn_mat_mult_kernel_opt+0x1ac>
 802b7e0:	2900      	cmp	r1, #0
 802b7e2:	4608      	mov	r0, r1
 802b7e4:	dd15      	ble.n	802b812 <st_sssa8_nn_mat_mult_kernel_opt+0x552>
 802b7e6:	0059      	lsls	r1, r3, #1
 802b7e8:	0053      	lsls	r3, r2, #1
 802b7ea:	e9dd 2427 	ldrd	r2, r4, [sp, #156]	@ 0x9c
 802b7ee:	fb51 4202 	smmla	r2, r1, r2, r4
 802b7f2:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 802b7f4:	4102      	asrs	r2, r0
 802b7f6:	fb53 4301 	smmla	r3, r3, r1, r4
 802b7fa:	f302 0207 	ssat	r2, #8, r2
 802b7fe:	4103      	asrs	r3, r0
 802b800:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 802b802:	f801 2b01 	strb.w	r2, [r1], #1
 802b806:	f303 0307 	ssat	r3, #8, r3
 802b80a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802b80c:	9129      	str	r1, [sp, #164]	@ 0xa4
 802b80e:	7013      	strb	r3, [r2, #0]
 802b810:	e783      	b.n	802b71a <st_sssa8_nn_mat_mult_kernel_opt+0x45a>
 802b812:	f1c1 0101 	rsb	r1, r1, #1
 802b816:	408b      	lsls	r3, r1
 802b818:	f303 031f 	ssat	r3, #32, r3
 802b81c:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802b81e:	fb53 f310 	smmulr	r3, r3, r0
 802b822:	fa02 f101 	lsl.w	r1, r2, r1
 802b826:	f301 011f 	ssat	r1, #32, r1
 802b82a:	fb51 f110 	smmulr	r1, r1, r0
 802b82e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802b830:	441a      	add	r2, r3
 802b832:	f302 0207 	ssat	r2, #8, r2
 802b836:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b838:	440b      	add	r3, r1
 802b83a:	e7e1      	b.n	802b800 <st_sssa8_nn_mat_mult_kernel_opt+0x540>
 802b83c:	465e      	mov	r6, fp
 802b83e:	461a      	mov	r2, r3
 802b840:	e72c      	b.n	802b69c <st_sssa8_nn_mat_mult_kernel_opt+0x3dc>
 802b842:	bf00      	nop

0802b844 <st_sssa8_nn_mat_mult_kernel_single_opt>:
 802b844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b848:	b091      	sub	sp, #68	@ 0x44
 802b84a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 802b84e:	f9bd 5070 	ldrsh.w	r5, [sp, #112]	@ 0x70
 802b852:	085c      	lsrs	r4, r3, #1
 802b854:	f8bd b06c 	ldrh.w	fp, [sp, #108]	@ 0x6c
 802b858:	930e      	str	r3, [sp, #56]	@ 0x38
 802b85a:	9104      	str	r1, [sp, #16]
 802b85c:	920c      	str	r2, [sp, #48]	@ 0x30
 802b85e:	9503      	str	r5, [sp, #12]
 802b860:	940f      	str	r4, [sp, #60]	@ 0x3c
 802b862:	f000 8193 	beq.w	802bb8c <st_sssa8_nn_mat_mult_kernel_single_opt+0x348>
 802b866:	4617      	mov	r7, r2
 802b868:	468c      	mov	ip, r1
 802b86a:	1e62      	subs	r2, r4, #1
 802b86c:	1ea9      	subs	r1, r5, #2
 802b86e:	2401      	movs	r4, #1
 802b870:	f1ab 0310 	sub.w	r3, fp, #16
 802b874:	b292      	uxth	r2, r2
 802b876:	f107 0908 	add.w	r9, r7, #8
 802b87a:	fa04 f601 	lsl.w	r6, r4, r1
 802b87e:	f107 0110 	add.w	r1, r7, #16
 802b882:	091b      	lsrs	r3, r3, #4
 802b884:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 802b888:	960a      	str	r6, [sp, #40]	@ 0x28
 802b88a:	3301      	adds	r3, #1
 802b88c:	9205      	str	r2, [sp, #20]
 802b88e:	f1ab 0203 	sub.w	r2, fp, #3
 802b892:	eb0c 1843 	add.w	r8, ip, r3, lsl #5
 802b896:	9206      	str	r2, [sp, #24]
 802b898:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 802b89a:	3202      	adds	r2, #2
 802b89c:	9201      	str	r2, [sp, #4]
 802b89e:	011a      	lsls	r2, r3, #4
 802b8a0:	019b      	lsls	r3, r3, #6
 802b8a2:	9208      	str	r2, [sp, #32]
 802b8a4:	9307      	str	r3, [sp, #28]
 802b8a6:	f1ab 0304 	sub.w	r3, fp, #4
 802b8aa:	9309      	str	r3, [sp, #36]	@ 0x24
 802b8ac:	f1c5 0301 	rsb	r3, r5, #1
 802b8b0:	930d      	str	r3, [sp, #52]	@ 0x34
 802b8b2:	1e6b      	subs	r3, r5, #1
 802b8b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 802b8b6:	f1bb 0f0f 	cmp.w	fp, #15
 802b8ba:	9c04      	ldr	r4, [sp, #16]
 802b8bc:	e959 2302 	ldrd	r2, r3, [r9, #-8]
 802b8c0:	f340 813d 	ble.w	802bb3e <st_sssa8_nn_mat_mult_kernel_single_opt+0x2fa>
 802b8c4:	4601      	mov	r1, r0
 802b8c6:	6826      	ldr	r6, [r4, #0]
 802b8c8:	680d      	ldr	r5, [r1, #0]
 802b8ca:	fb25 2506 	smlad	r5, r5, r6, r2
 802b8ce:	684a      	ldr	r2, [r1, #4]
 802b8d0:	fb22 3206 	smlad	r2, r2, r6, r3
 802b8d4:	6866      	ldr	r6, [r4, #4]
 802b8d6:	688b      	ldr	r3, [r1, #8]
 802b8d8:	fb23 5306 	smlad	r3, r3, r6, r5
 802b8dc:	68cd      	ldr	r5, [r1, #12]
 802b8de:	fb25 2506 	smlad	r5, r5, r6, r2
 802b8e2:	68a6      	ldr	r6, [r4, #8]
 802b8e4:	690a      	ldr	r2, [r1, #16]
 802b8e6:	fb22 3206 	smlad	r2, r2, r6, r3
 802b8ea:	694b      	ldr	r3, [r1, #20]
 802b8ec:	fb23 5306 	smlad	r3, r3, r6, r5
 802b8f0:	68e6      	ldr	r6, [r4, #12]
 802b8f2:	698d      	ldr	r5, [r1, #24]
 802b8f4:	fb25 2506 	smlad	r5, r5, r6, r2
 802b8f8:	69ca      	ldr	r2, [r1, #28]
 802b8fa:	fb22 3206 	smlad	r2, r2, r6, r3
 802b8fe:	6926      	ldr	r6, [r4, #16]
 802b900:	6a0b      	ldr	r3, [r1, #32]
 802b902:	fb23 5306 	smlad	r3, r3, r6, r5
 802b906:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 802b908:	fb25 2506 	smlad	r5, r5, r6, r2
 802b90c:	6966      	ldr	r6, [r4, #20]
 802b90e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 802b910:	fb22 3206 	smlad	r2, r2, r6, r3
 802b914:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 802b916:	fb23 5306 	smlad	r3, r3, r6, r5
 802b91a:	69a7      	ldr	r7, [r4, #24]
 802b91c:	6b0e      	ldr	r6, [r1, #48]	@ 0x30
 802b91e:	fb26 2607 	smlad	r6, r6, r7, r2
 802b922:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 802b924:	fb25 3507 	smlad	r5, r5, r7, r3
 802b928:	69e7      	ldr	r7, [r4, #28]
 802b92a:	3140      	adds	r1, #64	@ 0x40
 802b92c:	f851 2c08 	ldr.w	r2, [r1, #-8]
 802b930:	3420      	adds	r4, #32
 802b932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b936:	fb22 6207 	smlad	r2, r2, r7, r6
 802b93a:	fb23 5307 	smlad	r3, r3, r7, r5
 802b93e:	4544      	cmp	r4, r8
 802b940:	d1c1      	bne.n	802b8c6 <st_sssa8_nn_mat_mult_kernel_single_opt+0x82>
 802b942:	9907      	ldr	r1, [sp, #28]
 802b944:	4644      	mov	r4, r8
 802b946:	f8dd c020 	ldr.w	ip, [sp, #32]
 802b94a:	4408      	add	r0, r1
 802b94c:	9906      	ldr	r1, [sp, #24]
 802b94e:	458c      	cmp	ip, r1
 802b950:	f280 80f3 	bge.w	802bb3a <st_sssa8_nn_mat_mult_kernel_single_opt+0x2f6>
 802b954:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802b956:	eba1 0a0c 	sub.w	sl, r1, ip
 802b95a:	4601      	mov	r1, r0
 802b95c:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 802b960:	f10a 0501 	add.w	r5, sl, #1
 802b964:	eb04 0ec5 	add.w	lr, r4, r5, lsl #3
 802b968:	9502      	str	r5, [sp, #8]
 802b96a:	6825      	ldr	r5, [r4, #0]
 802b96c:	680e      	ldr	r6, [r1, #0]
 802b96e:	fb26 2605 	smlad	r6, r6, r5, r2
 802b972:	684a      	ldr	r2, [r1, #4]
 802b974:	fb22 3505 	smlad	r5, r2, r5, r3
 802b978:	6867      	ldr	r7, [r4, #4]
 802b97a:	3110      	adds	r1, #16
 802b97c:	f851 2c08 	ldr.w	r2, [r1, #-8]
 802b980:	3408      	adds	r4, #8
 802b982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b986:	fb22 6207 	smlad	r2, r2, r7, r6
 802b98a:	fb23 5307 	smlad	r3, r3, r7, r5
 802b98e:	4574      	cmp	r4, lr
 802b990:	d1eb      	bne.n	802b96a <st_sssa8_nn_mat_mult_kernel_single_opt+0x126>
 802b992:	9902      	ldr	r1, [sp, #8]
 802b994:	f10c 0c04 	add.w	ip, ip, #4
 802b998:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 802b99c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 802b9a0:	45e3      	cmp	fp, ip
 802b9a2:	dd2f      	ble.n	802ba04 <st_sssa8_nn_mat_mult_kernel_single_opt+0x1c0>
 802b9a4:	f9be 1000 	ldrsh.w	r1, [lr]
 802b9a8:	8804      	ldrh	r4, [r0, #0]
 802b9aa:	fb14 2201 	smlabb	r2, r4, r1, r2
 802b9ae:	8844      	ldrh	r4, [r0, #2]
 802b9b0:	fb11 3304 	smlabb	r3, r1, r4, r3
 802b9b4:	f10c 0101 	add.w	r1, ip, #1
 802b9b8:	458b      	cmp	fp, r1
 802b9ba:	dd1f      	ble.n	802b9fc <st_sssa8_nn_mat_mult_kernel_single_opt+0x1b8>
 802b9bc:	f9be 1002 	ldrsh.w	r1, [lr, #2]
 802b9c0:	8884      	ldrh	r4, [r0, #4]
 802b9c2:	fb14 2201 	smlabb	r2, r4, r1, r2
 802b9c6:	88c4      	ldrh	r4, [r0, #6]
 802b9c8:	fb11 3304 	smlabb	r3, r1, r4, r3
 802b9cc:	f10c 0102 	add.w	r1, ip, #2
 802b9d0:	458b      	cmp	fp, r1
 802b9d2:	dd13      	ble.n	802b9fc <st_sssa8_nn_mat_mult_kernel_single_opt+0x1b8>
 802b9d4:	f9be 1004 	ldrsh.w	r1, [lr, #4]
 802b9d8:	8904      	ldrh	r4, [r0, #8]
 802b9da:	fb14 2201 	smlabb	r2, r4, r1, r2
 802b9de:	8944      	ldrh	r4, [r0, #10]
 802b9e0:	fb11 3304 	smlabb	r3, r1, r4, r3
 802b9e4:	f10c 0103 	add.w	r1, ip, #3
 802b9e8:	458b      	cmp	fp, r1
 802b9ea:	dd07      	ble.n	802b9fc <st_sssa8_nn_mat_mult_kernel_single_opt+0x1b8>
 802b9ec:	f9be 1006 	ldrsh.w	r1, [lr, #6]
 802b9f0:	8984      	ldrh	r4, [r0, #12]
 802b9f2:	fb14 2201 	smlabb	r2, r4, r1, r2
 802b9f6:	89c4      	ldrh	r4, [r0, #14]
 802b9f8:	fb11 3304 	smlabb	r3, r1, r4, r3
 802b9fc:	ebab 0c0c 	sub.w	ip, fp, ip
 802ba00:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 802ba04:	9903      	ldr	r1, [sp, #12]
 802ba06:	2915      	cmp	r1, #21
 802ba08:	dd6e      	ble.n	802bae8 <st_sssa8_nn_mat_mult_kernel_single_opt+0x2a4>
 802ba0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802ba0c:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 802ba0e:	fb52 1204 	smmla	r2, r2, r4, r1
 802ba12:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802ba14:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 802ba16:	4122      	asrs	r2, r4
 802ba18:	fb53 1305 	smmla	r3, r3, r5, r1
 802ba1c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802ba1e:	440a      	add	r2, r1
 802ba20:	f302 0207 	ssat	r2, #8, r2
 802ba24:	4123      	asrs	r3, r4
 802ba26:	b252      	sxtb	r2, r2
 802ba28:	440b      	add	r3, r1
 802ba2a:	f303 0307 	ssat	r3, #8, r3
 802ba2e:	b25b      	sxtb	r3, r3
 802ba30:	9901      	ldr	r1, [sp, #4]
 802ba32:	f109 0908 	add.w	r9, r9, #8
 802ba36:	f801 3c01 	strb.w	r3, [r1, #-1]
 802ba3a:	1c8b      	adds	r3, r1, #2
 802ba3c:	f801 2c02 	strb.w	r2, [r1, #-2]
 802ba40:	9301      	str	r3, [sp, #4]
 802ba42:	9b05      	ldr	r3, [sp, #20]
 802ba44:	4599      	cmp	r9, r3
 802ba46:	f47f af36 	bne.w	802b8b6 <st_sssa8_nn_mat_mult_kernel_single_opt+0x72>
 802ba4a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802ba4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ba4e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 802ba52:	920c      	str	r2, [sp, #48]	@ 0x30
 802ba54:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 802ba56:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 802ba5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802ba5c:	07db      	lsls	r3, r3, #31
 802ba5e:	d53f      	bpl.n	802bae0 <st_sssa8_nn_mat_mult_kernel_single_opt+0x29c>
 802ba60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802ba62:	ea5f 069b 	movs.w	r6, fp, lsr #2
 802ba66:	681a      	ldr	r2, [r3, #0]
 802ba68:	d014      	beq.n	802ba94 <st_sssa8_nn_mat_mult_kernel_single_opt+0x250>
 802ba6a:	00f7      	lsls	r7, r6, #3
 802ba6c:	9b04      	ldr	r3, [sp, #16]
 802ba6e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 802ba72:	6805      	ldr	r5, [r0, #0]
 802ba74:	3008      	adds	r0, #8
 802ba76:	f850 4c04 	ldr.w	r4, [r0, #-4]
 802ba7a:	f8d3 c000 	ldr.w	ip, [r3]
 802ba7e:	fb25 220c 	smlad	r2, r5, ip, r2
 802ba82:	685d      	ldr	r5, [r3, #4]
 802ba84:	3308      	adds	r3, #8
 802ba86:	fb24 2205 	smlad	r2, r4, r5, r2
 802ba8a:	4286      	cmp	r6, r0
 802ba8c:	d1f1      	bne.n	802ba72 <st_sssa8_nn_mat_mult_kernel_single_opt+0x22e>
 802ba8e:	9b04      	ldr	r3, [sp, #16]
 802ba90:	443b      	add	r3, r7
 802ba92:	9304      	str	r3, [sp, #16]
 802ba94:	f01b 0303 	ands.w	r3, fp, #3
 802ba98:	d011      	beq.n	802babe <st_sssa8_nn_mat_mult_kernel_single_opt+0x27a>
 802ba9a:	3b01      	subs	r3, #1
 802ba9c:	9e04      	ldr	r6, [sp, #16]
 802ba9e:	8804      	ldrh	r4, [r0, #0]
 802baa0:	8835      	ldrh	r5, [r6, #0]
 802baa2:	b29b      	uxth	r3, r3
 802baa4:	fb15 2204 	smlabb	r2, r5, r4, r2
 802baa8:	b14b      	cbz	r3, 802babe <st_sssa8_nn_mat_mult_kernel_single_opt+0x27a>
 802baaa:	8875      	ldrh	r5, [r6, #2]
 802baac:	2b01      	cmp	r3, #1
 802baae:	8844      	ldrh	r4, [r0, #2]
 802bab0:	fb15 2204 	smlabb	r2, r5, r4, r2
 802bab4:	d003      	beq.n	802babe <st_sssa8_nn_mat_mult_kernel_single_opt+0x27a>
 802bab6:	8880      	ldrh	r0, [r0, #4]
 802bab8:	88b3      	ldrh	r3, [r6, #4]
 802baba:	fb10 2203 	smlabb	r2, r0, r3, r2
 802babe:	9b03      	ldr	r3, [sp, #12]
 802bac0:	2b15      	cmp	r3, #21
 802bac2:	dd3f      	ble.n	802bb44 <st_sssa8_nn_mat_mult_kernel_single_opt+0x300>
 802bac4:	1e9c      	subs	r4, r3, #2
 802bac6:	1e58      	subs	r0, r3, #1
 802bac8:	2301      	movs	r3, #1
 802baca:	40a3      	lsls	r3, r4
 802bacc:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 802bace:	fb52 3304 	smmla	r3, r2, r4, r3
 802bad2:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802bad4:	4103      	asrs	r3, r0
 802bad6:	4413      	add	r3, r2
 802bad8:	f303 0307 	ssat	r3, #8, r3
 802badc:	f801 3b01 	strb.w	r3, [r1], #1
 802bae0:	4608      	mov	r0, r1
 802bae2:	b011      	add	sp, #68	@ 0x44
 802bae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bae8:	2900      	cmp	r1, #0
 802baea:	dd10      	ble.n	802bb0e <st_sssa8_nn_mat_mult_kernel_single_opt+0x2ca>
 802baec:	0052      	lsls	r2, r2, #1
 802baee:	005b      	lsls	r3, r3, #1
 802baf0:	e9dd 451d 	ldrd	r4, r5, [sp, #116]	@ 0x74
 802baf4:	fb52 5204 	smmla	r2, r2, r4, r5
 802baf8:	fb53 5304 	smmla	r3, r3, r4, r5
 802bafc:	410a      	asrs	r2, r1
 802bafe:	f302 0207 	ssat	r2, #8, r2
 802bb02:	b252      	sxtb	r2, r2
 802bb04:	410b      	asrs	r3, r1
 802bb06:	f303 0307 	ssat	r3, #8, r3
 802bb0a:	b25b      	sxtb	r3, r3
 802bb0c:	e790      	b.n	802ba30 <st_sssa8_nn_mat_mult_kernel_single_opt+0x1ec>
 802bb0e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802bb10:	408a      	lsls	r2, r1
 802bb12:	f302 021f 	ssat	r2, #32, r2
 802bb16:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 802bb18:	fb52 f214 	smmulr	r2, r2, r4
 802bb1c:	408b      	lsls	r3, r1
 802bb1e:	f303 031f 	ssat	r3, #32, r3
 802bb22:	fb53 f314 	smmulr	r3, r3, r4
 802bb26:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802bb28:	440a      	add	r2, r1
 802bb2a:	f302 0207 	ssat	r2, #8, r2
 802bb2e:	b252      	sxtb	r2, r2
 802bb30:	440b      	add	r3, r1
 802bb32:	f303 0307 	ssat	r3, #8, r3
 802bb36:	b25b      	sxtb	r3, r3
 802bb38:	e77a      	b.n	802ba30 <st_sssa8_nn_mat_mult_kernel_single_opt+0x1ec>
 802bb3a:	46a6      	mov	lr, r4
 802bb3c:	e730      	b.n	802b9a0 <st_sssa8_nn_mat_mult_kernel_single_opt+0x15c>
 802bb3e:	f04f 0c00 	mov.w	ip, #0
 802bb42:	e703      	b.n	802b94c <st_sssa8_nn_mat_mult_kernel_single_opt+0x108>
 802bb44:	2b00      	cmp	r3, #0
 802bb46:	4618      	mov	r0, r3
 802bb48:	dd0d      	ble.n	802bb66 <st_sssa8_nn_mat_mult_kernel_single_opt+0x322>
 802bb4a:	0053      	lsls	r3, r2, #1
 802bb4c:	e9dd 241d 	ldrd	r2, r4, [sp, #116]	@ 0x74
 802bb50:	fb53 4302 	smmla	r3, r3, r2, r4
 802bb54:	4103      	asrs	r3, r0
 802bb56:	f303 0307 	ssat	r3, #8, r3
 802bb5a:	f801 3b01 	strb.w	r3, [r1], #1
 802bb5e:	4608      	mov	r0, r1
 802bb60:	b011      	add	sp, #68	@ 0x44
 802bb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bb66:	f1c3 0301 	rsb	r3, r3, #1
 802bb6a:	fa02 f303 	lsl.w	r3, r2, r3
 802bb6e:	f303 031f 	ssat	r3, #32, r3
 802bb72:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 802bb74:	fb53 f312 	smmulr	r3, r3, r2
 802bb78:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802bb7a:	4413      	add	r3, r2
 802bb7c:	f303 0307 	ssat	r3, #8, r3
 802bb80:	f801 3b01 	strb.w	r3, [r1], #1
 802bb84:	4608      	mov	r0, r1
 802bb86:	b011      	add	sp, #68	@ 0x44
 802bb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bb8c:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 802bb8e:	e764      	b.n	802ba5a <st_sssa8_nn_mat_mult_kernel_single_opt+0x216>

0802bb90 <st_uint8_fill>:
 802bb90:	078b      	lsls	r3, r1, #30
 802bb92:	468c      	mov	ip, r1
 802bb94:	d009      	beq.n	802bbaa <st_uint8_fill+0x1a>
 802bb96:	b90a      	cbnz	r2, 802bb9c <st_uint8_fill+0xc>
 802bb98:	e03d      	b.n	802bc16 <st_uint8_fill+0x86>
 802bb9a:	b3ea      	cbz	r2, 802bc18 <st_uint8_fill+0x88>
 802bb9c:	f80c 0b01 	strb.w	r0, [ip], #1
 802bba0:	f01c 0f03 	tst.w	ip, #3
 802bba4:	f102 32ff 	add.w	r2, r2, #4294967295
 802bba8:	d1f7      	bne.n	802bb9a <st_uint8_fill+0xa>
 802bbaa:	b510      	push	{r4, lr}
 802bbac:	0404      	lsls	r4, r0, #16
 802bbae:	0911      	lsrs	r1, r2, #4
 802bbb0:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 802bbb4:	ea44 0400 	orr.w	r4, r4, r0
 802bbb8:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
 802bbbc:	d043      	beq.n	802bc46 <st_uint8_fill+0xb6>
 802bbbe:	1e4b      	subs	r3, r1, #1
 802bbc0:	2b01      	cmp	r3, #1
 802bbc2:	d92a      	bls.n	802bc1a <st_uint8_fill+0x8a>
 802bbc4:	f01c 0f07 	tst.w	ip, #7
 802bbc8:	d127      	bne.n	802bc1a <st_uint8_fill+0x8a>
 802bbca:	f10c 0310 	add.w	r3, ip, #16
 802bbce:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 802bbd2:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 802bbd6:	e943 4404 	strd	r4, r4, [r3, #-16]
 802bbda:	e943 4402 	strd	r4, r4, [r3, #-8]
 802bbde:	3310      	adds	r3, #16
 802bbe0:	428b      	cmp	r3, r1
 802bbe2:	d1f8      	bne.n	802bbd6 <st_uint8_fill+0x46>
 802bbe4:	f3c2 0381 	ubfx	r3, r2, #2, #2
 802bbe8:	44f4      	add	ip, lr
 802bbea:	f002 0203 	and.w	r2, r2, #3
 802bbee:	b15b      	cbz	r3, 802bc08 <st_uint8_fill+0x78>
 802bbf0:	1e59      	subs	r1, r3, #1
 802bbf2:	f8cc 4000 	str.w	r4, [ip]
 802bbf6:	d005      	beq.n	802bc04 <st_uint8_fill+0x74>
 802bbf8:	2901      	cmp	r1, #1
 802bbfa:	f8cc 4004 	str.w	r4, [ip, #4]
 802bbfe:	bf18      	it	ne
 802bc00:	f8cc 4008 	strne.w	r4, [ip, #8]
 802bc04:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 802bc08:	b1e2      	cbz	r2, 802bc44 <st_uint8_fill+0xb4>
 802bc0a:	4601      	mov	r1, r0
 802bc0c:	4660      	mov	r0, ip
 802bc0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802bc12:	f008 b93e 	b.w	8033e92 <memset>
 802bc16:	4770      	bx	lr
 802bc18:	4770      	bx	lr
 802bc1a:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 802bc1e:	4663      	mov	r3, ip
 802bc20:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 802bc24:	601c      	str	r4, [r3, #0]
 802bc26:	3310      	adds	r3, #16
 802bc28:	f843 4c0c 	str.w	r4, [r3, #-12]
 802bc2c:	f843 4c08 	str.w	r4, [r3, #-8]
 802bc30:	f843 4c04 	str.w	r4, [r3, #-4]
 802bc34:	428b      	cmp	r3, r1
 802bc36:	d1f5      	bne.n	802bc24 <st_uint8_fill+0x94>
 802bc38:	f3c2 0381 	ubfx	r3, r2, #2, #2
 802bc3c:	44f4      	add	ip, lr
 802bc3e:	f002 0203 	and.w	r2, r2, #3
 802bc42:	e7d4      	b.n	802bbee <st_uint8_fill+0x5e>
 802bc44:	bd10      	pop	{r4, pc}
 802bc46:	0893      	lsrs	r3, r2, #2
 802bc48:	f002 0203 	and.w	r2, r2, #3
 802bc4c:	e7cf      	b.n	802bbee <st_uint8_fill+0x5e>
 802bc4e:	bf00      	nop

0802bc50 <st_int8_to_f32>:
 802bc50:	b530      	push	{r4, r5, lr}
 802bc52:	0894      	lsrs	r4, r2, #2
 802bc54:	d036      	beq.n	802bcc4 <st_int8_to_f32+0x74>
 802bc56:	1d03      	adds	r3, r0, #4
 802bc58:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 802bd14 <st_int8_to_f32+0xc4>
 802bc5c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 802bc60:	f101 0c10 	add.w	ip, r1, #16
 802bc64:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 802bc68:	f10c 0c10 	add.w	ip, ip, #16
 802bc6c:	ee07 ea90 	vmov	s15, lr
 802bc70:	469e      	mov	lr, r3
 802bc72:	3304      	adds	r3, #4
 802bc74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802bc78:	4586      	cmp	lr, r0
 802bc7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 802bc7e:	ed4c 7a08 	vstr	s15, [ip, #-32]	@ 0xffffffe0
 802bc82:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 802bc86:	ee07 5a90 	vmov	s15, r5
 802bc8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802bc8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 802bc92:	ed4c 7a07 	vstr	s15, [ip, #-28]	@ 0xffffffe4
 802bc96:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 802bc9a:	ee07 5a90 	vmov	s15, r5
 802bc9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802bca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 802bca6:	ed4c 7a06 	vstr	s15, [ip, #-24]	@ 0xffffffe8
 802bcaa:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 802bcae:	ee07 5a90 	vmov	s15, r5
 802bcb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802bcb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 802bcba:	ed4c 7a05 	vstr	s15, [ip, #-20]	@ 0xffffffec
 802bcbe:	d1d1      	bne.n	802bc64 <st_int8_to_f32+0x14>
 802bcc0:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 802bcc4:	f012 0203 	ands.w	r2, r2, #3
 802bcc8:	d023      	beq.n	802bd12 <st_int8_to_f32+0xc2>
 802bcca:	f990 3000 	ldrsb.w	r3, [r0]
 802bcce:	3a01      	subs	r2, #1
 802bcd0:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 802bd14 <st_int8_to_f32+0xc4>
 802bcd4:	ee07 3a90 	vmov	s15, r3
 802bcd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802bcdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 802bce0:	edc1 7a00 	vstr	s15, [r1]
 802bce4:	d015      	beq.n	802bd12 <st_int8_to_f32+0xc2>
 802bce6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 802bcea:	2a01      	cmp	r2, #1
 802bcec:	ee07 3a90 	vmov	s15, r3
 802bcf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802bcf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 802bcf8:	edc1 7a01 	vstr	s15, [r1, #4]
 802bcfc:	d009      	beq.n	802bd12 <st_int8_to_f32+0xc2>
 802bcfe:	f990 3002 	ldrsb.w	r3, [r0, #2]
 802bd02:	ee07 3a90 	vmov	s15, r3
 802bd06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802bd0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 802bd0e:	edc1 7a02 	vstr	s15, [r1, #8]
 802bd12:	bd30      	pop	{r4, r5, pc}
 802bd14:	3c000000 	.word	0x3c000000
	...

08030000 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3>:
 8030000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030004:	b0a4      	sub	sp, #144	@ 0x90
 8030006:	9e30      	ldr	r6, [sp, #192]	@ 0xc0
 8030008:	9313      	str	r3, [sp, #76]	@ 0x4c
 803000a:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 803000c:	9011      	str	r0, [sp, #68]	@ 0x44
 803000e:	9112      	str	r1, [sp, #72]	@ 0x48
 8030010:	9210      	str	r2, [sp, #64]	@ 0x40
 8030012:	f013 0801 	ands.w	r8, r3, #1
 8030016:	f8cd 807c 	str.w	r8, [sp, #124]	@ 0x7c
 803001a:	9c31      	ldr	r4, [sp, #196]	@ 0xc4
 803001c:	9d32      	ldr	r5, [sp, #200]	@ 0xc8
 803001e:	bf1c      	itt	ne
 8030020:	3402      	addne	r4, #2
 8030022:	3502      	addne	r5, #2
 8030024:	fb04 f405 	mul.w	r4, r4, r5
 8030028:	f013 0502 	ands.w	r5, r3, #2
 803002c:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
 803002e:	951e      	str	r5, [sp, #120]	@ 0x78
 8030030:	f04f 0c01 	mov.w	ip, #1
 8030034:	bf19      	ittee	ne
 8030036:	940b      	strne	r4, [sp, #44]	@ 0x2c
 8030038:	f8cd c028 	strne.w	ip, [sp, #40]	@ 0x28
 803003c:	f8cd c02c 	streq.w	ip, [sp, #44]	@ 0x2c
 8030040:	970a      	streq	r7, [sp, #40]	@ 0x28
 8030042:	f003 0803 	and.w	r8, r3, #3
 8030046:	f1b8 0f03 	cmp.w	r8, #3
 803004a:	bf0c      	ite	eq
 803004c:	2302      	moveq	r3, #2
 803004e:	2300      	movne	r3, #0
 8030050:	930c      	str	r3, [sp, #48]	@ 0x30
 8030052:	2f01      	cmp	r7, #1
 8030054:	f340 8231 	ble.w	80304ba <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x4ba>
 8030058:	9d33      	ldr	r5, [sp, #204]	@ 0xcc
 803005a:	eba6 0486 	sub.w	r4, r6, r6, lsl #2
 803005e:	eb05 0304 	add.w	r3, r5, r4
 8030062:	4433      	add	r3, r6
 8030064:	931b      	str	r3, [sp, #108]	@ 0x6c
 8030066:	f1c5 0302 	rsb	r3, r5, #2
 803006a:	eba3 0006 	sub.w	r0, r3, r6
 803006e:	eb04 0c43 	add.w	ip, r4, r3, lsl #1
 8030072:	44b4      	add	ip, r6
 8030074:	f8cd c070 	str.w	ip, [sp, #112]	@ 0x70
 8030078:	f1ac 0c03 	sub.w	ip, ip, #3
 803007c:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
 8030080:	f006 0c03 	and.w	ip, r6, #3
 8030084:	f8cd c08c 	str.w	ip, [sp, #140]	@ 0x8c
 8030088:	eb0c 03cc 	add.w	r3, ip, ip, lsl #3
 803008c:	9321      	str	r3, [sp, #132]	@ 0x84
 803008e:	ea4f 03a6 	mov.w	r3, r6, asr #2
 8030092:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
 8030096:	f8cd c080 	str.w	ip, [sp, #128]	@ 0x80
 803009a:	eb06 0cc6 	add.w	ip, r6, r6, lsl #3
 803009e:	f8cd c088 	str.w	ip, [sp, #136]	@ 0x88
 80300a2:	f8dd b0bc 	ldr.w	fp, [sp, #188]	@ 0xbc
 80300a6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80300a8:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 80300ac:	eb03 0c8b 	add.w	ip, r3, fp, lsl #2
 80300b0:	f8cd c058 	str.w	ip, [sp, #88]	@ 0x58
 80300b4:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 80300b6:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 80300b8:	9a37      	ldr	r2, [sp, #220]	@ 0xdc
 80300ba:	900e      	str	r0, [sp, #56]	@ 0x38
 80300bc:	910d      	str	r1, [sp, #52]	@ 0x34
 80300be:	920f      	str	r2, [sp, #60]	@ 0x3c
 80300c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80300c2:	f9b2 3000 	ldrsh.w	r3, [r2]
 80300c6:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80300ca:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80300ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80300d0:	e9d2 1200 	ldrd	r1, r2, [r2]
 80300d4:	e9cd 1200 	strd	r1, r2, [sp]
 80300d8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80300da:	e9d2 1200 	ldrd	r1, r2, [r2]
 80300de:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80300e2:	2b00      	cmp	r3, #0
 80300e4:	bfcc      	ite	gt
 80300e6:	2000      	movgt	r0, #0
 80300e8:	f04f 30ff 	movle.w	r0, #4294967295
 80300ec:	2b15      	cmp	r3, #21
 80300ee:	bfc8      	it	gt
 80300f0:	2001      	movgt	r0, #1
 80300f2:	2c00      	cmp	r4, #0
 80300f4:	bfcc      	ite	gt
 80300f6:	2100      	movgt	r1, #0
 80300f8:	f04f 31ff 	movle.w	r1, #4294967295
 80300fc:	2c15      	cmp	r4, #21
 80300fe:	bfc8      	it	gt
 8030100:	2101      	movgt	r1, #1
 8030102:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8030106:	f000 bc59 	b.w	80309bc <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x9bc>
 803010a:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 803010c:	2b00      	cmp	r3, #0
 803010e:	f040 8426 	bne.w	803095e <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x95e>
 8030112:	4618      	mov	r0, r3
 8030114:	461a      	mov	r2, r3
 8030116:	9d35      	ldr	r5, [sp, #212]	@ 0xd4
 8030118:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 803011a:	e9d4 1300 	ldrd	r1, r3, [r4]
 803011e:	4403      	add	r3, r0
 8030120:	440a      	add	r2, r1
 8030122:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8030126:	2d03      	cmp	r5, #3
 8030128:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 803012a:	d103      	bne.n	8030134 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x134>
 803012c:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 803012e:	f103 0303 	add.w	r3, r3, #3
 8030132:	441a      	add	r2, r3
 8030134:	9215      	str	r2, [sp, #84]	@ 0x54
 8030136:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 803013a:	f1b8 0f00 	cmp.w	r8, #0
 803013e:	f000 819d 	beq.w	803047c <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x47c>
 8030142:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8030144:	f8cd 8068 	str.w	r8, [sp, #104]	@ 0x68
 8030148:	9417      	str	r4, [sp, #92]	@ 0x5c
 803014a:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 803014c:	105b      	asrs	r3, r3, #1
 803014e:	f000 8184 	beq.w	803045a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x45a>
 8030152:	9418      	str	r4, [sp, #96]	@ 0x60
 8030154:	9319      	str	r3, [sp, #100]	@ 0x64
 8030156:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8030158:	9d38      	ldr	r5, [sp, #224]	@ 0xe0
 803015a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 803015e:	4610      	mov	r0, r2
 8030160:	4619      	mov	r1, r3
 8030162:	2e04      	cmp	r6, #4
 8030164:	f340 8123 	ble.w	80303ae <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x3ae>
 8030168:	ea4f 0ea6 	mov.w	lr, r6, asr #2
 803016c:	e8b5 1e00 	ldmia.w	r5!, {r9, sl, fp, ip}
 8030170:	f8d4 8000 	ldr.w	r8, [r4]
 8030174:	fa2f f788 	sxtb16	r7, r8
 8030178:	fa2f f898 	sxtb16	r8, r8, ror #8
 803017c:	fb27 330b 	smlad	r3, r7, fp, r3
 8030180:	fb27 2209 	smlad	r2, r7, r9, r2
 8030184:	fb28 220a 	smlad	r2, r8, sl, r2
 8030188:	fb28 330c 	smlad	r3, r8, ip, r3
 803018c:	f854 8006 	ldr.w	r8, [r4, r6]
 8030190:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8030194:	fa2f f788 	sxtb16	r7, r8
 8030198:	fa2f f898 	sxtb16	r8, r8, ror #8
 803019c:	fb27 0009 	smlad	r0, r7, r9, r0
 80301a0:	f855 9b04 	ldr.w	r9, [r5], #4
 80301a4:	fb28 000a 	smlad	r0, r8, sl, r0
 80301a8:	f855 ab04 	ldr.w	sl, [r5], #4
 80301ac:	fb27 110b 	smlad	r1, r7, fp, r1
 80301b0:	f855 bb04 	ldr.w	fp, [r5], #4
 80301b4:	fb28 110c 	smlad	r1, r8, ip, r1
 80301b8:	f855 cb04 	ldr.w	ip, [r5], #4
 80301bc:	fb27 2209 	smlad	r2, r7, r9, r2
 80301c0:	fb27 330b 	smlad	r3, r7, fp, r3
 80301c4:	fb28 220a 	smlad	r2, r8, sl, r2
 80301c8:	fb28 330c 	smlad	r3, r8, ip, r3
 80301cc:	f8d4 8000 	ldr.w	r8, [r4]
 80301d0:	fa2f f788 	sxtb16	r7, r8
 80301d4:	fa2f f898 	sxtb16	r8, r8, ror #8
 80301d8:	fb27 0009 	smlad	r0, r7, r9, r0
 80301dc:	f855 9b04 	ldr.w	r9, [r5], #4
 80301e0:	fb28 000a 	smlad	r0, r8, sl, r0
 80301e4:	f855 ab04 	ldr.w	sl, [r5], #4
 80301e8:	fb27 110b 	smlad	r1, r7, fp, r1
 80301ec:	f855 bb04 	ldr.w	fp, [r5], #4
 80301f0:	fb28 110c 	smlad	r1, r8, ip, r1
 80301f4:	f855 cb04 	ldr.w	ip, [r5], #4
 80301f8:	fb27 2209 	smlad	r2, r7, r9, r2
 80301fc:	fb27 330b 	smlad	r3, r7, fp, r3
 8030200:	fb28 220a 	smlad	r2, r8, sl, r2
 8030204:	fb28 330c 	smlad	r3, r8, ip, r3
 8030208:	f854 8006 	ldr.w	r8, [r4, r6]
 803020c:	fa2f f788 	sxtb16	r7, r8
 8030210:	fa2f f898 	sxtb16	r8, r8, ror #8
 8030214:	fb27 0009 	smlad	r0, r7, r9, r0
 8030218:	fb27 110b 	smlad	r1, r7, fp, r1
 803021c:	f8dd 906c 	ldr.w	r9, [sp, #108]	@ 0x6c
 8030220:	fb28 000a 	smlad	r0, r8, sl, r0
 8030224:	fb28 110c 	smlad	r1, r8, ip, r1
 8030228:	444c      	add	r4, r9
 803022a:	e8b5 1e00 	ldmia.w	r5!, {r9, sl, fp, ip}
 803022e:	f8d4 8000 	ldr.w	r8, [r4]
 8030232:	fa2f f788 	sxtb16	r7, r8
 8030236:	fa2f f898 	sxtb16	r8, r8, ror #8
 803023a:	fb27 330b 	smlad	r3, r7, fp, r3
 803023e:	fb27 2209 	smlad	r2, r7, r9, r2
 8030242:	fb28 220a 	smlad	r2, r8, sl, r2
 8030246:	fb28 330c 	smlad	r3, r8, ip, r3
 803024a:	f854 8006 	ldr.w	r8, [r4, r6]
 803024e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8030252:	fa2f f788 	sxtb16	r7, r8
 8030256:	fa2f f898 	sxtb16	r8, r8, ror #8
 803025a:	fb27 0009 	smlad	r0, r7, r9, r0
 803025e:	f855 9b04 	ldr.w	r9, [r5], #4
 8030262:	fb28 000a 	smlad	r0, r8, sl, r0
 8030266:	f855 ab04 	ldr.w	sl, [r5], #4
 803026a:	fb27 110b 	smlad	r1, r7, fp, r1
 803026e:	f855 bb04 	ldr.w	fp, [r5], #4
 8030272:	fb28 110c 	smlad	r1, r8, ip, r1
 8030276:	f855 cb04 	ldr.w	ip, [r5], #4
 803027a:	fb27 2209 	smlad	r2, r7, r9, r2
 803027e:	fb27 330b 	smlad	r3, r7, fp, r3
 8030282:	fb28 220a 	smlad	r2, r8, sl, r2
 8030286:	fb28 330c 	smlad	r3, r8, ip, r3
 803028a:	f8d4 8000 	ldr.w	r8, [r4]
 803028e:	fa2f f788 	sxtb16	r7, r8
 8030292:	fa2f f898 	sxtb16	r8, r8, ror #8
 8030296:	fb27 0009 	smlad	r0, r7, r9, r0
 803029a:	f855 9b04 	ldr.w	r9, [r5], #4
 803029e:	fb28 000a 	smlad	r0, r8, sl, r0
 80302a2:	f855 ab04 	ldr.w	sl, [r5], #4
 80302a6:	fb27 110b 	smlad	r1, r7, fp, r1
 80302aa:	f855 bb04 	ldr.w	fp, [r5], #4
 80302ae:	fb28 110c 	smlad	r1, r8, ip, r1
 80302b2:	f855 cb04 	ldr.w	ip, [r5], #4
 80302b6:	fb27 2209 	smlad	r2, r7, r9, r2
 80302ba:	fb27 330b 	smlad	r3, r7, fp, r3
 80302be:	fb28 220a 	smlad	r2, r8, sl, r2
 80302c2:	fb28 330c 	smlad	r3, r8, ip, r3
 80302c6:	f854 8006 	ldr.w	r8, [r4, r6]
 80302ca:	fa2f f788 	sxtb16	r7, r8
 80302ce:	fa2f f898 	sxtb16	r8, r8, ror #8
 80302d2:	fb27 0009 	smlad	r0, r7, r9, r0
 80302d6:	fb27 110b 	smlad	r1, r7, fp, r1
 80302da:	f8dd 906c 	ldr.w	r9, [sp, #108]	@ 0x6c
 80302de:	fb28 000a 	smlad	r0, r8, sl, r0
 80302e2:	fb28 110c 	smlad	r1, r8, ip, r1
 80302e6:	444c      	add	r4, r9
 80302e8:	e8b5 1e00 	ldmia.w	r5!, {r9, sl, fp, ip}
 80302ec:	f8d4 8000 	ldr.w	r8, [r4]
 80302f0:	fa2f f788 	sxtb16	r7, r8
 80302f4:	fa2f f898 	sxtb16	r8, r8, ror #8
 80302f8:	fb27 330b 	smlad	r3, r7, fp, r3
 80302fc:	fb27 2209 	smlad	r2, r7, r9, r2
 8030300:	fb28 220a 	smlad	r2, r8, sl, r2
 8030304:	fb28 330c 	smlad	r3, r8, ip, r3
 8030308:	f854 8006 	ldr.w	r8, [r4, r6]
 803030c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8030310:	fa2f f788 	sxtb16	r7, r8
 8030314:	fa2f f898 	sxtb16	r8, r8, ror #8
 8030318:	fb27 0009 	smlad	r0, r7, r9, r0
 803031c:	f855 9b04 	ldr.w	r9, [r5], #4
 8030320:	fb28 000a 	smlad	r0, r8, sl, r0
 8030324:	f855 ab04 	ldr.w	sl, [r5], #4
 8030328:	fb27 110b 	smlad	r1, r7, fp, r1
 803032c:	f855 bb04 	ldr.w	fp, [r5], #4
 8030330:	fb28 110c 	smlad	r1, r8, ip, r1
 8030334:	f855 cb04 	ldr.w	ip, [r5], #4
 8030338:	fb27 2209 	smlad	r2, r7, r9, r2
 803033c:	fb27 330b 	smlad	r3, r7, fp, r3
 8030340:	fb28 220a 	smlad	r2, r8, sl, r2
 8030344:	fb28 330c 	smlad	r3, r8, ip, r3
 8030348:	f8d4 8000 	ldr.w	r8, [r4]
 803034c:	fa2f f788 	sxtb16	r7, r8
 8030350:	fa2f f898 	sxtb16	r8, r8, ror #8
 8030354:	fb27 0009 	smlad	r0, r7, r9, r0
 8030358:	f855 9b04 	ldr.w	r9, [r5], #4
 803035c:	fb28 000a 	smlad	r0, r8, sl, r0
 8030360:	f855 ab04 	ldr.w	sl, [r5], #4
 8030364:	fb27 110b 	smlad	r1, r7, fp, r1
 8030368:	f855 bb04 	ldr.w	fp, [r5], #4
 803036c:	fb28 110c 	smlad	r1, r8, ip, r1
 8030370:	f855 cb04 	ldr.w	ip, [r5], #4
 8030374:	fb27 2209 	smlad	r2, r7, r9, r2
 8030378:	fb27 330b 	smlad	r3, r7, fp, r3
 803037c:	fb28 220a 	smlad	r2, r8, sl, r2
 8030380:	fb28 330c 	smlad	r3, r8, ip, r3
 8030384:	f854 8006 	ldr.w	r8, [r4, r6]
 8030388:	fa2f f788 	sxtb16	r7, r8
 803038c:	fa2f f898 	sxtb16	r8, r8, ror #8
 8030390:	fb27 0009 	smlad	r0, r7, r9, r0
 8030394:	fb27 110b 	smlad	r1, r7, fp, r1
 8030398:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
 803039c:	fb28 000a 	smlad	r0, r8, sl, r0
 80303a0:	fb28 110c 	smlad	r1, r8, ip, r1
 80303a4:	f1be 0e01 	subs.w	lr, lr, #1
 80303a8:	444c      	add	r4, r9
 80303aa:	f47f aedf 	bne.w	803016c <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x16c>
 80303ae:	f016 0703 	ands.w	r7, r6, #3
 80303b2:	f300 80ff 	bgt.w	80305b4 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x5b4>
 80303b6:	f8dd e010 	ldr.w	lr, [sp, #16]
 80303ba:	f8dd a000 	ldr.w	sl, [sp]
 80303be:	f8dd b008 	ldr.w	fp, [sp, #8]
 80303c2:	f8dd c018 	ldr.w	ip, [sp, #24]
 80303c6:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80303c8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80303ca:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 80303ce:	44a8      	add	r8, r5
 80303d0:	f1bc 0f00 	cmp.w	ip, #0
 80303d4:	f040 832d 	bne.w	8030a32 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xa32>
 80303d8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80303dc:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80303e0:	fb52 e20a 	smmla	r2, r2, sl, lr
 80303e4:	fb50 e00a 	smmla	r0, r0, sl, lr
 80303e8:	fa42 f20b 	asr.w	r2, r2, fp
 80303ec:	fa40 f00b 	asr.w	r0, r0, fp
 80303f0:	f302 0207 	ssat	r2, #8, r2
 80303f4:	f300 0007 	ssat	r0, #8, r0
 80303f8:	702a      	strb	r2, [r5, #0]
 80303fa:	55e8      	strb	r0, [r5, r7]
 80303fc:	f8dd e014 	ldr.w	lr, [sp, #20]
 8030400:	f8dd a004 	ldr.w	sl, [sp, #4]
 8030404:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8030408:	f8dd c01c 	ldr.w	ip, [sp, #28]
 803040c:	f1bc 0f00 	cmp.w	ip, #0
 8030410:	f040 8338 	bne.w	8030a84 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xa84>
 8030414:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8030418:	ea4f 0141 	mov.w	r1, r1, lsl #1
 803041c:	fb53 e30a 	smmla	r3, r3, sl, lr
 8030420:	fb51 e10a 	smmla	r1, r1, sl, lr
 8030424:	fa43 f30b 	asr.w	r3, r3, fp
 8030428:	fa41 f10b 	asr.w	r1, r1, fp
 803042c:	f303 0307 	ssat	r3, #8, r3
 8030430:	f301 0107 	ssat	r1, #8, r1
 8030434:	f888 3000 	strb.w	r3, [r8]
 8030438:	f808 1007 	strb.w	r1, [r8, r7]
 803043c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 803043e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8030440:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8030442:	9e30      	ldr	r6, [sp, #192]	@ 0xc0
 8030444:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8030446:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 803044a:	9215      	str	r2, [sp, #84]	@ 0x54
 803044c:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 8030450:	9518      	str	r5, [sp, #96]	@ 0x60
 8030452:	3b01      	subs	r3, #1
 8030454:	9319      	str	r3, [sp, #100]	@ 0x64
 8030456:	f73f ae7e 	bgt.w	8030156 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x156>
 803045a:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 803045c:	f013 0301 	ands.w	r3, r3, #1
 8030460:	f040 8141 	bne.w	80306e6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x6e6>
 8030464:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030466:	441a      	add	r2, r3
 8030468:	9215      	str	r2, [sp, #84]	@ 0x54
 803046a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 803046c:	9933      	ldr	r1, [sp, #204]	@ 0xcc
 803046e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8030470:	440c      	add	r4, r1
 8030472:	9417      	str	r4, [sp, #92]	@ 0x5c
 8030474:	3b01      	subs	r3, #1
 8030476:	931a      	str	r3, [sp, #104]	@ 0x68
 8030478:	f47f ae67 	bne.w	803014a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x14a>
 803047c:	9922      	ldr	r1, [sp, #136]	@ 0x88
 803047e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8030480:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8030484:	9212      	str	r2, [sp, #72]	@ 0x48
 8030486:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8030488:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 803048a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 803048e:	9213      	str	r2, [sp, #76]	@ 0x4c
 8030490:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8030492:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8030494:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030496:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8030498:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 803049a:	f100 0008 	add.w	r0, r0, #8
 803049e:	900d      	str	r0, [sp, #52]	@ 0x34
 80304a0:	f102 0208 	add.w	r2, r2, #8
 80304a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80304a6:	f103 0308 	add.w	r3, r3, #8
 80304aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80304ac:	f104 0404 	add.w	r4, r4, #4
 80304b0:	42a5      	cmp	r5, r4
 80304b2:	940e      	str	r4, [sp, #56]	@ 0x38
 80304b4:	f47f ae04 	bne.w	80300c0 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xc0>
 80304b8:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80304ba:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80304bc:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 80304be:	9d31      	ldr	r5, [sp, #196]	@ 0xc4
 80304c0:	f013 0301 	ands.w	r3, r3, #1
 80304c4:	d071      	beq.n	80305aa <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x5aa>
 80304c6:	2900      	cmp	r1, #0
 80304c8:	d06f      	beq.n	80305aa <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x5aa>
 80304ca:	911a      	str	r1, [sp, #104]	@ 0x68
 80304cc:	2d00      	cmp	r5, #0
 80304ce:	d06c      	beq.n	80305aa <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x5aa>
 80304d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80304d2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80304d4:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 80304d8:	6818      	ldr	r0, [r3, #0]
 80304da:	6821      	ldr	r1, [r4, #0]
 80304dc:	f9b8 b000 	ldrsh.w	fp, [r8]
 80304e0:	9100      	str	r1, [sp, #0]
 80304e2:	f1bb 0f00 	cmp.w	fp, #0
 80304e6:	bfcc      	ite	gt
 80304e8:	2200      	movgt	r2, #0
 80304ea:	f04f 32ff 	movle.w	r2, #4294967295
 80304ee:	f1bb 0f15 	cmp.w	fp, #21
 80304f2:	bfc8      	it	gt
 80304f4:	2201      	movgt	r2, #1
 80304f6:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80304f8:	f003 0303 	and.w	r3, r3, #3
 80304fc:	2b03      	cmp	r3, #3
 80304fe:	bf03      	ittte	eq
 8030500:	3703      	addeq	r7, #3
 8030502:	197f      	addeq	r7, r7, r5
 8030504:	2602      	moveq	r6, #2
 8030506:	2600      	movne	r6, #0
 8030508:	960b      	str	r6, [sp, #44]	@ 0x2c
 803050a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803050c:	f8dd a0cc 	ldr.w	sl, [sp, #204]	@ 0xcc
 8030510:	9e34      	ldr	r6, [sp, #208]	@ 0xd0
 8030512:	681c      	ldr	r4, [r3, #0]
 8030514:	f8dd 90c0 	ldr.w	r9, [sp, #192]	@ 0xc0
 8030518:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803051a:	9317      	str	r3, [sp, #92]	@ 0x5c
 803051c:	9410      	str	r4, [sp, #64]	@ 0x40
 803051e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8030522:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 8030526:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 8030528:	9119      	str	r1, [sp, #100]	@ 0x64
 803052a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 803052c:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 8030530:	f1b9 0f00 	cmp.w	r9, #0
 8030534:	dd1a      	ble.n	803056c <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x56c>
 8030536:	464d      	mov	r5, r9
 8030538:	f91c 301a 	ldrsb.w	r3, [ip, sl, lsl #1]
 803053c:	f918 4019 	ldrsb.w	r4, [r8, r9, lsl #1]
 8030540:	eba3 0306 	sub.w	r3, r3, r6
 8030544:	3d01      	subs	r5, #1
 8030546:	fb04 1103 	mla	r1, r4, r3, r1
 803054a:	f91c 300a 	ldrsb.w	r3, [ip, sl]
 803054e:	f918 4009 	ldrsb.w	r4, [r8, r9]
 8030552:	eba3 0306 	sub.w	r3, r3, r6
 8030556:	fb04 1103 	mla	r1, r4, r3, r1
 803055a:	f91c 3b01 	ldrsb.w	r3, [ip], #1
 803055e:	f918 4b01 	ldrsb.w	r4, [r8], #1
 8030562:	eba3 0306 	sub.w	r3, r3, r6
 8030566:	fb04 1103 	mla	r1, r4, r3, r1
 803056a:	d1e5      	bne.n	8030538 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x538>
 803056c:	9c00      	ldr	r4, [sp, #0]
 803056e:	2a00      	cmp	r2, #0
 8030570:	f040 82b1 	bne.w	8030ad6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xad6>
 8030574:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8030578:	fb51 0104 	smmla	r1, r1, r4, r0
 803057c:	fa41 f10b 	asr.w	r1, r1, fp
 8030580:	f301 0107 	ssat	r1, #8, r1
 8030584:	7039      	strb	r1, [r7, #0]
 8030586:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8030588:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 803058a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803058c:	4427      	add	r7, r4
 803058e:	ebac 0c41 	sub.w	ip, ip, r1, lsl #1
 8030592:	3b01      	subs	r3, #1
 8030594:	9319      	str	r3, [sp, #100]	@ 0x64
 8030596:	d1c8      	bne.n	803052a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x52a>
 8030598:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 803059a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 803059c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 803059e:	440f      	add	r7, r1
 80305a0:	4454      	add	r4, sl
 80305a2:	9417      	str	r4, [sp, #92]	@ 0x5c
 80305a4:	3b01      	subs	r3, #1
 80305a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80305a8:	d1bb      	bne.n	8030522 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x522>
 80305aa:	f04f 0000 	mov.w	r0, #0
 80305ae:	b024      	add	sp, #144	@ 0x90
 80305b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80305b4:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 80305b6:	2f00      	cmp	r7, #0
 80305b8:	f43f aefd 	beq.w	80303b6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x3b6>
 80305bc:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 80305c0:	f8dd 9074 	ldr.w	r9, [sp, #116]	@ 0x74
 80305c4:	f994 c000 	ldrsb.w	ip, [r4]
 80305c8:	f914 8006 	ldrsb.w	r8, [r4, r6]
 80305cc:	f935 bb02 	ldrsh.w	fp, [r5], #2
 80305d0:	f935 ab02 	ldrsh.w	sl, [r5], #2
 80305d4:	fb1b 220c 	smlabb	r2, fp, ip, r2
 80305d8:	fb1b 0008 	smlabb	r0, fp, r8, r0
 80305dc:	fb1a 330c 	smlabb	r3, sl, ip, r3
 80305e0:	fb1a 1108 	smlabb	r1, sl, r8, r1
 80305e4:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80305e8:	f935 bb02 	ldrsh.w	fp, [r5], #2
 80305ec:	f935 ab02 	ldrsh.w	sl, [r5], #2
 80305f0:	f994 c000 	ldrsb.w	ip, [r4]
 80305f4:	fb1b 2208 	smlabb	r2, fp, r8, r2
 80305f8:	fb1b 000c 	smlabb	r0, fp, ip, r0
 80305fc:	fb1a 3308 	smlabb	r3, sl, r8, r3
 8030600:	fb1a 110c 	smlabb	r1, sl, ip, r1
 8030604:	f914 8006 	ldrsb.w	r8, [r4, r6]
 8030608:	f935 bb02 	ldrsh.w	fp, [r5], #2
 803060c:	f935 ab02 	ldrsh.w	sl, [r5], #2
 8030610:	fb1b 0008 	smlabb	r0, fp, r8, r0
 8030614:	fb1b 220c 	smlabb	r2, fp, ip, r2
 8030618:	fb1a 330c 	smlabb	r3, sl, ip, r3
 803061c:	fb1a 1108 	smlabb	r1, sl, r8, r1
 8030620:	4474      	add	r4, lr
 8030622:	f994 c000 	ldrsb.w	ip, [r4]
 8030626:	f914 8006 	ldrsb.w	r8, [r4, r6]
 803062a:	f935 bb02 	ldrsh.w	fp, [r5], #2
 803062e:	f935 ab02 	ldrsh.w	sl, [r5], #2
 8030632:	fb1b 220c 	smlabb	r2, fp, ip, r2
 8030636:	fb1b 0008 	smlabb	r0, fp, r8, r0
 803063a:	fb1a 330c 	smlabb	r3, sl, ip, r3
 803063e:	fb1a 1108 	smlabb	r1, sl, r8, r1
 8030642:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8030646:	f935 bb02 	ldrsh.w	fp, [r5], #2
 803064a:	f935 ab02 	ldrsh.w	sl, [r5], #2
 803064e:	f994 c000 	ldrsb.w	ip, [r4]
 8030652:	fb1b 2208 	smlabb	r2, fp, r8, r2
 8030656:	fb1b 000c 	smlabb	r0, fp, ip, r0
 803065a:	fb1a 3308 	smlabb	r3, sl, r8, r3
 803065e:	fb1a 110c 	smlabb	r1, sl, ip, r1
 8030662:	f914 8006 	ldrsb.w	r8, [r4, r6]
 8030666:	f935 bb02 	ldrsh.w	fp, [r5], #2
 803066a:	f935 ab02 	ldrsh.w	sl, [r5], #2
 803066e:	fb1b 0008 	smlabb	r0, fp, r8, r0
 8030672:	fb1b 220c 	smlabb	r2, fp, ip, r2
 8030676:	fb1a 330c 	smlabb	r3, sl, ip, r3
 803067a:	fb1a 1108 	smlabb	r1, sl, r8, r1
 803067e:	4474      	add	r4, lr
 8030680:	f994 c000 	ldrsb.w	ip, [r4]
 8030684:	f914 8006 	ldrsb.w	r8, [r4, r6]
 8030688:	f935 bb02 	ldrsh.w	fp, [r5], #2
 803068c:	f935 ab02 	ldrsh.w	sl, [r5], #2
 8030690:	fb1b 220c 	smlabb	r2, fp, ip, r2
 8030694:	fb1b 0008 	smlabb	r0, fp, r8, r0
 8030698:	fb1a 330c 	smlabb	r3, sl, ip, r3
 803069c:	fb1a 1108 	smlabb	r1, sl, r8, r1
 80306a0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80306a4:	f935 bb02 	ldrsh.w	fp, [r5], #2
 80306a8:	f935 ab02 	ldrsh.w	sl, [r5], #2
 80306ac:	f994 c000 	ldrsb.w	ip, [r4]
 80306b0:	fb1b 2208 	smlabb	r2, fp, r8, r2
 80306b4:	fb1b 000c 	smlabb	r0, fp, ip, r0
 80306b8:	fb1a 3308 	smlabb	r3, sl, r8, r3
 80306bc:	fb1a 110c 	smlabb	r1, sl, ip, r1
 80306c0:	f914 8006 	ldrsb.w	r8, [r4, r6]
 80306c4:	f935 bb02 	ldrsh.w	fp, [r5], #2
 80306c8:	f935 ab02 	ldrsh.w	sl, [r5], #2
 80306cc:	fb1b 0008 	smlabb	r0, fp, r8, r0
 80306d0:	fb1b 220c 	smlabb	r2, fp, ip, r2
 80306d4:	fb1a 330c 	smlabb	r3, sl, ip, r3
 80306d8:	fb1a 1108 	smlabb	r1, sl, r8, r1
 80306dc:	444c      	add	r4, r9
 80306de:	3f01      	subs	r7, #1
 80306e0:	f73f af70 	bgt.w	80305c4 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x5c4>
 80306e4:	e667      	b.n	80303b6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x3b6>
 80306e6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80306e8:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80306ea:	2b01      	cmp	r3, #1
 80306ec:	bf1e      	ittt	ne
 80306ee:	9b1b      	ldrne	r3, [sp, #108]	@ 0x6c
 80306f0:	18c0      	addne	r0, r0, r3
 80306f2:	1b80      	subne	r0, r0, r6
 80306f4:	e9dd e508 	ldrd	lr, r5, [sp, #32]
 80306f8:	f8dd c0cc 	ldr.w	ip, [sp, #204]	@ 0xcc
 80306fc:	ea4f 0a4c 	mov.w	sl, ip, lsl #1
 8030700:	f1ca 0a04 	rsb	sl, sl, #4
 8030704:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8030706:	ea5f 0ba6 	movs.w	fp, r6, asr #2
 803070a:	f000 8091 	beq.w	8030830 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x830>
 803070e:	6802      	ldr	r2, [r0, #0]
 8030710:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 8030714:	fa2f f182 	sxtb16	r1, r2
 8030718:	fa2f f292 	sxtb16	r2, r2, ror #8
 803071c:	fb21 ee04 	smlad	lr, r1, r4, lr
 8030720:	fb22 ee07 	smlad	lr, r2, r7, lr
 8030724:	fb22 5509 	smlad	r5, r2, r9, r5
 8030728:	fb21 5508 	smlad	r5, r1, r8, r5
 803072c:	5982      	ldr	r2, [r0, r6]
 803072e:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 8030732:	fa2f f182 	sxtb16	r1, r2
 8030736:	fa2f f292 	sxtb16	r2, r2, ror #8
 803073a:	fb21 ee04 	smlad	lr, r1, r4, lr
 803073e:	fb22 ee07 	smlad	lr, r2, r7, lr
 8030742:	fb22 5509 	smlad	r5, r2, r9, r5
 8030746:	fb21 5508 	smlad	r5, r1, r8, r5
 803074a:	f850 2016 	ldr.w	r2, [r0, r6, lsl #1]
 803074e:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 8030752:	fa2f f182 	sxtb16	r1, r2
 8030756:	fa2f f292 	sxtb16	r2, r2, ror #8
 803075a:	fb21 ee04 	smlad	lr, r1, r4, lr
 803075e:	fb22 ee07 	smlad	lr, r2, r7, lr
 8030762:	fb22 5509 	smlad	r5, r2, r9, r5
 8030766:	fb21 5508 	smlad	r5, r1, r8, r5
 803076a:	4460      	add	r0, ip
 803076c:	6802      	ldr	r2, [r0, #0]
 803076e:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 8030772:	fa2f f182 	sxtb16	r1, r2
 8030776:	fa2f f292 	sxtb16	r2, r2, ror #8
 803077a:	fb21 ee04 	smlad	lr, r1, r4, lr
 803077e:	fb22 ee07 	smlad	lr, r2, r7, lr
 8030782:	fb22 5509 	smlad	r5, r2, r9, r5
 8030786:	fb21 5508 	smlad	r5, r1, r8, r5
 803078a:	5982      	ldr	r2, [r0, r6]
 803078c:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 8030790:	fa2f f182 	sxtb16	r1, r2
 8030794:	fa2f f292 	sxtb16	r2, r2, ror #8
 8030798:	fb21 ee04 	smlad	lr, r1, r4, lr
 803079c:	fb22 ee07 	smlad	lr, r2, r7, lr
 80307a0:	fb22 5509 	smlad	r5, r2, r9, r5
 80307a4:	fb21 5508 	smlad	r5, r1, r8, r5
 80307a8:	f850 2016 	ldr.w	r2, [r0, r6, lsl #1]
 80307ac:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 80307b0:	fa2f f182 	sxtb16	r1, r2
 80307b4:	fa2f f292 	sxtb16	r2, r2, ror #8
 80307b8:	fb21 ee04 	smlad	lr, r1, r4, lr
 80307bc:	fb22 ee07 	smlad	lr, r2, r7, lr
 80307c0:	fb22 5509 	smlad	r5, r2, r9, r5
 80307c4:	fb21 5508 	smlad	r5, r1, r8, r5
 80307c8:	4460      	add	r0, ip
 80307ca:	6802      	ldr	r2, [r0, #0]
 80307cc:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 80307d0:	fa2f f182 	sxtb16	r1, r2
 80307d4:	fa2f f292 	sxtb16	r2, r2, ror #8
 80307d8:	fb21 ee04 	smlad	lr, r1, r4, lr
 80307dc:	fb22 ee07 	smlad	lr, r2, r7, lr
 80307e0:	fb22 5509 	smlad	r5, r2, r9, r5
 80307e4:	fb21 5508 	smlad	r5, r1, r8, r5
 80307e8:	5982      	ldr	r2, [r0, r6]
 80307ea:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 80307ee:	fa2f f182 	sxtb16	r1, r2
 80307f2:	fa2f f292 	sxtb16	r2, r2, ror #8
 80307f6:	fb21 ee04 	smlad	lr, r1, r4, lr
 80307fa:	fb22 ee07 	smlad	lr, r2, r7, lr
 80307fe:	fb22 5509 	smlad	r5, r2, r9, r5
 8030802:	fb21 5508 	smlad	r5, r1, r8, r5
 8030806:	f850 2016 	ldr.w	r2, [r0, r6, lsl #1]
 803080a:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 803080e:	fa2f f182 	sxtb16	r1, r2
 8030812:	fa2f f292 	sxtb16	r2, r2, ror #8
 8030816:	fb21 ee04 	smlad	lr, r1, r4, lr
 803081a:	fb22 ee07 	smlad	lr, r2, r7, lr
 803081e:	fb22 5509 	smlad	r5, r2, r9, r5
 8030822:	fb21 5508 	smlad	r5, r1, r8, r5
 8030826:	4450      	add	r0, sl
 8030828:	f1bb 0b01 	subs.w	fp, fp, #1
 803082c:	f73f af6f 	bgt.w	803070e <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x70e>
 8030830:	f016 0b03 	ands.w	fp, r6, #3
 8030834:	d05f      	beq.n	80308f6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x8f6>
 8030836:	f990 1000 	ldrsb.w	r1, [r0]
 803083a:	5782      	ldrsb	r2, [r0, r6]
 803083c:	f910 a016 	ldrsb.w	sl, [r0, r6, lsl #1]
 8030840:	f933 4b02 	ldrsh.w	r4, [r3], #2
 8030844:	f933 7b02 	ldrsh.w	r7, [r3], #2
 8030848:	f933 8b02 	ldrsh.w	r8, [r3], #2
 803084c:	f933 9b02 	ldrsh.w	r9, [r3], #2
 8030850:	fb11 ee04 	smlabb	lr, r1, r4, lr
 8030854:	fb11 5507 	smlabb	r5, r1, r7, r5
 8030858:	fb12 ee08 	smlabb	lr, r2, r8, lr
 803085c:	fb12 5509 	smlabb	r5, r2, r9, r5
 8030860:	f933 4b02 	ldrsh.w	r4, [r3], #2
 8030864:	f933 7b02 	ldrsh.w	r7, [r3], #2
 8030868:	fb1a ee04 	smlabb	lr, sl, r4, lr
 803086c:	fb1a 5507 	smlabb	r5, sl, r7, r5
 8030870:	4460      	add	r0, ip
 8030872:	f990 1000 	ldrsb.w	r1, [r0]
 8030876:	5782      	ldrsb	r2, [r0, r6]
 8030878:	f910 a016 	ldrsb.w	sl, [r0, r6, lsl #1]
 803087c:	f933 4b02 	ldrsh.w	r4, [r3], #2
 8030880:	f933 7b02 	ldrsh.w	r7, [r3], #2
 8030884:	f933 8b02 	ldrsh.w	r8, [r3], #2
 8030888:	f933 9b02 	ldrsh.w	r9, [r3], #2
 803088c:	fb11 ee04 	smlabb	lr, r1, r4, lr
 8030890:	fb11 5507 	smlabb	r5, r1, r7, r5
 8030894:	fb12 ee08 	smlabb	lr, r2, r8, lr
 8030898:	fb12 5509 	smlabb	r5, r2, r9, r5
 803089c:	f933 4b02 	ldrsh.w	r4, [r3], #2
 80308a0:	f933 7b02 	ldrsh.w	r7, [r3], #2
 80308a4:	fb1a ee04 	smlabb	lr, sl, r4, lr
 80308a8:	fb1a 5507 	smlabb	r5, sl, r7, r5
 80308ac:	4460      	add	r0, ip
 80308ae:	f990 1000 	ldrsb.w	r1, [r0]
 80308b2:	5782      	ldrsb	r2, [r0, r6]
 80308b4:	f910 a016 	ldrsb.w	sl, [r0, r6, lsl #1]
 80308b8:	f933 4b02 	ldrsh.w	r4, [r3], #2
 80308bc:	f933 7b02 	ldrsh.w	r7, [r3], #2
 80308c0:	f933 8b02 	ldrsh.w	r8, [r3], #2
 80308c4:	f933 9b02 	ldrsh.w	r9, [r3], #2
 80308c8:	fb11 ee04 	smlabb	lr, r1, r4, lr
 80308cc:	fb11 5507 	smlabb	r5, r1, r7, r5
 80308d0:	fb12 ee08 	smlabb	lr, r2, r8, lr
 80308d4:	fb12 5509 	smlabb	r5, r2, r9, r5
 80308d8:	f933 4b02 	ldrsh.w	r4, [r3], #2
 80308dc:	f933 7b02 	ldrsh.w	r7, [r3], #2
 80308e0:	fb1a ee04 	smlabb	lr, sl, r4, lr
 80308e4:	fb1a 5507 	smlabb	r5, sl, r7, r5
 80308e8:	eba0 004c 	sub.w	r0, r0, ip, lsl #1
 80308ec:	f100 0001 	add.w	r0, r0, #1
 80308f0:	f1bb 0b01 	subs.w	fp, fp, #1
 80308f4:	dc9f      	bgt.n	8030836 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x836>
 80308f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80308f8:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80308fa:	eb01 0203 	add.w	r2, r1, r3
 80308fe:	f8dd a000 	ldr.w	sl, [sp]
 8030902:	9c04      	ldr	r4, [sp, #16]
 8030904:	9b02      	ldr	r3, [sp, #8]
 8030906:	9806      	ldr	r0, [sp, #24]
 8030908:	2800      	cmp	r0, #0
 803090a:	f040 8118 	bne.w	8030b3e <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xb3e>
 803090e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8030912:	fb5e 4e0a 	smmla	lr, lr, sl, r4
 8030916:	fa4e fe03 	asr.w	lr, lr, r3
 803091a:	f30e 0e07 	ssat	lr, #8, lr
 803091e:	f881 e000 	strb.w	lr, [r1]
 8030922:	f8dd a004 	ldr.w	sl, [sp, #4]
 8030926:	9c05      	ldr	r4, [sp, #20]
 8030928:	9b03      	ldr	r3, [sp, #12]
 803092a:	9807      	ldr	r0, [sp, #28]
 803092c:	2800      	cmp	r0, #0
 803092e:	f040 80ec 	bne.w	8030b0a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xb0a>
 8030932:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8030936:	fb55 450a 	smmla	r5, r5, sl, r4
 803093a:	fa45 f503 	asr.w	r5, r5, r3
 803093e:	f305 0507 	ssat	r5, #8, r5
 8030942:	7015      	strb	r5, [r2, #0]
 8030944:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8030946:	9d1e      	ldr	r5, [sp, #120]	@ 0x78
 8030948:	2b00      	cmp	r3, #0
 803094a:	bf14      	ite	ne
 803094c:	2303      	movne	r3, #3
 803094e:	2301      	moveq	r3, #1
 8030950:	2d00      	cmp	r5, #0
 8030952:	bf08      	it	eq
 8030954:	9b2f      	ldreq	r3, [sp, #188]	@ 0xbc
 8030956:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8030958:	441a      	add	r2, r3
 803095a:	9215      	str	r2, [sp, #84]	@ 0x54
 803095c:	e585      	b.n	803046a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x46a>
 803095e:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 8030960:	f04f 0300 	mov.w	r3, #0
 8030964:	461a      	mov	r2, r3
 8030966:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8030968:	b198      	cbz	r0, 8030992 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x992>
 803096a:	e8b1 1e00 	ldmia.w	r1!, {r9, sl, fp, ip}
 803096e:	fa02 f289 	sxtah	r2, r2, r9
 8030972:	fa02 f2a9 	sxtah	r2, r2, r9, ror #16
 8030976:	fa02 f28a 	sxtah	r2, r2, sl
 803097a:	fa02 f2aa 	sxtah	r2, r2, sl, ror #16
 803097e:	fa03 f38b 	sxtah	r3, r3, fp
 8030982:	fa03 f3ab 	sxtah	r3, r3, fp, ror #16
 8030986:	fa03 f38c 	sxtah	r3, r3, ip
 803098a:	fa03 f3ac 	sxtah	r3, r3, ip, ror #16
 803098e:	3801      	subs	r0, #1
 8030990:	d1eb      	bne.n	803096a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x96a>
 8030992:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8030994:	b138      	cbz	r0, 80309a6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x9a6>
 8030996:	f851 4b04 	ldr.w	r4, [r1], #4
 803099a:	fa02 f284 	sxtah	r2, r2, r4
 803099e:	fa03 f3a4 	sxtah	r3, r3, r4, ror #16
 80309a2:	3801      	subs	r0, #1
 80309a4:	d1f7      	bne.n	8030996 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x996>
 80309a6:	f1c2 0200 	rsb	r2, r2, #0
 80309aa:	f1c3 0300 	rsb	r3, r3, #0
 80309ae:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 80309b0:	fb01 f202 	mul.w	r2, r1, r2
 80309b4:	fb01 f003 	mul.w	r0, r1, r3
 80309b8:	f7ff bbad 	b.w	8030116 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x116>
 80309bc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80309be:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 80309c0:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 80309c2:	ea5f 0ba6 	movs.w	fp, r6, asr #2
 80309c6:	d019      	beq.n	80309fc <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x9fc>
 80309c8:	f04f 0a09 	mov.w	sl, #9
 80309cc:	6805      	ldr	r5, [r0, #0]
 80309ce:	f850 8004 	ldr.w	r8, [r0, r4]
 80309d2:	fa2f f795 	sxtb16	r7, r5, ror #8
 80309d6:	fa2f f585 	sxtb16	r5, r5
 80309da:	fa2f f998 	sxtb16	r9, r8, ror #8
 80309de:	fa2f f888 	sxtb16	r8, r8
 80309e2:	e8a2 03a0 	stmia.w	r2!, {r5, r7, r8, r9}
 80309e6:	4430      	add	r0, r6
 80309e8:	f1ba 0a01 	subs.w	sl, sl, #1
 80309ec:	dcee      	bgt.n	80309cc <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x9cc>
 80309ee:	eba0 0004 	sub.w	r0, r0, r4
 80309f2:	f100 0004 	add.w	r0, r0, #4
 80309f6:	f1bb 0b01 	subs.w	fp, fp, #1
 80309fa:	dce5      	bgt.n	80309c8 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x9c8>
 80309fc:	f016 0b03 	ands.w	fp, r6, #3
 8030a00:	f43f ab83 	beq.w	803010a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x10a>
 8030a04:	f04f 0a09 	mov.w	sl, #9
 8030a08:	f990 5000 	ldrsb.w	r5, [r0]
 8030a0c:	f910 8004 	ldrsb.w	r8, [r0, r4]
 8030a10:	f822 5b02 	strh.w	r5, [r2], #2
 8030a14:	f822 8b02 	strh.w	r8, [r2], #2
 8030a18:	4430      	add	r0, r6
 8030a1a:	f1ba 0a01 	subs.w	sl, sl, #1
 8030a1e:	dcf3      	bgt.n	8030a08 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xa08>
 8030a20:	eba0 0004 	sub.w	r0, r0, r4
 8030a24:	f100 0001 	add.w	r0, r0, #1
 8030a28:	f1bb 0b01 	subs.w	fp, fp, #1
 8030a2c:	dcea      	bgt.n	8030a04 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xa04>
 8030a2e:	f7ff bb6c 	b.w	803010a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x10a>
 8030a32:	f11c 0c01 	adds.w	ip, ip, #1
 8030a36:	d014      	beq.n	8030a62 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xa62>
 8030a38:	f04f 0c01 	mov.w	ip, #1
 8030a3c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8030a40:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8030a44:	fb52 c20a 	smmla	r2, r2, sl, ip
 8030a48:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8030a4c:	fa42 f20b 	asr.w	r2, r2, fp
 8030a50:	4472      	add	r2, lr
 8030a52:	fb50 c00a 	smmla	r0, r0, sl, ip
 8030a56:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8030a5a:	fa40 f00b 	asr.w	r0, r0, fp
 8030a5e:	4470      	add	r0, lr
 8030a60:	e4c6      	b.n	80303f0 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x3f0>
 8030a62:	f1cb 0c01 	rsb	ip, fp, #1
 8030a66:	fa02 f20c 	lsl.w	r2, r2, ip
 8030a6a:	f302 021f 	ssat	r2, #32, r2
 8030a6e:	fb52 f21a 	smmulr	r2, r2, sl
 8030a72:	fa00 f00c 	lsl.w	r0, r0, ip
 8030a76:	f300 001f 	ssat	r0, #32, r0
 8030a7a:	fb50 f01a 	smmulr	r0, r0, sl
 8030a7e:	4472      	add	r2, lr
 8030a80:	4470      	add	r0, lr
 8030a82:	e4b5      	b.n	80303f0 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x3f0>
 8030a84:	f11c 0c01 	adds.w	ip, ip, #1
 8030a88:	d014      	beq.n	8030ab4 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xab4>
 8030a8a:	f04f 0c01 	mov.w	ip, #1
 8030a8e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8030a92:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8030a96:	fb53 c30a 	smmla	r3, r3, sl, ip
 8030a9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8030a9e:	fa43 f30b 	asr.w	r3, r3, fp
 8030aa2:	4473      	add	r3, lr
 8030aa4:	fb51 c10a 	smmla	r1, r1, sl, ip
 8030aa8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8030aac:	fa41 f10b 	asr.w	r1, r1, fp
 8030ab0:	4471      	add	r1, lr
 8030ab2:	e4bb      	b.n	803042c <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x42c>
 8030ab4:	f1cb 0c01 	rsb	ip, fp, #1
 8030ab8:	fa03 f30c 	lsl.w	r3, r3, ip
 8030abc:	f303 031f 	ssat	r3, #32, r3
 8030ac0:	fb53 f31a 	smmulr	r3, r3, sl
 8030ac4:	fa01 f10c 	lsl.w	r1, r1, ip
 8030ac8:	f301 011f 	ssat	r1, #32, r1
 8030acc:	fb51 f11a 	smmulr	r1, r1, sl
 8030ad0:	4473      	add	r3, lr
 8030ad2:	4471      	add	r1, lr
 8030ad4:	e4aa      	b.n	803042c <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x42c>
 8030ad6:	1c53      	adds	r3, r2, #1
 8030ad8:	d00d      	beq.n	8030af6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xaf6>
 8030ada:	f04f 0301 	mov.w	r3, #1
 8030ade:	fa03 f30b 	lsl.w	r3, r3, fp
 8030ae2:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8030ae6:	fb51 3104 	smmla	r1, r1, r4, r3
 8030aea:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8030aee:	fa41 f10b 	asr.w	r1, r1, fp
 8030af2:	4401      	add	r1, r0
 8030af4:	e544      	b.n	8030580 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x580>
 8030af6:	f1cb 0301 	rsb	r3, fp, #1
 8030afa:	fa01 f103 	lsl.w	r1, r1, r3
 8030afe:	f301 011f 	ssat	r1, #32, r1
 8030b02:	fb51 f114 	smmulr	r1, r1, r4
 8030b06:	4401      	add	r1, r0
 8030b08:	e53a      	b.n	8030580 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x580>
 8030b0a:	3001      	adds	r0, #1
 8030b0c:	d00d      	beq.n	8030b2a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xb2a>
 8030b0e:	f04f 0001 	mov.w	r0, #1
 8030b12:	fa00 f003 	lsl.w	r0, r0, r3
 8030b16:	ea4f 00a0 	mov.w	r0, r0, asr #2
 8030b1a:	fb55 050a 	smmla	r5, r5, sl, r0
 8030b1e:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8030b22:	fa45 f503 	asr.w	r5, r5, r3
 8030b26:	4425      	add	r5, r4
 8030b28:	e709      	b.n	803093e <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x93e>
 8030b2a:	f1c3 0001 	rsb	r0, r3, #1
 8030b2e:	fa05 f500 	lsl.w	r5, r5, r0
 8030b32:	f305 051f 	ssat	r5, #32, r5
 8030b36:	fb55 f51a 	smmulr	r5, r5, sl
 8030b3a:	4425      	add	r5, r4
 8030b3c:	e6ff      	b.n	803093e <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x93e>
 8030b3e:	3001      	adds	r0, #1
 8030b40:	d00d      	beq.n	8030b5e <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xb5e>
 8030b42:	f04f 0001 	mov.w	r0, #1
 8030b46:	fa00 f003 	lsl.w	r0, r0, r3
 8030b4a:	ea4f 00a0 	mov.w	r0, r0, asr #2
 8030b4e:	fb5e 0e0a 	smmla	lr, lr, sl, r0
 8030b52:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8030b56:	fa4e fe03 	asr.w	lr, lr, r3
 8030b5a:	44a6      	add	lr, r4
 8030b5c:	e6dd      	b.n	803091a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x91a>
 8030b5e:	f1c3 0001 	rsb	r0, r3, #1
 8030b62:	fa0e fe00 	lsl.w	lr, lr, r0
 8030b66:	f30e 0e1f 	ssat	lr, #32, lr
 8030b6a:	fb5e fe1a 	smmulr	lr, lr, sl
 8030b6e:	44a6      	add	lr, r4
 8030b70:	e6d3      	b.n	803091a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x91a>
 8030b72:	bf00      	nop

08030b74 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 8030b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030b78:	b086      	sub	sp, #24
 8030b7a:	f89d 7058 	ldrb.w	r7, [sp, #88]	@ 0x58
 8030b7e:	9100      	str	r1, [sp, #0]
 8030b80:	9203      	str	r2, [sp, #12]
 8030b82:	2f00      	cmp	r7, #0
 8030b84:	9305      	str	r3, [sp, #20]
 8030b86:	bf18      	it	ne
 8030b88:	2301      	movne	r3, #1
 8030b8a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8030b8c:	fb04 3303 	mla	r3, r4, r3, r3
 8030b90:	9304      	str	r3, [sp, #16]
 8030b92:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8030b94:	bf14      	ite	ne
 8030b96:	462f      	movne	r7, r5
 8030b98:	2701      	moveq	r7, #1
 8030b9a:	9701      	str	r7, [sp, #4]
 8030b9c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8030ba0:	085b      	lsrs	r3, r3, #1
 8030ba2:	f000 809f 	beq.w	8030ce4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x170>
 8030ba6:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 8030baa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8030bac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8030bb0:	9302      	str	r3, [sp, #8]
 8030bb2:	f8dd e048 	ldr.w	lr, [sp, #72]	@ 0x48
 8030bb6:	9f03      	ldr	r7, [sp, #12]
 8030bb8:	ea5f 089e 	movs.w	r8, lr, lsr #2
 8030bbc:	f8dd c000 	ldr.w	ip, [sp]
 8030bc0:	f857 6b04 	ldr.w	r6, [r7], #4
 8030bc4:	f857 3b04 	ldr.w	r3, [r7], #4
 8030bc8:	9703      	str	r7, [sp, #12]
 8030bca:	461a      	mov	r2, r3
 8030bcc:	4631      	mov	r1, r6
 8030bce:	d022      	beq.n	8030c16 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa2>
 8030bd0:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 8030bd4:	f85c 9b04 	ldr.w	r9, [ip], #4
 8030bd8:	f850 ab04 	ldr.w	sl, [r0], #4
 8030bdc:	fb2a 6609 	smlad	r6, sl, r9, r6
 8030be0:	f850 5b04 	ldr.w	r5, [r0], #4
 8030be4:	fb2a 1107 	smlad	r1, sl, r7, r1
 8030be8:	f850 ab04 	ldr.w	sl, [r0], #4
 8030bec:	fb25 2207 	smlad	r2, r5, r7, r2
 8030bf0:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 8030bf4:	fb25 3309 	smlad	r3, r5, r9, r3
 8030bf8:	f85c 9b04 	ldr.w	r9, [ip], #4
 8030bfc:	fb2a 6609 	smlad	r6, sl, r9, r6
 8030c00:	fb2a 1107 	smlad	r1, sl, r7, r1
 8030c04:	f850 5b04 	ldr.w	r5, [r0], #4
 8030c08:	fb25 3309 	smlad	r3, r5, r9, r3
 8030c0c:	f1b8 0801 	subs.w	r8, r8, #1
 8030c10:	fb25 2207 	smlad	r2, r5, r7, r2
 8030c14:	d1dc      	bne.n	8030bd0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c>
 8030c16:	f00e 0703 	and.w	r7, lr, #3
 8030c1a:	b18f      	cbz	r7, 8030c40 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xcc>
 8030c1c:	f93c 801e 	ldrsh.w	r8, [ip, lr, lsl #1]
 8030c20:	f93c ab02 	ldrsh.w	sl, [ip], #2
 8030c24:	f930 5b02 	ldrsh.w	r5, [r0], #2
 8030c28:	fb0a 6605 	mla	r6, sl, r5, r6
 8030c2c:	f930 9b02 	ldrsh.w	r9, [r0], #2
 8030c30:	fb09 330a 	mla	r3, r9, sl, r3
 8030c34:	fb08 1105 	mla	r1, r8, r5, r1
 8030c38:	3f01      	subs	r7, #1
 8030c3a:	fb09 2208 	mla	r2, r9, r8, r2
 8030c3e:	dced      	bgt.n	8030c1c <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa8>
 8030c40:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8030c44:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8030c46:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 8030c4a:	f857 cb04 	ldr.w	ip, [r7], #4
 8030c4e:	f85b 5b04 	ldr.w	r5, [fp], #4
 8030c52:	f1c4 0915 	rsb	r9, r4, #21
 8030c56:	ea99 0904 	eors.w	r9, r9, r4
 8030c5a:	f340 80c8 	ble.w	8030dee <st_sssa8_ch_nn_mat_mult_kernel_opt+0x27a>
 8030c5e:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8030c62:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8030c66:	fb56 c605 	smmla	r6, r6, r5, ip
 8030c6a:	fb51 c105 	smmla	r1, r1, r5, ip
 8030c6e:	fa46 f604 	asr.w	r6, r6, r4
 8030c72:	fa41 f104 	asr.w	r1, r1, r4
 8030c76:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 8030c7a:	f857 cb04 	ldr.w	ip, [r7], #4
 8030c7e:	f85b 5b04 	ldr.w	r5, [fp], #4
 8030c82:	f1c4 0915 	rsb	r9, r4, #21
 8030c86:	ea99 0904 	eors.w	r9, r9, r4
 8030c8a:	f340 8099 	ble.w	8030dc0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x24c>
 8030c8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8030c92:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8030c96:	fb53 c305 	smmla	r3, r3, r5, ip
 8030c9a:	fb52 c205 	smmla	r2, r2, r5, ip
 8030c9e:	fa43 f304 	asr.w	r3, r3, r4
 8030ca2:	fa42 f204 	asr.w	r2, r2, r4
 8030ca6:	f306 0607 	ssat	r6, #8, r6
 8030caa:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8030cae:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8030cb0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8030cb4:	7026      	strb	r6, [r4, #0]
 8030cb6:	44a0      	add	r8, r4
 8030cb8:	f301 0107 	ssat	r1, #8, r1
 8030cbc:	f888 1000 	strb.w	r1, [r8]
 8030cc0:	f303 0307 	ssat	r3, #8, r3
 8030cc4:	f804 3009 	strb.w	r3, [r4, r9]
 8030cc8:	f302 0207 	ssat	r2, #8, r2
 8030ccc:	f808 2009 	strb.w	r2, [r8, r9]
 8030cd0:	eb04 0249 	add.w	r2, r4, r9, lsl #1
 8030cd4:	9217      	str	r2, [sp, #92]	@ 0x5c
 8030cd6:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
 8030cda:	9c02      	ldr	r4, [sp, #8]
 8030cdc:	9715      	str	r7, [sp, #84]	@ 0x54
 8030cde:	45a2      	cmp	sl, r4
 8030ce0:	f47f af67 	bne.w	8030bb2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3e>
 8030ce4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8030ce6:	f013 0301 	ands.w	r3, r3, #1
 8030cea:	d054      	beq.n	8030d96 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x222>
 8030cec:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 8030cf0:	9b03      	ldr	r3, [sp, #12]
 8030cf2:	f8dd c000 	ldr.w	ip, [sp]
 8030cf6:	6819      	ldr	r1, [r3, #0]
 8030cf8:	ea5f 079e 	movs.w	r7, lr, lsr #2
 8030cfc:	eb0c 044e 	add.w	r4, ip, lr, lsl #1
 8030d00:	460e      	mov	r6, r1
 8030d02:	d015      	beq.n	8030d30 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1bc>
 8030d04:	f85c 501e 	ldr.w	r5, [ip, lr, lsl #1]
 8030d08:	f85c 8b04 	ldr.w	r8, [ip], #4
 8030d0c:	f850 ab04 	ldr.w	sl, [r0], #4
 8030d10:	f850 3b04 	ldr.w	r3, [r0], #4
 8030d14:	fb2a 6608 	smlad	r6, sl, r8, r6
 8030d18:	fb2a 1105 	smlad	r1, sl, r5, r1
 8030d1c:	f85c a01e 	ldr.w	sl, [ip, lr, lsl #1]
 8030d20:	f85c 8b04 	ldr.w	r8, [ip], #4
 8030d24:	fb23 6608 	smlad	r6, r3, r8, r6
 8030d28:	fb23 110a 	smlad	r1, r3, sl, r1
 8030d2c:	3f01      	subs	r7, #1
 8030d2e:	d1e9      	bne.n	8030d04 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x190>
 8030d30:	f01e 0703 	ands.w	r7, lr, #3
 8030d34:	d00b      	beq.n	8030d4e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1da>
 8030d36:	f83c 301e 	ldrh.w	r3, [ip, lr, lsl #1]
 8030d3a:	f83c 9b02 	ldrh.w	r9, [ip], #2
 8030d3e:	f930 ab02 	ldrsh.w	sl, [r0], #2
 8030d42:	fb19 660a 	smlabb	r6, r9, sl, r6
 8030d46:	3f01      	subs	r7, #1
 8030d48:	fb13 110a 	smlabb	r1, r3, sl, r1
 8030d4c:	dcf3      	bgt.n	8030d36 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1c2>
 8030d4e:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8030d52:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8030d54:	f9ba 4000 	ldrsh.w	r4, [sl]
 8030d58:	f8d7 c000 	ldr.w	ip, [r7]
 8030d5c:	f8db 5000 	ldr.w	r5, [fp]
 8030d60:	f1c4 0915 	rsb	r9, r4, #21
 8030d64:	ea99 0904 	eors.w	r9, r9, r4
 8030d68:	dd58      	ble.n	8030e1c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2a8>
 8030d6a:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8030d6e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8030d72:	fb56 c605 	smmla	r6, r6, r5, ip
 8030d76:	fb51 c105 	smmla	r1, r1, r5, ip
 8030d7a:	fa46 f604 	asr.w	r6, r6, r4
 8030d7e:	fa41 f104 	asr.w	r1, r1, r4
 8030d82:	f306 0607 	ssat	r6, #8, r6
 8030d86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8030d88:	9c04      	ldr	r4, [sp, #16]
 8030d8a:	7016      	strb	r6, [r2, #0]
 8030d8c:	f301 0107 	ssat	r1, #8, r1
 8030d90:	5511      	strb	r1, [r2, r4]
 8030d92:	9b01      	ldr	r3, [sp, #4]
 8030d94:	441a      	add	r2, r3
 8030d96:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8030d98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8030d9a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8030d9c:	b133      	cbz	r3, 8030dac <st_sssa8_ch_nn_mat_mult_kernel_opt+0x238>
 8030d9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8030da0:	f104 0002 	add.w	r0, r4, #2
 8030da4:	fb03 0011 	mls	r0, r3, r1, r0
 8030da8:	4410      	add	r0, r2
 8030daa:	e006      	b.n	8030dba <st_sssa8_ch_nn_mat_mult_kernel_opt+0x246>
 8030dac:	eba2 0001 	sub.w	r0, r2, r1
 8030db0:	9a05      	ldr	r2, [sp, #20]
 8030db2:	f104 0402 	add.w	r4, r4, #2
 8030db6:	fb02 0004 	mla	r0, r2, r4, r0
 8030dba:	b006      	add	sp, #24
 8030dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030dc0:	2c00      	cmp	r4, #0
 8030dc2:	dd42      	ble.n	8030e4a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 8030dc4:	f04f 0901 	mov.w	r9, #1
 8030dc8:	fa09 f904 	lsl.w	r9, r9, r4
 8030dcc:	ea4f 09a9 	mov.w	r9, r9, asr #2
 8030dd0:	fb53 9305 	smmla	r3, r3, r5, r9
 8030dd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8030dd8:	fa43 f304 	asr.w	r3, r3, r4
 8030ddc:	4463      	add	r3, ip
 8030dde:	fb52 9205 	smmla	r2, r2, r5, r9
 8030de2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8030de6:	fa42 f204 	asr.w	r2, r2, r4
 8030dea:	4462      	add	r2, ip
 8030dec:	e75b      	b.n	8030ca6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 8030dee:	2c00      	cmp	r4, #0
 8030df0:	dd3c      	ble.n	8030e6c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2f8>
 8030df2:	f04f 0901 	mov.w	r9, #1
 8030df6:	fa09 f904 	lsl.w	r9, r9, r4
 8030dfa:	ea4f 09a9 	mov.w	r9, r9, asr #2
 8030dfe:	fb56 9605 	smmla	r6, r6, r5, r9
 8030e02:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8030e06:	fa46 f604 	asr.w	r6, r6, r4
 8030e0a:	4466      	add	r6, ip
 8030e0c:	fb51 9105 	smmla	r1, r1, r5, r9
 8030e10:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8030e14:	fa41 f104 	asr.w	r1, r1, r4
 8030e18:	4461      	add	r1, ip
 8030e1a:	e72c      	b.n	8030c76 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 8030e1c:	2c00      	cmp	r4, #0
 8030e1e:	dd36      	ble.n	8030e8e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x31a>
 8030e20:	f04f 0901 	mov.w	r9, #1
 8030e24:	fa09 f904 	lsl.w	r9, r9, r4
 8030e28:	ea4f 09a9 	mov.w	r9, r9, asr #2
 8030e2c:	fb56 9605 	smmla	r6, r6, r5, r9
 8030e30:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8030e34:	fa46 f604 	asr.w	r6, r6, r4
 8030e38:	4466      	add	r6, ip
 8030e3a:	fb51 9105 	smmla	r1, r1, r5, r9
 8030e3e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8030e42:	fa41 f104 	asr.w	r1, r1, r4
 8030e46:	4461      	add	r1, ip
 8030e48:	e79b      	b.n	8030d82 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>
 8030e4a:	f1c4 0901 	rsb	r9, r4, #1
 8030e4e:	fa03 f309 	lsl.w	r3, r3, r9
 8030e52:	f303 031f 	ssat	r3, #32, r3
 8030e56:	fb53 f315 	smmulr	r3, r3, r5
 8030e5a:	fa02 f209 	lsl.w	r2, r2, r9
 8030e5e:	f302 021f 	ssat	r2, #32, r2
 8030e62:	fb52 f215 	smmulr	r2, r2, r5
 8030e66:	4463      	add	r3, ip
 8030e68:	4462      	add	r2, ip
 8030e6a:	e71c      	b.n	8030ca6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 8030e6c:	f1c4 0901 	rsb	r9, r4, #1
 8030e70:	fa06 f609 	lsl.w	r6, r6, r9
 8030e74:	f306 061f 	ssat	r6, #32, r6
 8030e78:	fb56 f615 	smmulr	r6, r6, r5
 8030e7c:	fa01 f109 	lsl.w	r1, r1, r9
 8030e80:	f301 011f 	ssat	r1, #32, r1
 8030e84:	fb51 f115 	smmulr	r1, r1, r5
 8030e88:	4466      	add	r6, ip
 8030e8a:	4461      	add	r1, ip
 8030e8c:	e6f3      	b.n	8030c76 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 8030e8e:	f1c4 0901 	rsb	r9, r4, #1
 8030e92:	fa06 f609 	lsl.w	r6, r6, r9
 8030e96:	f306 061f 	ssat	r6, #32, r6
 8030e9a:	fb56 f615 	smmulr	r6, r6, r5
 8030e9e:	fa01 f109 	lsl.w	r1, r1, r9
 8030ea2:	f301 011f 	ssat	r1, #32, r1
 8030ea6:	fb51 f115 	smmulr	r1, r1, r5
 8030eaa:	4466      	add	r6, ip
 8030eac:	4461      	add	r1, ip
 8030eae:	e768      	b.n	8030d82 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>

08030eb0 <ai_math_sqrt>:
 8030eb0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8030eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8030eb8:	db02      	blt.n	8030ec0 <ai_math_sqrt+0x10>
 8030eba:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8030ebe:	4770      	bx	lr
 8030ec0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8030ec8 <ai_math_sqrt+0x18>
 8030ec4:	4770      	bx	lr
 8030ec6:	bf00      	nop
 8030ec8:	7fc00000 	.word	0x7fc00000

08030ecc <ai_mul_buffer_INT8>:
 8030ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030ed0:	ed2d 8b04 	vpush	{d8-d9}
 8030ed4:	b093      	sub	sp, #76	@ 0x4c
 8030ed6:	930c      	str	r3, [sp, #48]	@ 0x30
 8030ed8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8030eda:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 8030edc:	edd3 8a00 	vldr	s17, [r3]
 8030ee0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8030ee2:	ed94 8a00 	vldr	s16, [r4]
 8030ee6:	ed93 9a00 	vldr	s18, [r3]
 8030eea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8030eec:	ee28 0a28 	vmul.f32	s0, s16, s17
 8030ef0:	9c26      	ldr	r4, [sp, #152]	@ 0x98
 8030ef2:	f993 3000 	ldrsb.w	r3, [r3]
 8030ef6:	ee80 0a09 	vdiv.f32	s0, s0, s18
 8030efa:	920a      	str	r2, [sp, #40]	@ 0x28
 8030efc:	930e      	str	r3, [sp, #56]	@ 0x38
 8030efe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8030f00:	f993 3000 	ldrsb.w	r3, [r3]
 8030f04:	930d      	str	r3, [sp, #52]	@ 0x34
 8030f06:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8030f08:	f993 5000 	ldrsb.w	r5, [r3]
 8030f0c:	2300      	movs	r3, #0
 8030f0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8030f12:	f10d 0046 	add.w	r0, sp, #70	@ 0x46
 8030f16:	f8ad 3046 	strh.w	r3, [sp, #70]	@ 0x46
 8030f1a:	f7f6 fa47 	bl	80273ac <align_factor>
 8030f1e:	f9bd e046 	ldrsh.w	lr, [sp, #70]	@ 0x46
 8030f22:	f10e 36ff 	add.w	r6, lr, #4294967295
 8030f26:	b2b3      	uxth	r3, r6
 8030f28:	2b14      	cmp	r3, #20
 8030f2a:	f200 80b4 	bhi.w	8031096 <ai_mul_buffer_INT8+0x1ca>
 8030f2e:	2301      	movs	r3, #1
 8030f30:	fa05 fc0e 	lsl.w	ip, r5, lr
 8030f34:	fa03 f30e 	lsl.w	r3, r3, lr
 8030f38:	eb0c 0c53 	add.w	ip, ip, r3, lsr #1
 8030f3c:	2c00      	cmp	r4, #0
 8030f3e:	f000 80ae 	beq.w	803109e <ai_mul_buffer_INT8+0x1d2>
 8030f42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8030f44:	2c01      	cmp	r4, #1
 8030f46:	b293      	uxth	r3, r2
 8030f48:	ea43 4802 	orr.w	r8, r3, r2, lsl #16
 8030f4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8030f4e:	b29f      	uxth	r7, r3
 8030f50:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8030f54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030f56:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8030f5a:	f000 80b6 	beq.w	80310ca <ai_mul_buffer_INT8+0x1fe>
 8030f5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8030f60:	f992 2000 	ldrsb.w	r2, [r2]
 8030f64:	b295      	uxth	r5, r2
 8030f66:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
 8030f6a:	fa2f f585 	sxtb16	r5, r5
 8030f6e:	fad5 f507 	ssub16	r5, r5, r7
 8030f72:	2b00      	cmp	r3, #0
 8030f74:	f000 817a 	beq.w	803126c <ai_mul_buffer_INT8+0x3a0>
 8030f78:	009a      	lsls	r2, r3, #2
 8030f7a:	2701      	movs	r7, #1
 8030f7c:	f1ae 0302 	sub.w	r3, lr, #2
 8030f80:	920f      	str	r2, [sp, #60]	@ 0x3c
 8030f82:	409f      	lsls	r7, r3
 8030f84:	1c93      	adds	r3, r2, #2
 8030f86:	9a08      	ldr	r2, [sp, #32]
 8030f88:	18d3      	adds	r3, r2, r3
 8030f8a:	1c94      	adds	r4, r2, #2
 8030f8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8030f8e:	9307      	str	r3, [sp, #28]
 8030f90:	142b      	asrs	r3, r5, #16
 8030f92:	9205      	str	r2, [sp, #20]
 8030f94:	f1ce 0201 	rsb	r2, lr, #1
 8030f98:	b22d      	sxth	r5, r5
 8030f9a:	469b      	mov	fp, r3
 8030f9c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8030f9e:	e030      	b.n	8031002 <ai_mul_buffer_INT8+0x136>
 8030fa0:	fb59 7900 	smmla	r9, r9, r0, r7
 8030fa4:	fa49 f906 	asr.w	r9, r9, r6
 8030fa8:	fb53 7a00 	smmla	sl, r3, r0, r7
 8030fac:	44e1      	add	r9, ip
 8030fae:	fb51 7100 	smmla	r1, r1, r0, r7
 8030fb2:	fb52 7200 	smmla	r2, r2, r0, r7
 8030fb6:	f309 0907 	ssat	r9, #8, r9
 8030fba:	4131      	asrs	r1, r6
 8030fbc:	fa4f f989 	sxtb.w	r9, r9
 8030fc0:	4461      	add	r1, ip
 8030fc2:	f301 0107 	ssat	r1, #8, r1
 8030fc6:	fa4a fa06 	asr.w	sl, sl, r6
 8030fca:	b249      	sxtb	r1, r1
 8030fcc:	44e2      	add	sl, ip
 8030fce:	f30a 0a07 	ssat	sl, #8, sl
 8030fd2:	4132      	asrs	r2, r6
 8030fd4:	fa4f fa8a 	sxtb.w	sl, sl
 8030fd8:	eb02 030c 	add.w	r3, r2, ip
 8030fdc:	f303 0307 	ssat	r3, #8, r3
 8030fe0:	b25b      	sxtb	r3, r3
 8030fe2:	2200      	movs	r2, #0
 8030fe4:	3404      	adds	r4, #4
 8030fe6:	f369 0207 	bfi	r2, r9, #0, #8
 8030fea:	f361 220f 	bfi	r2, r1, #8, #8
 8030fee:	f36a 4217 	bfi	r2, sl, #16, #8
 8030ff2:	f363 621f 	bfi	r2, r3, #24, #8
 8030ff6:	9b07      	ldr	r3, [sp, #28]
 8030ff8:	f844 2c06 	str.w	r2, [r4, #-6]
 8030ffc:	42a3      	cmp	r3, r4
 8030ffe:	f000 812b 	beq.w	8031258 <ai_mul_buffer_INT8+0x38c>
 8031002:	9b05      	ldr	r3, [sp, #20]
 8031004:	f853 1b04 	ldr.w	r1, [r3], #4
 8031008:	fa2f f981 	sxtb16	r9, r1
 803100c:	9305      	str	r3, [sp, #20]
 803100e:	ea4f 2131 	mov.w	r1, r1, ror #8
 8031012:	fa2f f181 	sxtb16	r1, r1
 8031016:	fad1 f108 	ssub16	r1, r1, r8
 803101a:	fad9 f908 	ssub16	r9, r9, r8
 803101e:	140a      	asrs	r2, r1, #16
 8031020:	f1be 0f15 	cmp.w	lr, #21
 8031024:	fb11 f105 	smulbb	r1, r1, r5
 8031028:	ea4f 4329 	mov.w	r3, r9, asr #16
 803102c:	fb19 f905 	smulbb	r9, r9, r5
 8031030:	fb0b f202 	mul.w	r2, fp, r2
 8031034:	fb0b f303 	mul.w	r3, fp, r3
 8031038:	9206      	str	r2, [sp, #24]
 803103a:	dcb1      	bgt.n	8030fa0 <ai_mul_buffer_INT8+0xd4>
 803103c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 803103e:	f1be 0f00 	cmp.w	lr, #0
 8031042:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8031046:	fa09 f202 	lsl.w	r2, r9, r2
 803104a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 803104e:	f340 80d8 	ble.w	8031202 <ai_mul_buffer_INT8+0x336>
 8031052:	9b06      	ldr	r3, [sp, #24]
 8031054:	0049      	lsls	r1, r1, #1
 8031056:	fb59 c900 	smmla	r9, r9, r0, ip
 803105a:	005b      	lsls	r3, r3, #1
 803105c:	fa49 f90e 	asr.w	r9, r9, lr
 8031060:	fb5a c200 	smmla	r2, sl, r0, ip
 8031064:	fb51 c100 	smmla	r1, r1, r0, ip
 8031068:	fb53 c300 	smmla	r3, r3, r0, ip
 803106c:	f309 0907 	ssat	r9, #8, r9
 8031070:	fa4f f989 	sxtb.w	r9, r9
 8031074:	fa41 f10e 	asr.w	r1, r1, lr
 8031078:	f301 0107 	ssat	r1, #8, r1
 803107c:	b249      	sxtb	r1, r1
 803107e:	fa42 fa0e 	asr.w	sl, r2, lr
 8031082:	f30a 0a07 	ssat	sl, #8, sl
 8031086:	fa4f fa8a 	sxtb.w	sl, sl
 803108a:	fa43 f30e 	asr.w	r3, r3, lr
 803108e:	f303 0307 	ssat	r3, #8, r3
 8031092:	b25b      	sxtb	r3, r3
 8031094:	e7a5      	b.n	8030fe2 <ai_mul_buffer_INT8+0x116>
 8031096:	46ac      	mov	ip, r5
 8031098:	2c00      	cmp	r4, #0
 803109a:	f47f af52 	bne.w	8030f42 <ai_mul_buffer_INT8+0x76>
 803109e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80310a0:	eeb0 1a49 	vmov.f32	s2, s18
 80310a4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80310a6:	eef0 0a68 	vmov.f32	s1, s17
 80310aa:	9301      	str	r3, [sp, #4]
 80310ac:	eeb0 0a48 	vmov.f32	s0, s16
 80310b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80310b2:	9808      	ldr	r0, [sp, #32]
 80310b4:	9502      	str	r5, [sp, #8]
 80310b6:	9400      	str	r4, [sp, #0]
 80310b8:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 80310bc:	f000 fce4 	bl	8031a88 <ai_math_elementwise_mul_int8>
 80310c0:	b013      	add	sp, #76	@ 0x4c
 80310c2:	ecbd 8b04 	vpop	{d8-d9}
 80310c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80310ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80310cc:	f992 2000 	ldrsb.w	r2, [r2]
 80310d0:	b295      	uxth	r5, r2
 80310d2:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
 80310d6:	fa2f f585 	sxtb16	r5, r5
 80310da:	fad5 f508 	ssub16	r5, r5, r8
 80310de:	2b00      	cmp	r3, #0
 80310e0:	f000 8139 	beq.w	8031356 <ai_mul_buffer_INT8+0x48a>
 80310e4:	009a      	lsls	r2, r3, #2
 80310e6:	f1ae 0302 	sub.w	r3, lr, #2
 80310ea:	9705      	str	r7, [sp, #20]
 80310ec:	fa04 fb03 	lsl.w	fp, r4, r3
 80310f0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80310f2:	1c93      	adds	r3, r2, #2
 80310f4:	9a08      	ldr	r2, [sp, #32]
 80310f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80310fa:	18d3      	adds	r3, r2, r3
 80310fc:	1c94      	adds	r4, r2, #2
 80310fe:	9307      	str	r3, [sp, #28]
 8031100:	142b      	asrs	r3, r5, #16
 8031102:	b22d      	sxth	r5, r5
 8031104:	9306      	str	r3, [sp, #24]
 8031106:	f1ce 0301 	rsb	r3, lr, #1
 803110a:	462f      	mov	r7, r5
 803110c:	930b      	str	r3, [sp, #44]	@ 0x2c
 803110e:	e030      	b.n	8031172 <ai_mul_buffer_INT8+0x2a6>
 8031110:	fb58 b800 	smmla	r8, r8, r0, fp
 8031114:	fa48 f806 	asr.w	r8, r8, r6
 8031118:	fb53 b900 	smmla	r9, r3, r0, fp
 803111c:	44e0      	add	r8, ip
 803111e:	fb51 b100 	smmla	r1, r1, r0, fp
 8031122:	fb52 b200 	smmla	r2, r2, r0, fp
 8031126:	f308 0807 	ssat	r8, #8, r8
 803112a:	4131      	asrs	r1, r6
 803112c:	fa4f f888 	sxtb.w	r8, r8
 8031130:	4461      	add	r1, ip
 8031132:	f301 0107 	ssat	r1, #8, r1
 8031136:	fa49 f906 	asr.w	r9, r9, r6
 803113a:	b249      	sxtb	r1, r1
 803113c:	44e1      	add	r9, ip
 803113e:	f309 0907 	ssat	r9, #8, r9
 8031142:	4132      	asrs	r2, r6
 8031144:	fa4f f989 	sxtb.w	r9, r9
 8031148:	eb02 030c 	add.w	r3, r2, ip
 803114c:	f303 0307 	ssat	r3, #8, r3
 8031150:	b25b      	sxtb	r3, r3
 8031152:	2200      	movs	r2, #0
 8031154:	3404      	adds	r4, #4
 8031156:	f368 0207 	bfi	r2, r8, #0, #8
 803115a:	f361 220f 	bfi	r2, r1, #8, #8
 803115e:	f369 4217 	bfi	r2, r9, #16, #8
 8031162:	f363 621f 	bfi	r2, r3, #24, #8
 8031166:	9b07      	ldr	r3, [sp, #28]
 8031168:	f844 2c06 	str.w	r2, [r4, #-6]
 803116c:	42a3      	cmp	r3, r4
 803116e:	f000 80e8 	beq.w	8031342 <ai_mul_buffer_INT8+0x476>
 8031172:	f85a 1b04 	ldr.w	r1, [sl], #4
 8031176:	9b05      	ldr	r3, [sp, #20]
 8031178:	fa2f f881 	sxtb16	r8, r1
 803117c:	ea4f 2131 	mov.w	r1, r1, ror #8
 8031180:	fa2f f181 	sxtb16	r1, r1
 8031184:	fad1 f103 	ssub16	r1, r1, r3
 8031188:	fad8 f803 	ssub16	r8, r8, r3
 803118c:	ea4f 4328 	mov.w	r3, r8, asr #16
 8031190:	9d06      	ldr	r5, [sp, #24]
 8031192:	140a      	asrs	r2, r1, #16
 8031194:	f1be 0f15 	cmp.w	lr, #21
 8031198:	fb18 f807 	smulbb	r8, r8, r7
 803119c:	fb05 f303 	mul.w	r3, r5, r3
 80311a0:	fb11 f107 	smulbb	r1, r1, r7
 80311a4:	fb05 f202 	mul.w	r2, r5, r2
 80311a8:	dcb2      	bgt.n	8031110 <ai_mul_buffer_INT8+0x244>
 80311aa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80311ac:	f1be 0f00 	cmp.w	lr, #0
 80311b0:	ea4f 0943 	mov.w	r9, r3, lsl #1
 80311b4:	fa08 f505 	lsl.w	r5, r8, r5
 80311b8:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80311bc:	f340 8098 	ble.w	80312f0 <ai_mul_buffer_INT8+0x424>
 80311c0:	0053      	lsls	r3, r2, #1
 80311c2:	fb58 c800 	smmla	r8, r8, r0, ip
 80311c6:	0049      	lsls	r1, r1, #1
 80311c8:	fa48 f80e 	asr.w	r8, r8, lr
 80311cc:	fb59 c200 	smmla	r2, r9, r0, ip
 80311d0:	fb51 c100 	smmla	r1, r1, r0, ip
 80311d4:	fb53 c300 	smmla	r3, r3, r0, ip
 80311d8:	f308 0807 	ssat	r8, #8, r8
 80311dc:	fa4f f888 	sxtb.w	r8, r8
 80311e0:	fa41 f10e 	asr.w	r1, r1, lr
 80311e4:	f301 0107 	ssat	r1, #8, r1
 80311e8:	b249      	sxtb	r1, r1
 80311ea:	fa42 f90e 	asr.w	r9, r2, lr
 80311ee:	f309 0907 	ssat	r9, #8, r9
 80311f2:	fa4f f989 	sxtb.w	r9, r9
 80311f6:	fa43 f30e 	asr.w	r3, r3, lr
 80311fa:	f303 0307 	ssat	r3, #8, r3
 80311fe:	b25b      	sxtb	r3, r3
 8031200:	e7a7      	b.n	8031152 <ai_mul_buffer_INT8+0x286>
 8031202:	f302 091f 	ssat	r9, #32, r2
 8031206:	fb59 f910 	smmulr	r9, r9, r0
 803120a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 803120c:	fa03 fa02 	lsl.w	sl, r3, r2
 8031210:	f30a 0a1f 	ssat	sl, #32, sl
 8031214:	fb5a fa10 	smmulr	sl, sl, r0
 8031218:	4613      	mov	r3, r2
 803121a:	4091      	lsls	r1, r2
 803121c:	f301 011f 	ssat	r1, #32, r1
 8031220:	fb51 f110 	smmulr	r1, r1, r0
 8031224:	9a06      	ldr	r2, [sp, #24]
 8031226:	409a      	lsls	r2, r3
 8031228:	f302 021f 	ssat	r2, #32, r2
 803122c:	fb52 f210 	smmulr	r2, r2, r0
 8031230:	44e1      	add	r9, ip
 8031232:	f309 0907 	ssat	r9, #8, r9
 8031236:	fa4f f989 	sxtb.w	r9, r9
 803123a:	4461      	add	r1, ip
 803123c:	f301 0107 	ssat	r1, #8, r1
 8031240:	b249      	sxtb	r1, r1
 8031242:	44e2      	add	sl, ip
 8031244:	f30a 0a07 	ssat	sl, #8, sl
 8031248:	fa4f fa8a 	sxtb.w	sl, sl
 803124c:	eb0c 0302 	add.w	r3, ip, r2
 8031250:	f303 0307 	ssat	r3, #8, r3
 8031254:	b25b      	sxtb	r3, r3
 8031256:	e6c4      	b.n	8030fe2 <ai_mul_buffer_INT8+0x116>
 8031258:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803125a:	9b08      	ldr	r3, [sp, #32]
 803125c:	4413      	add	r3, r2
 803125e:	9308      	str	r3, [sp, #32]
 8031260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031262:	4413      	add	r3, r2
 8031264:	9309      	str	r3, [sp, #36]	@ 0x24
 8031266:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8031268:	f993 2000 	ldrsb.w	r2, [r3]
 803126c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803126e:	1ad2      	subs	r2, r2, r3
 8031270:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8031272:	f013 0103 	ands.w	r1, r3, #3
 8031276:	f43f af23 	beq.w	80310c0 <ai_mul_buffer_INT8+0x1f4>
 803127a:	f1ae 0302 	sub.w	r3, lr, #2
 803127e:	2401      	movs	r4, #1
 8031280:	f1be 0f15 	cmp.w	lr, #21
 8031284:	fa04 f803 	lsl.w	r8, r4, r3
 8031288:	f340 80a9 	ble.w	80313de <ai_mul_buffer_INT8+0x512>
 803128c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 803128e:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8031290:	f995 3000 	ldrsb.w	r3, [r5]
 8031294:	1bdb      	subs	r3, r3, r7
 8031296:	fb02 f303 	mul.w	r3, r2, r3
 803129a:	fb53 8300 	smmla	r3, r3, r0, r8
 803129e:	4133      	asrs	r3, r6
 80312a0:	4463      	add	r3, ip
 80312a2:	f303 0307 	ssat	r3, #8, r3
 80312a6:	9c08      	ldr	r4, [sp, #32]
 80312a8:	3901      	subs	r1, #1
 80312aa:	7023      	strb	r3, [r4, #0]
 80312ac:	f43f af08 	beq.w	80310c0 <ai_mul_buffer_INT8+0x1f4>
 80312b0:	f995 3001 	ldrsb.w	r3, [r5, #1]
 80312b4:	1bdb      	subs	r3, r3, r7
 80312b6:	fb02 f303 	mul.w	r3, r2, r3
 80312ba:	fb53 8300 	smmla	r3, r3, r0, r8
 80312be:	4133      	asrs	r3, r6
 80312c0:	4463      	add	r3, ip
 80312c2:	f303 0307 	ssat	r3, #8, r3
 80312c6:	2901      	cmp	r1, #1
 80312c8:	7063      	strb	r3, [r4, #1]
 80312ca:	f43f aef9 	beq.w	80310c0 <ai_mul_buffer_INT8+0x1f4>
 80312ce:	f995 3002 	ldrsb.w	r3, [r5, #2]
 80312d2:	1bdb      	subs	r3, r3, r7
 80312d4:	fb02 f303 	mul.w	r3, r2, r3
 80312d8:	fb53 8300 	smmla	r3, r3, r0, r8
 80312dc:	4133      	asrs	r3, r6
 80312de:	4463      	add	r3, ip
 80312e0:	f303 0307 	ssat	r3, #8, r3
 80312e4:	70a3      	strb	r3, [r4, #2]
 80312e6:	b013      	add	sp, #76	@ 0x4c
 80312e8:	ecbd 8b04 	vpop	{d8-d9}
 80312ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80312f0:	f305 081f 	ssat	r8, #32, r5
 80312f4:	fb58 f810 	smmulr	r8, r8, r0
 80312f8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80312fa:	fa03 f905 	lsl.w	r9, r3, r5
 80312fe:	f309 091f 	ssat	r9, #32, r9
 8031302:	fb59 f910 	smmulr	r9, r9, r0
 8031306:	40a9      	lsls	r1, r5
 8031308:	f301 011f 	ssat	r1, #32, r1
 803130c:	fb51 f110 	smmulr	r1, r1, r0
 8031310:	40aa      	lsls	r2, r5
 8031312:	f302 021f 	ssat	r2, #32, r2
 8031316:	fb52 f210 	smmulr	r2, r2, r0
 803131a:	44e0      	add	r8, ip
 803131c:	f308 0807 	ssat	r8, #8, r8
 8031320:	fa4f f888 	sxtb.w	r8, r8
 8031324:	4461      	add	r1, ip
 8031326:	f301 0107 	ssat	r1, #8, r1
 803132a:	b249      	sxtb	r1, r1
 803132c:	44e1      	add	r9, ip
 803132e:	f309 0907 	ssat	r9, #8, r9
 8031332:	fa4f f989 	sxtb.w	r9, r9
 8031336:	eb0c 0302 	add.w	r3, ip, r2
 803133a:	f303 0307 	ssat	r3, #8, r3
 803133e:	b25b      	sxtb	r3, r3
 8031340:	e707      	b.n	8031152 <ai_mul_buffer_INT8+0x286>
 8031342:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8031344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8031346:	4413      	add	r3, r2
 8031348:	930a      	str	r3, [sp, #40]	@ 0x28
 803134a:	9b08      	ldr	r3, [sp, #32]
 803134c:	4413      	add	r3, r2
 803134e:	9308      	str	r3, [sp, #32]
 8031350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031352:	f993 2000 	ldrsb.w	r2, [r3]
 8031356:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8031358:	f013 0103 	ands.w	r1, r3, #3
 803135c:	f43f aeb0 	beq.w	80310c0 <ai_mul_buffer_INT8+0x1f4>
 8031360:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031362:	2401      	movs	r4, #1
 8031364:	f1be 0f15 	cmp.w	lr, #21
 8031368:	eba2 0203 	sub.w	r2, r2, r3
 803136c:	f1ae 0302 	sub.w	r3, lr, #2
 8031370:	fa04 f803 	lsl.w	r8, r4, r3
 8031374:	dc3b      	bgt.n	80313ee <ai_mul_buffer_INT8+0x522>
 8031376:	f1be 0f00 	cmp.w	lr, #0
 803137a:	dd76      	ble.n	803146a <ai_mul_buffer_INT8+0x59e>
 803137c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 803137e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8031380:	f994 3000 	ldrsb.w	r3, [r4]
 8031384:	1b5b      	subs	r3, r3, r5
 8031386:	fb02 f303 	mul.w	r3, r2, r3
 803138a:	005b      	lsls	r3, r3, #1
 803138c:	fb53 c300 	smmla	r3, r3, r0, ip
 8031390:	fa43 f30e 	asr.w	r3, r3, lr
 8031394:	f303 0307 	ssat	r3, #8, r3
 8031398:	9e08      	ldr	r6, [sp, #32]
 803139a:	3901      	subs	r1, #1
 803139c:	7033      	strb	r3, [r6, #0]
 803139e:	f43f ae8f 	beq.w	80310c0 <ai_mul_buffer_INT8+0x1f4>
 80313a2:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80313a6:	1b5b      	subs	r3, r3, r5
 80313a8:	fb02 f303 	mul.w	r3, r2, r3
 80313ac:	005b      	lsls	r3, r3, #1
 80313ae:	fb53 c300 	smmla	r3, r3, r0, ip
 80313b2:	fa43 f30e 	asr.w	r3, r3, lr
 80313b6:	f303 0307 	ssat	r3, #8, r3
 80313ba:	2901      	cmp	r1, #1
 80313bc:	7073      	strb	r3, [r6, #1]
 80313be:	f43f ae7f 	beq.w	80310c0 <ai_mul_buffer_INT8+0x1f4>
 80313c2:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80313c6:	1b5b      	subs	r3, r3, r5
 80313c8:	fb02 f303 	mul.w	r3, r2, r3
 80313cc:	005b      	lsls	r3, r3, #1
 80313ce:	fb53 c300 	smmla	r3, r3, r0, ip
 80313d2:	fa43 f30e 	asr.w	r3, r3, lr
 80313d6:	f303 0307 	ssat	r3, #8, r3
 80313da:	70b3      	strb	r3, [r6, #2]
 80313dc:	e670      	b.n	80310c0 <ai_mul_buffer_INT8+0x1f4>
 80313de:	f1be 0f00 	cmp.w	lr, #0
 80313e2:	dd09      	ble.n	80313f8 <ai_mul_buffer_INT8+0x52c>
 80313e4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80313e6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80313e8:	f994 3000 	ldrsb.w	r3, [r4]
 80313ec:	e7ca      	b.n	8031384 <ai_mul_buffer_INT8+0x4b8>
 80313ee:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80313f0:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80313f2:	f995 3000 	ldrsb.w	r3, [r5]
 80313f6:	e74d      	b.n	8031294 <ai_mul_buffer_INT8+0x3c8>
 80313f8:	eba4 0e0e 	sub.w	lr, r4, lr
 80313fc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80313fe:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8031400:	f994 3000 	ldrsb.w	r3, [r4]
 8031404:	1b5b      	subs	r3, r3, r5
 8031406:	fb02 f303 	mul.w	r3, r2, r3
 803140a:	fa03 f30e 	lsl.w	r3, r3, lr
 803140e:	f303 031f 	ssat	r3, #32, r3
 8031412:	fb53 f310 	smmulr	r3, r3, r0
 8031416:	4463      	add	r3, ip
 8031418:	f303 0307 	ssat	r3, #8, r3
 803141c:	9e08      	ldr	r6, [sp, #32]
 803141e:	3901      	subs	r1, #1
 8031420:	7033      	strb	r3, [r6, #0]
 8031422:	f43f ae4d 	beq.w	80310c0 <ai_mul_buffer_INT8+0x1f4>
 8031426:	f994 3001 	ldrsb.w	r3, [r4, #1]
 803142a:	1b5b      	subs	r3, r3, r5
 803142c:	fb02 f303 	mul.w	r3, r2, r3
 8031430:	fa03 f30e 	lsl.w	r3, r3, lr
 8031434:	f303 031f 	ssat	r3, #32, r3
 8031438:	fb53 f310 	smmulr	r3, r3, r0
 803143c:	4463      	add	r3, ip
 803143e:	f303 0307 	ssat	r3, #8, r3
 8031442:	2901      	cmp	r1, #1
 8031444:	7073      	strb	r3, [r6, #1]
 8031446:	f43f ae3b 	beq.w	80310c0 <ai_mul_buffer_INT8+0x1f4>
 803144a:	f994 3002 	ldrsb.w	r3, [r4, #2]
 803144e:	1b5b      	subs	r3, r3, r5
 8031450:	fb02 f303 	mul.w	r3, r2, r3
 8031454:	fa03 f30e 	lsl.w	r3, r3, lr
 8031458:	f303 031f 	ssat	r3, #32, r3
 803145c:	fb53 f310 	smmulr	r3, r3, r0
 8031460:	4463      	add	r3, ip
 8031462:	f303 0307 	ssat	r3, #8, r3
 8031466:	70b3      	strb	r3, [r6, #2]
 8031468:	e62a      	b.n	80310c0 <ai_mul_buffer_INT8+0x1f4>
 803146a:	eba4 0e0e 	sub.w	lr, r4, lr
 803146e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8031470:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8031472:	f994 3000 	ldrsb.w	r3, [r4]
 8031476:	e7c5      	b.n	8031404 <ai_mul_buffer_INT8+0x538>

08031478 <ai_sum>:
 8031478:	edd1 7a00 	vldr	s15, [r1]
 803147c:	ed92 7a00 	vldr	s14, [r2]
 8031480:	ee77 7a87 	vadd.f32	s15, s15, s14
 8031484:	edc0 7a00 	vstr	s15, [r0]
 8031488:	4770      	bx	lr
 803148a:	bf00      	nop

0803148c <ai_sum_f32>:
 803148c:	edd1 7a00 	vldr	s15, [r1]
 8031490:	ed92 7a00 	vldr	s14, [r2]
 8031494:	ee77 7a87 	vadd.f32	s15, s15, s14
 8031498:	edc0 7a00 	vstr	s15, [r0]
 803149c:	4770      	bx	lr
 803149e:	bf00      	nop

080314a0 <ai_mul_f32>:
 80314a0:	edd1 7a00 	vldr	s15, [r1]
 80314a4:	ed92 7a00 	vldr	s14, [r2]
 80314a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80314ac:	edc0 7a00 	vstr	s15, [r0]
 80314b0:	4770      	bx	lr
 80314b2:	bf00      	nop

080314b4 <ai_max>:
 80314b4:	edd2 7a00 	vldr	s15, [r2]
 80314b8:	ed91 7a00 	vldr	s14, [r1]
 80314bc:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80314c0:	edc0 7a00 	vstr	s15, [r0]
 80314c4:	4770      	bx	lr
 80314c6:	bf00      	nop

080314c8 <ai_sum_buffer_INT8>:
 80314c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80314cc:	9c07      	ldr	r4, [sp, #28]
 80314ce:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
 80314d2:	ed94 0a00 	vldr	s0, [r4]
 80314d6:	9c08      	ldr	r4, [sp, #32]
 80314d8:	f994 e000 	ldrsb.w	lr, [r4]
 80314dc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80314de:	edd4 0a00 	vldr	s1, [r4]
 80314e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80314e4:	f994 9000 	ldrsb.w	r9, [r4]
 80314e8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80314ea:	ed94 1a00 	vldr	s2, [r4]
 80314ee:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80314f0:	f994 5000 	ldrsb.w	r5, [r4]
 80314f4:	f1b8 0f00 	cmp.w	r8, #0
 80314f8:	d121      	bne.n	803153e <ai_sum_buffer_INT8+0x76>
 80314fa:	eeb4 0a41 	vcmp.f32	s0, s2
 80314fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8031502:	f040 80c9 	bne.w	8031698 <ai_sum_buffer_INT8+0x1d0>
 8031506:	45ae      	cmp	lr, r5
 8031508:	f040 80c6 	bne.w	8031698 <ai_sum_buffer_INT8+0x1d0>
 803150c:	eef4 0a41 	vcmp.f32	s1, s2
 8031510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8031514:	f040 80c0 	bne.w	8031698 <ai_sum_buffer_INT8+0x1d0>
 8031518:	45a9      	cmp	r9, r5
 803151a:	f040 80bd 	bne.w	8031698 <ai_sum_buffer_INT8+0x1d0>
 803151e:	b163      	cbz	r3, 803153a <ai_sum_buffer_INT8+0x72>
 8031520:	4403      	add	r3, r0
 8031522:	f911 4b01 	ldrsb.w	r4, [r1], #1
 8031526:	f912 6b01 	ldrsb.w	r6, [r2], #1
 803152a:	4434      	add	r4, r6
 803152c:	1b64      	subs	r4, r4, r5
 803152e:	f304 0407 	ssat	r4, #8, r4
 8031532:	f800 4b01 	strb.w	r4, [r0], #1
 8031536:	4298      	cmp	r0, r3
 8031538:	d1f3      	bne.n	8031522 <ai_sum_buffer_INT8+0x5a>
 803153a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803153e:	eec0 5a81 	vdiv.f32	s11, s1, s2
 8031542:	f04f 0c01 	mov.w	ip, #1
 8031546:	089f      	lsrs	r7, r3, #2
 8031548:	ee80 7a01 	vdiv.f32	s14, s0, s2
 803154c:	ee15 4a90 	vmov	r4, s11
 8031550:	f3c4 54c7 	ubfx	r4, r4, #23, #8
 8031554:	f1c4 047e 	rsb	r4, r4, #126	@ 0x7e
 8031558:	ee17 6a10 	vmov	r6, s14
 803155c:	ea04 74e4 	and.w	r4, r4, r4, asr #31
 8031560:	f3c6 56c7 	ubfx	r6, r6, #23, #8
 8031564:	f1c6 067e 	rsb	r6, r6, #126	@ 0x7e
 8031568:	42b4      	cmp	r4, r6
 803156a:	bfa8      	it	ge
 803156c:	4634      	movge	r4, r6
 803156e:	45e0      	cmp	r8, ip
 8031570:	f104 061d 	add.w	r6, r4, #29
 8031574:	fa0c f606 	lsl.w	r6, ip, r6
 8031578:	ee07 6a90 	vmov	s15, r6
 803157c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8031580:	f000 8092 	beq.w	80316a8 <ai_sum_buffer_INT8+0x1e0>
 8031584:	ee07 ea90 	vmov	s15, lr
 8031588:	f992 2000 	ldrsb.w	r2, [r2]
 803158c:	f104 0616 	add.w	r6, r4, #22
 8031590:	3415      	adds	r4, #21
 8031592:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8031596:	ee07 5a90 	vmov	s15, r5
 803159a:	eba2 0209 	sub.w	r2, r2, r9
 803159e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80315a2:	ee05 2a10 	vmov	s10, r2
 80315a6:	fa0c f204 	lsl.w	r2, ip, r4
 80315aa:	fa0c f406 	lsl.w	r4, ip, r6
 80315ae:	eee6 7a47 	vfms.f32	s15, s12, s14
 80315b2:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80315b6:	ee37 7a07 	vadd.f32	s14, s14, s14
 80315ba:	ee67 6a26 	vmul.f32	s13, s14, s13
 80315be:	ee07 4a10 	vmov	s14, r4
 80315c2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80315c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80315ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80315ce:	eebd 7ae6 	vcvt.s32.f32	s14, s13
 80315d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80315d6:	ee17 4a10 	vmov	r4, s14
 80315da:	ee17 5a90 	vmov	r5, s15
 80315de:	4415      	add	r5, r2
 80315e0:	2f00      	cmp	r7, #0
 80315e2:	f000 80ee 	beq.w	80317c2 <ai_sum_buffer_INT8+0x2fa>
 80315e6:	ea4f 0887 	mov.w	r8, r7, lsl #2
 80315ea:	f100 0e04 	add.w	lr, r0, #4
 80315ee:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80315f2:	f851 2b04 	ldr.w	r2, [r1], #4
 80315f6:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80315fa:	f00c 2cff 	and.w	ip, ip, #4278255360	@ 0xff00ff00
 80315fe:	fb34 590c 	smlawb	r9, r4, ip, r5
 8031602:	fa49 f906 	asr.w	r9, r9, r6
 8031606:	f309 0907 	ssat	r9, #8, r9
 803160a:	f002 22ff 	and.w	r2, r2, #4278255360	@ 0xff00ff00
 803160e:	f80e 9c04 	strb.w	r9, [lr, #-4]
 8031612:	fb34 5902 	smlawb	r9, r4, r2, r5
 8031616:	fa49 f906 	asr.w	r9, r9, r6
 803161a:	f309 0907 	ssat	r9, #8, r9
 803161e:	f80e 9c03 	strb.w	r9, [lr, #-3]
 8031622:	fb34 5c1c 	smlawt	ip, r4, ip, r5
 8031626:	fa4c fc06 	asr.w	ip, ip, r6
 803162a:	f30c 0c07 	ssat	ip, #8, ip
 803162e:	f80e cc02 	strb.w	ip, [lr, #-2]
 8031632:	fb34 5212 	smlawt	r2, r4, r2, r5
 8031636:	4132      	asrs	r2, r6
 8031638:	f302 0207 	ssat	r2, #8, r2
 803163c:	42b9      	cmp	r1, r7
 803163e:	f80e 2c01 	strb.w	r2, [lr, #-1]
 8031642:	f10e 0e04 	add.w	lr, lr, #4
 8031646:	d1d4      	bne.n	80315f2 <ai_sum_buffer_INT8+0x12a>
 8031648:	4440      	add	r0, r8
 803164a:	f013 0303 	ands.w	r3, r3, #3
 803164e:	f43f af74 	beq.w	803153a <ai_sum_buffer_INT8+0x72>
 8031652:	f997 2000 	ldrsb.w	r2, [r7]
 8031656:	0212      	lsls	r2, r2, #8
 8031658:	fb34 5202 	smlawb	r2, r4, r2, r5
 803165c:	4132      	asrs	r2, r6
 803165e:	f302 0207 	ssat	r2, #8, r2
 8031662:	3b01      	subs	r3, #1
 8031664:	7002      	strb	r2, [r0, #0]
 8031666:	f43f af68 	beq.w	803153a <ai_sum_buffer_INT8+0x72>
 803166a:	f997 2001 	ldrsb.w	r2, [r7, #1]
 803166e:	0212      	lsls	r2, r2, #8
 8031670:	fb34 5202 	smlawb	r2, r4, r2, r5
 8031674:	4132      	asrs	r2, r6
 8031676:	f302 0207 	ssat	r2, #8, r2
 803167a:	2b01      	cmp	r3, #1
 803167c:	7042      	strb	r2, [r0, #1]
 803167e:	f43f af5c 	beq.w	803153a <ai_sum_buffer_INT8+0x72>
 8031682:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8031686:	021b      	lsls	r3, r3, #8
 8031688:	fb34 5303 	smlawb	r3, r4, r3, r5
 803168c:	4133      	asrs	r3, r6
 803168e:	f303 0307 	ssat	r3, #8, r3
 8031692:	7083      	strb	r3, [r0, #2]
 8031694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8031698:	e9cd 9508 	strd	r9, r5, [sp, #32]
 803169c:	f8cd e01c 	str.w	lr, [sp, #28]
 80316a0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80316a4:	f000 bbb8 	b.w	8031e18 <ai_math_elementwise_sum_int8>
 80316a8:	ee07 9a90 	vmov	s15, r9
 80316ac:	f991 1000 	ldrsb.w	r1, [r1]
 80316b0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80316b4:	ee07 5a90 	vmov	s15, r5
 80316b8:	eba1 010e 	sub.w	r1, r1, lr
 80316bc:	f104 0e16 	add.w	lr, r4, #22
 80316c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80316c4:	3415      	adds	r4, #21
 80316c6:	ee06 1a10 	vmov	s12, r1
 80316ca:	fa08 f10e 	lsl.w	r1, r8, lr
 80316ce:	fa08 f404 	lsl.w	r4, r8, r4
 80316d2:	eee5 7a65 	vfms.f32	s15, s10, s11
 80316d6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80316da:	ee75 5aa5 	vadd.f32	s11, s11, s11
 80316de:	ee65 5aa6 	vmul.f32	s11, s11, s13
 80316e2:	eee6 7a07 	vfma.f32	s15, s12, s14
 80316e6:	eebd 7ae5 	vcvt.s32.f32	s14, s11
 80316ea:	ee17 6a10 	vmov	r6, s14
 80316ee:	eef0 6a67 	vmov.f32	s13, s15
 80316f2:	ee07 1a90 	vmov	s15, r1
 80316f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80316fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80316fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8031702:	ee17 5a90 	vmov	r5, s15
 8031706:	4425      	add	r5, r4
 8031708:	2f00      	cmp	r7, #0
 803170a:	d05c      	beq.n	80317c6 <ai_sum_buffer_INT8+0x2fe>
 803170c:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8031710:	f100 0c04 	add.w	ip, r0, #4
 8031714:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8031718:	f852 1b04 	ldr.w	r1, [r2], #4
 803171c:	020c      	lsls	r4, r1, #8
 803171e:	f004 24ff 	and.w	r4, r4, #4278255360	@ 0xff00ff00
 8031722:	fb36 5904 	smlawb	r9, r6, r4, r5
 8031726:	fa49 f90e 	asr.w	r9, r9, lr
 803172a:	f309 0907 	ssat	r9, #8, r9
 803172e:	f001 21ff 	and.w	r1, r1, #4278255360	@ 0xff00ff00
 8031732:	f80c 9c04 	strb.w	r9, [ip, #-4]
 8031736:	fb36 5901 	smlawb	r9, r6, r1, r5
 803173a:	fa49 f90e 	asr.w	r9, r9, lr
 803173e:	f309 0907 	ssat	r9, #8, r9
 8031742:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8031746:	fb36 5414 	smlawt	r4, r6, r4, r5
 803174a:	fa44 f40e 	asr.w	r4, r4, lr
 803174e:	f304 0407 	ssat	r4, #8, r4
 8031752:	f80c 4c02 	strb.w	r4, [ip, #-2]
 8031756:	fb36 5111 	smlawt	r1, r6, r1, r5
 803175a:	fa41 f10e 	asr.w	r1, r1, lr
 803175e:	f301 0107 	ssat	r1, #8, r1
 8031762:	42ba      	cmp	r2, r7
 8031764:	f80c 1c01 	strb.w	r1, [ip, #-1]
 8031768:	f10c 0c04 	add.w	ip, ip, #4
 803176c:	d1d4      	bne.n	8031718 <ai_sum_buffer_INT8+0x250>
 803176e:	4440      	add	r0, r8
 8031770:	f013 0303 	ands.w	r3, r3, #3
 8031774:	f43f aee1 	beq.w	803153a <ai_sum_buffer_INT8+0x72>
 8031778:	f997 2000 	ldrsb.w	r2, [r7]
 803177c:	0212      	lsls	r2, r2, #8
 803177e:	fb36 5202 	smlawb	r2, r6, r2, r5
 8031782:	fa42 f20e 	asr.w	r2, r2, lr
 8031786:	f302 0207 	ssat	r2, #8, r2
 803178a:	3b01      	subs	r3, #1
 803178c:	7002      	strb	r2, [r0, #0]
 803178e:	f43f aed4 	beq.w	803153a <ai_sum_buffer_INT8+0x72>
 8031792:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8031796:	0212      	lsls	r2, r2, #8
 8031798:	fb36 5202 	smlawb	r2, r6, r2, r5
 803179c:	fa42 f20e 	asr.w	r2, r2, lr
 80317a0:	f302 0207 	ssat	r2, #8, r2
 80317a4:	2b01      	cmp	r3, #1
 80317a6:	7042      	strb	r2, [r0, #1]
 80317a8:	f43f aec7 	beq.w	803153a <ai_sum_buffer_INT8+0x72>
 80317ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80317b0:	021b      	lsls	r3, r3, #8
 80317b2:	fb36 5303 	smlawb	r3, r6, r3, r5
 80317b6:	fa43 f30e 	asr.w	r3, r3, lr
 80317ba:	f303 0307 	ssat	r3, #8, r3
 80317be:	7083      	strb	r3, [r0, #2]
 80317c0:	e6bb      	b.n	803153a <ai_sum_buffer_INT8+0x72>
 80317c2:	460f      	mov	r7, r1
 80317c4:	e741      	b.n	803164a <ai_sum_buffer_INT8+0x182>
 80317c6:	4617      	mov	r7, r2
 80317c8:	e7d2      	b.n	8031770 <ai_sum_buffer_INT8+0x2a8>
 80317ca:	bf00      	nop

080317cc <ai_array_to_buffer_fmt>:
 80317cc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80317d0:	2b02      	cmp	r3, #2
 80317d2:	d055      	beq.n	8031880 <ai_array_to_buffer_fmt+0xb4>
 80317d4:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 80317d8:	4a2c      	ldr	r2, [pc, #176]	@ (803188c <ai_array_to_buffer_fmt+0xc0>)
 80317da:	4293      	cmp	r3, r2
 80317dc:	d010      	beq.n	8031800 <ai_array_to_buffer_fmt+0x34>
 80317de:	dc21      	bgt.n	8031824 <ai_array_to_buffer_fmt+0x58>
 80317e0:	4a2b      	ldr	r2, [pc, #172]	@ (8031890 <ai_array_to_buffer_fmt+0xc4>)
 80317e2:	4293      	cmp	r3, r2
 80317e4:	d00c      	beq.n	8031800 <ai_array_to_buffer_fmt+0x34>
 80317e6:	dd0f      	ble.n	8031808 <ai_array_to_buffer_fmt+0x3c>
 80317e8:	4a2a      	ldr	r2, [pc, #168]	@ (8031894 <ai_array_to_buffer_fmt+0xc8>)
 80317ea:	4293      	cmp	r3, r2
 80317ec:	d008      	beq.n	8031800 <ai_array_to_buffer_fmt+0x34>
 80317ee:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 80317f2:	4293      	cmp	r3, r2
 80317f4:	d004      	beq.n	8031800 <ai_array_to_buffer_fmt+0x34>
 80317f6:	4a28      	ldr	r2, [pc, #160]	@ (8031898 <ai_array_to_buffer_fmt+0xcc>)
 80317f8:	4293      	cmp	r3, r2
 80317fa:	bf0c      	ite	eq
 80317fc:	4613      	moveq	r3, r2
 80317fe:	2340      	movne	r3, #64	@ 0x40
 8031800:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8031804:	4318      	orrs	r0, r3
 8031806:	4770      	bx	lr
 8031808:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 803180c:	4293      	cmp	r3, r2
 803180e:	d0f7      	beq.n	8031800 <ai_array_to_buffer_fmt+0x34>
 8031810:	dd2c      	ble.n	803186c <ai_array_to_buffer_fmt+0xa0>
 8031812:	4a22      	ldr	r2, [pc, #136]	@ (803189c <ai_array_to_buffer_fmt+0xd0>)
 8031814:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8031818:	4293      	cmp	r3, r2
 803181a:	bf0c      	ite	eq
 803181c:	4613      	moveq	r3, r2
 803181e:	2340      	movne	r3, #64	@ 0x40
 8031820:	4318      	orrs	r0, r3
 8031822:	4770      	bx	lr
 8031824:	4a1e      	ldr	r2, [pc, #120]	@ (80318a0 <ai_array_to_buffer_fmt+0xd4>)
 8031826:	4293      	cmp	r3, r2
 8031828:	d0ea      	beq.n	8031800 <ai_array_to_buffer_fmt+0x34>
 803182a:	dd10      	ble.n	803184e <ai_array_to_buffer_fmt+0x82>
 803182c:	4a1d      	ldr	r2, [pc, #116]	@ (80318a4 <ai_array_to_buffer_fmt+0xd8>)
 803182e:	4293      	cmp	r3, r2
 8031830:	d0e6      	beq.n	8031800 <ai_array_to_buffer_fmt+0x34>
 8031832:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 8031836:	4293      	cmp	r3, r2
 8031838:	d0e2      	beq.n	8031800 <ai_array_to_buffer_fmt+0x34>
 803183a:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 803183e:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8031842:	4293      	cmp	r3, r2
 8031844:	bf0c      	ite	eq
 8031846:	4613      	moveq	r3, r2
 8031848:	2340      	movne	r3, #64	@ 0x40
 803184a:	4318      	orrs	r0, r3
 803184c:	4770      	bx	lr
 803184e:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8031852:	4293      	cmp	r3, r2
 8031854:	d0d4      	beq.n	8031800 <ai_array_to_buffer_fmt+0x34>
 8031856:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 803185a:	4293      	cmp	r3, r2
 803185c:	d0d0      	beq.n	8031800 <ai_array_to_buffer_fmt+0x34>
 803185e:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8031862:	4293      	cmp	r3, r2
 8031864:	bf0c      	ite	eq
 8031866:	4613      	moveq	r3, r2
 8031868:	2340      	movne	r3, #64	@ 0x40
 803186a:	e7c9      	b.n	8031800 <ai_array_to_buffer_fmt+0x34>
 803186c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8031870:	4293      	cmp	r3, r2
 8031872:	d0c5      	beq.n	8031800 <ai_array_to_buffer_fmt+0x34>
 8031874:	3280      	adds	r2, #128	@ 0x80
 8031876:	4293      	cmp	r3, r2
 8031878:	bf0c      	ite	eq
 803187a:	4613      	moveq	r3, r2
 803187c:	2340      	movne	r3, #64	@ 0x40
 803187e:	e7bf      	b.n	8031800 <ai_array_to_buffer_fmt+0x34>
 8031880:	4b09      	ldr	r3, [pc, #36]	@ (80318a8 <ai_array_to_buffer_fmt+0xdc>)
 8031882:	4003      	ands	r3, r0
 8031884:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8031888:	e7ba      	b.n	8031800 <ai_array_to_buffer_fmt+0x34>
 803188a:	bf00      	nop
 803188c:	00821040 	.word	0x00821040
 8031890:	00040840 	.word	0x00040840
 8031894:	00041040 	.word	0x00041040
 8031898:	0004084f 	.word	0x0004084f
 803189c:	00040447 	.word	0x00040447
 80318a0:	00840447 	.word	0x00840447
 80318a4:	0084084f 	.word	0x0084084f
 80318a8:	00803fff 	.word	0x00803fff

080318ac <ai_array_get_byte_size>:
 80318ac:	b321      	cbz	r1, 80318f8 <ai_array_get_byte_size+0x4c>
 80318ae:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80318b2:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 80318b6:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 80318ba:	fb03 f101 	mul.w	r1, r3, r1
 80318be:	b500      	push	{lr}
 80318c0:	f3c0 4e43 	ubfx	lr, r0, #17, #4
 80318c4:	3107      	adds	r1, #7
 80318c6:	11c0      	asrs	r0, r0, #7
 80318c8:	fa42 f20e 	asr.w	r2, r2, lr
 80318cc:	f021 0107 	bic.w	r1, r1, #7
 80318d0:	07d2      	lsls	r2, r2, #31
 80318d2:	fa21 f10c 	lsr.w	r1, r1, ip
 80318d6:	d505      	bpl.n	80318e4 <ai_array_get_byte_size+0x38>
 80318d8:	2300      	movs	r3, #0
 80318da:	3107      	adds	r1, #7
 80318dc:	4419      	add	r1, r3
 80318de:	08c8      	lsrs	r0, r1, #3
 80318e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80318e4:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80318e8:	3107      	adds	r1, #7
 80318ea:	fa40 f00c 	asr.w	r0, r0, ip
 80318ee:	4083      	lsls	r3, r0
 80318f0:	4419      	add	r1, r3
 80318f2:	08c8      	lsrs	r0, r1, #3
 80318f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80318f8:	4608      	mov	r0, r1
 80318fa:	4770      	bx	lr

080318fc <ai_array_get_data_byte_size>:
 80318fc:	b169      	cbz	r1, 803191a <ai_array_get_data_byte_size+0x1e>
 80318fe:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8031902:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8031906:	fb03 f101 	mul.w	r1, r3, r1
 803190a:	1dcb      	adds	r3, r1, #7
 803190c:	f023 0307 	bic.w	r3, r3, #7
 8031910:	fa23 f000 	lsr.w	r0, r3, r0
 8031914:	3007      	adds	r0, #7
 8031916:	08c0      	lsrs	r0, r0, #3
 8031918:	4770      	bx	lr
 803191a:	4608      	mov	r0, r1
 803191c:	4770      	bx	lr
 803191e:	bf00      	nop

08031920 <core_get_broadcasted_shape>:
 8031920:	b470      	push	{r4, r5, r6}
 8031922:	6804      	ldr	r4, [r0, #0]
 8031924:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8031928:	b304      	cbz	r4, 803196c <core_get_broadcasted_shape+0x4c>
 803192a:	4623      	mov	r3, r4
 803192c:	3b01      	subs	r3, #1
 803192e:	429c      	cmp	r4, r3
 8031930:	d917      	bls.n	8031962 <core_get_broadcasted_shape+0x42>
 8031932:	6815      	ldr	r5, [r2, #0]
 8031934:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8031938:	2401      	movs	r4, #1
 803193a:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 803193e:	d202      	bcs.n	8031946 <core_get_broadcasted_shape+0x26>
 8031940:	6854      	ldr	r4, [r2, #4]
 8031942:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8031946:	680e      	ldr	r6, [r1, #0]
 8031948:	2501      	movs	r5, #1
 803194a:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 803194e:	d202      	bcs.n	8031956 <core_get_broadcasted_shape+0x36>
 8031950:	684d      	ldr	r5, [r1, #4]
 8031952:	f855 500c 	ldr.w	r5, [r5, ip]
 8031956:	42ac      	cmp	r4, r5
 8031958:	bf38      	it	cc
 803195a:	462c      	movcc	r4, r5
 803195c:	6845      	ldr	r5, [r0, #4]
 803195e:	f845 400c 	str.w	r4, [r5, ip]
 8031962:	b11b      	cbz	r3, 803196c <core_get_broadcasted_shape+0x4c>
 8031964:	6804      	ldr	r4, [r0, #0]
 8031966:	f3c4 2417 	ubfx	r4, r4, #8, #24
 803196a:	e7df      	b.n	803192c <core_get_broadcasted_shape+0xc>
 803196c:	bc70      	pop	{r4, r5, r6}
 803196e:	4770      	bx	lr

08031970 <core_compute_offsets>:
 8031970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031974:	e9d1 5c00 	ldrd	r5, ip, [r1]
 8031978:	6857      	ldr	r7, [r2, #4]
 803197a:	b085      	sub	sp, #20
 803197c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8031980:	687e      	ldr	r6, [r7, #4]
 8031982:	1ba1      	subs	r1, r4, r6
 8031984:	bf18      	it	ne
 8031986:	2101      	movne	r1, #1
 8031988:	f5b5 6fa0 	cmp.w	r5, #1280	@ 0x500
 803198c:	9103      	str	r1, [sp, #12]
 803198e:	d376      	bcc.n	8031a7e <core_compute_offsets+0x10e>
 8031990:	f8dc 9010 	ldr.w	r9, [ip, #16]
 8031994:	fb09 fe04 	mul.w	lr, r9, r4
 8031998:	6812      	ldr	r2, [r2, #0]
 803199a:	f8d0 b000 	ldr.w	fp, [r0]
 803199e:	f5b2 6fa0 	cmp.w	r2, #1280	@ 0x500
 80319a2:	e9dc 5202 	ldrd	r5, r2, [ip, #8]
 80319a6:	bf2c      	ite	cs
 80319a8:	f8d7 a010 	ldrcs.w	sl, [r7, #16]
 80319ac:	f04f 0a01 	movcc.w	sl, #1
 80319b0:	9201      	str	r2, [sp, #4]
 80319b2:	ebb9 0c0a 	subs.w	ip, r9, sl
 80319b6:	e9d7 8202 	ldrd	r8, r2, [r7, #8]
 80319ba:	bf18      	it	ne
 80319bc:	f04f 0c01 	movne.w	ip, #1
 80319c0:	ebb5 0708 	subs.w	r7, r5, r8
 80319c4:	9202      	str	r2, [sp, #8]
 80319c6:	f3cb 2217 	ubfx	r2, fp, #8, #24
 80319ca:	bf18      	it	ne
 80319cc:	2701      	movne	r7, #1
 80319ce:	f5bb 7f00 	cmp.w	fp, #512	@ 0x200
 80319d2:	d321      	bcc.n	8031a18 <core_compute_offsets+0xa8>
 80319d4:	42b4      	cmp	r4, r6
 80319d6:	bf0c      	ite	eq
 80319d8:	461a      	moveq	r2, r3
 80319da:	2200      	movne	r2, #0
 80319dc:	6841      	ldr	r1, [r0, #4]
 80319de:	604a      	str	r2, [r1, #4]
 80319e0:	f8d0 b000 	ldr.w	fp, [r0]
 80319e4:	f5bb 6fa0 	cmp.w	fp, #1280	@ 0x500
 80319e8:	f3cb 2217 	ubfx	r2, fp, #8, #24
 80319ec:	d314      	bcc.n	8031a18 <core_compute_offsets+0xa8>
 80319ee:	9a03      	ldr	r2, [sp, #12]
 80319f0:	45d1      	cmp	r9, sl
 80319f2:	bf14      	ite	ne
 80319f4:	2200      	movne	r2, #0
 80319f6:	f002 0201 	andeq.w	r2, r2, #1
 80319fa:	42b4      	cmp	r4, r6
 80319fc:	bf14      	ite	ne
 80319fe:	f04f 0900 	movne.w	r9, #0
 8031a02:	f00c 0901 	andeq.w	r9, ip, #1
 8031a06:	6846      	ldr	r6, [r0, #4]
 8031a08:	fb04 2219 	mls	r2, r4, r9, r2
 8031a0c:	fb03 f202 	mul.w	r2, r3, r2
 8031a10:	6132      	str	r2, [r6, #16]
 8031a12:	6802      	ldr	r2, [r0, #0]
 8031a14:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8031a18:	2a02      	cmp	r2, #2
 8031a1a:	fb0e f607 	mul.w	r6, lr, r7
 8031a1e:	d911      	bls.n	8031a44 <core_compute_offsets+0xd4>
 8031a20:	9a03      	ldr	r2, [sp, #12]
 8031a22:	4545      	cmp	r5, r8
 8031a24:	bf14      	ite	ne
 8031a26:	2200      	movne	r2, #0
 8031a28:	f002 0201 	andeq.w	r2, r2, #1
 8031a2c:	ea0c 0202 	and.w	r2, ip, r2
 8031a30:	1b92      	subs	r2, r2, r6
 8031a32:	fb04 240c 	mla	r4, r4, ip, r2
 8031a36:	6842      	ldr	r2, [r0, #4]
 8031a38:	fb03 f404 	mul.w	r4, r3, r4
 8031a3c:	6094      	str	r4, [r2, #8]
 8031a3e:	6802      	ldr	r2, [r0, #0]
 8031a40:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8031a44:	e9dd 4101 	ldrd	r4, r1, [sp, #4]
 8031a48:	428c      	cmp	r4, r1
 8031a4a:	d116      	bne.n	8031a7a <core_compute_offsets+0x10a>
 8031a4c:	b1af      	cbz	r7, 8031a7a <core_compute_offsets+0x10a>
 8031a4e:	9903      	ldr	r1, [sp, #12]
 8031a50:	ea01 010c 	and.w	r1, r1, ip
 8031a54:	2a03      	cmp	r2, #3
 8031a56:	d90d      	bls.n	8031a74 <core_compute_offsets+0x104>
 8031a58:	fb0e f505 	mul.w	r5, lr, r5
 8031a5c:	e9dd 2401 	ldrd	r2, r4, [sp, #4]
 8031a60:	1b12      	subs	r2, r2, r4
 8031a62:	bf18      	it	ne
 8031a64:	2201      	movne	r2, #1
 8031a66:	fb02 1115 	mls	r1, r2, r5, r1
 8031a6a:	6842      	ldr	r2, [r0, #4]
 8031a6c:	4431      	add	r1, r6
 8031a6e:	fb03 f101 	mul.w	r1, r3, r1
 8031a72:	60d1      	str	r1, [r2, #12]
 8031a74:	b005      	add	sp, #20
 8031a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031a7a:	2100      	movs	r1, #0
 8031a7c:	e7ea      	b.n	8031a54 <core_compute_offsets+0xe4>
 8031a7e:	46a6      	mov	lr, r4
 8031a80:	f04f 0901 	mov.w	r9, #1
 8031a84:	e788      	b.n	8031998 <core_compute_offsets+0x28>
 8031a86:	bf00      	nop

08031a88 <ai_math_elementwise_mul_int8>:
 8031a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031a8c:	b08d      	sub	sp, #52	@ 0x34
 8031a8e:	ee20 0a80 	vmul.f32	s0, s1, s0
 8031a92:	460c      	mov	r4, r1
 8031a94:	9307      	str	r3, [sp, #28]
 8031a96:	2300      	movs	r3, #0
 8031a98:	9004      	str	r0, [sp, #16]
 8031a9a:	ee80 0a01 	vdiv.f32	s0, s0, s2
 8031a9e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8031aa2:	f10d 002e 	add.w	r0, sp, #46	@ 0x2e
 8031aa6:	f99d 3058 	ldrsb.w	r3, [sp, #88]	@ 0x58
 8031aaa:	f99d 5060 	ldrsb.w	r5, [sp, #96]	@ 0x60
 8031aae:	9308      	str	r3, [sp, #32]
 8031ab0:	f99d 305c 	ldrsb.w	r3, [sp, #92]	@ 0x5c
 8031ab4:	9205      	str	r2, [sp, #20]
 8031ab6:	9306      	str	r3, [sp, #24]
 8031ab8:	f7f5 fc78 	bl	80273ac <align_factor>
 8031abc:	f9bd e02e 	ldrsh.w	lr, [sp, #46]	@ 0x2e
 8031ac0:	f10e 36ff 	add.w	r6, lr, #4294967295
 8031ac4:	b2b3      	uxth	r3, r6
 8031ac6:	2b14      	cmp	r3, #20
 8031ac8:	f200 811f 	bhi.w	8031d0a <ai_math_elementwise_mul_int8+0x282>
 8031acc:	2301      	movs	r3, #1
 8031ace:	fa05 fc0e 	lsl.w	ip, r5, lr
 8031ad2:	fa03 f30e 	lsl.w	r3, r3, lr
 8031ad6:	eb0c 0c53 	add.w	ip, ip, r3, lsr #1
 8031ada:	9a08      	ldr	r2, [sp, #32]
 8031adc:	b293      	uxth	r3, r2
 8031ade:	ea43 4b02 	orr.w	fp, r3, r2, lsl #16
 8031ae2:	9b06      	ldr	r3, [sp, #24]
 8031ae4:	b29d      	uxth	r5, r3
 8031ae6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8031aea:	9b07      	ldr	r3, [sp, #28]
 8031aec:	089b      	lsrs	r3, r3, #2
 8031aee:	f000 8191 	beq.w	8031e14 <ai_math_elementwise_mul_int8+0x38c>
 8031af2:	f1ae 0202 	sub.w	r2, lr, #2
 8031af6:	2701      	movs	r7, #1
 8031af8:	4097      	lsls	r7, r2
 8031afa:	9a04      	ldr	r2, [sp, #16]
 8031afc:	1c91      	adds	r1, r2, #2
 8031afe:	009a      	lsls	r2, r3, #2
 8031b00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8031b04:	46ba      	mov	sl, r7
 8031b06:	9209      	str	r2, [sp, #36]	@ 0x24
 8031b08:	9302      	str	r3, [sp, #8]
 8031b0a:	9b05      	ldr	r3, [sp, #20]
 8031b0c:	9300      	str	r3, [sp, #0]
 8031b0e:	f1ce 0301 	rsb	r3, lr, #1
 8031b12:	9303      	str	r3, [sp, #12]
 8031b14:	e02d      	b.n	8031b72 <ai_math_elementwise_mul_int8+0xea>
 8031b16:	fb58 a800 	smmla	r8, r8, r0, sl
 8031b1a:	fa48 f806 	asr.w	r8, r8, r6
 8031b1e:	fb53 a300 	smmla	r3, r3, r0, sl
 8031b22:	44e0      	add	r8, ip
 8031b24:	fb57 a700 	smmla	r7, r7, r0, sl
 8031b28:	fb52 a200 	smmla	r2, r2, r0, sl
 8031b2c:	f308 0807 	ssat	r8, #8, r8
 8031b30:	4137      	asrs	r7, r6
 8031b32:	fa4f f888 	sxtb.w	r8, r8
 8031b36:	4467      	add	r7, ip
 8031b38:	f307 0707 	ssat	r7, #8, r7
 8031b3c:	4133      	asrs	r3, r6
 8031b3e:	b27f      	sxtb	r7, r7
 8031b40:	4463      	add	r3, ip
 8031b42:	f303 0307 	ssat	r3, #8, r3
 8031b46:	4132      	asrs	r2, r6
 8031b48:	b25b      	sxtb	r3, r3
 8031b4a:	4462      	add	r2, ip
 8031b4c:	f302 0207 	ssat	r2, #8, r2
 8031b50:	b252      	sxtb	r2, r2
 8031b52:	f04f 0900 	mov.w	r9, #0
 8031b56:	3104      	adds	r1, #4
 8031b58:	f368 0907 	bfi	r9, r8, #0, #8
 8031b5c:	f367 290f 	bfi	r9, r7, #8, #8
 8031b60:	f363 4917 	bfi	r9, r3, #16, #8
 8031b64:	9b02      	ldr	r3, [sp, #8]
 8031b66:	f362 691f 	bfi	r9, r2, #24, #8
 8031b6a:	429c      	cmp	r4, r3
 8031b6c:	f841 9c06 	str.w	r9, [r1, #-6]
 8031b70:	d078      	beq.n	8031c64 <ai_math_elementwise_mul_int8+0x1dc>
 8031b72:	9a00      	ldr	r2, [sp, #0]
 8031b74:	f854 9b04 	ldr.w	r9, [r4], #4
 8031b78:	f852 3b04 	ldr.w	r3, [r2], #4
 8031b7c:	fa2f f789 	sxtb16	r7, r9
 8031b80:	9200      	str	r2, [sp, #0]
 8031b82:	ea4f 2939 	mov.w	r9, r9, ror #8
 8031b86:	ea4f 2233 	mov.w	r2, r3, ror #8
 8031b8a:	fa2f f989 	sxtb16	r9, r9
 8031b8e:	fa2f f282 	sxtb16	r2, r2
 8031b92:	fa2f f383 	sxtb16	r3, r3
 8031b96:	fad9 f90b 	ssub16	r9, r9, fp
 8031b9a:	fad7 f70b 	ssub16	r7, r7, fp
 8031b9e:	fad2 f205 	ssub16	r2, r2, r5
 8031ba2:	fad3 f305 	ssub16	r3, r3, r5
 8031ba6:	fb17 f803 	smulbb	r8, r7, r3
 8031baa:	f1be 0f15 	cmp.w	lr, #21
 8031bae:	fb13 f337 	smultt	r3, r3, r7
 8031bb2:	fb19 f702 	smulbb	r7, r9, r2
 8031bb6:	fb12 f239 	smultt	r2, r2, r9
 8031bba:	9201      	str	r2, [sp, #4]
 8031bbc:	dcab      	bgt.n	8031b16 <ai_math_elementwise_mul_int8+0x8e>
 8031bbe:	9a03      	ldr	r2, [sp, #12]
 8031bc0:	f1be 0f00 	cmp.w	lr, #0
 8031bc4:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8031bc8:	fa08 f202 	lsl.w	r2, r8, r2
 8031bcc:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8031bd0:	dd20      	ble.n	8031c14 <ai_math_elementwise_mul_int8+0x18c>
 8031bd2:	9b01      	ldr	r3, [sp, #4]
 8031bd4:	007f      	lsls	r7, r7, #1
 8031bd6:	fb58 c800 	smmla	r8, r8, r0, ip
 8031bda:	005a      	lsls	r2, r3, #1
 8031bdc:	fa48 f80e 	asr.w	r8, r8, lr
 8031be0:	fb59 c300 	smmla	r3, r9, r0, ip
 8031be4:	fb57 c700 	smmla	r7, r7, r0, ip
 8031be8:	fb52 c200 	smmla	r2, r2, r0, ip
 8031bec:	f308 0807 	ssat	r8, #8, r8
 8031bf0:	fa4f f888 	sxtb.w	r8, r8
 8031bf4:	fa47 f70e 	asr.w	r7, r7, lr
 8031bf8:	f307 0707 	ssat	r7, #8, r7
 8031bfc:	b27f      	sxtb	r7, r7
 8031bfe:	fa43 f30e 	asr.w	r3, r3, lr
 8031c02:	f303 0307 	ssat	r3, #8, r3
 8031c06:	b25b      	sxtb	r3, r3
 8031c08:	fa42 f20e 	asr.w	r2, r2, lr
 8031c0c:	f302 0207 	ssat	r2, #8, r2
 8031c10:	b252      	sxtb	r2, r2
 8031c12:	e79e      	b.n	8031b52 <ai_math_elementwise_mul_int8+0xca>
 8031c14:	f302 081f 	ssat	r8, #32, r2
 8031c18:	fb58 f810 	smmulr	r8, r8, r0
 8031c1c:	9a03      	ldr	r2, [sp, #12]
 8031c1e:	4093      	lsls	r3, r2
 8031c20:	f303 031f 	ssat	r3, #32, r3
 8031c24:	fb53 f910 	smmulr	r9, r3, r0
 8031c28:	4097      	lsls	r7, r2
 8031c2a:	f307 071f 	ssat	r7, #32, r7
 8031c2e:	fb57 f710 	smmulr	r7, r7, r0
 8031c32:	9b01      	ldr	r3, [sp, #4]
 8031c34:	4093      	lsls	r3, r2
 8031c36:	f303 021f 	ssat	r2, #32, r3
 8031c3a:	fb52 f210 	smmulr	r2, r2, r0
 8031c3e:	44e0      	add	r8, ip
 8031c40:	f308 0807 	ssat	r8, #8, r8
 8031c44:	fa4f f888 	sxtb.w	r8, r8
 8031c48:	4467      	add	r7, ip
 8031c4a:	f307 0707 	ssat	r7, #8, r7
 8031c4e:	b27f      	sxtb	r7, r7
 8031c50:	eb09 030c 	add.w	r3, r9, ip
 8031c54:	f303 0307 	ssat	r3, #8, r3
 8031c58:	b25b      	sxtb	r3, r3
 8031c5a:	4462      	add	r2, ip
 8031c5c:	f302 0207 	ssat	r2, #8, r2
 8031c60:	b252      	sxtb	r2, r2
 8031c62:	e776      	b.n	8031b52 <ai_math_elementwise_mul_int8+0xca>
 8031c64:	9b04      	ldr	r3, [sp, #16]
 8031c66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8031c68:	4413      	add	r3, r2
 8031c6a:	9304      	str	r3, [sp, #16]
 8031c6c:	9b05      	ldr	r3, [sp, #20]
 8031c6e:	4413      	add	r3, r2
 8031c70:	9305      	str	r3, [sp, #20]
 8031c72:	9b07      	ldr	r3, [sp, #28]
 8031c74:	f013 0203 	ands.w	r2, r3, #3
 8031c78:	d044      	beq.n	8031d04 <ai_math_elementwise_mul_int8+0x27c>
 8031c7a:	f1ae 0302 	sub.w	r3, lr, #2
 8031c7e:	2101      	movs	r1, #1
 8031c80:	f1be 0f15 	cmp.w	lr, #21
 8031c84:	fa01 f803 	lsl.w	r8, r1, r3
 8031c88:	dd41      	ble.n	8031d0e <ai_math_elementwise_mul_int8+0x286>
 8031c8a:	9d02      	ldr	r5, [sp, #8]
 8031c8c:	9f08      	ldr	r7, [sp, #32]
 8031c8e:	f995 3000 	ldrsb.w	r3, [r5]
 8031c92:	9c05      	ldr	r4, [sp, #20]
 8031c94:	eba3 0e07 	sub.w	lr, r3, r7
 8031c98:	9b06      	ldr	r3, [sp, #24]
 8031c9a:	f994 4000 	ldrsb.w	r4, [r4]
 8031c9e:	1ae4      	subs	r4, r4, r3
 8031ca0:	fb04 f30e 	mul.w	r3, r4, lr
 8031ca4:	fb53 8300 	smmla	r3, r3, r0, r8
 8031ca8:	4133      	asrs	r3, r6
 8031caa:	4463      	add	r3, ip
 8031cac:	f303 0307 	ssat	r3, #8, r3
 8031cb0:	9904      	ldr	r1, [sp, #16]
 8031cb2:	3a01      	subs	r2, #1
 8031cb4:	700b      	strb	r3, [r1, #0]
 8031cb6:	d025      	beq.n	8031d04 <ai_math_elementwise_mul_int8+0x27c>
 8031cb8:	9c05      	ldr	r4, [sp, #20]
 8031cba:	f995 3001 	ldrsb.w	r3, [r5, #1]
 8031cbe:	f994 4001 	ldrsb.w	r4, [r4, #1]
 8031cc2:	9906      	ldr	r1, [sp, #24]
 8031cc4:	1bdb      	subs	r3, r3, r7
 8031cc6:	1a64      	subs	r4, r4, r1
 8031cc8:	fb04 f303 	mul.w	r3, r4, r3
 8031ccc:	fb53 8300 	smmla	r3, r3, r0, r8
 8031cd0:	4133      	asrs	r3, r6
 8031cd2:	4463      	add	r3, ip
 8031cd4:	f303 0307 	ssat	r3, #8, r3
 8031cd8:	9904      	ldr	r1, [sp, #16]
 8031cda:	2a01      	cmp	r2, #1
 8031cdc:	704b      	strb	r3, [r1, #1]
 8031cde:	d011      	beq.n	8031d04 <ai_math_elementwise_mul_int8+0x27c>
 8031ce0:	9c05      	ldr	r4, [sp, #20]
 8031ce2:	f995 3002 	ldrsb.w	r3, [r5, #2]
 8031ce6:	f994 2002 	ldrsb.w	r2, [r4, #2]
 8031cea:	9906      	ldr	r1, [sp, #24]
 8031cec:	1bdb      	subs	r3, r3, r7
 8031cee:	1a52      	subs	r2, r2, r1
 8031cf0:	fb02 f303 	mul.w	r3, r2, r3
 8031cf4:	fb53 8300 	smmla	r3, r3, r0, r8
 8031cf8:	4133      	asrs	r3, r6
 8031cfa:	4463      	add	r3, ip
 8031cfc:	f303 0307 	ssat	r3, #8, r3
 8031d00:	9904      	ldr	r1, [sp, #16]
 8031d02:	708b      	strb	r3, [r1, #2]
 8031d04:	b00d      	add	sp, #52	@ 0x34
 8031d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031d0a:	46ac      	mov	ip, r5
 8031d0c:	e6e5      	b.n	8031ada <ai_math_elementwise_mul_int8+0x52>
 8031d0e:	f1be 0f00 	cmp.w	lr, #0
 8031d12:	dd3c      	ble.n	8031d8e <ai_math_elementwise_mul_int8+0x306>
 8031d14:	9c02      	ldr	r4, [sp, #8]
 8031d16:	9e05      	ldr	r6, [sp, #20]
 8031d18:	f994 3000 	ldrsb.w	r3, [r4]
 8031d1c:	9d08      	ldr	r5, [sp, #32]
 8031d1e:	f996 1000 	ldrsb.w	r1, [r6]
 8031d22:	9f06      	ldr	r7, [sp, #24]
 8031d24:	1b5b      	subs	r3, r3, r5
 8031d26:	1bc9      	subs	r1, r1, r7
 8031d28:	fb01 f303 	mul.w	r3, r1, r3
 8031d2c:	005b      	lsls	r3, r3, #1
 8031d2e:	fb53 c300 	smmla	r3, r3, r0, ip
 8031d32:	fa43 f30e 	asr.w	r3, r3, lr
 8031d36:	f303 0307 	ssat	r3, #8, r3
 8031d3a:	9904      	ldr	r1, [sp, #16]
 8031d3c:	3a01      	subs	r2, #1
 8031d3e:	700b      	strb	r3, [r1, #0]
 8031d40:	d0e0      	beq.n	8031d04 <ai_math_elementwise_mul_int8+0x27c>
 8031d42:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8031d46:	f996 1001 	ldrsb.w	r1, [r6, #1]
 8031d4a:	1b5b      	subs	r3, r3, r5
 8031d4c:	1bc9      	subs	r1, r1, r7
 8031d4e:	fb01 f303 	mul.w	r3, r1, r3
 8031d52:	005b      	lsls	r3, r3, #1
 8031d54:	fb53 c300 	smmla	r3, r3, r0, ip
 8031d58:	fa43 f30e 	asr.w	r3, r3, lr
 8031d5c:	f303 0307 	ssat	r3, #8, r3
 8031d60:	9904      	ldr	r1, [sp, #16]
 8031d62:	2a01      	cmp	r2, #1
 8031d64:	704b      	strb	r3, [r1, #1]
 8031d66:	d0cd      	beq.n	8031d04 <ai_math_elementwise_mul_int8+0x27c>
 8031d68:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8031d6c:	f996 2002 	ldrsb.w	r2, [r6, #2]
 8031d70:	1b5b      	subs	r3, r3, r5
 8031d72:	1bd2      	subs	r2, r2, r7
 8031d74:	fb02 f303 	mul.w	r3, r2, r3
 8031d78:	005b      	lsls	r3, r3, #1
 8031d7a:	fb53 c300 	smmla	r3, r3, r0, ip
 8031d7e:	fa43 f30e 	asr.w	r3, r3, lr
 8031d82:	f303 0307 	ssat	r3, #8, r3
 8031d86:	708b      	strb	r3, [r1, #2]
 8031d88:	b00d      	add	sp, #52	@ 0x34
 8031d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031d8e:	9c02      	ldr	r4, [sp, #8]
 8031d90:	eba1 0e0e 	sub.w	lr, r1, lr
 8031d94:	9e05      	ldr	r6, [sp, #20]
 8031d96:	f994 3000 	ldrsb.w	r3, [r4]
 8031d9a:	9d08      	ldr	r5, [sp, #32]
 8031d9c:	f996 1000 	ldrsb.w	r1, [r6]
 8031da0:	9f06      	ldr	r7, [sp, #24]
 8031da2:	1b5b      	subs	r3, r3, r5
 8031da4:	1bc9      	subs	r1, r1, r7
 8031da6:	fb01 f303 	mul.w	r3, r1, r3
 8031daa:	fa03 f30e 	lsl.w	r3, r3, lr
 8031dae:	f303 031f 	ssat	r3, #32, r3
 8031db2:	fb53 f310 	smmulr	r3, r3, r0
 8031db6:	4463      	add	r3, ip
 8031db8:	f303 0307 	ssat	r3, #8, r3
 8031dbc:	9904      	ldr	r1, [sp, #16]
 8031dbe:	3a01      	subs	r2, #1
 8031dc0:	700b      	strb	r3, [r1, #0]
 8031dc2:	d09f      	beq.n	8031d04 <ai_math_elementwise_mul_int8+0x27c>
 8031dc4:	f996 3001 	ldrsb.w	r3, [r6, #1]
 8031dc8:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8031dcc:	1bdb      	subs	r3, r3, r7
 8031dce:	1b49      	subs	r1, r1, r5
 8031dd0:	fb01 f303 	mul.w	r3, r1, r3
 8031dd4:	fa03 f30e 	lsl.w	r3, r3, lr
 8031dd8:	f303 031f 	ssat	r3, #32, r3
 8031ddc:	fb53 f310 	smmulr	r3, r3, r0
 8031de0:	4463      	add	r3, ip
 8031de2:	f303 0307 	ssat	r3, #8, r3
 8031de6:	9904      	ldr	r1, [sp, #16]
 8031de8:	2a01      	cmp	r2, #1
 8031dea:	704b      	strb	r3, [r1, #1]
 8031dec:	d08a      	beq.n	8031d04 <ai_math_elementwise_mul_int8+0x27c>
 8031dee:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8031df2:	f996 2002 	ldrsb.w	r2, [r6, #2]
 8031df6:	1b5b      	subs	r3, r3, r5
 8031df8:	1bd2      	subs	r2, r2, r7
 8031dfa:	fb02 f303 	mul.w	r3, r2, r3
 8031dfe:	fa03 f30e 	lsl.w	r3, r3, lr
 8031e02:	f303 031f 	ssat	r3, #32, r3
 8031e06:	fb53 f310 	smmulr	r3, r3, r0
 8031e0a:	4463      	add	r3, ip
 8031e0c:	f303 0307 	ssat	r3, #8, r3
 8031e10:	708b      	strb	r3, [r1, #2]
 8031e12:	e777      	b.n	8031d04 <ai_math_elementwise_mul_int8+0x27c>
 8031e14:	9402      	str	r4, [sp, #8]
 8031e16:	e72c      	b.n	8031c72 <ai_math_elementwise_mul_int8+0x1ea>

08031e18 <ai_math_elementwise_sum_int8>:
 8031e18:	eec0 7a81 	vdiv.f32	s15, s1, s2
 8031e1c:	4684      	mov	ip, r0
 8031e1e:	eec0 6a01 	vdiv.f32	s13, s0, s2
 8031e22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031e26:	b085      	sub	sp, #20
 8031e28:	461d      	mov	r5, r3
 8031e2a:	9001      	str	r0, [sp, #4]
 8031e2c:	f99d 003c 	ldrsb.w	r0, [sp, #60]	@ 0x3c
 8031e30:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8031e34:	9302      	str	r3, [sp, #8]
 8031e36:	ee17 3a90 	vmov	r3, s15
 8031e3a:	ee07 0a10 	vmov	s14, r0
 8031e3e:	f99d 0038 	ldrsb.w	r0, [sp, #56]	@ 0x38
 8031e42:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8031e46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8031e4a:	4240      	negs	r0, r0
 8031e4c:	f1c3 037e 	rsb	r3, r3, #126	@ 0x7e
 8031e50:	ee76 5aa6 	vadd.f32	s11, s13, s13
 8031e54:	ee27 7ac7 	vnmul.f32	s14, s15, s14
 8031e58:	ee07 0a90 	vmov	s15, r0
 8031e5c:	ee16 0a90 	vmov	r0, s13
 8031e60:	ea03 73e3 	and.w	r3, r3, r3, asr #31
 8031e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8031e68:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 8031e6c:	f1c0 007e 	rsb	r0, r0, #126	@ 0x7e
 8031e70:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8031e74:	4283      	cmp	r3, r0
 8031e76:	bfa8      	it	ge
 8031e78:	4603      	movge	r3, r0
 8031e7a:	f99d 0040 	ldrsb.w	r0, [sp, #64]	@ 0x40
 8031e7e:	ea5f 0b95 	movs.w	fp, r5, lsr #2
 8031e82:	ee07 0a90 	vmov	s15, r0
 8031e86:	f103 041d 	add.w	r4, r3, #29
 8031e8a:	f04f 0001 	mov.w	r0, #1
 8031e8e:	f103 0916 	add.w	r9, r3, #22
 8031e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8031e96:	f103 0315 	add.w	r3, r3, #21
 8031e9a:	fa00 f404 	lsl.w	r4, r0, r4
 8031e9e:	fa00 f303 	lsl.w	r3, r0, r3
 8031ea2:	fa00 f009 	lsl.w	r0, r0, r9
 8031ea6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8031eaa:	ee07 4a10 	vmov	s14, r4
 8031eae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8031eb2:	ee07 0a10 	vmov	s14, r0
 8031eb6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8031eba:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8031ebe:	ee66 6a26 	vmul.f32	s13, s12, s13
 8031ec2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8031ec6:	eebd 7ae5 	vcvt.s32.f32	s14, s11
 8031eca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8031ece:	ee17 8a10 	vmov	r8, s14
 8031ed2:	eebd 7ae6 	vcvt.s32.f32	s14, s13
 8031ed6:	ee17 6a90 	vmov	r6, s15
 8031eda:	ee17 7a10 	vmov	r7, s14
 8031ede:	441e      	add	r6, r3
 8031ee0:	f106 36ff 	add.w	r6, r6, #4294967295
 8031ee4:	f000 8081 	beq.w	8031fea <ai_math_elementwise_sum_int8+0x1d2>
 8031ee8:	4663      	mov	r3, ip
 8031eea:	4692      	mov	sl, r2
 8031eec:	1d1d      	adds	r5, r3, #4
 8031eee:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8031ef2:	eb01 0b8b 	add.w	fp, r1, fp, lsl #2
 8031ef6:	9303      	str	r3, [sp, #12]
 8031ef8:	f851 4b04 	ldr.w	r4, [r1], #4
 8031efc:	f85a 3b04 	ldr.w	r3, [sl], #4
 8031f00:	ea4f 2e04 	mov.w	lr, r4, lsl #8
 8031f04:	f00e 2eff 	and.w	lr, lr, #4278255360	@ 0xff00ff00
 8031f08:	fb38 6c0e 	smlawb	ip, r8, lr, r6
 8031f0c:	0218      	lsls	r0, r3, #8
 8031f0e:	f000 20ff 	and.w	r0, r0, #4278255360	@ 0xff00ff00
 8031f12:	fb37 cc00 	smlawb	ip, r7, r0, ip
 8031f16:	fa4c fc09 	asr.w	ip, ip, r9
 8031f1a:	f30c 0c07 	ssat	ip, #8, ip
 8031f1e:	f004 24ff 	and.w	r4, r4, #4278255360	@ 0xff00ff00
 8031f22:	f805 cc04 	strb.w	ip, [r5, #-4]
 8031f26:	fb38 6c04 	smlawb	ip, r8, r4, r6
 8031f2a:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8031f2e:	fb37 cc03 	smlawb	ip, r7, r3, ip
 8031f32:	fa4c fc09 	asr.w	ip, ip, r9
 8031f36:	f30c 0c07 	ssat	ip, #8, ip
 8031f3a:	f805 cc03 	strb.w	ip, [r5, #-3]
 8031f3e:	fb38 6e1e 	smlawt	lr, r8, lr, r6
 8031f42:	fb37 e010 	smlawt	r0, r7, r0, lr
 8031f46:	fa40 f009 	asr.w	r0, r0, r9
 8031f4a:	f300 0007 	ssat	r0, #8, r0
 8031f4e:	f805 0c02 	strb.w	r0, [r5, #-2]
 8031f52:	fb38 6414 	smlawt	r4, r8, r4, r6
 8031f56:	fb37 4313 	smlawt	r3, r7, r3, r4
 8031f5a:	fa43 f309 	asr.w	r3, r3, r9
 8031f5e:	f303 0307 	ssat	r3, #8, r3
 8031f62:	4559      	cmp	r1, fp
 8031f64:	f805 3c01 	strb.w	r3, [r5, #-1]
 8031f68:	f105 0504 	add.w	r5, r5, #4
 8031f6c:	d1c4      	bne.n	8031ef8 <ai_math_elementwise_sum_int8+0xe0>
 8031f6e:	9b01      	ldr	r3, [sp, #4]
 8031f70:	9903      	ldr	r1, [sp, #12]
 8031f72:	440b      	add	r3, r1
 8031f74:	440a      	add	r2, r1
 8031f76:	9301      	str	r3, [sp, #4]
 8031f78:	9b02      	ldr	r3, [sp, #8]
 8031f7a:	f013 0003 	ands.w	r0, r3, #3
 8031f7e:	d031      	beq.n	8031fe4 <ai_math_elementwise_sum_int8+0x1cc>
 8031f80:	f99b 1000 	ldrsb.w	r1, [fp]
 8031f84:	0209      	lsls	r1, r1, #8
 8031f86:	fb38 6101 	smlawb	r1, r8, r1, r6
 8031f8a:	f992 3000 	ldrsb.w	r3, [r2]
 8031f8e:	021b      	lsls	r3, r3, #8
 8031f90:	fb37 1303 	smlawb	r3, r7, r3, r1
 8031f94:	fa43 f309 	asr.w	r3, r3, r9
 8031f98:	f303 0307 	ssat	r3, #8, r3
 8031f9c:	9c01      	ldr	r4, [sp, #4]
 8031f9e:	3801      	subs	r0, #1
 8031fa0:	7023      	strb	r3, [r4, #0]
 8031fa2:	d01f      	beq.n	8031fe4 <ai_math_elementwise_sum_int8+0x1cc>
 8031fa4:	f99b 1001 	ldrsb.w	r1, [fp, #1]
 8031fa8:	0209      	lsls	r1, r1, #8
 8031faa:	fb38 6101 	smlawb	r1, r8, r1, r6
 8031fae:	f992 3001 	ldrsb.w	r3, [r2, #1]
 8031fb2:	021b      	lsls	r3, r3, #8
 8031fb4:	fb37 1303 	smlawb	r3, r7, r3, r1
 8031fb8:	fa43 f309 	asr.w	r3, r3, r9
 8031fbc:	f303 0307 	ssat	r3, #8, r3
 8031fc0:	2801      	cmp	r0, #1
 8031fc2:	7063      	strb	r3, [r4, #1]
 8031fc4:	d00e      	beq.n	8031fe4 <ai_math_elementwise_sum_int8+0x1cc>
 8031fc6:	f99b 3002 	ldrsb.w	r3, [fp, #2]
 8031fca:	021b      	lsls	r3, r3, #8
 8031fcc:	fb38 6803 	smlawb	r8, r8, r3, r6
 8031fd0:	f992 3002 	ldrsb.w	r3, [r2, #2]
 8031fd4:	021b      	lsls	r3, r3, #8
 8031fd6:	fb37 8303 	smlawb	r3, r7, r3, r8
 8031fda:	fa43 f309 	asr.w	r3, r3, r9
 8031fde:	f303 0307 	ssat	r3, #8, r3
 8031fe2:	70a3      	strb	r3, [r4, #2]
 8031fe4:	b005      	add	sp, #20
 8031fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031fea:	468b      	mov	fp, r1
 8031fec:	e7c4      	b.n	8031f78 <ai_math_elementwise_sum_int8+0x160>
 8031fee:	bf00      	nop

08031ff0 <bnl_kernel_if32of32>:
 8031ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8031ff4:	9f07      	ldr	r7, [sp, #28]
 8031ff6:	b307      	cbz	r7, 803203a <bnl_kernel_if32of32+0x4a>
 8031ff8:	b1eb      	cbz	r3, 8032036 <bnl_kernel_if32of32+0x46>
 8031ffa:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 8031ffe:	2600      	movs	r6, #0
 8032000:	ea4f 0882 	mov.w	r8, r2, lsl #2
 8032004:	46b4      	mov	ip, r6
 8032006:	4416      	add	r6, r2
 8032008:	4566      	cmp	r6, ip
 803200a:	d911      	bls.n	8032030 <bnl_kernel_if32of32+0x40>
 803200c:	eba5 0008 	sub.w	r0, r5, r8
 8032010:	9c06      	ldr	r4, [sp, #24]
 8032012:	46be      	mov	lr, r7
 8032014:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 8032018:	ecf0 6a01 	vldmia	r0!, {s13}
 803201c:	ecb4 7a01 	vldmia	r4!, {s14}
 8032020:	ecfe 7a01 	vldmia	lr!, {s15}
 8032024:	42a8      	cmp	r0, r5
 8032026:	eee6 7a87 	vfma.f32	s15, s13, s14
 803202a:	ecec 7a01 	vstmia	ip!, {s15}
 803202e:	d1f3      	bne.n	8032018 <bnl_kernel_if32of32+0x28>
 8032030:	42b3      	cmp	r3, r6
 8032032:	4445      	add	r5, r8
 8032034:	d8e6      	bhi.n	8032004 <bnl_kernel_if32of32+0x14>
 8032036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803203a:	2b00      	cmp	r3, #0
 803203c:	d0fb      	beq.n	8032036 <bnl_kernel_if32of32+0x46>
 803203e:	463e      	mov	r6, r7
 8032040:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8032044:	0097      	lsls	r7, r2, #2
 8032046:	4634      	mov	r4, r6
 8032048:	4416      	add	r6, r2
 803204a:	42b4      	cmp	r4, r6
 803204c:	d20d      	bcs.n	803206a <bnl_kernel_if32of32+0x7a>
 803204e:	1bc4      	subs	r4, r0, r7
 8032050:	f8dd c018 	ldr.w	ip, [sp, #24]
 8032054:	460d      	mov	r5, r1
 8032056:	ecf4 7a01 	vldmia	r4!, {s15}
 803205a:	ecbc 7a01 	vldmia	ip!, {s14}
 803205e:	4284      	cmp	r4, r0
 8032060:	ee67 7a87 	vmul.f32	s15, s15, s14
 8032064:	ece5 7a01 	vstmia	r5!, {s15}
 8032068:	d1f5      	bne.n	8032056 <bnl_kernel_if32of32+0x66>
 803206a:	42b3      	cmp	r3, r6
 803206c:	4439      	add	r1, r7
 803206e:	4438      	add	r0, r7
 8032070:	d8e9      	bhi.n	8032046 <bnl_kernel_if32of32+0x56>
 8032072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8032076:	bf00      	nop

08032078 <func_norm_max_array_f32>:
 8032078:	b570      	push	{r4, r5, r6, lr}
 803207a:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 803207e:	42a1      	cmp	r1, r4
 8032080:	d232      	bcs.n	80320e8 <func_norm_max_array_f32+0x70>
 8032082:	0093      	lsls	r3, r2, #2
 8032084:	425d      	negs	r5, r3
 8032086:	461e      	mov	r6, r3
 8032088:	18ca      	adds	r2, r1, r3
 803208a:	ed91 7a00 	vldr	s14, [r1]
 803208e:	428a      	cmp	r2, r1
 8032090:	eeb0 7ac7 	vabs.f32	s14, s14
 8032094:	d909      	bls.n	80320aa <func_norm_max_array_f32+0x32>
 8032096:	468c      	mov	ip, r1
 8032098:	ecfc 7a01 	vldmia	ip!, {s15}
 803209c:	eef0 7ae7 	vabs.f32	s15, s15
 80320a0:	4562      	cmp	r2, ip
 80320a2:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
 80320a6:	d8f7      	bhi.n	8032098 <func_norm_max_array_f32+0x20>
 80320a8:	4431      	add	r1, r6
 80320aa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80320ae:	4429      	add	r1, r5
 80320b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80320b4:	bf14      	ite	ne
 80320b6:	eec0 6a07 	vdivne.f32	s13, s0, s14
 80320ba:	eef0 6a40 	vmoveq.f32	s13, s0
 80320be:	428a      	cmp	r2, r1
 80320c0:	d910      	bls.n	80320e4 <func_norm_max_array_f32+0x6c>
 80320c2:	468c      	mov	ip, r1
 80320c4:	4686      	mov	lr, r0
 80320c6:	ecfc 7a01 	vldmia	ip!, {s15}
 80320ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80320ce:	4562      	cmp	r2, ip
 80320d0:	ecee 7a01 	vstmia	lr!, {s15}
 80320d4:	d8f7      	bhi.n	80320c6 <func_norm_max_array_f32+0x4e>
 80320d6:	3a01      	subs	r2, #1
 80320d8:	1a52      	subs	r2, r2, r1
 80320da:	f022 0203 	bic.w	r2, r2, #3
 80320de:	3204      	adds	r2, #4
 80320e0:	4410      	add	r0, r2
 80320e2:	4411      	add	r1, r2
 80320e4:	428c      	cmp	r4, r1
 80320e6:	d8cf      	bhi.n	8032088 <func_norm_max_array_f32+0x10>
 80320e8:	bd70      	pop	{r4, r5, r6, pc}
 80320ea:	bf00      	nop

080320ec <func_norm_l2_fast_array_f32>:
 80320ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80320f0:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80320f4:	42b1      	cmp	r1, r6
 80320f6:	ed2d 8b02 	vpush	{d8}
 80320fa:	d238      	bcs.n	803216e <func_norm_l2_fast_array_f32+0x82>
 80320fc:	0095      	lsls	r5, r2, #2
 80320fe:	eeb0 8a40 	vmov.f32	s16, s0
 8032102:	4689      	mov	r9, r1
 8032104:	4682      	mov	sl, r0
 8032106:	1e6f      	subs	r7, r5, #1
 8032108:	f1c5 0800 	rsb	r8, r5, #0
 803210c:	08bf      	lsrs	r7, r7, #2
 803210e:	3701      	adds	r7, #1
 8032110:	eb09 0405 	add.w	r4, r9, r5
 8032114:	454c      	cmp	r4, r9
 8032116:	d92e      	bls.n	8032176 <func_norm_l2_fast_array_f32+0x8a>
 8032118:	464b      	mov	r3, r9
 803211a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 803217c <func_norm_l2_fast_array_f32+0x90>
 803211e:	ecf3 7a01 	vldmia	r3!, {s15}
 8032122:	429c      	cmp	r4, r3
 8032124:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8032128:	d8f9      	bhi.n	803211e <func_norm_l2_fast_array_f32+0x32>
 803212a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 803212e:	eb09 0987 	add.w	r9, r9, r7, lsl #2
 8032132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8032136:	d01e      	beq.n	8032176 <func_norm_l2_fast_array_f32+0x8a>
 8032138:	ee88 0a07 	vdiv.f32	s0, s16, s14
 803213c:	44c1      	add	r9, r8
 803213e:	f7fe feb7 	bl	8030eb0 <ai_math_sqrt>
 8032142:	454c      	cmp	r4, r9
 8032144:	d911      	bls.n	803216a <func_norm_l2_fast_array_f32+0x7e>
 8032146:	464b      	mov	r3, r9
 8032148:	4652      	mov	r2, sl
 803214a:	ecf3 7a01 	vldmia	r3!, {s15}
 803214e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8032152:	429c      	cmp	r4, r3
 8032154:	ece2 7a01 	vstmia	r2!, {s15}
 8032158:	d8f7      	bhi.n	803214a <func_norm_l2_fast_array_f32+0x5e>
 803215a:	1e62      	subs	r2, r4, #1
 803215c:	eba2 0209 	sub.w	r2, r2, r9
 8032160:	f022 0203 	bic.w	r2, r2, #3
 8032164:	3204      	adds	r2, #4
 8032166:	4491      	add	r9, r2
 8032168:	4492      	add	sl, r2
 803216a:	454e      	cmp	r6, r9
 803216c:	d8d0      	bhi.n	8032110 <func_norm_l2_fast_array_f32+0x24>
 803216e:	ecbd 8b02 	vpop	{d8}
 8032172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8032176:	eeb0 0a48 	vmov.f32	s0, s16
 803217a:	e7df      	b.n	803213c <func_norm_l2_fast_array_f32+0x50>
 803217c:	00000000 	.word	0x00000000

08032180 <func_norm_l1_fast_array_f32>:
 8032180:	b570      	push	{r4, r5, r6, lr}
 8032182:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8032186:	42a1      	cmp	r1, r4
 8032188:	d22e      	bcs.n	80321e8 <func_norm_l1_fast_array_f32+0x68>
 803218a:	0093      	lsls	r3, r2, #2
 803218c:	425d      	negs	r5, r3
 803218e:	461e      	mov	r6, r3
 8032190:	18ca      	adds	r2, r1, r3
 8032192:	428a      	cmp	r2, r1
 8032194:	d929      	bls.n	80321ea <func_norm_l1_fast_array_f32+0x6a>
 8032196:	468c      	mov	ip, r1
 8032198:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80321f0 <func_norm_l1_fast_array_f32+0x70>
 803219c:	ecfc 7a01 	vldmia	ip!, {s15}
 80321a0:	eef0 7ae7 	vabs.f32	s15, s15
 80321a4:	4562      	cmp	r2, ip
 80321a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80321aa:	d8f7      	bhi.n	803219c <func_norm_l1_fast_array_f32+0x1c>
 80321ac:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80321b0:	4431      	add	r1, r6
 80321b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80321b6:	d018      	beq.n	80321ea <func_norm_l1_fast_array_f32+0x6a>
 80321b8:	eec0 6a07 	vdiv.f32	s13, s0, s14
 80321bc:	4429      	add	r1, r5
 80321be:	428a      	cmp	r2, r1
 80321c0:	d910      	bls.n	80321e4 <func_norm_l1_fast_array_f32+0x64>
 80321c2:	468c      	mov	ip, r1
 80321c4:	4686      	mov	lr, r0
 80321c6:	ecfc 7a01 	vldmia	ip!, {s15}
 80321ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80321ce:	4562      	cmp	r2, ip
 80321d0:	ecee 7a01 	vstmia	lr!, {s15}
 80321d4:	d8f7      	bhi.n	80321c6 <func_norm_l1_fast_array_f32+0x46>
 80321d6:	3a01      	subs	r2, #1
 80321d8:	1a52      	subs	r2, r2, r1
 80321da:	f022 0203 	bic.w	r2, r2, #3
 80321de:	3204      	adds	r2, #4
 80321e0:	4410      	add	r0, r2
 80321e2:	4411      	add	r1, r2
 80321e4:	428c      	cmp	r4, r1
 80321e6:	d8d3      	bhi.n	8032190 <func_norm_l1_fast_array_f32+0x10>
 80321e8:	bd70      	pop	{r4, r5, r6, pc}
 80321ea:	eef0 6a40 	vmov.f32	s13, s0
 80321ee:	e7e5      	b.n	80321bc <func_norm_l1_fast_array_f32+0x3c>
 80321f0:	00000000 	.word	0x00000000

080321f4 <st_sssa8_fullW_prefetch>:
 80321f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80321f8:	b087      	sub	sp, #28
 80321fa:	eb00 0802 	add.w	r8, r0, r2
 80321fe:	9105      	str	r1, [sp, #20]
 8032200:	1049      	asrs	r1, r1, #1
 8032202:	9100      	str	r1, [sp, #0]
 8032204:	f000 80e1 	beq.w	80323ca <st_sssa8_fullW_prefetch+0x1d6>
 8032208:	f1a2 0110 	sub.w	r1, r2, #16
 803220c:	1ed4      	subs	r4, r2, #3
 803220e:	0909      	lsrs	r1, r1, #4
 8032210:	9402      	str	r4, [sp, #8]
 8032212:	1f14      	subs	r4, r2, #4
 8032214:	3101      	adds	r1, #1
 8032216:	9404      	str	r4, [sp, #16]
 8032218:	ea4f 1b01 	mov.w	fp, r1, lsl #4
 803221c:	0189      	lsls	r1, r1, #6
 803221e:	9103      	str	r1, [sp, #12]
 8032220:	2a0f      	cmp	r2, #15
 8032222:	f340 80e4 	ble.w	80323ee <st_sssa8_fullW_prefetch+0x1fa>
 8032226:	eb00 060b 	add.w	r6, r0, fp
 803222a:	4645      	mov	r5, r8
 803222c:	461c      	mov	r4, r3
 803222e:	6801      	ldr	r1, [r0, #0]
 8032230:	3010      	adds	r0, #16
 8032232:	682f      	ldr	r7, [r5, #0]
 8032234:	3440      	adds	r4, #64	@ 0x40
 8032236:	fa2f fc81 	sxtb16	ip, r1
 803223a:	3510      	adds	r5, #16
 803223c:	f844 cc40 	str.w	ip, [r4, #-64]
 8032240:	ea4f 2131 	mov.w	r1, r1, ror #8
 8032244:	42b0      	cmp	r0, r6
 8032246:	fa2f f181 	sxtb16	r1, r1
 803224a:	f844 1c3c 	str.w	r1, [r4, #-60]
 803224e:	ea4f 2137 	mov.w	r1, r7, ror #8
 8032252:	fa2f f787 	sxtb16	r7, r7
 8032256:	fa2f f181 	sxtb16	r1, r1
 803225a:	f844 7c38 	str.w	r7, [r4, #-56]
 803225e:	f844 1c34 	str.w	r1, [r4, #-52]
 8032262:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8032266:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 803226a:	ea4f 2c31 	mov.w	ip, r1, ror #8
 803226e:	fa2f f181 	sxtb16	r1, r1
 8032272:	fa2f fc8c 	sxtb16	ip, ip
 8032276:	f844 1c28 	str.w	r1, [r4, #-40]
 803227a:	f844 cc24 	str.w	ip, [r4, #-36]
 803227e:	ea4f 2c37 	mov.w	ip, r7, ror #8
 8032282:	fa2f f787 	sxtb16	r7, r7
 8032286:	f844 7c30 	str.w	r7, [r4, #-48]
 803228a:	fa2f f78c 	sxtb16	r7, ip
 803228e:	f844 7c2c 	str.w	r7, [r4, #-44]
 8032292:	f850 7c08 	ldr.w	r7, [r0, #-8]
 8032296:	f855 1c08 	ldr.w	r1, [r5, #-8]
 803229a:	ea4f 2c37 	mov.w	ip, r7, ror #8
 803229e:	fa2f f787 	sxtb16	r7, r7
 80322a2:	fa2f fc8c 	sxtb16	ip, ip
 80322a6:	f844 7c20 	str.w	r7, [r4, #-32]
 80322aa:	ea4f 2731 	mov.w	r7, r1, ror #8
 80322ae:	f844 cc1c 	str.w	ip, [r4, #-28]
 80322b2:	fa2f f787 	sxtb16	r7, r7
 80322b6:	fa2f f181 	sxtb16	r1, r1
 80322ba:	f844 7c14 	str.w	r7, [r4, #-20]
 80322be:	f844 1c18 	str.w	r1, [r4, #-24]
 80322c2:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80322c6:	f855 1c04 	ldr.w	r1, [r5, #-4]
 80322ca:	ea4f 2c37 	mov.w	ip, r7, ror #8
 80322ce:	fa2f f787 	sxtb16	r7, r7
 80322d2:	fa2f fc8c 	sxtb16	ip, ip
 80322d6:	f844 7c10 	str.w	r7, [r4, #-16]
 80322da:	ea4f 2731 	mov.w	r7, r1, ror #8
 80322de:	f844 cc0c 	str.w	ip, [r4, #-12]
 80322e2:	fa2f f787 	sxtb16	r7, r7
 80322e6:	fa2f f181 	sxtb16	r1, r1
 80322ea:	f844 7c04 	str.w	r7, [r4, #-4]
 80322ee:	f844 1c08 	str.w	r1, [r4, #-8]
 80322f2:	d19c      	bne.n	803222e <st_sssa8_fullW_prefetch+0x3a>
 80322f4:	9903      	ldr	r1, [sp, #12]
 80322f6:	44d8      	add	r8, fp
 80322f8:	46de      	mov	lr, fp
 80322fa:	440b      	add	r3, r1
 80322fc:	9902      	ldr	r1, [sp, #8]
 80322fe:	4571      	cmp	r1, lr
 8032300:	dd73      	ble.n	80323ea <st_sssa8_fullW_prefetch+0x1f6>
 8032302:	9904      	ldr	r1, [sp, #16]
 8032304:	4647      	mov	r7, r8
 8032306:	461c      	mov	r4, r3
 8032308:	eba1 090e 	sub.w	r9, r1, lr
 803230c:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8032310:	f109 0a01 	add.w	sl, r9, #1
 8032314:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8032318:	9101      	str	r1, [sp, #4]
 803231a:	eb06 018a 	add.w	r1, r6, sl, lsl #2
 803231e:	f856 0b04 	ldr.w	r0, [r6], #4
 8032322:	3410      	adds	r4, #16
 8032324:	f857 5b04 	ldr.w	r5, [r7], #4
 8032328:	fa2f fc80 	sxtb16	ip, r0
 803232c:	428e      	cmp	r6, r1
 803232e:	ea4f 2030 	mov.w	r0, r0, ror #8
 8032332:	fa2f f080 	sxtb16	r0, r0
 8032336:	f844 0c0c 	str.w	r0, [r4, #-12]
 803233a:	ea4f 2035 	mov.w	r0, r5, ror #8
 803233e:	fa2f f585 	sxtb16	r5, r5
 8032342:	f844 cc10 	str.w	ip, [r4, #-16]
 8032346:	f844 5c08 	str.w	r5, [r4, #-8]
 803234a:	fa2f f080 	sxtb16	r0, r0
 803234e:	f844 0c04 	str.w	r0, [r4, #-4]
 8032352:	d1e4      	bne.n	803231e <st_sssa8_fullW_prefetch+0x12a>
 8032354:	9801      	ldr	r0, [sp, #4]
 8032356:	f10e 0e04 	add.w	lr, lr, #4
 803235a:	eb03 130a 	add.w	r3, r3, sl, lsl #4
 803235e:	4480      	add	r8, r0
 8032360:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 8032364:	4572      	cmp	r2, lr
 8032366:	dd29      	ble.n	80323bc <st_sssa8_fullW_prefetch+0x1c8>
 8032368:	f991 0000 	ldrsb.w	r0, [r1]
 803236c:	8018      	strh	r0, [r3, #0]
 803236e:	f998 0000 	ldrsb.w	r0, [r8]
 8032372:	8058      	strh	r0, [r3, #2]
 8032374:	f10e 0001 	add.w	r0, lr, #1
 8032378:	4282      	cmp	r2, r0
 803237a:	dd19      	ble.n	80323b0 <st_sssa8_fullW_prefetch+0x1bc>
 803237c:	f991 0001 	ldrsb.w	r0, [r1, #1]
 8032380:	8098      	strh	r0, [r3, #4]
 8032382:	f998 0001 	ldrsb.w	r0, [r8, #1]
 8032386:	80d8      	strh	r0, [r3, #6]
 8032388:	f10e 0002 	add.w	r0, lr, #2
 803238c:	4282      	cmp	r2, r0
 803238e:	dd0f      	ble.n	80323b0 <st_sssa8_fullW_prefetch+0x1bc>
 8032390:	f991 0002 	ldrsb.w	r0, [r1, #2]
 8032394:	8118      	strh	r0, [r3, #8]
 8032396:	f10e 0003 	add.w	r0, lr, #3
 803239a:	f998 4002 	ldrsb.w	r4, [r8, #2]
 803239e:	4282      	cmp	r2, r0
 80323a0:	815c      	strh	r4, [r3, #10]
 80323a2:	dd05      	ble.n	80323b0 <st_sssa8_fullW_prefetch+0x1bc>
 80323a4:	f991 0003 	ldrsb.w	r0, [r1, #3]
 80323a8:	8198      	strh	r0, [r3, #12]
 80323aa:	f998 0003 	ldrsb.w	r0, [r8, #3]
 80323ae:	81d8      	strh	r0, [r3, #14]
 80323b0:	eba2 0e0e 	sub.w	lr, r2, lr
 80323b4:	4471      	add	r1, lr
 80323b6:	44f0      	add	r8, lr
 80323b8:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 80323bc:	1888      	adds	r0, r1, r2
 80323be:	9900      	ldr	r1, [sp, #0]
 80323c0:	4490      	add	r8, r2
 80323c2:	3901      	subs	r1, #1
 80323c4:	9100      	str	r1, [sp, #0]
 80323c6:	f47f af2b 	bne.w	8032220 <st_sssa8_fullW_prefetch+0x2c>
 80323ca:	9905      	ldr	r1, [sp, #20]
 80323cc:	07c9      	lsls	r1, r1, #31
 80323ce:	d509      	bpl.n	80323e4 <st_sssa8_fullW_prefetch+0x1f0>
 80323d0:	2a00      	cmp	r2, #0
 80323d2:	dd07      	ble.n	80323e4 <st_sssa8_fullW_prefetch+0x1f0>
 80323d4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80323d8:	f910 1b01 	ldrsb.w	r1, [r0], #1
 80323dc:	f823 1b02 	strh.w	r1, [r3], #2
 80323e0:	4293      	cmp	r3, r2
 80323e2:	d1f9      	bne.n	80323d8 <st_sssa8_fullW_prefetch+0x1e4>
 80323e4:	b007      	add	sp, #28
 80323e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80323ea:	4631      	mov	r1, r6
 80323ec:	e7ba      	b.n	8032364 <st_sssa8_fullW_prefetch+0x170>
 80323ee:	4606      	mov	r6, r0
 80323f0:	f04f 0e00 	mov.w	lr, #0
 80323f4:	e782      	b.n	80322fc <st_sssa8_fullW_prefetch+0x108>
 80323f6:	bf00      	nop

080323f8 <st_sssa8_nn_mat_mult_nt_t>:
 80323f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80323fc:	b0ab      	sub	sp, #172	@ 0xac
 80323fe:	469c      	mov	ip, r3
 8032400:	901c      	str	r0, [sp, #112]	@ 0x70
 8032402:	f9bd 50d4 	ldrsh.w	r5, [sp, #212]	@ 0xd4
 8032406:	9120      	str	r1, [sp, #128]	@ 0x80
 8032408:	9229      	str	r2, [sp, #164]	@ 0xa4
 803240a:	9313      	str	r3, [sp, #76]	@ 0x4c
 803240c:	9507      	str	r5, [sp, #28]
 803240e:	e9dd 043b 	ldrd	r0, r4, [sp, #236]	@ 0xec
 8032412:	2c00      	cmp	r4, #0
 8032414:	bf18      	it	ne
 8032416:	4620      	movne	r0, r4
 8032418:	903b      	str	r0, [sp, #236]	@ 0xec
 803241a:	9837      	ldr	r0, [sp, #220]	@ 0xdc
 803241c:	2801      	cmp	r0, #1
 803241e:	f340 84c9 	ble.w	8032db4 <st_sssa8_nn_mat_mult_nt_t+0x9bc>
 8032422:	9838      	ldr	r0, [sp, #224]	@ 0xe0
 8032424:	4696      	mov	lr, r2
 8032426:	4688      	mov	r8, r1
 8032428:	9f38      	ldr	r7, [sp, #224]	@ 0xe0
 803242a:	f1a0 0310 	sub.w	r3, r0, #16
 803242e:	9837      	ldr	r0, [sp, #220]	@ 0xdc
 8032430:	9c38      	ldr	r4, [sp, #224]	@ 0xe0
 8032432:	10bf      	asrs	r7, r7, #2
 8032434:	1e82      	subs	r2, r0, #2
 8032436:	f023 000f 	bic.w	r0, r3, #15
 803243a:	f004 0403 	and.w	r4, r4, #3
 803243e:	9721      	str	r7, [sp, #132]	@ 0x84
 8032440:	0852      	lsrs	r2, r2, #1
 8032442:	9422      	str	r4, [sp, #136]	@ 0x88
 8032444:	1c56      	adds	r6, r2, #1
 8032446:	091a      	lsrs	r2, r3, #4
 8032448:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 803244a:	1c51      	adds	r1, r2, #1
 803244c:	2201      	movs	r2, #1
 803244e:	105b      	asrs	r3, r3, #1
 8032450:	9626      	str	r6, [sp, #152]	@ 0x98
 8032452:	931b      	str	r3, [sp, #108]	@ 0x6c
 8032454:	1eab      	subs	r3, r5, #2
 8032456:	fa02 f503 	lsl.w	r5, r2, r3
 803245a:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 803245c:	3314      	adds	r3, #20
 803245e:	9514      	str	r5, [sp, #80]	@ 0x50
 8032460:	9d37      	ldr	r5, [sp, #220]	@ 0xdc
 8032462:	4418      	add	r0, r3
 8032464:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8032466:	4095      	lsls	r5, r2
 8032468:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 803246a:	9011      	str	r0, [sp, #68]	@ 0x44
 803246c:	f06f 0003 	mvn.w	r0, #3
 8032470:	f022 0203 	bic.w	r2, r2, #3
 8032474:	950c      	str	r5, [sp, #48]	@ 0x30
 8032476:	1ac0      	subs	r0, r0, r3
 8032478:	9228      	str	r2, [sp, #160]	@ 0xa0
 803247a:	189a      	adds	r2, r3, r2
 803247c:	9012      	str	r0, [sp, #72]	@ 0x48
 803247e:	f1a3 000f 	sub.w	r0, r3, #15
 8032482:	9227      	str	r2, [sp, #156]	@ 0x9c
 8032484:	013a      	lsls	r2, r7, #4
 8032486:	900a      	str	r0, [sp, #40]	@ 0x28
 8032488:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 803248a:	9223      	str	r2, [sp, #140]	@ 0x8c
 803248c:	1e62      	subs	r2, r4, #1
 803248e:	f000 0001 	and.w	r0, r0, #1
 8032492:	9225      	str	r2, [sp, #148]	@ 0x94
 8032494:	1ea2      	subs	r2, r4, #2
 8032496:	901d      	str	r0, [sp, #116]	@ 0x74
 8032498:	0058      	lsls	r0, r3, #1
 803249a:	9224      	str	r2, [sp, #144]	@ 0x90
 803249c:	010a      	lsls	r2, r1, #4
 803249e:	901a      	str	r0, [sp, #104]	@ 0x68
 80324a0:	0098      	lsls	r0, r3, #2
 80324a2:	9210      	str	r2, [sp, #64]	@ 0x40
 80324a4:	018a      	lsls	r2, r1, #6
 80324a6:	901f      	str	r0, [sp, #124]	@ 0x7c
 80324a8:	4670      	mov	r0, lr
 80324aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80324ac:	3004      	adds	r0, #4
 80324ae:	9015      	str	r0, [sp, #84]	@ 0x54
 80324b0:	eb0c 0046 	add.w	r0, ip, r6, lsl #1
 80324b4:	9018      	str	r0, [sp, #96]	@ 0x60
 80324b6:	4618      	mov	r0, r3
 80324b8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80324ba:	fb05 f303 	mul.w	r3, r5, r3
 80324be:	931e      	str	r3, [sp, #120]	@ 0x78
 80324c0:	1ec3      	subs	r3, r0, #3
 80324c2:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
 80324c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80324c8:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 80324ca:	2b00      	cmp	r3, #0
 80324cc:	f000 83c8 	beq.w	8032c60 <st_sssa8_nn_mat_mult_nt_t+0x868>
 80324d0:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80324d2:	2b00      	cmp	r3, #0
 80324d4:	f040 8377 	bne.w	8032bc6 <st_sssa8_nn_mat_mult_nt_t+0x7ce>
 80324d8:	461a      	mov	r2, r3
 80324da:	4618      	mov	r0, r3
 80324dc:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80324de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80324e2:	18c3      	adds	r3, r0, r3
 80324e4:	9308      	str	r3, [sp, #32]
 80324e6:	680b      	ldr	r3, [r1, #0]
 80324e8:	18d3      	adds	r3, r2, r3
 80324ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80324ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80324ee:	2a00      	cmp	r2, #0
 80324f0:	f000 8418 	beq.w	8032d24 <st_sssa8_nn_mat_mult_nt_t+0x92c>
 80324f4:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 80324f6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80324f8:	3301      	adds	r3, #1
 80324fa:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80324fc:	f8dd b070 	ldr.w	fp, [sp, #112]	@ 0x70
 8032500:	440b      	add	r3, r1
 8032502:	9303      	str	r3, [sp, #12]
 8032504:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8032506:	4403      	add	r3, r0
 8032508:	930d      	str	r3, [sp, #52]	@ 0x34
 803250a:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 803250c:	3304      	adds	r3, #4
 803250e:	930e      	str	r3, [sp, #56]	@ 0x38
 8032510:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8032512:	3b04      	subs	r3, #4
 8032514:	930f      	str	r3, [sp, #60]	@ 0x3c
 8032516:	9b07      	ldr	r3, [sp, #28]
 8032518:	f1c3 0301 	rsb	r3, r3, #1
 803251c:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8032520:	9316      	str	r3, [sp, #88]	@ 0x58
 8032522:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8032524:	2b00      	cmp	r3, #0
 8032526:	f340 8249 	ble.w	80329bc <st_sssa8_nn_mat_mult_nt_t+0x5c4>
 803252a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803252c:	9808      	ldr	r0, [sp, #32]
 803252e:	eb0b 0703 	add.w	r7, fp, r3
 8032532:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8032534:	f8cd b010 	str.w	fp, [sp, #16]
 8032538:	4604      	mov	r4, r0
 803253a:	445b      	add	r3, fp
 803253c:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 803253e:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
 8032542:	9300      	str	r3, [sp, #0]
 8032544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8032546:	4619      	mov	r1, r3
 8032548:	f85b c007 	ldr.w	ip, [fp, r7]
 803254c:	eb0b 0e07 	add.w	lr, fp, r7
 8032550:	6832      	ldr	r2, [r6, #0]
 8032552:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8032556:	f8d6 a008 	ldr.w	sl, [r6, #8]
 803255a:	f8d6 800c 	ldr.w	r8, [r6, #12]
 803255e:	fa2f f58c 	sxtb16	r5, ip
 8032562:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 8032566:	fb25 0002 	smlad	r0, r5, r2, r0
 803256a:	fb2c 0009 	smlad	r0, ip, r9, r0
 803256e:	fb25 350a 	smlad	r5, r5, sl, r3
 8032572:	fb2c 5508 	smlad	r5, ip, r8, r5
 8032576:	f857 cc04 	ldr.w	ip, [r7, #-4]
 803257a:	fa2f f38c 	sxtb16	r3, ip
 803257e:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 8032582:	fb23 4202 	smlad	r2, r3, r2, r4
 8032586:	fb23 140a 	smlad	r4, r3, sl, r1
 803258a:	fb2c 2209 	smlad	r2, ip, r9, r2
 803258e:	6933      	ldr	r3, [r6, #16]
 8032590:	f8d6 9014 	ldr.w	r9, [r6, #20]
 8032594:	fb2c 4408 	smlad	r4, ip, r8, r4
 8032598:	f8de c004 	ldr.w	ip, [lr, #4]
 803259c:	f8d6 a018 	ldr.w	sl, [r6, #24]
 80325a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80325a4:	fa2f f18c 	sxtb16	r1, ip
 80325a8:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 80325ac:	fb21 0003 	smlad	r0, r1, r3, r0
 80325b0:	fb2c 0009 	smlad	r0, ip, r9, r0
 80325b4:	fb21 510a 	smlad	r1, r1, sl, r5
 80325b8:	fb2c 1108 	smlad	r1, ip, r8, r1
 80325bc:	f8d7 c000 	ldr.w	ip, [r7]
 80325c0:	fa2f f58c 	sxtb16	r5, ip
 80325c4:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 80325c8:	fb25 2303 	smlad	r3, r5, r3, r2
 80325cc:	fb25 450a 	smlad	r5, r5, sl, r4
 80325d0:	fb2c 3309 	smlad	r3, ip, r9, r3
 80325d4:	6a32      	ldr	r2, [r6, #32]
 80325d6:	f8d6 9024 	ldr.w	r9, [r6, #36]	@ 0x24
 80325da:	fb2c 5508 	smlad	r5, ip, r8, r5
 80325de:	f8de c008 	ldr.w	ip, [lr, #8]
 80325e2:	f8d6 a028 	ldr.w	sl, [r6, #40]	@ 0x28
 80325e6:	f8d6 802c 	ldr.w	r8, [r6, #44]	@ 0x2c
 80325ea:	fa2f f48c 	sxtb16	r4, ip
 80325ee:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 80325f2:	fb24 0002 	smlad	r0, r4, r2, r0
 80325f6:	fb2c 0009 	smlad	r0, ip, r9, r0
 80325fa:	fb24 140a 	smlad	r4, r4, sl, r1
 80325fe:	fb2c 4108 	smlad	r1, ip, r8, r4
 8032602:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8032606:	fa2f f48c 	sxtb16	r4, ip
 803260a:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 803260e:	fb24 3202 	smlad	r2, r4, r2, r3
 8032612:	fb24 550a 	smlad	r5, r4, sl, r5
 8032616:	fb2c 2209 	smlad	r2, ip, r9, r2
 803261a:	f8d6 9030 	ldr.w	r9, [r6, #48]	@ 0x30
 803261e:	6b74      	ldr	r4, [r6, #52]	@ 0x34
 8032620:	fb2c 5508 	smlad	r5, ip, r8, r5
 8032624:	f8de 300c 	ldr.w	r3, [lr, #12]
 8032628:	3640      	adds	r6, #64	@ 0x40
 803262a:	f856 ec08 	ldr.w	lr, [r6, #-8]
 803262e:	f856 cc04 	ldr.w	ip, [r6, #-4]
 8032632:	fa2f f883 	sxtb16	r8, r3
 8032636:	fa2f f393 	sxtb16	r3, r3, ror #8
 803263a:	fb28 0009 	smlad	r0, r8, r9, r0
 803263e:	fb23 0004 	smlad	r0, r3, r4, r0
 8032642:	fb28 180e 	smlad	r8, r8, lr, r1
 8032646:	fb23 830c 	smlad	r3, r3, ip, r8
 803264a:	68b9      	ldr	r1, [r7, #8]
 803264c:	fa2f f881 	sxtb16	r8, r1
 8032650:	fa2f f191 	sxtb16	r1, r1, ror #8
 8032654:	fb28 2909 	smlad	r9, r8, r9, r2
 8032658:	fb28 580e 	smlad	r8, r8, lr, r5
 803265c:	fb21 9404 	smlad	r4, r1, r4, r9
 8032660:	fb21 810c 	smlad	r1, r1, ip, r8
 8032664:	3710      	adds	r7, #16
 8032666:	9a00      	ldr	r2, [sp, #0]
 8032668:	42ba      	cmp	r2, r7
 803266a:	f47f af6d 	bne.w	8032548 <st_sssa8_nn_mat_mult_nt_t+0x150>
 803266e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8032670:	f8dd b010 	ldr.w	fp, [sp, #16]
 8032674:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8032676:	4692      	mov	sl, r2
 8032678:	4493      	add	fp, r2
 803267a:	9500      	str	r5, [sp, #0]
 803267c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 803267e:	4592      	cmp	sl, r2
 8032680:	f280 819a 	bge.w	80329b8 <st_sssa8_nn_mat_mult_nt_t+0x5c0>
 8032684:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8032686:	f8cd a018 	str.w	sl, [sp, #24]
 803268a:	eba5 020a 	sub.w	r2, r5, sl
 803268e:	46aa      	mov	sl, r5
 8032690:	0892      	lsrs	r2, r2, #2
 8032692:	4616      	mov	r6, r2
 8032694:	9204      	str	r2, [sp, #16]
 8032696:	9a00      	ldr	r2, [sp, #0]
 8032698:	3601      	adds	r6, #1
 803269a:	eb0b 0986 	add.w	r9, fp, r6, lsl #2
 803269e:	9605      	str	r6, [sp, #20]
 80326a0:	f8d2 8000 	ldr.w	r8, [r2]
 80326a4:	3210      	adds	r2, #16
 80326a6:	f85b 5b04 	ldr.w	r5, [fp], #4
 80326aa:	f852 cc0c 	ldr.w	ip, [r2, #-12]
 80326ae:	f852 ec08 	ldr.w	lr, [r2, #-8]
 80326b2:	f852 7c04 	ldr.w	r7, [r2, #-4]
 80326b6:	fa2f f685 	sxtb16	r6, r5
 80326ba:	fa2f f595 	sxtb16	r5, r5, ror #8
 80326be:	fb26 0008 	smlad	r0, r6, r8, r0
 80326c2:	fb25 000c 	smlad	r0, r5, ip, r0
 80326c6:	fb26 360e 	smlad	r6, r6, lr, r3
 80326ca:	fb25 6307 	smlad	r3, r5, r7, r6
 80326ce:	f85b 500a 	ldr.w	r5, [fp, sl]
 80326d2:	fa2f f685 	sxtb16	r6, r5
 80326d6:	fa2f f595 	sxtb16	r5, r5, ror #8
 80326da:	fb26 4408 	smlad	r4, r6, r8, r4
 80326de:	fb26 160e 	smlad	r6, r6, lr, r1
 80326e2:	fb25 440c 	smlad	r4, r5, ip, r4
 80326e6:	fb25 6107 	smlad	r1, r5, r7, r6
 80326ea:	45cb      	cmp	fp, r9
 80326ec:	d1d8      	bne.n	80326a0 <st_sssa8_nn_mat_mult_nt_t+0x2a8>
 80326ee:	9a00      	ldr	r2, [sp, #0]
 80326f0:	9d05      	ldr	r5, [sp, #20]
 80326f2:	f8dd a018 	ldr.w	sl, [sp, #24]
 80326f6:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 80326fa:	9d04      	ldr	r5, [sp, #16]
 80326fc:	9200      	str	r2, [sp, #0]
 80326fe:	f10a 0204 	add.w	r2, sl, #4
 8032702:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 8032706:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8032708:	4552      	cmp	r2, sl
 803270a:	dd58      	ble.n	80327be <st_sssa8_nn_mat_mult_nt_t+0x3c6>
 803270c:	9f00      	ldr	r7, [sp, #0]
 803270e:	f999 2000 	ldrsb.w	r2, [r9]
 8032712:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 8032716:	f9b7 6000 	ldrsh.w	r6, [r7]
 803271a:	fb15 3302 	smlabb	r3, r5, r2, r3
 803271e:	fb16 0002 	smlabb	r0, r6, r2, r0
 8032722:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8032724:	f919 2002 	ldrsb.w	r2, [r9, r2]
 8032728:	fb15 1102 	smlabb	r1, r5, r2, r1
 803272c:	9d38      	ldr	r5, [sp, #224]	@ 0xe0
 803272e:	fb16 4402 	smlabb	r4, r6, r2, r4
 8032732:	f10a 0201 	add.w	r2, sl, #1
 8032736:	4295      	cmp	r5, r2
 8032738:	dd3d      	ble.n	80327b6 <st_sssa8_nn_mat_mult_nt_t+0x3be>
 803273a:	eb09 0205 	add.w	r2, r9, r5
 803273e:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 8032742:	f9b7 5006 	ldrsh.w	r5, [r7, #6]
 8032746:	f992 2001 	ldrsb.w	r2, [r2, #1]
 803274a:	fb16 4402 	smlabb	r4, r6, r2, r4
 803274e:	fb15 1102 	smlabb	r1, r5, r2, r1
 8032752:	f999 2001 	ldrsb.w	r2, [r9, #1]
 8032756:	fb16 0002 	smlabb	r0, r6, r2, r0
 803275a:	9e38      	ldr	r6, [sp, #224]	@ 0xe0
 803275c:	fb15 3302 	smlabb	r3, r5, r2, r3
 8032760:	f10a 0202 	add.w	r2, sl, #2
 8032764:	f109 0502 	add.w	r5, r9, #2
 8032768:	4296      	cmp	r6, r2
 803276a:	dd24      	ble.n	80327b6 <st_sssa8_nn_mat_mult_nt_t+0x3be>
 803276c:	57aa      	ldrsb	r2, [r5, r6]
 803276e:	f9b7 6008 	ldrsh.w	r6, [r7, #8]
 8032772:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
 8032776:	fb16 4402 	smlabb	r4, r6, r2, r4
 803277a:	fb15 1102 	smlabb	r1, r5, r2, r1
 803277e:	f999 2002 	ldrsb.w	r2, [r9, #2]
 8032782:	fb16 0002 	smlabb	r0, r6, r2, r0
 8032786:	9e38      	ldr	r6, [sp, #224]	@ 0xe0
 8032788:	fb15 3302 	smlabb	r3, r5, r2, r3
 803278c:	f10a 0203 	add.w	r2, sl, #3
 8032790:	f109 0503 	add.w	r5, r9, #3
 8032794:	4296      	cmp	r6, r2
 8032796:	dd0e      	ble.n	80327b6 <st_sssa8_nn_mat_mult_nt_t+0x3be>
 8032798:	57ad      	ldrsb	r5, [r5, r6]
 803279a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 803279e:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 80327a2:	fb12 4405 	smlabb	r4, r2, r5, r4
 80327a6:	fb16 1105 	smlabb	r1, r6, r5, r1
 80327aa:	f999 5003 	ldrsb.w	r5, [r9, #3]
 80327ae:	fb12 0005 	smlabb	r0, r2, r5, r0
 80327b2:	fb16 3305 	smlabb	r3, r6, r5, r3
 80327b6:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 80327b8:	eba2 020a 	sub.w	r2, r2, sl
 80327bc:	4491      	add	r9, r2
 80327be:	9a07      	ldr	r2, [sp, #28]
 80327c0:	2a15      	cmp	r2, #21
 80327c2:	f340 80a5 	ble.w	8032910 <st_sssa8_nn_mat_mult_nt_t+0x518>
 80327c6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80327c8:	9e34      	ldr	r6, [sp, #208]	@ 0xd0
 80327ca:	fb50 5006 	smmla	r0, r0, r6, r5
 80327ce:	fb54 5406 	smmla	r4, r4, r6, r5
 80327d2:	fb53 5306 	smmla	r3, r3, r6, r5
 80327d6:	fb51 5106 	smmla	r1, r1, r6, r5
 80327da:	1e55      	subs	r5, r2, #1
 80327dc:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 80327de:	4128      	asrs	r0, r5
 80327e0:	4410      	add	r0, r2
 80327e2:	f300 0007 	ssat	r0, #8, r0
 80327e6:	fa43 f205 	asr.w	r2, r3, r5
 80327ea:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 80327ec:	b240      	sxtb	r0, r0
 80327ee:	441a      	add	r2, r3
 80327f0:	f302 0207 	ssat	r2, #8, r2
 80327f4:	412c      	asrs	r4, r5
 80327f6:	b252      	sxtb	r2, r2
 80327f8:	441c      	add	r4, r3
 80327fa:	f304 0407 	ssat	r4, #8, r4
 80327fe:	4129      	asrs	r1, r5
 8032800:	b264      	sxtb	r4, r4
 8032802:	4419      	add	r1, r3
 8032804:	f301 0307 	ssat	r3, #8, r1
 8032808:	b25b      	sxtb	r3, r3
 803280a:	9901      	ldr	r1, [sp, #4]
 803280c:	704a      	strb	r2, [r1, #1]
 803280e:	9a03      	ldr	r2, [sp, #12]
 8032810:	7008      	strb	r0, [r1, #0]
 8032812:	7013      	strb	r3, [r2, #0]
 8032814:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8032816:	f802 4c01 	strb.w	r4, [r2, #-1]
 803281a:	4419      	add	r1, r3
 803281c:	18d3      	adds	r3, r2, r3
 803281e:	9303      	str	r3, [sp, #12]
 8032820:	9b02      	ldr	r3, [sp, #8]
 8032822:	9101      	str	r1, [sp, #4]
 8032824:	3b01      	subs	r3, #1
 8032826:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 8032828:	9302      	str	r3, [sp, #8]
 803282a:	eb09 0b01 	add.w	fp, r9, r1
 803282e:	f47f ae78 	bne.w	8032522 <st_sssa8_nn_mat_mult_nt_t+0x12a>
 8032832:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8032834:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8032836:	eb03 0a02 	add.w	sl, r3, r2
 803283a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 803283c:	2b00      	cmp	r3, #0
 803283e:	f040 80c6 	bne.w	80329ce <st_sssa8_nn_mat_mult_nt_t+0x5d6>
 8032842:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8032844:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8032846:	4413      	add	r3, r2
 8032848:	9317      	str	r3, [sp, #92]	@ 0x5c
 803284a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 803284c:	3302      	adds	r3, #2
 803284e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8032850:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 8032852:	b11b      	cbz	r3, 803285c <st_sssa8_nn_mat_mult_nt_t+0x464>
 8032854:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8032856:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8032858:	4413      	add	r3, r2
 803285a:	933b      	str	r3, [sp, #236]	@ 0xec
 803285c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 803285e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8032860:	3308      	adds	r3, #8
 8032862:	9315      	str	r3, [sp, #84]	@ 0x54
 8032864:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8032866:	4293      	cmp	r3, r2
 8032868:	f47f ae2e 	bne.w	80324c8 <st_sssa8_nn_mat_mult_nt_t+0xd0>
 803286c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803286e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8032870:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8032872:	fb01 3302 	mla	r3, r1, r2, r3
 8032876:	9320      	str	r3, [sp, #128]	@ 0x80
 8032878:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 803287a:	07db      	lsls	r3, r3, #31
 803287c:	d544      	bpl.n	8032908 <st_sssa8_nn_mat_mult_nt_t+0x510>
 803287e:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8032880:	2b00      	cmp	r3, #0
 8032882:	dd41      	ble.n	8032908 <st_sssa8_nn_mat_mult_nt_t+0x510>
 8032884:	9a37      	ldr	r2, [sp, #220]	@ 0xdc
 8032886:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 803288a:	9907      	ldr	r1, [sp, #28]
 803288c:	2500      	movs	r5, #0
 803288e:	4413      	add	r3, r2
 8032890:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8032892:	f101 3cff 	add.w	ip, r1, #4294967295
 8032896:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 803289a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 803289e:	1e8b      	subs	r3, r1, #2
 80328a0:	2201      	movs	r2, #1
 80328a2:	fa02 f703 	lsl.w	r7, r2, r3
 80328a6:	460b      	mov	r3, r1
 80328a8:	eba2 0e01 	sub.w	lr, r2, r1
 80328ac:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80328ae:	469b      	mov	fp, r3
 80328b0:	f8cd e000 	str.w	lr, [sp]
 80328b4:	e9dd a838 	ldrd	sl, r8, [sp, #224]	@ 0xe0
 80328b8:	f1ba 0f00 	cmp.w	sl, #0
 80328bc:	6832      	ldr	r2, [r6, #0]
 80328be:	dd0d      	ble.n	80328dc <st_sssa8_nn_mat_mult_nt_t+0x4e4>
 80328c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80328c2:	eb01 0e0a 	add.w	lr, r1, sl
 80328c6:	1e58      	subs	r0, r3, #1
 80328c8:	f911 3b01 	ldrsb.w	r3, [r1], #1
 80328cc:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 80328d0:	eba3 0308 	sub.w	r3, r3, r8
 80328d4:	4571      	cmp	r1, lr
 80328d6:	fb04 2203 	mla	r2, r4, r3, r2
 80328da:	d1f5      	bne.n	80328c8 <st_sssa8_nn_mat_mult_nt_t+0x4d0>
 80328dc:	f1bb 0f15 	cmp.w	fp, #21
 80328e0:	f340 8225 	ble.w	8032d2e <st_sssa8_nn_mat_mult_nt_t+0x936>
 80328e4:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80328e6:	fb52 7303 	smmla	r3, r2, r3, r7
 80328ea:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 80328ec:	fa43 f30c 	asr.w	r3, r3, ip
 80328f0:	4413      	add	r3, r2
 80328f2:	f303 0307 	ssat	r3, #8, r3
 80328f6:	b25b      	sxtb	r3, r3
 80328f8:	f889 3000 	strb.w	r3, [r9]
 80328fc:	3501      	adds	r5, #1
 80328fe:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8032900:	4499      	add	r9, r3
 8032902:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8032904:	42ab      	cmp	r3, r5
 8032906:	d1d7      	bne.n	80328b8 <st_sssa8_nn_mat_mult_nt_t+0x4c0>
 8032908:	2000      	movs	r0, #0
 803290a:	b02b      	add	sp, #172	@ 0xac
 803290c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8032910:	2a00      	cmp	r2, #0
 8032912:	dd21      	ble.n	8032958 <st_sssa8_nn_mat_mult_nt_t+0x560>
 8032914:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 8032916:	0040      	lsls	r0, r0, #1
 8032918:	9e3a      	ldr	r6, [sp, #232]	@ 0xe8
 803291a:	0064      	lsls	r4, r4, #1
 803291c:	fb50 6005 	smmla	r0, r0, r5, r6
 8032920:	005b      	lsls	r3, r3, #1
 8032922:	4110      	asrs	r0, r2
 8032924:	0049      	lsls	r1, r1, #1
 8032926:	fb54 6405 	smmla	r4, r4, r5, r6
 803292a:	fb53 6305 	smmla	r3, r3, r5, r6
 803292e:	fb51 6105 	smmla	r1, r1, r5, r6
 8032932:	f300 0007 	ssat	r0, #8, r0
 8032936:	4615      	mov	r5, r2
 8032938:	b240      	sxtb	r0, r0
 803293a:	fa43 f202 	asr.w	r2, r3, r2
 803293e:	f302 0207 	ssat	r2, #8, r2
 8032942:	b252      	sxtb	r2, r2
 8032944:	412c      	asrs	r4, r5
 8032946:	f304 0407 	ssat	r4, #8, r4
 803294a:	b264      	sxtb	r4, r4
 803294c:	fa41 f305 	asr.w	r3, r1, r5
 8032950:	f303 0307 	ssat	r3, #8, r3
 8032954:	b25b      	sxtb	r3, r3
 8032956:	e758      	b.n	803280a <st_sssa8_nn_mat_mult_nt_t+0x412>
 8032958:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 803295a:	fa00 f205 	lsl.w	r2, r0, r5
 803295e:	f302 021f 	ssat	r2, #32, r2
 8032962:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8032964:	fb52 f210 	smmulr	r2, r2, r0
 8032968:	4628      	mov	r0, r5
 803296a:	40ac      	lsls	r4, r5
 803296c:	f304 041f 	ssat	r4, #32, r4
 8032970:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 8032972:	fb54 f415 	smmulr	r4, r4, r5
 8032976:	fa03 f500 	lsl.w	r5, r3, r0
 803297a:	f305 051f 	ssat	r5, #32, r5
 803297e:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8032980:	fb55 f513 	smmulr	r5, r5, r3
 8032984:	fa01 f300 	lsl.w	r3, r1, r0
 8032988:	f303 031f 	ssat	r3, #32, r3
 803298c:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 803298e:	fb53 f311 	smmulr	r3, r3, r1
 8032992:	993a      	ldr	r1, [sp, #232]	@ 0xe8
 8032994:	1888      	adds	r0, r1, r2
 8032996:	f300 0007 	ssat	r0, #8, r0
 803299a:	460a      	mov	r2, r1
 803299c:	b240      	sxtb	r0, r0
 803299e:	442a      	add	r2, r5
 80329a0:	f302 0207 	ssat	r2, #8, r2
 80329a4:	b252      	sxtb	r2, r2
 80329a6:	440c      	add	r4, r1
 80329a8:	f304 0407 	ssat	r4, #8, r4
 80329ac:	b264      	sxtb	r4, r4
 80329ae:	440b      	add	r3, r1
 80329b0:	f303 0307 	ssat	r3, #8, r3
 80329b4:	b25b      	sxtb	r3, r3
 80329b6:	e728      	b.n	803280a <st_sssa8_nn_mat_mult_nt_t+0x412>
 80329b8:	46d9      	mov	r9, fp
 80329ba:	e6a4      	b.n	8032706 <st_sssa8_nn_mat_mult_nt_t+0x30e>
 80329bc:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 80329be:	f04f 0a00 	mov.w	sl, #0
 80329c2:	9808      	ldr	r0, [sp, #32]
 80329c4:	9300      	str	r3, [sp, #0]
 80329c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80329c8:	4604      	mov	r4, r0
 80329ca:	4619      	mov	r1, r3
 80329cc:	e656      	b.n	803267c <st_sssa8_nn_mat_mult_nt_t+0x284>
 80329ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80329d0:	2b00      	cmp	r3, #0
 80329d2:	f340 81ea 	ble.w	8032daa <st_sssa8_nn_mat_mult_nt_t+0x9b2>
 80329d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80329d8:	e9dd 5208 	ldrd	r5, r2, [sp, #32]
 80329dc:	eb0b 0e03 	add.w	lr, fp, r3
 80329e0:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 80329e2:	f8db 1000 	ldr.w	r1, [fp]
 80329e6:	fa2f f081 	sxtb16	r0, r1
 80329ea:	fa2f f191 	sxtb16	r1, r1, ror #8
 80329ee:	681c      	ldr	r4, [r3, #0]
 80329f0:	fb20 5404 	smlad	r4, r0, r4, r5
 80329f4:	685d      	ldr	r5, [r3, #4]
 80329f6:	fb21 4505 	smlad	r5, r1, r5, r4
 80329fa:	689c      	ldr	r4, [r3, #8]
 80329fc:	fb20 2004 	smlad	r0, r0, r4, r2
 8032a00:	68da      	ldr	r2, [r3, #12]
 8032a02:	fb21 0102 	smlad	r1, r1, r2, r0
 8032a06:	f8db 2004 	ldr.w	r2, [fp, #4]
 8032a0a:	fa2f f082 	sxtb16	r0, r2
 8032a0e:	fa2f f292 	sxtb16	r2, r2, ror #8
 8032a12:	691c      	ldr	r4, [r3, #16]
 8032a14:	fb20 5404 	smlad	r4, r0, r4, r5
 8032a18:	695d      	ldr	r5, [r3, #20]
 8032a1a:	fb22 4505 	smlad	r5, r2, r5, r4
 8032a1e:	699c      	ldr	r4, [r3, #24]
 8032a20:	fb20 1004 	smlad	r0, r0, r4, r1
 8032a24:	69d9      	ldr	r1, [r3, #28]
 8032a26:	fb22 0201 	smlad	r2, r2, r1, r0
 8032a2a:	f8db 0008 	ldr.w	r0, [fp, #8]
 8032a2e:	fa2f f180 	sxtb16	r1, r0
 8032a32:	fa2f f490 	sxtb16	r4, r0, ror #8
 8032a36:	6a18      	ldr	r0, [r3, #32]
 8032a38:	fb21 5000 	smlad	r0, r1, r0, r5
 8032a3c:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8032a3e:	fb24 0606 	smlad	r6, r4, r6, r0
 8032a42:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8032a44:	fb21 2100 	smlad	r1, r1, r0, r2
 8032a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8032a4a:	fb24 1402 	smlad	r4, r4, r2, r1
 8032a4e:	f8db 200c 	ldr.w	r2, [fp, #12]
 8032a52:	3340      	adds	r3, #64	@ 0x40
 8032a54:	f853 0c10 	ldr.w	r0, [r3, #-16]
 8032a58:	f10b 0b10 	add.w	fp, fp, #16
 8032a5c:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8032a60:	f853 cc08 	ldr.w	ip, [r3, #-8]
 8032a64:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8032a68:	fa2f f182 	sxtb16	r1, r2
 8032a6c:	fa2f f292 	sxtb16	r2, r2, ror #8
 8032a70:	fb21 6000 	smlad	r0, r1, r0, r6
 8032a74:	fb22 0505 	smlad	r5, r2, r5, r0
 8032a78:	fb21 410c 	smlad	r1, r1, ip, r4
 8032a7c:	fb22 1207 	smlad	r2, r2, r7, r1
 8032a80:	45de      	cmp	lr, fp
 8032a82:	d1ae      	bne.n	80329e2 <st_sssa8_nn_mat_mult_nt_t+0x5ea>
 8032a84:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8032a86:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8032a8a:	e9cd 5208 	strd	r5, r2, [sp, #32]
 8032a8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8032a90:	eb03 0c02 	add.w	ip, r3, r2
 8032a94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8032a96:	4573      	cmp	r3, lr
 8032a98:	f340 8185 	ble.w	8032da6 <st_sssa8_nn_mat_mult_nt_t+0x9ae>
 8032a9c:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8032a9e:	f8cd e004 	str.w	lr, [sp, #4]
 8032aa2:	3b04      	subs	r3, #4
 8032aa4:	eba3 030e 	sub.w	r3, r3, lr
 8032aa8:	ea4f 0993 	mov.w	r9, r3, lsr #2
 8032aac:	4663      	mov	r3, ip
 8032aae:	f109 0801 	add.w	r8, r9, #1
 8032ab2:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8032ab6:	eb0b 0788 	add.w	r7, fp, r8, lsl #2
 8032aba:	f8cd 8000 	str.w	r8, [sp]
 8032abe:	6818      	ldr	r0, [r3, #0]
 8032ac0:	3310      	adds	r3, #16
 8032ac2:	f85b 2b04 	ldr.w	r2, [fp], #4
 8032ac6:	f853 8c0c 	ldr.w	r8, [r3, #-12]
 8032aca:	f853 ec08 	ldr.w	lr, [r3, #-8]
 8032ace:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8032ad2:	fa2f f182 	sxtb16	r1, r2
 8032ad6:	fa2f f292 	sxtb16	r2, r2, ror #8
 8032ada:	fb21 4000 	smlad	r0, r1, r0, r4
 8032ade:	fb22 0408 	smlad	r4, r2, r8, r0
 8032ae2:	fb21 510e 	smlad	r1, r1, lr, r5
 8032ae6:	fb22 1506 	smlad	r5, r2, r6, r1
 8032aea:	45bb      	cmp	fp, r7
 8032aec:	d1e7      	bne.n	8032abe <st_sssa8_nn_mat_mult_nt_t+0x6c6>
 8032aee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8032af2:	f8dd 8000 	ldr.w	r8, [sp]
 8032af6:	f10e 0304 	add.w	r3, lr, #4
 8032afa:	eb0c 1c08 	add.w	ip, ip, r8, lsl #4
 8032afe:	eb03 0e89 	add.w	lr, r3, r9, lsl #2
 8032b02:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8032b06:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8032b08:	4573      	cmp	r3, lr
 8032b0a:	dd40      	ble.n	8032b8e <st_sssa8_nn_mat_mult_nt_t+0x796>
 8032b0c:	f997 3000 	ldrsb.w	r3, [r7]
 8032b10:	f8bc 2000 	ldrh.w	r2, [ip]
 8032b14:	9908      	ldr	r1, [sp, #32]
 8032b16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8032b18:	fb12 1103 	smlabb	r1, r2, r3, r1
 8032b1c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8032b20:	fb12 0003 	smlabb	r0, r2, r3, r0
 8032b24:	f10e 0301 	add.w	r3, lr, #1
 8032b28:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8032b2a:	9108      	str	r1, [sp, #32]
 8032b2c:	429a      	cmp	r2, r3
 8032b2e:	9009      	str	r0, [sp, #36]	@ 0x24
 8032b30:	dd2d      	ble.n	8032b8e <st_sssa8_nn_mat_mult_nt_t+0x796>
 8032b32:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8032b36:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8032b3a:	fb12 1403 	smlabb	r4, r2, r3, r1
 8032b3e:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8032b42:	fb12 0003 	smlabb	r0, r2, r3, r0
 8032b46:	f10e 0302 	add.w	r3, lr, #2
 8032b4a:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8032b4c:	9408      	str	r4, [sp, #32]
 8032b4e:	429a      	cmp	r2, r3
 8032b50:	9009      	str	r0, [sp, #36]	@ 0x24
 8032b52:	dd1c      	ble.n	8032b8e <st_sssa8_nn_mat_mult_nt_t+0x796>
 8032b54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8032b58:	f10e 0103 	add.w	r1, lr, #3
 8032b5c:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 8032b60:	fb12 4403 	smlabb	r4, r2, r3, r4
 8032b64:	f8bc 200a 	ldrh.w	r2, [ip, #10]
 8032b68:	fb12 0003 	smlabb	r0, r2, r3, r0
 8032b6c:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8032b6e:	9408      	str	r4, [sp, #32]
 8032b70:	428b      	cmp	r3, r1
 8032b72:	9009      	str	r0, [sp, #36]	@ 0x24
 8032b74:	dd0b      	ble.n	8032b8e <st_sssa8_nn_mat_mult_nt_t+0x796>
 8032b76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8032b7a:	f8bc 200c 	ldrh.w	r2, [ip, #12]
 8032b7e:	fb12 4203 	smlabb	r2, r2, r3, r4
 8032b82:	9208      	str	r2, [sp, #32]
 8032b84:	f8bc 200e 	ldrh.w	r2, [ip, #14]
 8032b88:	fb12 0303 	smlabb	r3, r2, r3, r0
 8032b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8032b8e:	9907      	ldr	r1, [sp, #28]
 8032b90:	2915      	cmp	r1, #21
 8032b92:	f340 80b0 	ble.w	8032cf6 <st_sssa8_nn_mat_mult_nt_t+0x8fe>
 8032b96:	3901      	subs	r1, #1
 8032b98:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8032b9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8032b9c:	9a08      	ldr	r2, [sp, #32]
 8032b9e:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
 8032ba0:	fb52 3200 	smmla	r2, r2, r0, r3
 8032ba4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8032ba6:	410a      	asrs	r2, r1
 8032ba8:	fb50 3304 	smmla	r3, r0, r4, r3
 8032bac:	983a      	ldr	r0, [sp, #232]	@ 0xe8
 8032bae:	4402      	add	r2, r0
 8032bb0:	f302 0207 	ssat	r2, #8, r2
 8032bb4:	410b      	asrs	r3, r1
 8032bb6:	f88a 2000 	strb.w	r2, [sl]
 8032bba:	4403      	add	r3, r0
 8032bbc:	f303 0307 	ssat	r3, #8, r3
 8032bc0:	f88a 3001 	strb.w	r3, [sl, #1]
 8032bc4:	e63d      	b.n	8032842 <st_sssa8_nn_mat_mult_nt_t+0x44a>
 8032bc6:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8032bc8:	2900      	cmp	r1, #0
 8032bca:	f000 80e8 	beq.w	8032d9e <st_sssa8_nn_mat_mult_nt_t+0x9a6>
 8032bce:	2300      	movs	r3, #0
 8032bd0:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8032bd2:	4618      	mov	r0, r3
 8032bd4:	3210      	adds	r2, #16
 8032bd6:	f932 4c10 	ldrsh.w	r4, [r2, #-16]
 8032bda:	3901      	subs	r1, #1
 8032bdc:	f102 0210 	add.w	r2, r2, #16
 8032be0:	eba0 0004 	sub.w	r0, r0, r4
 8032be4:	f932 4c18 	ldrsh.w	r4, [r2, #-24]
 8032be8:	eba3 0304 	sub.w	r3, r3, r4
 8032bec:	f932 4c1e 	ldrsh.w	r4, [r2, #-30]
 8032bf0:	eba0 0004 	sub.w	r0, r0, r4
 8032bf4:	f932 4c16 	ldrsh.w	r4, [r2, #-22]
 8032bf8:	eba3 0304 	sub.w	r3, r3, r4
 8032bfc:	f932 4c1c 	ldrsh.w	r4, [r2, #-28]
 8032c00:	eba0 0004 	sub.w	r0, r0, r4
 8032c04:	f932 4c14 	ldrsh.w	r4, [r2, #-20]
 8032c08:	eba3 0304 	sub.w	r3, r3, r4
 8032c0c:	f932 4c1a 	ldrsh.w	r4, [r2, #-26]
 8032c10:	eba0 0004 	sub.w	r0, r0, r4
 8032c14:	f932 4c12 	ldrsh.w	r4, [r2, #-18]
 8032c18:	eba3 0304 	sub.w	r3, r3, r4
 8032c1c:	d1db      	bne.n	8032bd6 <st_sssa8_nn_mat_mult_nt_t+0x7de>
 8032c1e:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8032c20:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8032c22:	440a      	add	r2, r1
 8032c24:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8032c26:	b1a9      	cbz	r1, 8032c54 <st_sssa8_nn_mat_mult_nt_t+0x85c>
 8032c28:	f9b2 1000 	ldrsh.w	r1, [r2]
 8032c2c:	1a40      	subs	r0, r0, r1
 8032c2e:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8032c32:	1a5b      	subs	r3, r3, r1
 8032c34:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8032c36:	b169      	cbz	r1, 8032c54 <st_sssa8_nn_mat_mult_nt_t+0x85c>
 8032c38:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8032c3c:	1a40      	subs	r0, r0, r1
 8032c3e:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8032c42:	1a5b      	subs	r3, r3, r1
 8032c44:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8032c46:	b129      	cbz	r1, 8032c54 <st_sssa8_nn_mat_mult_nt_t+0x85c>
 8032c48:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 8032c4c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8032c50:	1a40      	subs	r0, r0, r1
 8032c52:	1a9b      	subs	r3, r3, r2
 8032c54:	9a39      	ldr	r2, [sp, #228]	@ 0xe4
 8032c56:	fb02 f000 	mul.w	r0, r2, r0
 8032c5a:	fb03 f202 	mul.w	r2, r3, r2
 8032c5e:	e43d      	b.n	80324dc <st_sssa8_nn_mat_mult_nt_t+0xe4>
 8032c60:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8032c62:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8032c64:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8032c66:	18ec      	adds	r4, r5, r3
 8032c68:	2800      	cmp	r0, #0
 8032c6a:	f000 80a5 	beq.w	8032db8 <st_sssa8_nn_mat_mult_nt_t+0x9c0>
 8032c6e:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8032c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8032c74:	3210      	adds	r2, #16
 8032c76:	f854 1b04 	ldr.w	r1, [r4], #4
 8032c7a:	3801      	subs	r0, #1
 8032c7c:	fa2f f683 	sxtb16	r6, r3
 8032c80:	ea4f 2333 	mov.w	r3, r3, ror #8
 8032c84:	f842 6c10 	str.w	r6, [r2, #-16]
 8032c88:	fa2f f383 	sxtb16	r3, r3
 8032c8c:	f842 3c0c 	str.w	r3, [r2, #-12]
 8032c90:	ea4f 2331 	mov.w	r3, r1, ror #8
 8032c94:	fa2f f181 	sxtb16	r1, r1
 8032c98:	fa2f f383 	sxtb16	r3, r3
 8032c9c:	f842 1c08 	str.w	r1, [r2, #-8]
 8032ca0:	f842 3c04 	str.w	r3, [r2, #-4]
 8032ca4:	d1e4      	bne.n	8032c70 <st_sssa8_nn_mat_mult_nt_t+0x878>
 8032ca6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8032ca8:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8032caa:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8032cac:	185c      	adds	r4, r3, r1
 8032cae:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8032cb0:	189a      	adds	r2, r3, r2
 8032cb2:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8032cb4:	440b      	add	r3, r1
 8032cb6:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8032cb8:	2900      	cmp	r1, #0
 8032cba:	f43f ac09 	beq.w	80324d0 <st_sssa8_nn_mat_mult_nt_t+0xd8>
 8032cbe:	f992 1000 	ldrsb.w	r1, [r2]
 8032cc2:	8019      	strh	r1, [r3, #0]
 8032cc4:	f994 1000 	ldrsb.w	r1, [r4]
 8032cc8:	8059      	strh	r1, [r3, #2]
 8032cca:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8032ccc:	2900      	cmp	r1, #0
 8032cce:	f43f abff 	beq.w	80324d0 <st_sssa8_nn_mat_mult_nt_t+0xd8>
 8032cd2:	f992 1001 	ldrsb.w	r1, [r2, #1]
 8032cd6:	8099      	strh	r1, [r3, #4]
 8032cd8:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8032cdc:	80d9      	strh	r1, [r3, #6]
 8032cde:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8032ce0:	2900      	cmp	r1, #0
 8032ce2:	f43f abf5 	beq.w	80324d0 <st_sssa8_nn_mat_mult_nt_t+0xd8>
 8032ce6:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8032cea:	811a      	strh	r2, [r3, #8]
 8032cec:	f994 2002 	ldrsb.w	r2, [r4, #2]
 8032cf0:	815a      	strh	r2, [r3, #10]
 8032cf2:	f7ff bbed 	b.w	80324d0 <st_sssa8_nn_mat_mult_nt_t+0xd8>
 8032cf6:	2900      	cmp	r1, #0
 8032cf8:	dd35      	ble.n	8032d66 <st_sssa8_nn_mat_mult_nt_t+0x96e>
 8032cfa:	9b08      	ldr	r3, [sp, #32]
 8032cfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8032cfe:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8032d00:	005b      	lsls	r3, r3, #1
 8032d02:	9c3a      	ldr	r4, [sp, #232]	@ 0xe8
 8032d04:	0052      	lsls	r2, r2, #1
 8032d06:	fb53 4300 	smmla	r3, r3, r0, r4
 8032d0a:	fb52 4200 	smmla	r2, r2, r0, r4
 8032d0e:	410b      	asrs	r3, r1
 8032d10:	f303 0307 	ssat	r3, #8, r3
 8032d14:	410a      	asrs	r2, r1
 8032d16:	f88a 3000 	strb.w	r3, [sl]
 8032d1a:	f302 0307 	ssat	r3, #8, r2
 8032d1e:	f88a 3001 	strb.w	r3, [sl, #1]
 8032d22:	e58e      	b.n	8032842 <st_sssa8_nn_mat_mult_nt_t+0x44a>
 8032d24:	f8dd b070 	ldr.w	fp, [sp, #112]	@ 0x70
 8032d28:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8032d2c:	e585      	b.n	803283a <st_sssa8_nn_mat_mult_nt_t+0x442>
 8032d2e:	f1bb 0f00 	cmp.w	fp, #0
 8032d32:	dd0a      	ble.n	8032d4a <st_sssa8_nn_mat_mult_nt_t+0x952>
 8032d34:	0053      	lsls	r3, r2, #1
 8032d36:	983a      	ldr	r0, [sp, #232]	@ 0xe8
 8032d38:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 8032d3a:	fb53 0302 	smmla	r3, r3, r2, r0
 8032d3e:	fa43 f30b 	asr.w	r3, r3, fp
 8032d42:	f303 0307 	ssat	r3, #8, r3
 8032d46:	b25b      	sxtb	r3, r3
 8032d48:	e5d6      	b.n	80328f8 <st_sssa8_nn_mat_mult_nt_t+0x500>
 8032d4a:	9b00      	ldr	r3, [sp, #0]
 8032d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8032d50:	f303 031f 	ssat	r3, #32, r3
 8032d54:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 8032d56:	fb53 f312 	smmulr	r3, r3, r2
 8032d5a:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 8032d5c:	4413      	add	r3, r2
 8032d5e:	f303 0307 	ssat	r3, #8, r3
 8032d62:	b25b      	sxtb	r3, r3
 8032d64:	e5c8      	b.n	80328f8 <st_sssa8_nn_mat_mult_nt_t+0x500>
 8032d66:	f1c1 0301 	rsb	r3, r1, #1
 8032d6a:	9a08      	ldr	r2, [sp, #32]
 8032d6c:	409a      	lsls	r2, r3
 8032d6e:	f302 021f 	ssat	r2, #32, r2
 8032d72:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8032d74:	fb52 f211 	smmulr	r2, r2, r1
 8032d78:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8032d7a:	4099      	lsls	r1, r3
 8032d7c:	f301 031f 	ssat	r3, #32, r1
 8032d80:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8032d82:	fb53 f311 	smmulr	r3, r3, r1
 8032d86:	993a      	ldr	r1, [sp, #232]	@ 0xe8
 8032d88:	440a      	add	r2, r1
 8032d8a:	f302 0207 	ssat	r2, #8, r2
 8032d8e:	440b      	add	r3, r1
 8032d90:	f88a 2000 	strb.w	r2, [sl]
 8032d94:	f303 0307 	ssat	r3, #8, r3
 8032d98:	f88a 3001 	strb.w	r3, [sl, #1]
 8032d9c:	e551      	b.n	8032842 <st_sssa8_nn_mat_mult_nt_t+0x44a>
 8032d9e:	4608      	mov	r0, r1
 8032da0:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8032da2:	460b      	mov	r3, r1
 8032da4:	e73e      	b.n	8032c24 <st_sssa8_nn_mat_mult_nt_t+0x82c>
 8032da6:	465f      	mov	r7, fp
 8032da8:	e6ad      	b.n	8032b06 <st_sssa8_nn_mat_mult_nt_t+0x70e>
 8032daa:	f8dd c0ec 	ldr.w	ip, [sp, #236]	@ 0xec
 8032dae:	f04f 0e00 	mov.w	lr, #0
 8032db2:	e66f      	b.n	8032a94 <st_sssa8_nn_mat_mult_nt_t+0x69c>
 8032db4:	9318      	str	r3, [sp, #96]	@ 0x60
 8032db6:	e55f      	b.n	8032878 <st_sssa8_nn_mat_mult_nt_t+0x480>
 8032db8:	462a      	mov	r2, r5
 8032dba:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8032dbc:	e77b      	b.n	8032cb6 <st_sssa8_nn_mat_mult_nt_t+0x8be>
 8032dbe:	bf00      	nop

08032dc0 <malloc>:
 8032dc0:	4b02      	ldr	r3, [pc, #8]	@ (8032dcc <malloc+0xc>)
 8032dc2:	4601      	mov	r1, r0
 8032dc4:	6818      	ldr	r0, [r3, #0]
 8032dc6:	f000 b82d 	b.w	8032e24 <_malloc_r>
 8032dca:	bf00      	nop
 8032dcc:	240023e8 	.word	0x240023e8

08032dd0 <free>:
 8032dd0:	4b02      	ldr	r3, [pc, #8]	@ (8032ddc <free+0xc>)
 8032dd2:	4601      	mov	r1, r0
 8032dd4:	6818      	ldr	r0, [r3, #0]
 8032dd6:	f001 bef9 	b.w	8034bcc <_free_r>
 8032dda:	bf00      	nop
 8032ddc:	240023e8 	.word	0x240023e8

08032de0 <sbrk_aligned>:
 8032de0:	b570      	push	{r4, r5, r6, lr}
 8032de2:	4e0f      	ldr	r6, [pc, #60]	@ (8032e20 <sbrk_aligned+0x40>)
 8032de4:	460c      	mov	r4, r1
 8032de6:	6831      	ldr	r1, [r6, #0]
 8032de8:	4605      	mov	r5, r0
 8032dea:	b911      	cbnz	r1, 8032df2 <sbrk_aligned+0x12>
 8032dec:	f001 f8a4 	bl	8033f38 <_sbrk_r>
 8032df0:	6030      	str	r0, [r6, #0]
 8032df2:	4621      	mov	r1, r4
 8032df4:	4628      	mov	r0, r5
 8032df6:	f001 f89f 	bl	8033f38 <_sbrk_r>
 8032dfa:	1c43      	adds	r3, r0, #1
 8032dfc:	d103      	bne.n	8032e06 <sbrk_aligned+0x26>
 8032dfe:	f04f 34ff 	mov.w	r4, #4294967295
 8032e02:	4620      	mov	r0, r4
 8032e04:	bd70      	pop	{r4, r5, r6, pc}
 8032e06:	1cc4      	adds	r4, r0, #3
 8032e08:	f024 0403 	bic.w	r4, r4, #3
 8032e0c:	42a0      	cmp	r0, r4
 8032e0e:	d0f8      	beq.n	8032e02 <sbrk_aligned+0x22>
 8032e10:	1a21      	subs	r1, r4, r0
 8032e12:	4628      	mov	r0, r5
 8032e14:	f001 f890 	bl	8033f38 <_sbrk_r>
 8032e18:	3001      	adds	r0, #1
 8032e1a:	d1f2      	bne.n	8032e02 <sbrk_aligned+0x22>
 8032e1c:	e7ef      	b.n	8032dfe <sbrk_aligned+0x1e>
 8032e1e:	bf00      	nop
 8032e20:	24052a20 	.word	0x24052a20

08032e24 <_malloc_r>:
 8032e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8032e28:	1ccd      	adds	r5, r1, #3
 8032e2a:	f025 0503 	bic.w	r5, r5, #3
 8032e2e:	3508      	adds	r5, #8
 8032e30:	2d0c      	cmp	r5, #12
 8032e32:	bf38      	it	cc
 8032e34:	250c      	movcc	r5, #12
 8032e36:	2d00      	cmp	r5, #0
 8032e38:	4606      	mov	r6, r0
 8032e3a:	db01      	blt.n	8032e40 <_malloc_r+0x1c>
 8032e3c:	42a9      	cmp	r1, r5
 8032e3e:	d904      	bls.n	8032e4a <_malloc_r+0x26>
 8032e40:	230c      	movs	r3, #12
 8032e42:	6033      	str	r3, [r6, #0]
 8032e44:	2000      	movs	r0, #0
 8032e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8032e4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8032f20 <_malloc_r+0xfc>
 8032e4e:	f000 f869 	bl	8032f24 <__malloc_lock>
 8032e52:	f8d8 3000 	ldr.w	r3, [r8]
 8032e56:	461c      	mov	r4, r3
 8032e58:	bb44      	cbnz	r4, 8032eac <_malloc_r+0x88>
 8032e5a:	4629      	mov	r1, r5
 8032e5c:	4630      	mov	r0, r6
 8032e5e:	f7ff ffbf 	bl	8032de0 <sbrk_aligned>
 8032e62:	1c43      	adds	r3, r0, #1
 8032e64:	4604      	mov	r4, r0
 8032e66:	d158      	bne.n	8032f1a <_malloc_r+0xf6>
 8032e68:	f8d8 4000 	ldr.w	r4, [r8]
 8032e6c:	4627      	mov	r7, r4
 8032e6e:	2f00      	cmp	r7, #0
 8032e70:	d143      	bne.n	8032efa <_malloc_r+0xd6>
 8032e72:	2c00      	cmp	r4, #0
 8032e74:	d04b      	beq.n	8032f0e <_malloc_r+0xea>
 8032e76:	6823      	ldr	r3, [r4, #0]
 8032e78:	4639      	mov	r1, r7
 8032e7a:	4630      	mov	r0, r6
 8032e7c:	eb04 0903 	add.w	r9, r4, r3
 8032e80:	f001 f85a 	bl	8033f38 <_sbrk_r>
 8032e84:	4581      	cmp	r9, r0
 8032e86:	d142      	bne.n	8032f0e <_malloc_r+0xea>
 8032e88:	6821      	ldr	r1, [r4, #0]
 8032e8a:	1a6d      	subs	r5, r5, r1
 8032e8c:	4629      	mov	r1, r5
 8032e8e:	4630      	mov	r0, r6
 8032e90:	f7ff ffa6 	bl	8032de0 <sbrk_aligned>
 8032e94:	3001      	adds	r0, #1
 8032e96:	d03a      	beq.n	8032f0e <_malloc_r+0xea>
 8032e98:	6823      	ldr	r3, [r4, #0]
 8032e9a:	442b      	add	r3, r5
 8032e9c:	6023      	str	r3, [r4, #0]
 8032e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8032ea2:	685a      	ldr	r2, [r3, #4]
 8032ea4:	bb62      	cbnz	r2, 8032f00 <_malloc_r+0xdc>
 8032ea6:	f8c8 7000 	str.w	r7, [r8]
 8032eaa:	e00f      	b.n	8032ecc <_malloc_r+0xa8>
 8032eac:	6822      	ldr	r2, [r4, #0]
 8032eae:	1b52      	subs	r2, r2, r5
 8032eb0:	d420      	bmi.n	8032ef4 <_malloc_r+0xd0>
 8032eb2:	2a0b      	cmp	r2, #11
 8032eb4:	d917      	bls.n	8032ee6 <_malloc_r+0xc2>
 8032eb6:	1961      	adds	r1, r4, r5
 8032eb8:	42a3      	cmp	r3, r4
 8032eba:	6025      	str	r5, [r4, #0]
 8032ebc:	bf18      	it	ne
 8032ebe:	6059      	strne	r1, [r3, #4]
 8032ec0:	6863      	ldr	r3, [r4, #4]
 8032ec2:	bf08      	it	eq
 8032ec4:	f8c8 1000 	streq.w	r1, [r8]
 8032ec8:	5162      	str	r2, [r4, r5]
 8032eca:	604b      	str	r3, [r1, #4]
 8032ecc:	4630      	mov	r0, r6
 8032ece:	f000 f82f 	bl	8032f30 <__malloc_unlock>
 8032ed2:	f104 000b 	add.w	r0, r4, #11
 8032ed6:	1d23      	adds	r3, r4, #4
 8032ed8:	f020 0007 	bic.w	r0, r0, #7
 8032edc:	1ac2      	subs	r2, r0, r3
 8032ede:	bf1c      	itt	ne
 8032ee0:	1a1b      	subne	r3, r3, r0
 8032ee2:	50a3      	strne	r3, [r4, r2]
 8032ee4:	e7af      	b.n	8032e46 <_malloc_r+0x22>
 8032ee6:	6862      	ldr	r2, [r4, #4]
 8032ee8:	42a3      	cmp	r3, r4
 8032eea:	bf0c      	ite	eq
 8032eec:	f8c8 2000 	streq.w	r2, [r8]
 8032ef0:	605a      	strne	r2, [r3, #4]
 8032ef2:	e7eb      	b.n	8032ecc <_malloc_r+0xa8>
 8032ef4:	4623      	mov	r3, r4
 8032ef6:	6864      	ldr	r4, [r4, #4]
 8032ef8:	e7ae      	b.n	8032e58 <_malloc_r+0x34>
 8032efa:	463c      	mov	r4, r7
 8032efc:	687f      	ldr	r7, [r7, #4]
 8032efe:	e7b6      	b.n	8032e6e <_malloc_r+0x4a>
 8032f00:	461a      	mov	r2, r3
 8032f02:	685b      	ldr	r3, [r3, #4]
 8032f04:	42a3      	cmp	r3, r4
 8032f06:	d1fb      	bne.n	8032f00 <_malloc_r+0xdc>
 8032f08:	2300      	movs	r3, #0
 8032f0a:	6053      	str	r3, [r2, #4]
 8032f0c:	e7de      	b.n	8032ecc <_malloc_r+0xa8>
 8032f0e:	230c      	movs	r3, #12
 8032f10:	6033      	str	r3, [r6, #0]
 8032f12:	4630      	mov	r0, r6
 8032f14:	f000 f80c 	bl	8032f30 <__malloc_unlock>
 8032f18:	e794      	b.n	8032e44 <_malloc_r+0x20>
 8032f1a:	6005      	str	r5, [r0, #0]
 8032f1c:	e7d6      	b.n	8032ecc <_malloc_r+0xa8>
 8032f1e:	bf00      	nop
 8032f20:	24052a24 	.word	0x24052a24

08032f24 <__malloc_lock>:
 8032f24:	4801      	ldr	r0, [pc, #4]	@ (8032f2c <__malloc_lock+0x8>)
 8032f26:	f001 b854 	b.w	8033fd2 <__retarget_lock_acquire_recursive>
 8032f2a:	bf00      	nop
 8032f2c:	24052b68 	.word	0x24052b68

08032f30 <__malloc_unlock>:
 8032f30:	4801      	ldr	r0, [pc, #4]	@ (8032f38 <__malloc_unlock+0x8>)
 8032f32:	f001 b84f 	b.w	8033fd4 <__retarget_lock_release_recursive>
 8032f36:	bf00      	nop
 8032f38:	24052b68 	.word	0x24052b68

08032f3c <_realloc_r>:
 8032f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8032f40:	4607      	mov	r7, r0
 8032f42:	4614      	mov	r4, r2
 8032f44:	460d      	mov	r5, r1
 8032f46:	b921      	cbnz	r1, 8032f52 <_realloc_r+0x16>
 8032f48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8032f4c:	4611      	mov	r1, r2
 8032f4e:	f7ff bf69 	b.w	8032e24 <_malloc_r>
 8032f52:	b92a      	cbnz	r2, 8032f60 <_realloc_r+0x24>
 8032f54:	f001 fe3a 	bl	8034bcc <_free_r>
 8032f58:	4625      	mov	r5, r4
 8032f5a:	4628      	mov	r0, r5
 8032f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8032f60:	f002 fb25 	bl	80355ae <_malloc_usable_size_r>
 8032f64:	4284      	cmp	r4, r0
 8032f66:	4606      	mov	r6, r0
 8032f68:	d802      	bhi.n	8032f70 <_realloc_r+0x34>
 8032f6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8032f6e:	d8f4      	bhi.n	8032f5a <_realloc_r+0x1e>
 8032f70:	4621      	mov	r1, r4
 8032f72:	4638      	mov	r0, r7
 8032f74:	f7ff ff56 	bl	8032e24 <_malloc_r>
 8032f78:	4680      	mov	r8, r0
 8032f7a:	b908      	cbnz	r0, 8032f80 <_realloc_r+0x44>
 8032f7c:	4645      	mov	r5, r8
 8032f7e:	e7ec      	b.n	8032f5a <_realloc_r+0x1e>
 8032f80:	42b4      	cmp	r4, r6
 8032f82:	4622      	mov	r2, r4
 8032f84:	4629      	mov	r1, r5
 8032f86:	bf28      	it	cs
 8032f88:	4632      	movcs	r2, r6
 8032f8a:	f001 f824 	bl	8033fd6 <memcpy>
 8032f8e:	4629      	mov	r1, r5
 8032f90:	4638      	mov	r0, r7
 8032f92:	f001 fe1b 	bl	8034bcc <_free_r>
 8032f96:	e7f1      	b.n	8032f7c <_realloc_r+0x40>

08032f98 <__cvt>:
 8032f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8032f9a:	ed2d 8b02 	vpush	{d8}
 8032f9e:	eeb0 8b40 	vmov.f64	d8, d0
 8032fa2:	b085      	sub	sp, #20
 8032fa4:	4617      	mov	r7, r2
 8032fa6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8032fa8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8032faa:	ee18 2a90 	vmov	r2, s17
 8032fae:	f025 0520 	bic.w	r5, r5, #32
 8032fb2:	2a00      	cmp	r2, #0
 8032fb4:	bfb6      	itet	lt
 8032fb6:	222d      	movlt	r2, #45	@ 0x2d
 8032fb8:	2200      	movge	r2, #0
 8032fba:	eeb1 8b40 	vneglt.f64	d8, d0
 8032fbe:	2d46      	cmp	r5, #70	@ 0x46
 8032fc0:	460c      	mov	r4, r1
 8032fc2:	701a      	strb	r2, [r3, #0]
 8032fc4:	d004      	beq.n	8032fd0 <__cvt+0x38>
 8032fc6:	2d45      	cmp	r5, #69	@ 0x45
 8032fc8:	d100      	bne.n	8032fcc <__cvt+0x34>
 8032fca:	3401      	adds	r4, #1
 8032fcc:	2102      	movs	r1, #2
 8032fce:	e000      	b.n	8032fd2 <__cvt+0x3a>
 8032fd0:	2103      	movs	r1, #3
 8032fd2:	ab03      	add	r3, sp, #12
 8032fd4:	9301      	str	r3, [sp, #4]
 8032fd6:	ab02      	add	r3, sp, #8
 8032fd8:	9300      	str	r3, [sp, #0]
 8032fda:	4622      	mov	r2, r4
 8032fdc:	4633      	mov	r3, r6
 8032fde:	eeb0 0b48 	vmov.f64	d0, d8
 8032fe2:	f001 f895 	bl	8034110 <_dtoa_r>
 8032fe6:	2d47      	cmp	r5, #71	@ 0x47
 8032fe8:	d114      	bne.n	8033014 <__cvt+0x7c>
 8032fea:	07fb      	lsls	r3, r7, #31
 8032fec:	d50a      	bpl.n	8033004 <__cvt+0x6c>
 8032fee:	1902      	adds	r2, r0, r4
 8032ff0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8032ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8032ff8:	bf08      	it	eq
 8032ffa:	9203      	streq	r2, [sp, #12]
 8032ffc:	2130      	movs	r1, #48	@ 0x30
 8032ffe:	9b03      	ldr	r3, [sp, #12]
 8033000:	4293      	cmp	r3, r2
 8033002:	d319      	bcc.n	8033038 <__cvt+0xa0>
 8033004:	9b03      	ldr	r3, [sp, #12]
 8033006:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8033008:	1a1b      	subs	r3, r3, r0
 803300a:	6013      	str	r3, [r2, #0]
 803300c:	b005      	add	sp, #20
 803300e:	ecbd 8b02 	vpop	{d8}
 8033012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8033014:	2d46      	cmp	r5, #70	@ 0x46
 8033016:	eb00 0204 	add.w	r2, r0, r4
 803301a:	d1e9      	bne.n	8032ff0 <__cvt+0x58>
 803301c:	7803      	ldrb	r3, [r0, #0]
 803301e:	2b30      	cmp	r3, #48	@ 0x30
 8033020:	d107      	bne.n	8033032 <__cvt+0x9a>
 8033022:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8033026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803302a:	bf1c      	itt	ne
 803302c:	f1c4 0401 	rsbne	r4, r4, #1
 8033030:	6034      	strne	r4, [r6, #0]
 8033032:	6833      	ldr	r3, [r6, #0]
 8033034:	441a      	add	r2, r3
 8033036:	e7db      	b.n	8032ff0 <__cvt+0x58>
 8033038:	1c5c      	adds	r4, r3, #1
 803303a:	9403      	str	r4, [sp, #12]
 803303c:	7019      	strb	r1, [r3, #0]
 803303e:	e7de      	b.n	8032ffe <__cvt+0x66>

08033040 <__exponent>:
 8033040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8033042:	2900      	cmp	r1, #0
 8033044:	bfba      	itte	lt
 8033046:	4249      	neglt	r1, r1
 8033048:	232d      	movlt	r3, #45	@ 0x2d
 803304a:	232b      	movge	r3, #43	@ 0x2b
 803304c:	2909      	cmp	r1, #9
 803304e:	7002      	strb	r2, [r0, #0]
 8033050:	7043      	strb	r3, [r0, #1]
 8033052:	dd29      	ble.n	80330a8 <__exponent+0x68>
 8033054:	f10d 0307 	add.w	r3, sp, #7
 8033058:	461d      	mov	r5, r3
 803305a:	270a      	movs	r7, #10
 803305c:	461a      	mov	r2, r3
 803305e:	fbb1 f6f7 	udiv	r6, r1, r7
 8033062:	fb07 1416 	mls	r4, r7, r6, r1
 8033066:	3430      	adds	r4, #48	@ 0x30
 8033068:	f802 4c01 	strb.w	r4, [r2, #-1]
 803306c:	460c      	mov	r4, r1
 803306e:	2c63      	cmp	r4, #99	@ 0x63
 8033070:	f103 33ff 	add.w	r3, r3, #4294967295
 8033074:	4631      	mov	r1, r6
 8033076:	dcf1      	bgt.n	803305c <__exponent+0x1c>
 8033078:	3130      	adds	r1, #48	@ 0x30
 803307a:	1e94      	subs	r4, r2, #2
 803307c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8033080:	1c41      	adds	r1, r0, #1
 8033082:	4623      	mov	r3, r4
 8033084:	42ab      	cmp	r3, r5
 8033086:	d30a      	bcc.n	803309e <__exponent+0x5e>
 8033088:	f10d 0309 	add.w	r3, sp, #9
 803308c:	1a9b      	subs	r3, r3, r2
 803308e:	42ac      	cmp	r4, r5
 8033090:	bf88      	it	hi
 8033092:	2300      	movhi	r3, #0
 8033094:	3302      	adds	r3, #2
 8033096:	4403      	add	r3, r0
 8033098:	1a18      	subs	r0, r3, r0
 803309a:	b003      	add	sp, #12
 803309c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803309e:	f813 6b01 	ldrb.w	r6, [r3], #1
 80330a2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80330a6:	e7ed      	b.n	8033084 <__exponent+0x44>
 80330a8:	2330      	movs	r3, #48	@ 0x30
 80330aa:	3130      	adds	r1, #48	@ 0x30
 80330ac:	7083      	strb	r3, [r0, #2]
 80330ae:	70c1      	strb	r1, [r0, #3]
 80330b0:	1d03      	adds	r3, r0, #4
 80330b2:	e7f1      	b.n	8033098 <__exponent+0x58>
 80330b4:	0000      	movs	r0, r0
	...

080330b8 <_printf_float>:
 80330b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80330bc:	b08d      	sub	sp, #52	@ 0x34
 80330be:	460c      	mov	r4, r1
 80330c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80330c4:	4616      	mov	r6, r2
 80330c6:	461f      	mov	r7, r3
 80330c8:	4605      	mov	r5, r0
 80330ca:	f000 fefd 	bl	8033ec8 <_localeconv_r>
 80330ce:	f8d0 b000 	ldr.w	fp, [r0]
 80330d2:	4658      	mov	r0, fp
 80330d4:	f7dd f804 	bl	80100e0 <strlen>
 80330d8:	2300      	movs	r3, #0
 80330da:	930a      	str	r3, [sp, #40]	@ 0x28
 80330dc:	f8d8 3000 	ldr.w	r3, [r8]
 80330e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80330e4:	6822      	ldr	r2, [r4, #0]
 80330e6:	9005      	str	r0, [sp, #20]
 80330e8:	3307      	adds	r3, #7
 80330ea:	f023 0307 	bic.w	r3, r3, #7
 80330ee:	f103 0108 	add.w	r1, r3, #8
 80330f2:	f8c8 1000 	str.w	r1, [r8]
 80330f6:	ed93 0b00 	vldr	d0, [r3]
 80330fa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8033358 <_printf_float+0x2a0>
 80330fe:	eeb0 7bc0 	vabs.f64	d7, d0
 8033102:	eeb4 7b46 	vcmp.f64	d7, d6
 8033106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803310a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 803310e:	dd24      	ble.n	803315a <_printf_float+0xa2>
 8033110:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8033114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8033118:	d502      	bpl.n	8033120 <_printf_float+0x68>
 803311a:	232d      	movs	r3, #45	@ 0x2d
 803311c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8033120:	498f      	ldr	r1, [pc, #572]	@ (8033360 <_printf_float+0x2a8>)
 8033122:	4b90      	ldr	r3, [pc, #576]	@ (8033364 <_printf_float+0x2ac>)
 8033124:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8033128:	bf8c      	ite	hi
 803312a:	4688      	movhi	r8, r1
 803312c:	4698      	movls	r8, r3
 803312e:	f022 0204 	bic.w	r2, r2, #4
 8033132:	2303      	movs	r3, #3
 8033134:	6123      	str	r3, [r4, #16]
 8033136:	6022      	str	r2, [r4, #0]
 8033138:	f04f 0a00 	mov.w	sl, #0
 803313c:	9700      	str	r7, [sp, #0]
 803313e:	4633      	mov	r3, r6
 8033140:	aa0b      	add	r2, sp, #44	@ 0x2c
 8033142:	4621      	mov	r1, r4
 8033144:	4628      	mov	r0, r5
 8033146:	f000 f9d1 	bl	80334ec <_printf_common>
 803314a:	3001      	adds	r0, #1
 803314c:	f040 8089 	bne.w	8033262 <_printf_float+0x1aa>
 8033150:	f04f 30ff 	mov.w	r0, #4294967295
 8033154:	b00d      	add	sp, #52	@ 0x34
 8033156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803315a:	eeb4 0b40 	vcmp.f64	d0, d0
 803315e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8033162:	d709      	bvc.n	8033178 <_printf_float+0xc0>
 8033164:	ee10 3a90 	vmov	r3, s1
 8033168:	2b00      	cmp	r3, #0
 803316a:	bfbc      	itt	lt
 803316c:	232d      	movlt	r3, #45	@ 0x2d
 803316e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8033172:	497d      	ldr	r1, [pc, #500]	@ (8033368 <_printf_float+0x2b0>)
 8033174:	4b7d      	ldr	r3, [pc, #500]	@ (803336c <_printf_float+0x2b4>)
 8033176:	e7d5      	b.n	8033124 <_printf_float+0x6c>
 8033178:	6863      	ldr	r3, [r4, #4]
 803317a:	1c59      	adds	r1, r3, #1
 803317c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8033180:	d139      	bne.n	80331f6 <_printf_float+0x13e>
 8033182:	2306      	movs	r3, #6
 8033184:	6063      	str	r3, [r4, #4]
 8033186:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 803318a:	2300      	movs	r3, #0
 803318c:	6022      	str	r2, [r4, #0]
 803318e:	9303      	str	r3, [sp, #12]
 8033190:	ab0a      	add	r3, sp, #40	@ 0x28
 8033192:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8033196:	ab09      	add	r3, sp, #36	@ 0x24
 8033198:	9300      	str	r3, [sp, #0]
 803319a:	6861      	ldr	r1, [r4, #4]
 803319c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80331a0:	4628      	mov	r0, r5
 80331a2:	f7ff fef9 	bl	8032f98 <__cvt>
 80331a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80331aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80331ac:	4680      	mov	r8, r0
 80331ae:	d129      	bne.n	8033204 <_printf_float+0x14c>
 80331b0:	1cc8      	adds	r0, r1, #3
 80331b2:	db02      	blt.n	80331ba <_printf_float+0x102>
 80331b4:	6863      	ldr	r3, [r4, #4]
 80331b6:	4299      	cmp	r1, r3
 80331b8:	dd41      	ble.n	803323e <_printf_float+0x186>
 80331ba:	f1a9 0902 	sub.w	r9, r9, #2
 80331be:	fa5f f989 	uxtb.w	r9, r9
 80331c2:	3901      	subs	r1, #1
 80331c4:	464a      	mov	r2, r9
 80331c6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80331ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80331cc:	f7ff ff38 	bl	8033040 <__exponent>
 80331d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80331d2:	1813      	adds	r3, r2, r0
 80331d4:	2a01      	cmp	r2, #1
 80331d6:	4682      	mov	sl, r0
 80331d8:	6123      	str	r3, [r4, #16]
 80331da:	dc02      	bgt.n	80331e2 <_printf_float+0x12a>
 80331dc:	6822      	ldr	r2, [r4, #0]
 80331de:	07d2      	lsls	r2, r2, #31
 80331e0:	d501      	bpl.n	80331e6 <_printf_float+0x12e>
 80331e2:	3301      	adds	r3, #1
 80331e4:	6123      	str	r3, [r4, #16]
 80331e6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80331ea:	2b00      	cmp	r3, #0
 80331ec:	d0a6      	beq.n	803313c <_printf_float+0x84>
 80331ee:	232d      	movs	r3, #45	@ 0x2d
 80331f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80331f4:	e7a2      	b.n	803313c <_printf_float+0x84>
 80331f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80331fa:	d1c4      	bne.n	8033186 <_printf_float+0xce>
 80331fc:	2b00      	cmp	r3, #0
 80331fe:	d1c2      	bne.n	8033186 <_printf_float+0xce>
 8033200:	2301      	movs	r3, #1
 8033202:	e7bf      	b.n	8033184 <_printf_float+0xcc>
 8033204:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8033208:	d9db      	bls.n	80331c2 <_printf_float+0x10a>
 803320a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 803320e:	d118      	bne.n	8033242 <_printf_float+0x18a>
 8033210:	2900      	cmp	r1, #0
 8033212:	6863      	ldr	r3, [r4, #4]
 8033214:	dd0b      	ble.n	803322e <_printf_float+0x176>
 8033216:	6121      	str	r1, [r4, #16]
 8033218:	b913      	cbnz	r3, 8033220 <_printf_float+0x168>
 803321a:	6822      	ldr	r2, [r4, #0]
 803321c:	07d0      	lsls	r0, r2, #31
 803321e:	d502      	bpl.n	8033226 <_printf_float+0x16e>
 8033220:	3301      	adds	r3, #1
 8033222:	440b      	add	r3, r1
 8033224:	6123      	str	r3, [r4, #16]
 8033226:	65a1      	str	r1, [r4, #88]	@ 0x58
 8033228:	f04f 0a00 	mov.w	sl, #0
 803322c:	e7db      	b.n	80331e6 <_printf_float+0x12e>
 803322e:	b913      	cbnz	r3, 8033236 <_printf_float+0x17e>
 8033230:	6822      	ldr	r2, [r4, #0]
 8033232:	07d2      	lsls	r2, r2, #31
 8033234:	d501      	bpl.n	803323a <_printf_float+0x182>
 8033236:	3302      	adds	r3, #2
 8033238:	e7f4      	b.n	8033224 <_printf_float+0x16c>
 803323a:	2301      	movs	r3, #1
 803323c:	e7f2      	b.n	8033224 <_printf_float+0x16c>
 803323e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8033242:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8033244:	4299      	cmp	r1, r3
 8033246:	db05      	blt.n	8033254 <_printf_float+0x19c>
 8033248:	6823      	ldr	r3, [r4, #0]
 803324a:	6121      	str	r1, [r4, #16]
 803324c:	07d8      	lsls	r0, r3, #31
 803324e:	d5ea      	bpl.n	8033226 <_printf_float+0x16e>
 8033250:	1c4b      	adds	r3, r1, #1
 8033252:	e7e7      	b.n	8033224 <_printf_float+0x16c>
 8033254:	2900      	cmp	r1, #0
 8033256:	bfd4      	ite	le
 8033258:	f1c1 0202 	rsble	r2, r1, #2
 803325c:	2201      	movgt	r2, #1
 803325e:	4413      	add	r3, r2
 8033260:	e7e0      	b.n	8033224 <_printf_float+0x16c>
 8033262:	6823      	ldr	r3, [r4, #0]
 8033264:	055a      	lsls	r2, r3, #21
 8033266:	d407      	bmi.n	8033278 <_printf_float+0x1c0>
 8033268:	6923      	ldr	r3, [r4, #16]
 803326a:	4642      	mov	r2, r8
 803326c:	4631      	mov	r1, r6
 803326e:	4628      	mov	r0, r5
 8033270:	47b8      	blx	r7
 8033272:	3001      	adds	r0, #1
 8033274:	d12a      	bne.n	80332cc <_printf_float+0x214>
 8033276:	e76b      	b.n	8033150 <_printf_float+0x98>
 8033278:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 803327c:	f240 80e0 	bls.w	8033440 <_printf_float+0x388>
 8033280:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8033284:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8033288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803328c:	d133      	bne.n	80332f6 <_printf_float+0x23e>
 803328e:	4a38      	ldr	r2, [pc, #224]	@ (8033370 <_printf_float+0x2b8>)
 8033290:	2301      	movs	r3, #1
 8033292:	4631      	mov	r1, r6
 8033294:	4628      	mov	r0, r5
 8033296:	47b8      	blx	r7
 8033298:	3001      	adds	r0, #1
 803329a:	f43f af59 	beq.w	8033150 <_printf_float+0x98>
 803329e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80332a2:	4543      	cmp	r3, r8
 80332a4:	db02      	blt.n	80332ac <_printf_float+0x1f4>
 80332a6:	6823      	ldr	r3, [r4, #0]
 80332a8:	07d8      	lsls	r0, r3, #31
 80332aa:	d50f      	bpl.n	80332cc <_printf_float+0x214>
 80332ac:	9b05      	ldr	r3, [sp, #20]
 80332ae:	465a      	mov	r2, fp
 80332b0:	4631      	mov	r1, r6
 80332b2:	4628      	mov	r0, r5
 80332b4:	47b8      	blx	r7
 80332b6:	3001      	adds	r0, #1
 80332b8:	f43f af4a 	beq.w	8033150 <_printf_float+0x98>
 80332bc:	f04f 0900 	mov.w	r9, #0
 80332c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80332c4:	f104 0a1a 	add.w	sl, r4, #26
 80332c8:	45c8      	cmp	r8, r9
 80332ca:	dc09      	bgt.n	80332e0 <_printf_float+0x228>
 80332cc:	6823      	ldr	r3, [r4, #0]
 80332ce:	079b      	lsls	r3, r3, #30
 80332d0:	f100 8107 	bmi.w	80334e2 <_printf_float+0x42a>
 80332d4:	68e0      	ldr	r0, [r4, #12]
 80332d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80332d8:	4298      	cmp	r0, r3
 80332da:	bfb8      	it	lt
 80332dc:	4618      	movlt	r0, r3
 80332de:	e739      	b.n	8033154 <_printf_float+0x9c>
 80332e0:	2301      	movs	r3, #1
 80332e2:	4652      	mov	r2, sl
 80332e4:	4631      	mov	r1, r6
 80332e6:	4628      	mov	r0, r5
 80332e8:	47b8      	blx	r7
 80332ea:	3001      	adds	r0, #1
 80332ec:	f43f af30 	beq.w	8033150 <_printf_float+0x98>
 80332f0:	f109 0901 	add.w	r9, r9, #1
 80332f4:	e7e8      	b.n	80332c8 <_printf_float+0x210>
 80332f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80332f8:	2b00      	cmp	r3, #0
 80332fa:	dc3b      	bgt.n	8033374 <_printf_float+0x2bc>
 80332fc:	4a1c      	ldr	r2, [pc, #112]	@ (8033370 <_printf_float+0x2b8>)
 80332fe:	2301      	movs	r3, #1
 8033300:	4631      	mov	r1, r6
 8033302:	4628      	mov	r0, r5
 8033304:	47b8      	blx	r7
 8033306:	3001      	adds	r0, #1
 8033308:	f43f af22 	beq.w	8033150 <_printf_float+0x98>
 803330c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8033310:	ea59 0303 	orrs.w	r3, r9, r3
 8033314:	d102      	bne.n	803331c <_printf_float+0x264>
 8033316:	6823      	ldr	r3, [r4, #0]
 8033318:	07d9      	lsls	r1, r3, #31
 803331a:	d5d7      	bpl.n	80332cc <_printf_float+0x214>
 803331c:	9b05      	ldr	r3, [sp, #20]
 803331e:	465a      	mov	r2, fp
 8033320:	4631      	mov	r1, r6
 8033322:	4628      	mov	r0, r5
 8033324:	47b8      	blx	r7
 8033326:	3001      	adds	r0, #1
 8033328:	f43f af12 	beq.w	8033150 <_printf_float+0x98>
 803332c:	f04f 0a00 	mov.w	sl, #0
 8033330:	f104 0b1a 	add.w	fp, r4, #26
 8033334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033336:	425b      	negs	r3, r3
 8033338:	4553      	cmp	r3, sl
 803333a:	dc01      	bgt.n	8033340 <_printf_float+0x288>
 803333c:	464b      	mov	r3, r9
 803333e:	e794      	b.n	803326a <_printf_float+0x1b2>
 8033340:	2301      	movs	r3, #1
 8033342:	465a      	mov	r2, fp
 8033344:	4631      	mov	r1, r6
 8033346:	4628      	mov	r0, r5
 8033348:	47b8      	blx	r7
 803334a:	3001      	adds	r0, #1
 803334c:	f43f af00 	beq.w	8033150 <_printf_float+0x98>
 8033350:	f10a 0a01 	add.w	sl, sl, #1
 8033354:	e7ee      	b.n	8033334 <_printf_float+0x27c>
 8033356:	bf00      	nop
 8033358:	ffffffff 	.word	0xffffffff
 803335c:	7fefffff 	.word	0x7fefffff
 8033360:	0807269c 	.word	0x0807269c
 8033364:	08072698 	.word	0x08072698
 8033368:	080726a4 	.word	0x080726a4
 803336c:	080726a0 	.word	0x080726a0
 8033370:	080726a8 	.word	0x080726a8
 8033374:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8033376:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 803337a:	4553      	cmp	r3, sl
 803337c:	bfa8      	it	ge
 803337e:	4653      	movge	r3, sl
 8033380:	2b00      	cmp	r3, #0
 8033382:	4699      	mov	r9, r3
 8033384:	dc37      	bgt.n	80333f6 <_printf_float+0x33e>
 8033386:	2300      	movs	r3, #0
 8033388:	9307      	str	r3, [sp, #28]
 803338a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 803338e:	f104 021a 	add.w	r2, r4, #26
 8033392:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8033394:	9907      	ldr	r1, [sp, #28]
 8033396:	9306      	str	r3, [sp, #24]
 8033398:	eba3 0309 	sub.w	r3, r3, r9
 803339c:	428b      	cmp	r3, r1
 803339e:	dc31      	bgt.n	8033404 <_printf_float+0x34c>
 80333a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80333a2:	459a      	cmp	sl, r3
 80333a4:	dc3b      	bgt.n	803341e <_printf_float+0x366>
 80333a6:	6823      	ldr	r3, [r4, #0]
 80333a8:	07da      	lsls	r2, r3, #31
 80333aa:	d438      	bmi.n	803341e <_printf_float+0x366>
 80333ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80333ae:	ebaa 0903 	sub.w	r9, sl, r3
 80333b2:	9b06      	ldr	r3, [sp, #24]
 80333b4:	ebaa 0303 	sub.w	r3, sl, r3
 80333b8:	4599      	cmp	r9, r3
 80333ba:	bfa8      	it	ge
 80333bc:	4699      	movge	r9, r3
 80333be:	f1b9 0f00 	cmp.w	r9, #0
 80333c2:	dc34      	bgt.n	803342e <_printf_float+0x376>
 80333c4:	f04f 0800 	mov.w	r8, #0
 80333c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80333cc:	f104 0b1a 	add.w	fp, r4, #26
 80333d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80333d2:	ebaa 0303 	sub.w	r3, sl, r3
 80333d6:	eba3 0309 	sub.w	r3, r3, r9
 80333da:	4543      	cmp	r3, r8
 80333dc:	f77f af76 	ble.w	80332cc <_printf_float+0x214>
 80333e0:	2301      	movs	r3, #1
 80333e2:	465a      	mov	r2, fp
 80333e4:	4631      	mov	r1, r6
 80333e6:	4628      	mov	r0, r5
 80333e8:	47b8      	blx	r7
 80333ea:	3001      	adds	r0, #1
 80333ec:	f43f aeb0 	beq.w	8033150 <_printf_float+0x98>
 80333f0:	f108 0801 	add.w	r8, r8, #1
 80333f4:	e7ec      	b.n	80333d0 <_printf_float+0x318>
 80333f6:	4642      	mov	r2, r8
 80333f8:	4631      	mov	r1, r6
 80333fa:	4628      	mov	r0, r5
 80333fc:	47b8      	blx	r7
 80333fe:	3001      	adds	r0, #1
 8033400:	d1c1      	bne.n	8033386 <_printf_float+0x2ce>
 8033402:	e6a5      	b.n	8033150 <_printf_float+0x98>
 8033404:	2301      	movs	r3, #1
 8033406:	4631      	mov	r1, r6
 8033408:	4628      	mov	r0, r5
 803340a:	9206      	str	r2, [sp, #24]
 803340c:	47b8      	blx	r7
 803340e:	3001      	adds	r0, #1
 8033410:	f43f ae9e 	beq.w	8033150 <_printf_float+0x98>
 8033414:	9b07      	ldr	r3, [sp, #28]
 8033416:	9a06      	ldr	r2, [sp, #24]
 8033418:	3301      	adds	r3, #1
 803341a:	9307      	str	r3, [sp, #28]
 803341c:	e7b9      	b.n	8033392 <_printf_float+0x2da>
 803341e:	9b05      	ldr	r3, [sp, #20]
 8033420:	465a      	mov	r2, fp
 8033422:	4631      	mov	r1, r6
 8033424:	4628      	mov	r0, r5
 8033426:	47b8      	blx	r7
 8033428:	3001      	adds	r0, #1
 803342a:	d1bf      	bne.n	80333ac <_printf_float+0x2f4>
 803342c:	e690      	b.n	8033150 <_printf_float+0x98>
 803342e:	9a06      	ldr	r2, [sp, #24]
 8033430:	464b      	mov	r3, r9
 8033432:	4442      	add	r2, r8
 8033434:	4631      	mov	r1, r6
 8033436:	4628      	mov	r0, r5
 8033438:	47b8      	blx	r7
 803343a:	3001      	adds	r0, #1
 803343c:	d1c2      	bne.n	80333c4 <_printf_float+0x30c>
 803343e:	e687      	b.n	8033150 <_printf_float+0x98>
 8033440:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8033444:	f1b9 0f01 	cmp.w	r9, #1
 8033448:	dc01      	bgt.n	803344e <_printf_float+0x396>
 803344a:	07db      	lsls	r3, r3, #31
 803344c:	d536      	bpl.n	80334bc <_printf_float+0x404>
 803344e:	2301      	movs	r3, #1
 8033450:	4642      	mov	r2, r8
 8033452:	4631      	mov	r1, r6
 8033454:	4628      	mov	r0, r5
 8033456:	47b8      	blx	r7
 8033458:	3001      	adds	r0, #1
 803345a:	f43f ae79 	beq.w	8033150 <_printf_float+0x98>
 803345e:	9b05      	ldr	r3, [sp, #20]
 8033460:	465a      	mov	r2, fp
 8033462:	4631      	mov	r1, r6
 8033464:	4628      	mov	r0, r5
 8033466:	47b8      	blx	r7
 8033468:	3001      	adds	r0, #1
 803346a:	f43f ae71 	beq.w	8033150 <_printf_float+0x98>
 803346e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8033472:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8033476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803347a:	f109 39ff 	add.w	r9, r9, #4294967295
 803347e:	d018      	beq.n	80334b2 <_printf_float+0x3fa>
 8033480:	464b      	mov	r3, r9
 8033482:	f108 0201 	add.w	r2, r8, #1
 8033486:	4631      	mov	r1, r6
 8033488:	4628      	mov	r0, r5
 803348a:	47b8      	blx	r7
 803348c:	3001      	adds	r0, #1
 803348e:	d10c      	bne.n	80334aa <_printf_float+0x3f2>
 8033490:	e65e      	b.n	8033150 <_printf_float+0x98>
 8033492:	2301      	movs	r3, #1
 8033494:	465a      	mov	r2, fp
 8033496:	4631      	mov	r1, r6
 8033498:	4628      	mov	r0, r5
 803349a:	47b8      	blx	r7
 803349c:	3001      	adds	r0, #1
 803349e:	f43f ae57 	beq.w	8033150 <_printf_float+0x98>
 80334a2:	f108 0801 	add.w	r8, r8, #1
 80334a6:	45c8      	cmp	r8, r9
 80334a8:	dbf3      	blt.n	8033492 <_printf_float+0x3da>
 80334aa:	4653      	mov	r3, sl
 80334ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80334b0:	e6dc      	b.n	803326c <_printf_float+0x1b4>
 80334b2:	f04f 0800 	mov.w	r8, #0
 80334b6:	f104 0b1a 	add.w	fp, r4, #26
 80334ba:	e7f4      	b.n	80334a6 <_printf_float+0x3ee>
 80334bc:	2301      	movs	r3, #1
 80334be:	4642      	mov	r2, r8
 80334c0:	e7e1      	b.n	8033486 <_printf_float+0x3ce>
 80334c2:	2301      	movs	r3, #1
 80334c4:	464a      	mov	r2, r9
 80334c6:	4631      	mov	r1, r6
 80334c8:	4628      	mov	r0, r5
 80334ca:	47b8      	blx	r7
 80334cc:	3001      	adds	r0, #1
 80334ce:	f43f ae3f 	beq.w	8033150 <_printf_float+0x98>
 80334d2:	f108 0801 	add.w	r8, r8, #1
 80334d6:	68e3      	ldr	r3, [r4, #12]
 80334d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80334da:	1a5b      	subs	r3, r3, r1
 80334dc:	4543      	cmp	r3, r8
 80334de:	dcf0      	bgt.n	80334c2 <_printf_float+0x40a>
 80334e0:	e6f8      	b.n	80332d4 <_printf_float+0x21c>
 80334e2:	f04f 0800 	mov.w	r8, #0
 80334e6:	f104 0919 	add.w	r9, r4, #25
 80334ea:	e7f4      	b.n	80334d6 <_printf_float+0x41e>

080334ec <_printf_common>:
 80334ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80334f0:	4616      	mov	r6, r2
 80334f2:	4698      	mov	r8, r3
 80334f4:	688a      	ldr	r2, [r1, #8]
 80334f6:	690b      	ldr	r3, [r1, #16]
 80334f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80334fc:	4293      	cmp	r3, r2
 80334fe:	bfb8      	it	lt
 8033500:	4613      	movlt	r3, r2
 8033502:	6033      	str	r3, [r6, #0]
 8033504:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8033508:	4607      	mov	r7, r0
 803350a:	460c      	mov	r4, r1
 803350c:	b10a      	cbz	r2, 8033512 <_printf_common+0x26>
 803350e:	3301      	adds	r3, #1
 8033510:	6033      	str	r3, [r6, #0]
 8033512:	6823      	ldr	r3, [r4, #0]
 8033514:	0699      	lsls	r1, r3, #26
 8033516:	bf42      	ittt	mi
 8033518:	6833      	ldrmi	r3, [r6, #0]
 803351a:	3302      	addmi	r3, #2
 803351c:	6033      	strmi	r3, [r6, #0]
 803351e:	6825      	ldr	r5, [r4, #0]
 8033520:	f015 0506 	ands.w	r5, r5, #6
 8033524:	d106      	bne.n	8033534 <_printf_common+0x48>
 8033526:	f104 0a19 	add.w	sl, r4, #25
 803352a:	68e3      	ldr	r3, [r4, #12]
 803352c:	6832      	ldr	r2, [r6, #0]
 803352e:	1a9b      	subs	r3, r3, r2
 8033530:	42ab      	cmp	r3, r5
 8033532:	dc26      	bgt.n	8033582 <_printf_common+0x96>
 8033534:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8033538:	6822      	ldr	r2, [r4, #0]
 803353a:	3b00      	subs	r3, #0
 803353c:	bf18      	it	ne
 803353e:	2301      	movne	r3, #1
 8033540:	0692      	lsls	r2, r2, #26
 8033542:	d42b      	bmi.n	803359c <_printf_common+0xb0>
 8033544:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8033548:	4641      	mov	r1, r8
 803354a:	4638      	mov	r0, r7
 803354c:	47c8      	blx	r9
 803354e:	3001      	adds	r0, #1
 8033550:	d01e      	beq.n	8033590 <_printf_common+0xa4>
 8033552:	6823      	ldr	r3, [r4, #0]
 8033554:	6922      	ldr	r2, [r4, #16]
 8033556:	f003 0306 	and.w	r3, r3, #6
 803355a:	2b04      	cmp	r3, #4
 803355c:	bf02      	ittt	eq
 803355e:	68e5      	ldreq	r5, [r4, #12]
 8033560:	6833      	ldreq	r3, [r6, #0]
 8033562:	1aed      	subeq	r5, r5, r3
 8033564:	68a3      	ldr	r3, [r4, #8]
 8033566:	bf0c      	ite	eq
 8033568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 803356c:	2500      	movne	r5, #0
 803356e:	4293      	cmp	r3, r2
 8033570:	bfc4      	itt	gt
 8033572:	1a9b      	subgt	r3, r3, r2
 8033574:	18ed      	addgt	r5, r5, r3
 8033576:	2600      	movs	r6, #0
 8033578:	341a      	adds	r4, #26
 803357a:	42b5      	cmp	r5, r6
 803357c:	d11a      	bne.n	80335b4 <_printf_common+0xc8>
 803357e:	2000      	movs	r0, #0
 8033580:	e008      	b.n	8033594 <_printf_common+0xa8>
 8033582:	2301      	movs	r3, #1
 8033584:	4652      	mov	r2, sl
 8033586:	4641      	mov	r1, r8
 8033588:	4638      	mov	r0, r7
 803358a:	47c8      	blx	r9
 803358c:	3001      	adds	r0, #1
 803358e:	d103      	bne.n	8033598 <_printf_common+0xac>
 8033590:	f04f 30ff 	mov.w	r0, #4294967295
 8033594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8033598:	3501      	adds	r5, #1
 803359a:	e7c6      	b.n	803352a <_printf_common+0x3e>
 803359c:	18e1      	adds	r1, r4, r3
 803359e:	1c5a      	adds	r2, r3, #1
 80335a0:	2030      	movs	r0, #48	@ 0x30
 80335a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80335a6:	4422      	add	r2, r4
 80335a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80335ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80335b0:	3302      	adds	r3, #2
 80335b2:	e7c7      	b.n	8033544 <_printf_common+0x58>
 80335b4:	2301      	movs	r3, #1
 80335b6:	4622      	mov	r2, r4
 80335b8:	4641      	mov	r1, r8
 80335ba:	4638      	mov	r0, r7
 80335bc:	47c8      	blx	r9
 80335be:	3001      	adds	r0, #1
 80335c0:	d0e6      	beq.n	8033590 <_printf_common+0xa4>
 80335c2:	3601      	adds	r6, #1
 80335c4:	e7d9      	b.n	803357a <_printf_common+0x8e>
	...

080335c8 <_printf_i>:
 80335c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80335cc:	7e0f      	ldrb	r7, [r1, #24]
 80335ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80335d0:	2f78      	cmp	r7, #120	@ 0x78
 80335d2:	4691      	mov	r9, r2
 80335d4:	4680      	mov	r8, r0
 80335d6:	460c      	mov	r4, r1
 80335d8:	469a      	mov	sl, r3
 80335da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80335de:	d807      	bhi.n	80335f0 <_printf_i+0x28>
 80335e0:	2f62      	cmp	r7, #98	@ 0x62
 80335e2:	d80a      	bhi.n	80335fa <_printf_i+0x32>
 80335e4:	2f00      	cmp	r7, #0
 80335e6:	f000 80d1 	beq.w	803378c <_printf_i+0x1c4>
 80335ea:	2f58      	cmp	r7, #88	@ 0x58
 80335ec:	f000 80b8 	beq.w	8033760 <_printf_i+0x198>
 80335f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80335f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80335f8:	e03a      	b.n	8033670 <_printf_i+0xa8>
 80335fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80335fe:	2b15      	cmp	r3, #21
 8033600:	d8f6      	bhi.n	80335f0 <_printf_i+0x28>
 8033602:	a101      	add	r1, pc, #4	@ (adr r1, 8033608 <_printf_i+0x40>)
 8033604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8033608:	08033661 	.word	0x08033661
 803360c:	08033675 	.word	0x08033675
 8033610:	080335f1 	.word	0x080335f1
 8033614:	080335f1 	.word	0x080335f1
 8033618:	080335f1 	.word	0x080335f1
 803361c:	080335f1 	.word	0x080335f1
 8033620:	08033675 	.word	0x08033675
 8033624:	080335f1 	.word	0x080335f1
 8033628:	080335f1 	.word	0x080335f1
 803362c:	080335f1 	.word	0x080335f1
 8033630:	080335f1 	.word	0x080335f1
 8033634:	08033773 	.word	0x08033773
 8033638:	0803369f 	.word	0x0803369f
 803363c:	0803372d 	.word	0x0803372d
 8033640:	080335f1 	.word	0x080335f1
 8033644:	080335f1 	.word	0x080335f1
 8033648:	08033795 	.word	0x08033795
 803364c:	080335f1 	.word	0x080335f1
 8033650:	0803369f 	.word	0x0803369f
 8033654:	080335f1 	.word	0x080335f1
 8033658:	080335f1 	.word	0x080335f1
 803365c:	08033735 	.word	0x08033735
 8033660:	6833      	ldr	r3, [r6, #0]
 8033662:	1d1a      	adds	r2, r3, #4
 8033664:	681b      	ldr	r3, [r3, #0]
 8033666:	6032      	str	r2, [r6, #0]
 8033668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 803366c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8033670:	2301      	movs	r3, #1
 8033672:	e09c      	b.n	80337ae <_printf_i+0x1e6>
 8033674:	6833      	ldr	r3, [r6, #0]
 8033676:	6820      	ldr	r0, [r4, #0]
 8033678:	1d19      	adds	r1, r3, #4
 803367a:	6031      	str	r1, [r6, #0]
 803367c:	0606      	lsls	r6, r0, #24
 803367e:	d501      	bpl.n	8033684 <_printf_i+0xbc>
 8033680:	681d      	ldr	r5, [r3, #0]
 8033682:	e003      	b.n	803368c <_printf_i+0xc4>
 8033684:	0645      	lsls	r5, r0, #25
 8033686:	d5fb      	bpl.n	8033680 <_printf_i+0xb8>
 8033688:	f9b3 5000 	ldrsh.w	r5, [r3]
 803368c:	2d00      	cmp	r5, #0
 803368e:	da03      	bge.n	8033698 <_printf_i+0xd0>
 8033690:	232d      	movs	r3, #45	@ 0x2d
 8033692:	426d      	negs	r5, r5
 8033694:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8033698:	4858      	ldr	r0, [pc, #352]	@ (80337fc <_printf_i+0x234>)
 803369a:	230a      	movs	r3, #10
 803369c:	e011      	b.n	80336c2 <_printf_i+0xfa>
 803369e:	6821      	ldr	r1, [r4, #0]
 80336a0:	6833      	ldr	r3, [r6, #0]
 80336a2:	0608      	lsls	r0, r1, #24
 80336a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80336a8:	d402      	bmi.n	80336b0 <_printf_i+0xe8>
 80336aa:	0649      	lsls	r1, r1, #25
 80336ac:	bf48      	it	mi
 80336ae:	b2ad      	uxthmi	r5, r5
 80336b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80336b2:	4852      	ldr	r0, [pc, #328]	@ (80337fc <_printf_i+0x234>)
 80336b4:	6033      	str	r3, [r6, #0]
 80336b6:	bf14      	ite	ne
 80336b8:	230a      	movne	r3, #10
 80336ba:	2308      	moveq	r3, #8
 80336bc:	2100      	movs	r1, #0
 80336be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80336c2:	6866      	ldr	r6, [r4, #4]
 80336c4:	60a6      	str	r6, [r4, #8]
 80336c6:	2e00      	cmp	r6, #0
 80336c8:	db05      	blt.n	80336d6 <_printf_i+0x10e>
 80336ca:	6821      	ldr	r1, [r4, #0]
 80336cc:	432e      	orrs	r6, r5
 80336ce:	f021 0104 	bic.w	r1, r1, #4
 80336d2:	6021      	str	r1, [r4, #0]
 80336d4:	d04b      	beq.n	803376e <_printf_i+0x1a6>
 80336d6:	4616      	mov	r6, r2
 80336d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80336dc:	fb03 5711 	mls	r7, r3, r1, r5
 80336e0:	5dc7      	ldrb	r7, [r0, r7]
 80336e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80336e6:	462f      	mov	r7, r5
 80336e8:	42bb      	cmp	r3, r7
 80336ea:	460d      	mov	r5, r1
 80336ec:	d9f4      	bls.n	80336d8 <_printf_i+0x110>
 80336ee:	2b08      	cmp	r3, #8
 80336f0:	d10b      	bne.n	803370a <_printf_i+0x142>
 80336f2:	6823      	ldr	r3, [r4, #0]
 80336f4:	07df      	lsls	r7, r3, #31
 80336f6:	d508      	bpl.n	803370a <_printf_i+0x142>
 80336f8:	6923      	ldr	r3, [r4, #16]
 80336fa:	6861      	ldr	r1, [r4, #4]
 80336fc:	4299      	cmp	r1, r3
 80336fe:	bfde      	ittt	le
 8033700:	2330      	movle	r3, #48	@ 0x30
 8033702:	f806 3c01 	strble.w	r3, [r6, #-1]
 8033706:	f106 36ff 	addle.w	r6, r6, #4294967295
 803370a:	1b92      	subs	r2, r2, r6
 803370c:	6122      	str	r2, [r4, #16]
 803370e:	f8cd a000 	str.w	sl, [sp]
 8033712:	464b      	mov	r3, r9
 8033714:	aa03      	add	r2, sp, #12
 8033716:	4621      	mov	r1, r4
 8033718:	4640      	mov	r0, r8
 803371a:	f7ff fee7 	bl	80334ec <_printf_common>
 803371e:	3001      	adds	r0, #1
 8033720:	d14a      	bne.n	80337b8 <_printf_i+0x1f0>
 8033722:	f04f 30ff 	mov.w	r0, #4294967295
 8033726:	b004      	add	sp, #16
 8033728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803372c:	6823      	ldr	r3, [r4, #0]
 803372e:	f043 0320 	orr.w	r3, r3, #32
 8033732:	6023      	str	r3, [r4, #0]
 8033734:	4832      	ldr	r0, [pc, #200]	@ (8033800 <_printf_i+0x238>)
 8033736:	2778      	movs	r7, #120	@ 0x78
 8033738:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 803373c:	6823      	ldr	r3, [r4, #0]
 803373e:	6831      	ldr	r1, [r6, #0]
 8033740:	061f      	lsls	r7, r3, #24
 8033742:	f851 5b04 	ldr.w	r5, [r1], #4
 8033746:	d402      	bmi.n	803374e <_printf_i+0x186>
 8033748:	065f      	lsls	r7, r3, #25
 803374a:	bf48      	it	mi
 803374c:	b2ad      	uxthmi	r5, r5
 803374e:	6031      	str	r1, [r6, #0]
 8033750:	07d9      	lsls	r1, r3, #31
 8033752:	bf44      	itt	mi
 8033754:	f043 0320 	orrmi.w	r3, r3, #32
 8033758:	6023      	strmi	r3, [r4, #0]
 803375a:	b11d      	cbz	r5, 8033764 <_printf_i+0x19c>
 803375c:	2310      	movs	r3, #16
 803375e:	e7ad      	b.n	80336bc <_printf_i+0xf4>
 8033760:	4826      	ldr	r0, [pc, #152]	@ (80337fc <_printf_i+0x234>)
 8033762:	e7e9      	b.n	8033738 <_printf_i+0x170>
 8033764:	6823      	ldr	r3, [r4, #0]
 8033766:	f023 0320 	bic.w	r3, r3, #32
 803376a:	6023      	str	r3, [r4, #0]
 803376c:	e7f6      	b.n	803375c <_printf_i+0x194>
 803376e:	4616      	mov	r6, r2
 8033770:	e7bd      	b.n	80336ee <_printf_i+0x126>
 8033772:	6833      	ldr	r3, [r6, #0]
 8033774:	6825      	ldr	r5, [r4, #0]
 8033776:	6961      	ldr	r1, [r4, #20]
 8033778:	1d18      	adds	r0, r3, #4
 803377a:	6030      	str	r0, [r6, #0]
 803377c:	062e      	lsls	r6, r5, #24
 803377e:	681b      	ldr	r3, [r3, #0]
 8033780:	d501      	bpl.n	8033786 <_printf_i+0x1be>
 8033782:	6019      	str	r1, [r3, #0]
 8033784:	e002      	b.n	803378c <_printf_i+0x1c4>
 8033786:	0668      	lsls	r0, r5, #25
 8033788:	d5fb      	bpl.n	8033782 <_printf_i+0x1ba>
 803378a:	8019      	strh	r1, [r3, #0]
 803378c:	2300      	movs	r3, #0
 803378e:	6123      	str	r3, [r4, #16]
 8033790:	4616      	mov	r6, r2
 8033792:	e7bc      	b.n	803370e <_printf_i+0x146>
 8033794:	6833      	ldr	r3, [r6, #0]
 8033796:	1d1a      	adds	r2, r3, #4
 8033798:	6032      	str	r2, [r6, #0]
 803379a:	681e      	ldr	r6, [r3, #0]
 803379c:	6862      	ldr	r2, [r4, #4]
 803379e:	2100      	movs	r1, #0
 80337a0:	4630      	mov	r0, r6
 80337a2:	f7dc fc4d 	bl	8010040 <memchr>
 80337a6:	b108      	cbz	r0, 80337ac <_printf_i+0x1e4>
 80337a8:	1b80      	subs	r0, r0, r6
 80337aa:	6060      	str	r0, [r4, #4]
 80337ac:	6863      	ldr	r3, [r4, #4]
 80337ae:	6123      	str	r3, [r4, #16]
 80337b0:	2300      	movs	r3, #0
 80337b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80337b6:	e7aa      	b.n	803370e <_printf_i+0x146>
 80337b8:	6923      	ldr	r3, [r4, #16]
 80337ba:	4632      	mov	r2, r6
 80337bc:	4649      	mov	r1, r9
 80337be:	4640      	mov	r0, r8
 80337c0:	47d0      	blx	sl
 80337c2:	3001      	adds	r0, #1
 80337c4:	d0ad      	beq.n	8033722 <_printf_i+0x15a>
 80337c6:	6823      	ldr	r3, [r4, #0]
 80337c8:	079b      	lsls	r3, r3, #30
 80337ca:	d413      	bmi.n	80337f4 <_printf_i+0x22c>
 80337cc:	68e0      	ldr	r0, [r4, #12]
 80337ce:	9b03      	ldr	r3, [sp, #12]
 80337d0:	4298      	cmp	r0, r3
 80337d2:	bfb8      	it	lt
 80337d4:	4618      	movlt	r0, r3
 80337d6:	e7a6      	b.n	8033726 <_printf_i+0x15e>
 80337d8:	2301      	movs	r3, #1
 80337da:	4632      	mov	r2, r6
 80337dc:	4649      	mov	r1, r9
 80337de:	4640      	mov	r0, r8
 80337e0:	47d0      	blx	sl
 80337e2:	3001      	adds	r0, #1
 80337e4:	d09d      	beq.n	8033722 <_printf_i+0x15a>
 80337e6:	3501      	adds	r5, #1
 80337e8:	68e3      	ldr	r3, [r4, #12]
 80337ea:	9903      	ldr	r1, [sp, #12]
 80337ec:	1a5b      	subs	r3, r3, r1
 80337ee:	42ab      	cmp	r3, r5
 80337f0:	dcf2      	bgt.n	80337d8 <_printf_i+0x210>
 80337f2:	e7eb      	b.n	80337cc <_printf_i+0x204>
 80337f4:	2500      	movs	r5, #0
 80337f6:	f104 0619 	add.w	r6, r4, #25
 80337fa:	e7f5      	b.n	80337e8 <_printf_i+0x220>
 80337fc:	080726aa 	.word	0x080726aa
 8033800:	080726bb 	.word	0x080726bb

08033804 <_scanf_float>:
 8033804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033808:	b087      	sub	sp, #28
 803380a:	4691      	mov	r9, r2
 803380c:	9303      	str	r3, [sp, #12]
 803380e:	688b      	ldr	r3, [r1, #8]
 8033810:	1e5a      	subs	r2, r3, #1
 8033812:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8033816:	bf81      	itttt	hi
 8033818:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 803381c:	eb03 0b05 	addhi.w	fp, r3, r5
 8033820:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8033824:	608b      	strhi	r3, [r1, #8]
 8033826:	680b      	ldr	r3, [r1, #0]
 8033828:	460a      	mov	r2, r1
 803382a:	f04f 0500 	mov.w	r5, #0
 803382e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8033832:	f842 3b1c 	str.w	r3, [r2], #28
 8033836:	e9cd 5504 	strd	r5, r5, [sp, #16]
 803383a:	4680      	mov	r8, r0
 803383c:	460c      	mov	r4, r1
 803383e:	bf98      	it	ls
 8033840:	f04f 0b00 	movls.w	fp, #0
 8033844:	9201      	str	r2, [sp, #4]
 8033846:	4616      	mov	r6, r2
 8033848:	46aa      	mov	sl, r5
 803384a:	462f      	mov	r7, r5
 803384c:	9502      	str	r5, [sp, #8]
 803384e:	68a2      	ldr	r2, [r4, #8]
 8033850:	b15a      	cbz	r2, 803386a <_scanf_float+0x66>
 8033852:	f8d9 3000 	ldr.w	r3, [r9]
 8033856:	781b      	ldrb	r3, [r3, #0]
 8033858:	2b4e      	cmp	r3, #78	@ 0x4e
 803385a:	d863      	bhi.n	8033924 <_scanf_float+0x120>
 803385c:	2b40      	cmp	r3, #64	@ 0x40
 803385e:	d83b      	bhi.n	80338d8 <_scanf_float+0xd4>
 8033860:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8033864:	b2c8      	uxtb	r0, r1
 8033866:	280e      	cmp	r0, #14
 8033868:	d939      	bls.n	80338de <_scanf_float+0xda>
 803386a:	b11f      	cbz	r7, 8033874 <_scanf_float+0x70>
 803386c:	6823      	ldr	r3, [r4, #0]
 803386e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8033872:	6023      	str	r3, [r4, #0]
 8033874:	f10a 3aff 	add.w	sl, sl, #4294967295
 8033878:	f1ba 0f01 	cmp.w	sl, #1
 803387c:	f200 8114 	bhi.w	8033aa8 <_scanf_float+0x2a4>
 8033880:	9b01      	ldr	r3, [sp, #4]
 8033882:	429e      	cmp	r6, r3
 8033884:	f200 8105 	bhi.w	8033a92 <_scanf_float+0x28e>
 8033888:	2001      	movs	r0, #1
 803388a:	b007      	add	sp, #28
 803388c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033890:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8033894:	2a0d      	cmp	r2, #13
 8033896:	d8e8      	bhi.n	803386a <_scanf_float+0x66>
 8033898:	a101      	add	r1, pc, #4	@ (adr r1, 80338a0 <_scanf_float+0x9c>)
 803389a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 803389e:	bf00      	nop
 80338a0:	080339e9 	.word	0x080339e9
 80338a4:	0803386b 	.word	0x0803386b
 80338a8:	0803386b 	.word	0x0803386b
 80338ac:	0803386b 	.word	0x0803386b
 80338b0:	08033a45 	.word	0x08033a45
 80338b4:	08033a1f 	.word	0x08033a1f
 80338b8:	0803386b 	.word	0x0803386b
 80338bc:	0803386b 	.word	0x0803386b
 80338c0:	080339f7 	.word	0x080339f7
 80338c4:	0803386b 	.word	0x0803386b
 80338c8:	0803386b 	.word	0x0803386b
 80338cc:	0803386b 	.word	0x0803386b
 80338d0:	0803386b 	.word	0x0803386b
 80338d4:	080339b3 	.word	0x080339b3
 80338d8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80338dc:	e7da      	b.n	8033894 <_scanf_float+0x90>
 80338de:	290e      	cmp	r1, #14
 80338e0:	d8c3      	bhi.n	803386a <_scanf_float+0x66>
 80338e2:	a001      	add	r0, pc, #4	@ (adr r0, 80338e8 <_scanf_float+0xe4>)
 80338e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80338e8:	080339a3 	.word	0x080339a3
 80338ec:	0803386b 	.word	0x0803386b
 80338f0:	080339a3 	.word	0x080339a3
 80338f4:	08033a33 	.word	0x08033a33
 80338f8:	0803386b 	.word	0x0803386b
 80338fc:	08033945 	.word	0x08033945
 8033900:	08033989 	.word	0x08033989
 8033904:	08033989 	.word	0x08033989
 8033908:	08033989 	.word	0x08033989
 803390c:	08033989 	.word	0x08033989
 8033910:	08033989 	.word	0x08033989
 8033914:	08033989 	.word	0x08033989
 8033918:	08033989 	.word	0x08033989
 803391c:	08033989 	.word	0x08033989
 8033920:	08033989 	.word	0x08033989
 8033924:	2b6e      	cmp	r3, #110	@ 0x6e
 8033926:	d809      	bhi.n	803393c <_scanf_float+0x138>
 8033928:	2b60      	cmp	r3, #96	@ 0x60
 803392a:	d8b1      	bhi.n	8033890 <_scanf_float+0x8c>
 803392c:	2b54      	cmp	r3, #84	@ 0x54
 803392e:	d07b      	beq.n	8033a28 <_scanf_float+0x224>
 8033930:	2b59      	cmp	r3, #89	@ 0x59
 8033932:	d19a      	bne.n	803386a <_scanf_float+0x66>
 8033934:	2d07      	cmp	r5, #7
 8033936:	d198      	bne.n	803386a <_scanf_float+0x66>
 8033938:	2508      	movs	r5, #8
 803393a:	e02f      	b.n	803399c <_scanf_float+0x198>
 803393c:	2b74      	cmp	r3, #116	@ 0x74
 803393e:	d073      	beq.n	8033a28 <_scanf_float+0x224>
 8033940:	2b79      	cmp	r3, #121	@ 0x79
 8033942:	e7f6      	b.n	8033932 <_scanf_float+0x12e>
 8033944:	6821      	ldr	r1, [r4, #0]
 8033946:	05c8      	lsls	r0, r1, #23
 8033948:	d51e      	bpl.n	8033988 <_scanf_float+0x184>
 803394a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 803394e:	6021      	str	r1, [r4, #0]
 8033950:	3701      	adds	r7, #1
 8033952:	f1bb 0f00 	cmp.w	fp, #0
 8033956:	d003      	beq.n	8033960 <_scanf_float+0x15c>
 8033958:	3201      	adds	r2, #1
 803395a:	f10b 3bff 	add.w	fp, fp, #4294967295
 803395e:	60a2      	str	r2, [r4, #8]
 8033960:	68a3      	ldr	r3, [r4, #8]
 8033962:	3b01      	subs	r3, #1
 8033964:	60a3      	str	r3, [r4, #8]
 8033966:	6923      	ldr	r3, [r4, #16]
 8033968:	3301      	adds	r3, #1
 803396a:	6123      	str	r3, [r4, #16]
 803396c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8033970:	3b01      	subs	r3, #1
 8033972:	2b00      	cmp	r3, #0
 8033974:	f8c9 3004 	str.w	r3, [r9, #4]
 8033978:	f340 8082 	ble.w	8033a80 <_scanf_float+0x27c>
 803397c:	f8d9 3000 	ldr.w	r3, [r9]
 8033980:	3301      	adds	r3, #1
 8033982:	f8c9 3000 	str.w	r3, [r9]
 8033986:	e762      	b.n	803384e <_scanf_float+0x4a>
 8033988:	eb1a 0105 	adds.w	r1, sl, r5
 803398c:	f47f af6d 	bne.w	803386a <_scanf_float+0x66>
 8033990:	6822      	ldr	r2, [r4, #0]
 8033992:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8033996:	6022      	str	r2, [r4, #0]
 8033998:	460d      	mov	r5, r1
 803399a:	468a      	mov	sl, r1
 803399c:	f806 3b01 	strb.w	r3, [r6], #1
 80339a0:	e7de      	b.n	8033960 <_scanf_float+0x15c>
 80339a2:	6822      	ldr	r2, [r4, #0]
 80339a4:	0610      	lsls	r0, r2, #24
 80339a6:	f57f af60 	bpl.w	803386a <_scanf_float+0x66>
 80339aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80339ae:	6022      	str	r2, [r4, #0]
 80339b0:	e7f4      	b.n	803399c <_scanf_float+0x198>
 80339b2:	f1ba 0f00 	cmp.w	sl, #0
 80339b6:	d10c      	bne.n	80339d2 <_scanf_float+0x1ce>
 80339b8:	b977      	cbnz	r7, 80339d8 <_scanf_float+0x1d4>
 80339ba:	6822      	ldr	r2, [r4, #0]
 80339bc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80339c0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80339c4:	d108      	bne.n	80339d8 <_scanf_float+0x1d4>
 80339c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80339ca:	6022      	str	r2, [r4, #0]
 80339cc:	f04f 0a01 	mov.w	sl, #1
 80339d0:	e7e4      	b.n	803399c <_scanf_float+0x198>
 80339d2:	f1ba 0f02 	cmp.w	sl, #2
 80339d6:	d050      	beq.n	8033a7a <_scanf_float+0x276>
 80339d8:	2d01      	cmp	r5, #1
 80339da:	d002      	beq.n	80339e2 <_scanf_float+0x1de>
 80339dc:	2d04      	cmp	r5, #4
 80339de:	f47f af44 	bne.w	803386a <_scanf_float+0x66>
 80339e2:	3501      	adds	r5, #1
 80339e4:	b2ed      	uxtb	r5, r5
 80339e6:	e7d9      	b.n	803399c <_scanf_float+0x198>
 80339e8:	f1ba 0f01 	cmp.w	sl, #1
 80339ec:	f47f af3d 	bne.w	803386a <_scanf_float+0x66>
 80339f0:	f04f 0a02 	mov.w	sl, #2
 80339f4:	e7d2      	b.n	803399c <_scanf_float+0x198>
 80339f6:	b975      	cbnz	r5, 8033a16 <_scanf_float+0x212>
 80339f8:	2f00      	cmp	r7, #0
 80339fa:	f47f af37 	bne.w	803386c <_scanf_float+0x68>
 80339fe:	6822      	ldr	r2, [r4, #0]
 8033a00:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8033a04:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8033a08:	f040 80fc 	bne.w	8033c04 <_scanf_float+0x400>
 8033a0c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8033a10:	6022      	str	r2, [r4, #0]
 8033a12:	2501      	movs	r5, #1
 8033a14:	e7c2      	b.n	803399c <_scanf_float+0x198>
 8033a16:	2d03      	cmp	r5, #3
 8033a18:	d0e3      	beq.n	80339e2 <_scanf_float+0x1de>
 8033a1a:	2d05      	cmp	r5, #5
 8033a1c:	e7df      	b.n	80339de <_scanf_float+0x1da>
 8033a1e:	2d02      	cmp	r5, #2
 8033a20:	f47f af23 	bne.w	803386a <_scanf_float+0x66>
 8033a24:	2503      	movs	r5, #3
 8033a26:	e7b9      	b.n	803399c <_scanf_float+0x198>
 8033a28:	2d06      	cmp	r5, #6
 8033a2a:	f47f af1e 	bne.w	803386a <_scanf_float+0x66>
 8033a2e:	2507      	movs	r5, #7
 8033a30:	e7b4      	b.n	803399c <_scanf_float+0x198>
 8033a32:	6822      	ldr	r2, [r4, #0]
 8033a34:	0591      	lsls	r1, r2, #22
 8033a36:	f57f af18 	bpl.w	803386a <_scanf_float+0x66>
 8033a3a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8033a3e:	6022      	str	r2, [r4, #0]
 8033a40:	9702      	str	r7, [sp, #8]
 8033a42:	e7ab      	b.n	803399c <_scanf_float+0x198>
 8033a44:	6822      	ldr	r2, [r4, #0]
 8033a46:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8033a4a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8033a4e:	d005      	beq.n	8033a5c <_scanf_float+0x258>
 8033a50:	0550      	lsls	r0, r2, #21
 8033a52:	f57f af0a 	bpl.w	803386a <_scanf_float+0x66>
 8033a56:	2f00      	cmp	r7, #0
 8033a58:	f000 80d4 	beq.w	8033c04 <_scanf_float+0x400>
 8033a5c:	0591      	lsls	r1, r2, #22
 8033a5e:	bf58      	it	pl
 8033a60:	9902      	ldrpl	r1, [sp, #8]
 8033a62:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8033a66:	bf58      	it	pl
 8033a68:	1a79      	subpl	r1, r7, r1
 8033a6a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8033a6e:	bf58      	it	pl
 8033a70:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8033a74:	6022      	str	r2, [r4, #0]
 8033a76:	2700      	movs	r7, #0
 8033a78:	e790      	b.n	803399c <_scanf_float+0x198>
 8033a7a:	f04f 0a03 	mov.w	sl, #3
 8033a7e:	e78d      	b.n	803399c <_scanf_float+0x198>
 8033a80:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8033a84:	4649      	mov	r1, r9
 8033a86:	4640      	mov	r0, r8
 8033a88:	4798      	blx	r3
 8033a8a:	2800      	cmp	r0, #0
 8033a8c:	f43f aedf 	beq.w	803384e <_scanf_float+0x4a>
 8033a90:	e6eb      	b.n	803386a <_scanf_float+0x66>
 8033a92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8033a96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8033a9a:	464a      	mov	r2, r9
 8033a9c:	4640      	mov	r0, r8
 8033a9e:	4798      	blx	r3
 8033aa0:	6923      	ldr	r3, [r4, #16]
 8033aa2:	3b01      	subs	r3, #1
 8033aa4:	6123      	str	r3, [r4, #16]
 8033aa6:	e6eb      	b.n	8033880 <_scanf_float+0x7c>
 8033aa8:	1e6b      	subs	r3, r5, #1
 8033aaa:	2b06      	cmp	r3, #6
 8033aac:	d824      	bhi.n	8033af8 <_scanf_float+0x2f4>
 8033aae:	2d02      	cmp	r5, #2
 8033ab0:	d836      	bhi.n	8033b20 <_scanf_float+0x31c>
 8033ab2:	9b01      	ldr	r3, [sp, #4]
 8033ab4:	429e      	cmp	r6, r3
 8033ab6:	f67f aee7 	bls.w	8033888 <_scanf_float+0x84>
 8033aba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8033abe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8033ac2:	464a      	mov	r2, r9
 8033ac4:	4640      	mov	r0, r8
 8033ac6:	4798      	blx	r3
 8033ac8:	6923      	ldr	r3, [r4, #16]
 8033aca:	3b01      	subs	r3, #1
 8033acc:	6123      	str	r3, [r4, #16]
 8033ace:	e7f0      	b.n	8033ab2 <_scanf_float+0x2ae>
 8033ad0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8033ad4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8033ad8:	464a      	mov	r2, r9
 8033ada:	4640      	mov	r0, r8
 8033adc:	4798      	blx	r3
 8033ade:	6923      	ldr	r3, [r4, #16]
 8033ae0:	3b01      	subs	r3, #1
 8033ae2:	6123      	str	r3, [r4, #16]
 8033ae4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8033ae8:	fa5f fa8a 	uxtb.w	sl, sl
 8033aec:	f1ba 0f02 	cmp.w	sl, #2
 8033af0:	d1ee      	bne.n	8033ad0 <_scanf_float+0x2cc>
 8033af2:	3d03      	subs	r5, #3
 8033af4:	b2ed      	uxtb	r5, r5
 8033af6:	1b76      	subs	r6, r6, r5
 8033af8:	6823      	ldr	r3, [r4, #0]
 8033afa:	05da      	lsls	r2, r3, #23
 8033afc:	d530      	bpl.n	8033b60 <_scanf_float+0x35c>
 8033afe:	055b      	lsls	r3, r3, #21
 8033b00:	d511      	bpl.n	8033b26 <_scanf_float+0x322>
 8033b02:	9b01      	ldr	r3, [sp, #4]
 8033b04:	429e      	cmp	r6, r3
 8033b06:	f67f aebf 	bls.w	8033888 <_scanf_float+0x84>
 8033b0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8033b0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8033b12:	464a      	mov	r2, r9
 8033b14:	4640      	mov	r0, r8
 8033b16:	4798      	blx	r3
 8033b18:	6923      	ldr	r3, [r4, #16]
 8033b1a:	3b01      	subs	r3, #1
 8033b1c:	6123      	str	r3, [r4, #16]
 8033b1e:	e7f0      	b.n	8033b02 <_scanf_float+0x2fe>
 8033b20:	46aa      	mov	sl, r5
 8033b22:	46b3      	mov	fp, r6
 8033b24:	e7de      	b.n	8033ae4 <_scanf_float+0x2e0>
 8033b26:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8033b2a:	6923      	ldr	r3, [r4, #16]
 8033b2c:	2965      	cmp	r1, #101	@ 0x65
 8033b2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8033b32:	f106 35ff 	add.w	r5, r6, #4294967295
 8033b36:	6123      	str	r3, [r4, #16]
 8033b38:	d00c      	beq.n	8033b54 <_scanf_float+0x350>
 8033b3a:	2945      	cmp	r1, #69	@ 0x45
 8033b3c:	d00a      	beq.n	8033b54 <_scanf_float+0x350>
 8033b3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8033b42:	464a      	mov	r2, r9
 8033b44:	4640      	mov	r0, r8
 8033b46:	4798      	blx	r3
 8033b48:	6923      	ldr	r3, [r4, #16]
 8033b4a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8033b4e:	3b01      	subs	r3, #1
 8033b50:	1eb5      	subs	r5, r6, #2
 8033b52:	6123      	str	r3, [r4, #16]
 8033b54:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8033b58:	464a      	mov	r2, r9
 8033b5a:	4640      	mov	r0, r8
 8033b5c:	4798      	blx	r3
 8033b5e:	462e      	mov	r6, r5
 8033b60:	6822      	ldr	r2, [r4, #0]
 8033b62:	f012 0210 	ands.w	r2, r2, #16
 8033b66:	d001      	beq.n	8033b6c <_scanf_float+0x368>
 8033b68:	2000      	movs	r0, #0
 8033b6a:	e68e      	b.n	803388a <_scanf_float+0x86>
 8033b6c:	7032      	strb	r2, [r6, #0]
 8033b6e:	6823      	ldr	r3, [r4, #0]
 8033b70:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8033b74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8033b78:	d123      	bne.n	8033bc2 <_scanf_float+0x3be>
 8033b7a:	9b02      	ldr	r3, [sp, #8]
 8033b7c:	429f      	cmp	r7, r3
 8033b7e:	d00a      	beq.n	8033b96 <_scanf_float+0x392>
 8033b80:	1bda      	subs	r2, r3, r7
 8033b82:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8033b86:	429e      	cmp	r6, r3
 8033b88:	bf28      	it	cs
 8033b8a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8033b8e:	491e      	ldr	r1, [pc, #120]	@ (8033c08 <_scanf_float+0x404>)
 8033b90:	4630      	mov	r0, r6
 8033b92:	f000 f8ff 	bl	8033d94 <siprintf>
 8033b96:	9901      	ldr	r1, [sp, #4]
 8033b98:	2200      	movs	r2, #0
 8033b9a:	4640      	mov	r0, r8
 8033b9c:	f002 fac6 	bl	803612c <_strtod_r>
 8033ba0:	9b03      	ldr	r3, [sp, #12]
 8033ba2:	6821      	ldr	r1, [r4, #0]
 8033ba4:	681b      	ldr	r3, [r3, #0]
 8033ba6:	f011 0f02 	tst.w	r1, #2
 8033baa:	f103 0204 	add.w	r2, r3, #4
 8033bae:	d015      	beq.n	8033bdc <_scanf_float+0x3d8>
 8033bb0:	9903      	ldr	r1, [sp, #12]
 8033bb2:	600a      	str	r2, [r1, #0]
 8033bb4:	681b      	ldr	r3, [r3, #0]
 8033bb6:	ed83 0b00 	vstr	d0, [r3]
 8033bba:	68e3      	ldr	r3, [r4, #12]
 8033bbc:	3301      	adds	r3, #1
 8033bbe:	60e3      	str	r3, [r4, #12]
 8033bc0:	e7d2      	b.n	8033b68 <_scanf_float+0x364>
 8033bc2:	9b04      	ldr	r3, [sp, #16]
 8033bc4:	2b00      	cmp	r3, #0
 8033bc6:	d0e6      	beq.n	8033b96 <_scanf_float+0x392>
 8033bc8:	9905      	ldr	r1, [sp, #20]
 8033bca:	230a      	movs	r3, #10
 8033bcc:	3101      	adds	r1, #1
 8033bce:	4640      	mov	r0, r8
 8033bd0:	f002 fb2c 	bl	803622c <_strtol_r>
 8033bd4:	9b04      	ldr	r3, [sp, #16]
 8033bd6:	9e05      	ldr	r6, [sp, #20]
 8033bd8:	1ac2      	subs	r2, r0, r3
 8033bda:	e7d2      	b.n	8033b82 <_scanf_float+0x37e>
 8033bdc:	f011 0f04 	tst.w	r1, #4
 8033be0:	9903      	ldr	r1, [sp, #12]
 8033be2:	600a      	str	r2, [r1, #0]
 8033be4:	d1e6      	bne.n	8033bb4 <_scanf_float+0x3b0>
 8033be6:	eeb4 0b40 	vcmp.f64	d0, d0
 8033bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8033bee:	681d      	ldr	r5, [r3, #0]
 8033bf0:	d705      	bvc.n	8033bfe <_scanf_float+0x3fa>
 8033bf2:	4806      	ldr	r0, [pc, #24]	@ (8033c0c <_scanf_float+0x408>)
 8033bf4:	f000 f9fe 	bl	8033ff4 <nanf>
 8033bf8:	ed85 0a00 	vstr	s0, [r5]
 8033bfc:	e7dd      	b.n	8033bba <_scanf_float+0x3b6>
 8033bfe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8033c02:	e7f9      	b.n	8033bf8 <_scanf_float+0x3f4>
 8033c04:	2700      	movs	r7, #0
 8033c06:	e635      	b.n	8033874 <_scanf_float+0x70>
 8033c08:	080726cc 	.word	0x080726cc
 8033c0c:	0807280d 	.word	0x0807280d

08033c10 <std>:
 8033c10:	2300      	movs	r3, #0
 8033c12:	b510      	push	{r4, lr}
 8033c14:	4604      	mov	r4, r0
 8033c16:	e9c0 3300 	strd	r3, r3, [r0]
 8033c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8033c1e:	6083      	str	r3, [r0, #8]
 8033c20:	8181      	strh	r1, [r0, #12]
 8033c22:	6643      	str	r3, [r0, #100]	@ 0x64
 8033c24:	81c2      	strh	r2, [r0, #14]
 8033c26:	6183      	str	r3, [r0, #24]
 8033c28:	4619      	mov	r1, r3
 8033c2a:	2208      	movs	r2, #8
 8033c2c:	305c      	adds	r0, #92	@ 0x5c
 8033c2e:	f000 f930 	bl	8033e92 <memset>
 8033c32:	4b0d      	ldr	r3, [pc, #52]	@ (8033c68 <std+0x58>)
 8033c34:	6263      	str	r3, [r4, #36]	@ 0x24
 8033c36:	4b0d      	ldr	r3, [pc, #52]	@ (8033c6c <std+0x5c>)
 8033c38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8033c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8033c70 <std+0x60>)
 8033c3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8033c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8033c74 <std+0x64>)
 8033c40:	6323      	str	r3, [r4, #48]	@ 0x30
 8033c42:	4b0d      	ldr	r3, [pc, #52]	@ (8033c78 <std+0x68>)
 8033c44:	6224      	str	r4, [r4, #32]
 8033c46:	429c      	cmp	r4, r3
 8033c48:	d006      	beq.n	8033c58 <std+0x48>
 8033c4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8033c4e:	4294      	cmp	r4, r2
 8033c50:	d002      	beq.n	8033c58 <std+0x48>
 8033c52:	33d0      	adds	r3, #208	@ 0xd0
 8033c54:	429c      	cmp	r4, r3
 8033c56:	d105      	bne.n	8033c64 <std+0x54>
 8033c58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8033c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8033c60:	f000 b9b6 	b.w	8033fd0 <__retarget_lock_init_recursive>
 8033c64:	bd10      	pop	{r4, pc}
 8033c66:	bf00      	nop
 8033c68:	08033dd9 	.word	0x08033dd9
 8033c6c:	08033dfb 	.word	0x08033dfb
 8033c70:	08033e33 	.word	0x08033e33
 8033c74:	08033e57 	.word	0x08033e57
 8033c78:	24052a28 	.word	0x24052a28

08033c7c <stdio_exit_handler>:
 8033c7c:	4a02      	ldr	r2, [pc, #8]	@ (8033c88 <stdio_exit_handler+0xc>)
 8033c7e:	4903      	ldr	r1, [pc, #12]	@ (8033c8c <stdio_exit_handler+0x10>)
 8033c80:	4803      	ldr	r0, [pc, #12]	@ (8033c90 <stdio_exit_handler+0x14>)
 8033c82:	f000 b869 	b.w	8033d58 <_fwalk_sglue>
 8033c86:	bf00      	nop
 8033c88:	240023dc 	.word	0x240023dc
 8033c8c:	080365e9 	.word	0x080365e9
 8033c90:	240023ec 	.word	0x240023ec

08033c94 <cleanup_stdio>:
 8033c94:	6841      	ldr	r1, [r0, #4]
 8033c96:	4b0c      	ldr	r3, [pc, #48]	@ (8033cc8 <cleanup_stdio+0x34>)
 8033c98:	4299      	cmp	r1, r3
 8033c9a:	b510      	push	{r4, lr}
 8033c9c:	4604      	mov	r4, r0
 8033c9e:	d001      	beq.n	8033ca4 <cleanup_stdio+0x10>
 8033ca0:	f002 fca2 	bl	80365e8 <_fflush_r>
 8033ca4:	68a1      	ldr	r1, [r4, #8]
 8033ca6:	4b09      	ldr	r3, [pc, #36]	@ (8033ccc <cleanup_stdio+0x38>)
 8033ca8:	4299      	cmp	r1, r3
 8033caa:	d002      	beq.n	8033cb2 <cleanup_stdio+0x1e>
 8033cac:	4620      	mov	r0, r4
 8033cae:	f002 fc9b 	bl	80365e8 <_fflush_r>
 8033cb2:	68e1      	ldr	r1, [r4, #12]
 8033cb4:	4b06      	ldr	r3, [pc, #24]	@ (8033cd0 <cleanup_stdio+0x3c>)
 8033cb6:	4299      	cmp	r1, r3
 8033cb8:	d004      	beq.n	8033cc4 <cleanup_stdio+0x30>
 8033cba:	4620      	mov	r0, r4
 8033cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8033cc0:	f002 bc92 	b.w	80365e8 <_fflush_r>
 8033cc4:	bd10      	pop	{r4, pc}
 8033cc6:	bf00      	nop
 8033cc8:	24052a28 	.word	0x24052a28
 8033ccc:	24052a90 	.word	0x24052a90
 8033cd0:	24052af8 	.word	0x24052af8

08033cd4 <global_stdio_init.part.0>:
 8033cd4:	b510      	push	{r4, lr}
 8033cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8033d04 <global_stdio_init.part.0+0x30>)
 8033cd8:	4c0b      	ldr	r4, [pc, #44]	@ (8033d08 <global_stdio_init.part.0+0x34>)
 8033cda:	4a0c      	ldr	r2, [pc, #48]	@ (8033d0c <global_stdio_init.part.0+0x38>)
 8033cdc:	601a      	str	r2, [r3, #0]
 8033cde:	4620      	mov	r0, r4
 8033ce0:	2200      	movs	r2, #0
 8033ce2:	2104      	movs	r1, #4
 8033ce4:	f7ff ff94 	bl	8033c10 <std>
 8033ce8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8033cec:	2201      	movs	r2, #1
 8033cee:	2109      	movs	r1, #9
 8033cf0:	f7ff ff8e 	bl	8033c10 <std>
 8033cf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8033cf8:	2202      	movs	r2, #2
 8033cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8033cfe:	2112      	movs	r1, #18
 8033d00:	f7ff bf86 	b.w	8033c10 <std>
 8033d04:	24052b60 	.word	0x24052b60
 8033d08:	24052a28 	.word	0x24052a28
 8033d0c:	08033c7d 	.word	0x08033c7d

08033d10 <__sfp_lock_acquire>:
 8033d10:	4801      	ldr	r0, [pc, #4]	@ (8033d18 <__sfp_lock_acquire+0x8>)
 8033d12:	f000 b95e 	b.w	8033fd2 <__retarget_lock_acquire_recursive>
 8033d16:	bf00      	nop
 8033d18:	24052b69 	.word	0x24052b69

08033d1c <__sfp_lock_release>:
 8033d1c:	4801      	ldr	r0, [pc, #4]	@ (8033d24 <__sfp_lock_release+0x8>)
 8033d1e:	f000 b959 	b.w	8033fd4 <__retarget_lock_release_recursive>
 8033d22:	bf00      	nop
 8033d24:	24052b69 	.word	0x24052b69

08033d28 <__sinit>:
 8033d28:	b510      	push	{r4, lr}
 8033d2a:	4604      	mov	r4, r0
 8033d2c:	f7ff fff0 	bl	8033d10 <__sfp_lock_acquire>
 8033d30:	6a23      	ldr	r3, [r4, #32]
 8033d32:	b11b      	cbz	r3, 8033d3c <__sinit+0x14>
 8033d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8033d38:	f7ff bff0 	b.w	8033d1c <__sfp_lock_release>
 8033d3c:	4b04      	ldr	r3, [pc, #16]	@ (8033d50 <__sinit+0x28>)
 8033d3e:	6223      	str	r3, [r4, #32]
 8033d40:	4b04      	ldr	r3, [pc, #16]	@ (8033d54 <__sinit+0x2c>)
 8033d42:	681b      	ldr	r3, [r3, #0]
 8033d44:	2b00      	cmp	r3, #0
 8033d46:	d1f5      	bne.n	8033d34 <__sinit+0xc>
 8033d48:	f7ff ffc4 	bl	8033cd4 <global_stdio_init.part.0>
 8033d4c:	e7f2      	b.n	8033d34 <__sinit+0xc>
 8033d4e:	bf00      	nop
 8033d50:	08033c95 	.word	0x08033c95
 8033d54:	24052b60 	.word	0x24052b60

08033d58 <_fwalk_sglue>:
 8033d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8033d5c:	4607      	mov	r7, r0
 8033d5e:	4688      	mov	r8, r1
 8033d60:	4614      	mov	r4, r2
 8033d62:	2600      	movs	r6, #0
 8033d64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8033d68:	f1b9 0901 	subs.w	r9, r9, #1
 8033d6c:	d505      	bpl.n	8033d7a <_fwalk_sglue+0x22>
 8033d6e:	6824      	ldr	r4, [r4, #0]
 8033d70:	2c00      	cmp	r4, #0
 8033d72:	d1f7      	bne.n	8033d64 <_fwalk_sglue+0xc>
 8033d74:	4630      	mov	r0, r6
 8033d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8033d7a:	89ab      	ldrh	r3, [r5, #12]
 8033d7c:	2b01      	cmp	r3, #1
 8033d7e:	d907      	bls.n	8033d90 <_fwalk_sglue+0x38>
 8033d80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8033d84:	3301      	adds	r3, #1
 8033d86:	d003      	beq.n	8033d90 <_fwalk_sglue+0x38>
 8033d88:	4629      	mov	r1, r5
 8033d8a:	4638      	mov	r0, r7
 8033d8c:	47c0      	blx	r8
 8033d8e:	4306      	orrs	r6, r0
 8033d90:	3568      	adds	r5, #104	@ 0x68
 8033d92:	e7e9      	b.n	8033d68 <_fwalk_sglue+0x10>

08033d94 <siprintf>:
 8033d94:	b40e      	push	{r1, r2, r3}
 8033d96:	b510      	push	{r4, lr}
 8033d98:	b09d      	sub	sp, #116	@ 0x74
 8033d9a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8033d9c:	9002      	str	r0, [sp, #8]
 8033d9e:	9006      	str	r0, [sp, #24]
 8033da0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8033da4:	480a      	ldr	r0, [pc, #40]	@ (8033dd0 <siprintf+0x3c>)
 8033da6:	9107      	str	r1, [sp, #28]
 8033da8:	9104      	str	r1, [sp, #16]
 8033daa:	490a      	ldr	r1, [pc, #40]	@ (8033dd4 <siprintf+0x40>)
 8033dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8033db0:	9105      	str	r1, [sp, #20]
 8033db2:	2400      	movs	r4, #0
 8033db4:	a902      	add	r1, sp, #8
 8033db6:	6800      	ldr	r0, [r0, #0]
 8033db8:	9301      	str	r3, [sp, #4]
 8033dba:	941b      	str	r4, [sp, #108]	@ 0x6c
 8033dbc:	f002 fa94 	bl	80362e8 <_svfiprintf_r>
 8033dc0:	9b02      	ldr	r3, [sp, #8]
 8033dc2:	701c      	strb	r4, [r3, #0]
 8033dc4:	b01d      	add	sp, #116	@ 0x74
 8033dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8033dca:	b003      	add	sp, #12
 8033dcc:	4770      	bx	lr
 8033dce:	bf00      	nop
 8033dd0:	240023e8 	.word	0x240023e8
 8033dd4:	ffff0208 	.word	0xffff0208

08033dd8 <__sread>:
 8033dd8:	b510      	push	{r4, lr}
 8033dda:	460c      	mov	r4, r1
 8033ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8033de0:	f000 f898 	bl	8033f14 <_read_r>
 8033de4:	2800      	cmp	r0, #0
 8033de6:	bfab      	itete	ge
 8033de8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8033dea:	89a3      	ldrhlt	r3, [r4, #12]
 8033dec:	181b      	addge	r3, r3, r0
 8033dee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8033df2:	bfac      	ite	ge
 8033df4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8033df6:	81a3      	strhlt	r3, [r4, #12]
 8033df8:	bd10      	pop	{r4, pc}

08033dfa <__swrite>:
 8033dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8033dfe:	461f      	mov	r7, r3
 8033e00:	898b      	ldrh	r3, [r1, #12]
 8033e02:	05db      	lsls	r3, r3, #23
 8033e04:	4605      	mov	r5, r0
 8033e06:	460c      	mov	r4, r1
 8033e08:	4616      	mov	r6, r2
 8033e0a:	d505      	bpl.n	8033e18 <__swrite+0x1e>
 8033e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8033e10:	2302      	movs	r3, #2
 8033e12:	2200      	movs	r2, #0
 8033e14:	f000 f86c 	bl	8033ef0 <_lseek_r>
 8033e18:	89a3      	ldrh	r3, [r4, #12]
 8033e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8033e1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8033e22:	81a3      	strh	r3, [r4, #12]
 8033e24:	4632      	mov	r2, r6
 8033e26:	463b      	mov	r3, r7
 8033e28:	4628      	mov	r0, r5
 8033e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8033e2e:	f000 b893 	b.w	8033f58 <_write_r>

08033e32 <__sseek>:
 8033e32:	b510      	push	{r4, lr}
 8033e34:	460c      	mov	r4, r1
 8033e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8033e3a:	f000 f859 	bl	8033ef0 <_lseek_r>
 8033e3e:	1c43      	adds	r3, r0, #1
 8033e40:	89a3      	ldrh	r3, [r4, #12]
 8033e42:	bf15      	itete	ne
 8033e44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8033e46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8033e4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8033e4e:	81a3      	strheq	r3, [r4, #12]
 8033e50:	bf18      	it	ne
 8033e52:	81a3      	strhne	r3, [r4, #12]
 8033e54:	bd10      	pop	{r4, pc}

08033e56 <__sclose>:
 8033e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8033e5a:	f000 b839 	b.w	8033ed0 <_close_r>

08033e5e <memmove>:
 8033e5e:	4288      	cmp	r0, r1
 8033e60:	b510      	push	{r4, lr}
 8033e62:	eb01 0402 	add.w	r4, r1, r2
 8033e66:	d902      	bls.n	8033e6e <memmove+0x10>
 8033e68:	4284      	cmp	r4, r0
 8033e6a:	4623      	mov	r3, r4
 8033e6c:	d807      	bhi.n	8033e7e <memmove+0x20>
 8033e6e:	1e43      	subs	r3, r0, #1
 8033e70:	42a1      	cmp	r1, r4
 8033e72:	d008      	beq.n	8033e86 <memmove+0x28>
 8033e74:	f811 2b01 	ldrb.w	r2, [r1], #1
 8033e78:	f803 2f01 	strb.w	r2, [r3, #1]!
 8033e7c:	e7f8      	b.n	8033e70 <memmove+0x12>
 8033e7e:	4402      	add	r2, r0
 8033e80:	4601      	mov	r1, r0
 8033e82:	428a      	cmp	r2, r1
 8033e84:	d100      	bne.n	8033e88 <memmove+0x2a>
 8033e86:	bd10      	pop	{r4, pc}
 8033e88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8033e8c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8033e90:	e7f7      	b.n	8033e82 <memmove+0x24>

08033e92 <memset>:
 8033e92:	4402      	add	r2, r0
 8033e94:	4603      	mov	r3, r0
 8033e96:	4293      	cmp	r3, r2
 8033e98:	d100      	bne.n	8033e9c <memset+0xa>
 8033e9a:	4770      	bx	lr
 8033e9c:	f803 1b01 	strb.w	r1, [r3], #1
 8033ea0:	e7f9      	b.n	8033e96 <memset+0x4>

08033ea2 <strncmp>:
 8033ea2:	b510      	push	{r4, lr}
 8033ea4:	b16a      	cbz	r2, 8033ec2 <strncmp+0x20>
 8033ea6:	3901      	subs	r1, #1
 8033ea8:	1884      	adds	r4, r0, r2
 8033eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8033eae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8033eb2:	429a      	cmp	r2, r3
 8033eb4:	d103      	bne.n	8033ebe <strncmp+0x1c>
 8033eb6:	42a0      	cmp	r0, r4
 8033eb8:	d001      	beq.n	8033ebe <strncmp+0x1c>
 8033eba:	2a00      	cmp	r2, #0
 8033ebc:	d1f5      	bne.n	8033eaa <strncmp+0x8>
 8033ebe:	1ad0      	subs	r0, r2, r3
 8033ec0:	bd10      	pop	{r4, pc}
 8033ec2:	4610      	mov	r0, r2
 8033ec4:	e7fc      	b.n	8033ec0 <strncmp+0x1e>
	...

08033ec8 <_localeconv_r>:
 8033ec8:	4800      	ldr	r0, [pc, #0]	@ (8033ecc <_localeconv_r+0x4>)
 8033eca:	4770      	bx	lr
 8033ecc:	24002528 	.word	0x24002528

08033ed0 <_close_r>:
 8033ed0:	b538      	push	{r3, r4, r5, lr}
 8033ed2:	4d06      	ldr	r5, [pc, #24]	@ (8033eec <_close_r+0x1c>)
 8033ed4:	2300      	movs	r3, #0
 8033ed6:	4604      	mov	r4, r0
 8033ed8:	4608      	mov	r0, r1
 8033eda:	602b      	str	r3, [r5, #0]
 8033edc:	f003 fbba 	bl	8037654 <_close>
 8033ee0:	1c43      	adds	r3, r0, #1
 8033ee2:	d102      	bne.n	8033eea <_close_r+0x1a>
 8033ee4:	682b      	ldr	r3, [r5, #0]
 8033ee6:	b103      	cbz	r3, 8033eea <_close_r+0x1a>
 8033ee8:	6023      	str	r3, [r4, #0]
 8033eea:	bd38      	pop	{r3, r4, r5, pc}
 8033eec:	24052b64 	.word	0x24052b64

08033ef0 <_lseek_r>:
 8033ef0:	b538      	push	{r3, r4, r5, lr}
 8033ef2:	4d07      	ldr	r5, [pc, #28]	@ (8033f10 <_lseek_r+0x20>)
 8033ef4:	4604      	mov	r4, r0
 8033ef6:	4608      	mov	r0, r1
 8033ef8:	4611      	mov	r1, r2
 8033efa:	2200      	movs	r2, #0
 8033efc:	602a      	str	r2, [r5, #0]
 8033efe:	461a      	mov	r2, r3
 8033f00:	f003 fbd0 	bl	80376a4 <_lseek>
 8033f04:	1c43      	adds	r3, r0, #1
 8033f06:	d102      	bne.n	8033f0e <_lseek_r+0x1e>
 8033f08:	682b      	ldr	r3, [r5, #0]
 8033f0a:	b103      	cbz	r3, 8033f0e <_lseek_r+0x1e>
 8033f0c:	6023      	str	r3, [r4, #0]
 8033f0e:	bd38      	pop	{r3, r4, r5, pc}
 8033f10:	24052b64 	.word	0x24052b64

08033f14 <_read_r>:
 8033f14:	b538      	push	{r3, r4, r5, lr}
 8033f16:	4d07      	ldr	r5, [pc, #28]	@ (8033f34 <_read_r+0x20>)
 8033f18:	4604      	mov	r4, r0
 8033f1a:	4608      	mov	r0, r1
 8033f1c:	4611      	mov	r1, r2
 8033f1e:	2200      	movs	r2, #0
 8033f20:	602a      	str	r2, [r5, #0]
 8033f22:	461a      	mov	r2, r3
 8033f24:	f003 fbc6 	bl	80376b4 <_read>
 8033f28:	1c43      	adds	r3, r0, #1
 8033f2a:	d102      	bne.n	8033f32 <_read_r+0x1e>
 8033f2c:	682b      	ldr	r3, [r5, #0]
 8033f2e:	b103      	cbz	r3, 8033f32 <_read_r+0x1e>
 8033f30:	6023      	str	r3, [r4, #0]
 8033f32:	bd38      	pop	{r3, r4, r5, pc}
 8033f34:	24052b64 	.word	0x24052b64

08033f38 <_sbrk_r>:
 8033f38:	b538      	push	{r3, r4, r5, lr}
 8033f3a:	4d06      	ldr	r5, [pc, #24]	@ (8033f54 <_sbrk_r+0x1c>)
 8033f3c:	2300      	movs	r3, #0
 8033f3e:	4604      	mov	r4, r0
 8033f40:	4608      	mov	r0, r1
 8033f42:	602b      	str	r3, [r5, #0]
 8033f44:	f7dd fc0a 	bl	801175c <_sbrk>
 8033f48:	1c43      	adds	r3, r0, #1
 8033f4a:	d102      	bne.n	8033f52 <_sbrk_r+0x1a>
 8033f4c:	682b      	ldr	r3, [r5, #0]
 8033f4e:	b103      	cbz	r3, 8033f52 <_sbrk_r+0x1a>
 8033f50:	6023      	str	r3, [r4, #0]
 8033f52:	bd38      	pop	{r3, r4, r5, pc}
 8033f54:	24052b64 	.word	0x24052b64

08033f58 <_write_r>:
 8033f58:	b538      	push	{r3, r4, r5, lr}
 8033f5a:	4d07      	ldr	r5, [pc, #28]	@ (8033f78 <_write_r+0x20>)
 8033f5c:	4604      	mov	r4, r0
 8033f5e:	4608      	mov	r0, r1
 8033f60:	4611      	mov	r1, r2
 8033f62:	2200      	movs	r2, #0
 8033f64:	602a      	str	r2, [r5, #0]
 8033f66:	461a      	mov	r2, r3
 8033f68:	f7e8 fb0a 	bl	801c580 <_write>
 8033f6c:	1c43      	adds	r3, r0, #1
 8033f6e:	d102      	bne.n	8033f76 <_write_r+0x1e>
 8033f70:	682b      	ldr	r3, [r5, #0]
 8033f72:	b103      	cbz	r3, 8033f76 <_write_r+0x1e>
 8033f74:	6023      	str	r3, [r4, #0]
 8033f76:	bd38      	pop	{r3, r4, r5, pc}
 8033f78:	24052b64 	.word	0x24052b64

08033f7c <__errno>:
 8033f7c:	4b01      	ldr	r3, [pc, #4]	@ (8033f84 <__errno+0x8>)
 8033f7e:	6818      	ldr	r0, [r3, #0]
 8033f80:	4770      	bx	lr
 8033f82:	bf00      	nop
 8033f84:	240023e8 	.word	0x240023e8

08033f88 <__libc_init_array>:
 8033f88:	b570      	push	{r4, r5, r6, lr}
 8033f8a:	4d0d      	ldr	r5, [pc, #52]	@ (8033fc0 <__libc_init_array+0x38>)
 8033f8c:	4c0d      	ldr	r4, [pc, #52]	@ (8033fc4 <__libc_init_array+0x3c>)
 8033f8e:	1b64      	subs	r4, r4, r5
 8033f90:	10a4      	asrs	r4, r4, #2
 8033f92:	2600      	movs	r6, #0
 8033f94:	42a6      	cmp	r6, r4
 8033f96:	d109      	bne.n	8033fac <__libc_init_array+0x24>
 8033f98:	4d0b      	ldr	r5, [pc, #44]	@ (8033fc8 <__libc_init_array+0x40>)
 8033f9a:	4c0c      	ldr	r4, [pc, #48]	@ (8033fcc <__libc_init_array+0x44>)
 8033f9c:	f003 fb94 	bl	80376c8 <_init>
 8033fa0:	1b64      	subs	r4, r4, r5
 8033fa2:	10a4      	asrs	r4, r4, #2
 8033fa4:	2600      	movs	r6, #0
 8033fa6:	42a6      	cmp	r6, r4
 8033fa8:	d105      	bne.n	8033fb6 <__libc_init_array+0x2e>
 8033faa:	bd70      	pop	{r4, r5, r6, pc}
 8033fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8033fb0:	4798      	blx	r3
 8033fb2:	3601      	adds	r6, #1
 8033fb4:	e7ee      	b.n	8033f94 <__libc_init_array+0xc>
 8033fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8033fba:	4798      	blx	r3
 8033fbc:	3601      	adds	r6, #1
 8033fbe:	e7f2      	b.n	8033fa6 <__libc_init_array+0x1e>
 8033fc0:	08072d40 	.word	0x08072d40
 8033fc4:	08072d40 	.word	0x08072d40
 8033fc8:	08072d40 	.word	0x08072d40
 8033fcc:	08072d44 	.word	0x08072d44

08033fd0 <__retarget_lock_init_recursive>:
 8033fd0:	4770      	bx	lr

08033fd2 <__retarget_lock_acquire_recursive>:
 8033fd2:	4770      	bx	lr

08033fd4 <__retarget_lock_release_recursive>:
 8033fd4:	4770      	bx	lr

08033fd6 <memcpy>:
 8033fd6:	440a      	add	r2, r1
 8033fd8:	4291      	cmp	r1, r2
 8033fda:	f100 33ff 	add.w	r3, r0, #4294967295
 8033fde:	d100      	bne.n	8033fe2 <memcpy+0xc>
 8033fe0:	4770      	bx	lr
 8033fe2:	b510      	push	{r4, lr}
 8033fe4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8033fe8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8033fec:	4291      	cmp	r1, r2
 8033fee:	d1f9      	bne.n	8033fe4 <memcpy+0xe>
 8033ff0:	bd10      	pop	{r4, pc}
	...

08033ff4 <nanf>:
 8033ff4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8033ffc <nanf+0x8>
 8033ff8:	4770      	bx	lr
 8033ffa:	bf00      	nop
 8033ffc:	7fc00000 	.word	0x7fc00000

08034000 <quorem>:
 8034000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034004:	6903      	ldr	r3, [r0, #16]
 8034006:	690c      	ldr	r4, [r1, #16]
 8034008:	42a3      	cmp	r3, r4
 803400a:	4607      	mov	r7, r0
 803400c:	db7e      	blt.n	803410c <quorem+0x10c>
 803400e:	3c01      	subs	r4, #1
 8034010:	f101 0814 	add.w	r8, r1, #20
 8034014:	00a3      	lsls	r3, r4, #2
 8034016:	f100 0514 	add.w	r5, r0, #20
 803401a:	9300      	str	r3, [sp, #0]
 803401c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8034020:	9301      	str	r3, [sp, #4]
 8034022:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8034026:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 803402a:	3301      	adds	r3, #1
 803402c:	429a      	cmp	r2, r3
 803402e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8034032:	fbb2 f6f3 	udiv	r6, r2, r3
 8034036:	d32e      	bcc.n	8034096 <quorem+0x96>
 8034038:	f04f 0a00 	mov.w	sl, #0
 803403c:	46c4      	mov	ip, r8
 803403e:	46ae      	mov	lr, r5
 8034040:	46d3      	mov	fp, sl
 8034042:	f85c 3b04 	ldr.w	r3, [ip], #4
 8034046:	b298      	uxth	r0, r3
 8034048:	fb06 a000 	mla	r0, r6, r0, sl
 803404c:	0c02      	lsrs	r2, r0, #16
 803404e:	0c1b      	lsrs	r3, r3, #16
 8034050:	fb06 2303 	mla	r3, r6, r3, r2
 8034054:	f8de 2000 	ldr.w	r2, [lr]
 8034058:	b280      	uxth	r0, r0
 803405a:	b292      	uxth	r2, r2
 803405c:	1a12      	subs	r2, r2, r0
 803405e:	445a      	add	r2, fp
 8034060:	f8de 0000 	ldr.w	r0, [lr]
 8034064:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8034068:	b29b      	uxth	r3, r3
 803406a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 803406e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8034072:	b292      	uxth	r2, r2
 8034074:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8034078:	45e1      	cmp	r9, ip
 803407a:	f84e 2b04 	str.w	r2, [lr], #4
 803407e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8034082:	d2de      	bcs.n	8034042 <quorem+0x42>
 8034084:	9b00      	ldr	r3, [sp, #0]
 8034086:	58eb      	ldr	r3, [r5, r3]
 8034088:	b92b      	cbnz	r3, 8034096 <quorem+0x96>
 803408a:	9b01      	ldr	r3, [sp, #4]
 803408c:	3b04      	subs	r3, #4
 803408e:	429d      	cmp	r5, r3
 8034090:	461a      	mov	r2, r3
 8034092:	d32f      	bcc.n	80340f4 <quorem+0xf4>
 8034094:	613c      	str	r4, [r7, #16]
 8034096:	4638      	mov	r0, r7
 8034098:	f001 f89e 	bl	80351d8 <__mcmp>
 803409c:	2800      	cmp	r0, #0
 803409e:	db25      	blt.n	80340ec <quorem+0xec>
 80340a0:	4629      	mov	r1, r5
 80340a2:	2000      	movs	r0, #0
 80340a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80340a8:	f8d1 c000 	ldr.w	ip, [r1]
 80340ac:	fa1f fe82 	uxth.w	lr, r2
 80340b0:	fa1f f38c 	uxth.w	r3, ip
 80340b4:	eba3 030e 	sub.w	r3, r3, lr
 80340b8:	4403      	add	r3, r0
 80340ba:	0c12      	lsrs	r2, r2, #16
 80340bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80340c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80340c4:	b29b      	uxth	r3, r3
 80340c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80340ca:	45c1      	cmp	r9, r8
 80340cc:	f841 3b04 	str.w	r3, [r1], #4
 80340d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80340d4:	d2e6      	bcs.n	80340a4 <quorem+0xa4>
 80340d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80340da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80340de:	b922      	cbnz	r2, 80340ea <quorem+0xea>
 80340e0:	3b04      	subs	r3, #4
 80340e2:	429d      	cmp	r5, r3
 80340e4:	461a      	mov	r2, r3
 80340e6:	d30b      	bcc.n	8034100 <quorem+0x100>
 80340e8:	613c      	str	r4, [r7, #16]
 80340ea:	3601      	adds	r6, #1
 80340ec:	4630      	mov	r0, r6
 80340ee:	b003      	add	sp, #12
 80340f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80340f4:	6812      	ldr	r2, [r2, #0]
 80340f6:	3b04      	subs	r3, #4
 80340f8:	2a00      	cmp	r2, #0
 80340fa:	d1cb      	bne.n	8034094 <quorem+0x94>
 80340fc:	3c01      	subs	r4, #1
 80340fe:	e7c6      	b.n	803408e <quorem+0x8e>
 8034100:	6812      	ldr	r2, [r2, #0]
 8034102:	3b04      	subs	r3, #4
 8034104:	2a00      	cmp	r2, #0
 8034106:	d1ef      	bne.n	80340e8 <quorem+0xe8>
 8034108:	3c01      	subs	r4, #1
 803410a:	e7ea      	b.n	80340e2 <quorem+0xe2>
 803410c:	2000      	movs	r0, #0
 803410e:	e7ee      	b.n	80340ee <quorem+0xee>

08034110 <_dtoa_r>:
 8034110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034114:	ed2d 8b02 	vpush	{d8}
 8034118:	69c7      	ldr	r7, [r0, #28]
 803411a:	b091      	sub	sp, #68	@ 0x44
 803411c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8034120:	ec55 4b10 	vmov	r4, r5, d0
 8034124:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8034126:	9107      	str	r1, [sp, #28]
 8034128:	4681      	mov	r9, r0
 803412a:	9209      	str	r2, [sp, #36]	@ 0x24
 803412c:	930d      	str	r3, [sp, #52]	@ 0x34
 803412e:	b97f      	cbnz	r7, 8034150 <_dtoa_r+0x40>
 8034130:	2010      	movs	r0, #16
 8034132:	f7e8 fb4b 	bl	801c7cc <__wrap_malloc>
 8034136:	4602      	mov	r2, r0
 8034138:	f8c9 001c 	str.w	r0, [r9, #28]
 803413c:	b920      	cbnz	r0, 8034148 <_dtoa_r+0x38>
 803413e:	4ba0      	ldr	r3, [pc, #640]	@ (80343c0 <_dtoa_r+0x2b0>)
 8034140:	21ef      	movs	r1, #239	@ 0xef
 8034142:	48a0      	ldr	r0, [pc, #640]	@ (80343c4 <_dtoa_r+0x2b4>)
 8034144:	f002 fa80 	bl	8036648 <__assert_func>
 8034148:	e9c0 7701 	strd	r7, r7, [r0, #4]
 803414c:	6007      	str	r7, [r0, #0]
 803414e:	60c7      	str	r7, [r0, #12]
 8034150:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8034154:	6819      	ldr	r1, [r3, #0]
 8034156:	b159      	cbz	r1, 8034170 <_dtoa_r+0x60>
 8034158:	685a      	ldr	r2, [r3, #4]
 803415a:	604a      	str	r2, [r1, #4]
 803415c:	2301      	movs	r3, #1
 803415e:	4093      	lsls	r3, r2
 8034160:	608b      	str	r3, [r1, #8]
 8034162:	4648      	mov	r0, r9
 8034164:	f000 fdbc 	bl	8034ce0 <_Bfree>
 8034168:	f8d9 301c 	ldr.w	r3, [r9, #28]
 803416c:	2200      	movs	r2, #0
 803416e:	601a      	str	r2, [r3, #0]
 8034170:	1e2b      	subs	r3, r5, #0
 8034172:	bfbb      	ittet	lt
 8034174:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8034178:	9303      	strlt	r3, [sp, #12]
 803417a:	2300      	movge	r3, #0
 803417c:	2201      	movlt	r2, #1
 803417e:	bfac      	ite	ge
 8034180:	6033      	strge	r3, [r6, #0]
 8034182:	6032      	strlt	r2, [r6, #0]
 8034184:	4b90      	ldr	r3, [pc, #576]	@ (80343c8 <_dtoa_r+0x2b8>)
 8034186:	9e03      	ldr	r6, [sp, #12]
 8034188:	43b3      	bics	r3, r6
 803418a:	d110      	bne.n	80341ae <_dtoa_r+0x9e>
 803418c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803418e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8034192:	6013      	str	r3, [r2, #0]
 8034194:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8034198:	4323      	orrs	r3, r4
 803419a:	f000 84e6 	beq.w	8034b6a <_dtoa_r+0xa5a>
 803419e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80341a0:	4f8a      	ldr	r7, [pc, #552]	@ (80343cc <_dtoa_r+0x2bc>)
 80341a2:	2b00      	cmp	r3, #0
 80341a4:	f000 84e8 	beq.w	8034b78 <_dtoa_r+0xa68>
 80341a8:	1cfb      	adds	r3, r7, #3
 80341aa:	f000 bce3 	b.w	8034b74 <_dtoa_r+0xa64>
 80341ae:	ed9d 8b02 	vldr	d8, [sp, #8]
 80341b2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80341b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80341ba:	d10a      	bne.n	80341d2 <_dtoa_r+0xc2>
 80341bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80341be:	2301      	movs	r3, #1
 80341c0:	6013      	str	r3, [r2, #0]
 80341c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80341c4:	b113      	cbz	r3, 80341cc <_dtoa_r+0xbc>
 80341c6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80341c8:	4b81      	ldr	r3, [pc, #516]	@ (80343d0 <_dtoa_r+0x2c0>)
 80341ca:	6013      	str	r3, [r2, #0]
 80341cc:	4f81      	ldr	r7, [pc, #516]	@ (80343d4 <_dtoa_r+0x2c4>)
 80341ce:	f000 bcd3 	b.w	8034b78 <_dtoa_r+0xa68>
 80341d2:	aa0e      	add	r2, sp, #56	@ 0x38
 80341d4:	a90f      	add	r1, sp, #60	@ 0x3c
 80341d6:	4648      	mov	r0, r9
 80341d8:	eeb0 0b48 	vmov.f64	d0, d8
 80341dc:	f001 f91c 	bl	8035418 <__d2b>
 80341e0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80341e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80341e6:	9001      	str	r0, [sp, #4]
 80341e8:	2b00      	cmp	r3, #0
 80341ea:	d045      	beq.n	8034278 <_dtoa_r+0x168>
 80341ec:	eeb0 7b48 	vmov.f64	d7, d8
 80341f0:	ee18 1a90 	vmov	r1, s17
 80341f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80341f8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80341fc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8034200:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8034204:	2500      	movs	r5, #0
 8034206:	ee07 1a90 	vmov	s15, r1
 803420a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 803420e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80343a8 <_dtoa_r+0x298>
 8034212:	ee37 7b46 	vsub.f64	d7, d7, d6
 8034216:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80343b0 <_dtoa_r+0x2a0>
 803421a:	eea7 6b05 	vfma.f64	d6, d7, d5
 803421e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80343b8 <_dtoa_r+0x2a8>
 8034222:	ee07 3a90 	vmov	s15, r3
 8034226:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 803422a:	eeb0 7b46 	vmov.f64	d7, d6
 803422e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8034232:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8034236:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 803423a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803423e:	ee16 8a90 	vmov	r8, s13
 8034242:	d508      	bpl.n	8034256 <_dtoa_r+0x146>
 8034244:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8034248:	eeb4 6b47 	vcmp.f64	d6, d7
 803424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8034250:	bf18      	it	ne
 8034252:	f108 38ff 	addne.w	r8, r8, #4294967295
 8034256:	f1b8 0f16 	cmp.w	r8, #22
 803425a:	d82b      	bhi.n	80342b4 <_dtoa_r+0x1a4>
 803425c:	495e      	ldr	r1, [pc, #376]	@ (80343d8 <_dtoa_r+0x2c8>)
 803425e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8034262:	ed91 7b00 	vldr	d7, [r1]
 8034266:	eeb4 8bc7 	vcmpe.f64	d8, d7
 803426a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803426e:	d501      	bpl.n	8034274 <_dtoa_r+0x164>
 8034270:	f108 38ff 	add.w	r8, r8, #4294967295
 8034274:	2100      	movs	r1, #0
 8034276:	e01e      	b.n	80342b6 <_dtoa_r+0x1a6>
 8034278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803427a:	4413      	add	r3, r2
 803427c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8034280:	2920      	cmp	r1, #32
 8034282:	bfc1      	itttt	gt
 8034284:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8034288:	408e      	lslgt	r6, r1
 803428a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 803428e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8034292:	bfd6      	itet	le
 8034294:	f1c1 0120 	rsble	r1, r1, #32
 8034298:	4331      	orrgt	r1, r6
 803429a:	fa04 f101 	lslle.w	r1, r4, r1
 803429e:	ee07 1a90 	vmov	s15, r1
 80342a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80342a6:	3b01      	subs	r3, #1
 80342a8:	ee17 1a90 	vmov	r1, s15
 80342ac:	2501      	movs	r5, #1
 80342ae:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80342b2:	e7a8      	b.n	8034206 <_dtoa_r+0xf6>
 80342b4:	2101      	movs	r1, #1
 80342b6:	1ad2      	subs	r2, r2, r3
 80342b8:	1e53      	subs	r3, r2, #1
 80342ba:	9306      	str	r3, [sp, #24]
 80342bc:	bf45      	ittet	mi
 80342be:	f1c2 0301 	rsbmi	r3, r2, #1
 80342c2:	9304      	strmi	r3, [sp, #16]
 80342c4:	2300      	movpl	r3, #0
 80342c6:	2300      	movmi	r3, #0
 80342c8:	bf4c      	ite	mi
 80342ca:	9306      	strmi	r3, [sp, #24]
 80342cc:	9304      	strpl	r3, [sp, #16]
 80342ce:	f1b8 0f00 	cmp.w	r8, #0
 80342d2:	910c      	str	r1, [sp, #48]	@ 0x30
 80342d4:	db18      	blt.n	8034308 <_dtoa_r+0x1f8>
 80342d6:	9b06      	ldr	r3, [sp, #24]
 80342d8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80342dc:	4443      	add	r3, r8
 80342de:	9306      	str	r3, [sp, #24]
 80342e0:	2300      	movs	r3, #0
 80342e2:	9a07      	ldr	r2, [sp, #28]
 80342e4:	2a09      	cmp	r2, #9
 80342e6:	d845      	bhi.n	8034374 <_dtoa_r+0x264>
 80342e8:	2a05      	cmp	r2, #5
 80342ea:	bfc4      	itt	gt
 80342ec:	3a04      	subgt	r2, #4
 80342ee:	9207      	strgt	r2, [sp, #28]
 80342f0:	9a07      	ldr	r2, [sp, #28]
 80342f2:	f1a2 0202 	sub.w	r2, r2, #2
 80342f6:	bfcc      	ite	gt
 80342f8:	2400      	movgt	r4, #0
 80342fa:	2401      	movle	r4, #1
 80342fc:	2a03      	cmp	r2, #3
 80342fe:	d844      	bhi.n	803438a <_dtoa_r+0x27a>
 8034300:	e8df f002 	tbb	[pc, r2]
 8034304:	0b173634 	.word	0x0b173634
 8034308:	9b04      	ldr	r3, [sp, #16]
 803430a:	2200      	movs	r2, #0
 803430c:	eba3 0308 	sub.w	r3, r3, r8
 8034310:	9304      	str	r3, [sp, #16]
 8034312:	920a      	str	r2, [sp, #40]	@ 0x28
 8034314:	f1c8 0300 	rsb	r3, r8, #0
 8034318:	e7e3      	b.n	80342e2 <_dtoa_r+0x1d2>
 803431a:	2201      	movs	r2, #1
 803431c:	9208      	str	r2, [sp, #32]
 803431e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8034320:	eb08 0b02 	add.w	fp, r8, r2
 8034324:	f10b 0a01 	add.w	sl, fp, #1
 8034328:	4652      	mov	r2, sl
 803432a:	2a01      	cmp	r2, #1
 803432c:	bfb8      	it	lt
 803432e:	2201      	movlt	r2, #1
 8034330:	e006      	b.n	8034340 <_dtoa_r+0x230>
 8034332:	2201      	movs	r2, #1
 8034334:	9208      	str	r2, [sp, #32]
 8034336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8034338:	2a00      	cmp	r2, #0
 803433a:	dd29      	ble.n	8034390 <_dtoa_r+0x280>
 803433c:	4693      	mov	fp, r2
 803433e:	4692      	mov	sl, r2
 8034340:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8034344:	2100      	movs	r1, #0
 8034346:	2004      	movs	r0, #4
 8034348:	f100 0614 	add.w	r6, r0, #20
 803434c:	4296      	cmp	r6, r2
 803434e:	d926      	bls.n	803439e <_dtoa_r+0x28e>
 8034350:	6079      	str	r1, [r7, #4]
 8034352:	4648      	mov	r0, r9
 8034354:	9305      	str	r3, [sp, #20]
 8034356:	f000 fc83 	bl	8034c60 <_Balloc>
 803435a:	9b05      	ldr	r3, [sp, #20]
 803435c:	4607      	mov	r7, r0
 803435e:	2800      	cmp	r0, #0
 8034360:	d13e      	bne.n	80343e0 <_dtoa_r+0x2d0>
 8034362:	4b1e      	ldr	r3, [pc, #120]	@ (80343dc <_dtoa_r+0x2cc>)
 8034364:	4602      	mov	r2, r0
 8034366:	f240 11af 	movw	r1, #431	@ 0x1af
 803436a:	e6ea      	b.n	8034142 <_dtoa_r+0x32>
 803436c:	2200      	movs	r2, #0
 803436e:	e7e1      	b.n	8034334 <_dtoa_r+0x224>
 8034370:	2200      	movs	r2, #0
 8034372:	e7d3      	b.n	803431c <_dtoa_r+0x20c>
 8034374:	2401      	movs	r4, #1
 8034376:	2200      	movs	r2, #0
 8034378:	e9cd 2407 	strd	r2, r4, [sp, #28]
 803437c:	f04f 3bff 	mov.w	fp, #4294967295
 8034380:	2100      	movs	r1, #0
 8034382:	46da      	mov	sl, fp
 8034384:	2212      	movs	r2, #18
 8034386:	9109      	str	r1, [sp, #36]	@ 0x24
 8034388:	e7da      	b.n	8034340 <_dtoa_r+0x230>
 803438a:	2201      	movs	r2, #1
 803438c:	9208      	str	r2, [sp, #32]
 803438e:	e7f5      	b.n	803437c <_dtoa_r+0x26c>
 8034390:	f04f 0b01 	mov.w	fp, #1
 8034394:	46da      	mov	sl, fp
 8034396:	465a      	mov	r2, fp
 8034398:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 803439c:	e7d0      	b.n	8034340 <_dtoa_r+0x230>
 803439e:	3101      	adds	r1, #1
 80343a0:	0040      	lsls	r0, r0, #1
 80343a2:	e7d1      	b.n	8034348 <_dtoa_r+0x238>
 80343a4:	f3af 8000 	nop.w
 80343a8:	636f4361 	.word	0x636f4361
 80343ac:	3fd287a7 	.word	0x3fd287a7
 80343b0:	8b60c8b3 	.word	0x8b60c8b3
 80343b4:	3fc68a28 	.word	0x3fc68a28
 80343b8:	509f79fb 	.word	0x509f79fb
 80343bc:	3fd34413 	.word	0x3fd34413
 80343c0:	080726de 	.word	0x080726de
 80343c4:	080726f5 	.word	0x080726f5
 80343c8:	7ff00000 	.word	0x7ff00000
 80343cc:	080726da 	.word	0x080726da
 80343d0:	080726a9 	.word	0x080726a9
 80343d4:	080726a8 	.word	0x080726a8
 80343d8:	080728a8 	.word	0x080728a8
 80343dc:	0807274d 	.word	0x0807274d
 80343e0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80343e4:	f1ba 0f0e 	cmp.w	sl, #14
 80343e8:	6010      	str	r0, [r2, #0]
 80343ea:	d86e      	bhi.n	80344ca <_dtoa_r+0x3ba>
 80343ec:	2c00      	cmp	r4, #0
 80343ee:	d06c      	beq.n	80344ca <_dtoa_r+0x3ba>
 80343f0:	f1b8 0f00 	cmp.w	r8, #0
 80343f4:	f340 80b4 	ble.w	8034560 <_dtoa_r+0x450>
 80343f8:	4ac8      	ldr	r2, [pc, #800]	@ (803471c <_dtoa_r+0x60c>)
 80343fa:	f008 010f 	and.w	r1, r8, #15
 80343fe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8034402:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8034406:	ed92 7b00 	vldr	d7, [r2]
 803440a:	ea4f 1128 	mov.w	r1, r8, asr #4
 803440e:	f000 809b 	beq.w	8034548 <_dtoa_r+0x438>
 8034412:	4ac3      	ldr	r2, [pc, #780]	@ (8034720 <_dtoa_r+0x610>)
 8034414:	ed92 6b08 	vldr	d6, [r2, #32]
 8034418:	ee88 6b06 	vdiv.f64	d6, d8, d6
 803441c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8034420:	f001 010f 	and.w	r1, r1, #15
 8034424:	2203      	movs	r2, #3
 8034426:	48be      	ldr	r0, [pc, #760]	@ (8034720 <_dtoa_r+0x610>)
 8034428:	2900      	cmp	r1, #0
 803442a:	f040 808f 	bne.w	803454c <_dtoa_r+0x43c>
 803442e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8034432:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8034436:	ed8d 7b02 	vstr	d7, [sp, #8]
 803443a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 803443c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8034440:	2900      	cmp	r1, #0
 8034442:	f000 80b3 	beq.w	80345ac <_dtoa_r+0x49c>
 8034446:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 803444a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 803444e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8034452:	f140 80ab 	bpl.w	80345ac <_dtoa_r+0x49c>
 8034456:	f1ba 0f00 	cmp.w	sl, #0
 803445a:	f000 80a7 	beq.w	80345ac <_dtoa_r+0x49c>
 803445e:	f1bb 0f00 	cmp.w	fp, #0
 8034462:	dd30      	ble.n	80344c6 <_dtoa_r+0x3b6>
 8034464:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8034468:	ee27 7b06 	vmul.f64	d7, d7, d6
 803446c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8034470:	f108 31ff 	add.w	r1, r8, #4294967295
 8034474:	9105      	str	r1, [sp, #20]
 8034476:	3201      	adds	r2, #1
 8034478:	465c      	mov	r4, fp
 803447a:	ed9d 6b02 	vldr	d6, [sp, #8]
 803447e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8034482:	ee07 2a90 	vmov	s15, r2
 8034486:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 803448a:	eea7 5b06 	vfma.f64	d5, d7, d6
 803448e:	ee15 2a90 	vmov	r2, s11
 8034492:	ec51 0b15 	vmov	r0, r1, d5
 8034496:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 803449a:	2c00      	cmp	r4, #0
 803449c:	f040 808a 	bne.w	80345b4 <_dtoa_r+0x4a4>
 80344a0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80344a4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80344a8:	ec41 0b17 	vmov	d7, r0, r1
 80344ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80344b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80344b4:	f300 826a 	bgt.w	803498c <_dtoa_r+0x87c>
 80344b8:	eeb1 7b47 	vneg.f64	d7, d7
 80344bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80344c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80344c4:	d423      	bmi.n	803450e <_dtoa_r+0x3fe>
 80344c6:	ed8d 8b02 	vstr	d8, [sp, #8]
 80344ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80344cc:	2a00      	cmp	r2, #0
 80344ce:	f2c0 8129 	blt.w	8034724 <_dtoa_r+0x614>
 80344d2:	f1b8 0f0e 	cmp.w	r8, #14
 80344d6:	f300 8125 	bgt.w	8034724 <_dtoa_r+0x614>
 80344da:	4b90      	ldr	r3, [pc, #576]	@ (803471c <_dtoa_r+0x60c>)
 80344dc:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80344e0:	ed93 6b00 	vldr	d6, [r3]
 80344e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80344e6:	2b00      	cmp	r3, #0
 80344e8:	f280 80c8 	bge.w	803467c <_dtoa_r+0x56c>
 80344ec:	f1ba 0f00 	cmp.w	sl, #0
 80344f0:	f300 80c4 	bgt.w	803467c <_dtoa_r+0x56c>
 80344f4:	d10b      	bne.n	803450e <_dtoa_r+0x3fe>
 80344f6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80344fa:	ee26 6b07 	vmul.f64	d6, d6, d7
 80344fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8034502:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8034506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803450a:	f2c0 823c 	blt.w	8034986 <_dtoa_r+0x876>
 803450e:	2400      	movs	r4, #0
 8034510:	4625      	mov	r5, r4
 8034512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034514:	43db      	mvns	r3, r3
 8034516:	9305      	str	r3, [sp, #20]
 8034518:	463e      	mov	r6, r7
 803451a:	f04f 0800 	mov.w	r8, #0
 803451e:	4621      	mov	r1, r4
 8034520:	4648      	mov	r0, r9
 8034522:	f000 fbdd 	bl	8034ce0 <_Bfree>
 8034526:	2d00      	cmp	r5, #0
 8034528:	f000 80a2 	beq.w	8034670 <_dtoa_r+0x560>
 803452c:	f1b8 0f00 	cmp.w	r8, #0
 8034530:	d005      	beq.n	803453e <_dtoa_r+0x42e>
 8034532:	45a8      	cmp	r8, r5
 8034534:	d003      	beq.n	803453e <_dtoa_r+0x42e>
 8034536:	4641      	mov	r1, r8
 8034538:	4648      	mov	r0, r9
 803453a:	f000 fbd1 	bl	8034ce0 <_Bfree>
 803453e:	4629      	mov	r1, r5
 8034540:	4648      	mov	r0, r9
 8034542:	f000 fbcd 	bl	8034ce0 <_Bfree>
 8034546:	e093      	b.n	8034670 <_dtoa_r+0x560>
 8034548:	2202      	movs	r2, #2
 803454a:	e76c      	b.n	8034426 <_dtoa_r+0x316>
 803454c:	07cc      	lsls	r4, r1, #31
 803454e:	d504      	bpl.n	803455a <_dtoa_r+0x44a>
 8034550:	ed90 6b00 	vldr	d6, [r0]
 8034554:	3201      	adds	r2, #1
 8034556:	ee27 7b06 	vmul.f64	d7, d7, d6
 803455a:	1049      	asrs	r1, r1, #1
 803455c:	3008      	adds	r0, #8
 803455e:	e763      	b.n	8034428 <_dtoa_r+0x318>
 8034560:	d022      	beq.n	80345a8 <_dtoa_r+0x498>
 8034562:	f1c8 0100 	rsb	r1, r8, #0
 8034566:	4a6d      	ldr	r2, [pc, #436]	@ (803471c <_dtoa_r+0x60c>)
 8034568:	f001 000f 	and.w	r0, r1, #15
 803456c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8034570:	ed92 7b00 	vldr	d7, [r2]
 8034574:	ee28 7b07 	vmul.f64	d7, d8, d7
 8034578:	ed8d 7b02 	vstr	d7, [sp, #8]
 803457c:	4868      	ldr	r0, [pc, #416]	@ (8034720 <_dtoa_r+0x610>)
 803457e:	1109      	asrs	r1, r1, #4
 8034580:	2400      	movs	r4, #0
 8034582:	2202      	movs	r2, #2
 8034584:	b929      	cbnz	r1, 8034592 <_dtoa_r+0x482>
 8034586:	2c00      	cmp	r4, #0
 8034588:	f43f af57 	beq.w	803443a <_dtoa_r+0x32a>
 803458c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8034590:	e753      	b.n	803443a <_dtoa_r+0x32a>
 8034592:	07ce      	lsls	r6, r1, #31
 8034594:	d505      	bpl.n	80345a2 <_dtoa_r+0x492>
 8034596:	ed90 6b00 	vldr	d6, [r0]
 803459a:	3201      	adds	r2, #1
 803459c:	2401      	movs	r4, #1
 803459e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80345a2:	1049      	asrs	r1, r1, #1
 80345a4:	3008      	adds	r0, #8
 80345a6:	e7ed      	b.n	8034584 <_dtoa_r+0x474>
 80345a8:	2202      	movs	r2, #2
 80345aa:	e746      	b.n	803443a <_dtoa_r+0x32a>
 80345ac:	f8cd 8014 	str.w	r8, [sp, #20]
 80345b0:	4654      	mov	r4, sl
 80345b2:	e762      	b.n	803447a <_dtoa_r+0x36a>
 80345b4:	4a59      	ldr	r2, [pc, #356]	@ (803471c <_dtoa_r+0x60c>)
 80345b6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80345ba:	ed12 4b02 	vldr	d4, [r2, #-8]
 80345be:	9a08      	ldr	r2, [sp, #32]
 80345c0:	ec41 0b17 	vmov	d7, r0, r1
 80345c4:	443c      	add	r4, r7
 80345c6:	b34a      	cbz	r2, 803461c <_dtoa_r+0x50c>
 80345c8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80345cc:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80345d0:	463e      	mov	r6, r7
 80345d2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80345d6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80345da:	ee35 7b47 	vsub.f64	d7, d5, d7
 80345de:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80345e2:	ee14 2a90 	vmov	r2, s9
 80345e6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80345ea:	3230      	adds	r2, #48	@ 0x30
 80345ec:	ee36 6b45 	vsub.f64	d6, d6, d5
 80345f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80345f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80345f8:	f806 2b01 	strb.w	r2, [r6], #1
 80345fc:	d438      	bmi.n	8034670 <_dtoa_r+0x560>
 80345fe:	ee32 5b46 	vsub.f64	d5, d2, d6
 8034602:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8034606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803460a:	d46e      	bmi.n	80346ea <_dtoa_r+0x5da>
 803460c:	42a6      	cmp	r6, r4
 803460e:	f43f af5a 	beq.w	80344c6 <_dtoa_r+0x3b6>
 8034612:	ee27 7b03 	vmul.f64	d7, d7, d3
 8034616:	ee26 6b03 	vmul.f64	d6, d6, d3
 803461a:	e7e0      	b.n	80345de <_dtoa_r+0x4ce>
 803461c:	4621      	mov	r1, r4
 803461e:	463e      	mov	r6, r7
 8034620:	ee27 7b04 	vmul.f64	d7, d7, d4
 8034624:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8034628:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 803462c:	ee14 2a90 	vmov	r2, s9
 8034630:	3230      	adds	r2, #48	@ 0x30
 8034632:	f806 2b01 	strb.w	r2, [r6], #1
 8034636:	42a6      	cmp	r6, r4
 8034638:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 803463c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8034640:	d119      	bne.n	8034676 <_dtoa_r+0x566>
 8034642:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8034646:	ee37 4b05 	vadd.f64	d4, d7, d5
 803464a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 803464e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8034652:	dc4a      	bgt.n	80346ea <_dtoa_r+0x5da>
 8034654:	ee35 5b47 	vsub.f64	d5, d5, d7
 8034658:	eeb4 6bc5 	vcmpe.f64	d6, d5
 803465c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8034660:	f57f af31 	bpl.w	80344c6 <_dtoa_r+0x3b6>
 8034664:	460e      	mov	r6, r1
 8034666:	3901      	subs	r1, #1
 8034668:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 803466c:	2b30      	cmp	r3, #48	@ 0x30
 803466e:	d0f9      	beq.n	8034664 <_dtoa_r+0x554>
 8034670:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8034674:	e027      	b.n	80346c6 <_dtoa_r+0x5b6>
 8034676:	ee26 6b03 	vmul.f64	d6, d6, d3
 803467a:	e7d5      	b.n	8034628 <_dtoa_r+0x518>
 803467c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8034680:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8034684:	463e      	mov	r6, r7
 8034686:	ee87 5b06 	vdiv.f64	d5, d7, d6
 803468a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 803468e:	ee15 3a10 	vmov	r3, s10
 8034692:	3330      	adds	r3, #48	@ 0x30
 8034694:	f806 3b01 	strb.w	r3, [r6], #1
 8034698:	1bf3      	subs	r3, r6, r7
 803469a:	459a      	cmp	sl, r3
 803469c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80346a0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80346a4:	d132      	bne.n	803470c <_dtoa_r+0x5fc>
 80346a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80346aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80346ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80346b2:	dc18      	bgt.n	80346e6 <_dtoa_r+0x5d6>
 80346b4:	eeb4 7b46 	vcmp.f64	d7, d6
 80346b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80346bc:	d103      	bne.n	80346c6 <_dtoa_r+0x5b6>
 80346be:	ee15 3a10 	vmov	r3, s10
 80346c2:	07db      	lsls	r3, r3, #31
 80346c4:	d40f      	bmi.n	80346e6 <_dtoa_r+0x5d6>
 80346c6:	9901      	ldr	r1, [sp, #4]
 80346c8:	4648      	mov	r0, r9
 80346ca:	f000 fb09 	bl	8034ce0 <_Bfree>
 80346ce:	2300      	movs	r3, #0
 80346d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80346d2:	7033      	strb	r3, [r6, #0]
 80346d4:	f108 0301 	add.w	r3, r8, #1
 80346d8:	6013      	str	r3, [r2, #0]
 80346da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80346dc:	2b00      	cmp	r3, #0
 80346de:	f000 824b 	beq.w	8034b78 <_dtoa_r+0xa68>
 80346e2:	601e      	str	r6, [r3, #0]
 80346e4:	e248      	b.n	8034b78 <_dtoa_r+0xa68>
 80346e6:	f8cd 8014 	str.w	r8, [sp, #20]
 80346ea:	4633      	mov	r3, r6
 80346ec:	461e      	mov	r6, r3
 80346ee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80346f2:	2a39      	cmp	r2, #57	@ 0x39
 80346f4:	d106      	bne.n	8034704 <_dtoa_r+0x5f4>
 80346f6:	429f      	cmp	r7, r3
 80346f8:	d1f8      	bne.n	80346ec <_dtoa_r+0x5dc>
 80346fa:	9a05      	ldr	r2, [sp, #20]
 80346fc:	3201      	adds	r2, #1
 80346fe:	9205      	str	r2, [sp, #20]
 8034700:	2230      	movs	r2, #48	@ 0x30
 8034702:	703a      	strb	r2, [r7, #0]
 8034704:	781a      	ldrb	r2, [r3, #0]
 8034706:	3201      	adds	r2, #1
 8034708:	701a      	strb	r2, [r3, #0]
 803470a:	e7b1      	b.n	8034670 <_dtoa_r+0x560>
 803470c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8034710:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8034714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8034718:	d1b5      	bne.n	8034686 <_dtoa_r+0x576>
 803471a:	e7d4      	b.n	80346c6 <_dtoa_r+0x5b6>
 803471c:	080728a8 	.word	0x080728a8
 8034720:	08072880 	.word	0x08072880
 8034724:	9908      	ldr	r1, [sp, #32]
 8034726:	2900      	cmp	r1, #0
 8034728:	f000 80e9 	beq.w	80348fe <_dtoa_r+0x7ee>
 803472c:	9907      	ldr	r1, [sp, #28]
 803472e:	2901      	cmp	r1, #1
 8034730:	f300 80cb 	bgt.w	80348ca <_dtoa_r+0x7ba>
 8034734:	2d00      	cmp	r5, #0
 8034736:	f000 80c4 	beq.w	80348c2 <_dtoa_r+0x7b2>
 803473a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 803473e:	9e04      	ldr	r6, [sp, #16]
 8034740:	461c      	mov	r4, r3
 8034742:	9305      	str	r3, [sp, #20]
 8034744:	9b04      	ldr	r3, [sp, #16]
 8034746:	4413      	add	r3, r2
 8034748:	9304      	str	r3, [sp, #16]
 803474a:	9b06      	ldr	r3, [sp, #24]
 803474c:	2101      	movs	r1, #1
 803474e:	4413      	add	r3, r2
 8034750:	4648      	mov	r0, r9
 8034752:	9306      	str	r3, [sp, #24]
 8034754:	f000 fbc2 	bl	8034edc <__i2b>
 8034758:	9b05      	ldr	r3, [sp, #20]
 803475a:	4605      	mov	r5, r0
 803475c:	b166      	cbz	r6, 8034778 <_dtoa_r+0x668>
 803475e:	9a06      	ldr	r2, [sp, #24]
 8034760:	2a00      	cmp	r2, #0
 8034762:	dd09      	ble.n	8034778 <_dtoa_r+0x668>
 8034764:	42b2      	cmp	r2, r6
 8034766:	9904      	ldr	r1, [sp, #16]
 8034768:	bfa8      	it	ge
 803476a:	4632      	movge	r2, r6
 803476c:	1a89      	subs	r1, r1, r2
 803476e:	9104      	str	r1, [sp, #16]
 8034770:	9906      	ldr	r1, [sp, #24]
 8034772:	1ab6      	subs	r6, r6, r2
 8034774:	1a8a      	subs	r2, r1, r2
 8034776:	9206      	str	r2, [sp, #24]
 8034778:	b30b      	cbz	r3, 80347be <_dtoa_r+0x6ae>
 803477a:	9a08      	ldr	r2, [sp, #32]
 803477c:	2a00      	cmp	r2, #0
 803477e:	f000 80c5 	beq.w	803490c <_dtoa_r+0x7fc>
 8034782:	2c00      	cmp	r4, #0
 8034784:	f000 80bf 	beq.w	8034906 <_dtoa_r+0x7f6>
 8034788:	4629      	mov	r1, r5
 803478a:	4622      	mov	r2, r4
 803478c:	4648      	mov	r0, r9
 803478e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8034790:	f000 fc5c 	bl	803504c <__pow5mult>
 8034794:	9a01      	ldr	r2, [sp, #4]
 8034796:	4601      	mov	r1, r0
 8034798:	4605      	mov	r5, r0
 803479a:	4648      	mov	r0, r9
 803479c:	f000 fbb4 	bl	8034f08 <__multiply>
 80347a0:	9901      	ldr	r1, [sp, #4]
 80347a2:	9005      	str	r0, [sp, #20]
 80347a4:	4648      	mov	r0, r9
 80347a6:	f000 fa9b 	bl	8034ce0 <_Bfree>
 80347aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80347ac:	1b1b      	subs	r3, r3, r4
 80347ae:	f000 80b0 	beq.w	8034912 <_dtoa_r+0x802>
 80347b2:	9905      	ldr	r1, [sp, #20]
 80347b4:	461a      	mov	r2, r3
 80347b6:	4648      	mov	r0, r9
 80347b8:	f000 fc48 	bl	803504c <__pow5mult>
 80347bc:	9001      	str	r0, [sp, #4]
 80347be:	2101      	movs	r1, #1
 80347c0:	4648      	mov	r0, r9
 80347c2:	f000 fb8b 	bl	8034edc <__i2b>
 80347c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80347c8:	4604      	mov	r4, r0
 80347ca:	2b00      	cmp	r3, #0
 80347cc:	f000 81da 	beq.w	8034b84 <_dtoa_r+0xa74>
 80347d0:	461a      	mov	r2, r3
 80347d2:	4601      	mov	r1, r0
 80347d4:	4648      	mov	r0, r9
 80347d6:	f000 fc39 	bl	803504c <__pow5mult>
 80347da:	9b07      	ldr	r3, [sp, #28]
 80347dc:	2b01      	cmp	r3, #1
 80347de:	4604      	mov	r4, r0
 80347e0:	f300 80a0 	bgt.w	8034924 <_dtoa_r+0x814>
 80347e4:	9b02      	ldr	r3, [sp, #8]
 80347e6:	2b00      	cmp	r3, #0
 80347e8:	f040 8096 	bne.w	8034918 <_dtoa_r+0x808>
 80347ec:	9b03      	ldr	r3, [sp, #12]
 80347ee:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80347f2:	2a00      	cmp	r2, #0
 80347f4:	f040 8092 	bne.w	803491c <_dtoa_r+0x80c>
 80347f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80347fc:	0d12      	lsrs	r2, r2, #20
 80347fe:	0512      	lsls	r2, r2, #20
 8034800:	2a00      	cmp	r2, #0
 8034802:	f000 808d 	beq.w	8034920 <_dtoa_r+0x810>
 8034806:	9b04      	ldr	r3, [sp, #16]
 8034808:	3301      	adds	r3, #1
 803480a:	9304      	str	r3, [sp, #16]
 803480c:	9b06      	ldr	r3, [sp, #24]
 803480e:	3301      	adds	r3, #1
 8034810:	9306      	str	r3, [sp, #24]
 8034812:	2301      	movs	r3, #1
 8034814:	930b      	str	r3, [sp, #44]	@ 0x2c
 8034816:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034818:	2b00      	cmp	r3, #0
 803481a:	f000 81b9 	beq.w	8034b90 <_dtoa_r+0xa80>
 803481e:	6922      	ldr	r2, [r4, #16]
 8034820:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8034824:	6910      	ldr	r0, [r2, #16]
 8034826:	f000 fb0d 	bl	8034e44 <__hi0bits>
 803482a:	f1c0 0020 	rsb	r0, r0, #32
 803482e:	9b06      	ldr	r3, [sp, #24]
 8034830:	4418      	add	r0, r3
 8034832:	f010 001f 	ands.w	r0, r0, #31
 8034836:	f000 8081 	beq.w	803493c <_dtoa_r+0x82c>
 803483a:	f1c0 0220 	rsb	r2, r0, #32
 803483e:	2a04      	cmp	r2, #4
 8034840:	dd73      	ble.n	803492a <_dtoa_r+0x81a>
 8034842:	9b04      	ldr	r3, [sp, #16]
 8034844:	f1c0 001c 	rsb	r0, r0, #28
 8034848:	4403      	add	r3, r0
 803484a:	9304      	str	r3, [sp, #16]
 803484c:	9b06      	ldr	r3, [sp, #24]
 803484e:	4406      	add	r6, r0
 8034850:	4403      	add	r3, r0
 8034852:	9306      	str	r3, [sp, #24]
 8034854:	9b04      	ldr	r3, [sp, #16]
 8034856:	2b00      	cmp	r3, #0
 8034858:	dd05      	ble.n	8034866 <_dtoa_r+0x756>
 803485a:	9901      	ldr	r1, [sp, #4]
 803485c:	461a      	mov	r2, r3
 803485e:	4648      	mov	r0, r9
 8034860:	f000 fc4e 	bl	8035100 <__lshift>
 8034864:	9001      	str	r0, [sp, #4]
 8034866:	9b06      	ldr	r3, [sp, #24]
 8034868:	2b00      	cmp	r3, #0
 803486a:	dd05      	ble.n	8034878 <_dtoa_r+0x768>
 803486c:	4621      	mov	r1, r4
 803486e:	461a      	mov	r2, r3
 8034870:	4648      	mov	r0, r9
 8034872:	f000 fc45 	bl	8035100 <__lshift>
 8034876:	4604      	mov	r4, r0
 8034878:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803487a:	2b00      	cmp	r3, #0
 803487c:	d060      	beq.n	8034940 <_dtoa_r+0x830>
 803487e:	9801      	ldr	r0, [sp, #4]
 8034880:	4621      	mov	r1, r4
 8034882:	f000 fca9 	bl	80351d8 <__mcmp>
 8034886:	2800      	cmp	r0, #0
 8034888:	da5a      	bge.n	8034940 <_dtoa_r+0x830>
 803488a:	f108 33ff 	add.w	r3, r8, #4294967295
 803488e:	9305      	str	r3, [sp, #20]
 8034890:	9901      	ldr	r1, [sp, #4]
 8034892:	2300      	movs	r3, #0
 8034894:	220a      	movs	r2, #10
 8034896:	4648      	mov	r0, r9
 8034898:	f000 fa44 	bl	8034d24 <__multadd>
 803489c:	9b08      	ldr	r3, [sp, #32]
 803489e:	9001      	str	r0, [sp, #4]
 80348a0:	2b00      	cmp	r3, #0
 80348a2:	f000 8177 	beq.w	8034b94 <_dtoa_r+0xa84>
 80348a6:	4629      	mov	r1, r5
 80348a8:	2300      	movs	r3, #0
 80348aa:	220a      	movs	r2, #10
 80348ac:	4648      	mov	r0, r9
 80348ae:	f000 fa39 	bl	8034d24 <__multadd>
 80348b2:	f1bb 0f00 	cmp.w	fp, #0
 80348b6:	4605      	mov	r5, r0
 80348b8:	dc6e      	bgt.n	8034998 <_dtoa_r+0x888>
 80348ba:	9b07      	ldr	r3, [sp, #28]
 80348bc:	2b02      	cmp	r3, #2
 80348be:	dc48      	bgt.n	8034952 <_dtoa_r+0x842>
 80348c0:	e06a      	b.n	8034998 <_dtoa_r+0x888>
 80348c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80348c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80348c8:	e739      	b.n	803473e <_dtoa_r+0x62e>
 80348ca:	f10a 34ff 	add.w	r4, sl, #4294967295
 80348ce:	42a3      	cmp	r3, r4
 80348d0:	db07      	blt.n	80348e2 <_dtoa_r+0x7d2>
 80348d2:	f1ba 0f00 	cmp.w	sl, #0
 80348d6:	eba3 0404 	sub.w	r4, r3, r4
 80348da:	db0b      	blt.n	80348f4 <_dtoa_r+0x7e4>
 80348dc:	9e04      	ldr	r6, [sp, #16]
 80348de:	4652      	mov	r2, sl
 80348e0:	e72f      	b.n	8034742 <_dtoa_r+0x632>
 80348e2:	1ae2      	subs	r2, r4, r3
 80348e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80348e6:	9e04      	ldr	r6, [sp, #16]
 80348e8:	4413      	add	r3, r2
 80348ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80348ec:	4652      	mov	r2, sl
 80348ee:	4623      	mov	r3, r4
 80348f0:	2400      	movs	r4, #0
 80348f2:	e726      	b.n	8034742 <_dtoa_r+0x632>
 80348f4:	9a04      	ldr	r2, [sp, #16]
 80348f6:	eba2 060a 	sub.w	r6, r2, sl
 80348fa:	2200      	movs	r2, #0
 80348fc:	e721      	b.n	8034742 <_dtoa_r+0x632>
 80348fe:	9e04      	ldr	r6, [sp, #16]
 8034900:	9d08      	ldr	r5, [sp, #32]
 8034902:	461c      	mov	r4, r3
 8034904:	e72a      	b.n	803475c <_dtoa_r+0x64c>
 8034906:	9a01      	ldr	r2, [sp, #4]
 8034908:	9205      	str	r2, [sp, #20]
 803490a:	e752      	b.n	80347b2 <_dtoa_r+0x6a2>
 803490c:	9901      	ldr	r1, [sp, #4]
 803490e:	461a      	mov	r2, r3
 8034910:	e751      	b.n	80347b6 <_dtoa_r+0x6a6>
 8034912:	9b05      	ldr	r3, [sp, #20]
 8034914:	9301      	str	r3, [sp, #4]
 8034916:	e752      	b.n	80347be <_dtoa_r+0x6ae>
 8034918:	2300      	movs	r3, #0
 803491a:	e77b      	b.n	8034814 <_dtoa_r+0x704>
 803491c:	9b02      	ldr	r3, [sp, #8]
 803491e:	e779      	b.n	8034814 <_dtoa_r+0x704>
 8034920:	920b      	str	r2, [sp, #44]	@ 0x2c
 8034922:	e778      	b.n	8034816 <_dtoa_r+0x706>
 8034924:	2300      	movs	r3, #0
 8034926:	930b      	str	r3, [sp, #44]	@ 0x2c
 8034928:	e779      	b.n	803481e <_dtoa_r+0x70e>
 803492a:	d093      	beq.n	8034854 <_dtoa_r+0x744>
 803492c:	9b04      	ldr	r3, [sp, #16]
 803492e:	321c      	adds	r2, #28
 8034930:	4413      	add	r3, r2
 8034932:	9304      	str	r3, [sp, #16]
 8034934:	9b06      	ldr	r3, [sp, #24]
 8034936:	4416      	add	r6, r2
 8034938:	4413      	add	r3, r2
 803493a:	e78a      	b.n	8034852 <_dtoa_r+0x742>
 803493c:	4602      	mov	r2, r0
 803493e:	e7f5      	b.n	803492c <_dtoa_r+0x81c>
 8034940:	f1ba 0f00 	cmp.w	sl, #0
 8034944:	f8cd 8014 	str.w	r8, [sp, #20]
 8034948:	46d3      	mov	fp, sl
 803494a:	dc21      	bgt.n	8034990 <_dtoa_r+0x880>
 803494c:	9b07      	ldr	r3, [sp, #28]
 803494e:	2b02      	cmp	r3, #2
 8034950:	dd1e      	ble.n	8034990 <_dtoa_r+0x880>
 8034952:	f1bb 0f00 	cmp.w	fp, #0
 8034956:	f47f addc 	bne.w	8034512 <_dtoa_r+0x402>
 803495a:	4621      	mov	r1, r4
 803495c:	465b      	mov	r3, fp
 803495e:	2205      	movs	r2, #5
 8034960:	4648      	mov	r0, r9
 8034962:	f000 f9df 	bl	8034d24 <__multadd>
 8034966:	4601      	mov	r1, r0
 8034968:	4604      	mov	r4, r0
 803496a:	9801      	ldr	r0, [sp, #4]
 803496c:	f000 fc34 	bl	80351d8 <__mcmp>
 8034970:	2800      	cmp	r0, #0
 8034972:	f77f adce 	ble.w	8034512 <_dtoa_r+0x402>
 8034976:	463e      	mov	r6, r7
 8034978:	2331      	movs	r3, #49	@ 0x31
 803497a:	f806 3b01 	strb.w	r3, [r6], #1
 803497e:	9b05      	ldr	r3, [sp, #20]
 8034980:	3301      	adds	r3, #1
 8034982:	9305      	str	r3, [sp, #20]
 8034984:	e5c9      	b.n	803451a <_dtoa_r+0x40a>
 8034986:	f8cd 8014 	str.w	r8, [sp, #20]
 803498a:	4654      	mov	r4, sl
 803498c:	4625      	mov	r5, r4
 803498e:	e7f2      	b.n	8034976 <_dtoa_r+0x866>
 8034990:	9b08      	ldr	r3, [sp, #32]
 8034992:	2b00      	cmp	r3, #0
 8034994:	f000 8102 	beq.w	8034b9c <_dtoa_r+0xa8c>
 8034998:	2e00      	cmp	r6, #0
 803499a:	dd05      	ble.n	80349a8 <_dtoa_r+0x898>
 803499c:	4629      	mov	r1, r5
 803499e:	4632      	mov	r2, r6
 80349a0:	4648      	mov	r0, r9
 80349a2:	f000 fbad 	bl	8035100 <__lshift>
 80349a6:	4605      	mov	r5, r0
 80349a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80349aa:	2b00      	cmp	r3, #0
 80349ac:	d058      	beq.n	8034a60 <_dtoa_r+0x950>
 80349ae:	6869      	ldr	r1, [r5, #4]
 80349b0:	4648      	mov	r0, r9
 80349b2:	f000 f955 	bl	8034c60 <_Balloc>
 80349b6:	4606      	mov	r6, r0
 80349b8:	b928      	cbnz	r0, 80349c6 <_dtoa_r+0x8b6>
 80349ba:	4b82      	ldr	r3, [pc, #520]	@ (8034bc4 <_dtoa_r+0xab4>)
 80349bc:	4602      	mov	r2, r0
 80349be:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80349c2:	f7ff bbbe 	b.w	8034142 <_dtoa_r+0x32>
 80349c6:	692a      	ldr	r2, [r5, #16]
 80349c8:	3202      	adds	r2, #2
 80349ca:	0092      	lsls	r2, r2, #2
 80349cc:	f105 010c 	add.w	r1, r5, #12
 80349d0:	300c      	adds	r0, #12
 80349d2:	f7ff fb00 	bl	8033fd6 <memcpy>
 80349d6:	2201      	movs	r2, #1
 80349d8:	4631      	mov	r1, r6
 80349da:	4648      	mov	r0, r9
 80349dc:	f000 fb90 	bl	8035100 <__lshift>
 80349e0:	1c7b      	adds	r3, r7, #1
 80349e2:	9304      	str	r3, [sp, #16]
 80349e4:	eb07 030b 	add.w	r3, r7, fp
 80349e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80349ea:	9b02      	ldr	r3, [sp, #8]
 80349ec:	f003 0301 	and.w	r3, r3, #1
 80349f0:	46a8      	mov	r8, r5
 80349f2:	9308      	str	r3, [sp, #32]
 80349f4:	4605      	mov	r5, r0
 80349f6:	9b04      	ldr	r3, [sp, #16]
 80349f8:	9801      	ldr	r0, [sp, #4]
 80349fa:	4621      	mov	r1, r4
 80349fc:	f103 3bff 	add.w	fp, r3, #4294967295
 8034a00:	f7ff fafe 	bl	8034000 <quorem>
 8034a04:	4641      	mov	r1, r8
 8034a06:	9002      	str	r0, [sp, #8]
 8034a08:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8034a0c:	9801      	ldr	r0, [sp, #4]
 8034a0e:	f000 fbe3 	bl	80351d8 <__mcmp>
 8034a12:	462a      	mov	r2, r5
 8034a14:	9006      	str	r0, [sp, #24]
 8034a16:	4621      	mov	r1, r4
 8034a18:	4648      	mov	r0, r9
 8034a1a:	f000 fbf9 	bl	8035210 <__mdiff>
 8034a1e:	68c2      	ldr	r2, [r0, #12]
 8034a20:	4606      	mov	r6, r0
 8034a22:	b9fa      	cbnz	r2, 8034a64 <_dtoa_r+0x954>
 8034a24:	4601      	mov	r1, r0
 8034a26:	9801      	ldr	r0, [sp, #4]
 8034a28:	f000 fbd6 	bl	80351d8 <__mcmp>
 8034a2c:	4602      	mov	r2, r0
 8034a2e:	4631      	mov	r1, r6
 8034a30:	4648      	mov	r0, r9
 8034a32:	920a      	str	r2, [sp, #40]	@ 0x28
 8034a34:	f000 f954 	bl	8034ce0 <_Bfree>
 8034a38:	9b07      	ldr	r3, [sp, #28]
 8034a3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8034a3c:	9e04      	ldr	r6, [sp, #16]
 8034a3e:	ea42 0103 	orr.w	r1, r2, r3
 8034a42:	9b08      	ldr	r3, [sp, #32]
 8034a44:	4319      	orrs	r1, r3
 8034a46:	d10f      	bne.n	8034a68 <_dtoa_r+0x958>
 8034a48:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8034a4c:	d028      	beq.n	8034aa0 <_dtoa_r+0x990>
 8034a4e:	9b06      	ldr	r3, [sp, #24]
 8034a50:	2b00      	cmp	r3, #0
 8034a52:	dd02      	ble.n	8034a5a <_dtoa_r+0x94a>
 8034a54:	9b02      	ldr	r3, [sp, #8]
 8034a56:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8034a5a:	f88b a000 	strb.w	sl, [fp]
 8034a5e:	e55e      	b.n	803451e <_dtoa_r+0x40e>
 8034a60:	4628      	mov	r0, r5
 8034a62:	e7bd      	b.n	80349e0 <_dtoa_r+0x8d0>
 8034a64:	2201      	movs	r2, #1
 8034a66:	e7e2      	b.n	8034a2e <_dtoa_r+0x91e>
 8034a68:	9b06      	ldr	r3, [sp, #24]
 8034a6a:	2b00      	cmp	r3, #0
 8034a6c:	db04      	blt.n	8034a78 <_dtoa_r+0x968>
 8034a6e:	9907      	ldr	r1, [sp, #28]
 8034a70:	430b      	orrs	r3, r1
 8034a72:	9908      	ldr	r1, [sp, #32]
 8034a74:	430b      	orrs	r3, r1
 8034a76:	d120      	bne.n	8034aba <_dtoa_r+0x9aa>
 8034a78:	2a00      	cmp	r2, #0
 8034a7a:	ddee      	ble.n	8034a5a <_dtoa_r+0x94a>
 8034a7c:	9901      	ldr	r1, [sp, #4]
 8034a7e:	2201      	movs	r2, #1
 8034a80:	4648      	mov	r0, r9
 8034a82:	f000 fb3d 	bl	8035100 <__lshift>
 8034a86:	4621      	mov	r1, r4
 8034a88:	9001      	str	r0, [sp, #4]
 8034a8a:	f000 fba5 	bl	80351d8 <__mcmp>
 8034a8e:	2800      	cmp	r0, #0
 8034a90:	dc03      	bgt.n	8034a9a <_dtoa_r+0x98a>
 8034a92:	d1e2      	bne.n	8034a5a <_dtoa_r+0x94a>
 8034a94:	f01a 0f01 	tst.w	sl, #1
 8034a98:	d0df      	beq.n	8034a5a <_dtoa_r+0x94a>
 8034a9a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8034a9e:	d1d9      	bne.n	8034a54 <_dtoa_r+0x944>
 8034aa0:	2339      	movs	r3, #57	@ 0x39
 8034aa2:	f88b 3000 	strb.w	r3, [fp]
 8034aa6:	4633      	mov	r3, r6
 8034aa8:	461e      	mov	r6, r3
 8034aaa:	3b01      	subs	r3, #1
 8034aac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8034ab0:	2a39      	cmp	r2, #57	@ 0x39
 8034ab2:	d052      	beq.n	8034b5a <_dtoa_r+0xa4a>
 8034ab4:	3201      	adds	r2, #1
 8034ab6:	701a      	strb	r2, [r3, #0]
 8034ab8:	e531      	b.n	803451e <_dtoa_r+0x40e>
 8034aba:	2a00      	cmp	r2, #0
 8034abc:	dd07      	ble.n	8034ace <_dtoa_r+0x9be>
 8034abe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8034ac2:	d0ed      	beq.n	8034aa0 <_dtoa_r+0x990>
 8034ac4:	f10a 0301 	add.w	r3, sl, #1
 8034ac8:	f88b 3000 	strb.w	r3, [fp]
 8034acc:	e527      	b.n	803451e <_dtoa_r+0x40e>
 8034ace:	9b04      	ldr	r3, [sp, #16]
 8034ad0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8034ad2:	f803 ac01 	strb.w	sl, [r3, #-1]
 8034ad6:	4293      	cmp	r3, r2
 8034ad8:	d029      	beq.n	8034b2e <_dtoa_r+0xa1e>
 8034ada:	9901      	ldr	r1, [sp, #4]
 8034adc:	2300      	movs	r3, #0
 8034ade:	220a      	movs	r2, #10
 8034ae0:	4648      	mov	r0, r9
 8034ae2:	f000 f91f 	bl	8034d24 <__multadd>
 8034ae6:	45a8      	cmp	r8, r5
 8034ae8:	9001      	str	r0, [sp, #4]
 8034aea:	f04f 0300 	mov.w	r3, #0
 8034aee:	f04f 020a 	mov.w	r2, #10
 8034af2:	4641      	mov	r1, r8
 8034af4:	4648      	mov	r0, r9
 8034af6:	d107      	bne.n	8034b08 <_dtoa_r+0x9f8>
 8034af8:	f000 f914 	bl	8034d24 <__multadd>
 8034afc:	4680      	mov	r8, r0
 8034afe:	4605      	mov	r5, r0
 8034b00:	9b04      	ldr	r3, [sp, #16]
 8034b02:	3301      	adds	r3, #1
 8034b04:	9304      	str	r3, [sp, #16]
 8034b06:	e776      	b.n	80349f6 <_dtoa_r+0x8e6>
 8034b08:	f000 f90c 	bl	8034d24 <__multadd>
 8034b0c:	4629      	mov	r1, r5
 8034b0e:	4680      	mov	r8, r0
 8034b10:	2300      	movs	r3, #0
 8034b12:	220a      	movs	r2, #10
 8034b14:	4648      	mov	r0, r9
 8034b16:	f000 f905 	bl	8034d24 <__multadd>
 8034b1a:	4605      	mov	r5, r0
 8034b1c:	e7f0      	b.n	8034b00 <_dtoa_r+0x9f0>
 8034b1e:	f1bb 0f00 	cmp.w	fp, #0
 8034b22:	bfcc      	ite	gt
 8034b24:	465e      	movgt	r6, fp
 8034b26:	2601      	movle	r6, #1
 8034b28:	443e      	add	r6, r7
 8034b2a:	f04f 0800 	mov.w	r8, #0
 8034b2e:	9901      	ldr	r1, [sp, #4]
 8034b30:	2201      	movs	r2, #1
 8034b32:	4648      	mov	r0, r9
 8034b34:	f000 fae4 	bl	8035100 <__lshift>
 8034b38:	4621      	mov	r1, r4
 8034b3a:	9001      	str	r0, [sp, #4]
 8034b3c:	f000 fb4c 	bl	80351d8 <__mcmp>
 8034b40:	2800      	cmp	r0, #0
 8034b42:	dcb0      	bgt.n	8034aa6 <_dtoa_r+0x996>
 8034b44:	d102      	bne.n	8034b4c <_dtoa_r+0xa3c>
 8034b46:	f01a 0f01 	tst.w	sl, #1
 8034b4a:	d1ac      	bne.n	8034aa6 <_dtoa_r+0x996>
 8034b4c:	4633      	mov	r3, r6
 8034b4e:	461e      	mov	r6, r3
 8034b50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8034b54:	2a30      	cmp	r2, #48	@ 0x30
 8034b56:	d0fa      	beq.n	8034b4e <_dtoa_r+0xa3e>
 8034b58:	e4e1      	b.n	803451e <_dtoa_r+0x40e>
 8034b5a:	429f      	cmp	r7, r3
 8034b5c:	d1a4      	bne.n	8034aa8 <_dtoa_r+0x998>
 8034b5e:	9b05      	ldr	r3, [sp, #20]
 8034b60:	3301      	adds	r3, #1
 8034b62:	9305      	str	r3, [sp, #20]
 8034b64:	2331      	movs	r3, #49	@ 0x31
 8034b66:	703b      	strb	r3, [r7, #0]
 8034b68:	e4d9      	b.n	803451e <_dtoa_r+0x40e>
 8034b6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8034b6c:	4f16      	ldr	r7, [pc, #88]	@ (8034bc8 <_dtoa_r+0xab8>)
 8034b6e:	b11b      	cbz	r3, 8034b78 <_dtoa_r+0xa68>
 8034b70:	f107 0308 	add.w	r3, r7, #8
 8034b74:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8034b76:	6013      	str	r3, [r2, #0]
 8034b78:	4638      	mov	r0, r7
 8034b7a:	b011      	add	sp, #68	@ 0x44
 8034b7c:	ecbd 8b02 	vpop	{d8}
 8034b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034b84:	9b07      	ldr	r3, [sp, #28]
 8034b86:	2b01      	cmp	r3, #1
 8034b88:	f77f ae2c 	ble.w	80347e4 <_dtoa_r+0x6d4>
 8034b8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034b8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8034b90:	2001      	movs	r0, #1
 8034b92:	e64c      	b.n	803482e <_dtoa_r+0x71e>
 8034b94:	f1bb 0f00 	cmp.w	fp, #0
 8034b98:	f77f aed8 	ble.w	803494c <_dtoa_r+0x83c>
 8034b9c:	463e      	mov	r6, r7
 8034b9e:	9801      	ldr	r0, [sp, #4]
 8034ba0:	4621      	mov	r1, r4
 8034ba2:	f7ff fa2d 	bl	8034000 <quorem>
 8034ba6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8034baa:	f806 ab01 	strb.w	sl, [r6], #1
 8034bae:	1bf2      	subs	r2, r6, r7
 8034bb0:	4593      	cmp	fp, r2
 8034bb2:	ddb4      	ble.n	8034b1e <_dtoa_r+0xa0e>
 8034bb4:	9901      	ldr	r1, [sp, #4]
 8034bb6:	2300      	movs	r3, #0
 8034bb8:	220a      	movs	r2, #10
 8034bba:	4648      	mov	r0, r9
 8034bbc:	f000 f8b2 	bl	8034d24 <__multadd>
 8034bc0:	9001      	str	r0, [sp, #4]
 8034bc2:	e7ec      	b.n	8034b9e <_dtoa_r+0xa8e>
 8034bc4:	0807274d 	.word	0x0807274d
 8034bc8:	080726d1 	.word	0x080726d1

08034bcc <_free_r>:
 8034bcc:	b538      	push	{r3, r4, r5, lr}
 8034bce:	4605      	mov	r5, r0
 8034bd0:	2900      	cmp	r1, #0
 8034bd2:	d041      	beq.n	8034c58 <_free_r+0x8c>
 8034bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8034bd8:	1f0c      	subs	r4, r1, #4
 8034bda:	2b00      	cmp	r3, #0
 8034bdc:	bfb8      	it	lt
 8034bde:	18e4      	addlt	r4, r4, r3
 8034be0:	f7fe f9a0 	bl	8032f24 <__malloc_lock>
 8034be4:	4a1d      	ldr	r2, [pc, #116]	@ (8034c5c <_free_r+0x90>)
 8034be6:	6813      	ldr	r3, [r2, #0]
 8034be8:	b933      	cbnz	r3, 8034bf8 <_free_r+0x2c>
 8034bea:	6063      	str	r3, [r4, #4]
 8034bec:	6014      	str	r4, [r2, #0]
 8034bee:	4628      	mov	r0, r5
 8034bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8034bf4:	f7fe b99c 	b.w	8032f30 <__malloc_unlock>
 8034bf8:	42a3      	cmp	r3, r4
 8034bfa:	d908      	bls.n	8034c0e <_free_r+0x42>
 8034bfc:	6820      	ldr	r0, [r4, #0]
 8034bfe:	1821      	adds	r1, r4, r0
 8034c00:	428b      	cmp	r3, r1
 8034c02:	bf01      	itttt	eq
 8034c04:	6819      	ldreq	r1, [r3, #0]
 8034c06:	685b      	ldreq	r3, [r3, #4]
 8034c08:	1809      	addeq	r1, r1, r0
 8034c0a:	6021      	streq	r1, [r4, #0]
 8034c0c:	e7ed      	b.n	8034bea <_free_r+0x1e>
 8034c0e:	461a      	mov	r2, r3
 8034c10:	685b      	ldr	r3, [r3, #4]
 8034c12:	b10b      	cbz	r3, 8034c18 <_free_r+0x4c>
 8034c14:	42a3      	cmp	r3, r4
 8034c16:	d9fa      	bls.n	8034c0e <_free_r+0x42>
 8034c18:	6811      	ldr	r1, [r2, #0]
 8034c1a:	1850      	adds	r0, r2, r1
 8034c1c:	42a0      	cmp	r0, r4
 8034c1e:	d10b      	bne.n	8034c38 <_free_r+0x6c>
 8034c20:	6820      	ldr	r0, [r4, #0]
 8034c22:	4401      	add	r1, r0
 8034c24:	1850      	adds	r0, r2, r1
 8034c26:	4283      	cmp	r3, r0
 8034c28:	6011      	str	r1, [r2, #0]
 8034c2a:	d1e0      	bne.n	8034bee <_free_r+0x22>
 8034c2c:	6818      	ldr	r0, [r3, #0]
 8034c2e:	685b      	ldr	r3, [r3, #4]
 8034c30:	6053      	str	r3, [r2, #4]
 8034c32:	4408      	add	r0, r1
 8034c34:	6010      	str	r0, [r2, #0]
 8034c36:	e7da      	b.n	8034bee <_free_r+0x22>
 8034c38:	d902      	bls.n	8034c40 <_free_r+0x74>
 8034c3a:	230c      	movs	r3, #12
 8034c3c:	602b      	str	r3, [r5, #0]
 8034c3e:	e7d6      	b.n	8034bee <_free_r+0x22>
 8034c40:	6820      	ldr	r0, [r4, #0]
 8034c42:	1821      	adds	r1, r4, r0
 8034c44:	428b      	cmp	r3, r1
 8034c46:	bf04      	itt	eq
 8034c48:	6819      	ldreq	r1, [r3, #0]
 8034c4a:	685b      	ldreq	r3, [r3, #4]
 8034c4c:	6063      	str	r3, [r4, #4]
 8034c4e:	bf04      	itt	eq
 8034c50:	1809      	addeq	r1, r1, r0
 8034c52:	6021      	streq	r1, [r4, #0]
 8034c54:	6054      	str	r4, [r2, #4]
 8034c56:	e7ca      	b.n	8034bee <_free_r+0x22>
 8034c58:	bd38      	pop	{r3, r4, r5, pc}
 8034c5a:	bf00      	nop
 8034c5c:	24052a24 	.word	0x24052a24

08034c60 <_Balloc>:
 8034c60:	b570      	push	{r4, r5, r6, lr}
 8034c62:	69c6      	ldr	r6, [r0, #28]
 8034c64:	4604      	mov	r4, r0
 8034c66:	460d      	mov	r5, r1
 8034c68:	b976      	cbnz	r6, 8034c88 <_Balloc+0x28>
 8034c6a:	2010      	movs	r0, #16
 8034c6c:	f7e7 fdae 	bl	801c7cc <__wrap_malloc>
 8034c70:	4602      	mov	r2, r0
 8034c72:	61e0      	str	r0, [r4, #28]
 8034c74:	b920      	cbnz	r0, 8034c80 <_Balloc+0x20>
 8034c76:	4b18      	ldr	r3, [pc, #96]	@ (8034cd8 <_Balloc+0x78>)
 8034c78:	4818      	ldr	r0, [pc, #96]	@ (8034cdc <_Balloc+0x7c>)
 8034c7a:	216b      	movs	r1, #107	@ 0x6b
 8034c7c:	f001 fce4 	bl	8036648 <__assert_func>
 8034c80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8034c84:	6006      	str	r6, [r0, #0]
 8034c86:	60c6      	str	r6, [r0, #12]
 8034c88:	69e6      	ldr	r6, [r4, #28]
 8034c8a:	68f3      	ldr	r3, [r6, #12]
 8034c8c:	b183      	cbz	r3, 8034cb0 <_Balloc+0x50>
 8034c8e:	69e3      	ldr	r3, [r4, #28]
 8034c90:	68db      	ldr	r3, [r3, #12]
 8034c92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8034c96:	b9b8      	cbnz	r0, 8034cc8 <_Balloc+0x68>
 8034c98:	2101      	movs	r1, #1
 8034c9a:	fa01 f605 	lsl.w	r6, r1, r5
 8034c9e:	1d72      	adds	r2, r6, #5
 8034ca0:	0092      	lsls	r2, r2, #2
 8034ca2:	4620      	mov	r0, r4
 8034ca4:	f001 fcee 	bl	8036684 <_calloc_r>
 8034ca8:	b160      	cbz	r0, 8034cc4 <_Balloc+0x64>
 8034caa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8034cae:	e00e      	b.n	8034cce <_Balloc+0x6e>
 8034cb0:	2221      	movs	r2, #33	@ 0x21
 8034cb2:	2104      	movs	r1, #4
 8034cb4:	4620      	mov	r0, r4
 8034cb6:	f001 fce5 	bl	8036684 <_calloc_r>
 8034cba:	69e3      	ldr	r3, [r4, #28]
 8034cbc:	60f0      	str	r0, [r6, #12]
 8034cbe:	68db      	ldr	r3, [r3, #12]
 8034cc0:	2b00      	cmp	r3, #0
 8034cc2:	d1e4      	bne.n	8034c8e <_Balloc+0x2e>
 8034cc4:	2000      	movs	r0, #0
 8034cc6:	bd70      	pop	{r4, r5, r6, pc}
 8034cc8:	6802      	ldr	r2, [r0, #0]
 8034cca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8034cce:	2300      	movs	r3, #0
 8034cd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8034cd4:	e7f7      	b.n	8034cc6 <_Balloc+0x66>
 8034cd6:	bf00      	nop
 8034cd8:	080726de 	.word	0x080726de
 8034cdc:	0807275e 	.word	0x0807275e

08034ce0 <_Bfree>:
 8034ce0:	b570      	push	{r4, r5, r6, lr}
 8034ce2:	69c6      	ldr	r6, [r0, #28]
 8034ce4:	4605      	mov	r5, r0
 8034ce6:	460c      	mov	r4, r1
 8034ce8:	b976      	cbnz	r6, 8034d08 <_Bfree+0x28>
 8034cea:	2010      	movs	r0, #16
 8034cec:	f7e7 fd6e 	bl	801c7cc <__wrap_malloc>
 8034cf0:	4602      	mov	r2, r0
 8034cf2:	61e8      	str	r0, [r5, #28]
 8034cf4:	b920      	cbnz	r0, 8034d00 <_Bfree+0x20>
 8034cf6:	4b09      	ldr	r3, [pc, #36]	@ (8034d1c <_Bfree+0x3c>)
 8034cf8:	4809      	ldr	r0, [pc, #36]	@ (8034d20 <_Bfree+0x40>)
 8034cfa:	218f      	movs	r1, #143	@ 0x8f
 8034cfc:	f001 fca4 	bl	8036648 <__assert_func>
 8034d00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8034d04:	6006      	str	r6, [r0, #0]
 8034d06:	60c6      	str	r6, [r0, #12]
 8034d08:	b13c      	cbz	r4, 8034d1a <_Bfree+0x3a>
 8034d0a:	69eb      	ldr	r3, [r5, #28]
 8034d0c:	6862      	ldr	r2, [r4, #4]
 8034d0e:	68db      	ldr	r3, [r3, #12]
 8034d10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8034d14:	6021      	str	r1, [r4, #0]
 8034d16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8034d1a:	bd70      	pop	{r4, r5, r6, pc}
 8034d1c:	080726de 	.word	0x080726de
 8034d20:	0807275e 	.word	0x0807275e

08034d24 <__multadd>:
 8034d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8034d28:	690d      	ldr	r5, [r1, #16]
 8034d2a:	4607      	mov	r7, r0
 8034d2c:	460c      	mov	r4, r1
 8034d2e:	461e      	mov	r6, r3
 8034d30:	f101 0c14 	add.w	ip, r1, #20
 8034d34:	2000      	movs	r0, #0
 8034d36:	f8dc 3000 	ldr.w	r3, [ip]
 8034d3a:	b299      	uxth	r1, r3
 8034d3c:	fb02 6101 	mla	r1, r2, r1, r6
 8034d40:	0c1e      	lsrs	r6, r3, #16
 8034d42:	0c0b      	lsrs	r3, r1, #16
 8034d44:	fb02 3306 	mla	r3, r2, r6, r3
 8034d48:	b289      	uxth	r1, r1
 8034d4a:	3001      	adds	r0, #1
 8034d4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8034d50:	4285      	cmp	r5, r0
 8034d52:	f84c 1b04 	str.w	r1, [ip], #4
 8034d56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8034d5a:	dcec      	bgt.n	8034d36 <__multadd+0x12>
 8034d5c:	b30e      	cbz	r6, 8034da2 <__multadd+0x7e>
 8034d5e:	68a3      	ldr	r3, [r4, #8]
 8034d60:	42ab      	cmp	r3, r5
 8034d62:	dc19      	bgt.n	8034d98 <__multadd+0x74>
 8034d64:	6861      	ldr	r1, [r4, #4]
 8034d66:	4638      	mov	r0, r7
 8034d68:	3101      	adds	r1, #1
 8034d6a:	f7ff ff79 	bl	8034c60 <_Balloc>
 8034d6e:	4680      	mov	r8, r0
 8034d70:	b928      	cbnz	r0, 8034d7e <__multadd+0x5a>
 8034d72:	4602      	mov	r2, r0
 8034d74:	4b0c      	ldr	r3, [pc, #48]	@ (8034da8 <__multadd+0x84>)
 8034d76:	480d      	ldr	r0, [pc, #52]	@ (8034dac <__multadd+0x88>)
 8034d78:	21ba      	movs	r1, #186	@ 0xba
 8034d7a:	f001 fc65 	bl	8036648 <__assert_func>
 8034d7e:	6922      	ldr	r2, [r4, #16]
 8034d80:	3202      	adds	r2, #2
 8034d82:	f104 010c 	add.w	r1, r4, #12
 8034d86:	0092      	lsls	r2, r2, #2
 8034d88:	300c      	adds	r0, #12
 8034d8a:	f7ff f924 	bl	8033fd6 <memcpy>
 8034d8e:	4621      	mov	r1, r4
 8034d90:	4638      	mov	r0, r7
 8034d92:	f7ff ffa5 	bl	8034ce0 <_Bfree>
 8034d96:	4644      	mov	r4, r8
 8034d98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8034d9c:	3501      	adds	r5, #1
 8034d9e:	615e      	str	r6, [r3, #20]
 8034da0:	6125      	str	r5, [r4, #16]
 8034da2:	4620      	mov	r0, r4
 8034da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8034da8:	0807274d 	.word	0x0807274d
 8034dac:	0807275e 	.word	0x0807275e

08034db0 <__s2b>:
 8034db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8034db4:	460c      	mov	r4, r1
 8034db6:	4615      	mov	r5, r2
 8034db8:	461f      	mov	r7, r3
 8034dba:	2209      	movs	r2, #9
 8034dbc:	3308      	adds	r3, #8
 8034dbe:	4606      	mov	r6, r0
 8034dc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8034dc4:	2100      	movs	r1, #0
 8034dc6:	2201      	movs	r2, #1
 8034dc8:	429a      	cmp	r2, r3
 8034dca:	db09      	blt.n	8034de0 <__s2b+0x30>
 8034dcc:	4630      	mov	r0, r6
 8034dce:	f7ff ff47 	bl	8034c60 <_Balloc>
 8034dd2:	b940      	cbnz	r0, 8034de6 <__s2b+0x36>
 8034dd4:	4602      	mov	r2, r0
 8034dd6:	4b19      	ldr	r3, [pc, #100]	@ (8034e3c <__s2b+0x8c>)
 8034dd8:	4819      	ldr	r0, [pc, #100]	@ (8034e40 <__s2b+0x90>)
 8034dda:	21d3      	movs	r1, #211	@ 0xd3
 8034ddc:	f001 fc34 	bl	8036648 <__assert_func>
 8034de0:	0052      	lsls	r2, r2, #1
 8034de2:	3101      	adds	r1, #1
 8034de4:	e7f0      	b.n	8034dc8 <__s2b+0x18>
 8034de6:	9b08      	ldr	r3, [sp, #32]
 8034de8:	6143      	str	r3, [r0, #20]
 8034dea:	2d09      	cmp	r5, #9
 8034dec:	f04f 0301 	mov.w	r3, #1
 8034df0:	6103      	str	r3, [r0, #16]
 8034df2:	dd16      	ble.n	8034e22 <__s2b+0x72>
 8034df4:	f104 0909 	add.w	r9, r4, #9
 8034df8:	46c8      	mov	r8, r9
 8034dfa:	442c      	add	r4, r5
 8034dfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8034e00:	4601      	mov	r1, r0
 8034e02:	3b30      	subs	r3, #48	@ 0x30
 8034e04:	220a      	movs	r2, #10
 8034e06:	4630      	mov	r0, r6
 8034e08:	f7ff ff8c 	bl	8034d24 <__multadd>
 8034e0c:	45a0      	cmp	r8, r4
 8034e0e:	d1f5      	bne.n	8034dfc <__s2b+0x4c>
 8034e10:	f1a5 0408 	sub.w	r4, r5, #8
 8034e14:	444c      	add	r4, r9
 8034e16:	1b2d      	subs	r5, r5, r4
 8034e18:	1963      	adds	r3, r4, r5
 8034e1a:	42bb      	cmp	r3, r7
 8034e1c:	db04      	blt.n	8034e28 <__s2b+0x78>
 8034e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8034e22:	340a      	adds	r4, #10
 8034e24:	2509      	movs	r5, #9
 8034e26:	e7f6      	b.n	8034e16 <__s2b+0x66>
 8034e28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8034e2c:	4601      	mov	r1, r0
 8034e2e:	3b30      	subs	r3, #48	@ 0x30
 8034e30:	220a      	movs	r2, #10
 8034e32:	4630      	mov	r0, r6
 8034e34:	f7ff ff76 	bl	8034d24 <__multadd>
 8034e38:	e7ee      	b.n	8034e18 <__s2b+0x68>
 8034e3a:	bf00      	nop
 8034e3c:	0807274d 	.word	0x0807274d
 8034e40:	0807275e 	.word	0x0807275e

08034e44 <__hi0bits>:
 8034e44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8034e48:	4603      	mov	r3, r0
 8034e4a:	bf36      	itet	cc
 8034e4c:	0403      	lslcc	r3, r0, #16
 8034e4e:	2000      	movcs	r0, #0
 8034e50:	2010      	movcc	r0, #16
 8034e52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8034e56:	bf3c      	itt	cc
 8034e58:	021b      	lslcc	r3, r3, #8
 8034e5a:	3008      	addcc	r0, #8
 8034e5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8034e60:	bf3c      	itt	cc
 8034e62:	011b      	lslcc	r3, r3, #4
 8034e64:	3004      	addcc	r0, #4
 8034e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8034e6a:	bf3c      	itt	cc
 8034e6c:	009b      	lslcc	r3, r3, #2
 8034e6e:	3002      	addcc	r0, #2
 8034e70:	2b00      	cmp	r3, #0
 8034e72:	db05      	blt.n	8034e80 <__hi0bits+0x3c>
 8034e74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8034e78:	f100 0001 	add.w	r0, r0, #1
 8034e7c:	bf08      	it	eq
 8034e7e:	2020      	moveq	r0, #32
 8034e80:	4770      	bx	lr

08034e82 <__lo0bits>:
 8034e82:	6803      	ldr	r3, [r0, #0]
 8034e84:	4602      	mov	r2, r0
 8034e86:	f013 0007 	ands.w	r0, r3, #7
 8034e8a:	d00b      	beq.n	8034ea4 <__lo0bits+0x22>
 8034e8c:	07d9      	lsls	r1, r3, #31
 8034e8e:	d421      	bmi.n	8034ed4 <__lo0bits+0x52>
 8034e90:	0798      	lsls	r0, r3, #30
 8034e92:	bf49      	itett	mi
 8034e94:	085b      	lsrmi	r3, r3, #1
 8034e96:	089b      	lsrpl	r3, r3, #2
 8034e98:	2001      	movmi	r0, #1
 8034e9a:	6013      	strmi	r3, [r2, #0]
 8034e9c:	bf5c      	itt	pl
 8034e9e:	6013      	strpl	r3, [r2, #0]
 8034ea0:	2002      	movpl	r0, #2
 8034ea2:	4770      	bx	lr
 8034ea4:	b299      	uxth	r1, r3
 8034ea6:	b909      	cbnz	r1, 8034eac <__lo0bits+0x2a>
 8034ea8:	0c1b      	lsrs	r3, r3, #16
 8034eaa:	2010      	movs	r0, #16
 8034eac:	b2d9      	uxtb	r1, r3
 8034eae:	b909      	cbnz	r1, 8034eb4 <__lo0bits+0x32>
 8034eb0:	3008      	adds	r0, #8
 8034eb2:	0a1b      	lsrs	r3, r3, #8
 8034eb4:	0719      	lsls	r1, r3, #28
 8034eb6:	bf04      	itt	eq
 8034eb8:	091b      	lsreq	r3, r3, #4
 8034eba:	3004      	addeq	r0, #4
 8034ebc:	0799      	lsls	r1, r3, #30
 8034ebe:	bf04      	itt	eq
 8034ec0:	089b      	lsreq	r3, r3, #2
 8034ec2:	3002      	addeq	r0, #2
 8034ec4:	07d9      	lsls	r1, r3, #31
 8034ec6:	d403      	bmi.n	8034ed0 <__lo0bits+0x4e>
 8034ec8:	085b      	lsrs	r3, r3, #1
 8034eca:	f100 0001 	add.w	r0, r0, #1
 8034ece:	d003      	beq.n	8034ed8 <__lo0bits+0x56>
 8034ed0:	6013      	str	r3, [r2, #0]
 8034ed2:	4770      	bx	lr
 8034ed4:	2000      	movs	r0, #0
 8034ed6:	4770      	bx	lr
 8034ed8:	2020      	movs	r0, #32
 8034eda:	4770      	bx	lr

08034edc <__i2b>:
 8034edc:	b510      	push	{r4, lr}
 8034ede:	460c      	mov	r4, r1
 8034ee0:	2101      	movs	r1, #1
 8034ee2:	f7ff febd 	bl	8034c60 <_Balloc>
 8034ee6:	4602      	mov	r2, r0
 8034ee8:	b928      	cbnz	r0, 8034ef6 <__i2b+0x1a>
 8034eea:	4b05      	ldr	r3, [pc, #20]	@ (8034f00 <__i2b+0x24>)
 8034eec:	4805      	ldr	r0, [pc, #20]	@ (8034f04 <__i2b+0x28>)
 8034eee:	f240 1145 	movw	r1, #325	@ 0x145
 8034ef2:	f001 fba9 	bl	8036648 <__assert_func>
 8034ef6:	2301      	movs	r3, #1
 8034ef8:	6144      	str	r4, [r0, #20]
 8034efa:	6103      	str	r3, [r0, #16]
 8034efc:	bd10      	pop	{r4, pc}
 8034efe:	bf00      	nop
 8034f00:	0807274d 	.word	0x0807274d
 8034f04:	0807275e 	.word	0x0807275e

08034f08 <__multiply>:
 8034f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034f0c:	4617      	mov	r7, r2
 8034f0e:	690a      	ldr	r2, [r1, #16]
 8034f10:	693b      	ldr	r3, [r7, #16]
 8034f12:	429a      	cmp	r2, r3
 8034f14:	bfa8      	it	ge
 8034f16:	463b      	movge	r3, r7
 8034f18:	4689      	mov	r9, r1
 8034f1a:	bfa4      	itt	ge
 8034f1c:	460f      	movge	r7, r1
 8034f1e:	4699      	movge	r9, r3
 8034f20:	693d      	ldr	r5, [r7, #16]
 8034f22:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8034f26:	68bb      	ldr	r3, [r7, #8]
 8034f28:	6879      	ldr	r1, [r7, #4]
 8034f2a:	eb05 060a 	add.w	r6, r5, sl
 8034f2e:	42b3      	cmp	r3, r6
 8034f30:	b085      	sub	sp, #20
 8034f32:	bfb8      	it	lt
 8034f34:	3101      	addlt	r1, #1
 8034f36:	f7ff fe93 	bl	8034c60 <_Balloc>
 8034f3a:	b930      	cbnz	r0, 8034f4a <__multiply+0x42>
 8034f3c:	4602      	mov	r2, r0
 8034f3e:	4b41      	ldr	r3, [pc, #260]	@ (8035044 <__multiply+0x13c>)
 8034f40:	4841      	ldr	r0, [pc, #260]	@ (8035048 <__multiply+0x140>)
 8034f42:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8034f46:	f001 fb7f 	bl	8036648 <__assert_func>
 8034f4a:	f100 0414 	add.w	r4, r0, #20
 8034f4e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8034f52:	4623      	mov	r3, r4
 8034f54:	2200      	movs	r2, #0
 8034f56:	4573      	cmp	r3, lr
 8034f58:	d320      	bcc.n	8034f9c <__multiply+0x94>
 8034f5a:	f107 0814 	add.w	r8, r7, #20
 8034f5e:	f109 0114 	add.w	r1, r9, #20
 8034f62:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8034f66:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8034f6a:	9302      	str	r3, [sp, #8]
 8034f6c:	1beb      	subs	r3, r5, r7
 8034f6e:	3b15      	subs	r3, #21
 8034f70:	f023 0303 	bic.w	r3, r3, #3
 8034f74:	3304      	adds	r3, #4
 8034f76:	3715      	adds	r7, #21
 8034f78:	42bd      	cmp	r5, r7
 8034f7a:	bf38      	it	cc
 8034f7c:	2304      	movcc	r3, #4
 8034f7e:	9301      	str	r3, [sp, #4]
 8034f80:	9b02      	ldr	r3, [sp, #8]
 8034f82:	9103      	str	r1, [sp, #12]
 8034f84:	428b      	cmp	r3, r1
 8034f86:	d80c      	bhi.n	8034fa2 <__multiply+0x9a>
 8034f88:	2e00      	cmp	r6, #0
 8034f8a:	dd03      	ble.n	8034f94 <__multiply+0x8c>
 8034f8c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8034f90:	2b00      	cmp	r3, #0
 8034f92:	d055      	beq.n	8035040 <__multiply+0x138>
 8034f94:	6106      	str	r6, [r0, #16]
 8034f96:	b005      	add	sp, #20
 8034f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034f9c:	f843 2b04 	str.w	r2, [r3], #4
 8034fa0:	e7d9      	b.n	8034f56 <__multiply+0x4e>
 8034fa2:	f8b1 a000 	ldrh.w	sl, [r1]
 8034fa6:	f1ba 0f00 	cmp.w	sl, #0
 8034faa:	d01f      	beq.n	8034fec <__multiply+0xe4>
 8034fac:	46c4      	mov	ip, r8
 8034fae:	46a1      	mov	r9, r4
 8034fb0:	2700      	movs	r7, #0
 8034fb2:	f85c 2b04 	ldr.w	r2, [ip], #4
 8034fb6:	f8d9 3000 	ldr.w	r3, [r9]
 8034fba:	fa1f fb82 	uxth.w	fp, r2
 8034fbe:	b29b      	uxth	r3, r3
 8034fc0:	fb0a 330b 	mla	r3, sl, fp, r3
 8034fc4:	443b      	add	r3, r7
 8034fc6:	f8d9 7000 	ldr.w	r7, [r9]
 8034fca:	0c12      	lsrs	r2, r2, #16
 8034fcc:	0c3f      	lsrs	r7, r7, #16
 8034fce:	fb0a 7202 	mla	r2, sl, r2, r7
 8034fd2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8034fd6:	b29b      	uxth	r3, r3
 8034fd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8034fdc:	4565      	cmp	r5, ip
 8034fde:	f849 3b04 	str.w	r3, [r9], #4
 8034fe2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8034fe6:	d8e4      	bhi.n	8034fb2 <__multiply+0xaa>
 8034fe8:	9b01      	ldr	r3, [sp, #4]
 8034fea:	50e7      	str	r7, [r4, r3]
 8034fec:	9b03      	ldr	r3, [sp, #12]
 8034fee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8034ff2:	3104      	adds	r1, #4
 8034ff4:	f1b9 0f00 	cmp.w	r9, #0
 8034ff8:	d020      	beq.n	803503c <__multiply+0x134>
 8034ffa:	6823      	ldr	r3, [r4, #0]
 8034ffc:	4647      	mov	r7, r8
 8034ffe:	46a4      	mov	ip, r4
 8035000:	f04f 0a00 	mov.w	sl, #0
 8035004:	f8b7 b000 	ldrh.w	fp, [r7]
 8035008:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 803500c:	fb09 220b 	mla	r2, r9, fp, r2
 8035010:	4452      	add	r2, sl
 8035012:	b29b      	uxth	r3, r3
 8035014:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8035018:	f84c 3b04 	str.w	r3, [ip], #4
 803501c:	f857 3b04 	ldr.w	r3, [r7], #4
 8035020:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8035024:	f8bc 3000 	ldrh.w	r3, [ip]
 8035028:	fb09 330a 	mla	r3, r9, sl, r3
 803502c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8035030:	42bd      	cmp	r5, r7
 8035032:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8035036:	d8e5      	bhi.n	8035004 <__multiply+0xfc>
 8035038:	9a01      	ldr	r2, [sp, #4]
 803503a:	50a3      	str	r3, [r4, r2]
 803503c:	3404      	adds	r4, #4
 803503e:	e79f      	b.n	8034f80 <__multiply+0x78>
 8035040:	3e01      	subs	r6, #1
 8035042:	e7a1      	b.n	8034f88 <__multiply+0x80>
 8035044:	0807274d 	.word	0x0807274d
 8035048:	0807275e 	.word	0x0807275e

0803504c <__pow5mult>:
 803504c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8035050:	4615      	mov	r5, r2
 8035052:	f012 0203 	ands.w	r2, r2, #3
 8035056:	4607      	mov	r7, r0
 8035058:	460e      	mov	r6, r1
 803505a:	d007      	beq.n	803506c <__pow5mult+0x20>
 803505c:	4c25      	ldr	r4, [pc, #148]	@ (80350f4 <__pow5mult+0xa8>)
 803505e:	3a01      	subs	r2, #1
 8035060:	2300      	movs	r3, #0
 8035062:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8035066:	f7ff fe5d 	bl	8034d24 <__multadd>
 803506a:	4606      	mov	r6, r0
 803506c:	10ad      	asrs	r5, r5, #2
 803506e:	d03d      	beq.n	80350ec <__pow5mult+0xa0>
 8035070:	69fc      	ldr	r4, [r7, #28]
 8035072:	b97c      	cbnz	r4, 8035094 <__pow5mult+0x48>
 8035074:	2010      	movs	r0, #16
 8035076:	f7e7 fba9 	bl	801c7cc <__wrap_malloc>
 803507a:	4602      	mov	r2, r0
 803507c:	61f8      	str	r0, [r7, #28]
 803507e:	b928      	cbnz	r0, 803508c <__pow5mult+0x40>
 8035080:	4b1d      	ldr	r3, [pc, #116]	@ (80350f8 <__pow5mult+0xac>)
 8035082:	481e      	ldr	r0, [pc, #120]	@ (80350fc <__pow5mult+0xb0>)
 8035084:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8035088:	f001 fade 	bl	8036648 <__assert_func>
 803508c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8035090:	6004      	str	r4, [r0, #0]
 8035092:	60c4      	str	r4, [r0, #12]
 8035094:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8035098:	f8d8 4008 	ldr.w	r4, [r8, #8]
 803509c:	b94c      	cbnz	r4, 80350b2 <__pow5mult+0x66>
 803509e:	f240 2171 	movw	r1, #625	@ 0x271
 80350a2:	4638      	mov	r0, r7
 80350a4:	f7ff ff1a 	bl	8034edc <__i2b>
 80350a8:	2300      	movs	r3, #0
 80350aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80350ae:	4604      	mov	r4, r0
 80350b0:	6003      	str	r3, [r0, #0]
 80350b2:	f04f 0900 	mov.w	r9, #0
 80350b6:	07eb      	lsls	r3, r5, #31
 80350b8:	d50a      	bpl.n	80350d0 <__pow5mult+0x84>
 80350ba:	4631      	mov	r1, r6
 80350bc:	4622      	mov	r2, r4
 80350be:	4638      	mov	r0, r7
 80350c0:	f7ff ff22 	bl	8034f08 <__multiply>
 80350c4:	4631      	mov	r1, r6
 80350c6:	4680      	mov	r8, r0
 80350c8:	4638      	mov	r0, r7
 80350ca:	f7ff fe09 	bl	8034ce0 <_Bfree>
 80350ce:	4646      	mov	r6, r8
 80350d0:	106d      	asrs	r5, r5, #1
 80350d2:	d00b      	beq.n	80350ec <__pow5mult+0xa0>
 80350d4:	6820      	ldr	r0, [r4, #0]
 80350d6:	b938      	cbnz	r0, 80350e8 <__pow5mult+0x9c>
 80350d8:	4622      	mov	r2, r4
 80350da:	4621      	mov	r1, r4
 80350dc:	4638      	mov	r0, r7
 80350de:	f7ff ff13 	bl	8034f08 <__multiply>
 80350e2:	6020      	str	r0, [r4, #0]
 80350e4:	f8c0 9000 	str.w	r9, [r0]
 80350e8:	4604      	mov	r4, r0
 80350ea:	e7e4      	b.n	80350b6 <__pow5mult+0x6a>
 80350ec:	4630      	mov	r0, r6
 80350ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80350f2:	bf00      	nop
 80350f4:	08072870 	.word	0x08072870
 80350f8:	080726de 	.word	0x080726de
 80350fc:	0807275e 	.word	0x0807275e

08035100 <__lshift>:
 8035100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8035104:	460c      	mov	r4, r1
 8035106:	6849      	ldr	r1, [r1, #4]
 8035108:	6923      	ldr	r3, [r4, #16]
 803510a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 803510e:	68a3      	ldr	r3, [r4, #8]
 8035110:	4607      	mov	r7, r0
 8035112:	4691      	mov	r9, r2
 8035114:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8035118:	f108 0601 	add.w	r6, r8, #1
 803511c:	42b3      	cmp	r3, r6
 803511e:	db0b      	blt.n	8035138 <__lshift+0x38>
 8035120:	4638      	mov	r0, r7
 8035122:	f7ff fd9d 	bl	8034c60 <_Balloc>
 8035126:	4605      	mov	r5, r0
 8035128:	b948      	cbnz	r0, 803513e <__lshift+0x3e>
 803512a:	4602      	mov	r2, r0
 803512c:	4b28      	ldr	r3, [pc, #160]	@ (80351d0 <__lshift+0xd0>)
 803512e:	4829      	ldr	r0, [pc, #164]	@ (80351d4 <__lshift+0xd4>)
 8035130:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8035134:	f001 fa88 	bl	8036648 <__assert_func>
 8035138:	3101      	adds	r1, #1
 803513a:	005b      	lsls	r3, r3, #1
 803513c:	e7ee      	b.n	803511c <__lshift+0x1c>
 803513e:	2300      	movs	r3, #0
 8035140:	f100 0114 	add.w	r1, r0, #20
 8035144:	f100 0210 	add.w	r2, r0, #16
 8035148:	4618      	mov	r0, r3
 803514a:	4553      	cmp	r3, sl
 803514c:	db33      	blt.n	80351b6 <__lshift+0xb6>
 803514e:	6920      	ldr	r0, [r4, #16]
 8035150:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8035154:	f104 0314 	add.w	r3, r4, #20
 8035158:	f019 091f 	ands.w	r9, r9, #31
 803515c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8035160:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8035164:	d02b      	beq.n	80351be <__lshift+0xbe>
 8035166:	f1c9 0e20 	rsb	lr, r9, #32
 803516a:	468a      	mov	sl, r1
 803516c:	2200      	movs	r2, #0
 803516e:	6818      	ldr	r0, [r3, #0]
 8035170:	fa00 f009 	lsl.w	r0, r0, r9
 8035174:	4310      	orrs	r0, r2
 8035176:	f84a 0b04 	str.w	r0, [sl], #4
 803517a:	f853 2b04 	ldr.w	r2, [r3], #4
 803517e:	459c      	cmp	ip, r3
 8035180:	fa22 f20e 	lsr.w	r2, r2, lr
 8035184:	d8f3      	bhi.n	803516e <__lshift+0x6e>
 8035186:	ebac 0304 	sub.w	r3, ip, r4
 803518a:	3b15      	subs	r3, #21
 803518c:	f023 0303 	bic.w	r3, r3, #3
 8035190:	3304      	adds	r3, #4
 8035192:	f104 0015 	add.w	r0, r4, #21
 8035196:	4560      	cmp	r0, ip
 8035198:	bf88      	it	hi
 803519a:	2304      	movhi	r3, #4
 803519c:	50ca      	str	r2, [r1, r3]
 803519e:	b10a      	cbz	r2, 80351a4 <__lshift+0xa4>
 80351a0:	f108 0602 	add.w	r6, r8, #2
 80351a4:	3e01      	subs	r6, #1
 80351a6:	4638      	mov	r0, r7
 80351a8:	612e      	str	r6, [r5, #16]
 80351aa:	4621      	mov	r1, r4
 80351ac:	f7ff fd98 	bl	8034ce0 <_Bfree>
 80351b0:	4628      	mov	r0, r5
 80351b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80351b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80351ba:	3301      	adds	r3, #1
 80351bc:	e7c5      	b.n	803514a <__lshift+0x4a>
 80351be:	3904      	subs	r1, #4
 80351c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80351c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80351c8:	459c      	cmp	ip, r3
 80351ca:	d8f9      	bhi.n	80351c0 <__lshift+0xc0>
 80351cc:	e7ea      	b.n	80351a4 <__lshift+0xa4>
 80351ce:	bf00      	nop
 80351d0:	0807274d 	.word	0x0807274d
 80351d4:	0807275e 	.word	0x0807275e

080351d8 <__mcmp>:
 80351d8:	690a      	ldr	r2, [r1, #16]
 80351da:	4603      	mov	r3, r0
 80351dc:	6900      	ldr	r0, [r0, #16]
 80351de:	1a80      	subs	r0, r0, r2
 80351e0:	b530      	push	{r4, r5, lr}
 80351e2:	d10e      	bne.n	8035202 <__mcmp+0x2a>
 80351e4:	3314      	adds	r3, #20
 80351e6:	3114      	adds	r1, #20
 80351e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80351ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80351f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80351f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80351f8:	4295      	cmp	r5, r2
 80351fa:	d003      	beq.n	8035204 <__mcmp+0x2c>
 80351fc:	d205      	bcs.n	803520a <__mcmp+0x32>
 80351fe:	f04f 30ff 	mov.w	r0, #4294967295
 8035202:	bd30      	pop	{r4, r5, pc}
 8035204:	42a3      	cmp	r3, r4
 8035206:	d3f3      	bcc.n	80351f0 <__mcmp+0x18>
 8035208:	e7fb      	b.n	8035202 <__mcmp+0x2a>
 803520a:	2001      	movs	r0, #1
 803520c:	e7f9      	b.n	8035202 <__mcmp+0x2a>
	...

08035210 <__mdiff>:
 8035210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035214:	4689      	mov	r9, r1
 8035216:	4606      	mov	r6, r0
 8035218:	4611      	mov	r1, r2
 803521a:	4648      	mov	r0, r9
 803521c:	4614      	mov	r4, r2
 803521e:	f7ff ffdb 	bl	80351d8 <__mcmp>
 8035222:	1e05      	subs	r5, r0, #0
 8035224:	d112      	bne.n	803524c <__mdiff+0x3c>
 8035226:	4629      	mov	r1, r5
 8035228:	4630      	mov	r0, r6
 803522a:	f7ff fd19 	bl	8034c60 <_Balloc>
 803522e:	4602      	mov	r2, r0
 8035230:	b928      	cbnz	r0, 803523e <__mdiff+0x2e>
 8035232:	4b3f      	ldr	r3, [pc, #252]	@ (8035330 <__mdiff+0x120>)
 8035234:	f240 2137 	movw	r1, #567	@ 0x237
 8035238:	483e      	ldr	r0, [pc, #248]	@ (8035334 <__mdiff+0x124>)
 803523a:	f001 fa05 	bl	8036648 <__assert_func>
 803523e:	2301      	movs	r3, #1
 8035240:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8035244:	4610      	mov	r0, r2
 8035246:	b003      	add	sp, #12
 8035248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803524c:	bfbc      	itt	lt
 803524e:	464b      	movlt	r3, r9
 8035250:	46a1      	movlt	r9, r4
 8035252:	4630      	mov	r0, r6
 8035254:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8035258:	bfba      	itte	lt
 803525a:	461c      	movlt	r4, r3
 803525c:	2501      	movlt	r5, #1
 803525e:	2500      	movge	r5, #0
 8035260:	f7ff fcfe 	bl	8034c60 <_Balloc>
 8035264:	4602      	mov	r2, r0
 8035266:	b918      	cbnz	r0, 8035270 <__mdiff+0x60>
 8035268:	4b31      	ldr	r3, [pc, #196]	@ (8035330 <__mdiff+0x120>)
 803526a:	f240 2145 	movw	r1, #581	@ 0x245
 803526e:	e7e3      	b.n	8035238 <__mdiff+0x28>
 8035270:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8035274:	6926      	ldr	r6, [r4, #16]
 8035276:	60c5      	str	r5, [r0, #12]
 8035278:	f109 0310 	add.w	r3, r9, #16
 803527c:	f109 0514 	add.w	r5, r9, #20
 8035280:	f104 0e14 	add.w	lr, r4, #20
 8035284:	f100 0b14 	add.w	fp, r0, #20
 8035288:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 803528c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8035290:	9301      	str	r3, [sp, #4]
 8035292:	46d9      	mov	r9, fp
 8035294:	f04f 0c00 	mov.w	ip, #0
 8035298:	9b01      	ldr	r3, [sp, #4]
 803529a:	f85e 0b04 	ldr.w	r0, [lr], #4
 803529e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80352a2:	9301      	str	r3, [sp, #4]
 80352a4:	fa1f f38a 	uxth.w	r3, sl
 80352a8:	4619      	mov	r1, r3
 80352aa:	b283      	uxth	r3, r0
 80352ac:	1acb      	subs	r3, r1, r3
 80352ae:	0c00      	lsrs	r0, r0, #16
 80352b0:	4463      	add	r3, ip
 80352b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80352b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80352ba:	b29b      	uxth	r3, r3
 80352bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80352c0:	4576      	cmp	r6, lr
 80352c2:	f849 3b04 	str.w	r3, [r9], #4
 80352c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80352ca:	d8e5      	bhi.n	8035298 <__mdiff+0x88>
 80352cc:	1b33      	subs	r3, r6, r4
 80352ce:	3b15      	subs	r3, #21
 80352d0:	f023 0303 	bic.w	r3, r3, #3
 80352d4:	3415      	adds	r4, #21
 80352d6:	3304      	adds	r3, #4
 80352d8:	42a6      	cmp	r6, r4
 80352da:	bf38      	it	cc
 80352dc:	2304      	movcc	r3, #4
 80352de:	441d      	add	r5, r3
 80352e0:	445b      	add	r3, fp
 80352e2:	461e      	mov	r6, r3
 80352e4:	462c      	mov	r4, r5
 80352e6:	4544      	cmp	r4, r8
 80352e8:	d30e      	bcc.n	8035308 <__mdiff+0xf8>
 80352ea:	f108 0103 	add.w	r1, r8, #3
 80352ee:	1b49      	subs	r1, r1, r5
 80352f0:	f021 0103 	bic.w	r1, r1, #3
 80352f4:	3d03      	subs	r5, #3
 80352f6:	45a8      	cmp	r8, r5
 80352f8:	bf38      	it	cc
 80352fa:	2100      	movcc	r1, #0
 80352fc:	440b      	add	r3, r1
 80352fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8035302:	b191      	cbz	r1, 803532a <__mdiff+0x11a>
 8035304:	6117      	str	r7, [r2, #16]
 8035306:	e79d      	b.n	8035244 <__mdiff+0x34>
 8035308:	f854 1b04 	ldr.w	r1, [r4], #4
 803530c:	46e6      	mov	lr, ip
 803530e:	0c08      	lsrs	r0, r1, #16
 8035310:	fa1c fc81 	uxtah	ip, ip, r1
 8035314:	4471      	add	r1, lr
 8035316:	eb00 402c 	add.w	r0, r0, ip, asr #16
 803531a:	b289      	uxth	r1, r1
 803531c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8035320:	f846 1b04 	str.w	r1, [r6], #4
 8035324:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8035328:	e7dd      	b.n	80352e6 <__mdiff+0xd6>
 803532a:	3f01      	subs	r7, #1
 803532c:	e7e7      	b.n	80352fe <__mdiff+0xee>
 803532e:	bf00      	nop
 8035330:	0807274d 	.word	0x0807274d
 8035334:	0807275e 	.word	0x0807275e

08035338 <__ulp>:
 8035338:	b082      	sub	sp, #8
 803533a:	ed8d 0b00 	vstr	d0, [sp]
 803533e:	9a01      	ldr	r2, [sp, #4]
 8035340:	4b0f      	ldr	r3, [pc, #60]	@ (8035380 <__ulp+0x48>)
 8035342:	4013      	ands	r3, r2
 8035344:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8035348:	2b00      	cmp	r3, #0
 803534a:	dc08      	bgt.n	803535e <__ulp+0x26>
 803534c:	425b      	negs	r3, r3
 803534e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8035352:	ea4f 5223 	mov.w	r2, r3, asr #20
 8035356:	da04      	bge.n	8035362 <__ulp+0x2a>
 8035358:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 803535c:	4113      	asrs	r3, r2
 803535e:	2200      	movs	r2, #0
 8035360:	e008      	b.n	8035374 <__ulp+0x3c>
 8035362:	f1a2 0314 	sub.w	r3, r2, #20
 8035366:	2b1e      	cmp	r3, #30
 8035368:	bfda      	itte	le
 803536a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 803536e:	40da      	lsrle	r2, r3
 8035370:	2201      	movgt	r2, #1
 8035372:	2300      	movs	r3, #0
 8035374:	4619      	mov	r1, r3
 8035376:	4610      	mov	r0, r2
 8035378:	ec41 0b10 	vmov	d0, r0, r1
 803537c:	b002      	add	sp, #8
 803537e:	4770      	bx	lr
 8035380:	7ff00000 	.word	0x7ff00000

08035384 <__b2d>:
 8035384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8035388:	6906      	ldr	r6, [r0, #16]
 803538a:	f100 0814 	add.w	r8, r0, #20
 803538e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8035392:	1f37      	subs	r7, r6, #4
 8035394:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8035398:	4610      	mov	r0, r2
 803539a:	f7ff fd53 	bl	8034e44 <__hi0bits>
 803539e:	f1c0 0320 	rsb	r3, r0, #32
 80353a2:	280a      	cmp	r0, #10
 80353a4:	600b      	str	r3, [r1, #0]
 80353a6:	491b      	ldr	r1, [pc, #108]	@ (8035414 <__b2d+0x90>)
 80353a8:	dc15      	bgt.n	80353d6 <__b2d+0x52>
 80353aa:	f1c0 0c0b 	rsb	ip, r0, #11
 80353ae:	fa22 f30c 	lsr.w	r3, r2, ip
 80353b2:	45b8      	cmp	r8, r7
 80353b4:	ea43 0501 	orr.w	r5, r3, r1
 80353b8:	bf34      	ite	cc
 80353ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80353be:	2300      	movcs	r3, #0
 80353c0:	3015      	adds	r0, #21
 80353c2:	fa02 f000 	lsl.w	r0, r2, r0
 80353c6:	fa23 f30c 	lsr.w	r3, r3, ip
 80353ca:	4303      	orrs	r3, r0
 80353cc:	461c      	mov	r4, r3
 80353ce:	ec45 4b10 	vmov	d0, r4, r5
 80353d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80353d6:	45b8      	cmp	r8, r7
 80353d8:	bf3a      	itte	cc
 80353da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80353de:	f1a6 0708 	subcc.w	r7, r6, #8
 80353e2:	2300      	movcs	r3, #0
 80353e4:	380b      	subs	r0, #11
 80353e6:	d012      	beq.n	803540e <__b2d+0x8a>
 80353e8:	f1c0 0120 	rsb	r1, r0, #32
 80353ec:	fa23 f401 	lsr.w	r4, r3, r1
 80353f0:	4082      	lsls	r2, r0
 80353f2:	4322      	orrs	r2, r4
 80353f4:	4547      	cmp	r7, r8
 80353f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80353fa:	bf8c      	ite	hi
 80353fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8035400:	2200      	movls	r2, #0
 8035402:	4083      	lsls	r3, r0
 8035404:	40ca      	lsrs	r2, r1
 8035406:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 803540a:	4313      	orrs	r3, r2
 803540c:	e7de      	b.n	80353cc <__b2d+0x48>
 803540e:	ea42 0501 	orr.w	r5, r2, r1
 8035412:	e7db      	b.n	80353cc <__b2d+0x48>
 8035414:	3ff00000 	.word	0x3ff00000

08035418 <__d2b>:
 8035418:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 803541c:	460f      	mov	r7, r1
 803541e:	2101      	movs	r1, #1
 8035420:	ec59 8b10 	vmov	r8, r9, d0
 8035424:	4616      	mov	r6, r2
 8035426:	f7ff fc1b 	bl	8034c60 <_Balloc>
 803542a:	4604      	mov	r4, r0
 803542c:	b930      	cbnz	r0, 803543c <__d2b+0x24>
 803542e:	4602      	mov	r2, r0
 8035430:	4b23      	ldr	r3, [pc, #140]	@ (80354c0 <__d2b+0xa8>)
 8035432:	4824      	ldr	r0, [pc, #144]	@ (80354c4 <__d2b+0xac>)
 8035434:	f240 310f 	movw	r1, #783	@ 0x30f
 8035438:	f001 f906 	bl	8036648 <__assert_func>
 803543c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8035440:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8035444:	b10d      	cbz	r5, 803544a <__d2b+0x32>
 8035446:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 803544a:	9301      	str	r3, [sp, #4]
 803544c:	f1b8 0300 	subs.w	r3, r8, #0
 8035450:	d023      	beq.n	803549a <__d2b+0x82>
 8035452:	4668      	mov	r0, sp
 8035454:	9300      	str	r3, [sp, #0]
 8035456:	f7ff fd14 	bl	8034e82 <__lo0bits>
 803545a:	e9dd 1200 	ldrd	r1, r2, [sp]
 803545e:	b1d0      	cbz	r0, 8035496 <__d2b+0x7e>
 8035460:	f1c0 0320 	rsb	r3, r0, #32
 8035464:	fa02 f303 	lsl.w	r3, r2, r3
 8035468:	430b      	orrs	r3, r1
 803546a:	40c2      	lsrs	r2, r0
 803546c:	6163      	str	r3, [r4, #20]
 803546e:	9201      	str	r2, [sp, #4]
 8035470:	9b01      	ldr	r3, [sp, #4]
 8035472:	61a3      	str	r3, [r4, #24]
 8035474:	2b00      	cmp	r3, #0
 8035476:	bf0c      	ite	eq
 8035478:	2201      	moveq	r2, #1
 803547a:	2202      	movne	r2, #2
 803547c:	6122      	str	r2, [r4, #16]
 803547e:	b1a5      	cbz	r5, 80354aa <__d2b+0x92>
 8035480:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8035484:	4405      	add	r5, r0
 8035486:	603d      	str	r5, [r7, #0]
 8035488:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 803548c:	6030      	str	r0, [r6, #0]
 803548e:	4620      	mov	r0, r4
 8035490:	b003      	add	sp, #12
 8035492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8035496:	6161      	str	r1, [r4, #20]
 8035498:	e7ea      	b.n	8035470 <__d2b+0x58>
 803549a:	a801      	add	r0, sp, #4
 803549c:	f7ff fcf1 	bl	8034e82 <__lo0bits>
 80354a0:	9b01      	ldr	r3, [sp, #4]
 80354a2:	6163      	str	r3, [r4, #20]
 80354a4:	3020      	adds	r0, #32
 80354a6:	2201      	movs	r2, #1
 80354a8:	e7e8      	b.n	803547c <__d2b+0x64>
 80354aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80354ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80354b2:	6038      	str	r0, [r7, #0]
 80354b4:	6918      	ldr	r0, [r3, #16]
 80354b6:	f7ff fcc5 	bl	8034e44 <__hi0bits>
 80354ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80354be:	e7e5      	b.n	803548c <__d2b+0x74>
 80354c0:	0807274d 	.word	0x0807274d
 80354c4:	0807275e 	.word	0x0807275e

080354c8 <__ratio>:
 80354c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80354cc:	4688      	mov	r8, r1
 80354ce:	4669      	mov	r1, sp
 80354d0:	4681      	mov	r9, r0
 80354d2:	f7ff ff57 	bl	8035384 <__b2d>
 80354d6:	a901      	add	r1, sp, #4
 80354d8:	4640      	mov	r0, r8
 80354da:	ec55 4b10 	vmov	r4, r5, d0
 80354de:	f7ff ff51 	bl	8035384 <__b2d>
 80354e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80354e6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80354ea:	1ad2      	subs	r2, r2, r3
 80354ec:	e9dd 3100 	ldrd	r3, r1, [sp]
 80354f0:	1a5b      	subs	r3, r3, r1
 80354f2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80354f6:	ec57 6b10 	vmov	r6, r7, d0
 80354fa:	2b00      	cmp	r3, #0
 80354fc:	bfd6      	itet	le
 80354fe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8035502:	462a      	movgt	r2, r5
 8035504:	463a      	movle	r2, r7
 8035506:	46ab      	mov	fp, r5
 8035508:	46a2      	mov	sl, r4
 803550a:	bfce      	itee	gt
 803550c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8035510:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8035514:	ee00 3a90 	vmovle	s1, r3
 8035518:	ec4b ab17 	vmov	d7, sl, fp
 803551c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8035520:	b003      	add	sp, #12
 8035522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08035526 <__copybits>:
 8035526:	3901      	subs	r1, #1
 8035528:	b570      	push	{r4, r5, r6, lr}
 803552a:	1149      	asrs	r1, r1, #5
 803552c:	6914      	ldr	r4, [r2, #16]
 803552e:	3101      	adds	r1, #1
 8035530:	f102 0314 	add.w	r3, r2, #20
 8035534:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8035538:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 803553c:	1f05      	subs	r5, r0, #4
 803553e:	42a3      	cmp	r3, r4
 8035540:	d30c      	bcc.n	803555c <__copybits+0x36>
 8035542:	1aa3      	subs	r3, r4, r2
 8035544:	3b11      	subs	r3, #17
 8035546:	f023 0303 	bic.w	r3, r3, #3
 803554a:	3211      	adds	r2, #17
 803554c:	42a2      	cmp	r2, r4
 803554e:	bf88      	it	hi
 8035550:	2300      	movhi	r3, #0
 8035552:	4418      	add	r0, r3
 8035554:	2300      	movs	r3, #0
 8035556:	4288      	cmp	r0, r1
 8035558:	d305      	bcc.n	8035566 <__copybits+0x40>
 803555a:	bd70      	pop	{r4, r5, r6, pc}
 803555c:	f853 6b04 	ldr.w	r6, [r3], #4
 8035560:	f845 6f04 	str.w	r6, [r5, #4]!
 8035564:	e7eb      	b.n	803553e <__copybits+0x18>
 8035566:	f840 3b04 	str.w	r3, [r0], #4
 803556a:	e7f4      	b.n	8035556 <__copybits+0x30>

0803556c <__any_on>:
 803556c:	f100 0214 	add.w	r2, r0, #20
 8035570:	6900      	ldr	r0, [r0, #16]
 8035572:	114b      	asrs	r3, r1, #5
 8035574:	4298      	cmp	r0, r3
 8035576:	b510      	push	{r4, lr}
 8035578:	db11      	blt.n	803559e <__any_on+0x32>
 803557a:	dd0a      	ble.n	8035592 <__any_on+0x26>
 803557c:	f011 011f 	ands.w	r1, r1, #31
 8035580:	d007      	beq.n	8035592 <__any_on+0x26>
 8035582:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8035586:	fa24 f001 	lsr.w	r0, r4, r1
 803558a:	fa00 f101 	lsl.w	r1, r0, r1
 803558e:	428c      	cmp	r4, r1
 8035590:	d10b      	bne.n	80355aa <__any_on+0x3e>
 8035592:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8035596:	4293      	cmp	r3, r2
 8035598:	d803      	bhi.n	80355a2 <__any_on+0x36>
 803559a:	2000      	movs	r0, #0
 803559c:	bd10      	pop	{r4, pc}
 803559e:	4603      	mov	r3, r0
 80355a0:	e7f7      	b.n	8035592 <__any_on+0x26>
 80355a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80355a6:	2900      	cmp	r1, #0
 80355a8:	d0f5      	beq.n	8035596 <__any_on+0x2a>
 80355aa:	2001      	movs	r0, #1
 80355ac:	e7f6      	b.n	803559c <__any_on+0x30>

080355ae <_malloc_usable_size_r>:
 80355ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80355b2:	1f18      	subs	r0, r3, #4
 80355b4:	2b00      	cmp	r3, #0
 80355b6:	bfbc      	itt	lt
 80355b8:	580b      	ldrlt	r3, [r1, r0]
 80355ba:	18c0      	addlt	r0, r0, r3
 80355bc:	4770      	bx	lr

080355be <sulp>:
 80355be:	b570      	push	{r4, r5, r6, lr}
 80355c0:	4604      	mov	r4, r0
 80355c2:	460d      	mov	r5, r1
 80355c4:	4616      	mov	r6, r2
 80355c6:	ec45 4b10 	vmov	d0, r4, r5
 80355ca:	f7ff feb5 	bl	8035338 <__ulp>
 80355ce:	b17e      	cbz	r6, 80355f0 <sulp+0x32>
 80355d0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80355d4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80355d8:	2b00      	cmp	r3, #0
 80355da:	dd09      	ble.n	80355f0 <sulp+0x32>
 80355dc:	051b      	lsls	r3, r3, #20
 80355de:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80355e2:	2000      	movs	r0, #0
 80355e4:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80355e8:	ec41 0b17 	vmov	d7, r0, r1
 80355ec:	ee20 0b07 	vmul.f64	d0, d0, d7
 80355f0:	bd70      	pop	{r4, r5, r6, pc}
 80355f2:	0000      	movs	r0, r0
 80355f4:	0000      	movs	r0, r0
	...

080355f8 <_strtod_l>:
 80355f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80355fc:	ed2d 8b0a 	vpush	{d8-d12}
 8035600:	b097      	sub	sp, #92	@ 0x5c
 8035602:	4688      	mov	r8, r1
 8035604:	920e      	str	r2, [sp, #56]	@ 0x38
 8035606:	2200      	movs	r2, #0
 8035608:	9212      	str	r2, [sp, #72]	@ 0x48
 803560a:	9005      	str	r0, [sp, #20]
 803560c:	f04f 0a00 	mov.w	sl, #0
 8035610:	f04f 0b00 	mov.w	fp, #0
 8035614:	460a      	mov	r2, r1
 8035616:	9211      	str	r2, [sp, #68]	@ 0x44
 8035618:	7811      	ldrb	r1, [r2, #0]
 803561a:	292b      	cmp	r1, #43	@ 0x2b
 803561c:	d04c      	beq.n	80356b8 <_strtod_l+0xc0>
 803561e:	d839      	bhi.n	8035694 <_strtod_l+0x9c>
 8035620:	290d      	cmp	r1, #13
 8035622:	d833      	bhi.n	803568c <_strtod_l+0x94>
 8035624:	2908      	cmp	r1, #8
 8035626:	d833      	bhi.n	8035690 <_strtod_l+0x98>
 8035628:	2900      	cmp	r1, #0
 803562a:	d03c      	beq.n	80356a6 <_strtod_l+0xae>
 803562c:	2200      	movs	r2, #0
 803562e:	9208      	str	r2, [sp, #32]
 8035630:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8035632:	782a      	ldrb	r2, [r5, #0]
 8035634:	2a30      	cmp	r2, #48	@ 0x30
 8035636:	f040 80b7 	bne.w	80357a8 <_strtod_l+0x1b0>
 803563a:	786a      	ldrb	r2, [r5, #1]
 803563c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8035640:	2a58      	cmp	r2, #88	@ 0x58
 8035642:	d170      	bne.n	8035726 <_strtod_l+0x12e>
 8035644:	9302      	str	r3, [sp, #8]
 8035646:	9b08      	ldr	r3, [sp, #32]
 8035648:	9301      	str	r3, [sp, #4]
 803564a:	ab12      	add	r3, sp, #72	@ 0x48
 803564c:	9300      	str	r3, [sp, #0]
 803564e:	4a90      	ldr	r2, [pc, #576]	@ (8035890 <_strtod_l+0x298>)
 8035650:	9805      	ldr	r0, [sp, #20]
 8035652:	ab13      	add	r3, sp, #76	@ 0x4c
 8035654:	a911      	add	r1, sp, #68	@ 0x44
 8035656:	f001 f891 	bl	803677c <__gethex>
 803565a:	f010 060f 	ands.w	r6, r0, #15
 803565e:	4604      	mov	r4, r0
 8035660:	d005      	beq.n	803566e <_strtod_l+0x76>
 8035662:	2e06      	cmp	r6, #6
 8035664:	d12a      	bne.n	80356bc <_strtod_l+0xc4>
 8035666:	3501      	adds	r5, #1
 8035668:	2300      	movs	r3, #0
 803566a:	9511      	str	r5, [sp, #68]	@ 0x44
 803566c:	9308      	str	r3, [sp, #32]
 803566e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8035670:	2b00      	cmp	r3, #0
 8035672:	f040 8537 	bne.w	80360e4 <_strtod_l+0xaec>
 8035676:	9b08      	ldr	r3, [sp, #32]
 8035678:	ec4b ab10 	vmov	d0, sl, fp
 803567c:	b1cb      	cbz	r3, 80356b2 <_strtod_l+0xba>
 803567e:	eeb1 0b40 	vneg.f64	d0, d0
 8035682:	b017      	add	sp, #92	@ 0x5c
 8035684:	ecbd 8b0a 	vpop	{d8-d12}
 8035688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803568c:	2920      	cmp	r1, #32
 803568e:	d1cd      	bne.n	803562c <_strtod_l+0x34>
 8035690:	3201      	adds	r2, #1
 8035692:	e7c0      	b.n	8035616 <_strtod_l+0x1e>
 8035694:	292d      	cmp	r1, #45	@ 0x2d
 8035696:	d1c9      	bne.n	803562c <_strtod_l+0x34>
 8035698:	2101      	movs	r1, #1
 803569a:	9108      	str	r1, [sp, #32]
 803569c:	1c51      	adds	r1, r2, #1
 803569e:	9111      	str	r1, [sp, #68]	@ 0x44
 80356a0:	7852      	ldrb	r2, [r2, #1]
 80356a2:	2a00      	cmp	r2, #0
 80356a4:	d1c4      	bne.n	8035630 <_strtod_l+0x38>
 80356a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80356a8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80356ac:	2b00      	cmp	r3, #0
 80356ae:	f040 8517 	bne.w	80360e0 <_strtod_l+0xae8>
 80356b2:	ec4b ab10 	vmov	d0, sl, fp
 80356b6:	e7e4      	b.n	8035682 <_strtod_l+0x8a>
 80356b8:	2100      	movs	r1, #0
 80356ba:	e7ee      	b.n	803569a <_strtod_l+0xa2>
 80356bc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80356be:	b13a      	cbz	r2, 80356d0 <_strtod_l+0xd8>
 80356c0:	2135      	movs	r1, #53	@ 0x35
 80356c2:	a814      	add	r0, sp, #80	@ 0x50
 80356c4:	f7ff ff2f 	bl	8035526 <__copybits>
 80356c8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80356ca:	9805      	ldr	r0, [sp, #20]
 80356cc:	f7ff fb08 	bl	8034ce0 <_Bfree>
 80356d0:	1e73      	subs	r3, r6, #1
 80356d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80356d4:	2b04      	cmp	r3, #4
 80356d6:	d806      	bhi.n	80356e6 <_strtod_l+0xee>
 80356d8:	e8df f003 	tbb	[pc, r3]
 80356dc:	201d0314 	.word	0x201d0314
 80356e0:	14          	.byte	0x14
 80356e1:	00          	.byte	0x00
 80356e2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80356e6:	05e3      	lsls	r3, r4, #23
 80356e8:	bf48      	it	mi
 80356ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80356ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80356f2:	0d1b      	lsrs	r3, r3, #20
 80356f4:	051b      	lsls	r3, r3, #20
 80356f6:	2b00      	cmp	r3, #0
 80356f8:	d1b9      	bne.n	803566e <_strtod_l+0x76>
 80356fa:	f7fe fc3f 	bl	8033f7c <__errno>
 80356fe:	2322      	movs	r3, #34	@ 0x22
 8035700:	6003      	str	r3, [r0, #0]
 8035702:	e7b4      	b.n	803566e <_strtod_l+0x76>
 8035704:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8035708:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 803570c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8035710:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8035714:	e7e7      	b.n	80356e6 <_strtod_l+0xee>
 8035716:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8035898 <_strtod_l+0x2a0>
 803571a:	e7e4      	b.n	80356e6 <_strtod_l+0xee>
 803571c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8035720:	f04f 3aff 	mov.w	sl, #4294967295
 8035724:	e7df      	b.n	80356e6 <_strtod_l+0xee>
 8035726:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8035728:	1c5a      	adds	r2, r3, #1
 803572a:	9211      	str	r2, [sp, #68]	@ 0x44
 803572c:	785b      	ldrb	r3, [r3, #1]
 803572e:	2b30      	cmp	r3, #48	@ 0x30
 8035730:	d0f9      	beq.n	8035726 <_strtod_l+0x12e>
 8035732:	2b00      	cmp	r3, #0
 8035734:	d09b      	beq.n	803566e <_strtod_l+0x76>
 8035736:	2301      	movs	r3, #1
 8035738:	9307      	str	r3, [sp, #28]
 803573a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803573c:	930a      	str	r3, [sp, #40]	@ 0x28
 803573e:	2300      	movs	r3, #0
 8035740:	9306      	str	r3, [sp, #24]
 8035742:	4699      	mov	r9, r3
 8035744:	461d      	mov	r5, r3
 8035746:	220a      	movs	r2, #10
 8035748:	9811      	ldr	r0, [sp, #68]	@ 0x44
 803574a:	7804      	ldrb	r4, [r0, #0]
 803574c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8035750:	b2d9      	uxtb	r1, r3
 8035752:	2909      	cmp	r1, #9
 8035754:	d92a      	bls.n	80357ac <_strtod_l+0x1b4>
 8035756:	494f      	ldr	r1, [pc, #316]	@ (8035894 <_strtod_l+0x29c>)
 8035758:	2201      	movs	r2, #1
 803575a:	f7fe fba2 	bl	8033ea2 <strncmp>
 803575e:	b398      	cbz	r0, 80357c8 <_strtod_l+0x1d0>
 8035760:	2000      	movs	r0, #0
 8035762:	4622      	mov	r2, r4
 8035764:	462b      	mov	r3, r5
 8035766:	4607      	mov	r7, r0
 8035768:	4601      	mov	r1, r0
 803576a:	2a65      	cmp	r2, #101	@ 0x65
 803576c:	d001      	beq.n	8035772 <_strtod_l+0x17a>
 803576e:	2a45      	cmp	r2, #69	@ 0x45
 8035770:	d118      	bne.n	80357a4 <_strtod_l+0x1ac>
 8035772:	b91b      	cbnz	r3, 803577c <_strtod_l+0x184>
 8035774:	9b07      	ldr	r3, [sp, #28]
 8035776:	4303      	orrs	r3, r0
 8035778:	d095      	beq.n	80356a6 <_strtod_l+0xae>
 803577a:	2300      	movs	r3, #0
 803577c:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8035780:	f108 0201 	add.w	r2, r8, #1
 8035784:	9211      	str	r2, [sp, #68]	@ 0x44
 8035786:	f898 2001 	ldrb.w	r2, [r8, #1]
 803578a:	2a2b      	cmp	r2, #43	@ 0x2b
 803578c:	d074      	beq.n	8035878 <_strtod_l+0x280>
 803578e:	2a2d      	cmp	r2, #45	@ 0x2d
 8035790:	d07a      	beq.n	8035888 <_strtod_l+0x290>
 8035792:	f04f 0e00 	mov.w	lr, #0
 8035796:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 803579a:	2c09      	cmp	r4, #9
 803579c:	f240 8082 	bls.w	80358a4 <_strtod_l+0x2ac>
 80357a0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80357a4:	2400      	movs	r4, #0
 80357a6:	e09d      	b.n	80358e4 <_strtod_l+0x2ec>
 80357a8:	2300      	movs	r3, #0
 80357aa:	e7c5      	b.n	8035738 <_strtod_l+0x140>
 80357ac:	2d08      	cmp	r5, #8
 80357ae:	bfc8      	it	gt
 80357b0:	9906      	ldrgt	r1, [sp, #24]
 80357b2:	f100 0001 	add.w	r0, r0, #1
 80357b6:	bfca      	itet	gt
 80357b8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80357bc:	fb02 3909 	mlale	r9, r2, r9, r3
 80357c0:	9306      	strgt	r3, [sp, #24]
 80357c2:	3501      	adds	r5, #1
 80357c4:	9011      	str	r0, [sp, #68]	@ 0x44
 80357c6:	e7bf      	b.n	8035748 <_strtod_l+0x150>
 80357c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80357ca:	1c5a      	adds	r2, r3, #1
 80357cc:	9211      	str	r2, [sp, #68]	@ 0x44
 80357ce:	785a      	ldrb	r2, [r3, #1]
 80357d0:	b3bd      	cbz	r5, 8035842 <_strtod_l+0x24a>
 80357d2:	4607      	mov	r7, r0
 80357d4:	462b      	mov	r3, r5
 80357d6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80357da:	2909      	cmp	r1, #9
 80357dc:	d912      	bls.n	8035804 <_strtod_l+0x20c>
 80357de:	2101      	movs	r1, #1
 80357e0:	e7c3      	b.n	803576a <_strtod_l+0x172>
 80357e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80357e4:	1c5a      	adds	r2, r3, #1
 80357e6:	9211      	str	r2, [sp, #68]	@ 0x44
 80357e8:	785a      	ldrb	r2, [r3, #1]
 80357ea:	3001      	adds	r0, #1
 80357ec:	2a30      	cmp	r2, #48	@ 0x30
 80357ee:	d0f8      	beq.n	80357e2 <_strtod_l+0x1ea>
 80357f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80357f4:	2b08      	cmp	r3, #8
 80357f6:	f200 847a 	bhi.w	80360ee <_strtod_l+0xaf6>
 80357fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80357fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80357fe:	4607      	mov	r7, r0
 8035800:	2000      	movs	r0, #0
 8035802:	4603      	mov	r3, r0
 8035804:	3a30      	subs	r2, #48	@ 0x30
 8035806:	f100 0101 	add.w	r1, r0, #1
 803580a:	d014      	beq.n	8035836 <_strtod_l+0x23e>
 803580c:	440f      	add	r7, r1
 803580e:	469c      	mov	ip, r3
 8035810:	f04f 0e0a 	mov.w	lr, #10
 8035814:	f10c 0401 	add.w	r4, ip, #1
 8035818:	1ae6      	subs	r6, r4, r3
 803581a:	42b1      	cmp	r1, r6
 803581c:	dc13      	bgt.n	8035846 <_strtod_l+0x24e>
 803581e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8035822:	1819      	adds	r1, r3, r0
 8035824:	2908      	cmp	r1, #8
 8035826:	f103 0301 	add.w	r3, r3, #1
 803582a:	4403      	add	r3, r0
 803582c:	dc19      	bgt.n	8035862 <_strtod_l+0x26a>
 803582e:	210a      	movs	r1, #10
 8035830:	fb01 2909 	mla	r9, r1, r9, r2
 8035834:	2100      	movs	r1, #0
 8035836:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8035838:	1c50      	adds	r0, r2, #1
 803583a:	9011      	str	r0, [sp, #68]	@ 0x44
 803583c:	7852      	ldrb	r2, [r2, #1]
 803583e:	4608      	mov	r0, r1
 8035840:	e7c9      	b.n	80357d6 <_strtod_l+0x1de>
 8035842:	4628      	mov	r0, r5
 8035844:	e7d2      	b.n	80357ec <_strtod_l+0x1f4>
 8035846:	f1bc 0f08 	cmp.w	ip, #8
 803584a:	dc03      	bgt.n	8035854 <_strtod_l+0x25c>
 803584c:	fb0e f909 	mul.w	r9, lr, r9
 8035850:	46a4      	mov	ip, r4
 8035852:	e7df      	b.n	8035814 <_strtod_l+0x21c>
 8035854:	2c10      	cmp	r4, #16
 8035856:	bfde      	ittt	le
 8035858:	9e06      	ldrle	r6, [sp, #24]
 803585a:	fb0e f606 	mulle.w	r6, lr, r6
 803585e:	9606      	strle	r6, [sp, #24]
 8035860:	e7f6      	b.n	8035850 <_strtod_l+0x258>
 8035862:	290f      	cmp	r1, #15
 8035864:	bfdf      	itttt	le
 8035866:	9806      	ldrle	r0, [sp, #24]
 8035868:	210a      	movle	r1, #10
 803586a:	fb01 2200 	mlale	r2, r1, r0, r2
 803586e:	9206      	strle	r2, [sp, #24]
 8035870:	e7e0      	b.n	8035834 <_strtod_l+0x23c>
 8035872:	2700      	movs	r7, #0
 8035874:	2101      	movs	r1, #1
 8035876:	e77d      	b.n	8035774 <_strtod_l+0x17c>
 8035878:	f04f 0e00 	mov.w	lr, #0
 803587c:	f108 0202 	add.w	r2, r8, #2
 8035880:	9211      	str	r2, [sp, #68]	@ 0x44
 8035882:	f898 2002 	ldrb.w	r2, [r8, #2]
 8035886:	e786      	b.n	8035796 <_strtod_l+0x19e>
 8035888:	f04f 0e01 	mov.w	lr, #1
 803588c:	e7f6      	b.n	803587c <_strtod_l+0x284>
 803588e:	bf00      	nop
 8035890:	08072984 	.word	0x08072984
 8035894:	080727b7 	.word	0x080727b7
 8035898:	7ff00000 	.word	0x7ff00000
 803589c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803589e:	1c54      	adds	r4, r2, #1
 80358a0:	9411      	str	r4, [sp, #68]	@ 0x44
 80358a2:	7852      	ldrb	r2, [r2, #1]
 80358a4:	2a30      	cmp	r2, #48	@ 0x30
 80358a6:	d0f9      	beq.n	803589c <_strtod_l+0x2a4>
 80358a8:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80358ac:	2c08      	cmp	r4, #8
 80358ae:	f63f af79 	bhi.w	80357a4 <_strtod_l+0x1ac>
 80358b2:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80358b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80358b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80358ba:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80358bc:	1c54      	adds	r4, r2, #1
 80358be:	9411      	str	r4, [sp, #68]	@ 0x44
 80358c0:	7852      	ldrb	r2, [r2, #1]
 80358c2:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 80358c6:	2e09      	cmp	r6, #9
 80358c8:	d937      	bls.n	803593a <_strtod_l+0x342>
 80358ca:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80358cc:	1ba4      	subs	r4, r4, r6
 80358ce:	2c08      	cmp	r4, #8
 80358d0:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 80358d4:	dc02      	bgt.n	80358dc <_strtod_l+0x2e4>
 80358d6:	4564      	cmp	r4, ip
 80358d8:	bfa8      	it	ge
 80358da:	4664      	movge	r4, ip
 80358dc:	f1be 0f00 	cmp.w	lr, #0
 80358e0:	d000      	beq.n	80358e4 <_strtod_l+0x2ec>
 80358e2:	4264      	negs	r4, r4
 80358e4:	2b00      	cmp	r3, #0
 80358e6:	d14d      	bne.n	8035984 <_strtod_l+0x38c>
 80358e8:	9b07      	ldr	r3, [sp, #28]
 80358ea:	4318      	orrs	r0, r3
 80358ec:	f47f aebf 	bne.w	803566e <_strtod_l+0x76>
 80358f0:	2900      	cmp	r1, #0
 80358f2:	f47f aed8 	bne.w	80356a6 <_strtod_l+0xae>
 80358f6:	2a69      	cmp	r2, #105	@ 0x69
 80358f8:	d027      	beq.n	803594a <_strtod_l+0x352>
 80358fa:	dc24      	bgt.n	8035946 <_strtod_l+0x34e>
 80358fc:	2a49      	cmp	r2, #73	@ 0x49
 80358fe:	d024      	beq.n	803594a <_strtod_l+0x352>
 8035900:	2a4e      	cmp	r2, #78	@ 0x4e
 8035902:	f47f aed0 	bne.w	80356a6 <_strtod_l+0xae>
 8035906:	4997      	ldr	r1, [pc, #604]	@ (8035b64 <_strtod_l+0x56c>)
 8035908:	a811      	add	r0, sp, #68	@ 0x44
 803590a:	f001 f959 	bl	8036bc0 <__match>
 803590e:	2800      	cmp	r0, #0
 8035910:	f43f aec9 	beq.w	80356a6 <_strtod_l+0xae>
 8035914:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8035916:	781b      	ldrb	r3, [r3, #0]
 8035918:	2b28      	cmp	r3, #40	@ 0x28
 803591a:	d12d      	bne.n	8035978 <_strtod_l+0x380>
 803591c:	4992      	ldr	r1, [pc, #584]	@ (8035b68 <_strtod_l+0x570>)
 803591e:	aa14      	add	r2, sp, #80	@ 0x50
 8035920:	a811      	add	r0, sp, #68	@ 0x44
 8035922:	f001 f961 	bl	8036be8 <__hexnan>
 8035926:	2805      	cmp	r0, #5
 8035928:	d126      	bne.n	8035978 <_strtod_l+0x380>
 803592a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 803592c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8035930:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8035934:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8035938:	e699      	b.n	803566e <_strtod_l+0x76>
 803593a:	240a      	movs	r4, #10
 803593c:	fb04 2c0c 	mla	ip, r4, ip, r2
 8035940:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8035944:	e7b9      	b.n	80358ba <_strtod_l+0x2c2>
 8035946:	2a6e      	cmp	r2, #110	@ 0x6e
 8035948:	e7db      	b.n	8035902 <_strtod_l+0x30a>
 803594a:	4988      	ldr	r1, [pc, #544]	@ (8035b6c <_strtod_l+0x574>)
 803594c:	a811      	add	r0, sp, #68	@ 0x44
 803594e:	f001 f937 	bl	8036bc0 <__match>
 8035952:	2800      	cmp	r0, #0
 8035954:	f43f aea7 	beq.w	80356a6 <_strtod_l+0xae>
 8035958:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803595a:	4985      	ldr	r1, [pc, #532]	@ (8035b70 <_strtod_l+0x578>)
 803595c:	3b01      	subs	r3, #1
 803595e:	a811      	add	r0, sp, #68	@ 0x44
 8035960:	9311      	str	r3, [sp, #68]	@ 0x44
 8035962:	f001 f92d 	bl	8036bc0 <__match>
 8035966:	b910      	cbnz	r0, 803596e <_strtod_l+0x376>
 8035968:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803596a:	3301      	adds	r3, #1
 803596c:	9311      	str	r3, [sp, #68]	@ 0x44
 803596e:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8035b84 <_strtod_l+0x58c>
 8035972:	f04f 0a00 	mov.w	sl, #0
 8035976:	e67a      	b.n	803566e <_strtod_l+0x76>
 8035978:	487e      	ldr	r0, [pc, #504]	@ (8035b74 <_strtod_l+0x57c>)
 803597a:	f000 fe5d 	bl	8036638 <nan>
 803597e:	ec5b ab10 	vmov	sl, fp, d0
 8035982:	e674      	b.n	803566e <_strtod_l+0x76>
 8035984:	ee07 9a90 	vmov	s15, r9
 8035988:	1be2      	subs	r2, r4, r7
 803598a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 803598e:	2d00      	cmp	r5, #0
 8035990:	bf08      	it	eq
 8035992:	461d      	moveq	r5, r3
 8035994:	2b10      	cmp	r3, #16
 8035996:	9209      	str	r2, [sp, #36]	@ 0x24
 8035998:	461a      	mov	r2, r3
 803599a:	bfa8      	it	ge
 803599c:	2210      	movge	r2, #16
 803599e:	2b09      	cmp	r3, #9
 80359a0:	ec5b ab17 	vmov	sl, fp, d7
 80359a4:	dc15      	bgt.n	80359d2 <_strtod_l+0x3da>
 80359a6:	1be1      	subs	r1, r4, r7
 80359a8:	2900      	cmp	r1, #0
 80359aa:	f43f ae60 	beq.w	803566e <_strtod_l+0x76>
 80359ae:	eba4 0107 	sub.w	r1, r4, r7
 80359b2:	dd72      	ble.n	8035a9a <_strtod_l+0x4a2>
 80359b4:	2916      	cmp	r1, #22
 80359b6:	dc59      	bgt.n	8035a6c <_strtod_l+0x474>
 80359b8:	4b6f      	ldr	r3, [pc, #444]	@ (8035b78 <_strtod_l+0x580>)
 80359ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80359bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80359c0:	ed93 7b00 	vldr	d7, [r3]
 80359c4:	ec4b ab16 	vmov	d6, sl, fp
 80359c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80359cc:	ec5b ab17 	vmov	sl, fp, d7
 80359d0:	e64d      	b.n	803566e <_strtod_l+0x76>
 80359d2:	4969      	ldr	r1, [pc, #420]	@ (8035b78 <_strtod_l+0x580>)
 80359d4:	eddd 6a06 	vldr	s13, [sp, #24]
 80359d8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80359dc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80359e0:	2b0f      	cmp	r3, #15
 80359e2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80359e6:	eea7 6b05 	vfma.f64	d6, d7, d5
 80359ea:	ec5b ab16 	vmov	sl, fp, d6
 80359ee:	ddda      	ble.n	80359a6 <_strtod_l+0x3ae>
 80359f0:	1a9a      	subs	r2, r3, r2
 80359f2:	1be1      	subs	r1, r4, r7
 80359f4:	440a      	add	r2, r1
 80359f6:	2a00      	cmp	r2, #0
 80359f8:	f340 8094 	ble.w	8035b24 <_strtod_l+0x52c>
 80359fc:	f012 000f 	ands.w	r0, r2, #15
 8035a00:	d00a      	beq.n	8035a18 <_strtod_l+0x420>
 8035a02:	495d      	ldr	r1, [pc, #372]	@ (8035b78 <_strtod_l+0x580>)
 8035a04:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8035a08:	ed91 7b00 	vldr	d7, [r1]
 8035a0c:	ec4b ab16 	vmov	d6, sl, fp
 8035a10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8035a14:	ec5b ab17 	vmov	sl, fp, d7
 8035a18:	f032 020f 	bics.w	r2, r2, #15
 8035a1c:	d073      	beq.n	8035b06 <_strtod_l+0x50e>
 8035a1e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8035a22:	dd47      	ble.n	8035ab4 <_strtod_l+0x4bc>
 8035a24:	2400      	movs	r4, #0
 8035a26:	4625      	mov	r5, r4
 8035a28:	9407      	str	r4, [sp, #28]
 8035a2a:	4626      	mov	r6, r4
 8035a2c:	9a05      	ldr	r2, [sp, #20]
 8035a2e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8035b84 <_strtod_l+0x58c>
 8035a32:	2322      	movs	r3, #34	@ 0x22
 8035a34:	6013      	str	r3, [r2, #0]
 8035a36:	f04f 0a00 	mov.w	sl, #0
 8035a3a:	9b07      	ldr	r3, [sp, #28]
 8035a3c:	2b00      	cmp	r3, #0
 8035a3e:	f43f ae16 	beq.w	803566e <_strtod_l+0x76>
 8035a42:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8035a44:	9805      	ldr	r0, [sp, #20]
 8035a46:	f7ff f94b 	bl	8034ce0 <_Bfree>
 8035a4a:	9805      	ldr	r0, [sp, #20]
 8035a4c:	4631      	mov	r1, r6
 8035a4e:	f7ff f947 	bl	8034ce0 <_Bfree>
 8035a52:	9805      	ldr	r0, [sp, #20]
 8035a54:	4629      	mov	r1, r5
 8035a56:	f7ff f943 	bl	8034ce0 <_Bfree>
 8035a5a:	9907      	ldr	r1, [sp, #28]
 8035a5c:	9805      	ldr	r0, [sp, #20]
 8035a5e:	f7ff f93f 	bl	8034ce0 <_Bfree>
 8035a62:	9805      	ldr	r0, [sp, #20]
 8035a64:	4621      	mov	r1, r4
 8035a66:	f7ff f93b 	bl	8034ce0 <_Bfree>
 8035a6a:	e600      	b.n	803566e <_strtod_l+0x76>
 8035a6c:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8035a70:	1be0      	subs	r0, r4, r7
 8035a72:	4281      	cmp	r1, r0
 8035a74:	dbbc      	blt.n	80359f0 <_strtod_l+0x3f8>
 8035a76:	4a40      	ldr	r2, [pc, #256]	@ (8035b78 <_strtod_l+0x580>)
 8035a78:	f1c3 030f 	rsb	r3, r3, #15
 8035a7c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8035a80:	ed91 7b00 	vldr	d7, [r1]
 8035a84:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8035a86:	ec4b ab16 	vmov	d6, sl, fp
 8035a8a:	1acb      	subs	r3, r1, r3
 8035a8c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8035a90:	ee27 7b06 	vmul.f64	d7, d7, d6
 8035a94:	ed92 6b00 	vldr	d6, [r2]
 8035a98:	e796      	b.n	80359c8 <_strtod_l+0x3d0>
 8035a9a:	3116      	adds	r1, #22
 8035a9c:	dba8      	blt.n	80359f0 <_strtod_l+0x3f8>
 8035a9e:	4b36      	ldr	r3, [pc, #216]	@ (8035b78 <_strtod_l+0x580>)
 8035aa0:	1b3c      	subs	r4, r7, r4
 8035aa2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8035aa6:	ed94 7b00 	vldr	d7, [r4]
 8035aaa:	ec4b ab16 	vmov	d6, sl, fp
 8035aae:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8035ab2:	e78b      	b.n	80359cc <_strtod_l+0x3d4>
 8035ab4:	2000      	movs	r0, #0
 8035ab6:	ec4b ab17 	vmov	d7, sl, fp
 8035aba:	4e30      	ldr	r6, [pc, #192]	@ (8035b7c <_strtod_l+0x584>)
 8035abc:	1112      	asrs	r2, r2, #4
 8035abe:	4601      	mov	r1, r0
 8035ac0:	2a01      	cmp	r2, #1
 8035ac2:	dc23      	bgt.n	8035b0c <_strtod_l+0x514>
 8035ac4:	b108      	cbz	r0, 8035aca <_strtod_l+0x4d2>
 8035ac6:	ec5b ab17 	vmov	sl, fp, d7
 8035aca:	4a2c      	ldr	r2, [pc, #176]	@ (8035b7c <_strtod_l+0x584>)
 8035acc:	482c      	ldr	r0, [pc, #176]	@ (8035b80 <_strtod_l+0x588>)
 8035ace:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8035ad2:	ed92 7b00 	vldr	d7, [r2]
 8035ad6:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8035ada:	ec4b ab16 	vmov	d6, sl, fp
 8035ade:	4a29      	ldr	r2, [pc, #164]	@ (8035b84 <_strtod_l+0x58c>)
 8035ae0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8035ae4:	ee17 1a90 	vmov	r1, s15
 8035ae8:	400a      	ands	r2, r1
 8035aea:	4282      	cmp	r2, r0
 8035aec:	ec5b ab17 	vmov	sl, fp, d7
 8035af0:	d898      	bhi.n	8035a24 <_strtod_l+0x42c>
 8035af2:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8035af6:	4282      	cmp	r2, r0
 8035af8:	bf86      	itte	hi
 8035afa:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8035b88 <_strtod_l+0x590>
 8035afe:	f04f 3aff 	movhi.w	sl, #4294967295
 8035b02:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8035b06:	2200      	movs	r2, #0
 8035b08:	9206      	str	r2, [sp, #24]
 8035b0a:	e076      	b.n	8035bfa <_strtod_l+0x602>
 8035b0c:	f012 0f01 	tst.w	r2, #1
 8035b10:	d004      	beq.n	8035b1c <_strtod_l+0x524>
 8035b12:	ed96 6b00 	vldr	d6, [r6]
 8035b16:	2001      	movs	r0, #1
 8035b18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8035b1c:	3101      	adds	r1, #1
 8035b1e:	1052      	asrs	r2, r2, #1
 8035b20:	3608      	adds	r6, #8
 8035b22:	e7cd      	b.n	8035ac0 <_strtod_l+0x4c8>
 8035b24:	d0ef      	beq.n	8035b06 <_strtod_l+0x50e>
 8035b26:	4252      	negs	r2, r2
 8035b28:	f012 000f 	ands.w	r0, r2, #15
 8035b2c:	d00a      	beq.n	8035b44 <_strtod_l+0x54c>
 8035b2e:	4912      	ldr	r1, [pc, #72]	@ (8035b78 <_strtod_l+0x580>)
 8035b30:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8035b34:	ed91 7b00 	vldr	d7, [r1]
 8035b38:	ec4b ab16 	vmov	d6, sl, fp
 8035b3c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8035b40:	ec5b ab17 	vmov	sl, fp, d7
 8035b44:	1112      	asrs	r2, r2, #4
 8035b46:	d0de      	beq.n	8035b06 <_strtod_l+0x50e>
 8035b48:	2a1f      	cmp	r2, #31
 8035b4a:	dd1f      	ble.n	8035b8c <_strtod_l+0x594>
 8035b4c:	2400      	movs	r4, #0
 8035b4e:	4625      	mov	r5, r4
 8035b50:	9407      	str	r4, [sp, #28]
 8035b52:	4626      	mov	r6, r4
 8035b54:	9a05      	ldr	r2, [sp, #20]
 8035b56:	2322      	movs	r3, #34	@ 0x22
 8035b58:	f04f 0a00 	mov.w	sl, #0
 8035b5c:	f04f 0b00 	mov.w	fp, #0
 8035b60:	6013      	str	r3, [r2, #0]
 8035b62:	e76a      	b.n	8035a3a <_strtod_l+0x442>
 8035b64:	080726a5 	.word	0x080726a5
 8035b68:	08072970 	.word	0x08072970
 8035b6c:	0807269d 	.word	0x0807269d
 8035b70:	080726d4 	.word	0x080726d4
 8035b74:	0807280d 	.word	0x0807280d
 8035b78:	080728a8 	.word	0x080728a8
 8035b7c:	08072880 	.word	0x08072880
 8035b80:	7ca00000 	.word	0x7ca00000
 8035b84:	7ff00000 	.word	0x7ff00000
 8035b88:	7fefffff 	.word	0x7fefffff
 8035b8c:	f012 0110 	ands.w	r1, r2, #16
 8035b90:	bf18      	it	ne
 8035b92:	216a      	movne	r1, #106	@ 0x6a
 8035b94:	9106      	str	r1, [sp, #24]
 8035b96:	ec4b ab17 	vmov	d7, sl, fp
 8035b9a:	49af      	ldr	r1, [pc, #700]	@ (8035e58 <_strtod_l+0x860>)
 8035b9c:	2000      	movs	r0, #0
 8035b9e:	07d6      	lsls	r6, r2, #31
 8035ba0:	d504      	bpl.n	8035bac <_strtod_l+0x5b4>
 8035ba2:	ed91 6b00 	vldr	d6, [r1]
 8035ba6:	2001      	movs	r0, #1
 8035ba8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8035bac:	1052      	asrs	r2, r2, #1
 8035bae:	f101 0108 	add.w	r1, r1, #8
 8035bb2:	d1f4      	bne.n	8035b9e <_strtod_l+0x5a6>
 8035bb4:	b108      	cbz	r0, 8035bba <_strtod_l+0x5c2>
 8035bb6:	ec5b ab17 	vmov	sl, fp, d7
 8035bba:	9a06      	ldr	r2, [sp, #24]
 8035bbc:	b1b2      	cbz	r2, 8035bec <_strtod_l+0x5f4>
 8035bbe:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8035bc2:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8035bc6:	2a00      	cmp	r2, #0
 8035bc8:	4658      	mov	r0, fp
 8035bca:	dd0f      	ble.n	8035bec <_strtod_l+0x5f4>
 8035bcc:	2a1f      	cmp	r2, #31
 8035bce:	dd55      	ble.n	8035c7c <_strtod_l+0x684>
 8035bd0:	2a34      	cmp	r2, #52	@ 0x34
 8035bd2:	bfde      	ittt	le
 8035bd4:	f04f 32ff 	movle.w	r2, #4294967295
 8035bd8:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8035bdc:	408a      	lslle	r2, r1
 8035bde:	f04f 0a00 	mov.w	sl, #0
 8035be2:	bfcc      	ite	gt
 8035be4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8035be8:	ea02 0b00 	andle.w	fp, r2, r0
 8035bec:	ec4b ab17 	vmov	d7, sl, fp
 8035bf0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8035bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8035bf8:	d0a8      	beq.n	8035b4c <_strtod_l+0x554>
 8035bfa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8035bfc:	9805      	ldr	r0, [sp, #20]
 8035bfe:	f8cd 9000 	str.w	r9, [sp]
 8035c02:	462a      	mov	r2, r5
 8035c04:	f7ff f8d4 	bl	8034db0 <__s2b>
 8035c08:	9007      	str	r0, [sp, #28]
 8035c0a:	2800      	cmp	r0, #0
 8035c0c:	f43f af0a 	beq.w	8035a24 <_strtod_l+0x42c>
 8035c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8035c12:	1b3f      	subs	r7, r7, r4
 8035c14:	2b00      	cmp	r3, #0
 8035c16:	bfb4      	ite	lt
 8035c18:	463b      	movlt	r3, r7
 8035c1a:	2300      	movge	r3, #0
 8035c1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8035c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8035c20:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8035e48 <_strtod_l+0x850>
 8035c24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8035c28:	2400      	movs	r4, #0
 8035c2a:	930d      	str	r3, [sp, #52]	@ 0x34
 8035c2c:	4625      	mov	r5, r4
 8035c2e:	9b07      	ldr	r3, [sp, #28]
 8035c30:	9805      	ldr	r0, [sp, #20]
 8035c32:	6859      	ldr	r1, [r3, #4]
 8035c34:	f7ff f814 	bl	8034c60 <_Balloc>
 8035c38:	4606      	mov	r6, r0
 8035c3a:	2800      	cmp	r0, #0
 8035c3c:	f43f aef6 	beq.w	8035a2c <_strtod_l+0x434>
 8035c40:	9b07      	ldr	r3, [sp, #28]
 8035c42:	691a      	ldr	r2, [r3, #16]
 8035c44:	ec4b ab19 	vmov	d9, sl, fp
 8035c48:	3202      	adds	r2, #2
 8035c4a:	f103 010c 	add.w	r1, r3, #12
 8035c4e:	0092      	lsls	r2, r2, #2
 8035c50:	300c      	adds	r0, #12
 8035c52:	f7fe f9c0 	bl	8033fd6 <memcpy>
 8035c56:	eeb0 0b49 	vmov.f64	d0, d9
 8035c5a:	9805      	ldr	r0, [sp, #20]
 8035c5c:	aa14      	add	r2, sp, #80	@ 0x50
 8035c5e:	a913      	add	r1, sp, #76	@ 0x4c
 8035c60:	f7ff fbda 	bl	8035418 <__d2b>
 8035c64:	9012      	str	r0, [sp, #72]	@ 0x48
 8035c66:	2800      	cmp	r0, #0
 8035c68:	f43f aee0 	beq.w	8035a2c <_strtod_l+0x434>
 8035c6c:	9805      	ldr	r0, [sp, #20]
 8035c6e:	2101      	movs	r1, #1
 8035c70:	f7ff f934 	bl	8034edc <__i2b>
 8035c74:	4605      	mov	r5, r0
 8035c76:	b940      	cbnz	r0, 8035c8a <_strtod_l+0x692>
 8035c78:	2500      	movs	r5, #0
 8035c7a:	e6d7      	b.n	8035a2c <_strtod_l+0x434>
 8035c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8035c80:	fa01 f202 	lsl.w	r2, r1, r2
 8035c84:	ea02 0a0a 	and.w	sl, r2, sl
 8035c88:	e7b0      	b.n	8035bec <_strtod_l+0x5f4>
 8035c8a:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8035c8c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8035c8e:	2f00      	cmp	r7, #0
 8035c90:	bfab      	itete	ge
 8035c92:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8035c94:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8035c96:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8035c9a:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8035c9e:	bfac      	ite	ge
 8035ca0:	eb07 0903 	addge.w	r9, r7, r3
 8035ca4:	eba3 0807 	sublt.w	r8, r3, r7
 8035ca8:	9b06      	ldr	r3, [sp, #24]
 8035caa:	1aff      	subs	r7, r7, r3
 8035cac:	4417      	add	r7, r2
 8035cae:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8035cb2:	4a6a      	ldr	r2, [pc, #424]	@ (8035e5c <_strtod_l+0x864>)
 8035cb4:	3f01      	subs	r7, #1
 8035cb6:	4297      	cmp	r7, r2
 8035cb8:	da51      	bge.n	8035d5e <_strtod_l+0x766>
 8035cba:	1bd1      	subs	r1, r2, r7
 8035cbc:	291f      	cmp	r1, #31
 8035cbe:	eba3 0301 	sub.w	r3, r3, r1
 8035cc2:	f04f 0201 	mov.w	r2, #1
 8035cc6:	dc3e      	bgt.n	8035d46 <_strtod_l+0x74e>
 8035cc8:	408a      	lsls	r2, r1
 8035cca:	920c      	str	r2, [sp, #48]	@ 0x30
 8035ccc:	2200      	movs	r2, #0
 8035cce:	920b      	str	r2, [sp, #44]	@ 0x2c
 8035cd0:	eb09 0703 	add.w	r7, r9, r3
 8035cd4:	4498      	add	r8, r3
 8035cd6:	9b06      	ldr	r3, [sp, #24]
 8035cd8:	45b9      	cmp	r9, r7
 8035cda:	4498      	add	r8, r3
 8035cdc:	464b      	mov	r3, r9
 8035cde:	bfa8      	it	ge
 8035ce0:	463b      	movge	r3, r7
 8035ce2:	4543      	cmp	r3, r8
 8035ce4:	bfa8      	it	ge
 8035ce6:	4643      	movge	r3, r8
 8035ce8:	2b00      	cmp	r3, #0
 8035cea:	bfc2      	ittt	gt
 8035cec:	1aff      	subgt	r7, r7, r3
 8035cee:	eba8 0803 	subgt.w	r8, r8, r3
 8035cf2:	eba9 0903 	subgt.w	r9, r9, r3
 8035cf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8035cf8:	2b00      	cmp	r3, #0
 8035cfa:	dd16      	ble.n	8035d2a <_strtod_l+0x732>
 8035cfc:	4629      	mov	r1, r5
 8035cfe:	9805      	ldr	r0, [sp, #20]
 8035d00:	461a      	mov	r2, r3
 8035d02:	f7ff f9a3 	bl	803504c <__pow5mult>
 8035d06:	4605      	mov	r5, r0
 8035d08:	2800      	cmp	r0, #0
 8035d0a:	d0b5      	beq.n	8035c78 <_strtod_l+0x680>
 8035d0c:	4601      	mov	r1, r0
 8035d0e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8035d10:	9805      	ldr	r0, [sp, #20]
 8035d12:	f7ff f8f9 	bl	8034f08 <__multiply>
 8035d16:	900f      	str	r0, [sp, #60]	@ 0x3c
 8035d18:	2800      	cmp	r0, #0
 8035d1a:	f43f ae87 	beq.w	8035a2c <_strtod_l+0x434>
 8035d1e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8035d20:	9805      	ldr	r0, [sp, #20]
 8035d22:	f7fe ffdd 	bl	8034ce0 <_Bfree>
 8035d26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035d28:	9312      	str	r3, [sp, #72]	@ 0x48
 8035d2a:	2f00      	cmp	r7, #0
 8035d2c:	dc1b      	bgt.n	8035d66 <_strtod_l+0x76e>
 8035d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8035d30:	2b00      	cmp	r3, #0
 8035d32:	dd21      	ble.n	8035d78 <_strtod_l+0x780>
 8035d34:	4631      	mov	r1, r6
 8035d36:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8035d38:	9805      	ldr	r0, [sp, #20]
 8035d3a:	f7ff f987 	bl	803504c <__pow5mult>
 8035d3e:	4606      	mov	r6, r0
 8035d40:	b9d0      	cbnz	r0, 8035d78 <_strtod_l+0x780>
 8035d42:	2600      	movs	r6, #0
 8035d44:	e672      	b.n	8035a2c <_strtod_l+0x434>
 8035d46:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8035d4a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8035d4e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8035d52:	37e2      	adds	r7, #226	@ 0xe2
 8035d54:	fa02 f107 	lsl.w	r1, r2, r7
 8035d58:	910b      	str	r1, [sp, #44]	@ 0x2c
 8035d5a:	920c      	str	r2, [sp, #48]	@ 0x30
 8035d5c:	e7b8      	b.n	8035cd0 <_strtod_l+0x6d8>
 8035d5e:	2200      	movs	r2, #0
 8035d60:	920b      	str	r2, [sp, #44]	@ 0x2c
 8035d62:	2201      	movs	r2, #1
 8035d64:	e7f9      	b.n	8035d5a <_strtod_l+0x762>
 8035d66:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8035d68:	9805      	ldr	r0, [sp, #20]
 8035d6a:	463a      	mov	r2, r7
 8035d6c:	f7ff f9c8 	bl	8035100 <__lshift>
 8035d70:	9012      	str	r0, [sp, #72]	@ 0x48
 8035d72:	2800      	cmp	r0, #0
 8035d74:	d1db      	bne.n	8035d2e <_strtod_l+0x736>
 8035d76:	e659      	b.n	8035a2c <_strtod_l+0x434>
 8035d78:	f1b8 0f00 	cmp.w	r8, #0
 8035d7c:	dd07      	ble.n	8035d8e <_strtod_l+0x796>
 8035d7e:	4631      	mov	r1, r6
 8035d80:	9805      	ldr	r0, [sp, #20]
 8035d82:	4642      	mov	r2, r8
 8035d84:	f7ff f9bc 	bl	8035100 <__lshift>
 8035d88:	4606      	mov	r6, r0
 8035d8a:	2800      	cmp	r0, #0
 8035d8c:	d0d9      	beq.n	8035d42 <_strtod_l+0x74a>
 8035d8e:	f1b9 0f00 	cmp.w	r9, #0
 8035d92:	dd08      	ble.n	8035da6 <_strtod_l+0x7ae>
 8035d94:	4629      	mov	r1, r5
 8035d96:	9805      	ldr	r0, [sp, #20]
 8035d98:	464a      	mov	r2, r9
 8035d9a:	f7ff f9b1 	bl	8035100 <__lshift>
 8035d9e:	4605      	mov	r5, r0
 8035da0:	2800      	cmp	r0, #0
 8035da2:	f43f ae43 	beq.w	8035a2c <_strtod_l+0x434>
 8035da6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8035da8:	9805      	ldr	r0, [sp, #20]
 8035daa:	4632      	mov	r2, r6
 8035dac:	f7ff fa30 	bl	8035210 <__mdiff>
 8035db0:	4604      	mov	r4, r0
 8035db2:	2800      	cmp	r0, #0
 8035db4:	f43f ae3a 	beq.w	8035a2c <_strtod_l+0x434>
 8035db8:	2300      	movs	r3, #0
 8035dba:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8035dbe:	60c3      	str	r3, [r0, #12]
 8035dc0:	4629      	mov	r1, r5
 8035dc2:	f7ff fa09 	bl	80351d8 <__mcmp>
 8035dc6:	2800      	cmp	r0, #0
 8035dc8:	da4c      	bge.n	8035e64 <_strtod_l+0x86c>
 8035dca:	ea58 080a 	orrs.w	r8, r8, sl
 8035dce:	d172      	bne.n	8035eb6 <_strtod_l+0x8be>
 8035dd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8035dd4:	2b00      	cmp	r3, #0
 8035dd6:	d16e      	bne.n	8035eb6 <_strtod_l+0x8be>
 8035dd8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8035ddc:	0d1b      	lsrs	r3, r3, #20
 8035dde:	051b      	lsls	r3, r3, #20
 8035de0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8035de4:	d967      	bls.n	8035eb6 <_strtod_l+0x8be>
 8035de6:	6963      	ldr	r3, [r4, #20]
 8035de8:	b913      	cbnz	r3, 8035df0 <_strtod_l+0x7f8>
 8035dea:	6923      	ldr	r3, [r4, #16]
 8035dec:	2b01      	cmp	r3, #1
 8035dee:	dd62      	ble.n	8035eb6 <_strtod_l+0x8be>
 8035df0:	4621      	mov	r1, r4
 8035df2:	2201      	movs	r2, #1
 8035df4:	9805      	ldr	r0, [sp, #20]
 8035df6:	f7ff f983 	bl	8035100 <__lshift>
 8035dfa:	4629      	mov	r1, r5
 8035dfc:	4604      	mov	r4, r0
 8035dfe:	f7ff f9eb 	bl	80351d8 <__mcmp>
 8035e02:	2800      	cmp	r0, #0
 8035e04:	dd57      	ble.n	8035eb6 <_strtod_l+0x8be>
 8035e06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8035e0a:	9a06      	ldr	r2, [sp, #24]
 8035e0c:	0d1b      	lsrs	r3, r3, #20
 8035e0e:	051b      	lsls	r3, r3, #20
 8035e10:	2a00      	cmp	r2, #0
 8035e12:	d06e      	beq.n	8035ef2 <_strtod_l+0x8fa>
 8035e14:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8035e18:	d86b      	bhi.n	8035ef2 <_strtod_l+0x8fa>
 8035e1a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8035e1e:	f67f ae99 	bls.w	8035b54 <_strtod_l+0x55c>
 8035e22:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8035e50 <_strtod_l+0x858>
 8035e26:	ec4b ab16 	vmov	d6, sl, fp
 8035e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8035e60 <_strtod_l+0x868>)
 8035e2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8035e30:	ee17 2a90 	vmov	r2, s15
 8035e34:	4013      	ands	r3, r2
 8035e36:	ec5b ab17 	vmov	sl, fp, d7
 8035e3a:	2b00      	cmp	r3, #0
 8035e3c:	f47f ae01 	bne.w	8035a42 <_strtod_l+0x44a>
 8035e40:	9a05      	ldr	r2, [sp, #20]
 8035e42:	2322      	movs	r3, #34	@ 0x22
 8035e44:	6013      	str	r3, [r2, #0]
 8035e46:	e5fc      	b.n	8035a42 <_strtod_l+0x44a>
 8035e48:	ffc00000 	.word	0xffc00000
 8035e4c:	41dfffff 	.word	0x41dfffff
 8035e50:	00000000 	.word	0x00000000
 8035e54:	39500000 	.word	0x39500000
 8035e58:	08072998 	.word	0x08072998
 8035e5c:	fffffc02 	.word	0xfffffc02
 8035e60:	7ff00000 	.word	0x7ff00000
 8035e64:	46d9      	mov	r9, fp
 8035e66:	d15d      	bne.n	8035f24 <_strtod_l+0x92c>
 8035e68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8035e6c:	f1b8 0f00 	cmp.w	r8, #0
 8035e70:	d02a      	beq.n	8035ec8 <_strtod_l+0x8d0>
 8035e72:	4aa9      	ldr	r2, [pc, #676]	@ (8036118 <_strtod_l+0xb20>)
 8035e74:	4293      	cmp	r3, r2
 8035e76:	d12a      	bne.n	8035ece <_strtod_l+0x8d6>
 8035e78:	9b06      	ldr	r3, [sp, #24]
 8035e7a:	4652      	mov	r2, sl
 8035e7c:	b1fb      	cbz	r3, 8035ebe <_strtod_l+0x8c6>
 8035e7e:	4ba7      	ldr	r3, [pc, #668]	@ (803611c <_strtod_l+0xb24>)
 8035e80:	ea0b 0303 	and.w	r3, fp, r3
 8035e84:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8035e88:	f04f 31ff 	mov.w	r1, #4294967295
 8035e8c:	d81a      	bhi.n	8035ec4 <_strtod_l+0x8cc>
 8035e8e:	0d1b      	lsrs	r3, r3, #20
 8035e90:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8035e94:	fa01 f303 	lsl.w	r3, r1, r3
 8035e98:	429a      	cmp	r2, r3
 8035e9a:	d118      	bne.n	8035ece <_strtod_l+0x8d6>
 8035e9c:	4ba0      	ldr	r3, [pc, #640]	@ (8036120 <_strtod_l+0xb28>)
 8035e9e:	4599      	cmp	r9, r3
 8035ea0:	d102      	bne.n	8035ea8 <_strtod_l+0x8b0>
 8035ea2:	3201      	adds	r2, #1
 8035ea4:	f43f adc2 	beq.w	8035a2c <_strtod_l+0x434>
 8035ea8:	4b9c      	ldr	r3, [pc, #624]	@ (803611c <_strtod_l+0xb24>)
 8035eaa:	ea09 0303 	and.w	r3, r9, r3
 8035eae:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8035eb2:	f04f 0a00 	mov.w	sl, #0
 8035eb6:	9b06      	ldr	r3, [sp, #24]
 8035eb8:	2b00      	cmp	r3, #0
 8035eba:	d1b2      	bne.n	8035e22 <_strtod_l+0x82a>
 8035ebc:	e5c1      	b.n	8035a42 <_strtod_l+0x44a>
 8035ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8035ec2:	e7e9      	b.n	8035e98 <_strtod_l+0x8a0>
 8035ec4:	460b      	mov	r3, r1
 8035ec6:	e7e7      	b.n	8035e98 <_strtod_l+0x8a0>
 8035ec8:	ea53 030a 	orrs.w	r3, r3, sl
 8035ecc:	d09b      	beq.n	8035e06 <_strtod_l+0x80e>
 8035ece:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8035ed0:	b1c3      	cbz	r3, 8035f04 <_strtod_l+0x90c>
 8035ed2:	ea13 0f09 	tst.w	r3, r9
 8035ed6:	d0ee      	beq.n	8035eb6 <_strtod_l+0x8be>
 8035ed8:	9a06      	ldr	r2, [sp, #24]
 8035eda:	4650      	mov	r0, sl
 8035edc:	4659      	mov	r1, fp
 8035ede:	f1b8 0f00 	cmp.w	r8, #0
 8035ee2:	d013      	beq.n	8035f0c <_strtod_l+0x914>
 8035ee4:	f7ff fb6b 	bl	80355be <sulp>
 8035ee8:	ee39 7b00 	vadd.f64	d7, d9, d0
 8035eec:	ec5b ab17 	vmov	sl, fp, d7
 8035ef0:	e7e1      	b.n	8035eb6 <_strtod_l+0x8be>
 8035ef2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8035ef6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8035efa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8035efe:	f04f 3aff 	mov.w	sl, #4294967295
 8035f02:	e7d8      	b.n	8035eb6 <_strtod_l+0x8be>
 8035f04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8035f06:	ea13 0f0a 	tst.w	r3, sl
 8035f0a:	e7e4      	b.n	8035ed6 <_strtod_l+0x8de>
 8035f0c:	f7ff fb57 	bl	80355be <sulp>
 8035f10:	ee39 0b40 	vsub.f64	d0, d9, d0
 8035f14:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8035f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8035f1c:	ec5b ab10 	vmov	sl, fp, d0
 8035f20:	d1c9      	bne.n	8035eb6 <_strtod_l+0x8be>
 8035f22:	e617      	b.n	8035b54 <_strtod_l+0x55c>
 8035f24:	4629      	mov	r1, r5
 8035f26:	4620      	mov	r0, r4
 8035f28:	f7ff face 	bl	80354c8 <__ratio>
 8035f2c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8035f30:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8035f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8035f38:	d85d      	bhi.n	8035ff6 <_strtod_l+0x9fe>
 8035f3a:	f1b8 0f00 	cmp.w	r8, #0
 8035f3e:	d164      	bne.n	803600a <_strtod_l+0xa12>
 8035f40:	f1ba 0f00 	cmp.w	sl, #0
 8035f44:	d14b      	bne.n	8035fde <_strtod_l+0x9e6>
 8035f46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8035f4a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8035f4e:	2b00      	cmp	r3, #0
 8035f50:	d160      	bne.n	8036014 <_strtod_l+0xa1c>
 8035f52:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8035f56:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8035f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8035f5e:	d401      	bmi.n	8035f64 <_strtod_l+0x96c>
 8035f60:	ee20 8b08 	vmul.f64	d8, d0, d8
 8035f64:	eeb1 ab48 	vneg.f64	d10, d8
 8035f68:	486c      	ldr	r0, [pc, #432]	@ (803611c <_strtod_l+0xb24>)
 8035f6a:	496e      	ldr	r1, [pc, #440]	@ (8036124 <_strtod_l+0xb2c>)
 8035f6c:	ea09 0700 	and.w	r7, r9, r0
 8035f70:	428f      	cmp	r7, r1
 8035f72:	ec53 2b1a 	vmov	r2, r3, d10
 8035f76:	d17d      	bne.n	8036074 <_strtod_l+0xa7c>
 8035f78:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8035f7c:	ec4b ab1c 	vmov	d12, sl, fp
 8035f80:	eeb0 0b4c 	vmov.f64	d0, d12
 8035f84:	f7ff f9d8 	bl	8035338 <__ulp>
 8035f88:	4864      	ldr	r0, [pc, #400]	@ (803611c <_strtod_l+0xb24>)
 8035f8a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8035f8e:	ee1c 3a90 	vmov	r3, s25
 8035f92:	4a65      	ldr	r2, [pc, #404]	@ (8036128 <_strtod_l+0xb30>)
 8035f94:	ea03 0100 	and.w	r1, r3, r0
 8035f98:	4291      	cmp	r1, r2
 8035f9a:	ec5b ab1c 	vmov	sl, fp, d12
 8035f9e:	d93c      	bls.n	803601a <_strtod_l+0xa22>
 8035fa0:	ee19 2a90 	vmov	r2, s19
 8035fa4:	4b5e      	ldr	r3, [pc, #376]	@ (8036120 <_strtod_l+0xb28>)
 8035fa6:	429a      	cmp	r2, r3
 8035fa8:	d104      	bne.n	8035fb4 <_strtod_l+0x9bc>
 8035faa:	ee19 3a10 	vmov	r3, s18
 8035fae:	3301      	adds	r3, #1
 8035fb0:	f43f ad3c 	beq.w	8035a2c <_strtod_l+0x434>
 8035fb4:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8036120 <_strtod_l+0xb28>
 8035fb8:	f04f 3aff 	mov.w	sl, #4294967295
 8035fbc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8035fbe:	9805      	ldr	r0, [sp, #20]
 8035fc0:	f7fe fe8e 	bl	8034ce0 <_Bfree>
 8035fc4:	9805      	ldr	r0, [sp, #20]
 8035fc6:	4631      	mov	r1, r6
 8035fc8:	f7fe fe8a 	bl	8034ce0 <_Bfree>
 8035fcc:	9805      	ldr	r0, [sp, #20]
 8035fce:	4629      	mov	r1, r5
 8035fd0:	f7fe fe86 	bl	8034ce0 <_Bfree>
 8035fd4:	9805      	ldr	r0, [sp, #20]
 8035fd6:	4621      	mov	r1, r4
 8035fd8:	f7fe fe82 	bl	8034ce0 <_Bfree>
 8035fdc:	e627      	b.n	8035c2e <_strtod_l+0x636>
 8035fde:	f1ba 0f01 	cmp.w	sl, #1
 8035fe2:	d103      	bne.n	8035fec <_strtod_l+0x9f4>
 8035fe4:	f1bb 0f00 	cmp.w	fp, #0
 8035fe8:	f43f adb4 	beq.w	8035b54 <_strtod_l+0x55c>
 8035fec:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8035ff0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8035ff4:	e7b8      	b.n	8035f68 <_strtod_l+0x970>
 8035ff6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8035ffa:	ee20 8b08 	vmul.f64	d8, d0, d8
 8035ffe:	f1b8 0f00 	cmp.w	r8, #0
 8036002:	d0af      	beq.n	8035f64 <_strtod_l+0x96c>
 8036004:	eeb0 ab48 	vmov.f64	d10, d8
 8036008:	e7ae      	b.n	8035f68 <_strtod_l+0x970>
 803600a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 803600e:	eeb0 8b4a 	vmov.f64	d8, d10
 8036012:	e7a9      	b.n	8035f68 <_strtod_l+0x970>
 8036014:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8036018:	e7a6      	b.n	8035f68 <_strtod_l+0x970>
 803601a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 803601e:	9b06      	ldr	r3, [sp, #24]
 8036020:	46d9      	mov	r9, fp
 8036022:	2b00      	cmp	r3, #0
 8036024:	d1ca      	bne.n	8035fbc <_strtod_l+0x9c4>
 8036026:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 803602a:	0d1b      	lsrs	r3, r3, #20
 803602c:	051b      	lsls	r3, r3, #20
 803602e:	429f      	cmp	r7, r3
 8036030:	d1c4      	bne.n	8035fbc <_strtod_l+0x9c4>
 8036032:	ec51 0b18 	vmov	r0, r1, d8
 8036036:	f7da fb51 	bl	80106dc <__aeabi_d2lz>
 803603a:	f7da f9e7 	bl	801040c <__aeabi_l2d>
 803603e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8036042:	ec41 0b17 	vmov	d7, r0, r1
 8036046:	ea49 090a 	orr.w	r9, r9, sl
 803604a:	ea59 0908 	orrs.w	r9, r9, r8
 803604e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8036052:	d03c      	beq.n	80360ce <_strtod_l+0xad6>
 8036054:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8036100 <_strtod_l+0xb08>
 8036058:	eeb4 8bc7 	vcmpe.f64	d8, d7
 803605c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8036060:	f53f acef 	bmi.w	8035a42 <_strtod_l+0x44a>
 8036064:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8036108 <_strtod_l+0xb10>
 8036068:	eeb4 8bc7 	vcmpe.f64	d8, d7
 803606c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8036070:	dda4      	ble.n	8035fbc <_strtod_l+0x9c4>
 8036072:	e4e6      	b.n	8035a42 <_strtod_l+0x44a>
 8036074:	9906      	ldr	r1, [sp, #24]
 8036076:	b1e1      	cbz	r1, 80360b2 <_strtod_l+0xaba>
 8036078:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 803607c:	d819      	bhi.n	80360b2 <_strtod_l+0xaba>
 803607e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8036082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8036086:	d811      	bhi.n	80360ac <_strtod_l+0xab4>
 8036088:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 803608c:	ee18 3a10 	vmov	r3, s16
 8036090:	2b01      	cmp	r3, #1
 8036092:	bf38      	it	cc
 8036094:	2301      	movcc	r3, #1
 8036096:	ee08 3a10 	vmov	s16, r3
 803609a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 803609e:	f1b8 0f00 	cmp.w	r8, #0
 80360a2:	d111      	bne.n	80360c8 <_strtod_l+0xad0>
 80360a4:	eeb1 7b48 	vneg.f64	d7, d8
 80360a8:	ec53 2b17 	vmov	r2, r3, d7
 80360ac:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80360b0:	1bcb      	subs	r3, r1, r7
 80360b2:	eeb0 0b49 	vmov.f64	d0, d9
 80360b6:	ec43 2b1a 	vmov	d10, r2, r3
 80360ba:	f7ff f93d 	bl	8035338 <__ulp>
 80360be:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80360c2:	ec5b ab19 	vmov	sl, fp, d9
 80360c6:	e7aa      	b.n	803601e <_strtod_l+0xa26>
 80360c8:	eeb0 7b48 	vmov.f64	d7, d8
 80360cc:	e7ec      	b.n	80360a8 <_strtod_l+0xab0>
 80360ce:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8036110 <_strtod_l+0xb18>
 80360d2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80360d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80360da:	f57f af6f 	bpl.w	8035fbc <_strtod_l+0x9c4>
 80360de:	e4b0      	b.n	8035a42 <_strtod_l+0x44a>
 80360e0:	2300      	movs	r3, #0
 80360e2:	9308      	str	r3, [sp, #32]
 80360e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80360e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80360e8:	6013      	str	r3, [r2, #0]
 80360ea:	f7ff bac4 	b.w	8035676 <_strtod_l+0x7e>
 80360ee:	2a65      	cmp	r2, #101	@ 0x65
 80360f0:	f43f abbf 	beq.w	8035872 <_strtod_l+0x27a>
 80360f4:	2a45      	cmp	r2, #69	@ 0x45
 80360f6:	f43f abbc 	beq.w	8035872 <_strtod_l+0x27a>
 80360fa:	2101      	movs	r1, #1
 80360fc:	f7ff bbf4 	b.w	80358e8 <_strtod_l+0x2f0>
 8036100:	94a03595 	.word	0x94a03595
 8036104:	3fdfffff 	.word	0x3fdfffff
 8036108:	35afe535 	.word	0x35afe535
 803610c:	3fe00000 	.word	0x3fe00000
 8036110:	94a03595 	.word	0x94a03595
 8036114:	3fcfffff 	.word	0x3fcfffff
 8036118:	000fffff 	.word	0x000fffff
 803611c:	7ff00000 	.word	0x7ff00000
 8036120:	7fefffff 	.word	0x7fefffff
 8036124:	7fe00000 	.word	0x7fe00000
 8036128:	7c9fffff 	.word	0x7c9fffff

0803612c <_strtod_r>:
 803612c:	4b01      	ldr	r3, [pc, #4]	@ (8036134 <_strtod_r+0x8>)
 803612e:	f7ff ba63 	b.w	80355f8 <_strtod_l>
 8036132:	bf00      	nop
 8036134:	24002438 	.word	0x24002438

08036138 <_strtol_l.isra.0>:
 8036138:	2b24      	cmp	r3, #36	@ 0x24
 803613a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803613e:	4686      	mov	lr, r0
 8036140:	4690      	mov	r8, r2
 8036142:	d801      	bhi.n	8036148 <_strtol_l.isra.0+0x10>
 8036144:	2b01      	cmp	r3, #1
 8036146:	d106      	bne.n	8036156 <_strtol_l.isra.0+0x1e>
 8036148:	f7fd ff18 	bl	8033f7c <__errno>
 803614c:	2316      	movs	r3, #22
 803614e:	6003      	str	r3, [r0, #0]
 8036150:	2000      	movs	r0, #0
 8036152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8036156:	4834      	ldr	r0, [pc, #208]	@ (8036228 <_strtol_l.isra.0+0xf0>)
 8036158:	460d      	mov	r5, r1
 803615a:	462a      	mov	r2, r5
 803615c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8036160:	5d06      	ldrb	r6, [r0, r4]
 8036162:	f016 0608 	ands.w	r6, r6, #8
 8036166:	d1f8      	bne.n	803615a <_strtol_l.isra.0+0x22>
 8036168:	2c2d      	cmp	r4, #45	@ 0x2d
 803616a:	d110      	bne.n	803618e <_strtol_l.isra.0+0x56>
 803616c:	782c      	ldrb	r4, [r5, #0]
 803616e:	2601      	movs	r6, #1
 8036170:	1c95      	adds	r5, r2, #2
 8036172:	f033 0210 	bics.w	r2, r3, #16
 8036176:	d115      	bne.n	80361a4 <_strtol_l.isra.0+0x6c>
 8036178:	2c30      	cmp	r4, #48	@ 0x30
 803617a:	d10d      	bne.n	8036198 <_strtol_l.isra.0+0x60>
 803617c:	782a      	ldrb	r2, [r5, #0]
 803617e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8036182:	2a58      	cmp	r2, #88	@ 0x58
 8036184:	d108      	bne.n	8036198 <_strtol_l.isra.0+0x60>
 8036186:	786c      	ldrb	r4, [r5, #1]
 8036188:	3502      	adds	r5, #2
 803618a:	2310      	movs	r3, #16
 803618c:	e00a      	b.n	80361a4 <_strtol_l.isra.0+0x6c>
 803618e:	2c2b      	cmp	r4, #43	@ 0x2b
 8036190:	bf04      	itt	eq
 8036192:	782c      	ldrbeq	r4, [r5, #0]
 8036194:	1c95      	addeq	r5, r2, #2
 8036196:	e7ec      	b.n	8036172 <_strtol_l.isra.0+0x3a>
 8036198:	2b00      	cmp	r3, #0
 803619a:	d1f6      	bne.n	803618a <_strtol_l.isra.0+0x52>
 803619c:	2c30      	cmp	r4, #48	@ 0x30
 803619e:	bf14      	ite	ne
 80361a0:	230a      	movne	r3, #10
 80361a2:	2308      	moveq	r3, #8
 80361a4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80361a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80361ac:	2200      	movs	r2, #0
 80361ae:	fbbc f9f3 	udiv	r9, ip, r3
 80361b2:	4610      	mov	r0, r2
 80361b4:	fb03 ca19 	mls	sl, r3, r9, ip
 80361b8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80361bc:	2f09      	cmp	r7, #9
 80361be:	d80f      	bhi.n	80361e0 <_strtol_l.isra.0+0xa8>
 80361c0:	463c      	mov	r4, r7
 80361c2:	42a3      	cmp	r3, r4
 80361c4:	dd1b      	ble.n	80361fe <_strtol_l.isra.0+0xc6>
 80361c6:	1c57      	adds	r7, r2, #1
 80361c8:	d007      	beq.n	80361da <_strtol_l.isra.0+0xa2>
 80361ca:	4581      	cmp	r9, r0
 80361cc:	d314      	bcc.n	80361f8 <_strtol_l.isra.0+0xc0>
 80361ce:	d101      	bne.n	80361d4 <_strtol_l.isra.0+0x9c>
 80361d0:	45a2      	cmp	sl, r4
 80361d2:	db11      	blt.n	80361f8 <_strtol_l.isra.0+0xc0>
 80361d4:	fb00 4003 	mla	r0, r0, r3, r4
 80361d8:	2201      	movs	r2, #1
 80361da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80361de:	e7eb      	b.n	80361b8 <_strtol_l.isra.0+0x80>
 80361e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80361e4:	2f19      	cmp	r7, #25
 80361e6:	d801      	bhi.n	80361ec <_strtol_l.isra.0+0xb4>
 80361e8:	3c37      	subs	r4, #55	@ 0x37
 80361ea:	e7ea      	b.n	80361c2 <_strtol_l.isra.0+0x8a>
 80361ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80361f0:	2f19      	cmp	r7, #25
 80361f2:	d804      	bhi.n	80361fe <_strtol_l.isra.0+0xc6>
 80361f4:	3c57      	subs	r4, #87	@ 0x57
 80361f6:	e7e4      	b.n	80361c2 <_strtol_l.isra.0+0x8a>
 80361f8:	f04f 32ff 	mov.w	r2, #4294967295
 80361fc:	e7ed      	b.n	80361da <_strtol_l.isra.0+0xa2>
 80361fe:	1c53      	adds	r3, r2, #1
 8036200:	d108      	bne.n	8036214 <_strtol_l.isra.0+0xdc>
 8036202:	2322      	movs	r3, #34	@ 0x22
 8036204:	f8ce 3000 	str.w	r3, [lr]
 8036208:	4660      	mov	r0, ip
 803620a:	f1b8 0f00 	cmp.w	r8, #0
 803620e:	d0a0      	beq.n	8036152 <_strtol_l.isra.0+0x1a>
 8036210:	1e69      	subs	r1, r5, #1
 8036212:	e006      	b.n	8036222 <_strtol_l.isra.0+0xea>
 8036214:	b106      	cbz	r6, 8036218 <_strtol_l.isra.0+0xe0>
 8036216:	4240      	negs	r0, r0
 8036218:	f1b8 0f00 	cmp.w	r8, #0
 803621c:	d099      	beq.n	8036152 <_strtol_l.isra.0+0x1a>
 803621e:	2a00      	cmp	r2, #0
 8036220:	d1f6      	bne.n	8036210 <_strtol_l.isra.0+0xd8>
 8036222:	f8c8 1000 	str.w	r1, [r8]
 8036226:	e794      	b.n	8036152 <_strtol_l.isra.0+0x1a>
 8036228:	080729c1 	.word	0x080729c1

0803622c <_strtol_r>:
 803622c:	f7ff bf84 	b.w	8036138 <_strtol_l.isra.0>

08036230 <__ssputs_r>:
 8036230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8036234:	688e      	ldr	r6, [r1, #8]
 8036236:	461f      	mov	r7, r3
 8036238:	42be      	cmp	r6, r7
 803623a:	680b      	ldr	r3, [r1, #0]
 803623c:	4682      	mov	sl, r0
 803623e:	460c      	mov	r4, r1
 8036240:	4690      	mov	r8, r2
 8036242:	d82d      	bhi.n	80362a0 <__ssputs_r+0x70>
 8036244:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8036248:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 803624c:	d026      	beq.n	803629c <__ssputs_r+0x6c>
 803624e:	6965      	ldr	r5, [r4, #20]
 8036250:	6909      	ldr	r1, [r1, #16]
 8036252:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8036256:	eba3 0901 	sub.w	r9, r3, r1
 803625a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 803625e:	1c7b      	adds	r3, r7, #1
 8036260:	444b      	add	r3, r9
 8036262:	106d      	asrs	r5, r5, #1
 8036264:	429d      	cmp	r5, r3
 8036266:	bf38      	it	cc
 8036268:	461d      	movcc	r5, r3
 803626a:	0553      	lsls	r3, r2, #21
 803626c:	d527      	bpl.n	80362be <__ssputs_r+0x8e>
 803626e:	4629      	mov	r1, r5
 8036270:	f7fc fdd8 	bl	8032e24 <_malloc_r>
 8036274:	4606      	mov	r6, r0
 8036276:	b360      	cbz	r0, 80362d2 <__ssputs_r+0xa2>
 8036278:	6921      	ldr	r1, [r4, #16]
 803627a:	464a      	mov	r2, r9
 803627c:	f7fd feab 	bl	8033fd6 <memcpy>
 8036280:	89a3      	ldrh	r3, [r4, #12]
 8036282:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8036286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 803628a:	81a3      	strh	r3, [r4, #12]
 803628c:	6126      	str	r6, [r4, #16]
 803628e:	6165      	str	r5, [r4, #20]
 8036290:	444e      	add	r6, r9
 8036292:	eba5 0509 	sub.w	r5, r5, r9
 8036296:	6026      	str	r6, [r4, #0]
 8036298:	60a5      	str	r5, [r4, #8]
 803629a:	463e      	mov	r6, r7
 803629c:	42be      	cmp	r6, r7
 803629e:	d900      	bls.n	80362a2 <__ssputs_r+0x72>
 80362a0:	463e      	mov	r6, r7
 80362a2:	6820      	ldr	r0, [r4, #0]
 80362a4:	4632      	mov	r2, r6
 80362a6:	4641      	mov	r1, r8
 80362a8:	f7fd fdd9 	bl	8033e5e <memmove>
 80362ac:	68a3      	ldr	r3, [r4, #8]
 80362ae:	1b9b      	subs	r3, r3, r6
 80362b0:	60a3      	str	r3, [r4, #8]
 80362b2:	6823      	ldr	r3, [r4, #0]
 80362b4:	4433      	add	r3, r6
 80362b6:	6023      	str	r3, [r4, #0]
 80362b8:	2000      	movs	r0, #0
 80362ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80362be:	462a      	mov	r2, r5
 80362c0:	f7fc fe3c 	bl	8032f3c <_realloc_r>
 80362c4:	4606      	mov	r6, r0
 80362c6:	2800      	cmp	r0, #0
 80362c8:	d1e0      	bne.n	803628c <__ssputs_r+0x5c>
 80362ca:	6921      	ldr	r1, [r4, #16]
 80362cc:	4650      	mov	r0, sl
 80362ce:	f7fe fc7d 	bl	8034bcc <_free_r>
 80362d2:	230c      	movs	r3, #12
 80362d4:	f8ca 3000 	str.w	r3, [sl]
 80362d8:	89a3      	ldrh	r3, [r4, #12]
 80362da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80362de:	81a3      	strh	r3, [r4, #12]
 80362e0:	f04f 30ff 	mov.w	r0, #4294967295
 80362e4:	e7e9      	b.n	80362ba <__ssputs_r+0x8a>
	...

080362e8 <_svfiprintf_r>:
 80362e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80362ec:	4698      	mov	r8, r3
 80362ee:	898b      	ldrh	r3, [r1, #12]
 80362f0:	061b      	lsls	r3, r3, #24
 80362f2:	b09d      	sub	sp, #116	@ 0x74
 80362f4:	4607      	mov	r7, r0
 80362f6:	460d      	mov	r5, r1
 80362f8:	4614      	mov	r4, r2
 80362fa:	d510      	bpl.n	803631e <_svfiprintf_r+0x36>
 80362fc:	690b      	ldr	r3, [r1, #16]
 80362fe:	b973      	cbnz	r3, 803631e <_svfiprintf_r+0x36>
 8036300:	2140      	movs	r1, #64	@ 0x40
 8036302:	f7fc fd8f 	bl	8032e24 <_malloc_r>
 8036306:	6028      	str	r0, [r5, #0]
 8036308:	6128      	str	r0, [r5, #16]
 803630a:	b930      	cbnz	r0, 803631a <_svfiprintf_r+0x32>
 803630c:	230c      	movs	r3, #12
 803630e:	603b      	str	r3, [r7, #0]
 8036310:	f04f 30ff 	mov.w	r0, #4294967295
 8036314:	b01d      	add	sp, #116	@ 0x74
 8036316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803631a:	2340      	movs	r3, #64	@ 0x40
 803631c:	616b      	str	r3, [r5, #20]
 803631e:	2300      	movs	r3, #0
 8036320:	9309      	str	r3, [sp, #36]	@ 0x24
 8036322:	2320      	movs	r3, #32
 8036324:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8036328:	f8cd 800c 	str.w	r8, [sp, #12]
 803632c:	2330      	movs	r3, #48	@ 0x30
 803632e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80364cc <_svfiprintf_r+0x1e4>
 8036332:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8036336:	f04f 0901 	mov.w	r9, #1
 803633a:	4623      	mov	r3, r4
 803633c:	469a      	mov	sl, r3
 803633e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8036342:	b10a      	cbz	r2, 8036348 <_svfiprintf_r+0x60>
 8036344:	2a25      	cmp	r2, #37	@ 0x25
 8036346:	d1f9      	bne.n	803633c <_svfiprintf_r+0x54>
 8036348:	ebba 0b04 	subs.w	fp, sl, r4
 803634c:	d00b      	beq.n	8036366 <_svfiprintf_r+0x7e>
 803634e:	465b      	mov	r3, fp
 8036350:	4622      	mov	r2, r4
 8036352:	4629      	mov	r1, r5
 8036354:	4638      	mov	r0, r7
 8036356:	f7ff ff6b 	bl	8036230 <__ssputs_r>
 803635a:	3001      	adds	r0, #1
 803635c:	f000 80a7 	beq.w	80364ae <_svfiprintf_r+0x1c6>
 8036360:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8036362:	445a      	add	r2, fp
 8036364:	9209      	str	r2, [sp, #36]	@ 0x24
 8036366:	f89a 3000 	ldrb.w	r3, [sl]
 803636a:	2b00      	cmp	r3, #0
 803636c:	f000 809f 	beq.w	80364ae <_svfiprintf_r+0x1c6>
 8036370:	2300      	movs	r3, #0
 8036372:	f04f 32ff 	mov.w	r2, #4294967295
 8036376:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803637a:	f10a 0a01 	add.w	sl, sl, #1
 803637e:	9304      	str	r3, [sp, #16]
 8036380:	9307      	str	r3, [sp, #28]
 8036382:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8036386:	931a      	str	r3, [sp, #104]	@ 0x68
 8036388:	4654      	mov	r4, sl
 803638a:	2205      	movs	r2, #5
 803638c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8036390:	484e      	ldr	r0, [pc, #312]	@ (80364cc <_svfiprintf_r+0x1e4>)
 8036392:	f7d9 fe55 	bl	8010040 <memchr>
 8036396:	9a04      	ldr	r2, [sp, #16]
 8036398:	b9d8      	cbnz	r0, 80363d2 <_svfiprintf_r+0xea>
 803639a:	06d0      	lsls	r0, r2, #27
 803639c:	bf44      	itt	mi
 803639e:	2320      	movmi	r3, #32
 80363a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80363a4:	0711      	lsls	r1, r2, #28
 80363a6:	bf44      	itt	mi
 80363a8:	232b      	movmi	r3, #43	@ 0x2b
 80363aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80363ae:	f89a 3000 	ldrb.w	r3, [sl]
 80363b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80363b4:	d015      	beq.n	80363e2 <_svfiprintf_r+0xfa>
 80363b6:	9a07      	ldr	r2, [sp, #28]
 80363b8:	4654      	mov	r4, sl
 80363ba:	2000      	movs	r0, #0
 80363bc:	f04f 0c0a 	mov.w	ip, #10
 80363c0:	4621      	mov	r1, r4
 80363c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80363c6:	3b30      	subs	r3, #48	@ 0x30
 80363c8:	2b09      	cmp	r3, #9
 80363ca:	d94b      	bls.n	8036464 <_svfiprintf_r+0x17c>
 80363cc:	b1b0      	cbz	r0, 80363fc <_svfiprintf_r+0x114>
 80363ce:	9207      	str	r2, [sp, #28]
 80363d0:	e014      	b.n	80363fc <_svfiprintf_r+0x114>
 80363d2:	eba0 0308 	sub.w	r3, r0, r8
 80363d6:	fa09 f303 	lsl.w	r3, r9, r3
 80363da:	4313      	orrs	r3, r2
 80363dc:	9304      	str	r3, [sp, #16]
 80363de:	46a2      	mov	sl, r4
 80363e0:	e7d2      	b.n	8036388 <_svfiprintf_r+0xa0>
 80363e2:	9b03      	ldr	r3, [sp, #12]
 80363e4:	1d19      	adds	r1, r3, #4
 80363e6:	681b      	ldr	r3, [r3, #0]
 80363e8:	9103      	str	r1, [sp, #12]
 80363ea:	2b00      	cmp	r3, #0
 80363ec:	bfbb      	ittet	lt
 80363ee:	425b      	neglt	r3, r3
 80363f0:	f042 0202 	orrlt.w	r2, r2, #2
 80363f4:	9307      	strge	r3, [sp, #28]
 80363f6:	9307      	strlt	r3, [sp, #28]
 80363f8:	bfb8      	it	lt
 80363fa:	9204      	strlt	r2, [sp, #16]
 80363fc:	7823      	ldrb	r3, [r4, #0]
 80363fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8036400:	d10a      	bne.n	8036418 <_svfiprintf_r+0x130>
 8036402:	7863      	ldrb	r3, [r4, #1]
 8036404:	2b2a      	cmp	r3, #42	@ 0x2a
 8036406:	d132      	bne.n	803646e <_svfiprintf_r+0x186>
 8036408:	9b03      	ldr	r3, [sp, #12]
 803640a:	1d1a      	adds	r2, r3, #4
 803640c:	681b      	ldr	r3, [r3, #0]
 803640e:	9203      	str	r2, [sp, #12]
 8036410:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8036414:	3402      	adds	r4, #2
 8036416:	9305      	str	r3, [sp, #20]
 8036418:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80364dc <_svfiprintf_r+0x1f4>
 803641c:	7821      	ldrb	r1, [r4, #0]
 803641e:	2203      	movs	r2, #3
 8036420:	4650      	mov	r0, sl
 8036422:	f7d9 fe0d 	bl	8010040 <memchr>
 8036426:	b138      	cbz	r0, 8036438 <_svfiprintf_r+0x150>
 8036428:	9b04      	ldr	r3, [sp, #16]
 803642a:	eba0 000a 	sub.w	r0, r0, sl
 803642e:	2240      	movs	r2, #64	@ 0x40
 8036430:	4082      	lsls	r2, r0
 8036432:	4313      	orrs	r3, r2
 8036434:	3401      	adds	r4, #1
 8036436:	9304      	str	r3, [sp, #16]
 8036438:	f814 1b01 	ldrb.w	r1, [r4], #1
 803643c:	4824      	ldr	r0, [pc, #144]	@ (80364d0 <_svfiprintf_r+0x1e8>)
 803643e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8036442:	2206      	movs	r2, #6
 8036444:	f7d9 fdfc 	bl	8010040 <memchr>
 8036448:	2800      	cmp	r0, #0
 803644a:	d036      	beq.n	80364ba <_svfiprintf_r+0x1d2>
 803644c:	4b21      	ldr	r3, [pc, #132]	@ (80364d4 <_svfiprintf_r+0x1ec>)
 803644e:	bb1b      	cbnz	r3, 8036498 <_svfiprintf_r+0x1b0>
 8036450:	9b03      	ldr	r3, [sp, #12]
 8036452:	3307      	adds	r3, #7
 8036454:	f023 0307 	bic.w	r3, r3, #7
 8036458:	3308      	adds	r3, #8
 803645a:	9303      	str	r3, [sp, #12]
 803645c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803645e:	4433      	add	r3, r6
 8036460:	9309      	str	r3, [sp, #36]	@ 0x24
 8036462:	e76a      	b.n	803633a <_svfiprintf_r+0x52>
 8036464:	fb0c 3202 	mla	r2, ip, r2, r3
 8036468:	460c      	mov	r4, r1
 803646a:	2001      	movs	r0, #1
 803646c:	e7a8      	b.n	80363c0 <_svfiprintf_r+0xd8>
 803646e:	2300      	movs	r3, #0
 8036470:	3401      	adds	r4, #1
 8036472:	9305      	str	r3, [sp, #20]
 8036474:	4619      	mov	r1, r3
 8036476:	f04f 0c0a 	mov.w	ip, #10
 803647a:	4620      	mov	r0, r4
 803647c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8036480:	3a30      	subs	r2, #48	@ 0x30
 8036482:	2a09      	cmp	r2, #9
 8036484:	d903      	bls.n	803648e <_svfiprintf_r+0x1a6>
 8036486:	2b00      	cmp	r3, #0
 8036488:	d0c6      	beq.n	8036418 <_svfiprintf_r+0x130>
 803648a:	9105      	str	r1, [sp, #20]
 803648c:	e7c4      	b.n	8036418 <_svfiprintf_r+0x130>
 803648e:	fb0c 2101 	mla	r1, ip, r1, r2
 8036492:	4604      	mov	r4, r0
 8036494:	2301      	movs	r3, #1
 8036496:	e7f0      	b.n	803647a <_svfiprintf_r+0x192>
 8036498:	ab03      	add	r3, sp, #12
 803649a:	9300      	str	r3, [sp, #0]
 803649c:	462a      	mov	r2, r5
 803649e:	4b0e      	ldr	r3, [pc, #56]	@ (80364d8 <_svfiprintf_r+0x1f0>)
 80364a0:	a904      	add	r1, sp, #16
 80364a2:	4638      	mov	r0, r7
 80364a4:	f7fc fe08 	bl	80330b8 <_printf_float>
 80364a8:	1c42      	adds	r2, r0, #1
 80364aa:	4606      	mov	r6, r0
 80364ac:	d1d6      	bne.n	803645c <_svfiprintf_r+0x174>
 80364ae:	89ab      	ldrh	r3, [r5, #12]
 80364b0:	065b      	lsls	r3, r3, #25
 80364b2:	f53f af2d 	bmi.w	8036310 <_svfiprintf_r+0x28>
 80364b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80364b8:	e72c      	b.n	8036314 <_svfiprintf_r+0x2c>
 80364ba:	ab03      	add	r3, sp, #12
 80364bc:	9300      	str	r3, [sp, #0]
 80364be:	462a      	mov	r2, r5
 80364c0:	4b05      	ldr	r3, [pc, #20]	@ (80364d8 <_svfiprintf_r+0x1f0>)
 80364c2:	a904      	add	r1, sp, #16
 80364c4:	4638      	mov	r0, r7
 80364c6:	f7fd f87f 	bl	80335c8 <_printf_i>
 80364ca:	e7ed      	b.n	80364a8 <_svfiprintf_r+0x1c0>
 80364cc:	080727b9 	.word	0x080727b9
 80364d0:	080727c3 	.word	0x080727c3
 80364d4:	080330b9 	.word	0x080330b9
 80364d8:	08036231 	.word	0x08036231
 80364dc:	080727bf 	.word	0x080727bf

080364e0 <__sflush_r>:
 80364e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80364e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80364e8:	0716      	lsls	r6, r2, #28
 80364ea:	4605      	mov	r5, r0
 80364ec:	460c      	mov	r4, r1
 80364ee:	d454      	bmi.n	803659a <__sflush_r+0xba>
 80364f0:	684b      	ldr	r3, [r1, #4]
 80364f2:	2b00      	cmp	r3, #0
 80364f4:	dc02      	bgt.n	80364fc <__sflush_r+0x1c>
 80364f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80364f8:	2b00      	cmp	r3, #0
 80364fa:	dd48      	ble.n	803658e <__sflush_r+0xae>
 80364fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80364fe:	2e00      	cmp	r6, #0
 8036500:	d045      	beq.n	803658e <__sflush_r+0xae>
 8036502:	2300      	movs	r3, #0
 8036504:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8036508:	682f      	ldr	r7, [r5, #0]
 803650a:	6a21      	ldr	r1, [r4, #32]
 803650c:	602b      	str	r3, [r5, #0]
 803650e:	d030      	beq.n	8036572 <__sflush_r+0x92>
 8036510:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8036512:	89a3      	ldrh	r3, [r4, #12]
 8036514:	0759      	lsls	r1, r3, #29
 8036516:	d505      	bpl.n	8036524 <__sflush_r+0x44>
 8036518:	6863      	ldr	r3, [r4, #4]
 803651a:	1ad2      	subs	r2, r2, r3
 803651c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 803651e:	b10b      	cbz	r3, 8036524 <__sflush_r+0x44>
 8036520:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8036522:	1ad2      	subs	r2, r2, r3
 8036524:	2300      	movs	r3, #0
 8036526:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8036528:	6a21      	ldr	r1, [r4, #32]
 803652a:	4628      	mov	r0, r5
 803652c:	47b0      	blx	r6
 803652e:	1c43      	adds	r3, r0, #1
 8036530:	89a3      	ldrh	r3, [r4, #12]
 8036532:	d106      	bne.n	8036542 <__sflush_r+0x62>
 8036534:	6829      	ldr	r1, [r5, #0]
 8036536:	291d      	cmp	r1, #29
 8036538:	d82b      	bhi.n	8036592 <__sflush_r+0xb2>
 803653a:	4a2a      	ldr	r2, [pc, #168]	@ (80365e4 <__sflush_r+0x104>)
 803653c:	40ca      	lsrs	r2, r1
 803653e:	07d6      	lsls	r6, r2, #31
 8036540:	d527      	bpl.n	8036592 <__sflush_r+0xb2>
 8036542:	2200      	movs	r2, #0
 8036544:	6062      	str	r2, [r4, #4]
 8036546:	04d9      	lsls	r1, r3, #19
 8036548:	6922      	ldr	r2, [r4, #16]
 803654a:	6022      	str	r2, [r4, #0]
 803654c:	d504      	bpl.n	8036558 <__sflush_r+0x78>
 803654e:	1c42      	adds	r2, r0, #1
 8036550:	d101      	bne.n	8036556 <__sflush_r+0x76>
 8036552:	682b      	ldr	r3, [r5, #0]
 8036554:	b903      	cbnz	r3, 8036558 <__sflush_r+0x78>
 8036556:	6560      	str	r0, [r4, #84]	@ 0x54
 8036558:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 803655a:	602f      	str	r7, [r5, #0]
 803655c:	b1b9      	cbz	r1, 803658e <__sflush_r+0xae>
 803655e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8036562:	4299      	cmp	r1, r3
 8036564:	d002      	beq.n	803656c <__sflush_r+0x8c>
 8036566:	4628      	mov	r0, r5
 8036568:	f7fe fb30 	bl	8034bcc <_free_r>
 803656c:	2300      	movs	r3, #0
 803656e:	6363      	str	r3, [r4, #52]	@ 0x34
 8036570:	e00d      	b.n	803658e <__sflush_r+0xae>
 8036572:	2301      	movs	r3, #1
 8036574:	4628      	mov	r0, r5
 8036576:	47b0      	blx	r6
 8036578:	4602      	mov	r2, r0
 803657a:	1c50      	adds	r0, r2, #1
 803657c:	d1c9      	bne.n	8036512 <__sflush_r+0x32>
 803657e:	682b      	ldr	r3, [r5, #0]
 8036580:	2b00      	cmp	r3, #0
 8036582:	d0c6      	beq.n	8036512 <__sflush_r+0x32>
 8036584:	2b1d      	cmp	r3, #29
 8036586:	d001      	beq.n	803658c <__sflush_r+0xac>
 8036588:	2b16      	cmp	r3, #22
 803658a:	d11e      	bne.n	80365ca <__sflush_r+0xea>
 803658c:	602f      	str	r7, [r5, #0]
 803658e:	2000      	movs	r0, #0
 8036590:	e022      	b.n	80365d8 <__sflush_r+0xf8>
 8036592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8036596:	b21b      	sxth	r3, r3
 8036598:	e01b      	b.n	80365d2 <__sflush_r+0xf2>
 803659a:	690f      	ldr	r7, [r1, #16]
 803659c:	2f00      	cmp	r7, #0
 803659e:	d0f6      	beq.n	803658e <__sflush_r+0xae>
 80365a0:	0793      	lsls	r3, r2, #30
 80365a2:	680e      	ldr	r6, [r1, #0]
 80365a4:	bf08      	it	eq
 80365a6:	694b      	ldreq	r3, [r1, #20]
 80365a8:	600f      	str	r7, [r1, #0]
 80365aa:	bf18      	it	ne
 80365ac:	2300      	movne	r3, #0
 80365ae:	eba6 0807 	sub.w	r8, r6, r7
 80365b2:	608b      	str	r3, [r1, #8]
 80365b4:	f1b8 0f00 	cmp.w	r8, #0
 80365b8:	dde9      	ble.n	803658e <__sflush_r+0xae>
 80365ba:	6a21      	ldr	r1, [r4, #32]
 80365bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80365be:	4643      	mov	r3, r8
 80365c0:	463a      	mov	r2, r7
 80365c2:	4628      	mov	r0, r5
 80365c4:	47b0      	blx	r6
 80365c6:	2800      	cmp	r0, #0
 80365c8:	dc08      	bgt.n	80365dc <__sflush_r+0xfc>
 80365ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80365ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80365d2:	81a3      	strh	r3, [r4, #12]
 80365d4:	f04f 30ff 	mov.w	r0, #4294967295
 80365d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80365dc:	4407      	add	r7, r0
 80365de:	eba8 0800 	sub.w	r8, r8, r0
 80365e2:	e7e7      	b.n	80365b4 <__sflush_r+0xd4>
 80365e4:	20400001 	.word	0x20400001

080365e8 <_fflush_r>:
 80365e8:	b538      	push	{r3, r4, r5, lr}
 80365ea:	690b      	ldr	r3, [r1, #16]
 80365ec:	4605      	mov	r5, r0
 80365ee:	460c      	mov	r4, r1
 80365f0:	b913      	cbnz	r3, 80365f8 <_fflush_r+0x10>
 80365f2:	2500      	movs	r5, #0
 80365f4:	4628      	mov	r0, r5
 80365f6:	bd38      	pop	{r3, r4, r5, pc}
 80365f8:	b118      	cbz	r0, 8036602 <_fflush_r+0x1a>
 80365fa:	6a03      	ldr	r3, [r0, #32]
 80365fc:	b90b      	cbnz	r3, 8036602 <_fflush_r+0x1a>
 80365fe:	f7fd fb93 	bl	8033d28 <__sinit>
 8036602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8036606:	2b00      	cmp	r3, #0
 8036608:	d0f3      	beq.n	80365f2 <_fflush_r+0xa>
 803660a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 803660c:	07d0      	lsls	r0, r2, #31
 803660e:	d404      	bmi.n	803661a <_fflush_r+0x32>
 8036610:	0599      	lsls	r1, r3, #22
 8036612:	d402      	bmi.n	803661a <_fflush_r+0x32>
 8036614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8036616:	f7fd fcdc 	bl	8033fd2 <__retarget_lock_acquire_recursive>
 803661a:	4628      	mov	r0, r5
 803661c:	4621      	mov	r1, r4
 803661e:	f7ff ff5f 	bl	80364e0 <__sflush_r>
 8036622:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8036624:	07da      	lsls	r2, r3, #31
 8036626:	4605      	mov	r5, r0
 8036628:	d4e4      	bmi.n	80365f4 <_fflush_r+0xc>
 803662a:	89a3      	ldrh	r3, [r4, #12]
 803662c:	059b      	lsls	r3, r3, #22
 803662e:	d4e1      	bmi.n	80365f4 <_fflush_r+0xc>
 8036630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8036632:	f7fd fccf 	bl	8033fd4 <__retarget_lock_release_recursive>
 8036636:	e7dd      	b.n	80365f4 <_fflush_r+0xc>

08036638 <nan>:
 8036638:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8036640 <nan+0x8>
 803663c:	4770      	bx	lr
 803663e:	bf00      	nop
 8036640:	00000000 	.word	0x00000000
 8036644:	7ff80000 	.word	0x7ff80000

08036648 <__assert_func>:
 8036648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 803664a:	4614      	mov	r4, r2
 803664c:	461a      	mov	r2, r3
 803664e:	4b09      	ldr	r3, [pc, #36]	@ (8036674 <__assert_func+0x2c>)
 8036650:	681b      	ldr	r3, [r3, #0]
 8036652:	4605      	mov	r5, r0
 8036654:	68d8      	ldr	r0, [r3, #12]
 8036656:	b14c      	cbz	r4, 803666c <__assert_func+0x24>
 8036658:	4b07      	ldr	r3, [pc, #28]	@ (8036678 <__assert_func+0x30>)
 803665a:	9100      	str	r1, [sp, #0]
 803665c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8036660:	4906      	ldr	r1, [pc, #24]	@ (803667c <__assert_func+0x34>)
 8036662:	462b      	mov	r3, r5
 8036664:	f000 fb7a 	bl	8036d5c <fiprintf>
 8036668:	f000 fb8a 	bl	8036d80 <abort>
 803666c:	4b04      	ldr	r3, [pc, #16]	@ (8036680 <__assert_func+0x38>)
 803666e:	461c      	mov	r4, r3
 8036670:	e7f3      	b.n	803665a <__assert_func+0x12>
 8036672:	bf00      	nop
 8036674:	240023e8 	.word	0x240023e8
 8036678:	080727d2 	.word	0x080727d2
 803667c:	080727df 	.word	0x080727df
 8036680:	0807280d 	.word	0x0807280d

08036684 <_calloc_r>:
 8036684:	b570      	push	{r4, r5, r6, lr}
 8036686:	fba1 5402 	umull	r5, r4, r1, r2
 803668a:	b934      	cbnz	r4, 803669a <_calloc_r+0x16>
 803668c:	4629      	mov	r1, r5
 803668e:	f7fc fbc9 	bl	8032e24 <_malloc_r>
 8036692:	4606      	mov	r6, r0
 8036694:	b928      	cbnz	r0, 80366a2 <_calloc_r+0x1e>
 8036696:	4630      	mov	r0, r6
 8036698:	bd70      	pop	{r4, r5, r6, pc}
 803669a:	220c      	movs	r2, #12
 803669c:	6002      	str	r2, [r0, #0]
 803669e:	2600      	movs	r6, #0
 80366a0:	e7f9      	b.n	8036696 <_calloc_r+0x12>
 80366a2:	462a      	mov	r2, r5
 80366a4:	4621      	mov	r1, r4
 80366a6:	f7fd fbf4 	bl	8033e92 <memset>
 80366aa:	e7f4      	b.n	8036696 <_calloc_r+0x12>

080366ac <rshift>:
 80366ac:	6903      	ldr	r3, [r0, #16]
 80366ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80366b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80366b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80366ba:	f100 0414 	add.w	r4, r0, #20
 80366be:	dd45      	ble.n	803674c <rshift+0xa0>
 80366c0:	f011 011f 	ands.w	r1, r1, #31
 80366c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80366c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80366cc:	d10c      	bne.n	80366e8 <rshift+0x3c>
 80366ce:	f100 0710 	add.w	r7, r0, #16
 80366d2:	4629      	mov	r1, r5
 80366d4:	42b1      	cmp	r1, r6
 80366d6:	d334      	bcc.n	8036742 <rshift+0x96>
 80366d8:	1a9b      	subs	r3, r3, r2
 80366da:	009b      	lsls	r3, r3, #2
 80366dc:	1eea      	subs	r2, r5, #3
 80366de:	4296      	cmp	r6, r2
 80366e0:	bf38      	it	cc
 80366e2:	2300      	movcc	r3, #0
 80366e4:	4423      	add	r3, r4
 80366e6:	e015      	b.n	8036714 <rshift+0x68>
 80366e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80366ec:	f1c1 0820 	rsb	r8, r1, #32
 80366f0:	40cf      	lsrs	r7, r1
 80366f2:	f105 0e04 	add.w	lr, r5, #4
 80366f6:	46a1      	mov	r9, r4
 80366f8:	4576      	cmp	r6, lr
 80366fa:	46f4      	mov	ip, lr
 80366fc:	d815      	bhi.n	803672a <rshift+0x7e>
 80366fe:	1a9a      	subs	r2, r3, r2
 8036700:	0092      	lsls	r2, r2, #2
 8036702:	3a04      	subs	r2, #4
 8036704:	3501      	adds	r5, #1
 8036706:	42ae      	cmp	r6, r5
 8036708:	bf38      	it	cc
 803670a:	2200      	movcc	r2, #0
 803670c:	18a3      	adds	r3, r4, r2
 803670e:	50a7      	str	r7, [r4, r2]
 8036710:	b107      	cbz	r7, 8036714 <rshift+0x68>
 8036712:	3304      	adds	r3, #4
 8036714:	1b1a      	subs	r2, r3, r4
 8036716:	42a3      	cmp	r3, r4
 8036718:	ea4f 02a2 	mov.w	r2, r2, asr #2
 803671c:	bf08      	it	eq
 803671e:	2300      	moveq	r3, #0
 8036720:	6102      	str	r2, [r0, #16]
 8036722:	bf08      	it	eq
 8036724:	6143      	streq	r3, [r0, #20]
 8036726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803672a:	f8dc c000 	ldr.w	ip, [ip]
 803672e:	fa0c fc08 	lsl.w	ip, ip, r8
 8036732:	ea4c 0707 	orr.w	r7, ip, r7
 8036736:	f849 7b04 	str.w	r7, [r9], #4
 803673a:	f85e 7b04 	ldr.w	r7, [lr], #4
 803673e:	40cf      	lsrs	r7, r1
 8036740:	e7da      	b.n	80366f8 <rshift+0x4c>
 8036742:	f851 cb04 	ldr.w	ip, [r1], #4
 8036746:	f847 cf04 	str.w	ip, [r7, #4]!
 803674a:	e7c3      	b.n	80366d4 <rshift+0x28>
 803674c:	4623      	mov	r3, r4
 803674e:	e7e1      	b.n	8036714 <rshift+0x68>

08036750 <__hexdig_fun>:
 8036750:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8036754:	2b09      	cmp	r3, #9
 8036756:	d802      	bhi.n	803675e <__hexdig_fun+0xe>
 8036758:	3820      	subs	r0, #32
 803675a:	b2c0      	uxtb	r0, r0
 803675c:	4770      	bx	lr
 803675e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8036762:	2b05      	cmp	r3, #5
 8036764:	d801      	bhi.n	803676a <__hexdig_fun+0x1a>
 8036766:	3847      	subs	r0, #71	@ 0x47
 8036768:	e7f7      	b.n	803675a <__hexdig_fun+0xa>
 803676a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 803676e:	2b05      	cmp	r3, #5
 8036770:	d801      	bhi.n	8036776 <__hexdig_fun+0x26>
 8036772:	3827      	subs	r0, #39	@ 0x27
 8036774:	e7f1      	b.n	803675a <__hexdig_fun+0xa>
 8036776:	2000      	movs	r0, #0
 8036778:	4770      	bx	lr
	...

0803677c <__gethex>:
 803677c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8036780:	b085      	sub	sp, #20
 8036782:	468a      	mov	sl, r1
 8036784:	9302      	str	r3, [sp, #8]
 8036786:	680b      	ldr	r3, [r1, #0]
 8036788:	9001      	str	r0, [sp, #4]
 803678a:	4690      	mov	r8, r2
 803678c:	1c9c      	adds	r4, r3, #2
 803678e:	46a1      	mov	r9, r4
 8036790:	f814 0b01 	ldrb.w	r0, [r4], #1
 8036794:	2830      	cmp	r0, #48	@ 0x30
 8036796:	d0fa      	beq.n	803678e <__gethex+0x12>
 8036798:	eba9 0303 	sub.w	r3, r9, r3
 803679c:	f1a3 0b02 	sub.w	fp, r3, #2
 80367a0:	f7ff ffd6 	bl	8036750 <__hexdig_fun>
 80367a4:	4605      	mov	r5, r0
 80367a6:	2800      	cmp	r0, #0
 80367a8:	d168      	bne.n	803687c <__gethex+0x100>
 80367aa:	49a0      	ldr	r1, [pc, #640]	@ (8036a2c <__gethex+0x2b0>)
 80367ac:	2201      	movs	r2, #1
 80367ae:	4648      	mov	r0, r9
 80367b0:	f7fd fb77 	bl	8033ea2 <strncmp>
 80367b4:	4607      	mov	r7, r0
 80367b6:	2800      	cmp	r0, #0
 80367b8:	d167      	bne.n	803688a <__gethex+0x10e>
 80367ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 80367be:	4626      	mov	r6, r4
 80367c0:	f7ff ffc6 	bl	8036750 <__hexdig_fun>
 80367c4:	2800      	cmp	r0, #0
 80367c6:	d062      	beq.n	803688e <__gethex+0x112>
 80367c8:	4623      	mov	r3, r4
 80367ca:	7818      	ldrb	r0, [r3, #0]
 80367cc:	2830      	cmp	r0, #48	@ 0x30
 80367ce:	4699      	mov	r9, r3
 80367d0:	f103 0301 	add.w	r3, r3, #1
 80367d4:	d0f9      	beq.n	80367ca <__gethex+0x4e>
 80367d6:	f7ff ffbb 	bl	8036750 <__hexdig_fun>
 80367da:	fab0 f580 	clz	r5, r0
 80367de:	096d      	lsrs	r5, r5, #5
 80367e0:	f04f 0b01 	mov.w	fp, #1
 80367e4:	464a      	mov	r2, r9
 80367e6:	4616      	mov	r6, r2
 80367e8:	3201      	adds	r2, #1
 80367ea:	7830      	ldrb	r0, [r6, #0]
 80367ec:	f7ff ffb0 	bl	8036750 <__hexdig_fun>
 80367f0:	2800      	cmp	r0, #0
 80367f2:	d1f8      	bne.n	80367e6 <__gethex+0x6a>
 80367f4:	498d      	ldr	r1, [pc, #564]	@ (8036a2c <__gethex+0x2b0>)
 80367f6:	2201      	movs	r2, #1
 80367f8:	4630      	mov	r0, r6
 80367fa:	f7fd fb52 	bl	8033ea2 <strncmp>
 80367fe:	2800      	cmp	r0, #0
 8036800:	d13f      	bne.n	8036882 <__gethex+0x106>
 8036802:	b944      	cbnz	r4, 8036816 <__gethex+0x9a>
 8036804:	1c74      	adds	r4, r6, #1
 8036806:	4622      	mov	r2, r4
 8036808:	4616      	mov	r6, r2
 803680a:	3201      	adds	r2, #1
 803680c:	7830      	ldrb	r0, [r6, #0]
 803680e:	f7ff ff9f 	bl	8036750 <__hexdig_fun>
 8036812:	2800      	cmp	r0, #0
 8036814:	d1f8      	bne.n	8036808 <__gethex+0x8c>
 8036816:	1ba4      	subs	r4, r4, r6
 8036818:	00a7      	lsls	r7, r4, #2
 803681a:	7833      	ldrb	r3, [r6, #0]
 803681c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8036820:	2b50      	cmp	r3, #80	@ 0x50
 8036822:	d13e      	bne.n	80368a2 <__gethex+0x126>
 8036824:	7873      	ldrb	r3, [r6, #1]
 8036826:	2b2b      	cmp	r3, #43	@ 0x2b
 8036828:	d033      	beq.n	8036892 <__gethex+0x116>
 803682a:	2b2d      	cmp	r3, #45	@ 0x2d
 803682c:	d034      	beq.n	8036898 <__gethex+0x11c>
 803682e:	1c71      	adds	r1, r6, #1
 8036830:	2400      	movs	r4, #0
 8036832:	7808      	ldrb	r0, [r1, #0]
 8036834:	f7ff ff8c 	bl	8036750 <__hexdig_fun>
 8036838:	1e43      	subs	r3, r0, #1
 803683a:	b2db      	uxtb	r3, r3
 803683c:	2b18      	cmp	r3, #24
 803683e:	d830      	bhi.n	80368a2 <__gethex+0x126>
 8036840:	f1a0 0210 	sub.w	r2, r0, #16
 8036844:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8036848:	f7ff ff82 	bl	8036750 <__hexdig_fun>
 803684c:	f100 3cff 	add.w	ip, r0, #4294967295
 8036850:	fa5f fc8c 	uxtb.w	ip, ip
 8036854:	f1bc 0f18 	cmp.w	ip, #24
 8036858:	f04f 030a 	mov.w	r3, #10
 803685c:	d91e      	bls.n	803689c <__gethex+0x120>
 803685e:	b104      	cbz	r4, 8036862 <__gethex+0xe6>
 8036860:	4252      	negs	r2, r2
 8036862:	4417      	add	r7, r2
 8036864:	f8ca 1000 	str.w	r1, [sl]
 8036868:	b1ed      	cbz	r5, 80368a6 <__gethex+0x12a>
 803686a:	f1bb 0f00 	cmp.w	fp, #0
 803686e:	bf0c      	ite	eq
 8036870:	2506      	moveq	r5, #6
 8036872:	2500      	movne	r5, #0
 8036874:	4628      	mov	r0, r5
 8036876:	b005      	add	sp, #20
 8036878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803687c:	2500      	movs	r5, #0
 803687e:	462c      	mov	r4, r5
 8036880:	e7b0      	b.n	80367e4 <__gethex+0x68>
 8036882:	2c00      	cmp	r4, #0
 8036884:	d1c7      	bne.n	8036816 <__gethex+0x9a>
 8036886:	4627      	mov	r7, r4
 8036888:	e7c7      	b.n	803681a <__gethex+0x9e>
 803688a:	464e      	mov	r6, r9
 803688c:	462f      	mov	r7, r5
 803688e:	2501      	movs	r5, #1
 8036890:	e7c3      	b.n	803681a <__gethex+0x9e>
 8036892:	2400      	movs	r4, #0
 8036894:	1cb1      	adds	r1, r6, #2
 8036896:	e7cc      	b.n	8036832 <__gethex+0xb6>
 8036898:	2401      	movs	r4, #1
 803689a:	e7fb      	b.n	8036894 <__gethex+0x118>
 803689c:	fb03 0002 	mla	r0, r3, r2, r0
 80368a0:	e7ce      	b.n	8036840 <__gethex+0xc4>
 80368a2:	4631      	mov	r1, r6
 80368a4:	e7de      	b.n	8036864 <__gethex+0xe8>
 80368a6:	eba6 0309 	sub.w	r3, r6, r9
 80368aa:	3b01      	subs	r3, #1
 80368ac:	4629      	mov	r1, r5
 80368ae:	2b07      	cmp	r3, #7
 80368b0:	dc0a      	bgt.n	80368c8 <__gethex+0x14c>
 80368b2:	9801      	ldr	r0, [sp, #4]
 80368b4:	f7fe f9d4 	bl	8034c60 <_Balloc>
 80368b8:	4604      	mov	r4, r0
 80368ba:	b940      	cbnz	r0, 80368ce <__gethex+0x152>
 80368bc:	4b5c      	ldr	r3, [pc, #368]	@ (8036a30 <__gethex+0x2b4>)
 80368be:	4602      	mov	r2, r0
 80368c0:	21e4      	movs	r1, #228	@ 0xe4
 80368c2:	485c      	ldr	r0, [pc, #368]	@ (8036a34 <__gethex+0x2b8>)
 80368c4:	f7ff fec0 	bl	8036648 <__assert_func>
 80368c8:	3101      	adds	r1, #1
 80368ca:	105b      	asrs	r3, r3, #1
 80368cc:	e7ef      	b.n	80368ae <__gethex+0x132>
 80368ce:	f100 0a14 	add.w	sl, r0, #20
 80368d2:	2300      	movs	r3, #0
 80368d4:	4655      	mov	r5, sl
 80368d6:	469b      	mov	fp, r3
 80368d8:	45b1      	cmp	r9, r6
 80368da:	d337      	bcc.n	803694c <__gethex+0x1d0>
 80368dc:	f845 bb04 	str.w	fp, [r5], #4
 80368e0:	eba5 050a 	sub.w	r5, r5, sl
 80368e4:	10ad      	asrs	r5, r5, #2
 80368e6:	6125      	str	r5, [r4, #16]
 80368e8:	4658      	mov	r0, fp
 80368ea:	f7fe faab 	bl	8034e44 <__hi0bits>
 80368ee:	016d      	lsls	r5, r5, #5
 80368f0:	f8d8 6000 	ldr.w	r6, [r8]
 80368f4:	1a2d      	subs	r5, r5, r0
 80368f6:	42b5      	cmp	r5, r6
 80368f8:	dd54      	ble.n	80369a4 <__gethex+0x228>
 80368fa:	1bad      	subs	r5, r5, r6
 80368fc:	4629      	mov	r1, r5
 80368fe:	4620      	mov	r0, r4
 8036900:	f7fe fe34 	bl	803556c <__any_on>
 8036904:	4681      	mov	r9, r0
 8036906:	b178      	cbz	r0, 8036928 <__gethex+0x1ac>
 8036908:	1e6b      	subs	r3, r5, #1
 803690a:	1159      	asrs	r1, r3, #5
 803690c:	f003 021f 	and.w	r2, r3, #31
 8036910:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8036914:	f04f 0901 	mov.w	r9, #1
 8036918:	fa09 f202 	lsl.w	r2, r9, r2
 803691c:	420a      	tst	r2, r1
 803691e:	d003      	beq.n	8036928 <__gethex+0x1ac>
 8036920:	454b      	cmp	r3, r9
 8036922:	dc36      	bgt.n	8036992 <__gethex+0x216>
 8036924:	f04f 0902 	mov.w	r9, #2
 8036928:	4629      	mov	r1, r5
 803692a:	4620      	mov	r0, r4
 803692c:	f7ff febe 	bl	80366ac <rshift>
 8036930:	442f      	add	r7, r5
 8036932:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8036936:	42bb      	cmp	r3, r7
 8036938:	da42      	bge.n	80369c0 <__gethex+0x244>
 803693a:	9801      	ldr	r0, [sp, #4]
 803693c:	4621      	mov	r1, r4
 803693e:	f7fe f9cf 	bl	8034ce0 <_Bfree>
 8036942:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8036944:	2300      	movs	r3, #0
 8036946:	6013      	str	r3, [r2, #0]
 8036948:	25a3      	movs	r5, #163	@ 0xa3
 803694a:	e793      	b.n	8036874 <__gethex+0xf8>
 803694c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8036950:	2a2e      	cmp	r2, #46	@ 0x2e
 8036952:	d012      	beq.n	803697a <__gethex+0x1fe>
 8036954:	2b20      	cmp	r3, #32
 8036956:	d104      	bne.n	8036962 <__gethex+0x1e6>
 8036958:	f845 bb04 	str.w	fp, [r5], #4
 803695c:	f04f 0b00 	mov.w	fp, #0
 8036960:	465b      	mov	r3, fp
 8036962:	7830      	ldrb	r0, [r6, #0]
 8036964:	9303      	str	r3, [sp, #12]
 8036966:	f7ff fef3 	bl	8036750 <__hexdig_fun>
 803696a:	9b03      	ldr	r3, [sp, #12]
 803696c:	f000 000f 	and.w	r0, r0, #15
 8036970:	4098      	lsls	r0, r3
 8036972:	ea4b 0b00 	orr.w	fp, fp, r0
 8036976:	3304      	adds	r3, #4
 8036978:	e7ae      	b.n	80368d8 <__gethex+0x15c>
 803697a:	45b1      	cmp	r9, r6
 803697c:	d8ea      	bhi.n	8036954 <__gethex+0x1d8>
 803697e:	492b      	ldr	r1, [pc, #172]	@ (8036a2c <__gethex+0x2b0>)
 8036980:	9303      	str	r3, [sp, #12]
 8036982:	2201      	movs	r2, #1
 8036984:	4630      	mov	r0, r6
 8036986:	f7fd fa8c 	bl	8033ea2 <strncmp>
 803698a:	9b03      	ldr	r3, [sp, #12]
 803698c:	2800      	cmp	r0, #0
 803698e:	d1e1      	bne.n	8036954 <__gethex+0x1d8>
 8036990:	e7a2      	b.n	80368d8 <__gethex+0x15c>
 8036992:	1ea9      	subs	r1, r5, #2
 8036994:	4620      	mov	r0, r4
 8036996:	f7fe fde9 	bl	803556c <__any_on>
 803699a:	2800      	cmp	r0, #0
 803699c:	d0c2      	beq.n	8036924 <__gethex+0x1a8>
 803699e:	f04f 0903 	mov.w	r9, #3
 80369a2:	e7c1      	b.n	8036928 <__gethex+0x1ac>
 80369a4:	da09      	bge.n	80369ba <__gethex+0x23e>
 80369a6:	1b75      	subs	r5, r6, r5
 80369a8:	4621      	mov	r1, r4
 80369aa:	9801      	ldr	r0, [sp, #4]
 80369ac:	462a      	mov	r2, r5
 80369ae:	f7fe fba7 	bl	8035100 <__lshift>
 80369b2:	1b7f      	subs	r7, r7, r5
 80369b4:	4604      	mov	r4, r0
 80369b6:	f100 0a14 	add.w	sl, r0, #20
 80369ba:	f04f 0900 	mov.w	r9, #0
 80369be:	e7b8      	b.n	8036932 <__gethex+0x1b6>
 80369c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80369c4:	42bd      	cmp	r5, r7
 80369c6:	dd6f      	ble.n	8036aa8 <__gethex+0x32c>
 80369c8:	1bed      	subs	r5, r5, r7
 80369ca:	42ae      	cmp	r6, r5
 80369cc:	dc34      	bgt.n	8036a38 <__gethex+0x2bc>
 80369ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80369d2:	2b02      	cmp	r3, #2
 80369d4:	d022      	beq.n	8036a1c <__gethex+0x2a0>
 80369d6:	2b03      	cmp	r3, #3
 80369d8:	d024      	beq.n	8036a24 <__gethex+0x2a8>
 80369da:	2b01      	cmp	r3, #1
 80369dc:	d115      	bne.n	8036a0a <__gethex+0x28e>
 80369de:	42ae      	cmp	r6, r5
 80369e0:	d113      	bne.n	8036a0a <__gethex+0x28e>
 80369e2:	2e01      	cmp	r6, #1
 80369e4:	d10b      	bne.n	80369fe <__gethex+0x282>
 80369e6:	9a02      	ldr	r2, [sp, #8]
 80369e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80369ec:	6013      	str	r3, [r2, #0]
 80369ee:	2301      	movs	r3, #1
 80369f0:	6123      	str	r3, [r4, #16]
 80369f2:	f8ca 3000 	str.w	r3, [sl]
 80369f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80369f8:	2562      	movs	r5, #98	@ 0x62
 80369fa:	601c      	str	r4, [r3, #0]
 80369fc:	e73a      	b.n	8036874 <__gethex+0xf8>
 80369fe:	1e71      	subs	r1, r6, #1
 8036a00:	4620      	mov	r0, r4
 8036a02:	f7fe fdb3 	bl	803556c <__any_on>
 8036a06:	2800      	cmp	r0, #0
 8036a08:	d1ed      	bne.n	80369e6 <__gethex+0x26a>
 8036a0a:	9801      	ldr	r0, [sp, #4]
 8036a0c:	4621      	mov	r1, r4
 8036a0e:	f7fe f967 	bl	8034ce0 <_Bfree>
 8036a12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8036a14:	2300      	movs	r3, #0
 8036a16:	6013      	str	r3, [r2, #0]
 8036a18:	2550      	movs	r5, #80	@ 0x50
 8036a1a:	e72b      	b.n	8036874 <__gethex+0xf8>
 8036a1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8036a1e:	2b00      	cmp	r3, #0
 8036a20:	d1f3      	bne.n	8036a0a <__gethex+0x28e>
 8036a22:	e7e0      	b.n	80369e6 <__gethex+0x26a>
 8036a24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8036a26:	2b00      	cmp	r3, #0
 8036a28:	d1dd      	bne.n	80369e6 <__gethex+0x26a>
 8036a2a:	e7ee      	b.n	8036a0a <__gethex+0x28e>
 8036a2c:	080727b7 	.word	0x080727b7
 8036a30:	0807274d 	.word	0x0807274d
 8036a34:	0807280e 	.word	0x0807280e
 8036a38:	1e6f      	subs	r7, r5, #1
 8036a3a:	f1b9 0f00 	cmp.w	r9, #0
 8036a3e:	d130      	bne.n	8036aa2 <__gethex+0x326>
 8036a40:	b127      	cbz	r7, 8036a4c <__gethex+0x2d0>
 8036a42:	4639      	mov	r1, r7
 8036a44:	4620      	mov	r0, r4
 8036a46:	f7fe fd91 	bl	803556c <__any_on>
 8036a4a:	4681      	mov	r9, r0
 8036a4c:	117a      	asrs	r2, r7, #5
 8036a4e:	2301      	movs	r3, #1
 8036a50:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8036a54:	f007 071f 	and.w	r7, r7, #31
 8036a58:	40bb      	lsls	r3, r7
 8036a5a:	4213      	tst	r3, r2
 8036a5c:	4629      	mov	r1, r5
 8036a5e:	4620      	mov	r0, r4
 8036a60:	bf18      	it	ne
 8036a62:	f049 0902 	orrne.w	r9, r9, #2
 8036a66:	f7ff fe21 	bl	80366ac <rshift>
 8036a6a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8036a6e:	1b76      	subs	r6, r6, r5
 8036a70:	2502      	movs	r5, #2
 8036a72:	f1b9 0f00 	cmp.w	r9, #0
 8036a76:	d047      	beq.n	8036b08 <__gethex+0x38c>
 8036a78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8036a7c:	2b02      	cmp	r3, #2
 8036a7e:	d015      	beq.n	8036aac <__gethex+0x330>
 8036a80:	2b03      	cmp	r3, #3
 8036a82:	d017      	beq.n	8036ab4 <__gethex+0x338>
 8036a84:	2b01      	cmp	r3, #1
 8036a86:	d109      	bne.n	8036a9c <__gethex+0x320>
 8036a88:	f019 0f02 	tst.w	r9, #2
 8036a8c:	d006      	beq.n	8036a9c <__gethex+0x320>
 8036a8e:	f8da 3000 	ldr.w	r3, [sl]
 8036a92:	ea49 0903 	orr.w	r9, r9, r3
 8036a96:	f019 0f01 	tst.w	r9, #1
 8036a9a:	d10e      	bne.n	8036aba <__gethex+0x33e>
 8036a9c:	f045 0510 	orr.w	r5, r5, #16
 8036aa0:	e032      	b.n	8036b08 <__gethex+0x38c>
 8036aa2:	f04f 0901 	mov.w	r9, #1
 8036aa6:	e7d1      	b.n	8036a4c <__gethex+0x2d0>
 8036aa8:	2501      	movs	r5, #1
 8036aaa:	e7e2      	b.n	8036a72 <__gethex+0x2f6>
 8036aac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8036aae:	f1c3 0301 	rsb	r3, r3, #1
 8036ab2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8036ab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8036ab6:	2b00      	cmp	r3, #0
 8036ab8:	d0f0      	beq.n	8036a9c <__gethex+0x320>
 8036aba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8036abe:	f104 0314 	add.w	r3, r4, #20
 8036ac2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8036ac6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8036aca:	f04f 0c00 	mov.w	ip, #0
 8036ace:	4618      	mov	r0, r3
 8036ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8036ad4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8036ad8:	d01b      	beq.n	8036b12 <__gethex+0x396>
 8036ada:	3201      	adds	r2, #1
 8036adc:	6002      	str	r2, [r0, #0]
 8036ade:	2d02      	cmp	r5, #2
 8036ae0:	f104 0314 	add.w	r3, r4, #20
 8036ae4:	d13c      	bne.n	8036b60 <__gethex+0x3e4>
 8036ae6:	f8d8 2000 	ldr.w	r2, [r8]
 8036aea:	3a01      	subs	r2, #1
 8036aec:	42b2      	cmp	r2, r6
 8036aee:	d109      	bne.n	8036b04 <__gethex+0x388>
 8036af0:	1171      	asrs	r1, r6, #5
 8036af2:	2201      	movs	r2, #1
 8036af4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8036af8:	f006 061f 	and.w	r6, r6, #31
 8036afc:	fa02 f606 	lsl.w	r6, r2, r6
 8036b00:	421e      	tst	r6, r3
 8036b02:	d13a      	bne.n	8036b7a <__gethex+0x3fe>
 8036b04:	f045 0520 	orr.w	r5, r5, #32
 8036b08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8036b0a:	601c      	str	r4, [r3, #0]
 8036b0c:	9b02      	ldr	r3, [sp, #8]
 8036b0e:	601f      	str	r7, [r3, #0]
 8036b10:	e6b0      	b.n	8036874 <__gethex+0xf8>
 8036b12:	4299      	cmp	r1, r3
 8036b14:	f843 cc04 	str.w	ip, [r3, #-4]
 8036b18:	d8d9      	bhi.n	8036ace <__gethex+0x352>
 8036b1a:	68a3      	ldr	r3, [r4, #8]
 8036b1c:	459b      	cmp	fp, r3
 8036b1e:	db17      	blt.n	8036b50 <__gethex+0x3d4>
 8036b20:	6861      	ldr	r1, [r4, #4]
 8036b22:	9801      	ldr	r0, [sp, #4]
 8036b24:	3101      	adds	r1, #1
 8036b26:	f7fe f89b 	bl	8034c60 <_Balloc>
 8036b2a:	4681      	mov	r9, r0
 8036b2c:	b918      	cbnz	r0, 8036b36 <__gethex+0x3ba>
 8036b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8036b98 <__gethex+0x41c>)
 8036b30:	4602      	mov	r2, r0
 8036b32:	2184      	movs	r1, #132	@ 0x84
 8036b34:	e6c5      	b.n	80368c2 <__gethex+0x146>
 8036b36:	6922      	ldr	r2, [r4, #16]
 8036b38:	3202      	adds	r2, #2
 8036b3a:	f104 010c 	add.w	r1, r4, #12
 8036b3e:	0092      	lsls	r2, r2, #2
 8036b40:	300c      	adds	r0, #12
 8036b42:	f7fd fa48 	bl	8033fd6 <memcpy>
 8036b46:	4621      	mov	r1, r4
 8036b48:	9801      	ldr	r0, [sp, #4]
 8036b4a:	f7fe f8c9 	bl	8034ce0 <_Bfree>
 8036b4e:	464c      	mov	r4, r9
 8036b50:	6923      	ldr	r3, [r4, #16]
 8036b52:	1c5a      	adds	r2, r3, #1
 8036b54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8036b58:	6122      	str	r2, [r4, #16]
 8036b5a:	2201      	movs	r2, #1
 8036b5c:	615a      	str	r2, [r3, #20]
 8036b5e:	e7be      	b.n	8036ade <__gethex+0x362>
 8036b60:	6922      	ldr	r2, [r4, #16]
 8036b62:	455a      	cmp	r2, fp
 8036b64:	dd0b      	ble.n	8036b7e <__gethex+0x402>
 8036b66:	2101      	movs	r1, #1
 8036b68:	4620      	mov	r0, r4
 8036b6a:	f7ff fd9f 	bl	80366ac <rshift>
 8036b6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8036b72:	3701      	adds	r7, #1
 8036b74:	42bb      	cmp	r3, r7
 8036b76:	f6ff aee0 	blt.w	803693a <__gethex+0x1be>
 8036b7a:	2501      	movs	r5, #1
 8036b7c:	e7c2      	b.n	8036b04 <__gethex+0x388>
 8036b7e:	f016 061f 	ands.w	r6, r6, #31
 8036b82:	d0fa      	beq.n	8036b7a <__gethex+0x3fe>
 8036b84:	4453      	add	r3, sl
 8036b86:	f1c6 0620 	rsb	r6, r6, #32
 8036b8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8036b8e:	f7fe f959 	bl	8034e44 <__hi0bits>
 8036b92:	42b0      	cmp	r0, r6
 8036b94:	dbe7      	blt.n	8036b66 <__gethex+0x3ea>
 8036b96:	e7f0      	b.n	8036b7a <__gethex+0x3fe>
 8036b98:	0807274d 	.word	0x0807274d

08036b9c <L_shift>:
 8036b9c:	f1c2 0208 	rsb	r2, r2, #8
 8036ba0:	0092      	lsls	r2, r2, #2
 8036ba2:	b570      	push	{r4, r5, r6, lr}
 8036ba4:	f1c2 0620 	rsb	r6, r2, #32
 8036ba8:	6843      	ldr	r3, [r0, #4]
 8036baa:	6804      	ldr	r4, [r0, #0]
 8036bac:	fa03 f506 	lsl.w	r5, r3, r6
 8036bb0:	432c      	orrs	r4, r5
 8036bb2:	40d3      	lsrs	r3, r2
 8036bb4:	6004      	str	r4, [r0, #0]
 8036bb6:	f840 3f04 	str.w	r3, [r0, #4]!
 8036bba:	4288      	cmp	r0, r1
 8036bbc:	d3f4      	bcc.n	8036ba8 <L_shift+0xc>
 8036bbe:	bd70      	pop	{r4, r5, r6, pc}

08036bc0 <__match>:
 8036bc0:	b530      	push	{r4, r5, lr}
 8036bc2:	6803      	ldr	r3, [r0, #0]
 8036bc4:	3301      	adds	r3, #1
 8036bc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8036bca:	b914      	cbnz	r4, 8036bd2 <__match+0x12>
 8036bcc:	6003      	str	r3, [r0, #0]
 8036bce:	2001      	movs	r0, #1
 8036bd0:	bd30      	pop	{r4, r5, pc}
 8036bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8036bd6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8036bda:	2d19      	cmp	r5, #25
 8036bdc:	bf98      	it	ls
 8036bde:	3220      	addls	r2, #32
 8036be0:	42a2      	cmp	r2, r4
 8036be2:	d0f0      	beq.n	8036bc6 <__match+0x6>
 8036be4:	2000      	movs	r0, #0
 8036be6:	e7f3      	b.n	8036bd0 <__match+0x10>

08036be8 <__hexnan>:
 8036be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8036bec:	680b      	ldr	r3, [r1, #0]
 8036bee:	6801      	ldr	r1, [r0, #0]
 8036bf0:	115e      	asrs	r6, r3, #5
 8036bf2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8036bf6:	f013 031f 	ands.w	r3, r3, #31
 8036bfa:	b087      	sub	sp, #28
 8036bfc:	bf18      	it	ne
 8036bfe:	3604      	addne	r6, #4
 8036c00:	2500      	movs	r5, #0
 8036c02:	1f37      	subs	r7, r6, #4
 8036c04:	4682      	mov	sl, r0
 8036c06:	4690      	mov	r8, r2
 8036c08:	9301      	str	r3, [sp, #4]
 8036c0a:	f846 5c04 	str.w	r5, [r6, #-4]
 8036c0e:	46b9      	mov	r9, r7
 8036c10:	463c      	mov	r4, r7
 8036c12:	9502      	str	r5, [sp, #8]
 8036c14:	46ab      	mov	fp, r5
 8036c16:	784a      	ldrb	r2, [r1, #1]
 8036c18:	1c4b      	adds	r3, r1, #1
 8036c1a:	9303      	str	r3, [sp, #12]
 8036c1c:	b342      	cbz	r2, 8036c70 <__hexnan+0x88>
 8036c1e:	4610      	mov	r0, r2
 8036c20:	9105      	str	r1, [sp, #20]
 8036c22:	9204      	str	r2, [sp, #16]
 8036c24:	f7ff fd94 	bl	8036750 <__hexdig_fun>
 8036c28:	2800      	cmp	r0, #0
 8036c2a:	d151      	bne.n	8036cd0 <__hexnan+0xe8>
 8036c2c:	9a04      	ldr	r2, [sp, #16]
 8036c2e:	9905      	ldr	r1, [sp, #20]
 8036c30:	2a20      	cmp	r2, #32
 8036c32:	d818      	bhi.n	8036c66 <__hexnan+0x7e>
 8036c34:	9b02      	ldr	r3, [sp, #8]
 8036c36:	459b      	cmp	fp, r3
 8036c38:	dd13      	ble.n	8036c62 <__hexnan+0x7a>
 8036c3a:	454c      	cmp	r4, r9
 8036c3c:	d206      	bcs.n	8036c4c <__hexnan+0x64>
 8036c3e:	2d07      	cmp	r5, #7
 8036c40:	dc04      	bgt.n	8036c4c <__hexnan+0x64>
 8036c42:	462a      	mov	r2, r5
 8036c44:	4649      	mov	r1, r9
 8036c46:	4620      	mov	r0, r4
 8036c48:	f7ff ffa8 	bl	8036b9c <L_shift>
 8036c4c:	4544      	cmp	r4, r8
 8036c4e:	d952      	bls.n	8036cf6 <__hexnan+0x10e>
 8036c50:	2300      	movs	r3, #0
 8036c52:	f1a4 0904 	sub.w	r9, r4, #4
 8036c56:	f844 3c04 	str.w	r3, [r4, #-4]
 8036c5a:	f8cd b008 	str.w	fp, [sp, #8]
 8036c5e:	464c      	mov	r4, r9
 8036c60:	461d      	mov	r5, r3
 8036c62:	9903      	ldr	r1, [sp, #12]
 8036c64:	e7d7      	b.n	8036c16 <__hexnan+0x2e>
 8036c66:	2a29      	cmp	r2, #41	@ 0x29
 8036c68:	d157      	bne.n	8036d1a <__hexnan+0x132>
 8036c6a:	3102      	adds	r1, #2
 8036c6c:	f8ca 1000 	str.w	r1, [sl]
 8036c70:	f1bb 0f00 	cmp.w	fp, #0
 8036c74:	d051      	beq.n	8036d1a <__hexnan+0x132>
 8036c76:	454c      	cmp	r4, r9
 8036c78:	d206      	bcs.n	8036c88 <__hexnan+0xa0>
 8036c7a:	2d07      	cmp	r5, #7
 8036c7c:	dc04      	bgt.n	8036c88 <__hexnan+0xa0>
 8036c7e:	462a      	mov	r2, r5
 8036c80:	4649      	mov	r1, r9
 8036c82:	4620      	mov	r0, r4
 8036c84:	f7ff ff8a 	bl	8036b9c <L_shift>
 8036c88:	4544      	cmp	r4, r8
 8036c8a:	d936      	bls.n	8036cfa <__hexnan+0x112>
 8036c8c:	f1a8 0204 	sub.w	r2, r8, #4
 8036c90:	4623      	mov	r3, r4
 8036c92:	f853 1b04 	ldr.w	r1, [r3], #4
 8036c96:	f842 1f04 	str.w	r1, [r2, #4]!
 8036c9a:	429f      	cmp	r7, r3
 8036c9c:	d2f9      	bcs.n	8036c92 <__hexnan+0xaa>
 8036c9e:	1b3b      	subs	r3, r7, r4
 8036ca0:	f023 0303 	bic.w	r3, r3, #3
 8036ca4:	3304      	adds	r3, #4
 8036ca6:	3401      	adds	r4, #1
 8036ca8:	3e03      	subs	r6, #3
 8036caa:	42b4      	cmp	r4, r6
 8036cac:	bf88      	it	hi
 8036cae:	2304      	movhi	r3, #4
 8036cb0:	4443      	add	r3, r8
 8036cb2:	2200      	movs	r2, #0
 8036cb4:	f843 2b04 	str.w	r2, [r3], #4
 8036cb8:	429f      	cmp	r7, r3
 8036cba:	d2fb      	bcs.n	8036cb4 <__hexnan+0xcc>
 8036cbc:	683b      	ldr	r3, [r7, #0]
 8036cbe:	b91b      	cbnz	r3, 8036cc8 <__hexnan+0xe0>
 8036cc0:	4547      	cmp	r7, r8
 8036cc2:	d128      	bne.n	8036d16 <__hexnan+0x12e>
 8036cc4:	2301      	movs	r3, #1
 8036cc6:	603b      	str	r3, [r7, #0]
 8036cc8:	2005      	movs	r0, #5
 8036cca:	b007      	add	sp, #28
 8036ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8036cd0:	3501      	adds	r5, #1
 8036cd2:	2d08      	cmp	r5, #8
 8036cd4:	f10b 0b01 	add.w	fp, fp, #1
 8036cd8:	dd06      	ble.n	8036ce8 <__hexnan+0x100>
 8036cda:	4544      	cmp	r4, r8
 8036cdc:	d9c1      	bls.n	8036c62 <__hexnan+0x7a>
 8036cde:	2300      	movs	r3, #0
 8036ce0:	f844 3c04 	str.w	r3, [r4, #-4]
 8036ce4:	2501      	movs	r5, #1
 8036ce6:	3c04      	subs	r4, #4
 8036ce8:	6822      	ldr	r2, [r4, #0]
 8036cea:	f000 000f 	and.w	r0, r0, #15
 8036cee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8036cf2:	6020      	str	r0, [r4, #0]
 8036cf4:	e7b5      	b.n	8036c62 <__hexnan+0x7a>
 8036cf6:	2508      	movs	r5, #8
 8036cf8:	e7b3      	b.n	8036c62 <__hexnan+0x7a>
 8036cfa:	9b01      	ldr	r3, [sp, #4]
 8036cfc:	2b00      	cmp	r3, #0
 8036cfe:	d0dd      	beq.n	8036cbc <__hexnan+0xd4>
 8036d00:	f1c3 0320 	rsb	r3, r3, #32
 8036d04:	f04f 32ff 	mov.w	r2, #4294967295
 8036d08:	40da      	lsrs	r2, r3
 8036d0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8036d0e:	4013      	ands	r3, r2
 8036d10:	f846 3c04 	str.w	r3, [r6, #-4]
 8036d14:	e7d2      	b.n	8036cbc <__hexnan+0xd4>
 8036d16:	3f04      	subs	r7, #4
 8036d18:	e7d0      	b.n	8036cbc <__hexnan+0xd4>
 8036d1a:	2004      	movs	r0, #4
 8036d1c:	e7d5      	b.n	8036cca <__hexnan+0xe2>

08036d1e <__ascii_mbtowc>:
 8036d1e:	b082      	sub	sp, #8
 8036d20:	b901      	cbnz	r1, 8036d24 <__ascii_mbtowc+0x6>
 8036d22:	a901      	add	r1, sp, #4
 8036d24:	b142      	cbz	r2, 8036d38 <__ascii_mbtowc+0x1a>
 8036d26:	b14b      	cbz	r3, 8036d3c <__ascii_mbtowc+0x1e>
 8036d28:	7813      	ldrb	r3, [r2, #0]
 8036d2a:	600b      	str	r3, [r1, #0]
 8036d2c:	7812      	ldrb	r2, [r2, #0]
 8036d2e:	1e10      	subs	r0, r2, #0
 8036d30:	bf18      	it	ne
 8036d32:	2001      	movne	r0, #1
 8036d34:	b002      	add	sp, #8
 8036d36:	4770      	bx	lr
 8036d38:	4610      	mov	r0, r2
 8036d3a:	e7fb      	b.n	8036d34 <__ascii_mbtowc+0x16>
 8036d3c:	f06f 0001 	mvn.w	r0, #1
 8036d40:	e7f8      	b.n	8036d34 <__ascii_mbtowc+0x16>

08036d42 <__ascii_wctomb>:
 8036d42:	4603      	mov	r3, r0
 8036d44:	4608      	mov	r0, r1
 8036d46:	b141      	cbz	r1, 8036d5a <__ascii_wctomb+0x18>
 8036d48:	2aff      	cmp	r2, #255	@ 0xff
 8036d4a:	d904      	bls.n	8036d56 <__ascii_wctomb+0x14>
 8036d4c:	228a      	movs	r2, #138	@ 0x8a
 8036d4e:	601a      	str	r2, [r3, #0]
 8036d50:	f04f 30ff 	mov.w	r0, #4294967295
 8036d54:	4770      	bx	lr
 8036d56:	700a      	strb	r2, [r1, #0]
 8036d58:	2001      	movs	r0, #1
 8036d5a:	4770      	bx	lr

08036d5c <fiprintf>:
 8036d5c:	b40e      	push	{r1, r2, r3}
 8036d5e:	b503      	push	{r0, r1, lr}
 8036d60:	4601      	mov	r1, r0
 8036d62:	ab03      	add	r3, sp, #12
 8036d64:	4805      	ldr	r0, [pc, #20]	@ (8036d7c <fiprintf+0x20>)
 8036d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8036d6a:	6800      	ldr	r0, [r0, #0]
 8036d6c:	9301      	str	r3, [sp, #4]
 8036d6e:	f000 f837 	bl	8036de0 <_vfiprintf_r>
 8036d72:	b002      	add	sp, #8
 8036d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8036d78:	b003      	add	sp, #12
 8036d7a:	4770      	bx	lr
 8036d7c:	240023e8 	.word	0x240023e8

08036d80 <abort>:
 8036d80:	b508      	push	{r3, lr}
 8036d82:	2006      	movs	r0, #6
 8036d84:	f000 fa00 	bl	8037188 <raise>
 8036d88:	2001      	movs	r0, #1
 8036d8a:	f000 fc9b 	bl	80376c4 <_exit>

08036d8e <__sfputc_r>:
 8036d8e:	6893      	ldr	r3, [r2, #8]
 8036d90:	3b01      	subs	r3, #1
 8036d92:	2b00      	cmp	r3, #0
 8036d94:	b410      	push	{r4}
 8036d96:	6093      	str	r3, [r2, #8]
 8036d98:	da08      	bge.n	8036dac <__sfputc_r+0x1e>
 8036d9a:	6994      	ldr	r4, [r2, #24]
 8036d9c:	42a3      	cmp	r3, r4
 8036d9e:	db01      	blt.n	8036da4 <__sfputc_r+0x16>
 8036da0:	290a      	cmp	r1, #10
 8036da2:	d103      	bne.n	8036dac <__sfputc_r+0x1e>
 8036da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8036da8:	f000 b932 	b.w	8037010 <__swbuf_r>
 8036dac:	6813      	ldr	r3, [r2, #0]
 8036dae:	1c58      	adds	r0, r3, #1
 8036db0:	6010      	str	r0, [r2, #0]
 8036db2:	7019      	strb	r1, [r3, #0]
 8036db4:	4608      	mov	r0, r1
 8036db6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8036dba:	4770      	bx	lr

08036dbc <__sfputs_r>:
 8036dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8036dbe:	4606      	mov	r6, r0
 8036dc0:	460f      	mov	r7, r1
 8036dc2:	4614      	mov	r4, r2
 8036dc4:	18d5      	adds	r5, r2, r3
 8036dc6:	42ac      	cmp	r4, r5
 8036dc8:	d101      	bne.n	8036dce <__sfputs_r+0x12>
 8036dca:	2000      	movs	r0, #0
 8036dcc:	e007      	b.n	8036dde <__sfputs_r+0x22>
 8036dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8036dd2:	463a      	mov	r2, r7
 8036dd4:	4630      	mov	r0, r6
 8036dd6:	f7ff ffda 	bl	8036d8e <__sfputc_r>
 8036dda:	1c43      	adds	r3, r0, #1
 8036ddc:	d1f3      	bne.n	8036dc6 <__sfputs_r+0xa>
 8036dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08036de0 <_vfiprintf_r>:
 8036de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8036de4:	460d      	mov	r5, r1
 8036de6:	b09d      	sub	sp, #116	@ 0x74
 8036de8:	4614      	mov	r4, r2
 8036dea:	4698      	mov	r8, r3
 8036dec:	4606      	mov	r6, r0
 8036dee:	b118      	cbz	r0, 8036df8 <_vfiprintf_r+0x18>
 8036df0:	6a03      	ldr	r3, [r0, #32]
 8036df2:	b90b      	cbnz	r3, 8036df8 <_vfiprintf_r+0x18>
 8036df4:	f7fc ff98 	bl	8033d28 <__sinit>
 8036df8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8036dfa:	07d9      	lsls	r1, r3, #31
 8036dfc:	d405      	bmi.n	8036e0a <_vfiprintf_r+0x2a>
 8036dfe:	89ab      	ldrh	r3, [r5, #12]
 8036e00:	059a      	lsls	r2, r3, #22
 8036e02:	d402      	bmi.n	8036e0a <_vfiprintf_r+0x2a>
 8036e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8036e06:	f7fd f8e4 	bl	8033fd2 <__retarget_lock_acquire_recursive>
 8036e0a:	89ab      	ldrh	r3, [r5, #12]
 8036e0c:	071b      	lsls	r3, r3, #28
 8036e0e:	d501      	bpl.n	8036e14 <_vfiprintf_r+0x34>
 8036e10:	692b      	ldr	r3, [r5, #16]
 8036e12:	b99b      	cbnz	r3, 8036e3c <_vfiprintf_r+0x5c>
 8036e14:	4629      	mov	r1, r5
 8036e16:	4630      	mov	r0, r6
 8036e18:	f000 f938 	bl	803708c <__swsetup_r>
 8036e1c:	b170      	cbz	r0, 8036e3c <_vfiprintf_r+0x5c>
 8036e1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8036e20:	07dc      	lsls	r4, r3, #31
 8036e22:	d504      	bpl.n	8036e2e <_vfiprintf_r+0x4e>
 8036e24:	f04f 30ff 	mov.w	r0, #4294967295
 8036e28:	b01d      	add	sp, #116	@ 0x74
 8036e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8036e2e:	89ab      	ldrh	r3, [r5, #12]
 8036e30:	0598      	lsls	r0, r3, #22
 8036e32:	d4f7      	bmi.n	8036e24 <_vfiprintf_r+0x44>
 8036e34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8036e36:	f7fd f8cd 	bl	8033fd4 <__retarget_lock_release_recursive>
 8036e3a:	e7f3      	b.n	8036e24 <_vfiprintf_r+0x44>
 8036e3c:	2300      	movs	r3, #0
 8036e3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8036e40:	2320      	movs	r3, #32
 8036e42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8036e46:	f8cd 800c 	str.w	r8, [sp, #12]
 8036e4a:	2330      	movs	r3, #48	@ 0x30
 8036e4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8036ffc <_vfiprintf_r+0x21c>
 8036e50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8036e54:	f04f 0901 	mov.w	r9, #1
 8036e58:	4623      	mov	r3, r4
 8036e5a:	469a      	mov	sl, r3
 8036e5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8036e60:	b10a      	cbz	r2, 8036e66 <_vfiprintf_r+0x86>
 8036e62:	2a25      	cmp	r2, #37	@ 0x25
 8036e64:	d1f9      	bne.n	8036e5a <_vfiprintf_r+0x7a>
 8036e66:	ebba 0b04 	subs.w	fp, sl, r4
 8036e6a:	d00b      	beq.n	8036e84 <_vfiprintf_r+0xa4>
 8036e6c:	465b      	mov	r3, fp
 8036e6e:	4622      	mov	r2, r4
 8036e70:	4629      	mov	r1, r5
 8036e72:	4630      	mov	r0, r6
 8036e74:	f7ff ffa2 	bl	8036dbc <__sfputs_r>
 8036e78:	3001      	adds	r0, #1
 8036e7a:	f000 80a7 	beq.w	8036fcc <_vfiprintf_r+0x1ec>
 8036e7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8036e80:	445a      	add	r2, fp
 8036e82:	9209      	str	r2, [sp, #36]	@ 0x24
 8036e84:	f89a 3000 	ldrb.w	r3, [sl]
 8036e88:	2b00      	cmp	r3, #0
 8036e8a:	f000 809f 	beq.w	8036fcc <_vfiprintf_r+0x1ec>
 8036e8e:	2300      	movs	r3, #0
 8036e90:	f04f 32ff 	mov.w	r2, #4294967295
 8036e94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8036e98:	f10a 0a01 	add.w	sl, sl, #1
 8036e9c:	9304      	str	r3, [sp, #16]
 8036e9e:	9307      	str	r3, [sp, #28]
 8036ea0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8036ea4:	931a      	str	r3, [sp, #104]	@ 0x68
 8036ea6:	4654      	mov	r4, sl
 8036ea8:	2205      	movs	r2, #5
 8036eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8036eae:	4853      	ldr	r0, [pc, #332]	@ (8036ffc <_vfiprintf_r+0x21c>)
 8036eb0:	f7d9 f8c6 	bl	8010040 <memchr>
 8036eb4:	9a04      	ldr	r2, [sp, #16]
 8036eb6:	b9d8      	cbnz	r0, 8036ef0 <_vfiprintf_r+0x110>
 8036eb8:	06d1      	lsls	r1, r2, #27
 8036eba:	bf44      	itt	mi
 8036ebc:	2320      	movmi	r3, #32
 8036ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8036ec2:	0713      	lsls	r3, r2, #28
 8036ec4:	bf44      	itt	mi
 8036ec6:	232b      	movmi	r3, #43	@ 0x2b
 8036ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8036ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8036ed0:	2b2a      	cmp	r3, #42	@ 0x2a
 8036ed2:	d015      	beq.n	8036f00 <_vfiprintf_r+0x120>
 8036ed4:	9a07      	ldr	r2, [sp, #28]
 8036ed6:	4654      	mov	r4, sl
 8036ed8:	2000      	movs	r0, #0
 8036eda:	f04f 0c0a 	mov.w	ip, #10
 8036ede:	4621      	mov	r1, r4
 8036ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8036ee4:	3b30      	subs	r3, #48	@ 0x30
 8036ee6:	2b09      	cmp	r3, #9
 8036ee8:	d94b      	bls.n	8036f82 <_vfiprintf_r+0x1a2>
 8036eea:	b1b0      	cbz	r0, 8036f1a <_vfiprintf_r+0x13a>
 8036eec:	9207      	str	r2, [sp, #28]
 8036eee:	e014      	b.n	8036f1a <_vfiprintf_r+0x13a>
 8036ef0:	eba0 0308 	sub.w	r3, r0, r8
 8036ef4:	fa09 f303 	lsl.w	r3, r9, r3
 8036ef8:	4313      	orrs	r3, r2
 8036efa:	9304      	str	r3, [sp, #16]
 8036efc:	46a2      	mov	sl, r4
 8036efe:	e7d2      	b.n	8036ea6 <_vfiprintf_r+0xc6>
 8036f00:	9b03      	ldr	r3, [sp, #12]
 8036f02:	1d19      	adds	r1, r3, #4
 8036f04:	681b      	ldr	r3, [r3, #0]
 8036f06:	9103      	str	r1, [sp, #12]
 8036f08:	2b00      	cmp	r3, #0
 8036f0a:	bfbb      	ittet	lt
 8036f0c:	425b      	neglt	r3, r3
 8036f0e:	f042 0202 	orrlt.w	r2, r2, #2
 8036f12:	9307      	strge	r3, [sp, #28]
 8036f14:	9307      	strlt	r3, [sp, #28]
 8036f16:	bfb8      	it	lt
 8036f18:	9204      	strlt	r2, [sp, #16]
 8036f1a:	7823      	ldrb	r3, [r4, #0]
 8036f1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8036f1e:	d10a      	bne.n	8036f36 <_vfiprintf_r+0x156>
 8036f20:	7863      	ldrb	r3, [r4, #1]
 8036f22:	2b2a      	cmp	r3, #42	@ 0x2a
 8036f24:	d132      	bne.n	8036f8c <_vfiprintf_r+0x1ac>
 8036f26:	9b03      	ldr	r3, [sp, #12]
 8036f28:	1d1a      	adds	r2, r3, #4
 8036f2a:	681b      	ldr	r3, [r3, #0]
 8036f2c:	9203      	str	r2, [sp, #12]
 8036f2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8036f32:	3402      	adds	r4, #2
 8036f34:	9305      	str	r3, [sp, #20]
 8036f36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 803700c <_vfiprintf_r+0x22c>
 8036f3a:	7821      	ldrb	r1, [r4, #0]
 8036f3c:	2203      	movs	r2, #3
 8036f3e:	4650      	mov	r0, sl
 8036f40:	f7d9 f87e 	bl	8010040 <memchr>
 8036f44:	b138      	cbz	r0, 8036f56 <_vfiprintf_r+0x176>
 8036f46:	9b04      	ldr	r3, [sp, #16]
 8036f48:	eba0 000a 	sub.w	r0, r0, sl
 8036f4c:	2240      	movs	r2, #64	@ 0x40
 8036f4e:	4082      	lsls	r2, r0
 8036f50:	4313      	orrs	r3, r2
 8036f52:	3401      	adds	r4, #1
 8036f54:	9304      	str	r3, [sp, #16]
 8036f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8036f5a:	4829      	ldr	r0, [pc, #164]	@ (8037000 <_vfiprintf_r+0x220>)
 8036f5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8036f60:	2206      	movs	r2, #6
 8036f62:	f7d9 f86d 	bl	8010040 <memchr>
 8036f66:	2800      	cmp	r0, #0
 8036f68:	d03f      	beq.n	8036fea <_vfiprintf_r+0x20a>
 8036f6a:	4b26      	ldr	r3, [pc, #152]	@ (8037004 <_vfiprintf_r+0x224>)
 8036f6c:	bb1b      	cbnz	r3, 8036fb6 <_vfiprintf_r+0x1d6>
 8036f6e:	9b03      	ldr	r3, [sp, #12]
 8036f70:	3307      	adds	r3, #7
 8036f72:	f023 0307 	bic.w	r3, r3, #7
 8036f76:	3308      	adds	r3, #8
 8036f78:	9303      	str	r3, [sp, #12]
 8036f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8036f7c:	443b      	add	r3, r7
 8036f7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8036f80:	e76a      	b.n	8036e58 <_vfiprintf_r+0x78>
 8036f82:	fb0c 3202 	mla	r2, ip, r2, r3
 8036f86:	460c      	mov	r4, r1
 8036f88:	2001      	movs	r0, #1
 8036f8a:	e7a8      	b.n	8036ede <_vfiprintf_r+0xfe>
 8036f8c:	2300      	movs	r3, #0
 8036f8e:	3401      	adds	r4, #1
 8036f90:	9305      	str	r3, [sp, #20]
 8036f92:	4619      	mov	r1, r3
 8036f94:	f04f 0c0a 	mov.w	ip, #10
 8036f98:	4620      	mov	r0, r4
 8036f9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8036f9e:	3a30      	subs	r2, #48	@ 0x30
 8036fa0:	2a09      	cmp	r2, #9
 8036fa2:	d903      	bls.n	8036fac <_vfiprintf_r+0x1cc>
 8036fa4:	2b00      	cmp	r3, #0
 8036fa6:	d0c6      	beq.n	8036f36 <_vfiprintf_r+0x156>
 8036fa8:	9105      	str	r1, [sp, #20]
 8036faa:	e7c4      	b.n	8036f36 <_vfiprintf_r+0x156>
 8036fac:	fb0c 2101 	mla	r1, ip, r1, r2
 8036fb0:	4604      	mov	r4, r0
 8036fb2:	2301      	movs	r3, #1
 8036fb4:	e7f0      	b.n	8036f98 <_vfiprintf_r+0x1b8>
 8036fb6:	ab03      	add	r3, sp, #12
 8036fb8:	9300      	str	r3, [sp, #0]
 8036fba:	462a      	mov	r2, r5
 8036fbc:	4b12      	ldr	r3, [pc, #72]	@ (8037008 <_vfiprintf_r+0x228>)
 8036fbe:	a904      	add	r1, sp, #16
 8036fc0:	4630      	mov	r0, r6
 8036fc2:	f7fc f879 	bl	80330b8 <_printf_float>
 8036fc6:	4607      	mov	r7, r0
 8036fc8:	1c78      	adds	r0, r7, #1
 8036fca:	d1d6      	bne.n	8036f7a <_vfiprintf_r+0x19a>
 8036fcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8036fce:	07d9      	lsls	r1, r3, #31
 8036fd0:	d405      	bmi.n	8036fde <_vfiprintf_r+0x1fe>
 8036fd2:	89ab      	ldrh	r3, [r5, #12]
 8036fd4:	059a      	lsls	r2, r3, #22
 8036fd6:	d402      	bmi.n	8036fde <_vfiprintf_r+0x1fe>
 8036fd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8036fda:	f7fc fffb 	bl	8033fd4 <__retarget_lock_release_recursive>
 8036fde:	89ab      	ldrh	r3, [r5, #12]
 8036fe0:	065b      	lsls	r3, r3, #25
 8036fe2:	f53f af1f 	bmi.w	8036e24 <_vfiprintf_r+0x44>
 8036fe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8036fe8:	e71e      	b.n	8036e28 <_vfiprintf_r+0x48>
 8036fea:	ab03      	add	r3, sp, #12
 8036fec:	9300      	str	r3, [sp, #0]
 8036fee:	462a      	mov	r2, r5
 8036ff0:	4b05      	ldr	r3, [pc, #20]	@ (8037008 <_vfiprintf_r+0x228>)
 8036ff2:	a904      	add	r1, sp, #16
 8036ff4:	4630      	mov	r0, r6
 8036ff6:	f7fc fae7 	bl	80335c8 <_printf_i>
 8036ffa:	e7e4      	b.n	8036fc6 <_vfiprintf_r+0x1e6>
 8036ffc:	080727b9 	.word	0x080727b9
 8037000:	080727c3 	.word	0x080727c3
 8037004:	080330b9 	.word	0x080330b9
 8037008:	08036dbd 	.word	0x08036dbd
 803700c:	080727bf 	.word	0x080727bf

08037010 <__swbuf_r>:
 8037010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8037012:	460e      	mov	r6, r1
 8037014:	4614      	mov	r4, r2
 8037016:	4605      	mov	r5, r0
 8037018:	b118      	cbz	r0, 8037022 <__swbuf_r+0x12>
 803701a:	6a03      	ldr	r3, [r0, #32]
 803701c:	b90b      	cbnz	r3, 8037022 <__swbuf_r+0x12>
 803701e:	f7fc fe83 	bl	8033d28 <__sinit>
 8037022:	69a3      	ldr	r3, [r4, #24]
 8037024:	60a3      	str	r3, [r4, #8]
 8037026:	89a3      	ldrh	r3, [r4, #12]
 8037028:	071a      	lsls	r2, r3, #28
 803702a:	d501      	bpl.n	8037030 <__swbuf_r+0x20>
 803702c:	6923      	ldr	r3, [r4, #16]
 803702e:	b943      	cbnz	r3, 8037042 <__swbuf_r+0x32>
 8037030:	4621      	mov	r1, r4
 8037032:	4628      	mov	r0, r5
 8037034:	f000 f82a 	bl	803708c <__swsetup_r>
 8037038:	b118      	cbz	r0, 8037042 <__swbuf_r+0x32>
 803703a:	f04f 37ff 	mov.w	r7, #4294967295
 803703e:	4638      	mov	r0, r7
 8037040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8037042:	6823      	ldr	r3, [r4, #0]
 8037044:	6922      	ldr	r2, [r4, #16]
 8037046:	1a98      	subs	r0, r3, r2
 8037048:	6963      	ldr	r3, [r4, #20]
 803704a:	b2f6      	uxtb	r6, r6
 803704c:	4283      	cmp	r3, r0
 803704e:	4637      	mov	r7, r6
 8037050:	dc05      	bgt.n	803705e <__swbuf_r+0x4e>
 8037052:	4621      	mov	r1, r4
 8037054:	4628      	mov	r0, r5
 8037056:	f7ff fac7 	bl	80365e8 <_fflush_r>
 803705a:	2800      	cmp	r0, #0
 803705c:	d1ed      	bne.n	803703a <__swbuf_r+0x2a>
 803705e:	68a3      	ldr	r3, [r4, #8]
 8037060:	3b01      	subs	r3, #1
 8037062:	60a3      	str	r3, [r4, #8]
 8037064:	6823      	ldr	r3, [r4, #0]
 8037066:	1c5a      	adds	r2, r3, #1
 8037068:	6022      	str	r2, [r4, #0]
 803706a:	701e      	strb	r6, [r3, #0]
 803706c:	6962      	ldr	r2, [r4, #20]
 803706e:	1c43      	adds	r3, r0, #1
 8037070:	429a      	cmp	r2, r3
 8037072:	d004      	beq.n	803707e <__swbuf_r+0x6e>
 8037074:	89a3      	ldrh	r3, [r4, #12]
 8037076:	07db      	lsls	r3, r3, #31
 8037078:	d5e1      	bpl.n	803703e <__swbuf_r+0x2e>
 803707a:	2e0a      	cmp	r6, #10
 803707c:	d1df      	bne.n	803703e <__swbuf_r+0x2e>
 803707e:	4621      	mov	r1, r4
 8037080:	4628      	mov	r0, r5
 8037082:	f7ff fab1 	bl	80365e8 <_fflush_r>
 8037086:	2800      	cmp	r0, #0
 8037088:	d0d9      	beq.n	803703e <__swbuf_r+0x2e>
 803708a:	e7d6      	b.n	803703a <__swbuf_r+0x2a>

0803708c <__swsetup_r>:
 803708c:	b538      	push	{r3, r4, r5, lr}
 803708e:	4b29      	ldr	r3, [pc, #164]	@ (8037134 <__swsetup_r+0xa8>)
 8037090:	4605      	mov	r5, r0
 8037092:	6818      	ldr	r0, [r3, #0]
 8037094:	460c      	mov	r4, r1
 8037096:	b118      	cbz	r0, 80370a0 <__swsetup_r+0x14>
 8037098:	6a03      	ldr	r3, [r0, #32]
 803709a:	b90b      	cbnz	r3, 80370a0 <__swsetup_r+0x14>
 803709c:	f7fc fe44 	bl	8033d28 <__sinit>
 80370a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80370a4:	0719      	lsls	r1, r3, #28
 80370a6:	d422      	bmi.n	80370ee <__swsetup_r+0x62>
 80370a8:	06da      	lsls	r2, r3, #27
 80370aa:	d407      	bmi.n	80370bc <__swsetup_r+0x30>
 80370ac:	2209      	movs	r2, #9
 80370ae:	602a      	str	r2, [r5, #0]
 80370b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80370b4:	81a3      	strh	r3, [r4, #12]
 80370b6:	f04f 30ff 	mov.w	r0, #4294967295
 80370ba:	e033      	b.n	8037124 <__swsetup_r+0x98>
 80370bc:	0758      	lsls	r0, r3, #29
 80370be:	d512      	bpl.n	80370e6 <__swsetup_r+0x5a>
 80370c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80370c2:	b141      	cbz	r1, 80370d6 <__swsetup_r+0x4a>
 80370c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80370c8:	4299      	cmp	r1, r3
 80370ca:	d002      	beq.n	80370d2 <__swsetup_r+0x46>
 80370cc:	4628      	mov	r0, r5
 80370ce:	f7fd fd7d 	bl	8034bcc <_free_r>
 80370d2:	2300      	movs	r3, #0
 80370d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80370d6:	89a3      	ldrh	r3, [r4, #12]
 80370d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80370dc:	81a3      	strh	r3, [r4, #12]
 80370de:	2300      	movs	r3, #0
 80370e0:	6063      	str	r3, [r4, #4]
 80370e2:	6923      	ldr	r3, [r4, #16]
 80370e4:	6023      	str	r3, [r4, #0]
 80370e6:	89a3      	ldrh	r3, [r4, #12]
 80370e8:	f043 0308 	orr.w	r3, r3, #8
 80370ec:	81a3      	strh	r3, [r4, #12]
 80370ee:	6923      	ldr	r3, [r4, #16]
 80370f0:	b94b      	cbnz	r3, 8037106 <__swsetup_r+0x7a>
 80370f2:	89a3      	ldrh	r3, [r4, #12]
 80370f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80370f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80370fc:	d003      	beq.n	8037106 <__swsetup_r+0x7a>
 80370fe:	4621      	mov	r1, r4
 8037100:	4628      	mov	r0, r5
 8037102:	f000 f883 	bl	803720c <__smakebuf_r>
 8037106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803710a:	f013 0201 	ands.w	r2, r3, #1
 803710e:	d00a      	beq.n	8037126 <__swsetup_r+0x9a>
 8037110:	2200      	movs	r2, #0
 8037112:	60a2      	str	r2, [r4, #8]
 8037114:	6962      	ldr	r2, [r4, #20]
 8037116:	4252      	negs	r2, r2
 8037118:	61a2      	str	r2, [r4, #24]
 803711a:	6922      	ldr	r2, [r4, #16]
 803711c:	b942      	cbnz	r2, 8037130 <__swsetup_r+0xa4>
 803711e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8037122:	d1c5      	bne.n	80370b0 <__swsetup_r+0x24>
 8037124:	bd38      	pop	{r3, r4, r5, pc}
 8037126:	0799      	lsls	r1, r3, #30
 8037128:	bf58      	it	pl
 803712a:	6962      	ldrpl	r2, [r4, #20]
 803712c:	60a2      	str	r2, [r4, #8]
 803712e:	e7f4      	b.n	803711a <__swsetup_r+0x8e>
 8037130:	2000      	movs	r0, #0
 8037132:	e7f7      	b.n	8037124 <__swsetup_r+0x98>
 8037134:	240023e8 	.word	0x240023e8

08037138 <_raise_r>:
 8037138:	291f      	cmp	r1, #31
 803713a:	b538      	push	{r3, r4, r5, lr}
 803713c:	4605      	mov	r5, r0
 803713e:	460c      	mov	r4, r1
 8037140:	d904      	bls.n	803714c <_raise_r+0x14>
 8037142:	2316      	movs	r3, #22
 8037144:	6003      	str	r3, [r0, #0]
 8037146:	f04f 30ff 	mov.w	r0, #4294967295
 803714a:	bd38      	pop	{r3, r4, r5, pc}
 803714c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 803714e:	b112      	cbz	r2, 8037156 <_raise_r+0x1e>
 8037150:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8037154:	b94b      	cbnz	r3, 803716a <_raise_r+0x32>
 8037156:	4628      	mov	r0, r5
 8037158:	f000 f830 	bl	80371bc <_getpid_r>
 803715c:	4622      	mov	r2, r4
 803715e:	4601      	mov	r1, r0
 8037160:	4628      	mov	r0, r5
 8037162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8037166:	f000 b817 	b.w	8037198 <_kill_r>
 803716a:	2b01      	cmp	r3, #1
 803716c:	d00a      	beq.n	8037184 <_raise_r+0x4c>
 803716e:	1c59      	adds	r1, r3, #1
 8037170:	d103      	bne.n	803717a <_raise_r+0x42>
 8037172:	2316      	movs	r3, #22
 8037174:	6003      	str	r3, [r0, #0]
 8037176:	2001      	movs	r0, #1
 8037178:	e7e7      	b.n	803714a <_raise_r+0x12>
 803717a:	2100      	movs	r1, #0
 803717c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8037180:	4620      	mov	r0, r4
 8037182:	4798      	blx	r3
 8037184:	2000      	movs	r0, #0
 8037186:	e7e0      	b.n	803714a <_raise_r+0x12>

08037188 <raise>:
 8037188:	4b02      	ldr	r3, [pc, #8]	@ (8037194 <raise+0xc>)
 803718a:	4601      	mov	r1, r0
 803718c:	6818      	ldr	r0, [r3, #0]
 803718e:	f7ff bfd3 	b.w	8037138 <_raise_r>
 8037192:	bf00      	nop
 8037194:	240023e8 	.word	0x240023e8

08037198 <_kill_r>:
 8037198:	b538      	push	{r3, r4, r5, lr}
 803719a:	4d07      	ldr	r5, [pc, #28]	@ (80371b8 <_kill_r+0x20>)
 803719c:	2300      	movs	r3, #0
 803719e:	4604      	mov	r4, r0
 80371a0:	4608      	mov	r0, r1
 80371a2:	4611      	mov	r1, r2
 80371a4:	602b      	str	r3, [r5, #0]
 80371a6:	f000 fa75 	bl	8037694 <_kill>
 80371aa:	1c43      	adds	r3, r0, #1
 80371ac:	d102      	bne.n	80371b4 <_kill_r+0x1c>
 80371ae:	682b      	ldr	r3, [r5, #0]
 80371b0:	b103      	cbz	r3, 80371b4 <_kill_r+0x1c>
 80371b2:	6023      	str	r3, [r4, #0]
 80371b4:	bd38      	pop	{r3, r4, r5, pc}
 80371b6:	bf00      	nop
 80371b8:	24052b64 	.word	0x24052b64

080371bc <_getpid_r>:
 80371bc:	f000 ba5a 	b.w	8037674 <_getpid>

080371c0 <__swhatbuf_r>:
 80371c0:	b570      	push	{r4, r5, r6, lr}
 80371c2:	460c      	mov	r4, r1
 80371c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80371c8:	2900      	cmp	r1, #0
 80371ca:	b096      	sub	sp, #88	@ 0x58
 80371cc:	4615      	mov	r5, r2
 80371ce:	461e      	mov	r6, r3
 80371d0:	da0d      	bge.n	80371ee <__swhatbuf_r+0x2e>
 80371d2:	89a3      	ldrh	r3, [r4, #12]
 80371d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80371d8:	f04f 0100 	mov.w	r1, #0
 80371dc:	bf14      	ite	ne
 80371de:	2340      	movne	r3, #64	@ 0x40
 80371e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80371e4:	2000      	movs	r0, #0
 80371e6:	6031      	str	r1, [r6, #0]
 80371e8:	602b      	str	r3, [r5, #0]
 80371ea:	b016      	add	sp, #88	@ 0x58
 80371ec:	bd70      	pop	{r4, r5, r6, pc}
 80371ee:	466a      	mov	r2, sp
 80371f0:	f000 f848 	bl	8037284 <_fstat_r>
 80371f4:	2800      	cmp	r0, #0
 80371f6:	dbec      	blt.n	80371d2 <__swhatbuf_r+0x12>
 80371f8:	9901      	ldr	r1, [sp, #4]
 80371fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80371fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8037202:	4259      	negs	r1, r3
 8037204:	4159      	adcs	r1, r3
 8037206:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803720a:	e7eb      	b.n	80371e4 <__swhatbuf_r+0x24>

0803720c <__smakebuf_r>:
 803720c:	898b      	ldrh	r3, [r1, #12]
 803720e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8037210:	079d      	lsls	r5, r3, #30
 8037212:	4606      	mov	r6, r0
 8037214:	460c      	mov	r4, r1
 8037216:	d507      	bpl.n	8037228 <__smakebuf_r+0x1c>
 8037218:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 803721c:	6023      	str	r3, [r4, #0]
 803721e:	6123      	str	r3, [r4, #16]
 8037220:	2301      	movs	r3, #1
 8037222:	6163      	str	r3, [r4, #20]
 8037224:	b003      	add	sp, #12
 8037226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8037228:	ab01      	add	r3, sp, #4
 803722a:	466a      	mov	r2, sp
 803722c:	f7ff ffc8 	bl	80371c0 <__swhatbuf_r>
 8037230:	9f00      	ldr	r7, [sp, #0]
 8037232:	4605      	mov	r5, r0
 8037234:	4639      	mov	r1, r7
 8037236:	4630      	mov	r0, r6
 8037238:	f7fb fdf4 	bl	8032e24 <_malloc_r>
 803723c:	b948      	cbnz	r0, 8037252 <__smakebuf_r+0x46>
 803723e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8037242:	059a      	lsls	r2, r3, #22
 8037244:	d4ee      	bmi.n	8037224 <__smakebuf_r+0x18>
 8037246:	f023 0303 	bic.w	r3, r3, #3
 803724a:	f043 0302 	orr.w	r3, r3, #2
 803724e:	81a3      	strh	r3, [r4, #12]
 8037250:	e7e2      	b.n	8037218 <__smakebuf_r+0xc>
 8037252:	89a3      	ldrh	r3, [r4, #12]
 8037254:	6020      	str	r0, [r4, #0]
 8037256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 803725a:	81a3      	strh	r3, [r4, #12]
 803725c:	9b01      	ldr	r3, [sp, #4]
 803725e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8037262:	b15b      	cbz	r3, 803727c <__smakebuf_r+0x70>
 8037264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8037268:	4630      	mov	r0, r6
 803726a:	f000 f81d 	bl	80372a8 <_isatty_r>
 803726e:	b128      	cbz	r0, 803727c <__smakebuf_r+0x70>
 8037270:	89a3      	ldrh	r3, [r4, #12]
 8037272:	f023 0303 	bic.w	r3, r3, #3
 8037276:	f043 0301 	orr.w	r3, r3, #1
 803727a:	81a3      	strh	r3, [r4, #12]
 803727c:	89a3      	ldrh	r3, [r4, #12]
 803727e:	431d      	orrs	r5, r3
 8037280:	81a5      	strh	r5, [r4, #12]
 8037282:	e7cf      	b.n	8037224 <__smakebuf_r+0x18>

08037284 <_fstat_r>:
 8037284:	b538      	push	{r3, r4, r5, lr}
 8037286:	4d07      	ldr	r5, [pc, #28]	@ (80372a4 <_fstat_r+0x20>)
 8037288:	2300      	movs	r3, #0
 803728a:	4604      	mov	r4, r0
 803728c:	4608      	mov	r0, r1
 803728e:	4611      	mov	r1, r2
 8037290:	602b      	str	r3, [r5, #0]
 8037292:	f000 f9e7 	bl	8037664 <_fstat>
 8037296:	1c43      	adds	r3, r0, #1
 8037298:	d102      	bne.n	80372a0 <_fstat_r+0x1c>
 803729a:	682b      	ldr	r3, [r5, #0]
 803729c:	b103      	cbz	r3, 80372a0 <_fstat_r+0x1c>
 803729e:	6023      	str	r3, [r4, #0]
 80372a0:	bd38      	pop	{r3, r4, r5, pc}
 80372a2:	bf00      	nop
 80372a4:	24052b64 	.word	0x24052b64

080372a8 <_isatty_r>:
 80372a8:	b538      	push	{r3, r4, r5, lr}
 80372aa:	4d06      	ldr	r5, [pc, #24]	@ (80372c4 <_isatty_r+0x1c>)
 80372ac:	2300      	movs	r3, #0
 80372ae:	4604      	mov	r4, r0
 80372b0:	4608      	mov	r0, r1
 80372b2:	602b      	str	r3, [r5, #0]
 80372b4:	f000 f9e6 	bl	8037684 <_isatty>
 80372b8:	1c43      	adds	r3, r0, #1
 80372ba:	d102      	bne.n	80372c2 <_isatty_r+0x1a>
 80372bc:	682b      	ldr	r3, [r5, #0]
 80372be:	b103      	cbz	r3, 80372c2 <_isatty_r+0x1a>
 80372c0:	6023      	str	r3, [r4, #0]
 80372c2:	bd38      	pop	{r3, r4, r5, pc}
 80372c4:	24052b64 	.word	0x24052b64

080372c8 <checkint>:
 80372c8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80372cc:	2b7e      	cmp	r3, #126	@ 0x7e
 80372ce:	d910      	bls.n	80372f2 <checkint+0x2a>
 80372d0:	2b96      	cmp	r3, #150	@ 0x96
 80372d2:	d80c      	bhi.n	80372ee <checkint+0x26>
 80372d4:	2201      	movs	r2, #1
 80372d6:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80372da:	fa02 f303 	lsl.w	r3, r2, r3
 80372de:	1e5a      	subs	r2, r3, #1
 80372e0:	4202      	tst	r2, r0
 80372e2:	d106      	bne.n	80372f2 <checkint+0x2a>
 80372e4:	4203      	tst	r3, r0
 80372e6:	bf14      	ite	ne
 80372e8:	2001      	movne	r0, #1
 80372ea:	2002      	moveq	r0, #2
 80372ec:	4770      	bx	lr
 80372ee:	2002      	movs	r0, #2
 80372f0:	4770      	bx	lr
 80372f2:	2000      	movs	r0, #0
 80372f4:	4770      	bx	lr
	...

080372f8 <powf>:
 80372f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80372fa:	ee10 1a10 	vmov	r1, s0
 80372fe:	ee10 4a90 	vmov	r4, s1
 8037302:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 8037306:	0063      	lsls	r3, r4, #1
 8037308:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 803730c:	eef0 7a40 	vmov.f32	s15, s0
 8037310:	eeb0 7a60 	vmov.f32	s14, s1
 8037314:	f103 30ff 	add.w	r0, r3, #4294967295
 8037318:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 803731c:	d252      	bcs.n	80373c4 <powf+0xcc>
 803731e:	4290      	cmp	r0, r2
 8037320:	d258      	bcs.n	80373d4 <powf+0xdc>
 8037322:	2000      	movs	r0, #0
 8037324:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 8037328:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 803732c:	4a9e      	ldr	r2, [pc, #632]	@ (80375a8 <powf+0x2b0>)
 803732e:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 8037332:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8037336:	f36f 0316 	bfc	r3, #0, #23
 803733a:	1ac9      	subs	r1, r1, r3
 803733c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8037340:	ee07 1a90 	vmov	s15, r1
 8037344:	ed94 5b02 	vldr	d5, [r4, #8]
 8037348:	ed94 4b00 	vldr	d4, [r4]
 803734c:	15db      	asrs	r3, r3, #23
 803734e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8037352:	ee07 3a90 	vmov	s15, r3
 8037356:	eea4 2b06 	vfma.f64	d2, d4, d6
 803735a:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 803735e:	ee22 4b02 	vmul.f64	d4, d2, d2
 8037362:	ee24 0b04 	vmul.f64	d0, d4, d4
 8037366:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 803736a:	ee36 6b05 	vadd.f64	d6, d6, d5
 803736e:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 8037372:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 8037376:	eea2 1b05 	vfma.f64	d1, d2, d5
 803737a:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 803737e:	eea2 5b03 	vfma.f64	d5, d2, d3
 8037382:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 8037386:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 803738a:	eea2 6b03 	vfma.f64	d6, d2, d3
 803738e:	eea4 6b05 	vfma.f64	d6, d4, d5
 8037392:	eea1 6b00 	vfma.f64	d6, d1, d0
 8037396:	ee27 7b06 	vmul.f64	d7, d7, d6
 803739a:	ee17 3a90 	vmov	r3, s15
 803739e:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 80373a2:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 80373a6:	429a      	cmp	r2, r3
 80373a8:	f0c0 8098 	bcc.w	80374dc <powf+0x1e4>
 80373ac:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8037588 <powf+0x290>
 80373b0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80373b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80373b8:	dd79      	ble.n	80374ae <powf+0x1b6>
 80373ba:	b003      	add	sp, #12
 80373bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80373c0:	f000 b920 	b.w	8037604 <__math_oflowf>
 80373c4:	4290      	cmp	r0, r2
 80373c6:	d330      	bcc.n	803742a <powf+0x132>
 80373c8:	b12b      	cbz	r3, 80373d6 <powf+0xde>
 80373ca:	0049      	lsls	r1, r1, #1
 80373cc:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 80373d0:	d808      	bhi.n	80373e4 <powf+0xec>
 80373d2:	e015      	b.n	8037400 <powf+0x108>
 80373d4:	b953      	cbnz	r3, 80373ec <powf+0xf4>
 80373d6:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 80373da:	0049      	lsls	r1, r1, #1
 80373dc:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 80373e0:	f240 80ca 	bls.w	8037578 <powf+0x280>
 80373e4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80373e8:	b003      	add	sp, #12
 80373ea:	bd30      	pop	{r4, r5, pc}
 80373ec:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 80373f0:	d105      	bne.n	80373fe <powf+0x106>
 80373f2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80373f6:	0064      	lsls	r4, r4, #1
 80373f8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80373fc:	e7f0      	b.n	80373e0 <powf+0xe8>
 80373fe:	0049      	lsls	r1, r1, #1
 8037400:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 8037404:	d1ee      	bne.n	80373e4 <powf+0xec>
 8037406:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 803740a:	f000 80b5 	beq.w	8037578 <powf+0x280>
 803740e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 8037412:	ea6f 0404 	mvn.w	r4, r4
 8037416:	bf34      	ite	cc
 8037418:	2100      	movcc	r1, #0
 803741a:	2101      	movcs	r1, #1
 803741c:	0fe4      	lsrs	r4, r4, #31
 803741e:	42a1      	cmp	r1, r4
 8037420:	f040 80ad 	bne.w	803757e <powf+0x286>
 8037424:	ee27 0a07 	vmul.f32	s0, s14, s14
 8037428:	e7de      	b.n	80373e8 <powf+0xf0>
 803742a:	004d      	lsls	r5, r1, #1
 803742c:	1e6b      	subs	r3, r5, #1
 803742e:	4293      	cmp	r3, r2
 8037430:	d31b      	bcc.n	803746a <powf+0x172>
 8037432:	2900      	cmp	r1, #0
 8037434:	ee20 0a00 	vmul.f32	s0, s0, s0
 8037438:	da0e      	bge.n	8037458 <powf+0x160>
 803743a:	4620      	mov	r0, r4
 803743c:	f7ff ff44 	bl	80372c8 <checkint>
 8037440:	2801      	cmp	r0, #1
 8037442:	d109      	bne.n	8037458 <powf+0x160>
 8037444:	eeb1 0a40 	vneg.f32	s0, s0
 8037448:	b945      	cbnz	r5, 803745c <powf+0x164>
 803744a:	2c00      	cmp	r4, #0
 803744c:	dacc      	bge.n	80373e8 <powf+0xf0>
 803744e:	b003      	add	sp, #12
 8037450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8037454:	f000 b8dc 	b.w	8037610 <__math_divzerof>
 8037458:	2000      	movs	r0, #0
 803745a:	e7f5      	b.n	8037448 <powf+0x150>
 803745c:	2c00      	cmp	r4, #0
 803745e:	dac3      	bge.n	80373e8 <powf+0xf0>
 8037460:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8037464:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8037468:	e7be      	b.n	80373e8 <powf+0xf0>
 803746a:	2900      	cmp	r1, #0
 803746c:	da1d      	bge.n	80374aa <powf+0x1b2>
 803746e:	4620      	mov	r0, r4
 8037470:	f7ff ff2a 	bl	80372c8 <checkint>
 8037474:	b920      	cbnz	r0, 8037480 <powf+0x188>
 8037476:	b003      	add	sp, #12
 8037478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 803747c:	f000 b8da 	b.w	8037634 <__math_invalidf>
 8037480:	1e43      	subs	r3, r0, #1
 8037482:	4258      	negs	r0, r3
 8037484:	4158      	adcs	r0, r3
 8037486:	0400      	lsls	r0, r0, #16
 8037488:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 803748c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8037490:	f4bf af48 	bcs.w	8037324 <powf+0x2c>
 8037494:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80375ac <powf+0x2b4>
 8037498:	ee27 0aa6 	vmul.f32	s0, s15, s13
 803749c:	ee10 3a10 	vmov	r3, s0
 80374a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80374a4:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 80374a8:	e73c      	b.n	8037324 <powf+0x2c>
 80374aa:	2000      	movs	r0, #0
 80374ac:	e7ee      	b.n	803748c <powf+0x194>
 80374ae:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 8037590 <powf+0x298>
 80374b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80374b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80374ba:	dd45      	ble.n	8037548 <powf+0x250>
 80374bc:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 80374c0:	b3d0      	cbz	r0, 8037538 <powf+0x240>
 80374c2:	9301      	str	r3, [sp, #4]
 80374c4:	eddd 6a01 	vldr	s13, [sp, #4]
 80374c8:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 80374cc:	ee76 6a66 	vsub.f32	s13, s12, s13
 80374d0:	eef4 6a46 	vcmp.f32	s13, s12
 80374d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80374d8:	f47f af6f 	bne.w	80373ba <powf+0xc2>
 80374dc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80374e0:	4b33      	ldr	r3, [pc, #204]	@ (80375b0 <powf+0x2b8>)
 80374e2:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 80374e6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80374ea:	ee16 2a10 	vmov	r2, s12
 80374ee:	ee36 6b45 	vsub.f64	d6, d6, d5
 80374f2:	f002 011f 	and.w	r1, r2, #31
 80374f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80374fa:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 80374fe:	ee27 4b07 	vmul.f64	d4, d7, d7
 8037502:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 8037506:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 803750a:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 803750e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8037512:	686d      	ldr	r5, [r5, #4]
 8037514:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 8037518:	1880      	adds	r0, r0, r2
 803751a:	2100      	movs	r1, #0
 803751c:	190a      	adds	r2, r1, r4
 803751e:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8037522:	eea7 0b05 	vfma.f64	d0, d7, d5
 8037526:	ec43 2b17 	vmov	d7, r2, r3
 803752a:	eea6 0b04 	vfma.f64	d0, d6, d4
 803752e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8037532:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8037536:	e757      	b.n	80373e8 <powf+0xf0>
 8037538:	9300      	str	r3, [sp, #0]
 803753a:	eddd 6a00 	vldr	s13, [sp]
 803753e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8037542:	ee76 6a86 	vadd.f32	s13, s13, s12
 8037546:	e7c3      	b.n	80374d0 <powf+0x1d8>
 8037548:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8037598 <powf+0x2a0>
 803754c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8037550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8037554:	d804      	bhi.n	8037560 <powf+0x268>
 8037556:	b003      	add	sp, #12
 8037558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 803755c:	f000 b846 	b.w	80375ec <__math_uflowf>
 8037560:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 80375a0 <powf+0x2a8>
 8037564:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8037568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803756c:	d5b6      	bpl.n	80374dc <powf+0x1e4>
 803756e:	b003      	add	sp, #12
 8037570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8037574:	f000 b840 	b.w	80375f8 <__math_may_uflowf>
 8037578:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 803757c:	e734      	b.n	80373e8 <powf+0xf0>
 803757e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80375b4 <powf+0x2bc>
 8037582:	e731      	b.n	80373e8 <powf+0xf0>
 8037584:	f3af 8000 	nop.w
 8037588:	ffd1d571 	.word	0xffd1d571
 803758c:	405fffff 	.word	0x405fffff
 8037590:	ffa3aae2 	.word	0xffa3aae2
 8037594:	405fffff 	.word	0x405fffff
 8037598:	00000000 	.word	0x00000000
 803759c:	c062c000 	.word	0xc062c000
 80375a0:	00000000 	.word	0x00000000
 80375a4:	c062a000 	.word	0xc062a000
 80375a8:	08072c10 	.word	0x08072c10
 80375ac:	4b000000 	.word	0x4b000000
 80375b0:	08072ac8 	.word	0x08072ac8
 80375b4:	00000000 	.word	0x00000000

080375b8 <with_errnof>:
 80375b8:	b510      	push	{r4, lr}
 80375ba:	ed2d 8b02 	vpush	{d8}
 80375be:	eeb0 8a40 	vmov.f32	s16, s0
 80375c2:	4604      	mov	r4, r0
 80375c4:	f7fc fcda 	bl	8033f7c <__errno>
 80375c8:	eeb0 0a48 	vmov.f32	s0, s16
 80375cc:	ecbd 8b02 	vpop	{d8}
 80375d0:	6004      	str	r4, [r0, #0]
 80375d2:	bd10      	pop	{r4, pc}

080375d4 <xflowf>:
 80375d4:	b130      	cbz	r0, 80375e4 <xflowf+0x10>
 80375d6:	eef1 7a40 	vneg.f32	s15, s0
 80375da:	ee27 0a80 	vmul.f32	s0, s15, s0
 80375de:	2022      	movs	r0, #34	@ 0x22
 80375e0:	f7ff bfea 	b.w	80375b8 <with_errnof>
 80375e4:	eef0 7a40 	vmov.f32	s15, s0
 80375e8:	e7f7      	b.n	80375da <xflowf+0x6>
	...

080375ec <__math_uflowf>:
 80375ec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80375f4 <__math_uflowf+0x8>
 80375f0:	f7ff bff0 	b.w	80375d4 <xflowf>
 80375f4:	10000000 	.word	0x10000000

080375f8 <__math_may_uflowf>:
 80375f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8037600 <__math_may_uflowf+0x8>
 80375fc:	f7ff bfea 	b.w	80375d4 <xflowf>
 8037600:	1a200000 	.word	0x1a200000

08037604 <__math_oflowf>:
 8037604:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 803760c <__math_oflowf+0x8>
 8037608:	f7ff bfe4 	b.w	80375d4 <xflowf>
 803760c:	70000000 	.word	0x70000000

08037610 <__math_divzerof>:
 8037610:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8037630 <__math_divzerof+0x20>
 8037614:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8037618:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 803761c:	2800      	cmp	r0, #0
 803761e:	f04f 0022 	mov.w	r0, #34	@ 0x22
 8037622:	fe47 7a87 	vseleq.f32	s15, s15, s14
 8037626:	ee87 0a80 	vdiv.f32	s0, s15, s0
 803762a:	f7ff bfc5 	b.w	80375b8 <with_errnof>
 803762e:	bf00      	nop
 8037630:	00000000 	.word	0x00000000

08037634 <__math_invalidf>:
 8037634:	eef0 7a40 	vmov.f32	s15, s0
 8037638:	ee30 7a40 	vsub.f32	s14, s0, s0
 803763c:	eef4 7a67 	vcmp.f32	s15, s15
 8037640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8037644:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8037648:	d602      	bvs.n	8037650 <__math_invalidf+0x1c>
 803764a:	2021      	movs	r0, #33	@ 0x21
 803764c:	f7ff bfb4 	b.w	80375b8 <with_errnof>
 8037650:	4770      	bx	lr
	...

08037654 <_close>:
 8037654:	4b02      	ldr	r3, [pc, #8]	@ (8037660 <_close+0xc>)
 8037656:	2258      	movs	r2, #88	@ 0x58
 8037658:	601a      	str	r2, [r3, #0]
 803765a:	f04f 30ff 	mov.w	r0, #4294967295
 803765e:	4770      	bx	lr
 8037660:	24052b64 	.word	0x24052b64

08037664 <_fstat>:
 8037664:	4b02      	ldr	r3, [pc, #8]	@ (8037670 <_fstat+0xc>)
 8037666:	2258      	movs	r2, #88	@ 0x58
 8037668:	601a      	str	r2, [r3, #0]
 803766a:	f04f 30ff 	mov.w	r0, #4294967295
 803766e:	4770      	bx	lr
 8037670:	24052b64 	.word	0x24052b64

08037674 <_getpid>:
 8037674:	4b02      	ldr	r3, [pc, #8]	@ (8037680 <_getpid+0xc>)
 8037676:	2258      	movs	r2, #88	@ 0x58
 8037678:	601a      	str	r2, [r3, #0]
 803767a:	f04f 30ff 	mov.w	r0, #4294967295
 803767e:	4770      	bx	lr
 8037680:	24052b64 	.word	0x24052b64

08037684 <_isatty>:
 8037684:	4b02      	ldr	r3, [pc, #8]	@ (8037690 <_isatty+0xc>)
 8037686:	2258      	movs	r2, #88	@ 0x58
 8037688:	601a      	str	r2, [r3, #0]
 803768a:	2000      	movs	r0, #0
 803768c:	4770      	bx	lr
 803768e:	bf00      	nop
 8037690:	24052b64 	.word	0x24052b64

08037694 <_kill>:
 8037694:	4b02      	ldr	r3, [pc, #8]	@ (80376a0 <_kill+0xc>)
 8037696:	2258      	movs	r2, #88	@ 0x58
 8037698:	601a      	str	r2, [r3, #0]
 803769a:	f04f 30ff 	mov.w	r0, #4294967295
 803769e:	4770      	bx	lr
 80376a0:	24052b64 	.word	0x24052b64

080376a4 <_lseek>:
 80376a4:	4b02      	ldr	r3, [pc, #8]	@ (80376b0 <_lseek+0xc>)
 80376a6:	2258      	movs	r2, #88	@ 0x58
 80376a8:	601a      	str	r2, [r3, #0]
 80376aa:	f04f 30ff 	mov.w	r0, #4294967295
 80376ae:	4770      	bx	lr
 80376b0:	24052b64 	.word	0x24052b64

080376b4 <_read>:
 80376b4:	4b02      	ldr	r3, [pc, #8]	@ (80376c0 <_read+0xc>)
 80376b6:	2258      	movs	r2, #88	@ 0x58
 80376b8:	601a      	str	r2, [r3, #0]
 80376ba:	f04f 30ff 	mov.w	r0, #4294967295
 80376be:	4770      	bx	lr
 80376c0:	24052b64 	.word	0x24052b64

080376c4 <_exit>:
 80376c4:	e7fe      	b.n	80376c4 <_exit>
	...

080376c8 <_init>:
 80376c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80376ca:	bf00      	nop
 80376cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80376ce:	bc08      	pop	{r3}
 80376d0:	469e      	mov	lr, r3
 80376d2:	4770      	bx	lr

080376d4 <_fini>:
 80376d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80376d6:	bf00      	nop
 80376d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80376da:	bc08      	pop	{r3}
 80376dc:	469e      	mov	lr, r3
 80376de:	4770      	bx	lr
