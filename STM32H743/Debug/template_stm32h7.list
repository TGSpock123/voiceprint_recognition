
template_stm32h7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c41c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e74  0800c6c0  0800c6c0  0000d6c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d534  0800d534  0000e534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d53c  0800d53c  0000e53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d540  0800d540  0000e540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e0  24000000  0800d544  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00029234  240001e0  0800d724  0000f1e0  2**2
                  ALLOC
  8 ._user_heap_stack 00001000  20000000  20000000  00010000  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f1e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003da0b  00000000  00000000  0000f20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007fec  00000000  00000000  0004cc19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0001711c  00000000  00000000  00054c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001f90  00000000  00000000  0006bd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002346  00000000  00000000  0006dcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00041303  00000000  00000000  0006fffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00039b96  00000000  00000000  000b1301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018fd93  00000000  00000000  000eae97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0027ac2a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006c44  00000000  00000000  0027ac70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000059  00000000  00000000  002818b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c6a4 	.word	0x0800c6a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800c6a4 	.word	0x0800c6a4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9c0 	b.w	8000aa0 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	468e      	mov	lr, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	4688      	mov	r8, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d962      	bls.n	8000884 <__udivmoddi4+0xdc>
 80007be:	fab2 f682 	clz	r6, r2
 80007c2:	b14e      	cbz	r6, 80007d8 <__udivmoddi4+0x30>
 80007c4:	f1c6 0320 	rsb	r3, r6, #32
 80007c8:	fa01 f806 	lsl.w	r8, r1, r6
 80007cc:	fa20 f303 	lsr.w	r3, r0, r3
 80007d0:	40b7      	lsls	r7, r6
 80007d2:	ea43 0808 	orr.w	r8, r3, r8
 80007d6:	40b4      	lsls	r4, r6
 80007d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007dc:	fa1f fc87 	uxth.w	ip, r7
 80007e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007e4:	0c23      	lsrs	r3, r4, #16
 80007e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ee:	fb01 f20c 	mul.w	r2, r1, ip
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d909      	bls.n	800080a <__udivmoddi4+0x62>
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80007fc:	f080 80ea 	bcs.w	80009d4 <__udivmoddi4+0x22c>
 8000800:	429a      	cmp	r2, r3
 8000802:	f240 80e7 	bls.w	80009d4 <__udivmoddi4+0x22c>
 8000806:	3902      	subs	r1, #2
 8000808:	443b      	add	r3, r7
 800080a:	1a9a      	subs	r2, r3, r2
 800080c:	b2a3      	uxth	r3, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800081a:	fb00 fc0c 	mul.w	ip, r0, ip
 800081e:	459c      	cmp	ip, r3
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x8e>
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	f100 32ff 	add.w	r2, r0, #4294967295
 8000828:	f080 80d6 	bcs.w	80009d8 <__udivmoddi4+0x230>
 800082c:	459c      	cmp	ip, r3
 800082e:	f240 80d3 	bls.w	80009d8 <__udivmoddi4+0x230>
 8000832:	443b      	add	r3, r7
 8000834:	3802      	subs	r0, #2
 8000836:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083a:	eba3 030c 	sub.w	r3, r3, ip
 800083e:	2100      	movs	r1, #0
 8000840:	b11d      	cbz	r5, 800084a <__udivmoddi4+0xa2>
 8000842:	40f3      	lsrs	r3, r6
 8000844:	2200      	movs	r2, #0
 8000846:	e9c5 3200 	strd	r3, r2, [r5]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d905      	bls.n	800085e <__udivmoddi4+0xb6>
 8000852:	b10d      	cbz	r5, 8000858 <__udivmoddi4+0xb0>
 8000854:	e9c5 0100 	strd	r0, r1, [r5]
 8000858:	2100      	movs	r1, #0
 800085a:	4608      	mov	r0, r1
 800085c:	e7f5      	b.n	800084a <__udivmoddi4+0xa2>
 800085e:	fab3 f183 	clz	r1, r3
 8000862:	2900      	cmp	r1, #0
 8000864:	d146      	bne.n	80008f4 <__udivmoddi4+0x14c>
 8000866:	4573      	cmp	r3, lr
 8000868:	d302      	bcc.n	8000870 <__udivmoddi4+0xc8>
 800086a:	4282      	cmp	r2, r0
 800086c:	f200 8105 	bhi.w	8000a7a <__udivmoddi4+0x2d2>
 8000870:	1a84      	subs	r4, r0, r2
 8000872:	eb6e 0203 	sbc.w	r2, lr, r3
 8000876:	2001      	movs	r0, #1
 8000878:	4690      	mov	r8, r2
 800087a:	2d00      	cmp	r5, #0
 800087c:	d0e5      	beq.n	800084a <__udivmoddi4+0xa2>
 800087e:	e9c5 4800 	strd	r4, r8, [r5]
 8000882:	e7e2      	b.n	800084a <__udivmoddi4+0xa2>
 8000884:	2a00      	cmp	r2, #0
 8000886:	f000 8090 	beq.w	80009aa <__udivmoddi4+0x202>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	2e00      	cmp	r6, #0
 8000890:	f040 80a4 	bne.w	80009dc <__udivmoddi4+0x234>
 8000894:	1a8a      	subs	r2, r1, r2
 8000896:	0c03      	lsrs	r3, r0, #16
 8000898:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089c:	b280      	uxth	r0, r0
 800089e:	b2bc      	uxth	r4, r7
 80008a0:	2101      	movs	r1, #1
 80008a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ae:	fb04 f20c 	mul.w	r2, r4, ip
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d907      	bls.n	80008c6 <__udivmoddi4+0x11e>
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008bc:	d202      	bcs.n	80008c4 <__udivmoddi4+0x11c>
 80008be:	429a      	cmp	r2, r3
 80008c0:	f200 80e0 	bhi.w	8000a84 <__udivmoddi4+0x2dc>
 80008c4:	46c4      	mov	ip, r8
 80008c6:	1a9b      	subs	r3, r3, r2
 80008c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80008d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008d4:	fb02 f404 	mul.w	r4, r2, r4
 80008d8:	429c      	cmp	r4, r3
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x144>
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	f102 30ff 	add.w	r0, r2, #4294967295
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x142>
 80008e4:	429c      	cmp	r4, r3
 80008e6:	f200 80ca 	bhi.w	8000a7e <__udivmoddi4+0x2d6>
 80008ea:	4602      	mov	r2, r0
 80008ec:	1b1b      	subs	r3, r3, r4
 80008ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008f2:	e7a5      	b.n	8000840 <__udivmoddi4+0x98>
 80008f4:	f1c1 0620 	rsb	r6, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 f706 	lsr.w	r7, r2, r6
 80008fe:	431f      	orrs	r7, r3
 8000900:	fa0e f401 	lsl.w	r4, lr, r1
 8000904:	fa20 f306 	lsr.w	r3, r0, r6
 8000908:	fa2e fe06 	lsr.w	lr, lr, r6
 800090c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000910:	4323      	orrs	r3, r4
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	fa1f fc87 	uxth.w	ip, r7
 800091a:	fbbe f0f9 	udiv	r0, lr, r9
 800091e:	0c1c      	lsrs	r4, r3, #16
 8000920:	fb09 ee10 	mls	lr, r9, r0, lr
 8000924:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000928:	fb00 fe0c 	mul.w	lr, r0, ip
 800092c:	45a6      	cmp	lr, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x1a0>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 3aff 	add.w	sl, r0, #4294967295
 800093a:	f080 809c 	bcs.w	8000a76 <__udivmoddi4+0x2ce>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8099 	bls.w	8000a76 <__udivmoddi4+0x2ce>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	eba4 040e 	sub.w	r4, r4, lr
 800094c:	fa1f fe83 	uxth.w	lr, r3
 8000950:	fbb4 f3f9 	udiv	r3, r4, r9
 8000954:	fb09 4413 	mls	r4, r9, r3, r4
 8000958:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800095c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000960:	45a4      	cmp	ip, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1ce>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f103 3eff 	add.w	lr, r3, #4294967295
 800096a:	f080 8082 	bcs.w	8000a72 <__udivmoddi4+0x2ca>
 800096e:	45a4      	cmp	ip, r4
 8000970:	d97f      	bls.n	8000a72 <__udivmoddi4+0x2ca>
 8000972:	3b02      	subs	r3, #2
 8000974:	443c      	add	r4, r7
 8000976:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800097a:	eba4 040c 	sub.w	r4, r4, ip
 800097e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000982:	4564      	cmp	r4, ip
 8000984:	4673      	mov	r3, lr
 8000986:	46e1      	mov	r9, ip
 8000988:	d362      	bcc.n	8000a50 <__udivmoddi4+0x2a8>
 800098a:	d05f      	beq.n	8000a4c <__udivmoddi4+0x2a4>
 800098c:	b15d      	cbz	r5, 80009a6 <__udivmoddi4+0x1fe>
 800098e:	ebb8 0203 	subs.w	r2, r8, r3
 8000992:	eb64 0409 	sbc.w	r4, r4, r9
 8000996:	fa04 f606 	lsl.w	r6, r4, r6
 800099a:	fa22 f301 	lsr.w	r3, r2, r1
 800099e:	431e      	orrs	r6, r3
 80009a0:	40cc      	lsrs	r4, r1
 80009a2:	e9c5 6400 	strd	r6, r4, [r5]
 80009a6:	2100      	movs	r1, #0
 80009a8:	e74f      	b.n	800084a <__udivmoddi4+0xa2>
 80009aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ae:	0c01      	lsrs	r1, r0, #16
 80009b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ba:	463b      	mov	r3, r7
 80009bc:	4638      	mov	r0, r7
 80009be:	463c      	mov	r4, r7
 80009c0:	46b8      	mov	r8, r7
 80009c2:	46be      	mov	lr, r7
 80009c4:	2620      	movs	r6, #32
 80009c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ca:	eba2 0208 	sub.w	r2, r2, r8
 80009ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009d2:	e766      	b.n	80008a2 <__udivmoddi4+0xfa>
 80009d4:	4601      	mov	r1, r0
 80009d6:	e718      	b.n	800080a <__udivmoddi4+0x62>
 80009d8:	4610      	mov	r0, r2
 80009da:	e72c      	b.n	8000836 <__udivmoddi4+0x8e>
 80009dc:	f1c6 0220 	rsb	r2, r6, #32
 80009e0:	fa2e f302 	lsr.w	r3, lr, r2
 80009e4:	40b7      	lsls	r7, r6
 80009e6:	40b1      	lsls	r1, r6
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f0:	430a      	orrs	r2, r1
 80009f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009f6:	b2bc      	uxth	r4, r7
 80009f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a02:	fb08 f904 	mul.w	r9, r8, r4
 8000a06:	40b0      	lsls	r0, r6
 8000a08:	4589      	cmp	r9, r1
 8000a0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a0e:	b280      	uxth	r0, r0
 8000a10:	d93e      	bls.n	8000a90 <__udivmoddi4+0x2e8>
 8000a12:	1879      	adds	r1, r7, r1
 8000a14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a18:	d201      	bcs.n	8000a1e <__udivmoddi4+0x276>
 8000a1a:	4589      	cmp	r9, r1
 8000a1c:	d81f      	bhi.n	8000a5e <__udivmoddi4+0x2b6>
 8000a1e:	eba1 0109 	sub.w	r1, r1, r9
 8000a22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a26:	fb09 f804 	mul.w	r8, r9, r4
 8000a2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a2e:	b292      	uxth	r2, r2
 8000a30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a34:	4542      	cmp	r2, r8
 8000a36:	d229      	bcs.n	8000a8c <__udivmoddi4+0x2e4>
 8000a38:	18ba      	adds	r2, r7, r2
 8000a3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a3e:	d2c4      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a40:	4542      	cmp	r2, r8
 8000a42:	d2c2      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a44:	f1a9 0102 	sub.w	r1, r9, #2
 8000a48:	443a      	add	r2, r7
 8000a4a:	e7be      	b.n	80009ca <__udivmoddi4+0x222>
 8000a4c:	45f0      	cmp	r8, lr
 8000a4e:	d29d      	bcs.n	800098c <__udivmoddi4+0x1e4>
 8000a50:	ebbe 0302 	subs.w	r3, lr, r2
 8000a54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a58:	3801      	subs	r0, #1
 8000a5a:	46e1      	mov	r9, ip
 8000a5c:	e796      	b.n	800098c <__udivmoddi4+0x1e4>
 8000a5e:	eba7 0909 	sub.w	r9, r7, r9
 8000a62:	4449      	add	r1, r9
 8000a64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a6c:	fb09 f804 	mul.w	r8, r9, r4
 8000a70:	e7db      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a72:	4673      	mov	r3, lr
 8000a74:	e77f      	b.n	8000976 <__udivmoddi4+0x1ce>
 8000a76:	4650      	mov	r0, sl
 8000a78:	e766      	b.n	8000948 <__udivmoddi4+0x1a0>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e6fd      	b.n	800087a <__udivmoddi4+0xd2>
 8000a7e:	443b      	add	r3, r7
 8000a80:	3a02      	subs	r2, #2
 8000a82:	e733      	b.n	80008ec <__udivmoddi4+0x144>
 8000a84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a88:	443b      	add	r3, r7
 8000a8a:	e71c      	b.n	80008c6 <__udivmoddi4+0x11e>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	e79c      	b.n	80009ca <__udivmoddi4+0x222>
 8000a90:	eba1 0109 	sub.w	r1, r1, r9
 8000a94:	46c4      	mov	ip, r8
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	e7c4      	b.n	8000a2a <__udivmoddi4+0x282>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <start_task_audio_capt>:
int16_t audio_buffer_a[AUDIO_BUFFER_SIZE/2];
int16_t audio_buffer_b[AUDIO_BUFFER_SIZE/2];
volatile uint8_t current_buffer = 0; // 0=A, 1=B

void start_task_audio_capt(void *argument)
{
 8000aa4:	b500      	push	{lr}
 8000aa6:	f5ad 4d3b 	sub.w	sp, sp, #47872	@ 0xbb00
  // 启动DMA双缓冲模式接收
  HAL_I2S_Receive_DMA(&hi2s1, (uint16_t*)audio_buffer_a, AUDIO_BUFFER_SIZE/2);
 8000aaa:	f645 52c0 	movw	r2, #24000	@ 0x5dc0
 8000aae:	4916      	ldr	r1, [pc, #88]	@ (8000b08 <start_task_audio_capt+0x64>)
{
 8000ab0:	b0a5      	sub	sp, #148	@ 0x94
  HAL_I2S_Receive_DMA(&hi2s1, (uint16_t*)audio_buffer_a, AUDIO_BUFFER_SIZE/2);
 8000ab2:	4816      	ldr	r0, [pc, #88]	@ (8000b0c <start_task_audio_capt+0x68>)
 8000ab4:	f001 fcf8 	bl	80024a8 <HAL_I2S_Receive_DMA>
 8000ab8:	ac02      	add	r4, sp, #8

  for(;;)
  {
    // 等待DMA传输通知
    uint32_t notification;
    if(xTaskNotifyWait(0, UINT32_MAX, &notification, portMAX_DELAY) == pdTRUE)
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
 8000abe:	aa01      	add	r2, sp, #4
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f005 fdf8 	bl	80066b8 <xTaskNotifyWait>
 8000ac8:	2801      	cmp	r0, #1
 8000aca:	d1f6      	bne.n	8000aba <start_task_audio_capt+0x16>
    {
    	audio_buffer_t audio_data;

      // 确定哪个缓冲区已满并复制数据
      if(notification == BUFFER_A_FULL)
 8000acc:	ab01      	add	r3, sp, #4
      {
        memcpy(audio_data.samples, audio_buffer_a, sizeof(audio_buffer_a));
 8000ace:	f64b 3280 	movw	r2, #48000	@ 0xbb80
      if(notification == BUFFER_A_FULL)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	b9ab      	cbnz	r3, 8000b02 <start_task_audio_capt+0x5e>
        memcpy(audio_data.samples, audio_buffer_a, sizeof(audio_buffer_a));
 8000ad6:	490c      	ldr	r1, [pc, #48]	@ (8000b08 <start_task_audio_capt+0x64>)
      }
      else
      {
        memcpy(audio_data.samples, audio_buffer_b, sizeof(audio_buffer_b));
 8000ad8:	4620      	mov	r0, r4
      }

      audio_data.size = AUDIO_BUFFER_SIZE/2;
 8000ada:	f504 4530 	add.w	r5, r4, #45056	@ 0xb000
        memcpy(audio_data.samples, audio_buffer_b, sizeof(audio_buffer_b));
 8000ade:	f008 fc5a 	bl	8009396 <memcpy>
      audio_data.size = AUDIO_BUFFER_SIZE/2;
 8000ae2:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 8000ae6:	f8c5 3b80 	str.w	r3, [r5, #2944]	@ 0xb80
      audio_data.timestamp = HAL_GetTick();
 8000aea:	f000 fcbd 	bl	8001468 <HAL_GetTick>

      // 发送到处理队列
      xQueueSend(queue_audio_processHandle, &audio_data, 0);
 8000aee:	2300      	movs	r3, #0
      audio_data.timestamp = HAL_GetTick();
 8000af0:	f8c5 0b84 	str.w	r0, [r5, #2948]	@ 0xb84
      xQueueSend(queue_audio_processHandle, &audio_data, 0);
 8000af4:	4806      	ldr	r0, [pc, #24]	@ (8000b10 <start_task_audio_capt+0x6c>)
 8000af6:	a902      	add	r1, sp, #8
 8000af8:	461a      	mov	r2, r3
 8000afa:	6800      	ldr	r0, [r0, #0]
 8000afc:	f004 ff3b 	bl	8005976 <xQueueGenericSend>
  {
 8000b00:	e7db      	b.n	8000aba <start_task_audio_capt+0x16>
        memcpy(audio_data.samples, audio_buffer_b, sizeof(audio_buffer_b));
 8000b02:	4904      	ldr	r1, [pc, #16]	@ (8000b14 <start_task_audio_capt+0x70>)
 8000b04:	e7e8      	b.n	8000ad8 <start_task_audio_capt+0x34>
 8000b06:	bf00      	nop
 8000b08:	2400bd7c 	.word	0x2400bd7c
 8000b0c:	24017994 	.word	0x24017994
 8000b10:	24017904 	.word	0x24017904
 8000b14:	240001fc 	.word	0x240001fc

08000b18 <HAL_I2S_RxHalfCpltCallback>:
  }
}

// DMA中断回调
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000b1a:	2300      	movs	r3, #0
  xTaskNotifyFromISR(task_audio_captHandle, BUFFER_A_FULL, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8000b1c:	aa03      	add	r2, sp, #12
 8000b1e:	480b      	ldr	r0, [pc, #44]	@ (8000b4c <HAL_I2S_RxHalfCpltCallback+0x34>)
 8000b20:	9200      	str	r2, [sp, #0]
 8000b22:	4619      	mov	r1, r3
 8000b24:	2203      	movs	r2, #3
 8000b26:	6800      	ldr	r0, [r0, #0]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000b28:	9303      	str	r3, [sp, #12]
  xTaskNotifyFromISR(task_audio_captHandle, BUFFER_A_FULL, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8000b2a:	f005 fe0f 	bl	800674c <xTaskGenericNotifyFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000b2e:	9b03      	ldr	r3, [sp, #12]
 8000b30:	b14b      	cbz	r3, 8000b46 <HAL_I2S_RxHalfCpltCallback+0x2e>
 8000b32:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b3a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8000b3e:	f3bf 8f4f 	dsb	sy
 8000b42:	f3bf 8f6f 	isb	sy
}
 8000b46:	b005      	add	sp, #20
 8000b48:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b4c:	24017918 	.word	0x24017918

08000b50 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  xTaskNotifyFromISR(task_audio_captHandle, BUFFER_B_FULL, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8000b52:	480c      	ldr	r0, [pc, #48]	@ (8000b84 <HAL_I2S_RxCpltCallback+0x34>)
 8000b54:	aa03      	add	r2, sp, #12
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000b56:	2300      	movs	r3, #0
  xTaskNotifyFromISR(task_audio_captHandle, BUFFER_B_FULL, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8000b58:	2101      	movs	r1, #1
 8000b5a:	9200      	str	r2, [sp, #0]
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	6800      	ldr	r0, [r0, #0]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000b60:	9303      	str	r3, [sp, #12]
  xTaskNotifyFromISR(task_audio_captHandle, BUFFER_B_FULL, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8000b62:	f005 fdf3 	bl	800674c <xTaskGenericNotifyFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000b66:	9b03      	ldr	r3, [sp, #12]
 8000b68:	b14b      	cbz	r3, 8000b7e <HAL_I2S_RxCpltCallback+0x2e>
 8000b6a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b72:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8000b76:	f3bf 8f4f 	dsb	sy
 8000b7a:	f3bf 8f6f 	isb	sy
}
 8000b7e:	b005      	add	sp, #20
 8000b80:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b84:	24017918 	.word	0x24017918

08000b88 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <MX_DMA_Init+0x34>)
{
 8000b8a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b8c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000b90:	2105      	movs	r1, #5
 8000b92:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b94:	f042 0201 	orr.w	r2, r2, #1
 8000b98:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000b9c:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	9301      	str	r3, [sp, #4]
 8000ba8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000baa:	f000 fc99 	bl	80014e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bae:	200b      	movs	r0, #11

}
 8000bb0:	b003      	add	sp, #12
 8000bb2:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bb6:	f000 bcc5 	b.w	8001544 <HAL_NVIC_EnableIRQ>
 8000bba:	bf00      	nop
 8000bbc:	58024400 	.word	0x58024400

08000bc0 <start_task_feature_extr>:
extern osThreadId_t task_feature_exHandle;
extern QueueHandle_t  queue_audio_processHandle;
extern QueueHandle_t  queue_feature_inferenceHandle;

void start_task_feature_extr(void *argument)
{
 8000bc0:	b500      	push	{lr}
 8000bc2:	f5ad 4d3b 	sub.w	sp, sp, #47872	@ 0xbb00
	audio_buffer_t audio_data;

	for(;;)
	{
		if(pdTRUE == xQueueReceive(queue_audio_processHandle, &audio_data, portMAX_DELAY))
 8000bc6:	4d08      	ldr	r5, [pc, #32]	@ (8000be8 <start_task_feature_extr+0x28>)
		{
			SEGGER_RTT_printf(0, "buffer receive:");
 8000bc8:	4c08      	ldr	r4, [pc, #32]	@ (8000bec <start_task_feature_extr+0x2c>)
{
 8000bca:	b0a3      	sub	sp, #140	@ 0x8c
		if(pdTRUE == xQueueReceive(queue_audio_processHandle, &audio_data, portMAX_DELAY))
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd0:	4669      	mov	r1, sp
 8000bd2:	6828      	ldr	r0, [r5, #0]
 8000bd4:	f004 ffde 	bl	8005b94 <xQueueReceive>
 8000bd8:	2801      	cmp	r0, #1
 8000bda:	d1f7      	bne.n	8000bcc <start_task_feature_extr+0xc>
			SEGGER_RTT_printf(0, "buffer receive:");
 8000bdc:	4621      	mov	r1, r4
 8000bde:	2000      	movs	r0, #0
 8000be0:	f006 fd70 	bl	80076c4 <SEGGER_RTT_printf>
 8000be4:	e7f2      	b.n	8000bcc <start_task_feature_extr+0xc>
 8000be6:	bf00      	nop
 8000be8:	24017904 	.word	0x24017904
 8000bec:	0800cd2d 	.word	0x0800cd2d

08000bf0 <start_task_user_inter>:
* @brief Function implementing the task_user_inter thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_task_user_inter */
__weak void start_task_user_inter(void *argument)
 8000bf0:	b508      	push	{r3, lr}
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f004 fce2 	bl	80055bc <osDelay>
 8000bf8:	e7fb      	b.n	8000bf2 <start_task_user_inter+0x2>

08000bfa <start_task_ai_inter>:
__weak void start_task_ai_inter(void *argument)
 8000bfa:	b508      	push	{r3, lr}
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f004 fcdd 	bl	80055bc <osDelay>
 8000c02:	e7fb      	b.n	8000bfc <start_task_ai_inter+0x2>

08000c04 <start_task_result>:
__weak void start_task_result(void *argument)
 8000c04:	b508      	push	{r3, lr}
 8000c06:	2001      	movs	r0, #1
 8000c08:	f004 fcd8 	bl	80055bc <osDelay>
 8000c0c:	e7fb      	b.n	8000c06 <start_task_result+0x2>
	...

08000c10 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000c10:	b508      	push	{r3, lr}
  queue_audio_processHandle = osMessageQueueNew (3, sizeof(uint32_t), &queue_audio_process_attributes);
 8000c12:	4a1c      	ldr	r2, [pc, #112]	@ (8000c84 <MX_FREERTOS_Init+0x74>)
 8000c14:	2104      	movs	r1, #4
 8000c16:	2003      	movs	r0, #3
 8000c18:	f004 fcdc 	bl	80055d4 <osMessageQueueNew>
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <MX_FREERTOS_Init+0x78>)
  queue_feature_inferenceHandle = osMessageQueueNew (2, sizeof(uint32_t), &queue_feature_inference_attributes);
 8000c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8000c8c <MX_FREERTOS_Init+0x7c>)
 8000c20:	2104      	movs	r1, #4
  queue_audio_processHandle = osMessageQueueNew (3, sizeof(uint32_t), &queue_audio_process_attributes);
 8000c22:	6018      	str	r0, [r3, #0]
  queue_feature_inferenceHandle = osMessageQueueNew (2, sizeof(uint32_t), &queue_feature_inference_attributes);
 8000c24:	2002      	movs	r0, #2
 8000c26:	f004 fcd5 	bl	80055d4 <osMessageQueueNew>
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <MX_FREERTOS_Init+0x80>)
  queue_system_statusHandle = osMessageQueueNew (5, sizeof(uint32_t), &queue_system_status_attributes);
 8000c2c:	4a19      	ldr	r2, [pc, #100]	@ (8000c94 <MX_FREERTOS_Init+0x84>)
 8000c2e:	2104      	movs	r1, #4
  queue_feature_inferenceHandle = osMessageQueueNew (2, sizeof(uint32_t), &queue_feature_inference_attributes);
 8000c30:	6018      	str	r0, [r3, #0]
  queue_system_statusHandle = osMessageQueueNew (5, sizeof(uint32_t), &queue_system_status_attributes);
 8000c32:	2005      	movs	r0, #5
 8000c34:	f004 fcce 	bl	80055d4 <osMessageQueueNew>
 8000c38:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <MX_FREERTOS_Init+0x88>)
  task_audio_captHandle = osThreadNew(start_task_audio_capt, NULL, &task_audio_capt_attributes);
 8000c3a:	4a18      	ldr	r2, [pc, #96]	@ (8000c9c <MX_FREERTOS_Init+0x8c>)
 8000c3c:	2100      	movs	r1, #0
  queue_system_statusHandle = osMessageQueueNew (5, sizeof(uint32_t), &queue_system_status_attributes);
 8000c3e:	6018      	str	r0, [r3, #0]
  task_audio_captHandle = osThreadNew(start_task_audio_capt, NULL, &task_audio_capt_attributes);
 8000c40:	4817      	ldr	r0, [pc, #92]	@ (8000ca0 <MX_FREERTOS_Init+0x90>)
 8000c42:	f004 fc77 	bl	8005534 <osThreadNew>
 8000c46:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <MX_FREERTOS_Init+0x94>)
  task_feature_exHandle = osThreadNew(start_task_feature_extr, NULL, &task_feature_ex_attributes);
 8000c48:	4a17      	ldr	r2, [pc, #92]	@ (8000ca8 <MX_FREERTOS_Init+0x98>)
 8000c4a:	2100      	movs	r1, #0
  task_audio_captHandle = osThreadNew(start_task_audio_capt, NULL, &task_audio_capt_attributes);
 8000c4c:	6018      	str	r0, [r3, #0]
  task_feature_exHandle = osThreadNew(start_task_feature_extr, NULL, &task_feature_ex_attributes);
 8000c4e:	4817      	ldr	r0, [pc, #92]	@ (8000cac <MX_FREERTOS_Init+0x9c>)
 8000c50:	f004 fc70 	bl	8005534 <osThreadNew>
 8000c54:	4b16      	ldr	r3, [pc, #88]	@ (8000cb0 <MX_FREERTOS_Init+0xa0>)
  task_ai_interHandle = osThreadNew(start_task_ai_inter, NULL, &task_ai_inter_attributes);
 8000c56:	4a17      	ldr	r2, [pc, #92]	@ (8000cb4 <MX_FREERTOS_Init+0xa4>)
 8000c58:	2100      	movs	r1, #0
  task_feature_exHandle = osThreadNew(start_task_feature_extr, NULL, &task_feature_ex_attributes);
 8000c5a:	6018      	str	r0, [r3, #0]
  task_ai_interHandle = osThreadNew(start_task_ai_inter, NULL, &task_ai_inter_attributes);
 8000c5c:	4816      	ldr	r0, [pc, #88]	@ (8000cb8 <MX_FREERTOS_Init+0xa8>)
 8000c5e:	f004 fc69 	bl	8005534 <osThreadNew>
 8000c62:	4b16      	ldr	r3, [pc, #88]	@ (8000cbc <MX_FREERTOS_Init+0xac>)
  task_resultHandle = osThreadNew(start_task_result, NULL, &task_result_attributes);
 8000c64:	4a16      	ldr	r2, [pc, #88]	@ (8000cc0 <MX_FREERTOS_Init+0xb0>)
 8000c66:	2100      	movs	r1, #0
  task_ai_interHandle = osThreadNew(start_task_ai_inter, NULL, &task_ai_inter_attributes);
 8000c68:	6018      	str	r0, [r3, #0]
  task_resultHandle = osThreadNew(start_task_result, NULL, &task_result_attributes);
 8000c6a:	4816      	ldr	r0, [pc, #88]	@ (8000cc4 <MX_FREERTOS_Init+0xb4>)
 8000c6c:	f004 fc62 	bl	8005534 <osThreadNew>
 8000c70:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <MX_FREERTOS_Init+0xb8>)
  task_user_interHandle = osThreadNew(start_task_user_inter, NULL, &task_user_inter_attributes);
 8000c72:	4a16      	ldr	r2, [pc, #88]	@ (8000ccc <MX_FREERTOS_Init+0xbc>)
 8000c74:	2100      	movs	r1, #0
  task_resultHandle = osThreadNew(start_task_result, NULL, &task_result_attributes);
 8000c76:	6018      	str	r0, [r3, #0]
  task_user_interHandle = osThreadNew(start_task_user_inter, NULL, &task_user_inter_attributes);
 8000c78:	4815      	ldr	r0, [pc, #84]	@ (8000cd0 <MX_FREERTOS_Init+0xc0>)
 8000c7a:	f004 fc5b 	bl	8005534 <osThreadNew>
 8000c7e:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <MX_FREERTOS_Init+0xc4>)
 8000c80:	6018      	str	r0, [r3, #0]
}
 8000c82:	bd08      	pop	{r3, pc}
 8000c84:	0800d138 	.word	0x0800d138
 8000c88:	24017904 	.word	0x24017904
 8000c8c:	0800d120 	.word	0x0800d120
 8000c90:	24017900 	.word	0x24017900
 8000c94:	0800d108 	.word	0x0800d108
 8000c98:	240178fc 	.word	0x240178fc
 8000c9c:	0800d1e0 	.word	0x0800d1e0
 8000ca0:	08000aa5 	.word	0x08000aa5
 8000ca4:	24017918 	.word	0x24017918
 8000ca8:	0800d1bc 	.word	0x0800d1bc
 8000cac:	08000bc1 	.word	0x08000bc1
 8000cb0:	24017914 	.word	0x24017914
 8000cb4:	0800d198 	.word	0x0800d198
 8000cb8:	08000bfb 	.word	0x08000bfb
 8000cbc:	24017910 	.word	0x24017910
 8000cc0:	0800d174 	.word	0x0800d174
 8000cc4:	08000c05 	.word	0x08000c05
 8000cc8:	2401790c 	.word	0x2401790c
 8000ccc:	0800d150 	.word	0x0800d150
 8000cd0:	08000bf1 	.word	0x08000bf1
 8000cd4:	24017908 	.word	0x24017908

08000cd8 <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd8:	4b19      	ldr	r3, [pc, #100]	@ (8000d40 <MX_GPIO_Init+0x68>)
{
 8000cda:	b084      	sub	sp, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cdc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ce0:	f042 0204 	orr.w	r2, r2, #4
 8000ce4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000ce8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000cec:	f002 0204 	and.w	r2, r2, #4
 8000cf0:	9200      	str	r2, [sp, #0]
 8000cf2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000cf8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000cfc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000d00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000d04:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000d08:	9201      	str	r2, [sp, #4]
 8000d0a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000d10:	f042 0201 	orr.w	r2, r2, #1
 8000d14:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000d18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000d1c:	f002 0201 	and.w	r2, r2, #1
 8000d20:	9202      	str	r2, [sp, #8]
 8000d22:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000d28:	f042 0202 	orr.w	r2, r2, #2
 8000d2c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	9303      	str	r3, [sp, #12]
 8000d3a:	9b03      	ldr	r3, [sp, #12]

}
 8000d3c:	b004      	add	sp, #16
 8000d3e:	4770      	bx	lr
 8000d40:	58024400 	.word	0x58024400

08000d44 <MX_I2S1_Init>:
I2S_HandleTypeDef hi2s1;
DMA_HandleTypeDef hdma_spi1_rx;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8000d44:	b508      	push	{r3, lr}
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000d46:	480d      	ldr	r0, [pc, #52]	@ (8000d7c <MX_I2S1_Init+0x38>)
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000d48:	2306      	movs	r3, #6
 8000d4a:	4a0d      	ldr	r2, [pc, #52]	@ (8000d80 <MX_I2S1_Init+0x3c>)
 8000d4c:	e9c0 2300 	strd	r2, r3, [r0]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d56:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000d5a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000d5e:	6103      	str	r3, [r0, #16]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000d60:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000d64:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000d68:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000d6c:	f001 faf4 	bl	8002358 <HAL_I2S_Init>
 8000d70:	b118      	cbz	r0, 8000d7a <MX_I2S1_Init+0x36>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000d72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000d76:	f000 b93f 	b.w	8000ff8 <Error_Handler>
}
 8000d7a:	bd08      	pop	{r3, pc}
 8000d7c:	24017994 	.word	0x24017994
 8000d80:	40013000 	.word	0x40013000

08000d84 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d88:	b0b8      	sub	sp, #224	@ 0xe0
 8000d8a:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	2214      	movs	r2, #20
 8000d8e:	2100      	movs	r1, #0
 8000d90:	a803      	add	r0, sp, #12
 8000d92:	f008 f9eb 	bl	800916c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d96:	22c0      	movs	r2, #192	@ 0xc0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	a808      	add	r0, sp, #32
 8000d9c:	f008 f9e6 	bl	800916c <memset>
  if(i2sHandle->Instance==SPI1)
 8000da0:	682a      	ldr	r2, [r5, #0]
 8000da2:	4b36      	ldr	r3, [pc, #216]	@ (8000e7c <HAL_I2S_MspInit+0xf8>)
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d165      	bne.n	8000e74 <HAL_I2S_MspInit+0xf0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    PeriphClkInitStruct.PLL2.PLL2M = 25;
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 8000dae:	2419      	movs	r4, #25
    PeriphClkInitStruct.PLL2.PLL2R = 2;
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db0:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000db2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 8000db6:	23c8      	movs	r3, #200	@ 0xc8
 8000db8:	e9cd 430a 	strd	r4, r3, [sp, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2P = 1;
 8000dbc:	2301      	movs	r3, #1
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8000dbe:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	930e      	str	r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dca:	9320      	str	r3, [sp, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dcc:	f002 f9dc 	bl	8003188 <HAL_RCCEx_PeriphCLKConfig>
 8000dd0:	b108      	cbz	r0, 8000dd6 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000dd2:	f000 f911 	bl	8000ff8 <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e80 <HAL_I2S_MspInit+0xfc>)
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2600      	movs	r6, #0
 8000ddc:	f04f 0803 	mov.w	r8, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000de0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000de4:	2705      	movs	r7, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	a903      	add	r1, sp, #12
 8000de8:	4826      	ldr	r0, [pc, #152]	@ (8000e84 <HAL_I2S_MspInit+0x100>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000dee:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8000df2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000df6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8000dfa:	9201      	str	r2, [sp, #4]
 8000dfc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000e02:	f042 0201 	orr.w	r2, r2, #1
 8000e06:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e0e:	9707      	str	r7, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	9302      	str	r3, [sp, #8]
 8000e16:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2330      	movs	r3, #48	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	e9cd 6805 	strd	r6, r8, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f001 f9b1 	bl	8002188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e26:	2340      	movs	r3, #64	@ 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	a903      	add	r1, sp, #12
 8000e2a:	4816      	ldr	r0, [pc, #88]	@ (8000e84 <HAL_I2S_MspInit+0x100>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e2c:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	e9cd 4805 	strd	r4, r8, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f001 f9a7 	bl	8002188 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8000e3a:	4c13      	ldr	r4, [pc, #76]	@ (8000e88 <HAL_I2S_MspInit+0x104>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000e3c:	2325      	movs	r3, #37	@ 0x25
 8000e3e:	4a13      	ldr	r2, [pc, #76]	@ (8000e8c <HAL_I2S_MspInit+0x108>)
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000e44:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000e48:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e50:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000e54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e58:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000e5c:	4620      	mov	r0, r4
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e5e:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e62:	e9c4 6608 	strd	r6, r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000e66:	f000 fd3b 	bl	80018e0 <HAL_DMA_Init>
 8000e6a:	b108      	cbz	r0, 8000e70 <HAL_I2S_MspInit+0xec>
    {
      Error_Handler();
 8000e6c:	f000 f8c4 	bl	8000ff8 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi1_rx);
 8000e70:	64ac      	str	r4, [r5, #72]	@ 0x48
 8000e72:	63a5      	str	r5, [r4, #56]	@ 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e74:	b038      	add	sp, #224	@ 0xe0
 8000e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40013000 	.word	0x40013000
 8000e80:	58024400 	.word	0x58024400
 8000e84:	58020000 	.word	0x58020000
 8000e88:	2401791c 	.word	0x2401791c
 8000e8c:	40020010 	.word	0x40020010

08000e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e90:	b510      	push	{r4, lr}
 8000e92:	b09c      	sub	sp, #112	@ 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e94:	224c      	movs	r2, #76	@ 0x4c
 8000e96:	2100      	movs	r1, #0
 8000e98:	a809      	add	r0, sp, #36	@ 0x24
 8000e9a:	f008 f967 	bl	800916c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9e:	2220      	movs	r2, #32
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	a801      	add	r0, sp, #4
 8000ea4:	f008 f962 	bl	800916c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ea8:	2002      	movs	r0, #2
 8000eaa:	f001 fb7d 	bl	80025a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000eae:	2300      	movs	r3, #0
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <SystemClock_Config+0xb4>)
 8000eb4:	699a      	ldr	r2, [r3, #24]
 8000eb6:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000eba:	619a      	str	r2, [r3, #24]
 8000ebc:	699a      	ldr	r2, [r3, #24]
 8000ebe:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000ec2:	9200      	str	r2, [sp, #0]
 8000ec4:	4a20      	ldr	r2, [pc, #128]	@ (8000f48 <SystemClock_Config+0xb8>)
 8000ec6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8000ec8:	f041 0101 	orr.w	r1, r1, #1
 8000ecc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8000ece:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000ed0:	f002 0201 	and.w	r2, r2, #1
 8000ed4:	9200      	str	r2, [sp, #0]
 8000ed6:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ed8:	699a      	ldr	r2, [r3, #24]
 8000eda:	0492      	lsls	r2, r2, #18
 8000edc:	d5fc      	bpl.n	8000ed8 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ede:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ee2:	2109      	movs	r1, #9
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ee4:	2405      	movs	r4, #5
 8000ee6:	22c0      	movs	r2, #192	@ 0xc0
  RCC_OscInitStruct.PLL.PLLQ = 20;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee8:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000eea:	e9cd 1309 	strd	r1, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000eee:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ef0:	e9cd 4214 	strd	r4, r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ef4:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000ef6:	2214      	movs	r2, #20
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef8:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000efa:	2408      	movs	r4, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000efc:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f00:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f02:	e9cd 2317 	strd	r2, r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e9cd 4319 	strd	r4, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f0c:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0e:	f001 fb6f 	bl	80025f0 <HAL_RCC_OscConfig>
 8000f12:	b108      	cbz	r0, 8000f18 <SystemClock_Config+0x88>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <SystemClock_Config+0x86>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f18:	223f      	movs	r2, #63	@ 0x3f
 8000f1a:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f1c:	2107      	movs	r1, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f1e:	e9cd 2301 	strd	r2, r3, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f22:	2340      	movs	r3, #64	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f28:	e9cd 0403 	strd	r0, r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f2c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f2e:	e9cd 3305 	strd	r3, r3, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f32:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f36:	f001 fea5 	bl	8002c84 <HAL_RCC_ClockConfig>
 8000f3a:	b108      	cbz	r0, 8000f40 <SystemClock_Config+0xb0>
 8000f3c:	b672      	cpsid	i
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <SystemClock_Config+0xae>
}
 8000f40:	b01c      	add	sp, #112	@ 0x70
 8000f42:	bd10      	pop	{r4, pc}
 8000f44:	58024800 	.word	0x58024800
 8000f48:	58000400 	.word	0x58000400

08000f4c <main>:
{
 8000f4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f4e:	2100      	movs	r1, #0
 8000f50:	2210      	movs	r2, #16
 8000f52:	4668      	mov	r0, sp
 8000f54:	f008 f90a 	bl	800916c <memset>
  HAL_MPU_Disable();
 8000f58:	f000 fb02 	bl	8001560 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f5c:	2301      	movs	r3, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f5e:	2200      	movs	r2, #0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f60:	4668      	mov	r0, sp
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f62:	f8ad 3000 	strh.w	r3, [sp]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f66:	f248 731f 	movw	r3, #34591	@ 0x871f
 8000f6a:	e9cd 2301 	strd	r2, r3, [sp, #4]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f6e:	f240 1301 	movw	r3, #257	@ 0x101
 8000f72:	9303      	str	r3, [sp, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f74:	f000 fb12 	bl	800159c <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f78:	2004      	movs	r0, #4
 8000f7a:	f000 faff 	bl	800157c <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f7e:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <main+0x94>)
 8000f80:	695a      	ldr	r2, [r3, #20]
 8000f82:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 8000f86:	d111      	bne.n	8000fac <main+0x60>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f8c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f90:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f98:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f9c:	695a      	ldr	r2, [r3, #20]
 8000f9e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000fa2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000fac:	f000 fa22 	bl	80013f4 <HAL_Init>
  SystemClock_Config();
 8000fb0:	f7ff ff6e 	bl	8000e90 <SystemClock_Config>
  MX_GPIO_Init();
 8000fb4:	f7ff fe90 	bl	8000cd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb8:	f7ff fde6 	bl	8000b88 <MX_DMA_Init>
  MX_RTC_Init();
 8000fbc:	f000 f81e 	bl	8000ffc <MX_RTC_Init>
  MX_I2S1_Init();
 8000fc0:	f7ff fec0 	bl	8000d44 <MX_I2S1_Init>
  MX_X_CUBE_AI_Init();
 8000fc4:	f006 fd3e 	bl	8007a44 <MX_X_CUBE_AI_Init>
  app_elog_init();
 8000fc8:	f004 fa40 	bl	800544c <app_elog_init>
  SEGGER_RTT_Init();
 8000fcc:	f006 f9a4 	bl	8007318 <SEGGER_RTT_Init>
  osKernelInitialize();
 8000fd0:	f004 fa84 	bl	80054dc <osKernelInitialize>
  MX_FREERTOS_Init();
 8000fd4:	f7ff fe1c 	bl	8000c10 <MX_FREERTOS_Init>
  osKernelStart();
 8000fd8:	f004 fa92 	bl	8005500 <osKernelStart>
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <main+0x90>
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6)
 8000fe4:	6802      	ldr	r2, [r0, #0]
 8000fe6:	4b03      	ldr	r3, [pc, #12]	@ (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d101      	bne.n	8000ff0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000fec:	f000 ba30 	b.w	8001450 <HAL_IncTick>
}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40001000 	.word	0x40001000

08000ff8 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff8:	b672      	cpsid	i
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <Error_Handler+0x2>

08000ffc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ffc:	b508      	push	{r3, lr}

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ffe:	480a      	ldr	r0, [pc, #40]	@ (8001028 <MX_RTC_Init+0x2c>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001000:	2300      	movs	r3, #0
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <MX_RTC_Init+0x30>)
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
 8001004:	217f      	movs	r1, #127	@ 0x7f
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001006:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001008:	6143      	str	r3, [r0, #20]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800100a:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.SynchPrediv = 255;
 800100e:	22ff      	movs	r2, #255	@ 0xff
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001010:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hrtc.Init.SynchPrediv = 255;
 8001014:	e9c0 1202 	strd	r1, r2, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001018:	f003 f972 	bl	8004300 <HAL_RTC_Init>
 800101c:	b118      	cbz	r0, 8001026 <MX_RTC_Init+0x2a>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800101e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001022:	f7ff bfe9 	b.w	8000ff8 <Error_Handler>
}
 8001026:	bd08      	pop	{r3, pc}
 8001028:	240179e8 	.word	0x240179e8
 800102c:	58004000 	.word	0x58004000

08001030 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001030:	b510      	push	{r4, lr}
 8001032:	b0b0      	sub	sp, #192	@ 0xc0
 8001034:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001036:	22c0      	movs	r2, #192	@ 0xc0
 8001038:	2100      	movs	r1, #0
 800103a:	4668      	mov	r0, sp
 800103c:	f008 f896 	bl	800916c <memset>
  if(rtcHandle->Instance==RTC)
 8001040:	6822      	ldr	r2, [r4, #0]
 8001042:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <HAL_RTC_MspInit+0x44>)
 8001044:	429a      	cmp	r2, r3
 8001046:	d112      	bne.n	800106e <HAL_RTC_MspInit+0x3e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001048:	2300      	movs	r3, #0
 800104a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800104e:	4668      	mov	r0, sp
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001050:	e9cd 2300 	strd	r2, r3, [sp]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001054:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001058:	932d      	str	r3, [sp, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105a:	f002 f895 	bl	8003188 <HAL_RCCEx_PeriphCLKConfig>
 800105e:	b108      	cbz	r0, 8001064 <HAL_RTC_MspInit+0x34>
    {
      Error_Handler();
 8001060:	f7ff ffca 	bl	8000ff8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001064:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <HAL_RTC_MspInit+0x48>)
 8001066:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001068:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800106c:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800106e:	b030      	add	sp, #192	@ 0xc0
 8001070:	bd10      	pop	{r4, pc}
 8001072:	bf00      	nop
 8001074:	58004000 	.word	0x58004000
 8001078:	58024400 	.word	0x58024400

0800107c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107c:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_MspInit+0x2c>)
{
 800107e:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001080:	210f      	movs	r1, #15
 8001082:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800108a:	f042 0202 	orr.w	r2, r2, #2
 800108e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001092:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001094:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a0:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010a2:	f000 ba1d 	b.w	80014e0 <HAL_NVIC_SetPriority>
 80010a6:	bf00      	nop
 80010a8:	58024400 	.word	0x58024400

080010ac <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ac:	280f      	cmp	r0, #15
{
 80010ae:	b510      	push	{r4, lr}
 80010b0:	4604      	mov	r4, r0
 80010b2:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b4:	d902      	bls.n	80010bc <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80010b6:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80010b8:	b00a      	add	sp, #40	@ 0x28
 80010ba:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80010bc:	4601      	mov	r1, r0
 80010be:	2200      	movs	r2, #0
 80010c0:	2036      	movs	r0, #54	@ 0x36
 80010c2:	f000 fa0d 	bl	80014e0 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010c6:	2036      	movs	r0, #54	@ 0x36
 80010c8:	f000 fa3c 	bl	8001544 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80010cc:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010ce:	4669      	mov	r1, sp
 80010d0:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 80010d2:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010d4:	4b17      	ldr	r3, [pc, #92]	@ (8001134 <HAL_InitTick+0x88>)
 80010d6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80010da:	f042 0210 	orr.w	r2, r2, #16
 80010de:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80010e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010ee:	f001 ff35 	bl	8002f5c <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010f2:	9b07      	ldr	r3, [sp, #28]
 80010f4:	b9c3      	cbnz	r3, 8001128 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010f6:	f001 ff0d 	bl	8002f14 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80010fa:	4c0f      	ldr	r4, [pc, #60]	@ (8001138 <HAL_InitTick+0x8c>)
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <HAL_InitTick+0x90>)
 80010fe:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001100:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001104:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <HAL_InitTick+0x94>)
 8001108:	fbb0 f0f3 	udiv	r0, r0, r3
 800110c:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 800110e:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001110:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001112:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001114:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001116:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001118:	f003 fabe 	bl	8004698 <HAL_TIM_Base_Init>
 800111c:	2800      	cmp	r0, #0
 800111e:	d1ca      	bne.n	80010b6 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001120:	4620      	mov	r0, r4
 8001122:	f003 f983 	bl	800442c <HAL_TIM_Base_Start_IT>
 8001126:	e7c7      	b.n	80010b8 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001128:	f001 fef4 	bl	8002f14 <HAL_RCC_GetPCLK1Freq>
 800112c:	0040      	lsls	r0, r0, #1
 800112e:	e7e4      	b.n	80010fa <HAL_InitTick+0x4e>
 8001130:	2400000c 	.word	0x2400000c
 8001134:	58024400 	.word	0x58024400
 8001138:	24017a0c 	.word	0x24017a0c
 800113c:	40001000 	.word	0x40001000
 8001140:	000f4240 	.word	0x000f4240

08001144 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001144:	e7fe      	b.n	8001144 <NMI_Handler>

08001146 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <HardFault_Handler>

08001148 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <MemManage_Handler>

0800114a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler>

0800114c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <UsageFault_Handler>

0800114e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114e:	4770      	bx	lr

08001150 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001150:	4801      	ldr	r0, [pc, #4]	@ (8001158 <DMA1_Stream0_IRQHandler+0x8>)
 8001152:	f000 be49 	b.w	8001de8 <HAL_DMA_IRQHandler>
 8001156:	bf00      	nop
 8001158:	2401791c 	.word	0x2401791c

0800115c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800115c:	4801      	ldr	r0, [pc, #4]	@ (8001164 <TIM6_DAC_IRQHandler+0x8>)
 800115e:	f003 b9a7 	b.w	80044b0 <HAL_TIM_IRQHandler>
 8001162:	bf00      	nop
 8001164:	24017a0c 	.word	0x24017a0c

08001168 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001168:	4a0b      	ldr	r2, [pc, #44]	@ (8001198 <_sbrk+0x30>)
{
 800116a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800116c:	6811      	ldr	r1, [r2, #0]
{
 800116e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001170:	b909      	cbnz	r1, 8001176 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001172:	490a      	ldr	r1, [pc, #40]	@ (800119c <_sbrk+0x34>)
 8001174:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001176:	6810      	ldr	r0, [r2, #0]
 8001178:	4909      	ldr	r1, [pc, #36]	@ (80011a0 <_sbrk+0x38>)
 800117a:	4c0a      	ldr	r4, [pc, #40]	@ (80011a4 <_sbrk+0x3c>)
 800117c:	4403      	add	r3, r0
 800117e:	1b09      	subs	r1, r1, r4
 8001180:	428b      	cmp	r3, r1
 8001182:	d906      	bls.n	8001192 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001184:	f008 f8da 	bl	800933c <__errno>
 8001188:	230c      	movs	r3, #12
 800118a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800118c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001190:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001192:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001194:	e7fc      	b.n	8001190 <_sbrk+0x28>
 8001196:	bf00      	nop
 8001198:	24017a58 	.word	0x24017a58
 800119c:	20000000 	.word	0x20000000
 80011a0:	24080000 	.word	0x24080000
 80011a4:	00000800 	.word	0x00000800

080011a8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001264 <SystemInit+0xbc>)
 80011aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80011ae:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011b2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001268 <SystemInit+0xc0>)
 80011b8:	6813      	ldr	r3, [r2, #0]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d805      	bhi.n	80011ce <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011c2:	6813      	ldr	r3, [r2, #0]
 80011c4:	f023 030f 	bic.w	r3, r3, #15
 80011c8:	f043 0307 	orr.w	r3, r3, #7
 80011cc:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011ce:	4b27      	ldr	r3, [pc, #156]	@ (800126c <SystemInit+0xc4>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	f042 0201 	orr.w	r2, r2, #1
 80011d6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011dc:	4a24      	ldr	r2, [pc, #144]	@ (8001270 <SystemInit+0xc8>)
 80011de:	6819      	ldr	r1, [r3, #0]
 80011e0:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011e2:	4921      	ldr	r1, [pc, #132]	@ (8001268 <SystemInit+0xc0>)
  RCC->CR &= 0xEAF6ED7FU;
 80011e4:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011e6:	680a      	ldr	r2, [r1, #0]
 80011e8:	0710      	lsls	r0, r2, #28
 80011ea:	d505      	bpl.n	80011f8 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011ec:	680a      	ldr	r2, [r1, #0]
 80011ee:	f022 020f 	bic.w	r2, r2, #15
 80011f2:	f042 0207 	orr.w	r2, r2, #7
 80011f6:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011f8:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011fa:	491e      	ldr	r1, [pc, #120]	@ (8001274 <SystemInit+0xcc>)
  RCC->D1CFGR = 0x00000000;
 80011fc:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80011fe:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001200:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8001202:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001204:	491c      	ldr	r1, [pc, #112]	@ (8001278 <SystemInit+0xd0>)
 8001206:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001208:	491c      	ldr	r1, [pc, #112]	@ (800127c <SystemInit+0xd4>)
 800120a:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800120c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800120e:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001210:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001212:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001214:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001216:	6819      	ldr	r1, [r3, #0]
 8001218:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 800121c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800121e:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001220:	4b17      	ldr	r3, [pc, #92]	@ (8001280 <SystemInit+0xd8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f36f 030f 	bfc	r3, #0, #16
 8001228:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800122c:	d203      	bcs.n	8001236 <SystemInit+0x8e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <SystemInit+0xdc>)
 8001230:	2201      	movs	r2, #1
 8001232:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001236:	4b0d      	ldr	r3, [pc, #52]	@ (800126c <SystemInit+0xc4>)
 8001238:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800123c:	04d2      	lsls	r2, r2, #19
 800123e:	d40f      	bmi.n	8001260 <SystemInit+0xb8>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001240:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001244:	f243 01d2 	movw	r1, #12498	@ 0x30d2
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001248:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800124c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001250:	4a0d      	ldr	r2, [pc, #52]	@ (8001288 <SystemInit+0xe0>)
 8001252:	6011      	str	r1, [r2, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001254:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001258:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800125c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00
 8001268:	52002000 	.word	0x52002000
 800126c:	58024400 	.word	0x58024400
 8001270:	eaf6ed7f 	.word	0xeaf6ed7f
 8001274:	02020200 	.word	0x02020200
 8001278:	01ff0000 	.word	0x01ff0000
 800127c:	01010280 	.word	0x01010280
 8001280:	5c001000 	.word	0x5c001000
 8001284:	51008000 	.word	0x51008000
 8001288:	52004000 	.word	0x52004000

0800128c <ExitRun0Mode>:
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800128c:	4b04      	ldr	r3, [pc, #16]	@ (80012a0 <ExitRun0Mode+0x14>)
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	f042 0202 	orr.w	r2, r2, #2
 8001294:	60da      	str	r2, [r3, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	0492      	lsls	r2, r2, #18
 800129a:	d5fc      	bpl.n	8001296 <ExitRun0Mode+0xa>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	58024800 	.word	0x58024800

080012a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012a4:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012a6:	4816      	ldr	r0, [pc, #88]	@ (8001300 <MX_USART1_UART_Init+0x5c>)
  huart1.Init.BaudRate = 115200;
 80012a8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80012ac:	4a15      	ldr	r2, [pc, #84]	@ (8001304 <MX_USART1_UART_Init+0x60>)
 80012ae:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012b4:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012b6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ba:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012bc:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012c0:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c4:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012c8:	f003 fd11 	bl	8004cee <HAL_UART_Init>
 80012cc:	b108      	cbz	r0, 80012d2 <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 80012ce:	f7ff fe93 	bl	8000ff8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d2:	2100      	movs	r1, #0
 80012d4:	480a      	ldr	r0, [pc, #40]	@ (8001300 <MX_USART1_UART_Init+0x5c>)
 80012d6:	f003 fd78 	bl	8004dca <HAL_UARTEx_SetTxFifoThreshold>
 80012da:	b108      	cbz	r0, 80012e0 <MX_USART1_UART_Init+0x3c>
  {
    Error_Handler();
 80012dc:	f7ff fe8c 	bl	8000ff8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e0:	2100      	movs	r1, #0
 80012e2:	4807      	ldr	r0, [pc, #28]	@ (8001300 <MX_USART1_UART_Init+0x5c>)
 80012e4:	f003 fd91 	bl	8004e0a <HAL_UARTEx_SetRxFifoThreshold>
 80012e8:	b108      	cbz	r0, 80012ee <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 80012ea:	f7ff fe85 	bl	8000ff8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012ee:	4804      	ldr	r0, [pc, #16]	@ (8001300 <MX_USART1_UART_Init+0x5c>)
 80012f0:	f003 fd50 	bl	8004d94 <HAL_UARTEx_DisableFifoMode>
 80012f4:	b118      	cbz	r0, 80012fe <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80012fa:	f7ff be7d 	b.w	8000ff8 <Error_Handler>
}
 80012fe:	bd08      	pop	{r3, pc}
 8001300:	24017a5c 	.word	0x24017a5c
 8001304:	40011000 	.word	0x40011000

08001308 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001308:	b510      	push	{r4, lr}
 800130a:	b0b8      	sub	sp, #224	@ 0xe0
 800130c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130e:	2214      	movs	r2, #20
 8001310:	2100      	movs	r1, #0
 8001312:	a803      	add	r0, sp, #12
 8001314:	f007 ff2a 	bl	800916c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001318:	22c0      	movs	r2, #192	@ 0xc0
 800131a:	2100      	movs	r1, #0
 800131c:	a808      	add	r0, sp, #32
 800131e:	f007 ff25 	bl	800916c <memset>
  if(uartHandle->Instance==USART1)
 8001322:	6822      	ldr	r2, [r4, #0]
 8001324:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <HAL_UART_MspInit+0x88>)
 8001326:	429a      	cmp	r2, r3
 8001328:	d130      	bne.n	800138c <HAL_UART_MspInit+0x84>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800132a:	2201      	movs	r2, #1
 800132c:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800132e:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001330:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001334:	f001 ff28 	bl	8003188 <HAL_RCCEx_PeriphCLKConfig>
 8001338:	b108      	cbz	r0, 800133e <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 800133a:	f7ff fe5d 	bl	8000ff8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800133e:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	a903      	add	r1, sp, #12
 8001342:	4815      	ldr	r0, [pc, #84]	@ (8001398 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001344:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001348:	f042 0210 	orr.w	r2, r2, #16
 800134c:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8001350:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001354:	f002 0210 	and.w	r2, r2, #16
 8001358:	9201      	str	r2, [sp, #4]
 800135a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001360:	f042 0202 	orr.w	r2, r2, #2
 8001364:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	9302      	str	r3, [sp, #8]
 8001376:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001384:	2304      	movs	r3, #4
 8001386:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	f000 fefe 	bl	8002188 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800138c:	b038      	add	sp, #224	@ 0xe0
 800138e:	bd10      	pop	{r4, pc}
 8001390:	40011000 	.word	0x40011000
 8001394:	58024400 	.word	0x58024400
 8001398:	58020400 	.word	0x58020400

0800139c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800139c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80013d8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80013a0:	f7ff ff74 	bl	800128c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013a4:	f7ff ff00 	bl	80011a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a8:	480c      	ldr	r0, [pc, #48]	@ (80013dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013aa:	490d      	ldr	r1, [pc, #52]	@ (80013e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013ac:	4a0d      	ldr	r2, [pc, #52]	@ (80013e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b0:	e002      	b.n	80013b8 <LoopCopyDataInit>

080013b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b6:	3304      	adds	r3, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013bc:	d3f9      	bcc.n	80013b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013c0:	4c0a      	ldr	r4, [pc, #40]	@ (80013ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c4:	e001      	b.n	80013ca <LoopFillZerobss>

080013c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c8:	3204      	adds	r2, #4

080013ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013cc:	d3fb      	bcc.n	80013c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ce:	f007 ffbb 	bl	8009348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013d2:	f7ff fdbb 	bl	8000f4c <main>
  bx  lr
 80013d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013d8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013e0:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 80013e4:	0800d544 	.word	0x0800d544
  ldr r2, =_sbss
 80013e8:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 80013ec:	24029414 	.word	0x24029414

080013f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f0:	e7fe      	b.n	80013f0 <ADC3_IRQHandler>
	...

080013f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f4:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f6:	2003      	movs	r0, #3
 80013f8:	f000 f860 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013fc:	f001 fba0 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8001400:	490f      	ldr	r1, [pc, #60]	@ (8001440 <HAL_Init+0x4c>)
 8001402:	4a10      	ldr	r2, [pc, #64]	@ (8001444 <HAL_Init+0x50>)
 8001404:	698b      	ldr	r3, [r1, #24]
 8001406:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800140a:	5cd3      	ldrb	r3, [r2, r3]
 800140c:	f003 031f 	and.w	r3, r3, #31
 8001410:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001412:	698b      	ldr	r3, [r1, #24]
 8001414:	f003 030f 	and.w	r3, r3, #15
 8001418:	5cd3      	ldrb	r3, [r2, r3]
 800141a:	4a0b      	ldr	r2, [pc, #44]	@ (8001448 <HAL_Init+0x54>)
 800141c:	f003 031f 	and.w	r3, r3, #31
 8001420:	fa20 f303 	lsr.w	r3, r0, r3
 8001424:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <HAL_Init+0x58>)
 8001428:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800142a:	200f      	movs	r0, #15
 800142c:	f7ff fe3e 	bl	80010ac <HAL_InitTick>
 8001430:	4604      	mov	r4, r0
 8001432:	b918      	cbnz	r0, 800143c <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001434:	f7ff fe22 	bl	800107c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001438:	4620      	mov	r0, r4
 800143a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800143c:	2401      	movs	r4, #1
 800143e:	e7fb      	b.n	8001438 <HAL_Init+0x44>
 8001440:	58024400 	.word	0x58024400
 8001444:	0800d204 	.word	0x0800d204
 8001448:	24000000 	.word	0x24000000
 800144c:	24000004 	.word	0x24000004

08001450 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001450:	4a03      	ldr	r2, [pc, #12]	@ (8001460 <HAL_IncTick+0x10>)
 8001452:	4b04      	ldr	r3, [pc, #16]	@ (8001464 <HAL_IncTick+0x14>)
 8001454:	6811      	ldr	r1, [r2, #0]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	440b      	add	r3, r1
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	24017af0 	.word	0x24017af0
 8001464:	24000008 	.word	0x24000008

08001468 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001468:	4b01      	ldr	r3, [pc, #4]	@ (8001470 <HAL_GetTick+0x8>)
 800146a:	6818      	ldr	r0, [r3, #0]
}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	24017af0 	.word	0x24017af0

08001474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001474:	b538      	push	{r3, r4, r5, lr}
 8001476:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001478:	f7ff fff6 	bl	8001468 <HAL_GetTick>
 800147c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001480:	bf1e      	ittt	ne
 8001482:	4b04      	ldrne	r3, [pc, #16]	@ (8001494 <HAL_Delay+0x20>)
 8001484:	781b      	ldrbne	r3, [r3, #0]
 8001486:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001488:	f7ff ffee 	bl	8001468 <HAL_GetTick>
 800148c:	1b43      	subs	r3, r0, r5
 800148e:	42a3      	cmp	r3, r4
 8001490:	d3fa      	bcc.n	8001488 <HAL_Delay+0x14>
  {
  }
}
 8001492:	bd38      	pop	{r3, r4, r5, pc}
 8001494:	24000008 	.word	0x24000008

08001498 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32H7xx_HAL_VERSION;
}
 8001498:	4800      	ldr	r0, [pc, #0]	@ (800149c <HAL_GetHalVersion+0x4>)
 800149a:	4770      	bx	lr
 800149c:	010b0500 	.word	0x010b0500

080014a0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80014a0:	4b01      	ldr	r3, [pc, #4]	@ (80014a8 <HAL_GetREVID+0x8>)
 80014a2:	6818      	ldr	r0, [r3, #0]
}
 80014a4:	0c00      	lsrs	r0, r0, #16
 80014a6:	4770      	bx	lr
 80014a8:	5c001000 	.word	0x5c001000

080014ac <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80014ac:	4b02      	ldr	r3, [pc, #8]	@ (80014b8 <HAL_GetDEVID+0xc>)
 80014ae:	6818      	ldr	r0, [r3, #0]
}
 80014b0:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	5c001000 	.word	0x5c001000

080014bc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4907      	ldr	r1, [pc, #28]	@ (80014dc <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014be:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80014ca:	0412      	lsls	r2, r2, #16
 80014cc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80014d8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b16      	ldr	r3, [pc, #88]	@ (800153c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e2:	b530      	push	{r4, r5, lr}
 80014e4:	68dc      	ldr	r4, [r3, #12]
 80014e6:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ea:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ee:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	bf28      	it	cs
 80014f4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f6:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fc:	bf8c      	ite	hi
 80014fe:	3c03      	subhi	r4, #3
 8001500:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001502:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8001506:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001510:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	fa03 f304 	lsl.w	r3, r3, r4
 8001518:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001520:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001522:	db06      	blt.n	8001532 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001528:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800152c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001530:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	f000 000f 	and.w	r0, r0, #15
 8001536:	4a02      	ldr	r2, [pc, #8]	@ (8001540 <HAL_NVIC_SetPriority+0x60>)
 8001538:	5413      	strb	r3, [r2, r0]
 800153a:	e7f9      	b.n	8001530 <HAL_NVIC_SetPriority+0x50>
 800153c:	e000ed00 	.word	0xe000ed00
 8001540:	e000ed14 	.word	0xe000ed14

08001544 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001544:	2800      	cmp	r0, #0
 8001546:	db07      	blt.n	8001558 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001548:	2301      	movs	r3, #1
 800154a:	0941      	lsrs	r1, r0, #5
 800154c:	f000 001f 	and.w	r0, r0, #31
 8001550:	4a02      	ldr	r2, [pc, #8]	@ (800155c <HAL_NVIC_EnableIRQ+0x18>)
 8001552:	4083      	lsls	r3, r0
 8001554:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000e100 	.word	0xe000e100

08001560 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001560:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001564:	4b04      	ldr	r3, [pc, #16]	@ (8001578 <HAL_MPU_Disable+0x18>)
 8001566:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001568:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800156c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800156e:	2200      	movs	r2, #0
 8001570:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_MPU_Enable+0x1c>)
 800157e:	f040 0001 	orr.w	r0, r0, #1
 8001582:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001586:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001588:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800158c:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800158e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001592:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800159c:	7843      	ldrb	r3, [r0, #1]
 800159e:	4a14      	ldr	r2, [pc, #80]	@ (80015f0 <HAL_MPU_ConfigRegion+0x54>)
 80015a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80015a4:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80015b0:	6843      	ldr	r3, [r0, #4]
 80015b2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015b6:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015b8:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015ba:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015bc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80015c0:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015c2:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015c4:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015c6:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015ca:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015cc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015d0:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015d2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015d6:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015dc:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80015e2:	7a01      	ldrb	r1, [r0, #8]
 80015e4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015e8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80015f6:	f8df c144 	ldr.w	ip, [pc, #324]	@ 800173c <DMA_SetConfig+0x148>
 80015fa:	6804      	ldr	r4, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015fc:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80015fe:	4564      	cmp	r4, ip
 8001600:	d045      	beq.n	800168e <DMA_SetConfig+0x9a>
 8001602:	4d4c      	ldr	r5, [pc, #304]	@ (8001734 <DMA_SetConfig+0x140>)
 8001604:	42ac      	cmp	r4, r5
 8001606:	d042      	beq.n	800168e <DMA_SetConfig+0x9a>
 8001608:	3518      	adds	r5, #24
 800160a:	42ac      	cmp	r4, r5
 800160c:	d03f      	beq.n	800168e <DMA_SetConfig+0x9a>
 800160e:	3518      	adds	r5, #24
 8001610:	42ac      	cmp	r4, r5
 8001612:	d03c      	beq.n	800168e <DMA_SetConfig+0x9a>
 8001614:	3518      	adds	r5, #24
 8001616:	42ac      	cmp	r4, r5
 8001618:	d039      	beq.n	800168e <DMA_SetConfig+0x9a>
 800161a:	3518      	adds	r5, #24
 800161c:	42ac      	cmp	r4, r5
 800161e:	d036      	beq.n	800168e <DMA_SetConfig+0x9a>
 8001620:	3518      	adds	r5, #24
 8001622:	42ac      	cmp	r4, r5
 8001624:	d033      	beq.n	800168e <DMA_SetConfig+0x9a>
 8001626:	3518      	adds	r5, #24
 8001628:	42ac      	cmp	r4, r5
 800162a:	d030      	beq.n	800168e <DMA_SetConfig+0x9a>
 800162c:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8001630:	42ac      	cmp	r4, r5
 8001632:	d02c      	beq.n	800168e <DMA_SetConfig+0x9a>
 8001634:	3518      	adds	r5, #24
 8001636:	42ac      	cmp	r4, r5
 8001638:	d029      	beq.n	800168e <DMA_SetConfig+0x9a>
 800163a:	3518      	adds	r5, #24
 800163c:	42ac      	cmp	r4, r5
 800163e:	d026      	beq.n	800168e <DMA_SetConfig+0x9a>
 8001640:	3518      	adds	r5, #24
 8001642:	42ac      	cmp	r4, r5
 8001644:	d023      	beq.n	800168e <DMA_SetConfig+0x9a>
 8001646:	3518      	adds	r5, #24
 8001648:	42ac      	cmp	r4, r5
 800164a:	d020      	beq.n	800168e <DMA_SetConfig+0x9a>
 800164c:	3518      	adds	r5, #24
 800164e:	42ac      	cmp	r4, r5
 8001650:	d01d      	beq.n	800168e <DMA_SetConfig+0x9a>
 8001652:	3518      	adds	r5, #24
 8001654:	42ac      	cmp	r4, r5
 8001656:	d01a      	beq.n	800168e <DMA_SetConfig+0x9a>
 8001658:	3518      	adds	r5, #24
 800165a:	42ac      	cmp	r4, r5
 800165c:	d017      	beq.n	800168e <DMA_SetConfig+0x9a>
 800165e:	4d36      	ldr	r5, [pc, #216]	@ (8001738 <DMA_SetConfig+0x144>)
 8001660:	42ac      	cmp	r4, r5
 8001662:	d014      	beq.n	800168e <DMA_SetConfig+0x9a>
 8001664:	3514      	adds	r5, #20
 8001666:	42ac      	cmp	r4, r5
 8001668:	d011      	beq.n	800168e <DMA_SetConfig+0x9a>
 800166a:	3514      	adds	r5, #20
 800166c:	42ac      	cmp	r4, r5
 800166e:	d00e      	beq.n	800168e <DMA_SetConfig+0x9a>
 8001670:	3514      	adds	r5, #20
 8001672:	42ac      	cmp	r4, r5
 8001674:	d00b      	beq.n	800168e <DMA_SetConfig+0x9a>
 8001676:	3514      	adds	r5, #20
 8001678:	42ac      	cmp	r4, r5
 800167a:	d008      	beq.n	800168e <DMA_SetConfig+0x9a>
 800167c:	3514      	adds	r5, #20
 800167e:	42ac      	cmp	r4, r5
 8001680:	d005      	beq.n	800168e <DMA_SetConfig+0x9a>
 8001682:	3514      	adds	r5, #20
 8001684:	42ac      	cmp	r4, r5
 8001686:	d002      	beq.n	800168e <DMA_SetConfig+0x9a>
 8001688:	3514      	adds	r5, #20
 800168a:	42ac      	cmp	r4, r5
 800168c:	d148      	bne.n	8001720 <DMA_SetConfig+0x12c>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800168e:	e9d0 5619 	ldrd	r5, r6, [r0, #100]	@ 0x64
 8001692:	606e      	str	r6, [r5, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001694:	6ec5      	ldr	r5, [r0, #108]	@ 0x6c
 8001696:	b115      	cbz	r5, 800169e <DMA_SetConfig+0xaa>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001698:	e9d0 561c 	ldrd	r5, r6, [r0, #112]	@ 0x70
 800169c:	606e      	str	r6, [r5, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800169e:	4564      	cmp	r4, ip
 80016a0:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 80016a2:	6886      	ldr	r6, [r0, #8]
 80016a4:	d02d      	beq.n	8001702 <DMA_SetConfig+0x10e>
 80016a6:	4823      	ldr	r0, [pc, #140]	@ (8001734 <DMA_SetConfig+0x140>)
 80016a8:	4284      	cmp	r4, r0
 80016aa:	d02a      	beq.n	8001702 <DMA_SetConfig+0x10e>
 80016ac:	3018      	adds	r0, #24
 80016ae:	4284      	cmp	r4, r0
 80016b0:	d027      	beq.n	8001702 <DMA_SetConfig+0x10e>
 80016b2:	3018      	adds	r0, #24
 80016b4:	4284      	cmp	r4, r0
 80016b6:	d024      	beq.n	8001702 <DMA_SetConfig+0x10e>
 80016b8:	3018      	adds	r0, #24
 80016ba:	4284      	cmp	r4, r0
 80016bc:	d021      	beq.n	8001702 <DMA_SetConfig+0x10e>
 80016be:	3018      	adds	r0, #24
 80016c0:	4284      	cmp	r4, r0
 80016c2:	d01e      	beq.n	8001702 <DMA_SetConfig+0x10e>
 80016c4:	3018      	adds	r0, #24
 80016c6:	4284      	cmp	r4, r0
 80016c8:	d01b      	beq.n	8001702 <DMA_SetConfig+0x10e>
 80016ca:	3018      	adds	r0, #24
 80016cc:	4284      	cmp	r4, r0
 80016ce:	d018      	beq.n	8001702 <DMA_SetConfig+0x10e>
 80016d0:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 80016d4:	4284      	cmp	r4, r0
 80016d6:	d014      	beq.n	8001702 <DMA_SetConfig+0x10e>
 80016d8:	3018      	adds	r0, #24
 80016da:	4284      	cmp	r4, r0
 80016dc:	d011      	beq.n	8001702 <DMA_SetConfig+0x10e>
 80016de:	3018      	adds	r0, #24
 80016e0:	4284      	cmp	r4, r0
 80016e2:	d00e      	beq.n	8001702 <DMA_SetConfig+0x10e>
 80016e4:	3018      	adds	r0, #24
 80016e6:	4284      	cmp	r4, r0
 80016e8:	d00b      	beq.n	8001702 <DMA_SetConfig+0x10e>
 80016ea:	3018      	adds	r0, #24
 80016ec:	4284      	cmp	r4, r0
 80016ee:	d008      	beq.n	8001702 <DMA_SetConfig+0x10e>
 80016f0:	3018      	adds	r0, #24
 80016f2:	4284      	cmp	r4, r0
 80016f4:	d005      	beq.n	8001702 <DMA_SetConfig+0x10e>
 80016f6:	3018      	adds	r0, #24
 80016f8:	4284      	cmp	r4, r0
 80016fa:	d002      	beq.n	8001702 <DMA_SetConfig+0x10e>
 80016fc:	3018      	adds	r0, #24
 80016fe:	4284      	cmp	r4, r0
 8001700:	d10f      	bne.n	8001722 <DMA_SetConfig+0x12e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001702:	203f      	movs	r0, #63	@ 0x3f
 8001704:	f005 051f 	and.w	r5, r5, #31
 8001708:	fa00 f505 	lsl.w	r5, r0, r5
 800170c:	60bd      	str	r5, [r7, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800170e:	6820      	ldr	r0, [r4, #0]
 8001710:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
 8001714:	6020      	str	r0, [r4, #0]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001716:	2e40      	cmp	r6, #64	@ 0x40
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8001718:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800171a:	d108      	bne.n	800172e <DMA_SetConfig+0x13a>
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800171c:	60a2      	str	r2, [r4, #8]

      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800171e:	60e1      	str	r1, [r4, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8001720:	bdf0      	pop	{r4, r5, r6, r7, pc}
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001722:	f005 051f 	and.w	r5, r5, #31
 8001726:	2001      	movs	r0, #1
 8001728:	40a8      	lsls	r0, r5
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	e7f3      	b.n	8001716 <DMA_SetConfig+0x122>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800172e:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8001730:	60e2      	str	r2, [r4, #12]
}
 8001732:	e7f5      	b.n	8001720 <DMA_SetConfig+0x12c>
 8001734:	40020028 	.word	0x40020028
 8001738:	58025408 	.word	0x58025408
 800173c:	40020010 	.word	0x40020010

08001740 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001740:	6803      	ldr	r3, [r0, #0]
{
 8001742:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001744:	4923      	ldr	r1, [pc, #140]	@ (80017d4 <DMA_CalcBaseAndBitshift+0x94>)
 8001746:	428b      	cmp	r3, r1
{
 8001748:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800174a:	d031      	beq.n	80017b0 <DMA_CalcBaseAndBitshift+0x70>
 800174c:	3118      	adds	r1, #24
 800174e:	428b      	cmp	r3, r1
 8001750:	d02e      	beq.n	80017b0 <DMA_CalcBaseAndBitshift+0x70>
 8001752:	3118      	adds	r1, #24
 8001754:	428b      	cmp	r3, r1
 8001756:	d02b      	beq.n	80017b0 <DMA_CalcBaseAndBitshift+0x70>
 8001758:	3118      	adds	r1, #24
 800175a:	428b      	cmp	r3, r1
 800175c:	d028      	beq.n	80017b0 <DMA_CalcBaseAndBitshift+0x70>
 800175e:	3118      	adds	r1, #24
 8001760:	428b      	cmp	r3, r1
 8001762:	d025      	beq.n	80017b0 <DMA_CalcBaseAndBitshift+0x70>
 8001764:	3118      	adds	r1, #24
 8001766:	428b      	cmp	r3, r1
 8001768:	d022      	beq.n	80017b0 <DMA_CalcBaseAndBitshift+0x70>
 800176a:	3118      	adds	r1, #24
 800176c:	428b      	cmp	r3, r1
 800176e:	d01f      	beq.n	80017b0 <DMA_CalcBaseAndBitshift+0x70>
 8001770:	3118      	adds	r1, #24
 8001772:	428b      	cmp	r3, r1
 8001774:	d01c      	beq.n	80017b0 <DMA_CalcBaseAndBitshift+0x70>
 8001776:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800177a:	428b      	cmp	r3, r1
 800177c:	d018      	beq.n	80017b0 <DMA_CalcBaseAndBitshift+0x70>
 800177e:	3118      	adds	r1, #24
 8001780:	428b      	cmp	r3, r1
 8001782:	d015      	beq.n	80017b0 <DMA_CalcBaseAndBitshift+0x70>
 8001784:	3118      	adds	r1, #24
 8001786:	428b      	cmp	r3, r1
 8001788:	d012      	beq.n	80017b0 <DMA_CalcBaseAndBitshift+0x70>
 800178a:	3118      	adds	r1, #24
 800178c:	428b      	cmp	r3, r1
 800178e:	d00f      	beq.n	80017b0 <DMA_CalcBaseAndBitshift+0x70>
 8001790:	3118      	adds	r1, #24
 8001792:	428b      	cmp	r3, r1
 8001794:	d00c      	beq.n	80017b0 <DMA_CalcBaseAndBitshift+0x70>
 8001796:	3118      	adds	r1, #24
 8001798:	428b      	cmp	r3, r1
 800179a:	d009      	beq.n	80017b0 <DMA_CalcBaseAndBitshift+0x70>
 800179c:	3118      	adds	r1, #24
 800179e:	428b      	cmp	r3, r1
 80017a0:	d006      	beq.n	80017b0 <DMA_CalcBaseAndBitshift+0x70>
 80017a2:	3118      	adds	r1, #24
 80017a4:	428b      	cmp	r3, r1
 80017a6:	d003      	beq.n	80017b0 <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80017a8:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80017ac:	6590      	str	r0, [r2, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
}
 80017ae:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80017b0:	b2dc      	uxtb	r4, r3
 80017b2:	2118      	movs	r1, #24
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80017b4:	4808      	ldr	r0, [pc, #32]	@ (80017d8 <DMA_CalcBaseAndBitshift+0x98>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80017b6:	3c10      	subs	r4, #16
 80017b8:	fbb4 f1f1 	udiv	r1, r4, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80017bc:	f001 0107 	and.w	r1, r1, #7
    if (stream_number > 3U)
 80017c0:	2c5f      	cmp	r4, #95	@ 0x5f
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80017c2:	5c41      	ldrb	r1, [r0, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80017c4:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 80017c8:	f020 0003 	bic.w	r0, r0, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80017cc:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80017ce:	bf88      	it	hi
 80017d0:	3004      	addhi	r0, #4
 80017d2:	e7eb      	b.n	80017ac <DMA_CalcBaseAndBitshift+0x6c>
 80017d4:	40020010 	.word	0x40020010
 80017d8:	0800d214 	.word	0x0800d214

080017dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80017dc:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80017de:	4920      	ldr	r1, [pc, #128]	@ (8001860 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80017e0:	b2d3      	uxtb	r3, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80017e2:	428a      	cmp	r2, r1
 80017e4:	d028      	beq.n	8001838 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 80017e6:	3114      	adds	r1, #20
 80017e8:	428a      	cmp	r2, r1
 80017ea:	d025      	beq.n	8001838 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 80017ec:	3114      	adds	r1, #20
 80017ee:	428a      	cmp	r2, r1
 80017f0:	d022      	beq.n	8001838 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 80017f2:	3114      	adds	r1, #20
 80017f4:	428a      	cmp	r2, r1
 80017f6:	d01f      	beq.n	8001838 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 80017f8:	3114      	adds	r1, #20
 80017fa:	428a      	cmp	r2, r1
 80017fc:	d01c      	beq.n	8001838 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 80017fe:	3114      	adds	r1, #20
 8001800:	428a      	cmp	r2, r1
 8001802:	d019      	beq.n	8001838 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001804:	3114      	adds	r1, #20
 8001806:	428a      	cmp	r2, r1
 8001808:	d016      	beq.n	8001838 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 800180a:	3114      	adds	r1, #20
 800180c:	428a      	cmp	r2, r1
 800180e:	d013      	beq.n	8001838 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001810:	2118      	movs	r1, #24
 8001812:	3b10      	subs	r3, #16
 8001814:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001818:	4912      	ldr	r1, [pc, #72]	@ (8001864 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800181a:	4411      	add	r1, r2
 800181c:	29a8      	cmp	r1, #168	@ 0xa8
 800181e:	d91c      	bls.n	800185a <DMA_CalcDMAMUXChannelBaseAndMask+0x7e>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001820:	f103 5280 	add.w	r2, r3, #268435456	@ 0x10000000
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001824:	2101      	movs	r1, #1
 8001826:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800182a:	f502 4202 	add.w	r2, r2, #33280	@ 0x8200
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	490d      	ldr	r1, [pc, #52]	@ (8001868 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001834:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001836:	e00c      	b.n	8001852 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001838:	2214      	movs	r2, #20
 800183a:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800183c:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800183e:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001842:	f103 52b0 	add.w	r2, r3, #369098752	@ 0x16000000
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	4908      	ldr	r1, [pc, #32]	@ (800186c <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800184c:	f502 4216 	add.w	r2, r2, #38400	@ 0x9600
 8001850:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001852:	6683      	str	r3, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001854:	e9c0 2118 	strd	r2, r1, [r0, #96]	@ 0x60
  }
}
 8001858:	4770      	bx	lr
      stream_number += 8U;
 800185a:	3308      	adds	r3, #8
 800185c:	e7e0      	b.n	8001820 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 800185e:	bf00      	nop
 8001860:	58025408 	.word	0x58025408
 8001864:	bffdfbf0 	.word	0xbffdfbf0
 8001868:	40020880 	.word	0x40020880
 800186c:	58025880 	.word	0x58025880

08001870 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001870:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8001872:	1e51      	subs	r1, r2, #1
 8001874:	2907      	cmp	r1, #7
{
 8001876:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8001878:	d821      	bhi.n	80018be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800187a:	6803      	ldr	r3, [r0, #0]
 800187c:	4c13      	ldr	r4, [pc, #76]	@ (80018cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 800187e:	42a3      	cmp	r3, r4
 8001880:	d01e      	beq.n	80018c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001882:	3414      	adds	r4, #20
 8001884:	42a3      	cmp	r3, r4
 8001886:	d01b      	beq.n	80018c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001888:	3414      	adds	r4, #20
 800188a:	42a3      	cmp	r3, r4
 800188c:	d018      	beq.n	80018c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 800188e:	3414      	adds	r4, #20
 8001890:	42a3      	cmp	r3, r4
 8001892:	d015      	beq.n	80018c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001894:	3414      	adds	r4, #20
 8001896:	42a3      	cmp	r3, r4
 8001898:	d012      	beq.n	80018c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 800189a:	3414      	adds	r4, #20
 800189c:	42a3      	cmp	r3, r4
 800189e:	d00f      	beq.n	80018c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80018a0:	3414      	adds	r4, #20
 80018a2:	42a3      	cmp	r3, r4
 80018a4:	d00c      	beq.n	80018c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80018a6:	3414      	adds	r4, #20
 80018a8:	42a3      	cmp	r3, r4
 80018aa:	d009      	beq.n	80018c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80018ac:	4b08      	ldr	r3, [pc, #32]	@ (80018d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 80018ae:	4413      	add	r3, r2
 80018b0:	4a08      	ldr	r2, [pc, #32]	@ (80018d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 80018b2:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80018b4:	e9c0 321b 	strd	r3, r2, [r0, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80018b8:	2301      	movs	r3, #1
 80018ba:	408b      	lsls	r3, r1
 80018bc:	6743      	str	r3, [r0, #116]	@ 0x74
  }
}
 80018be:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80018c0:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 80018c2:	4413      	add	r3, r2
 80018c4:	4a05      	ldr	r2, [pc, #20]	@ (80018dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 80018c6:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80018c8:	e7f4      	b.n	80018b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>
 80018ca:	bf00      	nop
 80018cc:	58025408 	.word	0x58025408
 80018d0:	1000823f 	.word	0x1000823f
 80018d4:	40020940 	.word	0x40020940
 80018d8:	1600963f 	.word	0x1600963f
 80018dc:	58025940 	.word	0x58025940

080018e0 <HAL_DMA_Init>:
{
 80018e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff fdc0 	bl	8001468 <HAL_GetTick>
 80018e8:	4606      	mov	r6, r0
  if(hdma == NULL)
 80018ea:	2c00      	cmp	r4, #0
 80018ec:	f000 80a9 	beq.w	8001a42 <HAL_DMA_Init+0x162>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	4d6f      	ldr	r5, [pc, #444]	@ (8001ab0 <HAL_DMA_Init+0x1d0>)
 80018f4:	42ab      	cmp	r3, r5
 80018f6:	d064      	beq.n	80019c2 <HAL_DMA_Init+0xe2>
 80018f8:	4a6e      	ldr	r2, [pc, #440]	@ (8001ab4 <HAL_DMA_Init+0x1d4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d061      	beq.n	80019c2 <HAL_DMA_Init+0xe2>
 80018fe:	3218      	adds	r2, #24
 8001900:	4293      	cmp	r3, r2
 8001902:	d05e      	beq.n	80019c2 <HAL_DMA_Init+0xe2>
 8001904:	3218      	adds	r2, #24
 8001906:	4293      	cmp	r3, r2
 8001908:	d05b      	beq.n	80019c2 <HAL_DMA_Init+0xe2>
 800190a:	3218      	adds	r2, #24
 800190c:	4293      	cmp	r3, r2
 800190e:	d058      	beq.n	80019c2 <HAL_DMA_Init+0xe2>
 8001910:	3218      	adds	r2, #24
 8001912:	4293      	cmp	r3, r2
 8001914:	d055      	beq.n	80019c2 <HAL_DMA_Init+0xe2>
 8001916:	3218      	adds	r2, #24
 8001918:	4293      	cmp	r3, r2
 800191a:	d052      	beq.n	80019c2 <HAL_DMA_Init+0xe2>
 800191c:	3218      	adds	r2, #24
 800191e:	4293      	cmp	r3, r2
 8001920:	d04f      	beq.n	80019c2 <HAL_DMA_Init+0xe2>
 8001922:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8001926:	4293      	cmp	r3, r2
 8001928:	d04b      	beq.n	80019c2 <HAL_DMA_Init+0xe2>
 800192a:	3218      	adds	r2, #24
 800192c:	4293      	cmp	r3, r2
 800192e:	d048      	beq.n	80019c2 <HAL_DMA_Init+0xe2>
 8001930:	3218      	adds	r2, #24
 8001932:	4293      	cmp	r3, r2
 8001934:	d045      	beq.n	80019c2 <HAL_DMA_Init+0xe2>
 8001936:	3218      	adds	r2, #24
 8001938:	4293      	cmp	r3, r2
 800193a:	d042      	beq.n	80019c2 <HAL_DMA_Init+0xe2>
 800193c:	3218      	adds	r2, #24
 800193e:	4293      	cmp	r3, r2
 8001940:	d03f      	beq.n	80019c2 <HAL_DMA_Init+0xe2>
 8001942:	3218      	adds	r2, #24
 8001944:	4293      	cmp	r3, r2
 8001946:	d03c      	beq.n	80019c2 <HAL_DMA_Init+0xe2>
 8001948:	3218      	adds	r2, #24
 800194a:	4293      	cmp	r3, r2
 800194c:	d039      	beq.n	80019c2 <HAL_DMA_Init+0xe2>
 800194e:	3218      	adds	r2, #24
 8001950:	4293      	cmp	r3, r2
 8001952:	d036      	beq.n	80019c2 <HAL_DMA_Init+0xe2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001954:	4a58      	ldr	r2, [pc, #352]	@ (8001ab8 <HAL_DMA_Init+0x1d8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	f040 812f 	bne.w	8001bba <HAL_DMA_Init+0x2da>
    hdma->State = HAL_DMA_STATE_BUSY;
 800195c:	2202      	movs	r2, #2
 800195e:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001962:	2200      	movs	r2, #0
 8001964:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001968:	68a2      	ldr	r2, [r4, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800196a:	6818      	ldr	r0, [r3, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800196c:	2a40      	cmp	r2, #64	@ 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800196e:	f36f 1010 	bfc	r0, #4, #13
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001972:	f000 8140 	beq.w	8001bf6 <HAL_DMA_Init+0x316>
 8001976:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800197a:	424a      	negs	r2, r1
 800197c:	414a      	adcs	r2, r1
 800197e:	0392      	lsls	r2, r2, #14
 8001980:	e9d4 1603 	ldrd	r1, r6, [r4, #12]
 8001984:	4331      	orrs	r1, r6
 8001986:	6966      	ldr	r6, [r4, #20]
 8001988:	4331      	orrs	r1, r6
 800198a:	69a6      	ldr	r6, [r4, #24]
 800198c:	4331      	orrs	r1, r6
 800198e:	69e6      	ldr	r6, [r4, #28]
 8001990:	4331      	orrs	r1, r6
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001992:	6a26      	ldr	r6, [r4, #32]
 8001994:	ea40 1016 	orr.w	r0, r0, r6, lsr #4
 8001998:	ea40 01d1 	orr.w	r1, r0, r1, lsr #3
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800199c:	4620      	mov	r0, r4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800199e:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80019a0:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80019a2:	4a46      	ldr	r2, [pc, #280]	@ (8001abc <HAL_DMA_Init+0x1dc>)
 80019a4:	441a      	add	r2, r3
 80019a6:	2314      	movs	r3, #20
 80019a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80019ac:	0092      	lsls	r2, r2, #2
 80019ae:	65e2      	str	r2, [r4, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019b0:	f7ff fec6 	bl	8001740 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80019b4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80019b6:	f003 021f 	and.w	r2, r3, #31
 80019ba:	2301      	movs	r3, #1
 80019bc:	4093      	lsls	r3, r2
 80019be:	6043      	str	r3, [r0, #4]
 80019c0:	e092      	b.n	8001ae8 <HAL_DMA_Init+0x208>
    hdma->State = HAL_DMA_STATE_BUSY;
 80019c2:	2202      	movs	r2, #2
 80019c4:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80019c8:	2200      	movs	r2, #0
 80019ca:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80019d6:	6822      	ldr	r2, [r4, #0]
 80019d8:	6813      	ldr	r3, [r2, #0]
 80019da:	07db      	lsls	r3, r3, #31
 80019dc:	d427      	bmi.n	8001a2e <HAL_DMA_Init+0x14e>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80019de:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019e0:	4837      	ldr	r0, [pc, #220]	@ (8001ac0 <HAL_DMA_Init+0x1e0>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e2:	69a1      	ldr	r1, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019e4:	4018      	ands	r0, r3
    registerValue |=  hdma->Init.Direction           |
 80019e6:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
 80019ea:	4333      	orrs	r3, r6
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ec:	6926      	ldr	r6, [r4, #16]
 80019ee:	4333      	orrs	r3, r6
 80019f0:	6966      	ldr	r6, [r4, #20]
 80019f2:	4333      	orrs	r3, r6
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f4:	69e6      	ldr	r6, [r4, #28]
 80019f6:	430b      	orrs	r3, r1
 80019f8:	4333      	orrs	r3, r6
            hdma->Init.Mode                | hdma->Init.Priority;
 80019fa:	6a26      	ldr	r6, [r4, #32]
 80019fc:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019fe:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8001a00:	2e04      	cmp	r6, #4
    registerValue |=  hdma->Init.Direction           |
 8001a02:	ea43 0300 	orr.w	r3, r3, r0
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a06:	bf02      	ittt	eq
 8001a08:	e9d4 070b 	ldrdeq	r0, r7, [r4, #44]	@ 0x2c
 8001a0c:	4338      	orreq	r0, r7
 8001a0e:	4303      	orreq	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001a10:	482c      	ldr	r0, [pc, #176]	@ (8001ac4 <HAL_DMA_Init+0x1e4>)
 8001a12:	6800      	ldr	r0, [r0, #0]
 8001a14:	f36f 000f 	bfc	r0, #0, #16
 8001a18:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8001a1c:	d31b      	bcc.n	8001a56 <HAL_DMA_Init+0x176>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001a1e:	6860      	ldr	r0, [r4, #4]
 8001a20:	282e      	cmp	r0, #46	@ 0x2e
 8001a22:	d810      	bhi.n	8001a46 <HAL_DMA_Init+0x166>
 8001a24:	2828      	cmp	r0, #40	@ 0x28
 8001a26:	d916      	bls.n	8001a56 <HAL_DMA_Init+0x176>
        registerValue |= DMA_SxCR_TRBUFF;
 8001a28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a2c:	e013      	b.n	8001a56 <HAL_DMA_Init+0x176>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a2e:	f7ff fd1b 	bl	8001468 <HAL_GetTick>
 8001a32:	1b80      	subs	r0, r0, r6
 8001a34:	2805      	cmp	r0, #5
 8001a36:	d9ce      	bls.n	80019d6 <HAL_DMA_Init+0xf6>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a38:	2320      	movs	r3, #32
 8001a3a:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8001a42:	2001      	movs	r0, #1
}
 8001a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a46:	383f      	subs	r0, #63	@ 0x3f
 8001a48:	2813      	cmp	r0, #19
 8001a4a:	d804      	bhi.n	8001a56 <HAL_DMA_Init+0x176>
 8001a4c:	4f1e      	ldr	r7, [pc, #120]	@ (8001ac8 <HAL_DMA_Init+0x1e8>)
 8001a4e:	fa27 f000 	lsr.w	r0, r7, r0
 8001a52:	07c7      	lsls	r7, r0, #31
 8001a54:	d4e8      	bmi.n	8001a28 <HAL_DMA_Init+0x148>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001a56:	6013      	str	r3, [r2, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a58:	2e04      	cmp	r6, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001a5a:	6953      	ldr	r3, [r2, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a5c:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8001a60:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a64:	d136      	bne.n	8001ad4 <HAL_DMA_Init+0x1f4>
      registerValue |= hdma->Init.FIFOThreshold;
 8001a66:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8001a6a:	4303      	orrs	r3, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a6c:	b396      	cbz	r6, 8001ad4 <HAL_DMA_Init+0x1f4>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a6e:	b939      	cbnz	r1, 8001a80 <HAL_DMA_Init+0x1a0>
    switch (hdma->Init.FIFOThreshold)
 8001a70:	2801      	cmp	r0, #1
 8001a72:	d015      	beq.n	8001aa0 <HAL_DMA_Init+0x1c0>
 8001a74:	f030 0102 	bics.w	r1, r0, #2
 8001a78:	d12c      	bne.n	8001ad4 <HAL_DMA_Init+0x1f4>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a7a:	01f0      	lsls	r0, r6, #7
 8001a7c:	d52a      	bpl.n	8001ad4 <HAL_DMA_Init+0x1f4>
 8001a7e:	e012      	b.n	8001aa6 <HAL_DMA_Init+0x1c6>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a80:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8001a84:	d122      	bne.n	8001acc <HAL_DMA_Init+0x1ec>
    switch (hdma->Init.FIFOThreshold)
 8001a86:	2803      	cmp	r0, #3
 8001a88:	d824      	bhi.n	8001ad4 <HAL_DMA_Init+0x1f4>
 8001a8a:	a101      	add	r1, pc, #4	@ (adr r1, 8001a90 <HAL_DMA_Init+0x1b0>)
 8001a8c:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8001a90:	08001aa7 	.word	0x08001aa7
 8001a94:	08001a7b 	.word	0x08001a7b
 8001a98:	08001aa7 	.word	0x08001aa7
 8001a9c:	08001aa1 	.word	0x08001aa1
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aa0:	f1b6 7fc0 	cmp.w	r6, #25165824	@ 0x1800000
 8001aa4:	d116      	bne.n	8001ad4 <HAL_DMA_Init+0x1f4>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aa6:	2340      	movs	r3, #64	@ 0x40
 8001aa8:	6563      	str	r3, [r4, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e7c7      	b.n	8001a3e <HAL_DMA_Init+0x15e>
 8001aae:	bf00      	nop
 8001ab0:	40020010 	.word	0x40020010
 8001ab4:	40020028 	.word	0x40020028
 8001ab8:	58025408 	.word	0x58025408
 8001abc:	a7fdabf8 	.word	0xa7fdabf8
 8001ac0:	fe10803f 	.word	0xfe10803f
 8001ac4:	5c001000 	.word	0x5c001000
 8001ac8:	000f030f 	.word	0x000f030f
    switch (hdma->Init.FIFOThreshold)
 8001acc:	2802      	cmp	r0, #2
 8001ace:	d9ea      	bls.n	8001aa6 <HAL_DMA_Init+0x1c6>
 8001ad0:	2803      	cmp	r0, #3
 8001ad2:	d0d2      	beq.n	8001a7a <HAL_DMA_Init+0x19a>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001ad4:	6153      	str	r3, [r2, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f7ff fe32 	bl	8001740 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001adc:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001ade:	f003 021f 	and.w	r2, r3, #31
 8001ae2:	233f      	movs	r3, #63	@ 0x3f
 8001ae4:	4093      	lsls	r3, r2
 8001ae6:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	42ab      	cmp	r3, r5
 8001aec:	d045      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001aee:	4a45      	ldr	r2, [pc, #276]	@ (8001c04 <HAL_DMA_Init+0x324>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d042      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001af4:	3218      	adds	r2, #24
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d03f      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001afa:	3218      	adds	r2, #24
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d03c      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001b00:	3218      	adds	r2, #24
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d039      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001b06:	3218      	adds	r2, #24
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d036      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001b0c:	3218      	adds	r2, #24
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d033      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001b12:	3218      	adds	r2, #24
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d030      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001b18:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d02c      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001b20:	3218      	adds	r2, #24
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d029      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001b26:	3218      	adds	r2, #24
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d026      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001b2c:	3218      	adds	r2, #24
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d023      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001b32:	3218      	adds	r2, #24
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d020      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001b38:	3218      	adds	r2, #24
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d01d      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001b3e:	3218      	adds	r2, #24
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d01a      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001b44:	3218      	adds	r2, #24
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d017      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001b4a:	4a2f      	ldr	r2, [pc, #188]	@ (8001c08 <HAL_DMA_Init+0x328>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d014      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001b50:	3214      	adds	r2, #20
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d011      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001b56:	3214      	adds	r2, #20
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d00e      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001b5c:	3214      	adds	r2, #20
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d00b      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001b62:	3214      	adds	r2, #20
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d008      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001b68:	3214      	adds	r2, #20
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d005      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001b6e:	3214      	adds	r2, #20
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d002      	beq.n	8001b7a <HAL_DMA_Init+0x29a>
 8001b74:	3214      	adds	r2, #20
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d119      	bne.n	8001bae <HAL_DMA_Init+0x2ce>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	2500      	movs	r5, #0
 8001b7e:	f7ff fe2d 	bl	80017dc <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b82:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b84:	6e22      	ldr	r2, [r4, #96]	@ 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b86:	2b80      	cmp	r3, #128	@ 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b88:	bf04      	itt	eq
 8001b8a:	2300      	moveq	r3, #0
 8001b8c:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b8e:	6863      	ldr	r3, [r4, #4]
 8001b90:	b2d9      	uxtb	r1, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001b92:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b94:	6011      	str	r1, [r2, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001b96:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b98:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	@ 0x64
 8001b9c:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001b9e:	d82c      	bhi.n	8001bfa <HAL_DMA_Init+0x31a>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ba0:	f7ff fe66 	bl	8001870 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ba4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8001ba6:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ba8:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	@ 0x70
 8001bac:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bae:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001bb0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb2:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001bb4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001bb8:	e744      	b.n	8001a44 <HAL_DMA_Init+0x164>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001bba:	4a14      	ldr	r2, [pc, #80]	@ (8001c0c <HAL_DMA_Init+0x32c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	f43f aecd 	beq.w	800195c <HAL_DMA_Init+0x7c>
 8001bc2:	3214      	adds	r2, #20
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	f43f aec9 	beq.w	800195c <HAL_DMA_Init+0x7c>
 8001bca:	3214      	adds	r2, #20
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	f43f aec5 	beq.w	800195c <HAL_DMA_Init+0x7c>
 8001bd2:	3214      	adds	r2, #20
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	f43f aec1 	beq.w	800195c <HAL_DMA_Init+0x7c>
 8001bda:	3214      	adds	r2, #20
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	f43f aebd 	beq.w	800195c <HAL_DMA_Init+0x7c>
 8001be2:	3214      	adds	r2, #20
 8001be4:	4293      	cmp	r3, r2
 8001be6:	f43f aeb9 	beq.w	800195c <HAL_DMA_Init+0x7c>
 8001bea:	3214      	adds	r2, #20
 8001bec:	4293      	cmp	r3, r2
 8001bee:	f43f aeb5 	beq.w	800195c <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bf2:	2340      	movs	r3, #64	@ 0x40
 8001bf4:	e721      	b.n	8001a3a <HAL_DMA_Init+0x15a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001bf6:	2210      	movs	r2, #16
 8001bf8:	e6c2      	b.n	8001980 <HAL_DMA_Init+0xa0>
      hdma->DMAmuxRequestGenStatus = 0U;
 8001bfa:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001bfe:	6765      	str	r5, [r4, #116]	@ 0x74
 8001c00:	e7d5      	b.n	8001bae <HAL_DMA_Init+0x2ce>
 8001c02:	bf00      	nop
 8001c04:	40020028 	.word	0x40020028
 8001c08:	58025408 	.word	0x58025408
 8001c0c:	5802541c 	.word	0x5802541c

08001c10 <HAL_DMA_Start_IT>:
{
 8001c10:	b570      	push	{r4, r5, r6, lr}
  if(hdma == NULL)
 8001c12:	4605      	mov	r5, r0
 8001c14:	2800      	cmp	r0, #0
 8001c16:	f000 80da 	beq.w	8001dce <HAL_DMA_Start_IT+0x1be>
  __HAL_LOCK(hdma);
 8001c1a:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8001c1e:	2801      	cmp	r0, #1
 8001c20:	f000 80d7 	beq.w	8001dd2 <HAL_DMA_Start_IT+0x1c2>
 8001c24:	2001      	movs	r0, #1
 8001c26:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c2a:	f895 0035 	ldrb.w	r0, [r5, #53]	@ 0x35
 8001c2e:	2801      	cmp	r0, #1
 8001c30:	f04f 0000 	mov.w	r0, #0
 8001c34:	f040 80c6 	bne.w	8001dc4 <HAL_DMA_Start_IT+0x1b4>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c38:	2402      	movs	r4, #2
    __HAL_DMA_DISABLE(hdma);
 8001c3a:	4e67      	ldr	r6, [pc, #412]	@ (8001dd8 <HAL_DMA_Start_IT+0x1c8>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c3c:	f885 4035 	strb.w	r4, [r5, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8001c40:	682c      	ldr	r4, [r5, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c42:	6568      	str	r0, [r5, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 8001c44:	42b4      	cmp	r4, r6
 8001c46:	d01e      	beq.n	8001c86 <HAL_DMA_Start_IT+0x76>
 8001c48:	4864      	ldr	r0, [pc, #400]	@ (8001ddc <HAL_DMA_Start_IT+0x1cc>)
 8001c4a:	4284      	cmp	r4, r0
 8001c4c:	d01b      	beq.n	8001c86 <HAL_DMA_Start_IT+0x76>
 8001c4e:	3018      	adds	r0, #24
 8001c50:	4284      	cmp	r4, r0
 8001c52:	d018      	beq.n	8001c86 <HAL_DMA_Start_IT+0x76>
 8001c54:	3018      	adds	r0, #24
 8001c56:	4284      	cmp	r4, r0
 8001c58:	d015      	beq.n	8001c86 <HAL_DMA_Start_IT+0x76>
 8001c5a:	3018      	adds	r0, #24
 8001c5c:	4284      	cmp	r4, r0
 8001c5e:	d012      	beq.n	8001c86 <HAL_DMA_Start_IT+0x76>
 8001c60:	3018      	adds	r0, #24
 8001c62:	4284      	cmp	r4, r0
 8001c64:	d00f      	beq.n	8001c86 <HAL_DMA_Start_IT+0x76>
 8001c66:	3018      	adds	r0, #24
 8001c68:	4284      	cmp	r4, r0
 8001c6a:	d00c      	beq.n	8001c86 <HAL_DMA_Start_IT+0x76>
 8001c6c:	3018      	adds	r0, #24
 8001c6e:	4284      	cmp	r4, r0
 8001c70:	d009      	beq.n	8001c86 <HAL_DMA_Start_IT+0x76>
 8001c72:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8001c76:	4284      	cmp	r4, r0
 8001c78:	d005      	beq.n	8001c86 <HAL_DMA_Start_IT+0x76>
 8001c7a:	3018      	adds	r0, #24
 8001c7c:	4284      	cmp	r4, r0
 8001c7e:	d002      	beq.n	8001c86 <HAL_DMA_Start_IT+0x76>
 8001c80:	3018      	adds	r0, #24
 8001c82:	4284      	cmp	r4, r0
 8001c84:	d0ff      	beq.n	8001c86 <HAL_DMA_Start_IT+0x76>
 8001c86:	6820      	ldr	r0, [r4, #0]
 8001c88:	f020 0001 	bic.w	r0, r0, #1
 8001c8c:	6020      	str	r0, [r4, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c8e:	4628      	mov	r0, r5
 8001c90:	f7ff fcb0 	bl	80015f4 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c94:	42b4      	cmp	r4, r6
 8001c96:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001c98:	d053      	beq.n	8001d42 <HAL_DMA_Start_IT+0x132>
 8001c9a:	4b50      	ldr	r3, [pc, #320]	@ (8001ddc <HAL_DMA_Start_IT+0x1cc>)
 8001c9c:	429c      	cmp	r4, r3
 8001c9e:	d050      	beq.n	8001d42 <HAL_DMA_Start_IT+0x132>
 8001ca0:	3318      	adds	r3, #24
 8001ca2:	429c      	cmp	r4, r3
 8001ca4:	d04d      	beq.n	8001d42 <HAL_DMA_Start_IT+0x132>
 8001ca6:	3318      	adds	r3, #24
 8001ca8:	429c      	cmp	r4, r3
 8001caa:	d04a      	beq.n	8001d42 <HAL_DMA_Start_IT+0x132>
 8001cac:	3318      	adds	r3, #24
 8001cae:	429c      	cmp	r4, r3
 8001cb0:	d047      	beq.n	8001d42 <HAL_DMA_Start_IT+0x132>
 8001cb2:	3318      	adds	r3, #24
 8001cb4:	429c      	cmp	r4, r3
 8001cb6:	d044      	beq.n	8001d42 <HAL_DMA_Start_IT+0x132>
 8001cb8:	3318      	adds	r3, #24
 8001cba:	429c      	cmp	r4, r3
 8001cbc:	d041      	beq.n	8001d42 <HAL_DMA_Start_IT+0x132>
 8001cbe:	3318      	adds	r3, #24
 8001cc0:	429c      	cmp	r4, r3
 8001cc2:	d03e      	beq.n	8001d42 <HAL_DMA_Start_IT+0x132>
 8001cc4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8001cc8:	429c      	cmp	r4, r3
 8001cca:	d03a      	beq.n	8001d42 <HAL_DMA_Start_IT+0x132>
 8001ccc:	3318      	adds	r3, #24
 8001cce:	429c      	cmp	r4, r3
 8001cd0:	d037      	beq.n	8001d42 <HAL_DMA_Start_IT+0x132>
 8001cd2:	3318      	adds	r3, #24
 8001cd4:	429c      	cmp	r4, r3
 8001cd6:	d034      	beq.n	8001d42 <HAL_DMA_Start_IT+0x132>
 8001cd8:	3318      	adds	r3, #24
 8001cda:	429c      	cmp	r4, r3
 8001cdc:	d031      	beq.n	8001d42 <HAL_DMA_Start_IT+0x132>
 8001cde:	3318      	adds	r3, #24
 8001ce0:	429c      	cmp	r4, r3
 8001ce2:	d02e      	beq.n	8001d42 <HAL_DMA_Start_IT+0x132>
 8001ce4:	3318      	adds	r3, #24
 8001ce6:	429c      	cmp	r4, r3
 8001ce8:	d02b      	beq.n	8001d42 <HAL_DMA_Start_IT+0x132>
 8001cea:	3318      	adds	r3, #24
 8001cec:	429c      	cmp	r4, r3
 8001cee:	d028      	beq.n	8001d42 <HAL_DMA_Start_IT+0x132>
 8001cf0:	3318      	adds	r3, #24
 8001cf2:	429c      	cmp	r4, r3
 8001cf4:	d025      	beq.n	8001d42 <HAL_DMA_Start_IT+0x132>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001cf6:	6823      	ldr	r3, [r4, #0]
 8001cf8:	f023 030e 	bic.w	r3, r3, #14
 8001cfc:	f043 030a 	orr.w	r3, r3, #10
 8001d00:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001d02:	2a00      	cmp	r2, #0
 8001d04:	d154      	bne.n	8001db0 <HAL_DMA_Start_IT+0x1a0>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d06:	4b36      	ldr	r3, [pc, #216]	@ (8001de0 <HAL_DMA_Start_IT+0x1d0>)
 8001d08:	429c      	cmp	r4, r3
 8001d0a:	d025      	beq.n	8001d58 <HAL_DMA_Start_IT+0x148>
 8001d0c:	4b35      	ldr	r3, [pc, #212]	@ (8001de4 <HAL_DMA_Start_IT+0x1d4>)
 8001d0e:	429c      	cmp	r4, r3
 8001d10:	d022      	beq.n	8001d58 <HAL_DMA_Start_IT+0x148>
 8001d12:	3314      	adds	r3, #20
 8001d14:	429c      	cmp	r4, r3
 8001d16:	d01f      	beq.n	8001d58 <HAL_DMA_Start_IT+0x148>
 8001d18:	3314      	adds	r3, #20
 8001d1a:	429c      	cmp	r4, r3
 8001d1c:	d01c      	beq.n	8001d58 <HAL_DMA_Start_IT+0x148>
 8001d1e:	3314      	adds	r3, #20
 8001d20:	429c      	cmp	r4, r3
 8001d22:	d019      	beq.n	8001d58 <HAL_DMA_Start_IT+0x148>
 8001d24:	3314      	adds	r3, #20
 8001d26:	429c      	cmp	r4, r3
 8001d28:	d016      	beq.n	8001d58 <HAL_DMA_Start_IT+0x148>
 8001d2a:	3314      	adds	r3, #20
 8001d2c:	429c      	cmp	r4, r3
 8001d2e:	d013      	beq.n	8001d58 <HAL_DMA_Start_IT+0x148>
 8001d30:	3314      	adds	r3, #20
 8001d32:	429c      	cmp	r4, r3
 8001d34:	d010      	beq.n	8001d58 <HAL_DMA_Start_IT+0x148>
    __HAL_DMA_ENABLE(hdma);
 8001d36:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d38:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6023      	str	r3, [r4, #0]
}
 8001d40:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	f023 031e 	bic.w	r3, r3, #30
 8001d48:	f043 0316 	orr.w	r3, r3, #22
 8001d4c:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001d4e:	b11a      	cbz	r2, 8001d58 <HAL_DMA_Start_IT+0x148>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	f043 0308 	orr.w	r3, r3, #8
 8001d56:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d58:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	03d2      	lsls	r2, r2, #15
 8001d5e:	d42c      	bmi.n	8001dba <HAL_DMA_Start_IT+0x1aa>
      if(hdma->DMAmuxRequestGen != 0U)
 8001d60:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8001d62:	b11b      	cbz	r3, 8001d6c <HAL_DMA_Start_IT+0x15c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d6a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001d6c:	42b4      	cmp	r4, r6
 8001d6e:	d0e2      	beq.n	8001d36 <HAL_DMA_Start_IT+0x126>
 8001d70:	4b1a      	ldr	r3, [pc, #104]	@ (8001ddc <HAL_DMA_Start_IT+0x1cc>)
 8001d72:	429c      	cmp	r4, r3
 8001d74:	d0df      	beq.n	8001d36 <HAL_DMA_Start_IT+0x126>
 8001d76:	3318      	adds	r3, #24
 8001d78:	429c      	cmp	r4, r3
 8001d7a:	d0dc      	beq.n	8001d36 <HAL_DMA_Start_IT+0x126>
 8001d7c:	3318      	adds	r3, #24
 8001d7e:	429c      	cmp	r4, r3
 8001d80:	d0d9      	beq.n	8001d36 <HAL_DMA_Start_IT+0x126>
 8001d82:	3318      	adds	r3, #24
 8001d84:	429c      	cmp	r4, r3
 8001d86:	d0d6      	beq.n	8001d36 <HAL_DMA_Start_IT+0x126>
 8001d88:	3318      	adds	r3, #24
 8001d8a:	429c      	cmp	r4, r3
 8001d8c:	d0d3      	beq.n	8001d36 <HAL_DMA_Start_IT+0x126>
 8001d8e:	3318      	adds	r3, #24
 8001d90:	429c      	cmp	r4, r3
 8001d92:	d0d0      	beq.n	8001d36 <HAL_DMA_Start_IT+0x126>
 8001d94:	3318      	adds	r3, #24
 8001d96:	429c      	cmp	r4, r3
 8001d98:	d0cd      	beq.n	8001d36 <HAL_DMA_Start_IT+0x126>
 8001d9a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8001d9e:	429c      	cmp	r4, r3
 8001da0:	d0c9      	beq.n	8001d36 <HAL_DMA_Start_IT+0x126>
 8001da2:	3318      	adds	r3, #24
 8001da4:	429c      	cmp	r4, r3
 8001da6:	d0c6      	beq.n	8001d36 <HAL_DMA_Start_IT+0x126>
 8001da8:	3318      	adds	r3, #24
 8001daa:	429c      	cmp	r4, r3
 8001dac:	d0c3      	beq.n	8001d36 <HAL_DMA_Start_IT+0x126>
 8001dae:	e7c2      	b.n	8001d36 <HAL_DMA_Start_IT+0x126>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001db0:	6823      	ldr	r3, [r4, #0]
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	6023      	str	r3, [r4, #0]
 8001db8:	e7a5      	b.n	8001d06 <HAL_DMA_Start_IT+0xf6>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	e7cd      	b.n	8001d60 <HAL_DMA_Start_IT+0x150>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001dc4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 8001dc8:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001dcc:	656b      	str	r3, [r5, #84]	@ 0x54
    return HAL_ERROR;
 8001dce:	2001      	movs	r0, #1
 8001dd0:	e7b6      	b.n	8001d40 <HAL_DMA_Start_IT+0x130>
  __HAL_LOCK(hdma);
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	e7b4      	b.n	8001d40 <HAL_DMA_Start_IT+0x130>
 8001dd6:	bf00      	nop
 8001dd8:	40020010 	.word	0x40020010
 8001ddc:	40020028 	.word	0x40020028
 8001de0:	58025408 	.word	0x58025408
 8001de4:	5802541c 	.word	0x5802541c

08001de8 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0U;
 8001de8:	2300      	movs	r3, #0
{
 8001dea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8001dee:	9301      	str	r3, [sp, #4]
{
 8001df0:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8001df2:	4b84      	ldr	r3, [pc, #528]	@ (8002004 <HAL_DMA_IRQHandler+0x21c>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001df4:	4f84      	ldr	r7, [pc, #528]	@ (8002008 <HAL_DMA_IRQHandler+0x220>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8001df6:	681e      	ldr	r6, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001df8:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dfa:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001dfc:	42bb      	cmp	r3, r7
  tmpisr_dma  = regs_dma->ISR;
 8001dfe:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 8001e02:	f8d5 c000 	ldr.w	ip, [r5]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001e06:	d047      	beq.n	8001e98 <HAL_DMA_IRQHandler+0xb0>
 8001e08:	4a80      	ldr	r2, [pc, #512]	@ (800200c <HAL_DMA_IRQHandler+0x224>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d044      	beq.n	8001e98 <HAL_DMA_IRQHandler+0xb0>
 8001e0e:	3218      	adds	r2, #24
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d041      	beq.n	8001e98 <HAL_DMA_IRQHandler+0xb0>
 8001e14:	3218      	adds	r2, #24
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d03e      	beq.n	8001e98 <HAL_DMA_IRQHandler+0xb0>
 8001e1a:	3218      	adds	r2, #24
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d03b      	beq.n	8001e98 <HAL_DMA_IRQHandler+0xb0>
 8001e20:	3218      	adds	r2, #24
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d038      	beq.n	8001e98 <HAL_DMA_IRQHandler+0xb0>
 8001e26:	3218      	adds	r2, #24
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d035      	beq.n	8001e98 <HAL_DMA_IRQHandler+0xb0>
 8001e2c:	3218      	adds	r2, #24
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d032      	beq.n	8001e98 <HAL_DMA_IRQHandler+0xb0>
 8001e32:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d02e      	beq.n	8001e98 <HAL_DMA_IRQHandler+0xb0>
 8001e3a:	3218      	adds	r2, #24
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d02b      	beq.n	8001e98 <HAL_DMA_IRQHandler+0xb0>
 8001e40:	3218      	adds	r2, #24
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d028      	beq.n	8001e98 <HAL_DMA_IRQHandler+0xb0>
 8001e46:	3218      	adds	r2, #24
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d025      	beq.n	8001e98 <HAL_DMA_IRQHandler+0xb0>
 8001e4c:	3218      	adds	r2, #24
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d022      	beq.n	8001e98 <HAL_DMA_IRQHandler+0xb0>
 8001e52:	3218      	adds	r2, #24
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d01f      	beq.n	8001e98 <HAL_DMA_IRQHandler+0xb0>
 8001e58:	3218      	adds	r2, #24
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d01c      	beq.n	8001e98 <HAL_DMA_IRQHandler+0xb0>
 8001e5e:	3218      	adds	r2, #24
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d019      	beq.n	8001e98 <HAL_DMA_IRQHandler+0xb0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001e64:	4a6a      	ldr	r2, [pc, #424]	@ (8002010 <HAL_DMA_IRQHandler+0x228>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	f040 8136 	bne.w	80020d8 <HAL_DMA_IRQHandler+0x2f0>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001e6c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8001e6e:	2004      	movs	r0, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8001e70:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001e72:	f001 011f 	and.w	r1, r1, #31
 8001e76:	4088      	lsls	r0, r1
 8001e78:	ea10 0f0c 	tst.w	r0, ip
 8001e7c:	f000 8153 	beq.w	8002126 <HAL_DMA_IRQHandler+0x33e>
 8001e80:	0756      	lsls	r6, r2, #29
 8001e82:	f140 8150 	bpl.w	8002126 <HAL_DMA_IRQHandler+0x33e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001e86:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8001e88:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001e8a:	f140 8144 	bpl.w	8002116 <HAL_DMA_IRQHandler+0x32e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001e8e:	03d3      	lsls	r3, r2, #15
 8001e90:	f100 8147 	bmi.w	8002122 <HAL_DMA_IRQHandler+0x33a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e94:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001e96:	e0a0      	b.n	8001fda <HAL_DMA_IRQHandler+0x1f2>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e98:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001e9a:	2108      	movs	r1, #8
 8001e9c:	f002 021f 	and.w	r2, r2, #31
 8001ea0:	4091      	lsls	r1, r2
 8001ea2:	ea11 0f08 	tst.w	r1, r8
 8001ea6:	d00b      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0xd8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	0740      	lsls	r0, r0, #29
 8001eac:	d508      	bpl.n	8001ec0 <HAL_DMA_IRQHandler+0xd8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	f020 0004 	bic.w	r0, r0, #4
 8001eb4:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001eb6:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001eb8:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8001eba:	f041 0101 	orr.w	r1, r1, #1
 8001ebe:	6561      	str	r1, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001ec0:	fa28 f102 	lsr.w	r1, r8, r2
 8001ec4:	07c8      	lsls	r0, r1, #31
 8001ec6:	d509      	bpl.n	8001edc <HAL_DMA_IRQHandler+0xf4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001ec8:	6959      	ldr	r1, [r3, #20]
 8001eca:	0609      	lsls	r1, r1, #24
 8001ecc:	d506      	bpl.n	8001edc <HAL_DMA_IRQHandler+0xf4>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001ece:	2101      	movs	r1, #1
 8001ed0:	4091      	lsls	r1, r2
 8001ed2:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ed4:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8001ed6:	f041 0102 	orr.w	r1, r1, #2
 8001eda:	6561      	str	r1, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001edc:	2104      	movs	r1, #4
 8001ede:	4091      	lsls	r1, r2
 8001ee0:	ea11 0f08 	tst.w	r1, r8
 8001ee4:	d007      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0x10e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	0780      	lsls	r0, r0, #30
 8001eea:	d504      	bpl.n	8001ef6 <HAL_DMA_IRQHandler+0x10e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001eec:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001eee:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8001ef0:	f041 0104 	orr.w	r1, r1, #4
 8001ef4:	6561      	str	r1, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001ef6:	2110      	movs	r1, #16
 8001ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8001efc:	ea12 0f08 	tst.w	r2, r8
 8001f00:	d00f      	beq.n	8001f22 <HAL_DMA_IRQHandler+0x13a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001f02:	6819      	ldr	r1, [r3, #0]
 8001f04:	0709      	lsls	r1, r1, #28
 8001f06:	d50c      	bpl.n	8001f22 <HAL_DMA_IRQHandler+0x13a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001f08:	60aa      	str	r2, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	0350      	lsls	r0, r2, #13
 8001f0e:	d56c      	bpl.n	8001fea <HAL_DMA_IRQHandler+0x202>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	0319      	lsls	r1, r3, #12
 8001f14:	d401      	bmi.n	8001f1a <HAL_DMA_IRQHandler+0x132>
          if(hdma->XferHalfCpltCallback != NULL)
 8001f16:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f18:	e000      	b.n	8001f1c <HAL_DMA_IRQHandler+0x134>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001f1a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 8001f1c:	b10b      	cbz	r3, 8001f22 <HAL_DMA_IRQHandler+0x13a>
            hdma->XferHalfCpltCallback(hdma);
 8001f1e:	4620      	mov	r0, r4
 8001f20:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f22:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001f24:	2120      	movs	r1, #32
 8001f26:	f002 021f 	and.w	r2, r2, #31
 8001f2a:	4091      	lsls	r1, r2
 8001f2c:	ea11 0f08 	tst.w	r1, r8
 8001f30:	d07a      	beq.n	8002028 <HAL_DMA_IRQHandler+0x240>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001f32:	6823      	ldr	r3, [r4, #0]
 8001f34:	42bb      	cmp	r3, r7
 8001f36:	d02d      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x1ac>
 8001f38:	4834      	ldr	r0, [pc, #208]	@ (800200c <HAL_DMA_IRQHandler+0x224>)
 8001f3a:	4283      	cmp	r3, r0
 8001f3c:	d02a      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x1ac>
 8001f3e:	3018      	adds	r0, #24
 8001f40:	4283      	cmp	r3, r0
 8001f42:	d027      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x1ac>
 8001f44:	3018      	adds	r0, #24
 8001f46:	4283      	cmp	r3, r0
 8001f48:	d024      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x1ac>
 8001f4a:	3018      	adds	r0, #24
 8001f4c:	4283      	cmp	r3, r0
 8001f4e:	d021      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x1ac>
 8001f50:	3018      	adds	r0, #24
 8001f52:	4283      	cmp	r3, r0
 8001f54:	d01e      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x1ac>
 8001f56:	3018      	adds	r0, #24
 8001f58:	4283      	cmp	r3, r0
 8001f5a:	d01b      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x1ac>
 8001f5c:	3018      	adds	r0, #24
 8001f5e:	4283      	cmp	r3, r0
 8001f60:	d018      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x1ac>
 8001f62:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8001f66:	4283      	cmp	r3, r0
 8001f68:	d014      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x1ac>
 8001f6a:	3018      	adds	r0, #24
 8001f6c:	4283      	cmp	r3, r0
 8001f6e:	d011      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x1ac>
 8001f70:	3018      	adds	r0, #24
 8001f72:	4283      	cmp	r3, r0
 8001f74:	d00e      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x1ac>
 8001f76:	3018      	adds	r0, #24
 8001f78:	4283      	cmp	r3, r0
 8001f7a:	d00b      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x1ac>
 8001f7c:	3018      	adds	r0, #24
 8001f7e:	4283      	cmp	r3, r0
 8001f80:	d008      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x1ac>
 8001f82:	3018      	adds	r0, #24
 8001f84:	4283      	cmp	r3, r0
 8001f86:	d005      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x1ac>
 8001f88:	3018      	adds	r0, #24
 8001f8a:	4283      	cmp	r3, r0
 8001f8c:	d002      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x1ac>
 8001f8e:	3018      	adds	r0, #24
 8001f90:	4283      	cmp	r3, r0
 8001f92:	d132      	bne.n	8001ffa <HAL_DMA_IRQHandler+0x212>
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	f010 0f10 	tst.w	r0, #16
 8001f9a:	d045      	beq.n	8002028 <HAL_DMA_IRQHandler+0x240>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001f9c:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f9e:	f894 1035 	ldrb.w	r1, [r4, #53]	@ 0x35
 8001fa2:	2904      	cmp	r1, #4
 8001fa4:	d136      	bne.n	8002014 <HAL_DMA_IRQHandler+0x22c>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fa6:	6819      	ldr	r1, [r3, #0]
 8001fa8:	f021 0116 	bic.w	r1, r1, #22
 8001fac:	6019      	str	r1, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001fae:	6959      	ldr	r1, [r3, #20]
 8001fb0:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8001fb4:	6159      	str	r1, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fb6:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001fb8:	b909      	cbnz	r1, 8001fbe <HAL_DMA_IRQHandler+0x1d6>
 8001fba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8001fbc:	b119      	cbz	r1, 8001fc6 <HAL_DMA_IRQHandler+0x1de>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001fbe:	6819      	ldr	r1, [r3, #0]
 8001fc0:	f021 0108 	bic.w	r1, r1, #8
 8001fc4:	6019      	str	r1, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001fc6:	233f      	movs	r3, #63	@ 0x3f
 8001fc8:	4093      	lsls	r3, r2
 8001fca:	60ab      	str	r3, [r5, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8001fd8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
      if (hdma->XferErrorCallback != NULL)
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 8098 	beq.w	8002110 <HAL_DMA_IRQHandler+0x328>
        hdma->XferErrorCallback(hdma);
 8001fe0:	4620      	mov	r0, r4
}
 8001fe2:	b002      	add	sp, #8
 8001fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8001fe8:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	05d2      	lsls	r2, r2, #23
 8001fee:	d492      	bmi.n	8001f16 <HAL_DMA_IRQHandler+0x12e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	f022 0208 	bic.w	r2, r2, #8
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	e78d      	b.n	8001f16 <HAL_DMA_IRQHandler+0x12e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	f010 0f02 	tst.w	r0, #2
 8002000:	e7cb      	b.n	8001f9a <HAL_DMA_IRQHandler+0x1b2>
 8002002:	bf00      	nop
 8002004:	24000004 	.word	0x24000004
 8002008:	40020010 	.word	0x40020010
 800200c:	40020028 	.word	0x40020028
 8002010:	58025408 	.word	0x58025408
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	0350      	lsls	r0, r2, #13
 8002018:	d543      	bpl.n	80020a2 <HAL_DMA_IRQHandler+0x2ba>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	0319      	lsls	r1, r3, #12
 800201e:	d44d      	bmi.n	80020bc <HAL_DMA_IRQHandler+0x2d4>
            if(hdma->XferM1CpltCallback != NULL)
 8002020:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          if(hdma->XferCpltCallback != NULL)
 8002022:	b10b      	cbz	r3, 8002028 <HAL_DMA_IRQHandler+0x240>
            hdma->XferCpltCallback(hdma);
 8002024:	4620      	mov	r0, r4
 8002026:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002028:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800202a:	2b00      	cmp	r3, #0
 800202c:	d070      	beq.n	8002110 <HAL_DMA_IRQHandler+0x328>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800202e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002030:	07da      	lsls	r2, r3, #31
 8002032:	d54f      	bpl.n	80020d4 <HAL_DMA_IRQHandler+0x2ec>
        hdma->State = HAL_DMA_STATE_ABORT;
 8002034:	2304      	movs	r3, #4
 8002036:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_DMA_DISABLE(hdma);
 800203a:	6823      	ldr	r3, [r4, #0]
 800203c:	42bb      	cmp	r3, r7
 800203e:	d01e      	beq.n	800207e <HAL_DMA_IRQHandler+0x296>
 8002040:	4a4f      	ldr	r2, [pc, #316]	@ (8002180 <HAL_DMA_IRQHandler+0x398>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d01b      	beq.n	800207e <HAL_DMA_IRQHandler+0x296>
 8002046:	3218      	adds	r2, #24
 8002048:	4293      	cmp	r3, r2
 800204a:	d018      	beq.n	800207e <HAL_DMA_IRQHandler+0x296>
 800204c:	3218      	adds	r2, #24
 800204e:	4293      	cmp	r3, r2
 8002050:	d015      	beq.n	800207e <HAL_DMA_IRQHandler+0x296>
 8002052:	3218      	adds	r2, #24
 8002054:	4293      	cmp	r3, r2
 8002056:	d012      	beq.n	800207e <HAL_DMA_IRQHandler+0x296>
 8002058:	3218      	adds	r2, #24
 800205a:	4293      	cmp	r3, r2
 800205c:	d00f      	beq.n	800207e <HAL_DMA_IRQHandler+0x296>
 800205e:	3218      	adds	r2, #24
 8002060:	4293      	cmp	r3, r2
 8002062:	d00c      	beq.n	800207e <HAL_DMA_IRQHandler+0x296>
 8002064:	3218      	adds	r2, #24
 8002066:	4293      	cmp	r3, r2
 8002068:	d009      	beq.n	800207e <HAL_DMA_IRQHandler+0x296>
 800206a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800206e:	4293      	cmp	r3, r2
 8002070:	d005      	beq.n	800207e <HAL_DMA_IRQHandler+0x296>
 8002072:	3218      	adds	r2, #24
 8002074:	4293      	cmp	r3, r2
 8002076:	d002      	beq.n	800207e <HAL_DMA_IRQHandler+0x296>
 8002078:	3218      	adds	r2, #24
 800207a:	4293      	cmp	r3, r2
 800207c:	d0ff      	beq.n	800207e <HAL_DMA_IRQHandler+0x296>
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	f022 0201 	bic.w	r2, r2, #1
 8002084:	601a      	str	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002086:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800208a:	fbb6 f6f2 	udiv	r6, r6, r2
          if (++count > timeout)
 800208e:	9a01      	ldr	r2, [sp, #4]
 8002090:	3201      	adds	r2, #1
 8002092:	42b2      	cmp	r2, r6
 8002094:	9201      	str	r2, [sp, #4]
 8002096:	d913      	bls.n	80020c0 <HAL_DMA_IRQHandler+0x2d8>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	07db      	lsls	r3, r3, #31
 800209c:	d414      	bmi.n	80020c8 <HAL_DMA_IRQHandler+0x2e0>
          hdma->State = HAL_DMA_STATE_READY;
 800209e:	2301      	movs	r3, #1
 80020a0:	e013      	b.n	80020ca <HAL_DMA_IRQHandler+0x2e2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 80020a8:	d108      	bne.n	80020bc <HAL_DMA_IRQHandler+0x2d4>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80020aa:	6819      	ldr	r1, [r3, #0]
 80020ac:	f021 0110 	bic.w	r1, r1, #16
 80020b0:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80020b2:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 80020b4:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80020b8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          if(hdma->XferCpltCallback != NULL)
 80020bc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80020be:	e7b0      	b.n	8002022 <HAL_DMA_IRQHandler+0x23a>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	07d7      	lsls	r7, r2, #31
 80020c4:	d4e3      	bmi.n	800208e <HAL_DMA_IRQHandler+0x2a6>
 80020c6:	e7e7      	b.n	8002098 <HAL_DMA_IRQHandler+0x2b0>
          hdma->State = HAL_DMA_STATE_ERROR;
 80020c8:	2303      	movs	r3, #3
      hdma->State = HAL_DMA_STATE_READY;
 80020ca:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80020ce:	2300      	movs	r3, #0
 80020d0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if (hdma->XferErrorCallback != NULL)
 80020d4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80020d6:	e780      	b.n	8001fda <HAL_DMA_IRQHandler+0x1f2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80020d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002184 <HAL_DMA_IRQHandler+0x39c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	f43f aec6 	beq.w	8001e6c <HAL_DMA_IRQHandler+0x84>
 80020e0:	3214      	adds	r2, #20
 80020e2:	4293      	cmp	r3, r2
 80020e4:	f43f aec2 	beq.w	8001e6c <HAL_DMA_IRQHandler+0x84>
 80020e8:	3214      	adds	r2, #20
 80020ea:	4293      	cmp	r3, r2
 80020ec:	f43f aebe 	beq.w	8001e6c <HAL_DMA_IRQHandler+0x84>
 80020f0:	3214      	adds	r2, #20
 80020f2:	4293      	cmp	r3, r2
 80020f4:	f43f aeba 	beq.w	8001e6c <HAL_DMA_IRQHandler+0x84>
 80020f8:	3214      	adds	r2, #20
 80020fa:	4293      	cmp	r3, r2
 80020fc:	f43f aeb6 	beq.w	8001e6c <HAL_DMA_IRQHandler+0x84>
 8002100:	3214      	adds	r2, #20
 8002102:	4293      	cmp	r3, r2
 8002104:	f43f aeb2 	beq.w	8001e6c <HAL_DMA_IRQHandler+0x84>
 8002108:	3214      	adds	r2, #20
 800210a:	4293      	cmp	r3, r2
 800210c:	f43f aeae 	beq.w	8001e6c <HAL_DMA_IRQHandler+0x84>
}
 8002110:	b002      	add	sp, #8
 8002112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002116:	0697      	lsls	r7, r2, #26
 8002118:	d403      	bmi.n	8002122 <HAL_DMA_IRQHandler+0x33a>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	f022 0204 	bic.w	r2, r2, #4
 8002120:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8002122:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002124:	e759      	b.n	8001fda <HAL_DMA_IRQHandler+0x1f2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002126:	2002      	movs	r0, #2
 8002128:	4088      	lsls	r0, r1
 800212a:	ea10 0f0c 	tst.w	r0, ip
 800212e:	d016      	beq.n	800215e <HAL_DMA_IRQHandler+0x376>
 8002130:	0796      	lsls	r6, r2, #30
 8002132:	d514      	bpl.n	800215e <HAL_DMA_IRQHandler+0x376>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002134:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002136:	0410      	lsls	r0, r2, #16
 8002138:	d503      	bpl.n	8002142 <HAL_DMA_IRQHandler+0x35a>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800213a:	03d1      	lsls	r1, r2, #15
 800213c:	d40d      	bmi.n	800215a <HAL_DMA_IRQHandler+0x372>
          if(hdma->XferM1CpltCallback != NULL)
 800213e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002140:	e74b      	b.n	8001fda <HAL_DMA_IRQHandler+0x1f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002142:	f012 0220 	ands.w	r2, r2, #32
 8002146:	d108      	bne.n	800215a <HAL_DMA_IRQHandler+0x372>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002148:	6819      	ldr	r1, [r3, #0]
 800214a:	f021 010a 	bic.w	r1, r1, #10
 800214e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002150:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8002152:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002156:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        if(hdma->XferCpltCallback != NULL)
 800215a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800215c:	e73d      	b.n	8001fda <HAL_DMA_IRQHandler+0x1f2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800215e:	2008      	movs	r0, #8
 8002160:	4088      	lsls	r0, r1
 8002162:	ea10 0f0c 	tst.w	r0, ip
 8002166:	d0d3      	beq.n	8002110 <HAL_DMA_IRQHandler+0x328>
 8002168:	0712      	lsls	r2, r2, #28
 800216a:	d5d1      	bpl.n	8002110 <HAL_DMA_IRQHandler+0x328>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	f022 020e 	bic.w	r2, r2, #14
 8002172:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002174:	2301      	movs	r3, #1
 8002176:	fa03 f101 	lsl.w	r1, r3, r1
 800217a:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800217c:	6563      	str	r3, [r4, #84]	@ 0x54
 800217e:	e7a4      	b.n	80020ca <HAL_DMA_IRQHandler+0x2e2>
 8002180:	40020028 	.word	0x40020028
 8002184:	5802541c 	.word	0x5802541c

08002188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800218c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218e:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8002354 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002192:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002196:	680a      	ldr	r2, [r1, #0]
 8002198:	fa32 f503 	lsrs.w	r5, r2, r3
 800219c:	d102      	bne.n	80021a4 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800219e:	b003      	add	sp, #12
 80021a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021a4:	2501      	movs	r5, #1
 80021a6:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 80021aa:	ea18 0202 	ands.w	r2, r8, r2
 80021ae:	f000 80bb 	beq.w	8002328 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021b2:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021b4:	2703      	movs	r7, #3
 80021b6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021ba:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021be:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021c2:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021c4:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021c8:	2f01      	cmp	r7, #1
 80021ca:	d834      	bhi.n	8002236 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80021cc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021ce:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021d2:	68cf      	ldr	r7, [r1, #12]
 80021d4:	fa07 f70e 	lsl.w	r7, r7, lr
 80021d8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80021dc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80021de:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021e0:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e4:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80021e8:	409f      	lsls	r7, r3
 80021ea:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80021ee:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80021f0:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f2:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021f4:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f8:	688f      	ldr	r7, [r1, #8]
 80021fa:	fa07 f70e 	lsl.w	r7, r7, lr
 80021fe:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8002202:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002204:	d119      	bne.n	800223a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8002206:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800220a:	f003 0a07 	and.w	sl, r3, #7
 800220e:	f04f 0b0f 	mov.w	fp, #15
 8002212:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002216:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800221a:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800221e:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002222:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002226:	690f      	ldr	r7, [r1, #16]
 8002228:	fa07 f70a 	lsl.w	r7, r7, sl
 800222c:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8002230:	f8c8 7020 	str.w	r7, [r8, #32]
 8002234:	e001      	b.n	800223a <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002236:	2d03      	cmp	r5, #3
 8002238:	d1da      	bne.n	80021f0 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 800223a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800223c:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002240:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002244:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002248:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 800224c:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800224e:	d06b      	beq.n	8002328 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002250:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8002254:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002258:	f003 0c03 	and.w	ip, r3, #3
 800225c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002260:	f045 0502 	orr.w	r5, r5, #2
 8002264:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002268:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226c:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8002270:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8002274:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002278:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227c:	f005 0502 	and.w	r5, r5, #2
 8002280:	9501      	str	r5, [sp, #4]
 8002282:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002284:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002286:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800228a:	4d31      	ldr	r5, [pc, #196]	@ (8002350 <HAL_GPIO_Init+0x1c8>)
 800228c:	42a8      	cmp	r0, r5
 800228e:	d04d      	beq.n	800232c <HAL_GPIO_Init+0x1a4>
 8002290:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002294:	42a8      	cmp	r0, r5
 8002296:	d04b      	beq.n	8002330 <HAL_GPIO_Init+0x1a8>
 8002298:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800229c:	42a8      	cmp	r0, r5
 800229e:	d049      	beq.n	8002334 <HAL_GPIO_Init+0x1ac>
 80022a0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80022a4:	42a8      	cmp	r0, r5
 80022a6:	d047      	beq.n	8002338 <HAL_GPIO_Init+0x1b0>
 80022a8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80022ac:	42a8      	cmp	r0, r5
 80022ae:	d045      	beq.n	800233c <HAL_GPIO_Init+0x1b4>
 80022b0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80022b4:	42a8      	cmp	r0, r5
 80022b6:	d043      	beq.n	8002340 <HAL_GPIO_Init+0x1b8>
 80022b8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80022bc:	42a8      	cmp	r0, r5
 80022be:	d041      	beq.n	8002344 <HAL_GPIO_Init+0x1bc>
 80022c0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80022c4:	42a8      	cmp	r0, r5
 80022c6:	d03f      	beq.n	8002348 <HAL_GPIO_Init+0x1c0>
 80022c8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80022cc:	42a8      	cmp	r0, r5
 80022ce:	d03d      	beq.n	800234c <HAL_GPIO_Init+0x1c4>
 80022d0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80022d4:	42a8      	cmp	r0, r5
 80022d6:	bf14      	ite	ne
 80022d8:	250a      	movne	r5, #10
 80022da:	2509      	moveq	r5, #9
 80022dc:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022e0:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022e4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e8:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 80022ea:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 80022ee:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80022f0:	bf0c      	ite	eq
 80022f2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80022f4:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022f6:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 80022fa:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 80022fc:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 80022fe:	bf0c      	ite	eq
 8002300:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002302:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002304:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8002308:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800230a:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 800230e:	bf0c      	ite	eq
 8002310:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002312:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002314:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8002316:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800231a:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 800231e:	bf54      	ite	pl
 8002320:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8002322:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8002324:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8002328:	3301      	adds	r3, #1
 800232a:	e734      	b.n	8002196 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800232c:	2500      	movs	r5, #0
 800232e:	e7d5      	b.n	80022dc <HAL_GPIO_Init+0x154>
 8002330:	2501      	movs	r5, #1
 8002332:	e7d3      	b.n	80022dc <HAL_GPIO_Init+0x154>
 8002334:	2502      	movs	r5, #2
 8002336:	e7d1      	b.n	80022dc <HAL_GPIO_Init+0x154>
 8002338:	2503      	movs	r5, #3
 800233a:	e7cf      	b.n	80022dc <HAL_GPIO_Init+0x154>
 800233c:	2504      	movs	r5, #4
 800233e:	e7cd      	b.n	80022dc <HAL_GPIO_Init+0x154>
 8002340:	2505      	movs	r5, #5
 8002342:	e7cb      	b.n	80022dc <HAL_GPIO_Init+0x154>
 8002344:	2506      	movs	r5, #6
 8002346:	e7c9      	b.n	80022dc <HAL_GPIO_Init+0x154>
 8002348:	2507      	movs	r5, #7
 800234a:	e7c7      	b.n	80022dc <HAL_GPIO_Init+0x154>
 800234c:	2508      	movs	r5, #8
 800234e:	e7c5      	b.n	80022dc <HAL_GPIO_Init+0x154>
 8002350:	58020000 	.word	0x58020000
 8002354:	58024400 	.word	0x58024400

08002358 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002358:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800235a:	4604      	mov	r4, r0
 800235c:	2800      	cmp	r0, #0
 800235e:	d054      	beq.n	800240a <HAL_I2S_Init+0xb2>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002360:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8002364:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002368:	b91b      	cbnz	r3, 8002372 <HAL_I2S_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800236a:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800236e:	f7fe fd09 	bl	8000d84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002372:	2302      	movs	r3, #2

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8002374:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8002376:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 800237a:	6813      	ldr	r3, [r2, #0]
 800237c:	07d8      	lsls	r0, r3, #31
 800237e:	d503      	bpl.n	8002388 <HAL_I2S_Init+0x30>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002380:	6813      	ldr	r3, [r2, #0]
 8002382:	f023 0301 	bic.w	r3, r3, #1
 8002386:	6013      	str	r3, [r2, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002388:	6861      	ldr	r1, [r4, #4]
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 800238a:	2300      	movs	r3, #0
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800238c:	68e0      	ldr	r0, [r4, #12]
 800238e:	290a      	cmp	r1, #10
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8002390:	6513      	str	r3, [r2, #80]	@ 0x50
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002392:	d84a      	bhi.n	800242a <HAL_I2S_Init+0xd2>
 8002394:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 8002398:	40ca      	lsrs	r2, r1
 800239a:	07d1      	lsls	r1, r2, #31
 800239c:	d545      	bpl.n	800242a <HAL_I2S_Init+0xd2>
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800239e:	6962      	ldr	r2, [r4, #20]
 80023a0:	2a02      	cmp	r2, #2
 80023a2:	d037      	beq.n	8002414 <HAL_I2S_Init+0xbc>
        /* Channel length is 16 bits */
        packetlength = 1UL;
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80023a4:	68a5      	ldr	r5, [r4, #8]
        packetlength = 2UL;
 80023a6:	4298      	cmp	r0, r3
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 80023a8:	f04f 0100 	mov.w	r1, #0
 80023ac:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80023b0:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
        packetlength = 2UL;
 80023b4:	bf14      	ite	ne
 80023b6:	2602      	movne	r6, #2
 80023b8:	2601      	moveq	r6, #1
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80023ba:	f1a5 0230 	sub.w	r2, r5, #48	@ 0x30
 80023be:	4255      	negs	r5, r2
 80023c0:	4155      	adcs	r5, r2
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 80023c2:	f001 fdd7 	bl	8003f74 <HAL_RCCEx_GetPeriphCLKFreq>
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80023c6:	6923      	ldr	r3, [r4, #16]
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80023c8:	210a      	movs	r1, #10
 80023ca:	6962      	ldr	r2, [r4, #20]
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80023cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80023d0:	bf15      	itete	ne
 80023d2:	2320      	movne	r3, #32
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80023d4:	f44f 7380 	moveq.w	r3, #256	@ 0x100
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80023d8:	40eb      	lsrne	r3, r5
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80023da:	40eb      	lsreq	r3, r5
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80023dc:	bf18      	it	ne
 80023de:	4373      	mulne	r3, r6
 80023e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e4:	434b      	muls	r3, r1
 80023e6:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80023ea:	220a      	movs	r2, #10
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80023ec:	3305      	adds	r3, #5
      tmp = tmp / 10UL;
 80023ee:	fbb3 f3f2 	udiv	r3, r3, r2

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80023f2:	085a      	lsrs	r2, r3, #1
      i2sdiv = 2UL;
      i2sodd = 0UL;
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 80023f4:	f013 0301 	ands.w	r3, r3, #1
 80023f8:	d001      	beq.n	80023fe <HAL_I2S_Init+0xa6>
 80023fa:	2a01      	cmp	r2, #1
 80023fc:	d001      	beq.n	8002402 <HAL_I2S_Init+0xaa>
 80023fe:	2aff      	cmp	r2, #255	@ 0xff
 8002400:	d905      	bls.n	800240e <HAL_I2S_Init+0xb6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002402:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002404:	f043 0310 	orr.w	r3, r3, #16
 8002408:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800240a:	2001      	movs	r0, #1

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 800240c:	bd70      	pop	{r4, r5, r6, pc}
      i2sodd = 1UL;
 800240e:	2a00      	cmp	r2, #0
 8002410:	bf08      	it	eq
 8002412:	2301      	moveq	r3, #1
    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8002414:	6820      	ldr	r0, [r4, #0]
 8002416:	061b      	lsls	r3, r3, #24
 8002418:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800241a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800241e:	f021 72ff 	bic.w	r2, r1, #33423360	@ 0x1fe0000
 8002422:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002426:	4313      	orrs	r3, r2
 8002428:	6503      	str	r3, [r0, #80]	@ 0x50
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 800242a:	6822      	ldr	r2, [r4, #0]
 800242c:	481d      	ldr	r0, [pc, #116]	@ (80024a4 <HAL_I2S_Init+0x14c>)
 800242e:	6d15      	ldr	r5, [r2, #80]	@ 0x50
 8002430:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 8002434:	4028      	ands	r0, r5
 8002436:	430b      	orrs	r3, r1
 8002438:	290a      	cmp	r1, #10
 800243a:	ea43 0300 	orr.w	r3, r3, r0
 800243e:	68e0      	ldr	r0, [r4, #12]
 8002440:	ea43 0300 	orr.w	r3, r3, r0
 8002444:	69a0      	ldr	r0, [r4, #24]
 8002446:	ea43 0300 	orr.w	r3, r3, r0
 800244a:	6a20      	ldr	r0, [r4, #32]
 800244c:	ea43 0300 	orr.w	r3, r3, r0
 8002450:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002452:	ea43 0300 	orr.w	r3, r3, r0
 8002456:	6920      	ldr	r0, [r4, #16]
 8002458:	ea43 0300 	orr.w	r3, r3, r0
  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 800245c:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6513      	str	r3, [r2, #80]	@ 0x50
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8002464:	f640 73f8 	movw	r3, #4088	@ 0xff8
 8002468:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 800246a:	6813      	ldr	r3, [r2, #0]
 800246c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002470:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8002472:	68d3      	ldr	r3, [r2, #12]
 8002474:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002478:	ea43 0300 	orr.w	r3, r3, r0
 800247c:	60d3      	str	r3, [r2, #12]
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800247e:	d80a      	bhi.n	8002496 <HAL_I2S_Init+0x13e>
 8002480:	f44f 638a 	mov.w	r3, #1104	@ 0x450
 8002484:	40cb      	lsrs	r3, r1
 8002486:	07db      	lsls	r3, r3, #31
 8002488:	d505      	bpl.n	8002496 <HAL_I2S_Init+0x13e>
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 800248a:	68d3      	ldr	r3, [r2, #12]
 800248c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800248e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002492:	430b      	orrs	r3, r1
 8002494:	60d3      	str	r3, [r2, #12]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002496:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8002498:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800249a:	6520      	str	r0, [r4, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 800249c:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
  return HAL_OK;
 80024a0:	e7b4      	b.n	800240c <HAL_I2S_Init+0xb4>
 80024a2:	bf00      	nop
 80024a4:	fdff9040 	.word	0xfdff9040

080024a8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80024a8:	4613      	mov	r3, r2
  HAL_StatusTypeDef errorcode = HAL_OK;

  if ((pData == NULL) || (Size == 0UL))
 80024aa:	460a      	mov	r2, r1
{
 80024ac:	b570      	push	{r4, r5, r6, lr}
 80024ae:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0UL))
 80024b0:	2900      	cmp	r1, #0
 80024b2:	d02c      	beq.n	800250e <HAL_I2S_Receive_DMA+0x66>
 80024b4:	b35b      	cbz	r3, 800250e <HAL_I2S_Receive_DMA+0x66>
  {
    return HAL_ERROR;
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80024b6:	f890 104d 	ldrb.w	r1, [r0, #77]	@ 0x4d
 80024ba:	2901      	cmp	r1, #1
 80024bc:	b2ce      	uxtb	r6, r1
 80024be:	d13f      	bne.n	8002540 <HAL_I2S_Receive_DMA+0x98>
  {
    return HAL_BUSY;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80024c0:	f890 104c 	ldrb.w	r1, [r0, #76]	@ 0x4c
 80024c4:	2901      	cmp	r1, #1
 80024c6:	d03b      	beq.n	8002540 <HAL_I2S_Receive_DMA+0x98>

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 80024c8:	2500      	movs	r5, #0
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 80024ca:	2104      	movs	r1, #4
  __HAL_LOCK(hi2s);
 80024cc:	f880 604c 	strb.w	r6, [r0, #76]	@ 0x4c
  hi2s->pRxBuffPtr  = pData;
 80024d0:	6342      	str	r2, [r0, #52]	@ 0x34
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 80024d2:	f880 104d 	strb.w	r1, [r0, #77]	@ 0x4d
  hi2s->RxXferSize  = Size;
  hi2s->RxXferCount = Size;

  /* Init field not used in handle to zero */
  hi2s->pTxBuffPtr  = NULL;
 80024d6:	62c5      	str	r5, [r0, #44]	@ 0x2c
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 80024d8:	6505      	str	r5, [r0, #80]	@ 0x50
  hi2s->RxXferSize  = Size;
 80024da:	8703      	strh	r3, [r0, #56]	@ 0x38
  hi2s->RxXferCount = Size;
 80024dc:	8743      	strh	r3, [r0, #58]	@ 0x3a
  hi2s->TxXferSize  = (uint16_t)0UL;
 80024de:	8605      	strh	r5, [r0, #48]	@ 0x30
  hi2s->TxXferCount = (uint16_t)0UL;


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80024e0:	4b18      	ldr	r3, [pc, #96]	@ (8002544 <HAL_I2S_Receive_DMA+0x9c>)
  hi2s->TxXferCount = (uint16_t)0UL;
 80024e2:	8645      	strh	r5, [r0, #50]	@ 0x32
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80024e4:	6c80      	ldr	r0, [r0, #72]	@ 0x48

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 80024e6:	6821      	ldr	r1, [r4, #0]
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80024e8:	6403      	str	r3, [r0, #64]	@ 0x40
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80024ea:	4b17      	ldr	r3, [pc, #92]	@ (8002548 <HAL_I2S_Receive_DMA+0xa0>)
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 80024ec:	3130      	adds	r1, #48	@ 0x30
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80024ee:	63c3      	str	r3, [r0, #60]	@ 0x3c
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80024f0:	4b16      	ldr	r3, [pc, #88]	@ (800254c <HAL_I2S_Receive_DMA+0xa4>)
 80024f2:	64c3      	str	r3, [r0, #76]	@ 0x4c
                                 hi2s->RxXferCount))
 80024f4:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	f7ff fb8a 	bl	8001c10 <HAL_DMA_Start_IT>
 80024fc:	b148      	cbz	r0, 8002512 <HAL_I2S_Receive_DMA+0x6a>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80024fe:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002500:	f043 0308 	orr.w	r3, r3, #8
 8002504:	6523      	str	r3, [r4, #80]	@ 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8002506:	f884 604d 	strb.w	r6, [r4, #77]	@ 0x4d
    errorcode = HAL_ERROR;
    __HAL_UNLOCK(hi2s);
 800250a:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
    return HAL_ERROR;
 800250e:	2001      	movs	r0, #1
  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);

  __HAL_UNLOCK(hi2s);
  return errorcode;
}
 8002510:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	0451      	lsls	r1, r2, #17
 8002518:	d403      	bmi.n	8002522 <HAL_I2S_Receive_DMA+0x7a>
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002520:	609a      	str	r2, [r3, #8]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	07d2      	lsls	r2, r2, #31
 8002526:	d403      	bmi.n	8002530 <HAL_I2S_Receive_DMA+0x88>
    __HAL_I2S_ENABLE(hi2s);
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002536:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hi2s);
 8002538:	2300      	movs	r3, #0
 800253a:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
  return errorcode;
 800253e:	e7e7      	b.n	8002510 <HAL_I2S_Receive_DMA+0x68>
    return HAL_BUSY;
 8002540:	2002      	movs	r0, #2
 8002542:	e7e5      	b.n	8002510 <HAL_I2S_Receive_DMA+0x68>
 8002544:	08002551 	.word	0x08002551
 8002548:	0800255b 	.word	0x0800255b
 800254c:	0800257f 	.word	0x0800257f

08002550 <I2S_DMARxHalfCplt>:

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002550:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8002552:	b508      	push	{r3, lr}
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002554:	f7fe fae0 	bl	8000b18 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002558:	bd08      	pop	{r3, pc}

0800255a <I2S_DMARxCplt>:
{
 800255a:	b508      	push	{r3, lr}
 800255c:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800255e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8002560:	69da      	ldr	r2, [r3, #28]
 8002562:	b942      	cbnz	r2, 8002576 <I2S_DMARxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8002564:	6801      	ldr	r1, [r0, #0]
 8002566:	688b      	ldr	r3, [r1, #8]
 8002568:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800256c:	608b      	str	r3, [r1, #8]
    hi2s->State = HAL_I2S_STATE_READY;
 800256e:	2301      	movs	r3, #1
    hi2s->RxXferCount = (uint16_t)0UL;
 8002570:	8742      	strh	r2, [r0, #58]	@ 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8002572:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  HAL_I2S_RxCpltCallback(hi2s);
 8002576:	f7fe faeb 	bl	8000b50 <HAL_I2S_RxCpltCallback>
}
 800257a:	bd08      	pop	{r3, pc}

0800257c <HAL_I2S_ErrorCallback>:
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
 800257c:	4770      	bx	lr

0800257e <I2S_DMAError>:
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800257e:	6b80      	ldr	r0, [r0, #56]	@ 0x38

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8002580:	6802      	ldr	r2, [r0, #0]
{
 8002582:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8002584:	6893      	ldr	r3, [r2, #8]
 8002586:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800258a:	6093      	str	r3, [r2, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 800258c:	2300      	movs	r3, #0
 800258e:	8643      	strh	r3, [r0, #50]	@ 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8002590:	8743      	strh	r3, [r0, #58]	@ 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8002592:	2301      	movs	r3, #1
 8002594:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002598:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800259a:	f043 0308 	orr.w	r3, r3, #8
 800259e:	6503      	str	r3, [r0, #80]	@ 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80025a0:	f7ff ffec 	bl	800257c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80025a4:	bd08      	pop	{r3, pc}
	...

080025a8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025a8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80025aa:	4c10      	ldr	r4, [pc, #64]	@ (80025ec <HAL_PWREx_ConfigSupply+0x44>)
 80025ac:	68e3      	ldr	r3, [r4, #12]
 80025ae:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025b2:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80025b4:	d105      	bne.n	80025c2 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	1a18      	subs	r0, r3, r0
 80025bc:	bf18      	it	ne
 80025be:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80025c0:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025c2:	f023 0307 	bic.w	r3, r3, #7
 80025c6:	4318      	orrs	r0, r3
 80025c8:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 80025ca:	f7fe ff4d 	bl	8001468 <HAL_GetTick>
 80025ce:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025d0:	6863      	ldr	r3, [r4, #4]
 80025d2:	049b      	lsls	r3, r3, #18
 80025d4:	d501      	bpl.n	80025da <HAL_PWREx_ConfigSupply+0x32>
      return HAL_OK;
 80025d6:	2000      	movs	r0, #0
 80025d8:	e7f2      	b.n	80025c0 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025da:	f7fe ff45 	bl	8001468 <HAL_GetTick>
 80025de:	1b40      	subs	r0, r0, r5
 80025e0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80025e4:	d9f4      	bls.n	80025d0 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 80025e6:	2001      	movs	r0, #1
 80025e8:	e7ea      	b.n	80025c0 <HAL_PWREx_ConfigSupply+0x18>
 80025ea:	bf00      	nop
 80025ec:	58024800 	.word	0x58024800

080025f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025f2:	4604      	mov	r4, r0
 80025f4:	2800      	cmp	r0, #0
 80025f6:	d074      	beq.n	80026e2 <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f8:	6803      	ldr	r3, [r0, #0]
 80025fa:	07d8      	lsls	r0, r3, #31
 80025fc:	d45e      	bmi.n	80026bc <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	0799      	lsls	r1, r3, #30
 8002602:	f100 80ad 	bmi.w	8002760 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	06da      	lsls	r2, r3, #27
 800260a:	d527      	bpl.n	800265c <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260c:	4a9c      	ldr	r2, [pc, #624]	@ (8002880 <HAL_RCC_OscConfig+0x290>)
 800260e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002610:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002612:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002616:	2b08      	cmp	r3, #8
 8002618:	d007      	beq.n	800262a <HAL_RCC_OscConfig+0x3a>
 800261a:	2b18      	cmp	r3, #24
 800261c:	f040 8103 	bne.w	8002826 <HAL_RCC_OscConfig+0x236>
 8002620:	f001 0303 	and.w	r3, r1, #3
 8002624:	2b01      	cmp	r3, #1
 8002626:	f040 80fe 	bne.w	8002826 <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800262a:	6813      	ldr	r3, [r2, #0]
 800262c:	05db      	lsls	r3, r3, #23
 800262e:	d502      	bpl.n	8002636 <HAL_RCC_OscConfig+0x46>
 8002630:	69e3      	ldr	r3, [r4, #28]
 8002632:	2b80      	cmp	r3, #128	@ 0x80
 8002634:	d155      	bne.n	80026e2 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002636:	f7fe ff33 	bl	80014a0 <HAL_GetREVID>
 800263a:	f241 0303 	movw	r3, #4099	@ 0x1003
 800263e:	6a21      	ldr	r1, [r4, #32]
 8002640:	4298      	cmp	r0, r3
 8002642:	4b8f      	ldr	r3, [pc, #572]	@ (8002880 <HAL_RCC_OscConfig+0x290>)
 8002644:	f200 80e8 	bhi.w	8002818 <HAL_RCC_OscConfig+0x228>
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	2920      	cmp	r1, #32
 800264c:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 8002650:	bf0c      	ite	eq
 8002652:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 8002656:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800265a:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	0719      	lsls	r1, r3, #28
 8002660:	f100 8123 	bmi.w	80028aa <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	069a      	lsls	r2, r3, #26
 8002668:	f100 8144 	bmi.w	80028f4 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	075d      	lsls	r5, r3, #29
 8002670:	d51e      	bpl.n	80026b0 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002672:	4d84      	ldr	r5, [pc, #528]	@ (8002884 <HAL_RCC_OscConfig+0x294>)
 8002674:	682b      	ldr	r3, [r5, #0]
 8002676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800267a:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800267c:	f7fe fef4 	bl	8001468 <HAL_GetTick>
 8002680:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002682:	682b      	ldr	r3, [r5, #0]
 8002684:	05da      	lsls	r2, r3, #23
 8002686:	f140 815a 	bpl.w	800293e <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800268a:	68a3      	ldr	r3, [r4, #8]
 800268c:	4d7c      	ldr	r5, [pc, #496]	@ (8002880 <HAL_RCC_OscConfig+0x290>)
 800268e:	2b01      	cmp	r3, #1
 8002690:	f040 815c 	bne.w	800294c <HAL_RCC_OscConfig+0x35c>
 8002694:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269c:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80026a0:	f7fe fee2 	bl	8001468 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026a4:	4e76      	ldr	r6, [pc, #472]	@ (8002880 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 80026a6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026a8:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80026aa:	079b      	lsls	r3, r3, #30
 80026ac:	f140 8174 	bpl.w	8002998 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80026b2:	2900      	cmp	r1, #0
 80026b4:	f040 8177 	bne.w	80029a6 <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 80026b8:	2000      	movs	r0, #0
 80026ba:	e02b      	b.n	8002714 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026bc:	4a70      	ldr	r2, [pc, #448]	@ (8002880 <HAL_RCC_OscConfig+0x290>)
 80026be:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026c0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026c6:	2b10      	cmp	r3, #16
 80026c8:	d005      	beq.n	80026d6 <HAL_RCC_OscConfig+0xe6>
 80026ca:	2b18      	cmp	r3, #24
 80026cc:	d10b      	bne.n	80026e6 <HAL_RCC_OscConfig+0xf6>
 80026ce:	f001 0303 	and.w	r3, r1, #3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d107      	bne.n	80026e6 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d6:	6813      	ldr	r3, [r2, #0]
 80026d8:	039a      	lsls	r2, r3, #14
 80026da:	d590      	bpl.n	80025fe <HAL_RCC_OscConfig+0xe>
 80026dc:	6863      	ldr	r3, [r4, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d18d      	bne.n	80025fe <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80026e2:	2001      	movs	r0, #1
 80026e4:	e016      	b.n	8002714 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e6:	6863      	ldr	r3, [r4, #4]
 80026e8:	4d65      	ldr	r5, [pc, #404]	@ (8002880 <HAL_RCC_OscConfig+0x290>)
 80026ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026ee:	d112      	bne.n	8002716 <HAL_RCC_OscConfig+0x126>
 80026f0:	682b      	ldr	r3, [r5, #0]
 80026f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80026f8:	f7fe feb6 	bl	8001468 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026fc:	4e60      	ldr	r6, [pc, #384]	@ (8002880 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80026fe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002700:	6833      	ldr	r3, [r6, #0]
 8002702:	039b      	lsls	r3, r3, #14
 8002704:	f53f af7b 	bmi.w	80025fe <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002708:	f7fe feae 	bl	8001468 <HAL_GetTick>
 800270c:	1b40      	subs	r0, r0, r5
 800270e:	2864      	cmp	r0, #100	@ 0x64
 8002710:	d9f6      	bls.n	8002700 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8002712:	2003      	movs	r0, #3
}
 8002714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002716:	b9a3      	cbnz	r3, 8002742 <HAL_RCC_OscConfig+0x152>
 8002718:	682b      	ldr	r3, [r5, #0]
 800271a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800271e:	602b      	str	r3, [r5, #0]
 8002720:	682b      	ldr	r3, [r5, #0]
 8002722:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002726:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002728:	f7fe fe9e 	bl	8001468 <HAL_GetTick>
 800272c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800272e:	682b      	ldr	r3, [r5, #0]
 8002730:	039f      	lsls	r7, r3, #14
 8002732:	f57f af64 	bpl.w	80025fe <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002736:	f7fe fe97 	bl	8001468 <HAL_GetTick>
 800273a:	1b80      	subs	r0, r0, r6
 800273c:	2864      	cmp	r0, #100	@ 0x64
 800273e:	d9f6      	bls.n	800272e <HAL_RCC_OscConfig+0x13e>
 8002740:	e7e7      	b.n	8002712 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002742:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002746:	682b      	ldr	r3, [r5, #0]
 8002748:	d103      	bne.n	8002752 <HAL_RCC_OscConfig+0x162>
 800274a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800274e:	602b      	str	r3, [r5, #0]
 8002750:	e7ce      	b.n	80026f0 <HAL_RCC_OscConfig+0x100>
 8002752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002756:	602b      	str	r3, [r5, #0]
 8002758:	682b      	ldr	r3, [r5, #0]
 800275a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800275e:	e7ca      	b.n	80026f6 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002760:	4947      	ldr	r1, [pc, #284]	@ (8002880 <HAL_RCC_OscConfig+0x290>)
 8002762:	68e2      	ldr	r2, [r4, #12]
 8002764:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002766:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002768:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800276c:	d003      	beq.n	8002776 <HAL_RCC_OscConfig+0x186>
 800276e:	2b18      	cmp	r3, #24
 8002770:	d12a      	bne.n	80027c8 <HAL_RCC_OscConfig+0x1d8>
 8002772:	0780      	lsls	r0, r0, #30
 8002774:	d128      	bne.n	80027c8 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002776:	680b      	ldr	r3, [r1, #0]
 8002778:	075b      	lsls	r3, r3, #29
 800277a:	d501      	bpl.n	8002780 <HAL_RCC_OscConfig+0x190>
 800277c:	2a00      	cmp	r2, #0
 800277e:	d0b0      	beq.n	80026e2 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002780:	4d3f      	ldr	r5, [pc, #252]	@ (8002880 <HAL_RCC_OscConfig+0x290>)
 8002782:	682b      	ldr	r3, [r5, #0]
 8002784:	f023 0319 	bic.w	r3, r3, #25
 8002788:	4313      	orrs	r3, r2
 800278a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800278c:	f7fe fe6c 	bl	8001468 <HAL_GetTick>
 8002790:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002792:	682b      	ldr	r3, [r5, #0]
 8002794:	075f      	lsls	r7, r3, #29
 8002796:	d511      	bpl.n	80027bc <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002798:	f7fe fe82 	bl	80014a0 <HAL_GetREVID>
 800279c:	f241 0303 	movw	r3, #4099	@ 0x1003
 80027a0:	6922      	ldr	r2, [r4, #16]
 80027a2:	4298      	cmp	r0, r3
 80027a4:	686b      	ldr	r3, [r5, #4]
 80027a6:	d822      	bhi.n	80027ee <HAL_RCC_OscConfig+0x1fe>
 80027a8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80027ac:	2a40      	cmp	r2, #64	@ 0x40
 80027ae:	bf0c      	ite	eq
 80027b0:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 80027b4:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80027b8:	606b      	str	r3, [r5, #4]
 80027ba:	e724      	b.n	8002606 <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027bc:	f7fe fe54 	bl	8001468 <HAL_GetTick>
 80027c0:	1b80      	subs	r0, r0, r6
 80027c2:	2802      	cmp	r0, #2
 80027c4:	d9e5      	bls.n	8002792 <HAL_RCC_OscConfig+0x1a2>
 80027c6:	e7a4      	b.n	8002712 <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027c8:	4d2d      	ldr	r5, [pc, #180]	@ (8002880 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027ca:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027cc:	b1a2      	cbz	r2, 80027f8 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027ce:	f023 0319 	bic.w	r3, r3, #25
 80027d2:	4313      	orrs	r3, r2
 80027d4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80027d6:	f7fe fe47 	bl	8001468 <HAL_GetTick>
 80027da:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027dc:	682b      	ldr	r3, [r5, #0]
 80027de:	0758      	lsls	r0, r3, #29
 80027e0:	d4da      	bmi.n	8002798 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e2:	f7fe fe41 	bl	8001468 <HAL_GetTick>
 80027e6:	1b80      	subs	r0, r0, r6
 80027e8:	2802      	cmp	r0, #2
 80027ea:	d9f7      	bls.n	80027dc <HAL_RCC_OscConfig+0x1ec>
 80027ec:	e791      	b.n	8002712 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ee:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80027f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80027f6:	e7df      	b.n	80027b8 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80027fe:	f7fe fe33 	bl	8001468 <HAL_GetTick>
 8002802:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002804:	682b      	ldr	r3, [r5, #0]
 8002806:	0759      	lsls	r1, r3, #29
 8002808:	f57f aefd 	bpl.w	8002606 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280c:	f7fe fe2c 	bl	8001468 <HAL_GetTick>
 8002810:	1b80      	subs	r0, r0, r6
 8002812:	2802      	cmp	r0, #2
 8002814:	d9f6      	bls.n	8002804 <HAL_RCC_OscConfig+0x214>
 8002816:	e77c      	b.n	8002712 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 800281e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002822:	60da      	str	r2, [r3, #12]
 8002824:	e71a      	b.n	800265c <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002826:	69e3      	ldr	r3, [r4, #28]
 8002828:	4d15      	ldr	r5, [pc, #84]	@ (8002880 <HAL_RCC_OscConfig+0x290>)
 800282a:	b36b      	cbz	r3, 8002888 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 800282c:	682b      	ldr	r3, [r5, #0]
 800282e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002832:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002834:	f7fe fe18 	bl	8001468 <HAL_GetTick>
 8002838:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800283a:	682b      	ldr	r3, [r5, #0]
 800283c:	05df      	lsls	r7, r3, #23
 800283e:	d511      	bpl.n	8002864 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002840:	f7fe fe2e 	bl	80014a0 <HAL_GetREVID>
 8002844:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002848:	6a22      	ldr	r2, [r4, #32]
 800284a:	4298      	cmp	r0, r3
 800284c:	d810      	bhi.n	8002870 <HAL_RCC_OscConfig+0x280>
 800284e:	686b      	ldr	r3, [r5, #4]
 8002850:	2a20      	cmp	r2, #32
 8002852:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002856:	bf0c      	ite	eq
 8002858:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800285c:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8002860:	606b      	str	r3, [r5, #4]
 8002862:	e6fb      	b.n	800265c <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002864:	f7fe fe00 	bl	8001468 <HAL_GetTick>
 8002868:	1b80      	subs	r0, r0, r6
 800286a:	2802      	cmp	r0, #2
 800286c:	d9e5      	bls.n	800283a <HAL_RCC_OscConfig+0x24a>
 800286e:	e750      	b.n	8002712 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002870:	68eb      	ldr	r3, [r5, #12]
 8002872:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8002876:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800287a:	60eb      	str	r3, [r5, #12]
 800287c:	e6ee      	b.n	800265c <HAL_RCC_OscConfig+0x6c>
 800287e:	bf00      	nop
 8002880:	58024400 	.word	0x58024400
 8002884:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8002888:	682b      	ldr	r3, [r5, #0]
 800288a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800288e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002890:	f7fe fdea 	bl	8001468 <HAL_GetTick>
 8002894:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002896:	682b      	ldr	r3, [r5, #0]
 8002898:	05d8      	lsls	r0, r3, #23
 800289a:	f57f aedf 	bpl.w	800265c <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800289e:	f7fe fde3 	bl	8001468 <HAL_GetTick>
 80028a2:	1b80      	subs	r0, r0, r6
 80028a4:	2802      	cmp	r0, #2
 80028a6:	d9f6      	bls.n	8002896 <HAL_RCC_OscConfig+0x2a6>
 80028a8:	e733      	b.n	8002712 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028aa:	6963      	ldr	r3, [r4, #20]
 80028ac:	4da3      	ldr	r5, [pc, #652]	@ (8002b3c <HAL_RCC_OscConfig+0x54c>)
 80028ae:	b183      	cbz	r3, 80028d2 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 80028b0:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80028b8:	f7fe fdd6 	bl	8001468 <HAL_GetTick>
 80028bc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028be:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80028c0:	079b      	lsls	r3, r3, #30
 80028c2:	f53f aecf 	bmi.w	8002664 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c6:	f7fe fdcf 	bl	8001468 <HAL_GetTick>
 80028ca:	1b80      	subs	r0, r0, r6
 80028cc:	2802      	cmp	r0, #2
 80028ce:	d9f6      	bls.n	80028be <HAL_RCC_OscConfig+0x2ce>
 80028d0:	e71f      	b.n	8002712 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 80028d2:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80028da:	f7fe fdc5 	bl	8001468 <HAL_GetTick>
 80028de:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028e0:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80028e2:	079f      	lsls	r7, r3, #30
 80028e4:	f57f aebe 	bpl.w	8002664 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e8:	f7fe fdbe 	bl	8001468 <HAL_GetTick>
 80028ec:	1b80      	subs	r0, r0, r6
 80028ee:	2802      	cmp	r0, #2
 80028f0:	d9f6      	bls.n	80028e0 <HAL_RCC_OscConfig+0x2f0>
 80028f2:	e70e      	b.n	8002712 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80028f4:	69a3      	ldr	r3, [r4, #24]
 80028f6:	4d91      	ldr	r5, [pc, #580]	@ (8002b3c <HAL_RCC_OscConfig+0x54c>)
 80028f8:	b183      	cbz	r3, 800291c <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 80028fa:	682b      	ldr	r3, [r5, #0]
 80028fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002900:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002902:	f7fe fdb1 	bl	8001468 <HAL_GetTick>
 8002906:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002908:	682b      	ldr	r3, [r5, #0]
 800290a:	0498      	lsls	r0, r3, #18
 800290c:	f53f aeae 	bmi.w	800266c <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002910:	f7fe fdaa 	bl	8001468 <HAL_GetTick>
 8002914:	1b80      	subs	r0, r0, r6
 8002916:	2802      	cmp	r0, #2
 8002918:	d9f6      	bls.n	8002908 <HAL_RCC_OscConfig+0x318>
 800291a:	e6fa      	b.n	8002712 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800291c:	682b      	ldr	r3, [r5, #0]
 800291e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002922:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002924:	f7fe fda0 	bl	8001468 <HAL_GetTick>
 8002928:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800292a:	682b      	ldr	r3, [r5, #0]
 800292c:	0499      	lsls	r1, r3, #18
 800292e:	f57f ae9d 	bpl.w	800266c <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002932:	f7fe fd99 	bl	8001468 <HAL_GetTick>
 8002936:	1b80      	subs	r0, r0, r6
 8002938:	2802      	cmp	r0, #2
 800293a:	d9f6      	bls.n	800292a <HAL_RCC_OscConfig+0x33a>
 800293c:	e6e9      	b.n	8002712 <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293e:	f7fe fd93 	bl	8001468 <HAL_GetTick>
 8002942:	1b80      	subs	r0, r0, r6
 8002944:	2864      	cmp	r0, #100	@ 0x64
 8002946:	f67f ae9c 	bls.w	8002682 <HAL_RCC_OscConfig+0x92>
 800294a:	e6e2      	b.n	8002712 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800294c:	b9b3      	cbnz	r3, 800297c <HAL_RCC_OscConfig+0x38c>
 800294e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002950:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	672b      	str	r3, [r5, #112]	@ 0x70
 800295a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800295c:	f023 0304 	bic.w	r3, r3, #4
 8002960:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002962:	f7fe fd81 	bl	8001468 <HAL_GetTick>
 8002966:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002968:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800296a:	0798      	lsls	r0, r3, #30
 800296c:	f57f aea0 	bpl.w	80026b0 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002970:	f7fe fd7a 	bl	8001468 <HAL_GetTick>
 8002974:	1b80      	subs	r0, r0, r6
 8002976:	42b8      	cmp	r0, r7
 8002978:	d9f6      	bls.n	8002968 <HAL_RCC_OscConfig+0x378>
 800297a:	e6ca      	b.n	8002712 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297c:	2b05      	cmp	r3, #5
 800297e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002980:	d103      	bne.n	800298a <HAL_RCC_OscConfig+0x39a>
 8002982:	f043 0304 	orr.w	r3, r3, #4
 8002986:	672b      	str	r3, [r5, #112]	@ 0x70
 8002988:	e684      	b.n	8002694 <HAL_RCC_OscConfig+0xa4>
 800298a:	f023 0301 	bic.w	r3, r3, #1
 800298e:	672b      	str	r3, [r5, #112]	@ 0x70
 8002990:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002992:	f023 0304 	bic.w	r3, r3, #4
 8002996:	e680      	b.n	800269a <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002998:	f7fe fd66 	bl	8001468 <HAL_GetTick>
 800299c:	1b40      	subs	r0, r0, r5
 800299e:	42b8      	cmp	r0, r7
 80029a0:	f67f ae82 	bls.w	80026a8 <HAL_RCC_OscConfig+0xb8>
 80029a4:	e6b5      	b.n	8002712 <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80029a6:	4d65      	ldr	r5, [pc, #404]	@ (8002b3c <HAL_RCC_OscConfig+0x54c>)
 80029a8:	692b      	ldr	r3, [r5, #16]
 80029aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029ae:	2b18      	cmp	r3, #24
 80029b0:	d078      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x4b4>
        __HAL_RCC_PLL_DISABLE();
 80029b2:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b4:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 80029b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029ba:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029bc:	d165      	bne.n	8002a8a <HAL_RCC_OscConfig+0x49a>
        tickstart = HAL_GetTick();
 80029be:	f7fe fd53 	bl	8001468 <HAL_GetTick>
 80029c2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029c4:	682b      	ldr	r3, [r5, #0]
 80029c6:	0199      	lsls	r1, r3, #6
 80029c8:	d459      	bmi.n	8002a7e <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ca:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80029cc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80029ce:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 80029d2:	f023 0303 	bic.w	r3, r3, #3
 80029d6:	4313      	orrs	r3, r2
 80029d8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80029da:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80029de:	62ab      	str	r3, [r5, #40]	@ 0x28
 80029e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80029e2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80029e4:	3b01      	subs	r3, #1
 80029e6:	3a01      	subs	r2, #1
 80029e8:	025b      	lsls	r3, r3, #9
 80029ea:	0412      	lsls	r2, r2, #16
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80029f2:	4313      	orrs	r3, r2
 80029f4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80029f6:	3a01      	subs	r2, #1
 80029f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029fc:	4313      	orrs	r3, r2
 80029fe:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002a00:	3a01      	subs	r2, #1
 8002a02:	0612      	lsls	r2, r2, #24
 8002a04:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a0c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002a0e:	f023 0301 	bic.w	r3, r3, #1
 8002a12:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a14:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002a16:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002a18:	f36f 03cf 	bfc	r3, #3, #13
 8002a1c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002a20:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a22:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002a24:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002a26:	f023 030c 	bic.w	r3, r3, #12
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a2e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002a30:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002a32:	f023 0302 	bic.w	r3, r3, #2
 8002a36:	4313      	orrs	r3, r2
 8002a38:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a3a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a40:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a42:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a48:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a4a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002a4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a50:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a52:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8002a5a:	682b      	ldr	r3, [r5, #0]
 8002a5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a60:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002a62:	f7fe fd01 	bl	8001468 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a66:	4d35      	ldr	r5, [pc, #212]	@ (8002b3c <HAL_RCC_OscConfig+0x54c>)
        tickstart = HAL_GetTick();
 8002a68:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a6a:	682b      	ldr	r3, [r5, #0]
 8002a6c:	019a      	lsls	r2, r3, #6
 8002a6e:	f53f ae23 	bmi.w	80026b8 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a72:	f7fe fcf9 	bl	8001468 <HAL_GetTick>
 8002a76:	1b00      	subs	r0, r0, r4
 8002a78:	2802      	cmp	r0, #2
 8002a7a:	d9f6      	bls.n	8002a6a <HAL_RCC_OscConfig+0x47a>
 8002a7c:	e649      	b.n	8002712 <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7e:	f7fe fcf3 	bl	8001468 <HAL_GetTick>
 8002a82:	1b80      	subs	r0, r0, r6
 8002a84:	2802      	cmp	r0, #2
 8002a86:	d99d      	bls.n	80029c4 <HAL_RCC_OscConfig+0x3d4>
 8002a88:	e643      	b.n	8002712 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8002a8a:	f7fe fced 	bl	8001468 <HAL_GetTick>
 8002a8e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a90:	682b      	ldr	r3, [r5, #0]
 8002a92:	019b      	lsls	r3, r3, #6
 8002a94:	f57f ae10 	bpl.w	80026b8 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a98:	f7fe fce6 	bl	8001468 <HAL_GetTick>
 8002a9c:	1b00      	subs	r0, r0, r4
 8002a9e:	2802      	cmp	r0, #2
 8002aa0:	d9f6      	bls.n	8002a90 <HAL_RCC_OscConfig+0x4a0>
 8002aa2:	e636      	b.n	8002712 <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa4:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002aa6:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002aa8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aaa:	f43f ae1a 	beq.w	80026e2 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002ab4:	4281      	cmp	r1, r0
 8002ab6:	f47f ae14 	bne.w	80026e2 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aba:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002abe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002ac0:	428a      	cmp	r2, r1
 8002ac2:	f47f ae0e 	bne.w	80026e2 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ac6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002ac8:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8002acc:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ace:	4291      	cmp	r1, r2
 8002ad0:	f47f ae07 	bne.w	80026e2 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ad4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8002ad6:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8002ada:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002adc:	4291      	cmp	r1, r2
 8002ade:	f47f ae00 	bne.w	80026e2 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ae2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002ae4:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8002ae8:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002aea:	4291      	cmp	r1, r2
 8002aec:	f47f adf9 	bne.w	80026e2 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002af0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002af2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002af6:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002af8:	4293      	cmp	r3, r2
 8002afa:	f47f adf2 	bne.w	80026e2 <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002afe:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b00:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b02:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b06:	429a      	cmp	r2, r3
 8002b08:	f43f add6 	beq.w	80026b8 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b0c:	4d0b      	ldr	r5, [pc, #44]	@ (8002b3c <HAL_RCC_OscConfig+0x54c>)
 8002b0e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8002b16:	f7fe fca7 	bl	8001468 <HAL_GetTick>
 8002b1a:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b1c:	f7fe fca4 	bl	8001468 <HAL_GetTick>
 8002b20:	42b0      	cmp	r0, r6
 8002b22:	d0fb      	beq.n	8002b1c <HAL_RCC_OscConfig+0x52c>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b24:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002b26:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002b28:	f36f 03cf 	bfc	r3, #3, #13
 8002b2c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002b30:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b32:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8002b3a:	e5bd      	b.n	80026b8 <HAL_RCC_OscConfig+0xc8>
 8002b3c:	58024400 	.word	0x58024400

08002b40 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b40:	4b49      	ldr	r3, [pc, #292]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x128>)
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8002b48:	2a10      	cmp	r2, #16
{
 8002b4a:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b4c:	f000 8088 	beq.w	8002c60 <HAL_RCC_GetSysClockFreq+0x120>
 8002b50:	2a18      	cmp	r2, #24
 8002b52:	d00c      	beq.n	8002b6e <HAL_RCC_GetSysClockFreq+0x2e>
 8002b54:	2a00      	cmp	r2, #0
 8002b56:	f040 8085 	bne.w	8002c64 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4843      	ldr	r0, [pc, #268]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002b5e:	f012 0f20 	tst.w	r2, #32
 8002b62:	d003      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002b6a:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8002b6c:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b6e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002b70:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b72:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 8002b74:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002b78:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002b7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 8002b7e:	d0f5      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002b80:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b84:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b88:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b8c:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002b90:	4362      	muls	r2, r4
 8002b92:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
        switch (pllsource)
 8002b96:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b9c:	ee06 2a90 	vmov	s13, r2
 8002ba0:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 8002ba4:	d04e      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0x104>
 8002ba6:	2902      	cmp	r1, #2
 8002ba8:	d03e      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0xe8>
 8002baa:	2900      	cmp	r1, #0
 8002bac:	d14a      	bne.n	8002c44 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	0692      	lsls	r2, r2, #26
 8002bb2:	d527      	bpl.n	8002c04 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002bb4:	6819      	ldr	r1, [r3, #0]
 8002bb6:	4a2d      	ldr	r2, [pc, #180]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002bb8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002bbe:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc4:	ee07 2a90 	vmov	s15, r2
 8002bc8:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8002bcc:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8002bd0:	ee07 3a10 	vmov	s14, r3
 8002bd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002bd8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002bdc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002be0:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002be4:	4b20      	ldr	r3, [pc, #128]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x128>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002bec:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002bee:	ee07 3a10 	vmov	s14, r3
 8002bf2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002bf6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002bfa:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8002bfe:	ee17 0a90 	vmov	r0, s15
 8002c02:	e7b3      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c0a:	ee07 3a90 	vmov	s15, r3
 8002c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c16:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002c1a:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8002c70 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c1e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8002c22:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 8002c26:	e7dd      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c2e:	ee07 3a90 	vmov	s15, r3
 8002c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c3a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002c3e:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 8002c74 <HAL_RCC_GetSysClockFreq+0x134>
 8002c42:	e7ec      	b.n	8002c1e <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c4a:	ee07 3a90 	vmov	s15, r3
 8002c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c56:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002c5a:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8002c78 <HAL_RCC_GetSysClockFreq+0x138>
 8002c5e:	e7de      	b.n	8002c1e <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c60:	4806      	ldr	r0, [pc, #24]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002c62:	e783      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8002c64:	4806      	ldr	r0, [pc, #24]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x140>)
 8002c66:	e781      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x2c>
 8002c68:	58024400 	.word	0x58024400
 8002c6c:	03d09000 	.word	0x03d09000
 8002c70:	4c742400 	.word	0x4c742400
 8002c74:	4bbebc20 	.word	0x4bbebc20
 8002c78:	4a742400 	.word	0x4a742400
 8002c7c:	017d7840 	.word	0x017d7840
 8002c80:	003d0900 	.word	0x003d0900

08002c84 <HAL_RCC_ClockConfig>:
{
 8002c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c88:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002c8a:	4604      	mov	r4, r0
 8002c8c:	b910      	cbnz	r0, 8002c94 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002c8e:	2001      	movs	r0, #1
}
 8002c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c94:	4a88      	ldr	r2, [pc, #544]	@ (8002eb8 <HAL_RCC_ClockConfig+0x234>)
 8002c96:	6813      	ldr	r3, [r2, #0]
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	428b      	cmp	r3, r1
 8002c9e:	f0c0 8093 	bcc.w	8002dc8 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	075f      	lsls	r7, r3, #29
 8002ca6:	f100 809b 	bmi.w	8002de0 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002caa:	071e      	lsls	r6, r3, #28
 8002cac:	d50b      	bpl.n	8002cc6 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cae:	4983      	ldr	r1, [pc, #524]	@ (8002ebc <HAL_RCC_ClockConfig+0x238>)
 8002cb0:	6960      	ldr	r0, [r4, #20]
 8002cb2:	69ca      	ldr	r2, [r1, #28]
 8002cb4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002cb8:	4290      	cmp	r0, r2
 8002cba:	d904      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cbc:	69ca      	ldr	r2, [r1, #28]
 8002cbe:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002cc2:	4302      	orrs	r2, r0
 8002cc4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc6:	06d8      	lsls	r0, r3, #27
 8002cc8:	d50b      	bpl.n	8002ce2 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cca:	497c      	ldr	r1, [pc, #496]	@ (8002ebc <HAL_RCC_ClockConfig+0x238>)
 8002ccc:	69a0      	ldr	r0, [r4, #24]
 8002cce:	69ca      	ldr	r2, [r1, #28]
 8002cd0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8002cd4:	4290      	cmp	r0, r2
 8002cd6:	d904      	bls.n	8002ce2 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cd8:	69ca      	ldr	r2, [r1, #28]
 8002cda:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002cde:	4302      	orrs	r2, r0
 8002ce0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ce2:	0699      	lsls	r1, r3, #26
 8002ce4:	d50b      	bpl.n	8002cfe <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ce6:	4975      	ldr	r1, [pc, #468]	@ (8002ebc <HAL_RCC_ClockConfig+0x238>)
 8002ce8:	69e0      	ldr	r0, [r4, #28]
 8002cea:	6a0a      	ldr	r2, [r1, #32]
 8002cec:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002cf0:	4290      	cmp	r0, r2
 8002cf2:	d904      	bls.n	8002cfe <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cf4:	6a0a      	ldr	r2, [r1, #32]
 8002cf6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002cfa:	4302      	orrs	r2, r0
 8002cfc:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cfe:	079a      	lsls	r2, r3, #30
 8002d00:	d50b      	bpl.n	8002d1a <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d02:	496e      	ldr	r1, [pc, #440]	@ (8002ebc <HAL_RCC_ClockConfig+0x238>)
 8002d04:	68e0      	ldr	r0, [r4, #12]
 8002d06:	698a      	ldr	r2, [r1, #24]
 8002d08:	f002 020f 	and.w	r2, r2, #15
 8002d0c:	4290      	cmp	r0, r2
 8002d0e:	d904      	bls.n	8002d1a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d10:	698a      	ldr	r2, [r1, #24]
 8002d12:	f022 020f 	bic.w	r2, r2, #15
 8002d16:	4302      	orrs	r2, r0
 8002d18:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d1a:	07df      	lsls	r7, r3, #31
 8002d1c:	d46e      	bmi.n	8002dfc <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	079e      	lsls	r6, r3, #30
 8002d22:	f100 80a1 	bmi.w	8002e68 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d26:	4964      	ldr	r1, [pc, #400]	@ (8002eb8 <HAL_RCC_ClockConfig+0x234>)
 8002d28:	680a      	ldr	r2, [r1, #0]
 8002d2a:	f002 020f 	and.w	r2, r2, #15
 8002d2e:	42aa      	cmp	r2, r5
 8002d30:	f200 80a8 	bhi.w	8002e84 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d34:	0758      	lsls	r0, r3, #29
 8002d36:	f100 80b1 	bmi.w	8002e9c <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d3a:	0719      	lsls	r1, r3, #28
 8002d3c:	d50b      	bpl.n	8002d56 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d3e:	495f      	ldr	r1, [pc, #380]	@ (8002ebc <HAL_RCC_ClockConfig+0x238>)
 8002d40:	6960      	ldr	r0, [r4, #20]
 8002d42:	69ca      	ldr	r2, [r1, #28]
 8002d44:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002d48:	4290      	cmp	r0, r2
 8002d4a:	d204      	bcs.n	8002d56 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d4c:	69ca      	ldr	r2, [r1, #28]
 8002d4e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002d52:	4302      	orrs	r2, r0
 8002d54:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d56:	06da      	lsls	r2, r3, #27
 8002d58:	d50b      	bpl.n	8002d72 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d5a:	4958      	ldr	r1, [pc, #352]	@ (8002ebc <HAL_RCC_ClockConfig+0x238>)
 8002d5c:	69a0      	ldr	r0, [r4, #24]
 8002d5e:	69ca      	ldr	r2, [r1, #28]
 8002d60:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8002d64:	4290      	cmp	r0, r2
 8002d66:	d204      	bcs.n	8002d72 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d68:	69ca      	ldr	r2, [r1, #28]
 8002d6a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d6e:	4302      	orrs	r2, r0
 8002d70:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d72:	069b      	lsls	r3, r3, #26
 8002d74:	d50b      	bpl.n	8002d8e <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d76:	4a51      	ldr	r2, [pc, #324]	@ (8002ebc <HAL_RCC_ClockConfig+0x238>)
 8002d78:	69e1      	ldr	r1, [r4, #28]
 8002d7a:	6a13      	ldr	r3, [r2, #32]
 8002d7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d80:	4299      	cmp	r1, r3
 8002d82:	d204      	bcs.n	8002d8e <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d84:	6a13      	ldr	r3, [r2, #32]
 8002d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d8a:	430b      	orrs	r3, r1
 8002d8c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d8e:	f7ff fed7 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8002d92:	494a      	ldr	r1, [pc, #296]	@ (8002ebc <HAL_RCC_ClockConfig+0x238>)
 8002d94:	4a4a      	ldr	r2, [pc, #296]	@ (8002ec0 <HAL_RCC_ClockConfig+0x23c>)
 8002d96:	698b      	ldr	r3, [r1, #24]
 8002d98:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002d9c:	5cd3      	ldrb	r3, [r2, r3]
 8002d9e:	f003 031f 	and.w	r3, r3, #31
 8002da2:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002da4:	698b      	ldr	r3, [r1, #24]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	5cd3      	ldrb	r3, [r2, r3]
 8002dac:	4a45      	ldr	r2, [pc, #276]	@ (8002ec4 <HAL_RCC_ClockConfig+0x240>)
 8002dae:	f003 031f 	and.w	r3, r3, #31
 8002db2:	fa20 f303 	lsr.w	r3, r0, r3
 8002db6:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8002db8:	4b43      	ldr	r3, [pc, #268]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002dba:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8002dbc:	4b43      	ldr	r3, [pc, #268]	@ (8002ecc <HAL_RCC_ClockConfig+0x248>)
}
 8002dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	f7fe b972 	b.w	80010ac <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc8:	6813      	ldr	r3, [r2, #0]
 8002dca:	f023 030f 	bic.w	r3, r3, #15
 8002dce:	430b      	orrs	r3, r1
 8002dd0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	6813      	ldr	r3, [r2, #0]
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	428b      	cmp	r3, r1
 8002dda:	f47f af58 	bne.w	8002c8e <HAL_RCC_ClockConfig+0xa>
 8002dde:	e760      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002de0:	4936      	ldr	r1, [pc, #216]	@ (8002ebc <HAL_RCC_ClockConfig+0x238>)
 8002de2:	6920      	ldr	r0, [r4, #16]
 8002de4:	698a      	ldr	r2, [r1, #24]
 8002de6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002dea:	4290      	cmp	r0, r2
 8002dec:	f67f af5d 	bls.w	8002caa <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002df0:	698a      	ldr	r2, [r1, #24]
 8002df2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002df6:	4302      	orrs	r2, r0
 8002df8:	618a      	str	r2, [r1, #24]
 8002dfa:	e756      	b.n	8002caa <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002dfc:	4b2f      	ldr	r3, [pc, #188]	@ (8002ebc <HAL_RCC_ClockConfig+0x238>)
 8002dfe:	68a1      	ldr	r1, [r4, #8]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 8002e06:	430a      	orrs	r2, r1
 8002e08:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e0a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e0c:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e0e:	2902      	cmp	r1, #2
 8002e10:	d11d      	bne.n	8002e4e <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e12:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e16:	f43f af3a 	beq.w	8002c8e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e1a:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e1c:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e20:	4f26      	ldr	r7, [pc, #152]	@ (8002ebc <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e22:	f022 0207 	bic.w	r2, r2, #7
 8002e26:	430a      	orrs	r2, r1
 8002e28:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 8002e2a:	f7fe fb1d 	bl	8001468 <HAL_GetTick>
 8002e2e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	6862      	ldr	r2, [r4, #4]
 8002e34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e38:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8002e3c:	f43f af6f 	beq.w	8002d1e <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e40:	f7fe fb12 	bl	8001468 <HAL_GetTick>
 8002e44:	1b80      	subs	r0, r0, r6
 8002e46:	4540      	cmp	r0, r8
 8002e48:	d9f2      	bls.n	8002e30 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 8002e4a:	2003      	movs	r0, #3
 8002e4c:	e720      	b.n	8002c90 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e4e:	2903      	cmp	r1, #3
 8002e50:	d102      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e52:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002e56:	e7de      	b.n	8002e16 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e58:	2901      	cmp	r1, #1
 8002e5a:	d102      	bne.n	8002e62 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e5c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8002e60:	e7d9      	b.n	8002e16 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e62:	f012 0f04 	tst.w	r2, #4
 8002e66:	e7d6      	b.n	8002e16 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e68:	4914      	ldr	r1, [pc, #80]	@ (8002ebc <HAL_RCC_ClockConfig+0x238>)
 8002e6a:	68e0      	ldr	r0, [r4, #12]
 8002e6c:	698a      	ldr	r2, [r1, #24]
 8002e6e:	f002 020f 	and.w	r2, r2, #15
 8002e72:	4290      	cmp	r0, r2
 8002e74:	f4bf af57 	bcs.w	8002d26 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e78:	698a      	ldr	r2, [r1, #24]
 8002e7a:	f022 020f 	bic.w	r2, r2, #15
 8002e7e:	4302      	orrs	r2, r0
 8002e80:	618a      	str	r2, [r1, #24]
 8002e82:	e750      	b.n	8002d26 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e84:	680a      	ldr	r2, [r1, #0]
 8002e86:	f022 020f 	bic.w	r2, r2, #15
 8002e8a:	432a      	orrs	r2, r5
 8002e8c:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	680a      	ldr	r2, [r1, #0]
 8002e90:	f002 020f 	and.w	r2, r2, #15
 8002e94:	42aa      	cmp	r2, r5
 8002e96:	f47f aefa 	bne.w	8002c8e <HAL_RCC_ClockConfig+0xa>
 8002e9a:	e74b      	b.n	8002d34 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e9c:	4907      	ldr	r1, [pc, #28]	@ (8002ebc <HAL_RCC_ClockConfig+0x238>)
 8002e9e:	6920      	ldr	r0, [r4, #16]
 8002ea0:	698a      	ldr	r2, [r1, #24]
 8002ea2:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002ea6:	4290      	cmp	r0, r2
 8002ea8:	f4bf af47 	bcs.w	8002d3a <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002eac:	698a      	ldr	r2, [r1, #24]
 8002eae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002eb2:	4302      	orrs	r2, r0
 8002eb4:	618a      	str	r2, [r1, #24]
 8002eb6:	e740      	b.n	8002d3a <HAL_RCC_ClockConfig+0xb6>
 8002eb8:	52002000 	.word	0x52002000
 8002ebc:	58024400 	.word	0x58024400
 8002ec0:	0800d204 	.word	0x0800d204
 8002ec4:	24000000 	.word	0x24000000
 8002ec8:	24000004 	.word	0x24000004
 8002ecc:	2400000c 	.word	0x2400000c

08002ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed0:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002ed2:	f7ff fe35 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8002ed6:	4a0b      	ldr	r2, [pc, #44]	@ (8002f04 <HAL_RCC_GetHCLKFreq+0x34>)
 8002ed8:	490b      	ldr	r1, [pc, #44]	@ (8002f08 <HAL_RCC_GetHCLKFreq+0x38>)
 8002eda:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002edc:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002ede:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ee2:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ef0:	5c88      	ldrb	r0, [r1, r2]
 8002ef2:	4a06      	ldr	r2, [pc, #24]	@ (8002f0c <HAL_RCC_GetHCLKFreq+0x3c>)
 8002ef4:	f000 001f 	and.w	r0, r0, #31
 8002ef8:	fa23 f000 	lsr.w	r0, r3, r0
 8002efc:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002efe:	4a04      	ldr	r2, [pc, #16]	@ (8002f10 <HAL_RCC_GetHCLKFreq+0x40>)
 8002f00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8002f02:	bd08      	pop	{r3, pc}
 8002f04:	58024400 	.word	0x58024400
 8002f08:	0800d204 	.word	0x0800d204
 8002f0c:	24000000 	.word	0x24000000
 8002f10:	24000004 	.word	0x24000004

08002f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f14:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002f16:	f7ff ffdb 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002f1a:	4b05      	ldr	r3, [pc, #20]	@ (8002f30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002f1c:	4a05      	ldr	r2, [pc, #20]	@ (8002f34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002f24:	5cd3      	ldrb	r3, [r2, r3]
 8002f26:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002f2a:	40d8      	lsrs	r0, r3
 8002f2c:	bd08      	pop	{r3, pc}
 8002f2e:	bf00      	nop
 8002f30:	58024400 	.word	0x58024400
 8002f34:	0800d204 	.word	0x0800d204

08002f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f38:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002f3a:	f7ff ffc9 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002f3e:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002f40:	4a05      	ldr	r2, [pc, #20]	@ (8002f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002f48:	5cd3      	ldrb	r3, [r2, r3]
 8002f4a:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002f4e:	40d8      	lsrs	r0, r3
 8002f50:	bd08      	pop	{r3, pc}
 8002f52:	bf00      	nop
 8002f54:	58024400 	.word	0x58024400
 8002f58:	0800d204 	.word	0x0800d204

08002f5c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002f5c:	233f      	movs	r3, #63	@ 0x3f
 8002f5e:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f60:	4b11      	ldr	r3, [pc, #68]	@ (8002fa8 <HAL_RCC_GetClockConfig+0x4c>)
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	f002 0207 	and.w	r2, r2, #7
 8002f68:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002f6a:	699a      	ldr	r2, [r3, #24]
 8002f6c:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8002f70:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002f72:	699a      	ldr	r2, [r3, #24]
 8002f74:	f002 020f 	and.w	r2, r2, #15
 8002f78:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002f7a:	699a      	ldr	r2, [r3, #24]
 8002f7c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002f80:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002f88:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002f8a:	69da      	ldr	r2, [r3, #28]
 8002f8c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8002f90:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f98:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f9a:	4b04      	ldr	r3, [pc, #16]	@ (8002fac <HAL_RCC_GetClockConfig+0x50>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	600b      	str	r3, [r1, #0]
}
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	58024400 	.word	0x58024400
 8002fac:	52002000 	.word	0x52002000

08002fb0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8002fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002fb2:	4c39      	ldr	r4, [pc, #228]	@ (8003098 <RCCEx_PLL2_Config+0xe8>)
{
 8002fb4:	4606      	mov	r6, r0
 8002fb6:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002fb8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d067      	beq.n	8003092 <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002fc8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fca:	f7fe fa4d 	bl	8001468 <HAL_GetTick>
 8002fce:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002fd0:	6823      	ldr	r3, [r4, #0]
 8002fd2:	011a      	lsls	r2, r3, #4
 8002fd4:	d449      	bmi.n	800306a <RCCEx_PLL2_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002fd6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002fd8:	6832      	ldr	r2, [r6, #0]
 8002fda:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002fde:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002fe2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002fe4:	68b3      	ldr	r3, [r6, #8]
 8002fe6:	68f2      	ldr	r2, [r6, #12]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	3a01      	subs	r2, #1
 8002fec:	025b      	lsls	r3, r3, #9
 8002fee:	0412      	lsls	r2, r2, #16
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	6872      	ldr	r2, [r6, #4]
 8002ffa:	3a01      	subs	r2, #1
 8002ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003000:	4313      	orrs	r3, r2
 8003002:	6932      	ldr	r2, [r6, #16]
 8003004:	3a01      	subs	r2, #1
 8003006:	0612      	lsls	r2, r2, #24
 8003008:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800300c:	4313      	orrs	r3, r2
 800300e:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003010:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003012:	6972      	ldr	r2, [r6, #20]
 8003014:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003018:	4313      	orrs	r3, r2
 800301a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800301c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800301e:	69b2      	ldr	r2, [r6, #24]
 8003020:	f023 0320 	bic.w	r3, r3, #32
 8003024:	4313      	orrs	r3, r2
 8003026:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003028:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800302a:	f023 0310 	bic.w	r3, r3, #16
 800302e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003030:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003032:	69f2      	ldr	r2, [r6, #28]
 8003034:	f36f 03cf 	bfc	r3, #3, #13
 8003038:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800303c:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800303e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003040:	f043 0310 	orr.w	r3, r3, #16
 8003044:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003046:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8003048:	b9b5      	cbnz	r5, 8003078 <RCCEx_PLL2_Config+0xc8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800304a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800304e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003050:	4c11      	ldr	r4, [pc, #68]	@ (8003098 <RCCEx_PLL2_Config+0xe8>)
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003058:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800305a:	f7fe fa05 	bl	8001468 <HAL_GetTick>
 800305e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	d50f      	bpl.n	8003086 <RCCEx_PLL2_Config+0xd6>
    }

  }


  return status;
 8003066:	2000      	movs	r0, #0
 8003068:	e005      	b.n	8003076 <RCCEx_PLL2_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800306a:	f7fe f9fd 	bl	8001468 <HAL_GetTick>
 800306e:	1bc0      	subs	r0, r0, r7
 8003070:	2802      	cmp	r0, #2
 8003072:	d9ad      	bls.n	8002fd0 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8003074:	2003      	movs	r0, #3
}
 8003076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8003078:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800307a:	bf0c      	ite	eq
 800307c:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003080:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8003084:	e7e3      	b.n	800304e <RCCEx_PLL2_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003086:	f7fe f9ef 	bl	8001468 <HAL_GetTick>
 800308a:	1b40      	subs	r0, r0, r5
 800308c:	2802      	cmp	r0, #2
 800308e:	d9e7      	bls.n	8003060 <RCCEx_PLL2_Config+0xb0>
 8003090:	e7f0      	b.n	8003074 <RCCEx_PLL2_Config+0xc4>
    return HAL_ERROR;
 8003092:	2001      	movs	r0, #1
 8003094:	e7ef      	b.n	8003076 <RCCEx_PLL2_Config+0xc6>
 8003096:	bf00      	nop
 8003098:	58024400 	.word	0x58024400

0800309c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800309e:	4c39      	ldr	r4, [pc, #228]	@ (8003184 <RCCEx_PLL3_Config+0xe8>)
{
 80030a0:	4606      	mov	r6, r0
 80030a2:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80030a4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d067      	beq.n	800317e <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80030ae:	6823      	ldr	r3, [r4, #0]
 80030b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030b4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b6:	f7fe f9d7 	bl	8001468 <HAL_GetTick>
 80030ba:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80030bc:	6823      	ldr	r3, [r4, #0]
 80030be:	009a      	lsls	r2, r3, #2
 80030c0:	d449      	bmi.n	8003156 <RCCEx_PLL3_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80030c2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80030c4:	6832      	ldr	r2, [r6, #0]
 80030c6:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 80030ca:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80030ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80030d0:	68b3      	ldr	r3, [r6, #8]
 80030d2:	68f2      	ldr	r2, [r6, #12]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	3a01      	subs	r2, #1
 80030d8:	025b      	lsls	r3, r3, #9
 80030da:	0412      	lsls	r2, r2, #16
 80030dc:	b29b      	uxth	r3, r3
 80030de:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80030e2:	4313      	orrs	r3, r2
 80030e4:	6872      	ldr	r2, [r6, #4]
 80030e6:	3a01      	subs	r2, #1
 80030e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030ec:	4313      	orrs	r3, r2
 80030ee:	6932      	ldr	r2, [r6, #16]
 80030f0:	3a01      	subs	r2, #1
 80030f2:	0612      	lsls	r2, r2, #24
 80030f4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80030f8:	4313      	orrs	r3, r2
 80030fa:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80030fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80030fe:	6972      	ldr	r2, [r6, #20]
 8003100:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003104:	4313      	orrs	r3, r2
 8003106:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003108:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800310a:	69b2      	ldr	r2, [r6, #24]
 800310c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003110:	4313      	orrs	r3, r2
 8003112:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003114:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003116:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800311a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800311c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800311e:	69f2      	ldr	r2, [r6, #28]
 8003120:	f36f 03cf 	bfc	r3, #3, #13
 8003124:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003128:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800312a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800312c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003130:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003132:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8003134:	b9b5      	cbnz	r5, 8003164 <RCCEx_PLL3_Config+0xc8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003136:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800313a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800313c:	4c11      	ldr	r4, [pc, #68]	@ (8003184 <RCCEx_PLL3_Config+0xe8>)
 800313e:	6823      	ldr	r3, [r4, #0]
 8003140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003144:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003146:	f7fe f98f 	bl	8001468 <HAL_GetTick>
 800314a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800314c:	6823      	ldr	r3, [r4, #0]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	d50f      	bpl.n	8003172 <RCCEx_PLL3_Config+0xd6>
    }

  }


  return status;
 8003152:	2000      	movs	r0, #0
 8003154:	e005      	b.n	8003162 <RCCEx_PLL3_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003156:	f7fe f987 	bl	8001468 <HAL_GetTick>
 800315a:	1bc0      	subs	r0, r0, r7
 800315c:	2802      	cmp	r0, #2
 800315e:	d9ad      	bls.n	80030bc <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8003160:	2003      	movs	r0, #3
}
 8003162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8003164:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003166:	bf0c      	ite	eq
 8003168:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800316c:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8003170:	e7e3      	b.n	800313a <RCCEx_PLL3_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003172:	f7fe f979 	bl	8001468 <HAL_GetTick>
 8003176:	1b40      	subs	r0, r0, r5
 8003178:	2802      	cmp	r0, #2
 800317a:	d9e7      	bls.n	800314c <RCCEx_PLL3_Config+0xb0>
 800317c:	e7f0      	b.n	8003160 <RCCEx_PLL3_Config+0xc4>
    return HAL_ERROR;
 800317e:	2001      	movs	r0, #1
 8003180:	e7ef      	b.n	8003162 <RCCEx_PLL3_Config+0xc6>
 8003182:	bf00      	nop
 8003184:	58024400 	.word	0x58024400

08003188 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800318c:	6803      	ldr	r3, [r0, #0]
{
 800318e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003190:	0118      	lsls	r0, r3, #4
 8003192:	d51e      	bpl.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003194:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 8003196:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800319a:	d02b      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800319c:	d80f      	bhi.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x36>
 800319e:	b1d3      	cbz	r3, 80031d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80031a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031a4:	d01d      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 80031a6:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031a8:	682b      	ldr	r3, [r5, #0]
 80031aa:	05d9      	lsls	r1, r3, #23
 80031ac:	d551      	bpl.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai1ClockSelection)
 80031ae:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d84d      	bhi.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 80031b4:	e8df f003 	tbb	[pc, r3]
 80031b8:	29463f24 	.word	0x29463f24
 80031bc:	29          	.byte	0x29
 80031bd:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 80031be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80031c2:	d1f0      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80031c4:	4a85      	ldr	r2, [pc, #532]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031c6:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 80031c8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80031ca:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80031ce:	430b      	orrs	r3, r1
 80031d0:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031d2:	2600      	movs	r6, #0
 80031d4:	e7e8      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031d6:	4a81      	ldr	r2, [pc, #516]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031d8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80031da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031de:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80031e0:	e7f0      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031e2:	2102      	movs	r1, #2
 80031e4:	f105 0008 	add.w	r0, r5, #8
 80031e8:	f7ff fee2 	bl	8002fb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031ec:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80031ee:	2800      	cmp	r0, #0
 80031f0:	d1da      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80031f2:	e7e7      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031f4:	2102      	movs	r1, #2
 80031f6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80031fa:	f7ff ff4f 	bl	800309c <RCCEx_PLL3_Config>
 80031fe:	e7f5      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x64>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003200:	4a76      	ldr	r2, [pc, #472]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003202:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003208:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800320a:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800320c:	bb1c      	cbnz	r4, 8003256 <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800320e:	4a73      	ldr	r2, [pc, #460]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003210:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8003212:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8003214:	f023 0307 	bic.w	r3, r3, #7
 8003218:	430b      	orrs	r3, r1
 800321a:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800321c:	682b      	ldr	r3, [r5, #0]
 800321e:	059a      	lsls	r2, r3, #22
 8003220:	d528      	bpl.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai23ClockSelection)
 8003222:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8003224:	2b80      	cmp	r3, #128	@ 0x80
 8003226:	d043      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003228:	d817      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xd2>
 800322a:	b3a3      	cbz	r3, 8003296 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800322c:	2b40      	cmp	r3, #64	@ 0x40
 800322e:	d038      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 8003230:	2601      	movs	r6, #1
 8003232:	4634      	mov	r4, r6
 8003234:	e01e      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xec>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003236:	2100      	movs	r1, #0
 8003238:	f105 0008 	add.w	r0, r5, #8
 800323c:	f7ff feb8 	bl	8002fb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003240:	4604      	mov	r4, r0
        break;
 8003242:	e7e3      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x84>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003244:	2100      	movs	r1, #0
 8003246:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800324a:	f7ff ff27 	bl	800309c <RCCEx_PLL3_Config>
 800324e:	e7f7      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch (PeriphClkInit->Sai1ClockSelection)
 8003250:	2601      	movs	r6, #1
 8003252:	4634      	mov	r4, r6
 8003254:	e7e2      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x94>
      status = ret;
 8003256:	4626      	mov	r6, r4
 8003258:	e7e0      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai23ClockSelection)
 800325a:	2bc0      	cmp	r3, #192	@ 0xc0
 800325c:	d002      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800325e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003262:	d1e5      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    if (ret == HAL_OK)
 8003264:	bb54      	cbnz	r4, 80032bc <HAL_RCCEx_PeriphCLKConfig+0x134>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003266:	4a5d      	ldr	r2, [pc, #372]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003268:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800326a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800326c:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 8003270:	430b      	orrs	r3, r1
 8003272:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003274:	682b      	ldr	r3, [r5, #0]
 8003276:	055b      	lsls	r3, r3, #21
 8003278:	d531      	bpl.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4AClockSelection)
 800327a:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
 800327e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003282:	d049      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003284:	d81c      	bhi.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8003286:	2b00      	cmp	r3, #0
 8003288:	d039      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x176>
 800328a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800328e:	d03c      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003290:	2601      	movs	r6, #1
 8003292:	4634      	mov	r4, r6
 8003294:	e023      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x156>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003296:	4a51      	ldr	r2, [pc, #324]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003298:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800329a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800329e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80032a0:	e7e0      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032a2:	2100      	movs	r1, #0
 80032a4:	f105 0008 	add.w	r0, r5, #8
 80032a8:	f7ff fe82 	bl	8002fb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032ac:	4604      	mov	r4, r0
        break;
 80032ae:	e7d9      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032b0:	2100      	movs	r1, #0
 80032b2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80032b6:	f7ff fef1 	bl	800309c <RCCEx_PLL3_Config>
 80032ba:	e7f7      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x124>
      status = ret;
 80032bc:	4626      	mov	r6, r4
 80032be:	e7d9      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai4AClockSelection)
 80032c0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80032c4:	d002      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x144>
 80032c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032ca:	d1e1      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x108>
    if (ret == HAL_OK)
 80032cc:	bb54      	cbnz	r4, 8003324 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80032ce:	4a43      	ldr	r2, [pc, #268]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80032d0:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 80032d4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80032d6:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 80032da:	430b      	orrs	r3, r1
 80032dc:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80032de:	682b      	ldr	r3, [r5, #0]
 80032e0:	051f      	lsls	r7, r3, #20
 80032e2:	d530      	bpl.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->Sai4BClockSelection)
 80032e4:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 80032e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032ec:	d045      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80032ee:	d81b      	bhi.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 80032f0:	b3b3      	cbz	r3, 8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80032f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032f6:	d039      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80032f8:	2601      	movs	r6, #1
 80032fa:	4634      	mov	r4, r6
 80032fc:	e023      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032fe:	4a37      	ldr	r2, [pc, #220]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003300:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003306:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8003308:	e7e0      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800330a:	2100      	movs	r1, #0
 800330c:	f105 0008 	add.w	r0, r5, #8
 8003310:	f7ff fe4e 	bl	8002fb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003314:	4604      	mov	r4, r0
        break;
 8003316:	e7d9      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003318:	2100      	movs	r1, #0
 800331a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800331e:	f7ff febd 	bl	800309c <RCCEx_PLL3_Config>
 8003322:	e7f7      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      status = ret;
 8003324:	4626      	mov	r6, r4
 8003326:	e7da      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4BClockSelection)
 8003328:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800332c:	d002      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800332e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003332:	d1e1      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
    if (ret == HAL_OK)
 8003334:	bb3c      	cbnz	r4, 8003386 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003336:	4a29      	ldr	r2, [pc, #164]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003338:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800333c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800333e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003342:	430b      	orrs	r3, r1
 8003344:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003346:	682b      	ldr	r3, [r5, #0]
 8003348:	0198      	lsls	r0, r3, #6
 800334a:	d528      	bpl.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch (PeriphClkInit->QspiClockSelection)
 800334c:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800334e:	2b20      	cmp	r3, #32
 8003350:	d03b      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003352:	d81a      	bhi.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003354:	b1db      	cbz	r3, 800338e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003356:	2b10      	cmp	r3, #16
 8003358:	d031      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x236>
 800335a:	2601      	movs	r6, #1
 800335c:	4634      	mov	r4, r6
 800335e:	e01e      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x216>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003360:	4a1e      	ldr	r2, [pc, #120]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003362:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003368:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800336a:	e7e3      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800336c:	2100      	movs	r1, #0
 800336e:	f105 0008 	add.w	r0, r5, #8
 8003372:	f7ff fe1d 	bl	8002fb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003376:	4604      	mov	r4, r0
        break;
 8003378:	e7dc      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800337a:	2100      	movs	r1, #0
 800337c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8003380:	f7ff fe8c 	bl	800309c <RCCEx_PLL3_Config>
 8003384:	e7f7      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      status = ret;
 8003386:	4626      	mov	r6, r4
 8003388:	e7dd      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->QspiClockSelection)
 800338a:	2b30      	cmp	r3, #48	@ 0x30
 800338c:	d1e5      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if (ret == HAL_OK)
 800338e:	bb1c      	cbnz	r4, 80033d8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003390:	4a12      	ldr	r2, [pc, #72]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003392:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8003394:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8003396:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800339a:	430b      	orrs	r3, r1
 800339c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800339e:	682b      	ldr	r3, [r5, #0]
 80033a0:	04d9      	lsls	r1, r3, #19
 80033a2:	d52c      	bpl.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi123ClockSelection)
 80033a4:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80033a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033aa:	d074      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80033ac:	d818      	bhi.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d064      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80033b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033b6:	d067      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80033b8:	2601      	movs	r6, #1
 80033ba:	4634      	mov	r4, r6
 80033bc:	e01f      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x276>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033be:	4a07      	ldr	r2, [pc, #28]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80033c0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80033c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80033c8:	e7e1      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x206>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033ca:	2102      	movs	r1, #2
 80033cc:	f105 0008 	add.w	r0, r5, #8
 80033d0:	f7ff fdee 	bl	8002fb0 <RCCEx_PLL2_Config>
 80033d4:	4604      	mov	r4, r0
        break;
 80033d6:	e7da      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x206>
      status = ret;
 80033d8:	4626      	mov	r6, r4
 80033da:	e7e0      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x216>
 80033dc:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 80033e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80033e4:	d002      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x264>
 80033e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033ea:	d1e5      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
    if (ret == HAL_OK)
 80033ec:	2c00      	cmp	r4, #0
 80033ee:	d158      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80033f0:	4a9d      	ldr	r2, [pc, #628]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80033f2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80033f4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80033f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033fa:	430b      	orrs	r3, r1
 80033fc:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80033fe:	682b      	ldr	r3, [r5, #0]
 8003400:	049a      	lsls	r2, r3, #18
 8003402:	d50b      	bpl.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi45ClockSelection)
 8003404:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003406:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800340a:	d064      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800340c:	d84b      	bhi.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 800340e:	2b00      	cmp	r3, #0
 8003410:	d051      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003416:	d057      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x340>
 8003418:	2601      	movs	r6, #1
 800341a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800341c:	682b      	ldr	r3, [r5, #0]
 800341e:	045b      	lsls	r3, r3, #17
 8003420:	d50c      	bpl.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    switch (PeriphClkInit->Spi6ClockSelection)
 8003422:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 8003426:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800342a:	d075      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800342c:	d85b      	bhi.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800342e:	2b00      	cmp	r3, #0
 8003430:	d061      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003432:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003436:	d068      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003438:	2601      	movs	r6, #1
 800343a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800343c:	682b      	ldr	r3, [r5, #0]
 800343e:	041f      	lsls	r7, r3, #16
 8003440:	d511      	bpl.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch (PeriphClkInit->FdcanClockSelection)
 8003442:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003444:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003448:	d06e      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800344a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800344e:	d071      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d176      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    if (ret == HAL_OK)
 8003454:	2c00      	cmp	r4, #0
 8003456:	d177      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003458:	4a83      	ldr	r2, [pc, #524]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800345a:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 800345c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800345e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8003462:	430b      	orrs	r3, r1
 8003464:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003466:	682b      	ldr	r3, [r5, #0]
 8003468:	01d8      	lsls	r0, r3, #7
 800346a:	d57d      	bpl.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    switch (PeriphClkInit->FmcClockSelection)
 800346c:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800346e:	2b03      	cmp	r3, #3
 8003470:	f200 80bf 	bhi.w	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8003474:	e8df f003 	tbb	[pc, r3]
 8003478:	6fb66a6f 	.word	0x6fb66a6f
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800347c:	4a7a      	ldr	r2, [pc, #488]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800347e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003484:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8003486:	e7b1      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003488:	2100      	movs	r1, #0
 800348a:	f105 0008 	add.w	r0, r5, #8
 800348e:	f7ff fd8f 	bl	8002fb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003492:	4604      	mov	r4, r0
        break;
 8003494:	e7aa      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003496:	2100      	movs	r1, #0
 8003498:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800349c:	f7ff fdfe 	bl	800309c <RCCEx_PLL3_Config>
 80034a0:	e7f7      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x30a>
      status = ret;
 80034a2:	4626      	mov	r6, r4
 80034a4:	e7ab      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi45ClockSelection)
 80034a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80034aa:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80034ae:	d002      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80034b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80034b4:	d1b0      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x290>
    if (ret == HAL_OK)
 80034b6:	b9a4      	cbnz	r4, 80034e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80034b8:	4a6b      	ldr	r2, [pc, #428]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80034ba:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 80034bc:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80034be:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80034c2:	430b      	orrs	r3, r1
 80034c4:	6513      	str	r3, [r2, #80]	@ 0x50
 80034c6:	e7a9      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x294>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034c8:	2101      	movs	r1, #1
 80034ca:	f105 0008 	add.w	r0, r5, #8
 80034ce:	f7ff fd6f 	bl	8002fb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034d2:	4604      	mov	r4, r0
        break;
 80034d4:	e7ef      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034d6:	2101      	movs	r1, #1
 80034d8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80034dc:	f7ff fdde 	bl	800309c <RCCEx_PLL3_Config>
 80034e0:	e7f7      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
      status = ret;
 80034e2:	4626      	mov	r6, r4
 80034e4:	e79a      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi6ClockSelection)
 80034e6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80034ea:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80034ee:	d002      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80034f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80034f4:	d1a0      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    if (ret == HAL_OK)
 80034f6:	b9ac      	cbnz	r4, 8003524 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80034f8:	4a5b      	ldr	r2, [pc, #364]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80034fa:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 80034fe:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003500:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8003504:	430b      	orrs	r3, r1
 8003506:	6593      	str	r3, [r2, #88]	@ 0x58
 8003508:	e798      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800350a:	2101      	movs	r1, #1
 800350c:	f105 0008 	add.w	r0, r5, #8
 8003510:	f7ff fd4e 	bl	8002fb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003514:	4604      	mov	r4, r0
        break;
 8003516:	e7ee      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003518:	2101      	movs	r1, #1
 800351a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800351e:	f7ff fdbd 	bl	800309c <RCCEx_PLL3_Config>
 8003522:	e7f7      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      status = ret;
 8003524:	4626      	mov	r6, r4
 8003526:	e789      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003528:	4a4f      	ldr	r2, [pc, #316]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800352a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800352c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003530:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8003532:	e78f      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003534:	2101      	movs	r1, #1
 8003536:	f105 0008 	add.w	r0, r5, #8
 800353a:	f7ff fd39 	bl	8002fb0 <RCCEx_PLL2_Config>
 800353e:	4604      	mov	r4, r0
        break;
 8003540:	e788      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    switch (PeriphClkInit->FdcanClockSelection)
 8003542:	2601      	movs	r6, #1
 8003544:	4634      	mov	r4, r6
 8003546:	e78e      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      status = ret;
 8003548:	4626      	mov	r6, r4
 800354a:	e78c      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2de>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800354c:	4a46      	ldr	r2, [pc, #280]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800354e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003554:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003556:	2c00      	cmp	r4, #0
 8003558:	d14e      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x470>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800355a:	4a43      	ldr	r2, [pc, #268]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800355c:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800355e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8003560:	f023 0303 	bic.w	r3, r3, #3
 8003564:	430b      	orrs	r3, r1
 8003566:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003568:	682b      	ldr	r3, [r5, #0]
 800356a:	0259      	lsls	r1, r3, #9
 800356c:	d54e      	bpl.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x484>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800356e:	4f3f      	ldr	r7, [pc, #252]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003576:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8003578:	f7fd ff76 	bl	8001468 <HAL_GetTick>
 800357c:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	05da      	lsls	r2, r3, #23
 8003582:	d53b      	bpl.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x474>
    if (ret == HAL_OK)
 8003584:	2c00      	cmp	r4, #0
 8003586:	d175      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003588:	4b37      	ldr	r3, [pc, #220]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800358a:	f8d5 00b4 	ldr.w	r0, [r5, #180]	@ 0xb4
 800358e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003590:	4042      	eors	r2, r0
 8003592:	f412 7f40 	tst.w	r2, #768	@ 0x300
 8003596:	d00b      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x428>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003598:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800359a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800359c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80035a0:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80035a4:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035a6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80035a8:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80035ac:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 80035ae:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80035b0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80035b4:	d042      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x4b4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035b6:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80035ba:	492b      	ldr	r1, [pc, #172]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80035bc:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80035c0:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80035c4:	d14b      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x4d6>
 80035c6:	6908      	ldr	r0, [r1, #16]
 80035c8:	4a29      	ldr	r2, [pc, #164]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 80035ca:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 80035ce:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80035d2:	4302      	orrs	r2, r0
 80035d4:	610a      	str	r2, [r1, #16]
 80035d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035da:	4a23      	ldr	r2, [pc, #140]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80035dc:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80035de:	430b      	orrs	r3, r1
 80035e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035e2:	e013      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x484>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035e4:	2102      	movs	r1, #2
 80035e6:	f105 0008 	add.w	r0, r5, #8
 80035ea:	f7ff fce1 	bl	8002fb0 <RCCEx_PLL2_Config>
 80035ee:	4604      	mov	r4, r0
        break;
 80035f0:	e7b1      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch (PeriphClkInit->FmcClockSelection)
 80035f2:	2601      	movs	r6, #1
 80035f4:	4634      	mov	r4, r6
 80035f6:	e7b7      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      status = ret;
 80035f8:	4626      	mov	r6, r4
 80035fa:	e7b5      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fc:	f7fd ff34 	bl	8001468 <HAL_GetTick>
 8003600:	eba0 0008 	sub.w	r0, r0, r8
 8003604:	2864      	cmp	r0, #100	@ 0x64
 8003606:	d9ba      	bls.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        ret = HAL_TIMEOUT;
 8003608:	2603      	movs	r6, #3
 800360a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800360c:	682b      	ldr	r3, [r5, #0]
 800360e:	07d8      	lsls	r0, r3, #31
 8003610:	d509      	bpl.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x49e>
    switch (PeriphClkInit->Usart16ClockSelection)
 8003612:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8003614:	2b10      	cmp	r3, #16
 8003616:	d045      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8003618:	d82e      	bhi.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800361a:	2b00      	cmp	r3, #0
 800361c:	d032      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800361e:	2b08      	cmp	r3, #8
 8003620:	d039      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 8003622:	2601      	movs	r6, #1
 8003624:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003626:	682b      	ldr	r3, [r5, #0]
 8003628:	0799      	lsls	r1, r3, #30
 800362a:	d551      	bpl.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800362c:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800362e:	2b05      	cmp	r3, #5
 8003630:	d864      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x574>
 8003632:	e8df f003 	tbb	[pc, r3]
 8003636:	3f45      	.short	0x3f45
 8003638:	4545455d 	.word	0x4545455d
        tickstart = HAL_GetTick();
 800363c:	f7fd ff14 	bl	8001468 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003640:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        tickstart = HAL_GetTick();
 8003644:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003646:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800364a:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800364e:	079b      	lsls	r3, r3, #30
 8003650:	d4b1      	bmi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fd ff09 	bl	8001468 <HAL_GetTick>
 8003656:	1bc0      	subs	r0, r0, r7
 8003658:	4548      	cmp	r0, r9
 800365a:	d9f6      	bls.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800365c:	e7d4      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800365e:	690a      	ldr	r2, [r1, #16]
 8003660:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8003664:	e7b6      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8003666:	bf00      	nop
 8003668:	58024400 	.word	0x58024400
 800366c:	58024800 	.word	0x58024800
 8003670:	00ffffcf 	.word	0x00ffffcf
      status = ret;
 8003674:	4626      	mov	r6, r4
 8003676:	e7c9      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x484>
    switch (PeriphClkInit->Usart16ClockSelection)
 8003678:	f023 0208 	bic.w	r2, r3, #8
 800367c:	2a20      	cmp	r2, #32
 800367e:	d001      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8003680:	2b18      	cmp	r3, #24
 8003682:	d1ce      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x49a>
    if (ret == HAL_OK)
 8003684:	b9a4      	cbnz	r4, 80036b0 <HAL_RCCEx_PeriphCLKConfig+0x528>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003686:	4a20      	ldr	r2, [pc, #128]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8003688:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800368a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800368c:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8003690:	430b      	orrs	r3, r1
 8003692:	6553      	str	r3, [r2, #84]	@ 0x54
 8003694:	e7c7      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x49e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003696:	2101      	movs	r1, #1
 8003698:	f105 0008 	add.w	r0, r5, #8
 800369c:	f7ff fc88 	bl	8002fb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036a0:	4604      	mov	r4, r0
        break;
 80036a2:	e7ef      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036a4:	2101      	movs	r1, #1
 80036a6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80036aa:	f7ff fcf7 	bl	800309c <RCCEx_PLL3_Config>
 80036ae:	e7f7      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      status = ret;
 80036b0:	4626      	mov	r6, r4
 80036b2:	e7b8      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x49e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036b4:	2101      	movs	r1, #1
 80036b6:	f105 0008 	add.w	r0, r5, #8
 80036ba:	f7ff fc79 	bl	8002fb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036be:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 80036c0:	b9fc      	cbnz	r4, 8003702 <HAL_RCCEx_PeriphCLKConfig+0x57a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80036c2:	4a11      	ldr	r2, [pc, #68]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80036c4:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
 80036c6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80036c8:	f023 0307 	bic.w	r3, r3, #7
 80036cc:	430b      	orrs	r3, r1
 80036ce:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036d0:	682b      	ldr	r3, [r5, #0]
 80036d2:	075a      	lsls	r2, r3, #29
 80036d4:	d52b      	bpl.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80036d6:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80036da:	2b05      	cmp	r3, #5
 80036dc:	f200 816e 	bhi.w	80039bc <HAL_RCCEx_PeriphCLKConfig+0x834>
 80036e0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80036e4:	0014001a 	.word	0x0014001a
 80036e8:	001a0166 	.word	0x001a0166
 80036ec:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036f0:	2101      	movs	r1, #1
 80036f2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80036f6:	f7ff fcd1 	bl	800309c <RCCEx_PLL3_Config>
 80036fa:	e7e0      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x536>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80036fc:	2601      	movs	r6, #1
 80036fe:	4634      	mov	r4, r6
 8003700:	e7e6      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x548>
      status = ret;
 8003702:	4626      	mov	r6, r4
 8003704:	e7e4      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8003706:	bf00      	nop
 8003708:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800370c:	2101      	movs	r1, #1
 800370e:	f105 0008 	add.w	r0, r5, #8
 8003712:	f7ff fc4d 	bl	8002fb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003716:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8003718:	2c00      	cmp	r4, #0
 800371a:	f040 8152 	bne.w	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800371e:	4aaa      	ldr	r2, [pc, #680]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003720:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 8003724:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003726:	f023 0307 	bic.w	r3, r3, #7
 800372a:	430b      	orrs	r3, r1
 800372c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800372e:	682b      	ldr	r3, [r5, #0]
 8003730:	069b      	lsls	r3, r3, #26
 8003732:	d510      	bpl.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003734:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8003738:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800373c:	f000 8160 	beq.w	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x878>
 8003740:	f200 8144 	bhi.w	80039cc <HAL_RCCEx_PeriphCLKConfig+0x844>
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 814a 	beq.w	80039de <HAL_RCCEx_PeriphCLKConfig+0x856>
 800374a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800374e:	f000 8150 	beq.w	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
 8003752:	2601      	movs	r6, #1
 8003754:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003756:	682b      	ldr	r3, [r5, #0]
 8003758:	065f      	lsls	r7, r3, #25
 800375a:	d510      	bpl.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800375c:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8003760:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003764:	f000 816e 	beq.w	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003768:	f200 8152 	bhi.w	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x888>
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8158 	beq.w	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8003772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003776:	f000 815e 	beq.w	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 800377a:	2601      	movs	r6, #1
 800377c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800377e:	682b      	ldr	r3, [r5, #0]
 8003780:	0618      	lsls	r0, r3, #24
 8003782:	d510      	bpl.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003784:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 8003788:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800378c:	f000 817c 	beq.w	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8003790:	f200 8160 	bhi.w	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8166 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 800379a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800379e:	f000 816c 	beq.w	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 80037a2:	2601      	movs	r6, #1
 80037a4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80037a6:	682b      	ldr	r3, [r5, #0]
 80037a8:	0719      	lsls	r1, r3, #28
 80037aa:	d514      	bpl.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80037ac:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 80037b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b4:	d107      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80037b6:	2102      	movs	r1, #2
 80037b8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80037bc:	f7ff fc6e 	bl	800309c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 80037c0:	2800      	cmp	r0, #0
 80037c2:	bf18      	it	ne
 80037c4:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80037c6:	4a80      	ldr	r2, [pc, #512]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80037c8:	f8d5 1084 	ldr.w	r1, [r5, #132]	@ 0x84
 80037cc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80037ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80037d2:	430b      	orrs	r3, r1
 80037d4:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037d6:	682b      	ldr	r3, [r5, #0]
 80037d8:	06da      	lsls	r2, r3, #27
 80037da:	d514      	bpl.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80037dc:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80037e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037e4:	d107      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80037e6:	2102      	movs	r1, #2
 80037e8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80037ec:	f7ff fc56 	bl	800309c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 80037f0:	2800      	cmp	r0, #0
 80037f2:	bf18      	it	ne
 80037f4:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037f6:	4a74      	ldr	r2, [pc, #464]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80037f8:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 80037fc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80037fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003802:	430b      	orrs	r3, r1
 8003804:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003806:	682b      	ldr	r3, [r5, #0]
 8003808:	031b      	lsls	r3, r3, #12
 800380a:	d51b      	bpl.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    switch (PeriphClkInit->AdcClockSelection)
 800380c:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 8003810:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8003814:	f000 8140 	beq.w	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8003818:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800381c:	d007      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 800381e:	2900      	cmp	r1, #0
 8003820:	f040 8140 	bne.w	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003824:	f105 0008 	add.w	r0, r5, #8
 8003828:	f7ff fbc2 	bl	8002fb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800382c:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800382e:	2c00      	cmp	r4, #0
 8003830:	f040 813b 	bne.w	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003834:	4a64      	ldr	r2, [pc, #400]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003836:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800383a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800383c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003840:	430b      	orrs	r3, r1
 8003842:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003844:	682b      	ldr	r3, [r5, #0]
 8003846:	035f      	lsls	r7, r3, #13
 8003848:	d50f      	bpl.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    switch (PeriphClkInit->UsbClockSelection)
 800384a:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800384e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003852:	f000 813b 	beq.w	8003acc <HAL_RCCEx_PeriphCLKConfig+0x944>
 8003856:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800385a:	f000 812d 	beq.w	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x930>
 800385e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003862:	f000 8124 	beq.w	8003aae <HAL_RCCEx_PeriphCLKConfig+0x926>
 8003866:	2601      	movs	r6, #1
 8003868:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800386a:	682b      	ldr	r3, [r5, #0]
 800386c:	03d8      	lsls	r0, r3, #15
 800386e:	d509      	bpl.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
    switch (PeriphClkInit->SdmmcClockSelection)
 8003870:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 8133 	beq.w	8003ade <HAL_RCCEx_PeriphCLKConfig+0x956>
 8003878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800387c:	f000 813d 	beq.w	8003afa <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003880:	2601      	movs	r6, #1
 8003882:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003884:	682b      	ldr	r3, [r5, #0]
 8003886:	0099      	lsls	r1, r3, #2
 8003888:	d507      	bpl.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x712>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800388a:	2102      	movs	r1, #2
 800388c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8003890:	f7ff fc04 	bl	800309c <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 8003894:	2800      	cmp	r0, #0
 8003896:	bf18      	it	ne
 8003898:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800389a:	e9d5 3100 	ldrd	r3, r1, [r5]
 800389e:	039a      	lsls	r2, r3, #14
 80038a0:	f140 8143 	bpl.w	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
    switch (PeriphClkInit->RngClockSelection)
 80038a4:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
 80038a8:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80038ac:	f000 813f 	beq.w	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 80038b0:	f200 812c 	bhi.w	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x984>
 80038b4:	2800      	cmp	r0, #0
 80038b6:	f000 812f 	beq.w	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x990>
 80038ba:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038bc:	02df      	lsls	r7, r3, #11
 80038be:	d506      	bpl.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x746>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038c0:	4841      	ldr	r0, [pc, #260]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80038c2:	6f6e      	ldr	r6, [r5, #116]	@ 0x74
 80038c4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80038c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038ca:	4332      	orrs	r2, r6
 80038cc:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80038ce:	00de      	lsls	r6, r3, #3
 80038d0:	d507      	bpl.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x75a>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80038d2:	483d      	ldr	r0, [pc, #244]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80038d4:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 80038d8:	6902      	ldr	r2, [r0, #16]
 80038da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80038de:	4332      	orrs	r2, r6
 80038e0:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038e2:	0298      	lsls	r0, r3, #10
 80038e4:	d506      	bpl.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x76c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038e6:	4838      	ldr	r0, [pc, #224]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80038e8:	6eee      	ldr	r6, [r5, #108]	@ 0x6c
 80038ea:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80038ec:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80038f0:	4332      	orrs	r2, r6
 80038f2:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80038f4:	005a      	lsls	r2, r3, #1
 80038f6:	d509      	bpl.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x784>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038f8:	4a33      	ldr	r2, [pc, #204]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80038fa:	6910      	ldr	r0, [r2, #16]
 80038fc:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8003900:	6110      	str	r0, [r2, #16]
 8003902:	6910      	ldr	r0, [r2, #16]
 8003904:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 8003908:	4330      	orrs	r0, r6
 800390a:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800390c:	2b00      	cmp	r3, #0
 800390e:	da06      	bge.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003910:	482d      	ldr	r0, [pc, #180]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003912:	6d6e      	ldr	r6, [r5, #84]	@ 0x54
 8003914:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8003916:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800391a:	4332      	orrs	r2, r6
 800391c:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800391e:	021f      	lsls	r7, r3, #8
 8003920:	d507      	bpl.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003922:	4a29      	ldr	r2, [pc, #164]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003924:	f8d5 008c 	ldr.w	r0, [r5, #140]	@ 0x8c
 8003928:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800392a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800392e:	4303      	orrs	r3, r0
 8003930:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003932:	07ce      	lsls	r6, r1, #31
 8003934:	d506      	bpl.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003936:	2100      	movs	r1, #0
 8003938:	f105 0008 	add.w	r0, r5, #8
 800393c:	f7ff fb38 	bl	8002fb0 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8003940:	4607      	mov	r7, r0
 8003942:	b900      	cbnz	r0, 8003946 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    switch (PeriphClkInit->RngClockSelection)
 8003944:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003946:	686b      	ldr	r3, [r5, #4]
 8003948:	079c      	lsls	r4, r3, #30
 800394a:	d506      	bpl.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800394c:	2101      	movs	r1, #1
 800394e:	f105 0008 	add.w	r0, r5, #8
 8003952:	f7ff fb2d 	bl	8002fb0 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8003956:	4606      	mov	r6, r0
 8003958:	b900      	cbnz	r0, 800395c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    switch (PeriphClkInit->RngClockSelection)
 800395a:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800395c:	686b      	ldr	r3, [r5, #4]
 800395e:	0758      	lsls	r0, r3, #29
 8003960:	d506      	bpl.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003962:	2102      	movs	r1, #2
 8003964:	f105 0008 	add.w	r0, r5, #8
 8003968:	f7ff fb22 	bl	8002fb0 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800396c:	4604      	mov	r4, r0
 800396e:	b900      	cbnz	r0, 8003972 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    switch (PeriphClkInit->RngClockSelection)
 8003970:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003972:	686b      	ldr	r3, [r5, #4]
 8003974:	0719      	lsls	r1, r3, #28
 8003976:	d506      	bpl.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003978:	2100      	movs	r1, #0
 800397a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800397e:	f7ff fb8d 	bl	800309c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8003982:	4606      	mov	r6, r0
 8003984:	b900      	cbnz	r0, 8003988 <HAL_RCCEx_PeriphCLKConfig+0x800>
    switch (PeriphClkInit->RngClockSelection)
 8003986:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003988:	686b      	ldr	r3, [r5, #4]
 800398a:	06da      	lsls	r2, r3, #27
 800398c:	d506      	bpl.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x814>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800398e:	2101      	movs	r1, #1
 8003990:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8003994:	f7ff fb82 	bl	800309c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8003998:	4604      	mov	r4, r0
 800399a:	b900      	cbnz	r0, 800399e <HAL_RCCEx_PeriphCLKConfig+0x816>
    switch (PeriphClkInit->RngClockSelection)
 800399c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800399e:	686b      	ldr	r3, [r5, #4]
 80039a0:	069b      	lsls	r3, r3, #26
 80039a2:	f100 80ca 	bmi.w	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x9b2>
  if (status == HAL_OK)
 80039a6:	1e20      	subs	r0, r4, #0
 80039a8:	bf18      	it	ne
 80039aa:	2001      	movne	r0, #1
}
 80039ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039b0:	2101      	movs	r1, #1
 80039b2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80039b6:	f7ff fb71 	bl	800309c <RCCEx_PLL3_Config>
 80039ba:	e6ac      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x58e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80039bc:	2601      	movs	r6, #1
 80039be:	4634      	mov	r4, r6
 80039c0:	e6b5      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      status = ret;
 80039c2:	4626      	mov	r6, r4
 80039c4:	e6b3      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80039c6:	bf00      	nop
 80039c8:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 80039cc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80039d0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80039d4:	d003      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x856>
 80039d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039da:	f47f aeba 	bne.w	8003752 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    if (ret == HAL_OK)
 80039de:	b9ac      	cbnz	r4, 8003a0c <HAL_RCCEx_PeriphCLKConfig+0x884>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039e0:	4a5b      	ldr	r2, [pc, #364]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80039e2:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
 80039e6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80039e8:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 80039ec:	430b      	orrs	r3, r1
 80039ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80039f0:	e6b1      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039f2:	2100      	movs	r1, #0
 80039f4:	f105 0008 	add.w	r0, r5, #8
 80039f8:	f7ff fada 	bl	8002fb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039fc:	4604      	mov	r4, r0
        break;
 80039fe:	e7ee      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x856>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a00:	2102      	movs	r1, #2
 8003a02:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8003a06:	f7ff fb49 	bl	800309c <RCCEx_PLL3_Config>
 8003a0a:	e7f7      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x874>
      status = ret;
 8003a0c:	4626      	mov	r6, r4
 8003a0e:	e6a2      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003a10:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003a14:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8003a18:	d003      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8003a1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a1e:	f47f aeac 	bne.w	800377a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    if (ret == HAL_OK)
 8003a22:	b9ac      	cbnz	r4, 8003a50 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a24:	4a4a      	ldr	r2, [pc, #296]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003a26:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 8003a2a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003a2c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8003a30:	430b      	orrs	r3, r1
 8003a32:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a34:	e6a3      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a36:	2100      	movs	r1, #0
 8003a38:	f105 0008 	add.w	r0, r5, #8
 8003a3c:	f7ff fab8 	bl	8002fb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a40:	4604      	mov	r4, r0
        break;
 8003a42:	e7ee      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a44:	2102      	movs	r1, #2
 8003a46:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8003a4a:	f7ff fb27 	bl	800309c <RCCEx_PLL3_Config>
 8003a4e:	e7f7      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      status = ret;
 8003a50:	4626      	mov	r6, r4
 8003a52:	e694      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003a54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003a58:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8003a5c:	d003      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8003a5e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003a62:	f47f ae9e 	bne.w	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 8003a66:	b9ac      	cbnz	r4, 8003a94 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003a68:	4a39      	ldr	r2, [pc, #228]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003a6a:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 8003a6e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003a70:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8003a74:	430b      	orrs	r3, r1
 8003a76:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a78:	e695      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	f105 0008 	add.w	r0, r5, #8
 8003a80:	f7ff fa96 	bl	8002fb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a84:	4604      	mov	r4, r0
        break;
 8003a86:	e7ee      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x8de>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a88:	2102      	movs	r1, #2
 8003a8a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8003a8e:	f7ff fb05 	bl	800309c <RCCEx_PLL3_Config>
 8003a92:	e7f7      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
      status = ret;
 8003a94:	4626      	mov	r6, r4
 8003a96:	e686      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a98:	2102      	movs	r1, #2
 8003a9a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8003a9e:	f7ff fafd 	bl	800309c <RCCEx_PLL3_Config>
 8003aa2:	e6c3      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
    switch (PeriphClkInit->AdcClockSelection)
 8003aa4:	2601      	movs	r6, #1
 8003aa6:	4634      	mov	r4, r6
 8003aa8:	e6cc      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      status = ret;
 8003aaa:	4626      	mov	r6, r4
 8003aac:	e6ca      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aae:	4a28      	ldr	r2, [pc, #160]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003ab0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003ab2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003ab8:	b97c      	cbnz	r4, 8003ada <HAL_RCCEx_PeriphCLKConfig+0x952>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003aba:	4a25      	ldr	r2, [pc, #148]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003abc:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 8003ac0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8003ac2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003ac6:	430b      	orrs	r3, r1
 8003ac8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003aca:	e6ce      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003acc:	2101      	movs	r1, #1
 8003ace:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8003ad2:	f7ff fae3 	bl	800309c <RCCEx_PLL3_Config>
 8003ad6:	4604      	mov	r4, r0
        break;
 8003ad8:	e7ee      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x930>
      status = ret;
 8003ada:	4626      	mov	r6, r4
 8003adc:	e6c5      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ade:	4a1c      	ldr	r2, [pc, #112]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003ae0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003ae8:	b974      	cbnz	r4, 8003b08 <HAL_RCCEx_PeriphCLKConfig+0x980>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003aea:	4a19      	ldr	r2, [pc, #100]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003aec:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8003aee:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8003af0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003af4:	430b      	orrs	r3, r1
 8003af6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003af8:	e6c4      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003afa:	2102      	movs	r1, #2
 8003afc:	f105 0008 	add.w	r0, r5, #8
 8003b00:	f7ff fa56 	bl	8002fb0 <RCCEx_PLL2_Config>
 8003b04:	4604      	mov	r4, r0
        break;
 8003b06:	e7ef      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      status = ret;
 8003b08:	4626      	mov	r6, r4
 8003b0a:	e6bb      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
    switch (PeriphClkInit->RngClockSelection)
 8003b0c:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 8003b10:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8003b14:	f47f aed1 	bne.w	80038ba <HAL_RCCEx_PeriphCLKConfig+0x732>
    if (ret == HAL_OK)
 8003b18:	2c00      	cmp	r4, #0
 8003b1a:	f47f aecf 	bne.w	80038bc <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b1e:	4c0c      	ldr	r4, [pc, #48]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003b20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003b22:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003b26:	4302      	orrs	r2, r0
 8003b28:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 8003b2a:	4634      	mov	r4, r6
 8003b2c:	e6c6      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x734>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b2e:	4f08      	ldr	r7, [pc, #32]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003b30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b32:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003b36:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 8003b38:	e7ee      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x990>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b3a:	2102      	movs	r1, #2
 8003b3c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8003b40:	f7ff faac 	bl	800309c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8003b44:	2800      	cmp	r0, #0
 8003b46:	f43f af2e 	beq.w	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
  return HAL_ERROR;
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	e72e      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x824>
 8003b4e:	bf00      	nop
 8003b50:	58024400 	.word	0x58024400

08003b54 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8003b54:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003b56:	f7ff f9bb 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8003b5a:	4b05      	ldr	r3, [pc, #20]	@ (8003b70 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8003b5c:	4a05      	ldr	r2, [pc, #20]	@ (8003b74 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003b64:	5cd3      	ldrb	r3, [r2, r3]
 8003b66:	f003 031f 	and.w	r3, r3, #31
}
 8003b6a:	40d8      	lsrs	r0, r3
 8003b6c:	bd08      	pop	{r3, pc}
 8003b6e:	bf00      	nop
 8003b70:	58024400 	.word	0x58024400
 8003b74:	0800d204 	.word	0x0800d204

08003b78 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b78:	494f      	ldr	r1, [pc, #316]	@ (8003cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8003b7a:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b7c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003b7e:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003b80:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 8003b82:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003b86:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003b8a:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 8003b8c:	f000 8090 	beq.w	8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b90:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003b94:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003b98:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b9c:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ba0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003ba4:	4353      	muls	r3, r2
    switch (pllsource)
 8003ba6:	2c01      	cmp	r4, #1
 8003ba8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bac:	ee06 3a90 	vmov	s13, r3
 8003bb0:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8003bb4:	d06e      	beq.n	8003c94 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 8003bb6:	2c02      	cmp	r4, #2
 8003bb8:	d05e      	beq.n	8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8003bba:	2c00      	cmp	r4, #0
 8003bbc:	d16a      	bne.n	8003c94 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bbe:	680b      	ldr	r3, [r1, #0]
 8003bc0:	069b      	lsls	r3, r3, #26
 8003bc2:	d547      	bpl.n	8003c54 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bc4:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bc6:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bc8:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8003bcc:	4a3b      	ldr	r2, [pc, #236]	@ (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bd2:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bd4:	ee07 2a90 	vmov	s15, r2
 8003bd8:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8003bdc:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8003be0:	ee07 3a10 	vmov	s14, r3
 8003be4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003be8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003bec:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003bf0:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003bf4:	4a30      	ldr	r2, [pc, #192]	@ (8003cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8003bf6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8003bf8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003bfc:	ee07 3a10 	vmov	s14, r3
 8003c00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003c04:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003c08:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c0c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8003c10:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003c14:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8003c16:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003c1a:	ee07 3a10 	vmov	s14, r3
 8003c1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003c22:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003c26:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c2a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8003c2e:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003c32:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8003c34:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003c38:	ee06 3a90 	vmov	s13, r3
 8003c3c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003c40:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003c44:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003c48:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8003c4c:	ee17 3a90 	vmov	r3, s15
 8003c50:	6083      	str	r3, [r0, #8]
}
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c54:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8003c56:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8003cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8003c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c6a:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c6e:	eec5 6a87 	vdiv.f32	s13, s11, s14
 8003c72:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8003c76:	e7bd      	b.n	8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c78:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8003c7a:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8003cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8003c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c8e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003c92:	e7ec      	b.n	8003c6e <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c94:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8003c96:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 8003cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8003c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9e:	ee07 3a90 	vmov	s15, r3
 8003ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003caa:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003cae:	e7de      	b.n	8003c6e <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003cb0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003cb4:	e7cc      	b.n	8003c50 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8003cb6:	bf00      	nop
 8003cb8:	58024400 	.word	0x58024400
 8003cbc:	03d09000 	.word	0x03d09000
 8003cc0:	4c742400 	.word	0x4c742400
 8003cc4:	4bbebc20 	.word	0x4bbebc20
 8003cc8:	4a742400 	.word	0x4a742400

08003ccc <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ccc:	494f      	ldr	r1, [pc, #316]	@ (8003e0c <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8003cce:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cd0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003cd2:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003cd4:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll3m != 0U)
 8003cd6:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003cda:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003cde:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 8003ce0:	f000 8090 	beq.w	8003e04 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ce4:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003ce8:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003cec:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cf0:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003cf8:	4353      	muls	r3, r2
    switch (pllsource)
 8003cfa:	2c01      	cmp	r4, #1
 8003cfc:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d00:	ee06 3a90 	vmov	s13, r3
 8003d04:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8003d08:	d06e      	beq.n	8003de8 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 8003d0a:	2c02      	cmp	r4, #2
 8003d0c:	d05e      	beq.n	8003dcc <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8003d0e:	2c00      	cmp	r4, #0
 8003d10:	d16a      	bne.n	8003de8 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d12:	680b      	ldr	r3, [r1, #0]
 8003d14:	069b      	lsls	r3, r3, #26
 8003d16:	d547      	bpl.n	8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d18:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d1c:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8003d20:	4a3b      	ldr	r2, [pc, #236]	@ (8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d26:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d28:	ee07 2a90 	vmov	s15, r2
 8003d2c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8003d30:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8003d34:	ee07 3a10 	vmov	s14, r3
 8003d38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d3c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003d40:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003d44:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003d48:	4a30      	ldr	r2, [pc, #192]	@ (8003e0c <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8003d4a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003d4c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003d50:	ee07 3a10 	vmov	s14, r3
 8003d54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d58:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003d5c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003d60:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8003d64:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003d68:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003d6a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003d6e:	ee07 3a10 	vmov	s14, r3
 8003d72:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d76:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003d7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003d7e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8003d82:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003d86:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003d88:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003d8c:	ee06 3a90 	vmov	s13, r3
 8003d90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003d94:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003d98:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003d9c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8003da0:	ee17 3a90 	vmov	r3, s15
 8003da4:	6083      	str	r3, [r0, #8]
}
 8003da6:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003da8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003daa:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8003e14 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8003dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db2:	ee07 3a90 	vmov	s15, r3
 8003db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dbe:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003dc2:	eec5 6a87 	vdiv.f32	s13, s11, s14
 8003dc6:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8003dca:	e7bd      	b.n	8003d48 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003dcc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003dce:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8003e18 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8003dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd6:	ee07 3a90 	vmov	s15, r3
 8003dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003de2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003de6:	e7ec      	b.n	8003dc2 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003de8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003dea:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 8003e1c <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8003dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dfe:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003e02:	e7de      	b.n	8003dc2 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003e04:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003e08:	e7cc      	b.n	8003da4 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8003e0a:	bf00      	nop
 8003e0c:	58024400 	.word	0x58024400
 8003e10:	03d09000 	.word	0x03d09000
 8003e14:	4c742400 	.word	0x4c742400
 8003e18:	4bbebc20 	.word	0x4bbebc20
 8003e1c:	4a742400 	.word	0x4a742400

08003e20 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e20:	494f      	ldr	r1, [pc, #316]	@ (8003f60 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 8003e22:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e24:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8003e26:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8003e28:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll1m != 0U)
 8003e2a:	f416 7f7c 	tst.w	r6, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8003e2e:	f3c6 1305 	ubfx	r3, r6, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003e32:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  if (pll1m != 0U)
 8003e34:	f000 8090 	beq.w	8003f58 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e38:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003e3c:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8003e40:	f005 0201 	and.w	r2, r5, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e44:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003e4c:	4353      	muls	r3, r2
    switch (pllsource)
 8003e4e:	2c01      	cmp	r4, #1
 8003e50:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e54:	ee06 3a90 	vmov	s13, r3
 8003e58:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8003e5c:	d04e      	beq.n	8003efc <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8003e5e:	2c02      	cmp	r4, #2
 8003e60:	d05e      	beq.n	8003f20 <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 8003e62:	2c00      	cmp	r4, #0
 8003e64:	d16a      	bne.n	8003f3c <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e66:	680b      	ldr	r3, [r1, #0]
 8003e68:	069b      	lsls	r3, r3, #26
 8003e6a:	d567      	bpl.n	8003f3c <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e6c:	680a      	ldr	r2, [r1, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e6e:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e70:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8003e74:	4a3b      	ldr	r2, [pc, #236]	@ (8003f64 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e7a:	40ca      	lsrs	r2, r1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e7c:	ee07 2a90 	vmov	s15, r2
 8003e80:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8003e84:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8003e88:	ee07 3a10 	vmov	s14, r3
 8003e8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003e90:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003e94:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003e98:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8003e9c:	4a30      	ldr	r2, [pc, #192]	@ (8003f60 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8003e9e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003ea0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003ea4:	ee07 3a10 	vmov	s14, r3
 8003ea8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003eac:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003eb0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003eb4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8003eb8:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8003ebc:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003ebe:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003ec2:	ee07 3a10 	vmov	s14, r3
 8003ec6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003eca:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003ece:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003ed2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8003ed6:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8003eda:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003edc:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003ee0:	ee06 3a90 	vmov	s13, r3
 8003ee4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003ee8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003eec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003ef0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8003ef4:	ee17 3a90 	vmov	r3, s15
 8003ef8:	6083      	str	r3, [r0, #8]
}
 8003efa:	bd70      	pop	{r4, r5, r6, pc}
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003efc:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8003efe:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8003f68 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8003f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f06:	ee07 3a90 	vmov	s15, r3
 8003f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f12:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f16:	eec5 6a87 	vdiv.f32	s13, s11, s14
 8003f1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8003f1e:	e7bd      	b.n	8003e9c <HAL_RCCEx_GetPLL1ClockFreq+0x7c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f20:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8003f22:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8003f6c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8003f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f36:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003f3a:	e7ec      	b.n	8003f16 <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f3c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8003f3e:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 8003f70 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8003f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f52:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003f56:	e7de      	b.n	8003f16 <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003f58:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003f5c:	e7cc      	b.n	8003ef8 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8003f5e:	bf00      	nop
 8003f60:	58024400 	.word	0x58024400
 8003f64:	03d09000 	.word	0x03d09000
 8003f68:	4a742400 	.word	0x4a742400
 8003f6c:	4bbebc20 	.word	0x4bbebc20
 8003f70:	4c742400 	.word	0x4c742400

08003f74 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8003f74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003f76:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	d115      	bne.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x36>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8003f7e:	4b9d      	ldr	r3, [pc, #628]	@ (80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8003f80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f82:	f002 0207 	and.w	r2, r2, #7
    switch (saiclocksource)
 8003f86:	2a04      	cmp	r2, #4
 8003f88:	d82d      	bhi.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8003f8a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003f8e:	001c      	.short	0x001c
 8003f90:	000500e1 	.word	0x000500e1
 8003f94:	00410151 	.word	0x00410151
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8003f9e:	f000 80df 	beq.w	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003fa2:	a801      	add	r0, sp, #4
 8003fa4:	f7ff fe92 	bl	8003ccc <HAL_RCCEx_GetPLL3ClockFreq>
 8003fa8:	e0d9      	b.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8003faa:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 8003fae:	430b      	orrs	r3, r1
 8003fb0:	d11b      	bne.n	8003fea <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8003fb2:	4b90      	ldr	r3, [pc, #576]	@ (80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8003fb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003fb6:	f402 72e0 	and.w	r2, r2, #448	@ 0x1c0
    switch (saiclocksource)
 8003fba:	2a80      	cmp	r2, #128	@ 0x80
 8003fbc:	d0ec      	beq.n	8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8003fbe:	d80c      	bhi.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x66>
    switch (srcclk)
 8003fc0:	2a00      	cmp	r2, #0
 8003fc2:	f040 80c5 	bne.w	8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003fc6:	6818      	ldr	r0, [r3, #0]
 8003fc8:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8003fcc:	f000 80c8 	beq.w	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003fd0:	a801      	add	r0, sp, #4
 8003fd2:	f7ff ff25 	bl	8003e20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003fd6:	9802      	ldr	r0, [sp, #8]
 8003fd8:	e0c2      	b.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
    switch (saiclocksource)
 8003fda:	2ac0      	cmp	r2, #192	@ 0xc0
 8003fdc:	f000 8128 	beq.w	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8003fe0:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
    switch (saiclocksource)
 8003fe4:	d014      	beq.n	8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = 0;
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	e0ba      	b.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003fea:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 8003fee:	430b      	orrs	r3, r1
 8003ff0:	d12e      	bne.n	8004050 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8003ff2:	4b80      	ldr	r3, [pc, #512]	@ (80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8003ff4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003ff6:	f402 0260 	and.w	r2, r2, #14680064	@ 0xe00000
    switch (saiclocksource)
 8003ffa:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8003ffe:	d0cb      	beq.n	8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8004000:	d9de      	bls.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 8004002:	f5b2 0fc0 	cmp.w	r2, #6291456	@ 0x600000
 8004006:	f000 8113 	beq.w	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 800400a:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 800400e:	e7e9      	b.n	8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004010:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004012:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004014:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004018:	0748      	lsls	r0, r1, #29
 800401a:	d506      	bpl.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800401c:	b92a      	cbnz	r2, 800402a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800401e:	681b      	ldr	r3, [r3, #0]
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004020:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004024:	4874      	ldr	r0, [pc, #464]	@ (80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004026:	40d8      	lsrs	r0, r3
 8004028:	e09a      	b.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800402a:	4b72      	ldr	r3, [pc, #456]	@ (80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800402c:	6819      	ldr	r1, [r3, #0]
 800402e:	05c9      	lsls	r1, r1, #23
 8004030:	d503      	bpl.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 8004032:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8004036:	f000 80fd 	beq.w	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8004040:	f000 808e 	beq.w	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          frequency = 0;
 8004044:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8004048:	486c      	ldr	r0, [pc, #432]	@ (80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800404a:	bf18      	it	ne
 800404c:	2000      	movne	r0, #0
 800404e:	e087      	b.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004050:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 8004054:	430b      	orrs	r3, r1
 8004056:	d11f      	bne.n	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8004058:	4b66      	ldr	r3, [pc, #408]	@ (80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800405a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800405c:	f002 62e0 	and.w	r2, r2, #117440512	@ 0x7000000
    switch (saiclocksource)
 8004060:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 8004064:	d098      	beq.n	8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8004066:	d9ab      	bls.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 8004068:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 800406c:	f000 80e0 	beq.w	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8004070:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
    switch (srcclk)
 8004074:	d1b7      	bne.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004076:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004078:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800407a:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800407e:	681b      	ldr	r3, [r3, #0]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004080:	0748      	lsls	r0, r1, #29
 8004082:	d501      	bpl.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8004084:	2a00      	cmp	r2, #0
 8004086:	d0cb      	beq.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004088:	05d9      	lsls	r1, r3, #23
 800408a:	d503      	bpl.n	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800408c:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8004090:	f000 80d0 	beq.w	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004094:	4b57      	ldr	r3, [pc, #348]	@ (80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004096:	e7d0      	b.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004098:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 800409c:	430b      	orrs	r3, r1
 800409e:	d10f      	bne.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80040a0:	4b54      	ldr	r3, [pc, #336]	@ (80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80040a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80040a4:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
    switch (srcclk)
 80040a8:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80040ac:	f43f af74 	beq.w	8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 80040b0:	d986      	bls.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 80040b2:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 80040b6:	f000 80bb 	beq.w	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 80040ba:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 80040be:	e7d9      	b.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80040c0:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 80040c4:	430b      	orrs	r3, r1
 80040c6:	d132      	bne.n	800412e <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80040c8:	4a4a      	ldr	r2, [pc, #296]	@ (80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80040ca:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80040cc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 80040d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040d4:	f000 8081 	beq.w	80041da <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 80040d8:	d80d      	bhi.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80040da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040de:	d016      	beq.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 80040e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040e4:	d01b      	beq.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f47f af7d 	bne.w	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
}
 80040ec:	b005      	add	sp, #20
 80040ee:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 80040f2:	f7fe bf0f 	b.w	8002f14 <HAL_RCC_GetPCLK1Freq>
    switch (srcclk)
 80040f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040fa:	d074      	beq.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80040fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
    switch (srcclk)
 8004100:	f47f af71 	bne.w	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004104:	6810      	ldr	r0, [r2, #0]
          frequency = HSE_VALUE;
 8004106:	4b3d      	ldr	r3, [pc, #244]	@ (80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004108:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800410c:	e06f      	b.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800410e:	6810      	ldr	r0, [r2, #0]
 8004110:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004114:	d024      	beq.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004116:	a801      	add	r0, sp, #4
 8004118:	f7ff fd2e 	bl	8003b78 <HAL_RCCEx_GetPLL2ClockFreq>
 800411c:	e75b      	b.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800411e:	6810      	ldr	r0, [r2, #0]
 8004120:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8004124:	d01c      	beq.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004126:	a801      	add	r0, sp, #4
 8004128:	f7ff fdd0 	bl	8003ccc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800412c:	e753      	b.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800412e:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 8004132:	430b      	orrs	r3, r1
 8004134:	d120      	bne.n	8004178 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004136:	4b2f      	ldr	r3, [pc, #188]	@ (80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004138:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800413a:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
    switch (srcclk)
 800413e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8004142:	d010      	beq.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8004144:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 8004148:	d095      	beq.n	8004076 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
 800414a:	2a00      	cmp	r2, #0
 800414c:	f47f af4b 	bne.w	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004156:	d003      	beq.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004158:	a801      	add	r0, sp, #4
 800415a:	f7ff fd0d 	bl	8003b78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800415e:	9801      	ldr	r0, [sp, #4]
}
 8004160:	b005      	add	sp, #20
 8004162:	f85d fb04 	ldr.w	pc, [sp], #4
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800416c:	d0f8      	beq.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800416e:	a801      	add	r0, sp, #4
 8004170:	f7ff fdac 	bl	8003ccc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004174:	9803      	ldr	r0, [sp, #12]
 8004176:	e7f3      	b.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004178:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 800417c:	430b      	orrs	r3, r1
 800417e:	d10c      	bne.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x226>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004180:	4b1c      	ldr	r3, [pc, #112]	@ (80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004182:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 8004184:	03d2      	lsls	r2, r2, #15
 8004186:	f57f af1e 	bpl.w	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004190:	d0e6      	beq.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004192:	a801      	add	r0, sp, #4
 8004194:	f7ff fcf0 	bl	8003b78 <HAL_RCCEx_GetPLL2ClockFreq>
 8004198:	e7ec      	b.n	8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800419a:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 800419e:	430b      	orrs	r3, r1
 80041a0:	d130      	bne.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80041a2:	4a14      	ldr	r2, [pc, #80]	@ (80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80041a4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80041a6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 80041aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041ae:	d014      	beq.n	80041da <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 80041b0:	d80d      	bhi.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80041b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041b6:	d0aa      	beq.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 80041b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041bc:	d0af      	beq.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f47f af11 	bne.w	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
}
 80041c4:	b005      	add	sp, #20
 80041c6:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80041ca:	f7ff bcc3 	b.w	8003b54 <HAL_RCCEx_GetD3PCLK1Freq>
    switch (srcclk)
 80041ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d2:	d008      	beq.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80041d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041d8:	e792      	b.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041da:	6810      	ldr	r0, [r2, #0]
 80041dc:	f010 0004 	ands.w	r0, r0, #4
 80041e0:	d0be      	beq.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041e2:	6813      	ldr	r3, [r2, #0]
 80041e4:	e71c      	b.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80041e6:	6810      	ldr	r0, [r2, #0]
          frequency = CSI_VALUE;
 80041e8:	4b05      	ldr	r3, [pc, #20]	@ (8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80041ea:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
          frequency = HSE_VALUE;
 80041ee:	bf18      	it	ne
 80041f0:	4618      	movne	r0, r3
 80041f2:	e7b5      	b.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
 80041f4:	58024400 	.word	0x58024400
 80041f8:	03d09000 	.word	0x03d09000
 80041fc:	017d7840 	.word	0x017d7840
 8004200:	003d0900 	.word	0x003d0900
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004204:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 8004208:	4308      	orrs	r0, r1
 800420a:	f47f aeec 	bne.w	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800420e:	4a0a      	ldr	r2, [pc, #40]	@ (8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004210:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004212:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 8004216:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800421a:	d007      	beq.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800421c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004220:	f43f af75 	beq.w	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8004224:	2b00      	cmp	r3, #0
 8004226:	f47f aede 	bne.w	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 800422a:	e76b      	b.n	8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800422c:	6810      	ldr	r0, [r2, #0]
 800422e:	e6cb      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004230:	4802      	ldr	r0, [pc, #8]	@ (800423c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004232:	e795      	b.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          frequency = CSI_VALUE;
 8004234:	4802      	ldr	r0, [pc, #8]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004236:	e793      	b.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
 8004238:	58024400 	.word	0x58024400
 800423c:	00bb8000 	.word	0x00bb8000
 8004240:	003d0900 	.word	0x003d0900

08004244 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004244:	b538      	push	{r3, r4, r5, lr}

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004246:	4a0a      	ldr	r2, [pc, #40]	@ (8004270 <HAL_RTC_WaitForSynchro+0x2c>)
{
 8004248:	4604      	mov	r4, r0
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800424a:	6803      	ldr	r3, [r0, #0]
 800424c:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800424e:	f7fd f90b 	bl	8001468 <HAL_GetTick>
 8004252:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	069b      	lsls	r3, r3, #26
 800425a:	d501      	bpl.n	8004260 <HAL_RTC_WaitForSynchro+0x1c>
      {
        return HAL_TIMEOUT;
      }
    }

  return HAL_OK;
 800425c:	2000      	movs	r0, #0
}
 800425e:	bd38      	pop	{r3, r4, r5, pc}
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004260:	f7fd f902 	bl	8001468 <HAL_GetTick>
 8004264:	1b40      	subs	r0, r0, r5
 8004266:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800426a:	d9f3      	bls.n	8004254 <HAL_RTC_WaitForSynchro+0x10>
        return HAL_TIMEOUT;
 800426c:	2003      	movs	r0, #3
 800426e:	e7f6      	b.n	800425e <HAL_RTC_WaitForSynchro+0x1a>
 8004270:	0003ff5f 	.word	0x0003ff5f

08004274 <RTC_EnterInitMode>:
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004274:	6802      	ldr	r2, [r0, #0]
{
 8004276:	b570      	push	{r4, r5, r6, lr}
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004278:	68d4      	ldr	r4, [r2, #12]
{
 800427a:	4605      	mov	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800427c:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 8004280:	d11a      	bne.n	80042b8 <RTC_EnterInitMode+0x44>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004282:	f04f 33ff 	mov.w	r3, #4294967295
 8004286:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004288:	f7fd f8ee 	bl	8001468 <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 800428c:	4623      	mov	r3, r4
    tickstart = HAL_GetTick();
 800428e:	4606      	mov	r6, r0

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004290:	682a      	ldr	r2, [r5, #0]
 8004292:	68d4      	ldr	r4, [r2, #12]
 8004294:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 8004298:	d101      	bne.n	800429e <RTC_EnterInitMode+0x2a>
 800429a:	2b03      	cmp	r3, #3
 800429c:	d101      	bne.n	80042a2 <RTC_EnterInitMode+0x2e>
      }
    }
  }

  return status;
}
 800429e:	4618      	mov	r0, r3
 80042a0:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80042a2:	f7fd f8e1 	bl	8001468 <HAL_GetTick>
 80042a6:	1b80      	subs	r0, r0, r6
 80042a8:	4623      	mov	r3, r4
 80042aa:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80042ae:	d9ef      	bls.n	8004290 <RTC_EnterInitMode+0x1c>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
 80042b6:	e7eb      	b.n	8004290 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	e7f0      	b.n	800429e <RTC_EnterInitMode+0x2a>

080042bc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80042bc:	b538      	push	{r3, r4, r5, lr}

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80042be:	4c0f      	ldr	r4, [pc, #60]	@ (80042fc <RTC_ExitInitMode+0x40>)
{
 80042c0:	4605      	mov	r5, r0
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80042c2:	68e3      	ldr	r3, [r4, #12]
 80042c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042c8:	60e3      	str	r3, [r4, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80042ca:	68a3      	ldr	r3, [r4, #8]
 80042cc:	069b      	lsls	r3, r3, #26
 80042ce:	d406      	bmi.n	80042de <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042d0:	f7ff ffb8 	bl	8004244 <HAL_RTC_WaitForSynchro>
 80042d4:	b110      	cbz	r0, 80042dc <RTC_ExitInitMode+0x20>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80042d6:	2003      	movs	r0, #3
 80042d8:	f885 0021 	strb.w	r0, [r5, #33]	@ 0x21
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 80042dc:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80042de:	68a3      	ldr	r3, [r4, #8]
 80042e0:	f023 0320 	bic.w	r3, r3, #32
 80042e4:	60a3      	str	r3, [r4, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042e6:	f7ff ffad 	bl	8004244 <HAL_RTC_WaitForSynchro>
 80042ea:	b110      	cbz	r0, 80042f2 <RTC_ExitInitMode+0x36>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80042ec:	2003      	movs	r0, #3
 80042ee:	f885 0021 	strb.w	r0, [r5, #33]	@ 0x21
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80042f2:	68a3      	ldr	r3, [r4, #8]
 80042f4:	f043 0320 	orr.w	r3, r3, #32
 80042f8:	60a3      	str	r3, [r4, #8]
  return status;
 80042fa:	e7ef      	b.n	80042dc <RTC_ExitInitMode+0x20>
 80042fc:	58004000 	.word	0x58004000

08004300 <HAL_RTC_Init>:
{
 8004300:	b538      	push	{r3, r4, r5, lr}
  if(hrtc != NULL)
 8004302:	4604      	mov	r4, r0
 8004304:	2800      	cmp	r0, #0
 8004306:	d045      	beq.n	8004394 <HAL_RTC_Init+0x94>
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004308:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800430c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004310:	b91b      	cbnz	r3, 800431a <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 8004312:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8004316:	f7fc fe8b 	bl	8001030 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800431a:	2302      	movs	r3, #2
 800431c:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	06d2      	lsls	r2, r2, #27
 8004326:	d504      	bpl.n	8004332 <HAL_RTC_Init+0x32>
      hrtc->State = HAL_RTC_STATE_READY;
 8004328:	2301      	movs	r3, #1
 800432a:	2000      	movs	r0, #0
 800432c:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
}
 8004330:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004332:	22ca      	movs	r2, #202	@ 0xca
      status = RTC_EnterInitMode(hrtc);
 8004334:	4620      	mov	r0, r4
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004336:	625a      	str	r2, [r3, #36]	@ 0x24
 8004338:	2253      	movs	r2, #83	@ 0x53
 800433a:	625a      	str	r2, [r3, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 800433c:	f7ff ff9a 	bl	8004274 <RTC_EnterInitMode>
      if (status == HAL_OK)
 8004340:	bb10      	cbnz	r0, 8004388 <HAL_RTC_Init+0x88>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004342:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004344:	6920      	ldr	r0, [r4, #16]
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004346:	6893      	ldr	r3, [r2, #8]
 8004348:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800434c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004350:	6093      	str	r3, [r2, #8]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004352:	6863      	ldr	r3, [r4, #4]
 8004354:	6891      	ldr	r1, [r2, #8]
 8004356:	4303      	orrs	r3, r0
 8004358:	69a0      	ldr	r0, [r4, #24]
 800435a:	4303      	orrs	r3, r0
        status = RTC_ExitInitMode(hrtc);
 800435c:	4620      	mov	r0, r4
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800435e:	430b      	orrs	r3, r1
 8004360:	6093      	str	r3, [r2, #8]
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8004362:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8004366:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800436a:	6113      	str	r3, [r2, #16]
        status = RTC_ExitInitMode(hrtc);
 800436c:	f7ff ffa6 	bl	80042bc <RTC_ExitInitMode>
      if(status == HAL_OK)
 8004370:	b950      	cbnz	r0, 8004388 <HAL_RTC_Init+0x88>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004372:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004374:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004376:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8004378:	f023 0303 	bic.w	r3, r3, #3
 800437c:	64d3      	str	r3, [r2, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800437e:	69e3      	ldr	r3, [r4, #28]
 8004380:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 8004382:	432b      	orrs	r3, r5
 8004384:	430b      	orrs	r3, r1
 8004386:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	22ff      	movs	r2, #255	@ 0xff
 800438c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 800438e:	2800      	cmp	r0, #0
 8004390:	d0ca      	beq.n	8004328 <HAL_RTC_Init+0x28>
 8004392:	e7cd      	b.n	8004330 <HAL_RTC_Init+0x30>
  HAL_StatusTypeDef status = HAL_ERROR;
 8004394:	2001      	movs	r0, #1
 8004396:	e7cb      	b.n	8004330 <HAL_RTC_Init+0x30>

08004398 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8004398:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & 0x0FU));
 800439a:	f000 000f 	and.w	r0, r0, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800439e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & 0x0FU));
 80043a2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80043a6:	b2c0      	uxtb	r0, r0
 80043a8:	4770      	bx	lr

080043aa <HAL_RTC_GetTime>:
{
 80043aa:	b538      	push	{r3, r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80043ac:	6803      	ldr	r3, [r0, #0]
 80043ae:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80043b0:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80043b2:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80043b4:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80043b6:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80043ba:	f3c3 2506 	ubfx	r5, r3, #8, #7
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80043be:	f003 047f 	and.w	r4, r3, #127	@ 0x7f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80043c2:	6088      	str	r0, [r1, #8]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80043c4:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80043c8:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80043cc:	704d      	strb	r5, [r1, #1]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80043ce:	7008      	strb	r0, [r1, #0]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80043d0:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80043d2:	70cb      	strb	r3, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 80043d4:	b952      	cbnz	r2, 80043ec <HAL_RTC_GetTime+0x42>
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80043d6:	f7ff ffdf 	bl	8004398 <RTC_Bcd2ToByte>
 80043da:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80043dc:	4628      	mov	r0, r5
 80043de:	f7ff ffdb 	bl	8004398 <RTC_Bcd2ToByte>
 80043e2:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80043e4:	4620      	mov	r0, r4
 80043e6:	f7ff ffd7 	bl	8004398 <RTC_Bcd2ToByte>
 80043ea:	7088      	strb	r0, [r1, #2]
}
 80043ec:	2000      	movs	r0, #0
 80043ee:	bd38      	pop	{r3, r4, r5, pc}

080043f0 <HAL_RTC_GetDate>:
{
 80043f0:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80043f2:	6803      	ldr	r3, [r0, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80043f6:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80043fa:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80043fe:	f003 043f 	and.w	r4, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004402:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004406:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004408:	704d      	strb	r5, [r1, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800440a:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800440c:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 800440e:	b952      	cbnz	r2, 8004426 <HAL_RTC_GetDate+0x36>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004410:	f7ff ffc2 	bl	8004398 <RTC_Bcd2ToByte>
 8004414:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004416:	4628      	mov	r0, r5
 8004418:	f7ff ffbe 	bl	8004398 <RTC_Bcd2ToByte>
 800441c:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800441e:	4620      	mov	r0, r4
 8004420:	f7ff ffba 	bl	8004398 <RTC_Bcd2ToByte>
 8004424:	7088      	strb	r0, [r1, #2]
}
 8004426:	2000      	movs	r0, #0
 8004428:	bd38      	pop	{r3, r4, r5, pc}

0800442a <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800442a:	4770      	bx	lr

0800442c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800442c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004430:	2b01      	cmp	r3, #1
 8004432:	d133      	bne.n	800449c <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	2302      	movs	r3, #2
 8004436:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800443a:	6803      	ldr	r3, [r0, #0]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004444:	4a16      	ldr	r2, [pc, #88]	@ (80044a0 <HAL_TIM_Base_Start_IT+0x74>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d01a      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0x54>
 800444a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800444e:	d017      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0x54>
 8004450:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8004454:	4293      	cmp	r3, r2
 8004456:	d013      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0x54>
 8004458:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800445c:	4293      	cmp	r3, r2
 800445e:	d00f      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0x54>
 8004460:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004464:	4293      	cmp	r3, r2
 8004466:	d00b      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0x54>
 8004468:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800446c:	4293      	cmp	r3, r2
 800446e:	d007      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0x54>
 8004470:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 8004474:	4293      	cmp	r3, r2
 8004476:	d003      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0x54>
 8004478:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800447c:	4293      	cmp	r3, r2
 800447e:	d107      	bne.n	8004490 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004480:	6899      	ldr	r1, [r3, #8]
 8004482:	4a08      	ldr	r2, [pc, #32]	@ (80044a4 <HAL_TIM_Base_Start_IT+0x78>)
 8004484:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004486:	2a06      	cmp	r2, #6
 8004488:	d006      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0x6c>
 800448a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800448e:	d003      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	f042 0201 	orr.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8004498:	2000      	movs	r0, #0
 800449a:	4770      	bx	lr
    return HAL_ERROR;
 800449c:	2001      	movs	r0, #1
}
 800449e:	4770      	bx	lr
 80044a0:	40010000 	.word	0x40010000
 80044a4:	00010007 	.word	0x00010007

080044a8 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80044a8:	4770      	bx	lr

080044aa <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80044aa:	4770      	bx	lr

080044ac <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80044ac:	4770      	bx	lr

080044ae <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80044ae:	4770      	bx	lr

080044b0 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 80044b0:	6803      	ldr	r3, [r0, #0]
{
 80044b2:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80044b4:	68dd      	ldr	r5, [r3, #12]
{
 80044b6:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 80044b8:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044ba:	07b2      	lsls	r2, r6, #30
 80044bc:	d50d      	bpl.n	80044da <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044be:	07a9      	lsls	r1, r5, #30
 80044c0:	d50b      	bpl.n	80044da <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044c2:	f06f 0202 	mvn.w	r2, #2
 80044c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044c8:	2201      	movs	r2, #1
 80044ca:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	079a      	lsls	r2, r3, #30
 80044d0:	d075      	beq.n	80045be <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 80044d2:	f7ff ffea 	bl	80044aa <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d6:	2300      	movs	r3, #0
 80044d8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044da:	0773      	lsls	r3, r6, #29
 80044dc:	d510      	bpl.n	8004500 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044de:	0768      	lsls	r0, r5, #29
 80044e0:	d50e      	bpl.n	8004500 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80044e8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ec:	2202      	movs	r2, #2
 80044ee:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80044f6:	d068      	beq.n	80045ca <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 80044f8:	f7ff ffd7 	bl	80044aa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fc:	2300      	movs	r3, #0
 80044fe:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004500:	0731      	lsls	r1, r6, #28
 8004502:	d50f      	bpl.n	8004524 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004504:	072a      	lsls	r2, r5, #28
 8004506:	d50d      	bpl.n	8004524 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004508:	6823      	ldr	r3, [r4, #0]
 800450a:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800450e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004512:	2204      	movs	r2, #4
 8004514:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	079b      	lsls	r3, r3, #30
 800451a:	d05c      	beq.n	80045d6 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800451c:	f7ff ffc5 	bl	80044aa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004520:	2300      	movs	r3, #0
 8004522:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004524:	06f1      	lsls	r1, r6, #27
 8004526:	d510      	bpl.n	800454a <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004528:	06ea      	lsls	r2, r5, #27
 800452a:	d50e      	bpl.n	800454a <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8004532:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004536:	2208      	movs	r2, #8
 8004538:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004540:	d04f      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 8004542:	f7ff ffb2 	bl	80044aa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004546:	2300      	movs	r3, #0
 8004548:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800454a:	07f3      	lsls	r3, r6, #31
 800454c:	d508      	bpl.n	8004560 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800454e:	07e8      	lsls	r0, r5, #31
 8004550:	d506      	bpl.n	8004560 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8004558:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800455a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800455c:	f7fc fd42 	bl	8000fe4 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004560:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 8004564:	d008      	beq.n	8004578 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004566:	0629      	lsls	r1, r5, #24
 8004568:	d506      	bpl.n	8004578 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 8004570:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004572:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004574:	f000 f8c1 	bl	80046fa <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004578:	05f2      	lsls	r2, r6, #23
 800457a:	d508      	bpl.n	800458e <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800457c:	062b      	lsls	r3, r5, #24
 800457e:	d506      	bpl.n	800458e <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 8004586:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004588:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800458a:	f000 f8b7 	bl	80046fc <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800458e:	0670      	lsls	r0, r6, #25
 8004590:	d508      	bpl.n	80045a4 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004592:	0669      	lsls	r1, r5, #25
 8004594:	d506      	bpl.n	80045a4 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800459c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800459e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80045a0:	f7ff ff85 	bl	80044ae <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045a4:	06b2      	lsls	r2, r6, #26
 80045a6:	d522      	bpl.n	80045ee <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045a8:	06ab      	lsls	r3, r5, #26
 80045aa:	d520      	bpl.n	80045ee <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80045b2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045b4:	611a      	str	r2, [r3, #16]
}
 80045b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 80045ba:	f000 b89d 	b.w	80046f8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045be:	f7ff ff73 	bl	80044a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c2:	4620      	mov	r0, r4
 80045c4:	f7ff ff72 	bl	80044ac <HAL_TIM_PWM_PulseFinishedCallback>
 80045c8:	e785      	b.n	80044d6 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ca:	f7ff ff6d 	bl	80044a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ce:	4620      	mov	r0, r4
 80045d0:	f7ff ff6c 	bl	80044ac <HAL_TIM_PWM_PulseFinishedCallback>
 80045d4:	e792      	b.n	80044fc <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d6:	f7ff ff67 	bl	80044a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045da:	4620      	mov	r0, r4
 80045dc:	f7ff ff66 	bl	80044ac <HAL_TIM_PWM_PulseFinishedCallback>
 80045e0:	e79e      	b.n	8004520 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e2:	f7ff ff61 	bl	80044a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e6:	4620      	mov	r0, r4
 80045e8:	f7ff ff60 	bl	80044ac <HAL_TIM_PWM_PulseFinishedCallback>
 80045ec:	e7ab      	b.n	8004546 <HAL_TIM_IRQHandler+0x96>
}
 80045ee:	bd70      	pop	{r4, r5, r6, pc}

080045f0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045f0:	4a27      	ldr	r2, [pc, #156]	@ (8004690 <TIM_Base_SetConfig+0xa0>)
  tmpcr1 = TIMx->CR1;
 80045f2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045f4:	4290      	cmp	r0, r2
 80045f6:	d012      	beq.n	800461e <TIM_Base_SetConfig+0x2e>
 80045f8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80045fc:	d00f      	beq.n	800461e <TIM_Base_SetConfig+0x2e>
 80045fe:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8004602:	4290      	cmp	r0, r2
 8004604:	d00b      	beq.n	800461e <TIM_Base_SetConfig+0x2e>
 8004606:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800460a:	4290      	cmp	r0, r2
 800460c:	d007      	beq.n	800461e <TIM_Base_SetConfig+0x2e>
 800460e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004612:	4290      	cmp	r0, r2
 8004614:	d003      	beq.n	800461e <TIM_Base_SetConfig+0x2e>
 8004616:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800461a:	4290      	cmp	r0, r2
 800461c:	d108      	bne.n	8004630 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800461e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004622:	684a      	ldr	r2, [r1, #4]
 8004624:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004626:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800462a:	68ca      	ldr	r2, [r1, #12]
 800462c:	4313      	orrs	r3, r2
 800462e:	e00a      	b.n	8004646 <TIM_Base_SetConfig+0x56>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004630:	4a18      	ldr	r2, [pc, #96]	@ (8004694 <TIM_Base_SetConfig+0xa4>)
 8004632:	4290      	cmp	r0, r2
 8004634:	d0f7      	beq.n	8004626 <TIM_Base_SetConfig+0x36>
 8004636:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800463a:	4290      	cmp	r0, r2
 800463c:	d0f3      	beq.n	8004626 <TIM_Base_SetConfig+0x36>
 800463e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004642:	4290      	cmp	r0, r2
 8004644:	d0ef      	beq.n	8004626 <TIM_Base_SetConfig+0x36>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004646:	694a      	ldr	r2, [r1, #20]
 8004648:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800464c:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800464e:	688a      	ldr	r2, [r1, #8]
 8004650:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004652:	680a      	ldr	r2, [r1, #0]
 8004654:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004656:	4a0e      	ldr	r2, [pc, #56]	@ (8004690 <TIM_Base_SetConfig+0xa0>)
 8004658:	4290      	cmp	r0, r2
 800465a:	d00f      	beq.n	800467c <TIM_Base_SetConfig+0x8c>
 800465c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004660:	4290      	cmp	r0, r2
 8004662:	d00b      	beq.n	800467c <TIM_Base_SetConfig+0x8c>
 8004664:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8004668:	4290      	cmp	r0, r2
 800466a:	d007      	beq.n	800467c <TIM_Base_SetConfig+0x8c>
 800466c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004670:	4290      	cmp	r0, r2
 8004672:	d003      	beq.n	800467c <TIM_Base_SetConfig+0x8c>
 8004674:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004678:	4290      	cmp	r0, r2
 800467a:	d101      	bne.n	8004680 <TIM_Base_SetConfig+0x90>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800467c:	690a      	ldr	r2, [r1, #16]
 800467e:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004680:	6802      	ldr	r2, [r0, #0]
 8004682:	f042 0204 	orr.w	r2, r2, #4
 8004686:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004688:	2201      	movs	r2, #1
 800468a:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 800468c:	6003      	str	r3, [r0, #0]
}
 800468e:	4770      	bx	lr
 8004690:	40010000 	.word	0x40010000
 8004694:	40014000 	.word	0x40014000

08004698 <HAL_TIM_Base_Init>:
{
 8004698:	b510      	push	{r4, lr}
  if (htim == NULL)
 800469a:	4604      	mov	r4, r0
 800469c:	b350      	cbz	r0, 80046f4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800469e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80046a2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80046a6:	b91b      	cbnz	r3, 80046b0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80046a8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80046ac:	f7ff febd 	bl	800442a <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80046b0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046b2:	6820      	ldr	r0, [r4, #0]
 80046b4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80046b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ba:	f7ff ff99 	bl	80045f0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046be:	2301      	movs	r3, #1
  return HAL_OK;
 80046c0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046c2:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80046ca:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80046ce:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80046d2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80046d6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046de:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80046e2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80046e6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80046ea:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80046ee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80046f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80046f4:	2001      	movs	r0, #1
 80046f6:	e7fc      	b.n	80046f2 <HAL_TIM_Base_Init+0x5a>

080046f8 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80046f8:	4770      	bx	lr

080046fa <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80046fa:	4770      	bx	lr

080046fc <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80046fc:	4770      	bx	lr
	...

08004700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004700:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004702:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004704:	e852 3f00 	ldrex	r3, [r2]
 8004708:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8004710:	6802      	ldr	r2, [r0, #0]
 8004712:	2900      	cmp	r1, #0
 8004714:	d1f5      	bne.n	8004702 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004716:	4c0f      	ldr	r4, [pc, #60]	@ (8004754 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004718:	f102 0308 	add.w	r3, r2, #8
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	f102 0c08 	add.w	ip, r2, #8
 8004726:	e84c 3100 	strex	r1, r3, [ip]
 800472a:	2900      	cmp	r1, #0
 800472c:	d1f4      	bne.n	8004718 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800472e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8004730:	2b01      	cmp	r3, #1
 8004732:	d107      	bne.n	8004744 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004734:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004738:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473c:	e842 3100 	strex	r1, r3, [r2]
 8004740:	2900      	cmp	r1, #0
 8004742:	d1f7      	bne.n	8004734 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004744:	2320      	movs	r3, #32
 8004746:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474a:	2300      	movs	r3, #0
 800474c:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800474e:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8004750:	bd10      	pop	{r4, pc}
 8004752:	bf00      	nop
 8004754:	effffffe 	.word	0xeffffffe

08004758 <UART_SetConfig>:
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004758:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800475a:	69c3      	ldr	r3, [r0, #28]
 800475c:	6881      	ldr	r1, [r0, #8]
{
 800475e:	b530      	push	{r4, r5, lr}
 8004760:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004762:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004764:	6815      	ldr	r5, [r2, #0]
{
 8004766:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004768:	4301      	orrs	r1, r0
 800476a:	6960      	ldr	r0, [r4, #20]
 800476c:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800476e:	48a5      	ldr	r0, [pc, #660]	@ (8004a04 <UART_SetConfig+0x2ac>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004770:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004772:	4028      	ands	r0, r5
 8004774:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004776:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004778:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800477a:	6851      	ldr	r1, [r2, #4]
 800477c:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8004780:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004782:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004784:	6051      	str	r1, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004786:	49a0      	ldr	r1, [pc, #640]	@ (8004a08 <UART_SetConfig+0x2b0>)
 8004788:	428a      	cmp	r2, r1
    tmpreg |= huart->Init.OneBitSampling;
 800478a:	bf1c      	itt	ne
 800478c:	6a21      	ldrne	r1, [r4, #32]
 800478e:	4308      	orrne	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004790:	6891      	ldr	r1, [r2, #8]
 8004792:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 8004796:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800479a:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800479c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800479e:	6091      	str	r1, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047a0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80047a2:	f021 010f 	bic.w	r1, r1, #15
 80047a6:	4301      	orrs	r1, r0
 80047a8:	62d1      	str	r1, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047aa:	4998      	ldr	r1, [pc, #608]	@ (8004a0c <UART_SetConfig+0x2b4>)
 80047ac:	428a      	cmp	r2, r1
 80047ae:	d112      	bne.n	80047d6 <UART_SetConfig+0x7e>
 80047b0:	4a97      	ldr	r2, [pc, #604]	@ (8004a10 <UART_SetConfig+0x2b8>)
 80047b2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80047b4:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80047b8:	2a18      	cmp	r2, #24
 80047ba:	f000 8101 	beq.w	80049c0 <UART_SetConfig+0x268>
 80047be:	d83b      	bhi.n	8004838 <UART_SetConfig+0xe0>
 80047c0:	2a08      	cmp	r2, #8
 80047c2:	f000 80f5 	beq.w	80049b0 <UART_SetConfig+0x258>
 80047c6:	2a10      	cmp	r2, #16
 80047c8:	f000 813a 	beq.w	8004a40 <UART_SetConfig+0x2e8>
 80047cc:	2a00      	cmp	r2, #0
 80047ce:	f000 80e9 	beq.w	80049a4 <UART_SetConfig+0x24c>
        ret = HAL_ERROR;
 80047d2:	2001      	movs	r0, #1
 80047d4:	e06a      	b.n	80048ac <UART_SetConfig+0x154>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047d6:	498f      	ldr	r1, [pc, #572]	@ (8004a14 <UART_SetConfig+0x2bc>)
 80047d8:	428a      	cmp	r2, r1
 80047da:	d10d      	bne.n	80047f8 <UART_SetConfig+0xa0>
 80047dc:	4a8c      	ldr	r2, [pc, #560]	@ (8004a10 <UART_SetConfig+0x2b8>)
 80047de:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80047e0:	f002 0207 	and.w	r2, r2, #7
 80047e4:	2a05      	cmp	r2, #5
 80047e6:	d8f4      	bhi.n	80047d2 <UART_SetConfig+0x7a>
 80047e8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80047ec:	00e2007e 	.word	0x00e2007e
 80047f0:	00ea012a 	.word	0x00ea012a
 80047f4:	002b0107 	.word	0x002b0107
 80047f8:	4987      	ldr	r1, [pc, #540]	@ (8004a18 <UART_SetConfig+0x2c0>)
 80047fa:	428a      	cmp	r2, r1
 80047fc:	d0ee      	beq.n	80047dc <UART_SetConfig+0x84>
 80047fe:	4987      	ldr	r1, [pc, #540]	@ (8004a1c <UART_SetConfig+0x2c4>)
 8004800:	428a      	cmp	r2, r1
 8004802:	d0eb      	beq.n	80047dc <UART_SetConfig+0x84>
 8004804:	4986      	ldr	r1, [pc, #536]	@ (8004a20 <UART_SetConfig+0x2c8>)
 8004806:	428a      	cmp	r2, r1
 8004808:	d0e8      	beq.n	80047dc <UART_SetConfig+0x84>
 800480a:	4986      	ldr	r1, [pc, #536]	@ (8004a24 <UART_SetConfig+0x2cc>)
 800480c:	428a      	cmp	r2, r1
 800480e:	d0cf      	beq.n	80047b0 <UART_SetConfig+0x58>
 8004810:	4985      	ldr	r1, [pc, #532]	@ (8004a28 <UART_SetConfig+0x2d0>)
 8004812:	428a      	cmp	r2, r1
 8004814:	d0e2      	beq.n	80047dc <UART_SetConfig+0x84>
 8004816:	4985      	ldr	r1, [pc, #532]	@ (8004a2c <UART_SetConfig+0x2d4>)
 8004818:	428a      	cmp	r2, r1
 800481a:	d0df      	beq.n	80047dc <UART_SetConfig+0x84>
 800481c:	4b7a      	ldr	r3, [pc, #488]	@ (8004a08 <UART_SetConfig+0x2b0>)
 800481e:	429a      	cmp	r2, r3
 8004820:	d1d7      	bne.n	80047d2 <UART_SetConfig+0x7a>
 8004822:	4a7b      	ldr	r2, [pc, #492]	@ (8004a10 <UART_SetConfig+0x2b8>)
 8004824:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	2b05      	cmp	r3, #5
 800482c:	d8d1      	bhi.n	80047d2 <UART_SetConfig+0x7a>
 800482e:	e8df f003 	tbb	[pc, r3]
 8004832:	4538      	.short	0x4538
 8004834:	0f594f4a 	.word	0x0f594f4a
 8004838:	2a20      	cmp	r2, #32
 800483a:	f000 80de 	beq.w	80049fa <UART_SetConfig+0x2a2>
 800483e:	2a28      	cmp	r2, #40	@ 0x28
 8004840:	d1c7      	bne.n	80047d2 <UART_SetConfig+0x7a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004842:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004846:	f000 808a 	beq.w	800495e <UART_SetConfig+0x206>
 800484a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800484e:	e0c4      	b.n	80049da <UART_SetConfig+0x282>
        pclk = (uint32_t) LSE_VALUE;
 8004850:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004854:	4b76      	ldr	r3, [pc, #472]	@ (8004a30 <UART_SetConfig+0x2d8>)
 8004856:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004858:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800485a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800485e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004862:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004866:	4299      	cmp	r1, r3
 8004868:	d8b3      	bhi.n	80047d2 <UART_SetConfig+0x7a>
 800486a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800486e:	d8b0      	bhi.n	80047d2 <UART_SetConfig+0x7a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004870:	2300      	movs	r3, #0
 8004872:	4619      	mov	r1, r3
 8004874:	f7fb ff48 	bl	8000708 <__aeabi_uldivmod>
 8004878:	462a      	mov	r2, r5
 800487a:	0209      	lsls	r1, r1, #8
 800487c:	086b      	lsrs	r3, r5, #1
 800487e:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8004882:	0200      	lsls	r0, r0, #8
 8004884:	18c0      	adds	r0, r0, r3
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	f141 0100 	adc.w	r1, r1, #0
 800488e:	f7fb ff3b 	bl	8000708 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004892:	4b68      	ldr	r3, [pc, #416]	@ (8004a34 <UART_SetConfig+0x2dc>)
 8004894:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004898:	429a      	cmp	r2, r3
 800489a:	d89a      	bhi.n	80047d2 <UART_SetConfig+0x7a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	60d8      	str	r0, [r3, #12]
 80048a0:	e003      	b.n	80048aa <UART_SetConfig+0x152>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80048a2:	f7ff f957 	bl	8003b54 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 80048a6:	2800      	cmp	r0, #0
 80048a8:	d1d4      	bne.n	8004854 <UART_SetConfig+0xfc>
          pclk = (uint32_t) HSI_VALUE;
 80048aa:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 80048ac:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80048b0:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80048b2:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80048b4:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
 80048b8:	b007      	add	sp, #28
 80048ba:	bd30      	pop	{r4, r5, pc}
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048bc:	4668      	mov	r0, sp
 80048be:	f7ff f95b 	bl	8003b78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80048c2:	9801      	ldr	r0, [sp, #4]
        break;
 80048c4:	e7ef      	b.n	80048a6 <UART_SetConfig+0x14e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048c6:	a803      	add	r0, sp, #12
 80048c8:	f7ff fa00 	bl	8003ccc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80048cc:	9804      	ldr	r0, [sp, #16]
        break;
 80048ce:	e7ea      	b.n	80048a6 <UART_SetConfig+0x14e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048d0:	6813      	ldr	r3, [r2, #0]
 80048d2:	4859      	ldr	r0, [pc, #356]	@ (8004a38 <UART_SetConfig+0x2e0>)
 80048d4:	f013 0f20 	tst.w	r3, #32
 80048d8:	d0bc      	beq.n	8004854 <UART_SetConfig+0xfc>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80048da:	6813      	ldr	r3, [r2, #0]
 80048dc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80048e0:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80048e2:	e7b7      	b.n	8004854 <UART_SetConfig+0xfc>
        pclk = (uint32_t) CSI_VALUE;
 80048e4:	4855      	ldr	r0, [pc, #340]	@ (8004a3c <UART_SetConfig+0x2e4>)
 80048e6:	e7b5      	b.n	8004854 <UART_SetConfig+0xfc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048ec:	d155      	bne.n	800499a <UART_SetConfig+0x242>
 80048ee:	2300      	movs	r3, #0
    switch (clocksource)
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	f63f af6e 	bhi.w	80047d2 <UART_SetConfig+0x7a>
 80048f6:	a201      	add	r2, pc, #4	@ (adr r2, 80048fc <UART_SetConfig+0x1a4>)
 80048f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fc:	08004929 	.word	0x08004929
 8004900:	08004935 	.word	0x08004935
 8004904:	080047d3 	.word	0x080047d3
 8004908:	080047d3 	.word	0x080047d3
 800490c:	0800493b 	.word	0x0800493b
 8004910:	080047d3 	.word	0x080047d3
 8004914:	080047d3 	.word	0x080047d3
 8004918:	080047d3 	.word	0x080047d3
 800491c:	08004945 	.word	0x08004945
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004920:	2304      	movs	r3, #4
 8004922:	e7e5      	b.n	80048f0 <UART_SetConfig+0x198>
 8004924:	2308      	movs	r3, #8
 8004926:	e7e3      	b.n	80048f0 <UART_SetConfig+0x198>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004928:	f7fe faf4 	bl	8002f14 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetPCLK2Freq();
 800492c:	4603      	mov	r3, r0
    if (pclk != 0U)
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0bb      	beq.n	80048aa <UART_SetConfig+0x152>
 8004932:	e014      	b.n	800495e <UART_SetConfig+0x206>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004934:	f7fe fb00 	bl	8002f38 <HAL_RCC_GetPCLK2Freq>
 8004938:	e7f8      	b.n	800492c <UART_SetConfig+0x1d4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800493a:	4668      	mov	r0, sp
 800493c:	f7ff f91c 	bl	8003b78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004940:	9b01      	ldr	r3, [sp, #4]
        break;
 8004942:	e7f4      	b.n	800492e <UART_SetConfig+0x1d6>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004944:	a803      	add	r0, sp, #12
 8004946:	f7ff f9c1 	bl	8003ccc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800494a:	9b04      	ldr	r3, [sp, #16]
        break;
 800494c:	e7ef      	b.n	800492e <UART_SetConfig+0x1d6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800494e:	f013 0f20 	tst.w	r3, #32
 8004952:	4b39      	ldr	r3, [pc, #228]	@ (8004a38 <UART_SetConfig+0x2e0>)
 8004954:	d003      	beq.n	800495e <UART_SetConfig+0x206>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800495c:	40d3      	lsrs	r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800495e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004960:	4a33      	ldr	r2, [pc, #204]	@ (8004a30 <UART_SetConfig+0x2d8>)
 8004962:	6861      	ldr	r1, [r4, #4]
 8004964:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8004968:	fbb3 f3f2 	udiv	r3, r3, r2
 800496c:	084a      	lsrs	r2, r1, #1
 800496e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004972:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004976:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800497a:	f1a3 0110 	sub.w	r1, r3, #16
 800497e:	4291      	cmp	r1, r2
 8004980:	f63f af27 	bhi.w	80047d2 <UART_SetConfig+0x7a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004984:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004988:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800498c:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800498e:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8004990:	4313      	orrs	r3, r2
 8004992:	60cb      	str	r3, [r1, #12]
 8004994:	e789      	b.n	80048aa <UART_SetConfig+0x152>
        pclk = (uint32_t) CSI_VALUE;
 8004996:	4b29      	ldr	r3, [pc, #164]	@ (8004a3c <UART_SetConfig+0x2e4>)
 8004998:	e7e1      	b.n	800495e <UART_SetConfig+0x206>
        pclk = HAL_RCC_GetPCLK1Freq();
 800499a:	f7fe fabb 	bl	8002f14 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800499e:	2800      	cmp	r0, #0
 80049a0:	d083      	beq.n	80048aa <UART_SetConfig+0x152>
 80049a2:	e01a      	b.n	80049da <UART_SetConfig+0x282>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049a8:	d0c4      	beq.n	8004934 <UART_SetConfig+0x1dc>
        pclk = HAL_RCC_GetPCLK2Freq();
 80049aa:	f7fe fac5 	bl	8002f38 <HAL_RCC_GetPCLK2Freq>
        break;
 80049ae:	e7f6      	b.n	800499e <UART_SetConfig+0x246>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049b4:	d0b4      	beq.n	8004920 <UART_SetConfig+0x1c8>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049b6:	4668      	mov	r0, sp
 80049b8:	f7ff f8de 	bl	8003b78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80049bc:	9801      	ldr	r0, [sp, #4]
        break;
 80049be:	e7ee      	b.n	800499e <UART_SetConfig+0x246>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049c4:	4a12      	ldr	r2, [pc, #72]	@ (8004a10 <UART_SetConfig+0x2b8>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049c6:	6813      	ldr	r3, [r2, #0]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049c8:	d0c1      	beq.n	800494e <UART_SetConfig+0x1f6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049ca:	f013 0f20 	tst.w	r3, #32
 80049ce:	481a      	ldr	r0, [pc, #104]	@ (8004a38 <UART_SetConfig+0x2e0>)
 80049d0:	d003      	beq.n	80049da <UART_SetConfig+0x282>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80049d2:	6813      	ldr	r3, [r2, #0]
 80049d4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80049d8:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049da:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80049dc:	4a14      	ldr	r2, [pc, #80]	@ (8004a30 <UART_SetConfig+0x2d8>)
 80049de:	6863      	ldr	r3, [r4, #4]
 80049e0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80049e4:	fbb0 f0f2 	udiv	r0, r0, r2
 80049e8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80049ec:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f0:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 80049f4:	f1a0 0210 	sub.w	r2, r0, #16
 80049f8:	e74e      	b.n	8004898 <UART_SetConfig+0x140>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049fe:	d0ca      	beq.n	8004996 <UART_SetConfig+0x23e>
        pclk = (uint32_t) CSI_VALUE;
 8004a00:	480e      	ldr	r0, [pc, #56]	@ (8004a3c <UART_SetConfig+0x2e4>)
 8004a02:	e7ea      	b.n	80049da <UART_SetConfig+0x282>
 8004a04:	cfff69f3 	.word	0xcfff69f3
 8004a08:	58000c00 	.word	0x58000c00
 8004a0c:	40011000 	.word	0x40011000
 8004a10:	58024400 	.word	0x58024400
 8004a14:	40004400 	.word	0x40004400
 8004a18:	40004800 	.word	0x40004800
 8004a1c:	40004c00 	.word	0x40004c00
 8004a20:	40005000 	.word	0x40005000
 8004a24:	40011400 	.word	0x40011400
 8004a28:	40007800 	.word	0x40007800
 8004a2c:	40007c00 	.word	0x40007c00
 8004a30:	0800d21c 	.word	0x0800d21c
 8004a34:	000ffcff 	.word	0x000ffcff
 8004a38:	03d09000 	.word	0x03d09000
 8004a3c:	003d0900 	.word	0x003d0900
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a44:	f43f af6e 	beq.w	8004924 <UART_SetConfig+0x1cc>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a48:	a803      	add	r0, sp, #12
 8004a4a:	f7ff f93f 	bl	8003ccc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a4e:	9804      	ldr	r0, [sp, #16]
        break;
 8004a50:	e7a5      	b.n	800499e <UART_SetConfig+0x246>
 8004a52:	bf00      	nop

08004a54 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a54:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004a56:	071a      	lsls	r2, r3, #28
{
 8004a58:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a5a:	d506      	bpl.n	8004a6a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a5c:	6801      	ldr	r1, [r0, #0]
 8004a5e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8004a60:	684a      	ldr	r2, [r1, #4]
 8004a62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a66:	4322      	orrs	r2, r4
 8004a68:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a6a:	07dc      	lsls	r4, r3, #31
 8004a6c:	d506      	bpl.n	8004a7c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a6e:	6801      	ldr	r1, [r0, #0]
 8004a70:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8004a72:	684a      	ldr	r2, [r1, #4]
 8004a74:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004a78:	4322      	orrs	r2, r4
 8004a7a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a7c:	0799      	lsls	r1, r3, #30
 8004a7e:	d506      	bpl.n	8004a8e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a80:	6801      	ldr	r1, [r0, #0]
 8004a82:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8004a84:	684a      	ldr	r2, [r1, #4]
 8004a86:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004a8a:	4322      	orrs	r2, r4
 8004a8c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a8e:	075a      	lsls	r2, r3, #29
 8004a90:	d506      	bpl.n	8004aa0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a92:	6801      	ldr	r1, [r0, #0]
 8004a94:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8004a96:	684a      	ldr	r2, [r1, #4]
 8004a98:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a9c:	4322      	orrs	r2, r4
 8004a9e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004aa0:	06dc      	lsls	r4, r3, #27
 8004aa2:	d506      	bpl.n	8004ab2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004aa4:	6801      	ldr	r1, [r0, #0]
 8004aa6:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8004aa8:	688a      	ldr	r2, [r1, #8]
 8004aaa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004aae:	4322      	orrs	r2, r4
 8004ab0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ab2:	0699      	lsls	r1, r3, #26
 8004ab4:	d506      	bpl.n	8004ac4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ab6:	6801      	ldr	r1, [r0, #0]
 8004ab8:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8004aba:	688a      	ldr	r2, [r1, #8]
 8004abc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ac0:	4322      	orrs	r2, r4
 8004ac2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ac4:	065a      	lsls	r2, r3, #25
 8004ac6:	d510      	bpl.n	8004aea <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ac8:	6801      	ldr	r1, [r0, #0]
 8004aca:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004acc:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ace:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ad2:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8004ad6:	ea42 0204 	orr.w	r2, r2, r4
 8004ada:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004adc:	d105      	bne.n	8004aea <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ade:	684a      	ldr	r2, [r1, #4]
 8004ae0:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8004ae2:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8004ae6:	4322      	orrs	r2, r4
 8004ae8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aea:	061b      	lsls	r3, r3, #24
 8004aec:	d506      	bpl.n	8004afc <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aee:	6802      	ldr	r2, [r0, #0]
 8004af0:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8004af2:	6853      	ldr	r3, [r2, #4]
 8004af4:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6053      	str	r3, [r2, #4]
}
 8004afc:	bd10      	pop	{r4, pc}

08004afe <UART_WaitOnFlagUntilTimeout>:
{
 8004afe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b02:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b06:	4604      	mov	r4, r0
 8004b08:	460d      	mov	r5, r1
 8004b0a:	4617      	mov	r7, r2
 8004b0c:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b0e:	6822      	ldr	r2, [r4, #0]
 8004b10:	69d3      	ldr	r3, [r2, #28]
 8004b12:	ea35 0303 	bics.w	r3, r5, r3
 8004b16:	bf0c      	ite	eq
 8004b18:	2301      	moveq	r3, #1
 8004b1a:	2300      	movne	r3, #0
 8004b1c:	42bb      	cmp	r3, r7
 8004b1e:	d001      	beq.n	8004b24 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8004b20:	2000      	movs	r0, #0
 8004b22:	e022      	b.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8004b24:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004b28:	d0f2      	beq.n	8004b10 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2a:	f7fc fc9d 	bl	8001468 <HAL_GetTick>
 8004b2e:	eba0 0008 	sub.w	r0, r0, r8
 8004b32:	4548      	cmp	r0, r9
 8004b34:	d829      	bhi.n	8004b8a <UART_WaitOnFlagUntilTimeout+0x8c>
 8004b36:	f1b9 0f00 	cmp.w	r9, #0
 8004b3a:	d026      	beq.n	8004b8a <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b3c:	6821      	ldr	r1, [r4, #0]
 8004b3e:	680b      	ldr	r3, [r1, #0]
 8004b40:	075a      	lsls	r2, r3, #29
 8004b42:	d5e4      	bpl.n	8004b0e <UART_WaitOnFlagUntilTimeout+0x10>
 8004b44:	2d80      	cmp	r5, #128	@ 0x80
 8004b46:	d0e2      	beq.n	8004b0e <UART_WaitOnFlagUntilTimeout+0x10>
 8004b48:	2d40      	cmp	r5, #64	@ 0x40
 8004b4a:	d0e0      	beq.n	8004b0e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b4c:	69ce      	ldr	r6, [r1, #28]
 8004b4e:	f016 0608 	ands.w	r6, r6, #8
 8004b52:	d00c      	beq.n	8004b6e <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b54:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8004b56:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b58:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8004b5a:	f7ff fdd1 	bl	8004700 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8004b5e:	2300      	movs	r3, #0
          return HAL_ERROR;
 8004b60:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b62:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8004b66:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8004b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b6e:	69cb      	ldr	r3, [r1, #28]
 8004b70:	051b      	lsls	r3, r3, #20
 8004b72:	d5cc      	bpl.n	8004b0e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 8004b78:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b7a:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8004b7c:	f7ff fdc0 	bl	8004700 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b80:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 8004b82:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b86:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
 8004b8a:	2003      	movs	r0, #3
 8004b8c:	e7ed      	b.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x6c>

08004b8e <HAL_UART_Transmit>:
{
 8004b8e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004b92:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004b94:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8004b98:	4604      	mov	r4, r0
 8004b9a:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8004b9c:	2b20      	cmp	r3, #32
{
 8004b9e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004ba0:	d146      	bne.n	8004c30 <HAL_UART_Transmit+0xa2>
    if ((pData == NULL) || (Size == 0U))
 8004ba2:	2900      	cmp	r1, #0
 8004ba4:	d046      	beq.n	8004c34 <HAL_UART_Transmit+0xa6>
 8004ba6:	2a00      	cmp	r2, #0
 8004ba8:	d044      	beq.n	8004c34 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004baa:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bac:	2500      	movs	r5, #0
 8004bae:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bb2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 8004bb6:	f7fc fc57 	bl	8001468 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bba:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8004bbc:	4681      	mov	r9, r0
    huart->TxXferSize  = Size;
 8004bbe:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8004bc6:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bca:	d103      	bne.n	8004bd4 <HAL_UART_Transmit+0x46>
 8004bcc:	6923      	ldr	r3, [r4, #16]
 8004bce:	b90b      	cbnz	r3, 8004bd4 <HAL_UART_Transmit+0x46>
      pdata16bits = (const uint16_t *) pData;
 8004bd0:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8004bd2:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8004bd4:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bd8:	464b      	mov	r3, r9
 8004bda:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8004bde:	b292      	uxth	r2, r2
 8004be0:	b942      	cbnz	r2, 8004bf4 <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004be2:	2140      	movs	r1, #64	@ 0x40
 8004be4:	4620      	mov	r0, r4
 8004be6:	f7ff ff8a 	bl	8004afe <UART_WaitOnFlagUntilTimeout>
 8004bea:	2320      	movs	r3, #32
 8004bec:	b948      	cbnz	r0, 8004c02 <HAL_UART_Transmit+0x74>
    huart->gState = HAL_UART_STATE_READY;
 8004bee:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 8004bf2:	e009      	b.n	8004c08 <HAL_UART_Transmit+0x7a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2180      	movs	r1, #128	@ 0x80
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f7ff ff80 	bl	8004afe <UART_WaitOnFlagUntilTimeout>
 8004bfe:	b130      	cbz	r0, 8004c0e <HAL_UART_Transmit+0x80>
        huart->gState = HAL_UART_STATE_READY;
 8004c00:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8004c02:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8004c04:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 8004c08:	b003      	add	sp, #12
 8004c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c0e:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8004c10:	b95e      	cbnz	r6, 8004c2a <HAL_UART_Transmit+0x9c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c12:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c1a:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8004c1c:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 8004c20:	3a01      	subs	r2, #1
 8004c22:	b292      	uxth	r2, r2
 8004c24:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
 8004c28:	e7d4      	b.n	8004bd4 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c2a:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004c2e:	e7f4      	b.n	8004c1a <HAL_UART_Transmit+0x8c>
    return HAL_BUSY;
 8004c30:	2002      	movs	r0, #2
 8004c32:	e7e9      	b.n	8004c08 <HAL_UART_Transmit+0x7a>
      return  HAL_ERROR;
 8004c34:	2001      	movs	r0, #1
 8004c36:	e7e7      	b.n	8004c08 <HAL_UART_Transmit+0x7a>

08004c38 <UART_CheckIdleState>:
{
 8004c38:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c3a:	2600      	movs	r6, #0
{
 8004c3c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c3e:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8004c42:	f7fc fc11 	bl	8001468 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c46:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004c48:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	071a      	lsls	r2, r3, #28
 8004c4e:	d51c      	bpl.n	8004c8a <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c54:	4632      	mov	r2, r6
 8004c56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f7ff ff4d 	bl	8004afe <UART_WaitOnFlagUntilTimeout>
 8004c64:	b188      	cbz	r0, 8004c8a <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004c66:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c68:	e852 3f00 	ldrex	r3, [r2]
 8004c6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	e842 3100 	strex	r1, r3, [r2]
 8004c74:	2900      	cmp	r1, #0
 8004c76:	d1f6      	bne.n	8004c66 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 8004c78:	2320      	movs	r3, #32
 8004c7a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8004c7e:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8004c80:	2300      	movs	r3, #0
 8004c82:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8004c86:	b002      	add	sp, #8
 8004c88:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	075b      	lsls	r3, r3, #29
 8004c90:	d524      	bpl.n	8004cdc <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c96:	2200      	movs	r2, #0
 8004c98:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	462b      	mov	r3, r5
 8004ca2:	f7ff ff2c 	bl	8004afe <UART_WaitOnFlagUntilTimeout>
 8004ca6:	b1c8      	cbz	r0, 8004cdc <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ca8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	e852 3f00 	ldrex	r3, [r2]
 8004cae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8004cb6:	6822      	ldr	r2, [r4, #0]
 8004cb8:	2900      	cmp	r1, #0
 8004cba:	d1f5      	bne.n	8004ca8 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	f102 0308 	add.w	r3, r2, #8
 8004cc0:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	f102 0008 	add.w	r0, r2, #8
 8004ccc:	e840 3100 	strex	r1, r3, [r0]
 8004cd0:	2900      	cmp	r1, #0
 8004cd2:	d1f3      	bne.n	8004cbc <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 8004cd4:	2320      	movs	r3, #32
 8004cd6:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8004cda:	e7d0      	b.n	8004c7e <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
 8004cdc:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cde:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004ce0:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ce4:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce8:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cea:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 8004cec:	e7c8      	b.n	8004c80 <UART_CheckIdleState+0x48>

08004cee <HAL_UART_Init>:
{
 8004cee:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	b350      	cbz	r0, 8004d4a <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf4:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8004cf8:	b91b      	cbnz	r3, 8004d02 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8004cfa:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8004cfe:	f7fc fb03 	bl	8001308 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004d02:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8004d04:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004d06:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8004d0a:	6813      	ldr	r3, [r2, #0]
 8004d0c:	f023 0301 	bic.w	r3, r3, #1
 8004d10:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d12:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004d14:	b113      	cbz	r3, 8004d1c <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 8004d16:	4620      	mov	r0, r4
 8004d18:	f7ff fe9c 	bl	8004a54 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f7ff fd1b 	bl	8004758 <UART_SetConfig>
 8004d22:	2801      	cmp	r0, #1
 8004d24:	d011      	beq.n	8004d4a <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d26:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8004d28:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d38:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	f042 0201 	orr.w	r2, r2, #1
}
 8004d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8004d44:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004d46:	f7ff bf77 	b.w	8004c38 <UART_CheckIdleState>
}
 8004d4a:	2001      	movs	r0, #1
 8004d4c:	bd10      	pop	{r4, pc}
	...

08004d50 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d50:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 8004d52:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d54:	b92b      	cbnz	r3, 8004d62 <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 8004d56:	2301      	movs	r3, #1
 8004d58:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004d5c:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d60:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d62:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d64:	4d09      	ldr	r5, [pc, #36]	@ (8004d8c <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d66:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d68:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d6a:	4c09      	ldr	r4, [pc, #36]	@ (8004d90 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d6c:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d70:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d72:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d74:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d7c:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d80:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d82:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004d8a:	e7e7      	b.n	8004d5c <UARTEx_SetNbDataToProcess+0xc>
 8004d8c:	0800d23c 	.word	0x0800d23c
 8004d90:	0800d234 	.word	0x0800d234

08004d94 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8004d94:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d014      	beq.n	8004dc6 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d9c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004d9e:	2324      	movs	r3, #36	@ 0x24
 8004da0:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004da4:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004da6:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004da8:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8004dac:	f023 0301 	bic.w	r3, r3, #1
 8004db0:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004db2:	2300      	movs	r3, #0
 8004db4:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004db6:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004db8:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8004dba:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 8004dbe:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  return HAL_OK;
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	4770      	bx	lr
  __HAL_LOCK(huart);
 8004dc6:	2002      	movs	r0, #2
}
 8004dc8:	4770      	bx	lr

08004dca <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004dca:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8004dcc:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 8004dd0:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d017      	beq.n	8004e06 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dd6:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004dd8:	2324      	movs	r3, #36	@ 0x24
 8004dda:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dde:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	f023 0301 	bic.w	r3, r3, #1
 8004de6:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004de8:	68ab      	ldr	r3, [r5, #8]
 8004dea:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8004dee:	4319      	orrs	r1, r3
 8004df0:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004df2:	f7ff ffad 	bl	8004d50 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8004df6:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004df8:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004dfa:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8004dfe:	2000      	movs	r0, #0
 8004e00:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8004e04:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8004e06:	2002      	movs	r0, #2
 8004e08:	e7fc      	b.n	8004e04 <HAL_UARTEx_SetTxFifoThreshold+0x3a>

08004e0a <HAL_UARTEx_SetRxFifoThreshold>:
{
 8004e0a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8004e0c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 8004e10:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d017      	beq.n	8004e46 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e16:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004e18:	2324      	movs	r3, #36	@ 0x24
 8004e1a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e1e:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8004e20:	682b      	ldr	r3, [r5, #0]
 8004e22:	f023 0301 	bic.w	r3, r3, #1
 8004e26:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e28:	68ab      	ldr	r3, [r5, #8]
 8004e2a:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8004e2e:	4319      	orrs	r1, r3
 8004e30:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004e32:	f7ff ff8d 	bl	8004d50 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8004e36:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e38:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004e3a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8004e3e:	2000      	movs	r0, #0
 8004e40:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8004e44:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8004e46:	2002      	movs	r0, #2
 8004e48:	e7fc      	b.n	8004e44 <HAL_UARTEx_SetRxFifoThreshold+0x3a>

08004e4a <elog_port_init>:
    ElogErrCode result = ELOG_NO_ERR;

    /* add your code here */
    
    return result;
}
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	4770      	bx	lr

08004e4e <elog_port_output>:
 * output log port interface
 *
 * @param log output of log
 * @param size log size
 */
void elog_port_output(const char *log, size_t size) {
 8004e4e:	460a      	mov	r2, r1
    
    /* add your code here */
    SEGGER_RTT_Write(0, log, size);
 8004e50:	4601      	mov	r1, r0
 8004e52:	2000      	movs	r0, #0
 8004e54:	f002 ba46 	b.w	80072e4 <SEGGER_RTT_Write>

08004e58 <elog_port_output_lock>:
  __ASM volatile ("cpsid i" : : : "memory");
 8004e58:	b672      	cpsid	i
 */
void elog_port_output_lock(void) {
    
    /* add your code here */
    __disable_irq();
}
 8004e5a:	4770      	bx	lr

08004e5c <elog_port_output_unlock>:
  __ASM volatile ("cpsie i" : : : "memory");
 8004e5c:	b662      	cpsie	i
 */
void elog_port_output_unlock(void) {
    
    /* add your code here */
    __enable_irq();
}
 8004e5e:	4770      	bx	lr

08004e60 <elog_port_get_time>:
/**
 * get current time interface
 *
 * @return current time
 */
const char *elog_port_get_time(void) {
 8004e60:	b510      	push	{r4, lr}
  RTC_DateTypeDef date_struct;
  RTC_TimeTypeDef time_struct;
  /* add your code here */
  HAL_RTC_GetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8004e62:	4c0d      	ldr	r4, [pc, #52]	@ (8004e98 <elog_port_get_time+0x38>)
const char *elog_port_get_time(void) {
 8004e64:	b088      	sub	sp, #32
  HAL_RTC_GetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8004e66:	2200      	movs	r2, #0
 8004e68:	a903      	add	r1, sp, #12
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	f7ff fa9d 	bl	80043aa <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 8004e70:	a902      	add	r1, sp, #8
 8004e72:	2200      	movs	r2, #0
 8004e74:	4620      	mov	r0, r4
 8004e76:	f7ff fabb 	bl	80043f0 <HAL_RTC_GetDate>
  
  sprintf (time_str, "%02d:%02d:%02d", time_struct.Hours, time_struct.Minutes, time_struct.Seconds);
 8004e7a:	4c08      	ldr	r4, [pc, #32]	@ (8004e9c <elog_port_get_time+0x3c>)
 8004e7c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004e80:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8004e84:	4620      	mov	r0, r4
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	4905      	ldr	r1, [pc, #20]	@ (8004ea0 <elog_port_get_time+0x40>)
 8004e8a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8004e8e:	f004 f8b1 	bl	8008ff4 <siprintf>
  
  return time_str;
}
 8004e92:	4620      	mov	r0, r4
 8004e94:	b008      	add	sp, #32
 8004e96:	bd10      	pop	{r4, pc}
 8004e98:	240179e8 	.word	0x240179e8
 8004e9c:	24017af4 	.word	0x24017af4
 8004ea0:	0800cdc7 	.word	0x0800cdc7

08004ea4 <elog_port_get_p_info>:
 */
const char *elog_port_get_p_info(void) {
    
    /* add your code here */
    return "";
}
 8004ea4:	4800      	ldr	r0, [pc, #0]	@ (8004ea8 <elog_port_get_p_info+0x4>)
 8004ea6:	4770      	bx	lr
 8004ea8:	0800cf6e 	.word	0x0800cf6e

08004eac <elog_port_get_t_info>:
/**
 * get current thread name interface
 *
 * @return current thread name
 */
const char *elog_port_get_t_info(void) {
 8004eac:	4800      	ldr	r0, [pc, #0]	@ (8004eb0 <elog_port_get_t_info+0x4>)
 8004eae:	4770      	bx	lr
 8004eb0:	0800cf6e 	.word	0x0800cf6e

08004eb4 <elog_output_lock>:
}

/**
 * lock output 
 */
void elog_output_lock(void) {
 8004eb4:	b538      	push	{r3, r4, r5, lr}
    if (elog.output_lock_enabled) {
 8004eb6:	4c06      	ldr	r4, [pc, #24]	@ (8004ed0 <elog_output_lock+0x1c>)
 8004eb8:	2501      	movs	r5, #1
 8004eba:	f894 30f2 	ldrb.w	r3, [r4, #242]	@ 0xf2
 8004ebe:	b123      	cbz	r3, 8004eca <elog_output_lock+0x16>
        elog_port_output_lock();
 8004ec0:	f7ff ffca 	bl	8004e58 <elog_port_output_lock>
        elog.output_is_locked_before_disable = true;
 8004ec4:	f884 50f4 	strb.w	r5, [r4, #244]	@ 0xf4
    } else {
        elog.output_is_locked_before_enable = true;
    }
}
 8004ec8:	bd38      	pop	{r3, r4, r5, pc}
        elog.output_is_locked_before_enable = true;
 8004eca:	f884 50f3 	strb.w	r5, [r4, #243]	@ 0xf3
}
 8004ece:	e7fb      	b.n	8004ec8 <elog_output_lock+0x14>
 8004ed0:	24017f0c 	.word	0x24017f0c

08004ed4 <elog_output_unlock>:

/**
 * unlock output
 */
void elog_output_unlock(void) {
 8004ed4:	b510      	push	{r4, lr}
    if (elog.output_lock_enabled) {
 8004ed6:	4c06      	ldr	r4, [pc, #24]	@ (8004ef0 <elog_output_unlock+0x1c>)
 8004ed8:	f894 30f2 	ldrb.w	r3, [r4, #242]	@ 0xf2
 8004edc:	b12b      	cbz	r3, 8004eea <elog_output_unlock+0x16>
        elog_port_output_unlock();
 8004ede:	f7ff ffbd 	bl	8004e5c <elog_port_output_unlock>
        elog.output_is_locked_before_disable = false;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	f884 30f4 	strb.w	r3, [r4, #244]	@ 0xf4
    } else {
        elog.output_is_locked_before_enable = false;
    }
}
 8004ee8:	bd10      	pop	{r4, pc}
        elog.output_is_locked_before_enable = false;
 8004eea:	f884 30f3 	strb.w	r3, [r4, #243]	@ 0xf3
}
 8004eee:	e7fb      	b.n	8004ee8 <elog_output_unlock+0x14>
 8004ef0:	24017f0c 	.word	0x24017f0c

08004ef4 <elog_output>:
 * @param format output format
 * @param ... args
 *
 */
void elog_output(uint8_t level, const char *tag, const char *file, const char *func,
        const long line, const char *format, ...) {
 8004ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef8:	4606      	mov	r6, r0
 8004efa:	b08f      	sub	sp, #60	@ 0x3c
    extern const char *elog_port_get_time(void);
    extern const char *elog_port_get_p_info(void);
    extern const char *elog_port_get_t_info(void);

    size_t tag_len = strlen(tag), log_len = 0, newline_len = strlen(ELOG_NEWLINE_SIGN);
 8004efc:	4608      	mov	r0, r1
        const long line, const char *format, ...) {
 8004efe:	4689      	mov	r9, r1
 8004f00:	4692      	mov	sl, r2
 8004f02:	461f      	mov	r7, r3
    size_t tag_len = strlen(tag), log_len = 0, newline_len = strlen(ELOG_NEWLINE_SIGN);
 8004f04:	f7fb fa3c 	bl	8000380 <strlen>
    char line_num[ELOG_LINE_NUM_MAX_LEN + 1] = { 0 };
 8004f08:	2100      	movs	r1, #0
    size_t tag_len = strlen(tag), log_len = 0, newline_len = strlen(ELOG_NEWLINE_SIGN);
 8004f0a:	4683      	mov	fp, r0
    char tag_sapce[ELOG_FILTER_TAG_MAX_LEN / 2 + 1] = { 0 };
 8004f0c:	2210      	movs	r2, #16
 8004f0e:	a80a      	add	r0, sp, #40	@ 0x28
    char line_num[ELOG_LINE_NUM_MAX_LEN + 1] = { 0 };
 8004f10:	9108      	str	r1, [sp, #32]
 8004f12:	f8ad 1024 	strh.w	r1, [sp, #36]	@ 0x24
    char tag_sapce[ELOG_FILTER_TAG_MAX_LEN / 2 + 1] = { 0 };
 8004f16:	f004 f929 	bl	800916c <memset>
    va_list args;
    int fmt_result;

    ELOG_ASSERT(level <= ELOG_LVL_VERBOSE);
 8004f1a:	2e05      	cmp	r6, #5
 8004f1c:	d917      	bls.n	8004f4e <elog_output+0x5a>
 8004f1e:	4bbf      	ldr	r3, [pc, #764]	@ (800521c <elog_output+0x328>)
 8004f20:	681c      	ldr	r4, [r3, #0]
 8004f22:	b97c      	cbnz	r4, 8004f44 <elog_output+0x50>
 8004f24:	49be      	ldr	r1, [pc, #760]	@ (8005220 <elog_output+0x32c>)
 8004f26:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8004f2a:	4bbe      	ldr	r3, [pc, #760]	@ (8005224 <elog_output+0x330>)
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	9102      	str	r1, [sp, #8]
 8004f30:	49bd      	ldr	r1, [pc, #756]	@ (8005228 <elog_output+0x334>)
 8004f32:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004f36:	e9cd 2100 	strd	r2, r1, [sp]
 8004f3a:	4abc      	ldr	r2, [pc, #752]	@ (800522c <elog_output+0x338>)
 8004f3c:	49bc      	ldr	r1, [pc, #752]	@ (8005230 <elog_output+0x33c>)
 8004f3e:	f7ff ffd9 	bl	8004ef4 <elog_output>
 8004f42:	e7fe      	b.n	8004f42 <elog_output+0x4e>
 8004f44:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8004f48:	49b6      	ldr	r1, [pc, #728]	@ (8005224 <elog_output+0x330>)
 8004f4a:	48b5      	ldr	r0, [pc, #724]	@ (8005220 <elog_output+0x32c>)
 8004f4c:	47a0      	blx	r4

    /* check output enabled */
    if (!elog.output_enabled) {
 8004f4e:	f8df 831c 	ldr.w	r8, [pc, #796]	@ 800526c <elog_output+0x378>
 8004f52:	f898 30f1 	ldrb.w	r3, [r8, #241]	@ 0xf1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 8114 	beq.w	8005184 <elog_output+0x290>
        return;
    }
    /* level filter */
    if (level > elog.filter.level || level > elog_get_filter_tag_lvl(tag)) {
 8004f5c:	f898 3000 	ldrb.w	r3, [r8]
 8004f60:	42b3      	cmp	r3, r6
 8004f62:	f0c0 810f 	bcc.w	8005184 <elog_output+0x290>
 8004f66:	4648      	mov	r0, r9
 8004f68:	f000 f9a6 	bl	80052b8 <elog_get_filter_tag_lvl>
 8004f6c:	42b0      	cmp	r0, r6
 8004f6e:	f0c0 8109 	bcc.w	8005184 <elog_output+0x290>
        return;
    } else if (!strstr(tag, elog.filter.tag)) { /* tag filter */
 8004f72:	f108 0101 	add.w	r1, r8, #1
 8004f76:	4648      	mov	r0, r9
 8004f78:	f004 f912 	bl	80091a0 <strstr>
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	f000 8101 	beq.w	8005184 <elog_output+0x290>
        return;
    }
    /* args point to the first variable parameter */
    va_start(args, format);
 8004f82:	ab1a      	add	r3, sp, #104	@ 0x68
 8004f84:	4dab      	ldr	r5, [pc, #684]	@ (8005234 <elog_output+0x340>)
 8004f86:	9307      	str	r3, [sp, #28]
    /* lock output */
    elog_output_lock();
 8004f88:	f7ff ff94 	bl	8004eb4 <elog_output_lock>

#ifdef ELOG_COLOR_ENABLE
    /* add CSI start sign and color info */
    if (elog.text_color_enabled) {
 8004f8c:	f898 40f5 	ldrb.w	r4, [r8, #245]	@ 0xf5
 8004f90:	b164      	cbz	r4, 8004fac <elog_output+0xb8>
        log_len += elog_strcpy(log_len, log_buf + log_len, CSI_START);
 8004f92:	4aa9      	ldr	r2, [pc, #676]	@ (8005238 <elog_output+0x344>)
 8004f94:	4629      	mov	r1, r5
 8004f96:	2000      	movs	r0, #0
 8004f98:	f000 fa6e 	bl	8005478 <elog_strcpy>
        log_len += elog_strcpy(log_len, log_buf + log_len, color_output_info[level]);
 8004f9c:	4ba7      	ldr	r3, [pc, #668]	@ (800523c <elog_output+0x348>)
        log_len += elog_strcpy(log_len, log_buf + log_len, CSI_START);
 8004f9e:	4604      	mov	r4, r0
        log_len += elog_strcpy(log_len, log_buf + log_len, color_output_info[level]);
 8004fa0:	1829      	adds	r1, r5, r0
 8004fa2:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 8004fa6:	f000 fa67 	bl	8005478 <elog_strcpy>
 8004faa:	4404      	add	r4, r0
    }
#endif

    /* package level info */
    if (get_fmt_enabled(level, ELOG_FMT_LVL)) {
 8004fac:	2101      	movs	r1, #1
 8004fae:	4630      	mov	r0, r6
 8004fb0:	f000 f9ce 	bl	8005350 <get_fmt_enabled>
 8004fb4:	b138      	cbz	r0, 8004fc6 <elog_output+0xd2>
        log_len += elog_strcpy(log_len, log_buf + log_len, level_output_info[level]);
 8004fb6:	4ba2      	ldr	r3, [pc, #648]	@ (8005240 <elog_output+0x34c>)
 8004fb8:	1929      	adds	r1, r5, r4
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 8004fc0:	f000 fa5a 	bl	8005478 <elog_strcpy>
 8004fc4:	4404      	add	r4, r0
    }
    /* package tag info */
    if (get_fmt_enabled(level, ELOG_FMT_TAG)) {
 8004fc6:	2102      	movs	r1, #2
 8004fc8:	4630      	mov	r0, r6
 8004fca:	f000 f9c1 	bl	8005350 <get_fmt_enabled>
 8004fce:	b1d0      	cbz	r0, 8005006 <elog_output+0x112>
        log_len += elog_strcpy(log_len, log_buf + log_len, tag);
 8004fd0:	1929      	adds	r1, r5, r4
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	464a      	mov	r2, r9
 8004fd6:	f000 fa4f 	bl	8005478 <elog_strcpy>
        /* if the tag length is less than 50% ELOG_FILTER_TAG_MAX_LEN, then fill space */
        if (tag_len <= ELOG_FILTER_TAG_MAX_LEN / 2) {
 8004fda:	f1bb 0f0f 	cmp.w	fp, #15
        log_len += elog_strcpy(log_len, log_buf + log_len, tag);
 8004fde:	4404      	add	r4, r0
        if (tag_len <= ELOG_FILTER_TAG_MAX_LEN / 2) {
 8004fe0:	d80b      	bhi.n	8004ffa <elog_output+0x106>
            memset(tag_sapce, ' ', ELOG_FILTER_TAG_MAX_LEN / 2 - tag_len);
 8004fe2:	f1cb 020f 	rsb	r2, fp, #15
 8004fe6:	2120      	movs	r1, #32
 8004fe8:	a80a      	add	r0, sp, #40	@ 0x28
 8004fea:	f004 f8bf 	bl	800916c <memset>
            log_len += elog_strcpy(log_len, log_buf + log_len, tag_sapce);
 8004fee:	1929      	adds	r1, r5, r4
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	aa0a      	add	r2, sp, #40	@ 0x28
 8004ff4:	f000 fa40 	bl	8005478 <elog_strcpy>
 8004ff8:	4404      	add	r4, r0
        }
        log_len += elog_strcpy(log_len, log_buf + log_len, " ");
 8004ffa:	1929      	adds	r1, r5, r4
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	4a91      	ldr	r2, [pc, #580]	@ (8005244 <elog_output+0x350>)
 8005000:	f000 fa3a 	bl	8005478 <elog_strcpy>
 8005004:	4404      	add	r4, r0
    }
    /* package time, process and thread info */
    if (get_fmt_enabled(level, ELOG_FMT_TIME | ELOG_FMT_P_INFO | ELOG_FMT_T_INFO)) {
 8005006:	211c      	movs	r1, #28
 8005008:	4630      	mov	r0, r6
 800500a:	f000 f9a1 	bl	8005350 <get_fmt_enabled>
 800500e:	2800      	cmp	r0, #0
 8005010:	d048      	beq.n	80050a4 <elog_output+0x1b0>
        log_len += elog_strcpy(log_len, log_buf + log_len, "[");
 8005012:	1929      	adds	r1, r5, r4
 8005014:	4620      	mov	r0, r4
 8005016:	4a8c      	ldr	r2, [pc, #560]	@ (8005248 <elog_output+0x354>)
 8005018:	f000 fa2e 	bl	8005478 <elog_strcpy>
        /* package time info */
        if (get_fmt_enabled(level, ELOG_FMT_TIME)) {
 800501c:	2104      	movs	r1, #4
        log_len += elog_strcpy(log_len, log_buf + log_len, "[");
 800501e:	4404      	add	r4, r0
        if (get_fmt_enabled(level, ELOG_FMT_TIME)) {
 8005020:	4630      	mov	r0, r6
 8005022:	f000 f995 	bl	8005350 <get_fmt_enabled>
 8005026:	b190      	cbz	r0, 800504e <elog_output+0x15a>
            log_len += elog_strcpy(log_len, log_buf + log_len, elog_port_get_time());
 8005028:	f7ff ff1a 	bl	8004e60 <elog_port_get_time>
 800502c:	1929      	adds	r1, r5, r4
 800502e:	4602      	mov	r2, r0
 8005030:	4620      	mov	r0, r4
 8005032:	f000 fa21 	bl	8005478 <elog_strcpy>
            if (get_fmt_enabled(level, ELOG_FMT_P_INFO | ELOG_FMT_T_INFO)) {
 8005036:	2118      	movs	r1, #24
            log_len += elog_strcpy(log_len, log_buf + log_len, elog_port_get_time());
 8005038:	4404      	add	r4, r0
            if (get_fmt_enabled(level, ELOG_FMT_P_INFO | ELOG_FMT_T_INFO)) {
 800503a:	4630      	mov	r0, r6
 800503c:	f000 f988 	bl	8005350 <get_fmt_enabled>
 8005040:	b128      	cbz	r0, 800504e <elog_output+0x15a>
                log_len += elog_strcpy(log_len, log_buf + log_len, " ");
 8005042:	1929      	adds	r1, r5, r4
 8005044:	4620      	mov	r0, r4
 8005046:	4a7f      	ldr	r2, [pc, #508]	@ (8005244 <elog_output+0x350>)
 8005048:	f000 fa16 	bl	8005478 <elog_strcpy>
 800504c:	4404      	add	r4, r0
            }
        }
        /* package process info */
        if (get_fmt_enabled(level, ELOG_FMT_P_INFO)) {
 800504e:	2108      	movs	r1, #8
 8005050:	4630      	mov	r0, r6
 8005052:	f000 f97d 	bl	8005350 <get_fmt_enabled>
 8005056:	b190      	cbz	r0, 800507e <elog_output+0x18a>
            log_len += elog_strcpy(log_len, log_buf + log_len, elog_port_get_p_info());
 8005058:	f7ff ff24 	bl	8004ea4 <elog_port_get_p_info>
 800505c:	1929      	adds	r1, r5, r4
 800505e:	4602      	mov	r2, r0
 8005060:	4620      	mov	r0, r4
 8005062:	f000 fa09 	bl	8005478 <elog_strcpy>
            if (get_fmt_enabled(level, ELOG_FMT_T_INFO)) {
 8005066:	2110      	movs	r1, #16
            log_len += elog_strcpy(log_len, log_buf + log_len, elog_port_get_p_info());
 8005068:	4404      	add	r4, r0
            if (get_fmt_enabled(level, ELOG_FMT_T_INFO)) {
 800506a:	4630      	mov	r0, r6
 800506c:	f000 f970 	bl	8005350 <get_fmt_enabled>
 8005070:	b128      	cbz	r0, 800507e <elog_output+0x18a>
                log_len += elog_strcpy(log_len, log_buf + log_len, " ");
 8005072:	1929      	adds	r1, r5, r4
 8005074:	4620      	mov	r0, r4
 8005076:	4a73      	ldr	r2, [pc, #460]	@ (8005244 <elog_output+0x350>)
 8005078:	f000 f9fe 	bl	8005478 <elog_strcpy>
 800507c:	4404      	add	r4, r0
            }
        }
        /* package thread info */
        if (get_fmt_enabled(level, ELOG_FMT_T_INFO)) {
 800507e:	2110      	movs	r1, #16
 8005080:	4630      	mov	r0, r6
 8005082:	f000 f965 	bl	8005350 <get_fmt_enabled>
 8005086:	b138      	cbz	r0, 8005098 <elog_output+0x1a4>
            log_len += elog_strcpy(log_len, log_buf + log_len, elog_port_get_t_info());
 8005088:	f7ff ff10 	bl	8004eac <elog_port_get_t_info>
 800508c:	1929      	adds	r1, r5, r4
 800508e:	4602      	mov	r2, r0
 8005090:	4620      	mov	r0, r4
 8005092:	f000 f9f1 	bl	8005478 <elog_strcpy>
 8005096:	4404      	add	r4, r0
        }
        log_len += elog_strcpy(log_len, log_buf + log_len, "] ");
 8005098:	1929      	adds	r1, r5, r4
 800509a:	4620      	mov	r0, r4
 800509c:	4a6b      	ldr	r2, [pc, #428]	@ (800524c <elog_output+0x358>)
 800509e:	f000 f9eb 	bl	8005478 <elog_strcpy>
 80050a2:	4404      	add	r4, r0
    }
    /* package file directory and name, function name and line number info */
    if (get_fmt_used_and_enabled_ptr(level, ELOG_FMT_DIR, file) ||
 80050a4:	4652      	mov	r2, sl
 80050a6:	2120      	movs	r1, #32
 80050a8:	4630      	mov	r0, r6
 80050aa:	f000 f987 	bl	80053bc <get_fmt_used_and_enabled_ptr>
 80050ae:	2800      	cmp	r0, #0
 80050b0:	d03a      	beq.n	8005128 <elog_output+0x234>
            get_fmt_used_and_enabled_ptr(level, ELOG_FMT_FUNC, func) ||
            get_fmt_used_and_enabled_u32(level, ELOG_FMT_LINE, line)) {
        log_len += elog_strcpy(log_len, log_buf + log_len, "(");
 80050b2:	4a67      	ldr	r2, [pc, #412]	@ (8005250 <elog_output+0x35c>)
 80050b4:	1929      	adds	r1, r5, r4
 80050b6:	4620      	mov	r0, r4
 80050b8:	f000 f9de 	bl	8005478 <elog_strcpy>
        /* package file info */
        if (get_fmt_used_and_enabled_ptr(level, ELOG_FMT_DIR, file)) {
 80050bc:	4652      	mov	r2, sl
        log_len += elog_strcpy(log_len, log_buf + log_len, "(");
 80050be:	eb04 0900 	add.w	r9, r4, r0
        if (get_fmt_used_and_enabled_ptr(level, ELOG_FMT_DIR, file)) {
 80050c2:	2120      	movs	r1, #32
 80050c4:	4630      	mov	r0, r6
 80050c6:	f000 f979 	bl	80053bc <get_fmt_used_and_enabled_ptr>
 80050ca:	b1a0      	cbz	r0, 80050f6 <elog_output+0x202>
            log_len += elog_strcpy(log_len, log_buf + log_len, file);
 80050cc:	eb05 0109 	add.w	r1, r5, r9
 80050d0:	4652      	mov	r2, sl
 80050d2:	4648      	mov	r0, r9
 80050d4:	f000 f9d0 	bl	8005478 <elog_strcpy>
            if (get_fmt_used_and_enabled_ptr(level, ELOG_FMT_FUNC, func)) {
 80050d8:	463a      	mov	r2, r7
            log_len += elog_strcpy(log_len, log_buf + log_len, file);
 80050da:	4481      	add	r9, r0
            if (get_fmt_used_and_enabled_ptr(level, ELOG_FMT_FUNC, func)) {
 80050dc:	2140      	movs	r1, #64	@ 0x40
 80050de:	4630      	mov	r0, r6
 80050e0:	f000 f96c 	bl	80053bc <get_fmt_used_and_enabled_ptr>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	d050      	beq.n	800518a <elog_output+0x296>
                log_len += elog_strcpy(log_len, log_buf + log_len, ":");
 80050e8:	eb05 0109 	add.w	r1, r5, r9
 80050ec:	4648      	mov	r0, r9
 80050ee:	4a59      	ldr	r2, [pc, #356]	@ (8005254 <elog_output+0x360>)
 80050f0:	f000 f9c2 	bl	8005478 <elog_strcpy>
 80050f4:	4481      	add	r9, r0
        return false;
    }
}

static bool get_fmt_used_and_enabled_u32(uint8_t level, size_t set, uint32_t arg) {
    return arg && get_fmt_enabled(level, set);
 80050f6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d155      	bne.n	80051a8 <elog_output+0x2b4>
        if (get_fmt_used_and_enabled_ptr(level, ELOG_FMT_FUNC, func)) {
 80050fc:	463a      	mov	r2, r7
 80050fe:	2140      	movs	r1, #64	@ 0x40
 8005100:	4630      	mov	r0, r6
 8005102:	f000 f95b 	bl	80053bc <get_fmt_used_and_enabled_ptr>
 8005106:	b130      	cbz	r0, 8005116 <elog_output+0x222>
            log_len += elog_strcpy(log_len, log_buf + log_len, func);
 8005108:	eb05 0109 	add.w	r1, r5, r9
 800510c:	4648      	mov	r0, r9
 800510e:	463a      	mov	r2, r7
 8005110:	f000 f9b2 	bl	8005478 <elog_strcpy>
 8005114:	4481      	add	r9, r0
        log_len += elog_strcpy(log_len, log_buf + log_len, ")");
 8005116:	4a50      	ldr	r2, [pc, #320]	@ (8005258 <elog_output+0x364>)
 8005118:	eb05 0109 	add.w	r1, r5, r9
 800511c:	4648      	mov	r0, r9
 800511e:	f000 f9ab 	bl	8005478 <elog_strcpy>
 8005122:	eb09 0400 	add.w	r4, r9, r0
 8005126:	e00e      	b.n	8005146 <elog_output+0x252>
            get_fmt_used_and_enabled_ptr(level, ELOG_FMT_FUNC, func) ||
 8005128:	463a      	mov	r2, r7
 800512a:	2140      	movs	r1, #64	@ 0x40
 800512c:	4630      	mov	r0, r6
 800512e:	f000 f945 	bl	80053bc <get_fmt_used_and_enabled_ptr>
    if (get_fmt_used_and_enabled_ptr(level, ELOG_FMT_DIR, file) ||
 8005132:	2800      	cmp	r0, #0
 8005134:	d1bd      	bne.n	80050b2 <elog_output+0x1be>
    return arg && get_fmt_enabled(level, set);
 8005136:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8005138:	b12b      	cbz	r3, 8005146 <elog_output+0x252>
 800513a:	2180      	movs	r1, #128	@ 0x80
 800513c:	4630      	mov	r0, r6
 800513e:	f000 f907 	bl	8005350 <get_fmt_enabled>
 8005142:	2800      	cmp	r0, #0
 8005144:	d1b5      	bne.n	80050b2 <elog_output+0x1be>
    fmt_result = vsnprintf(log_buf + log_len, ELOG_LINE_BUF_SIZE - log_len, format, args);
 8005146:	f5c4 6180 	rsb	r1, r4, #1024	@ 0x400
 800514a:	1928      	adds	r0, r5, r4
 800514c:	9b07      	ldr	r3, [sp, #28]
 800514e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005150:	f003 ffe4 	bl	800911c <vsniprintf>
    if ((log_len + fmt_result <= ELOG_LINE_BUF_SIZE) && (fmt_result > -1)) {
 8005154:	4404      	add	r4, r0
 8005156:	f5b4 7f7f 	cmp.w	r4, #1020	@ 0x3fc
 800515a:	d248      	bcs.n	80051ee <elog_output+0x2fa>
        log_len -= newline_len;
 800515c:	f240 33fb 	movw	r3, #1019	@ 0x3fb
 8005160:	ea34 0420 	bics.w	r4, r4, r0, asr #32
 8005164:	bf28      	it	cs
 8005166:	461c      	movcs	r4, r3
    if (elog.filter.keyword[0] != '\0') {
 8005168:	f898 3020 	ldrb.w	r3, [r8, #32]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d041      	beq.n	80051f4 <elog_output+0x300>
        log_buf[log_len] = '\0';
 8005170:	2300      	movs	r3, #0
        if (!strstr(log_buf, elog.filter.keyword)) {
 8005172:	493a      	ldr	r1, [pc, #232]	@ (800525c <elog_output+0x368>)
 8005174:	482f      	ldr	r0, [pc, #188]	@ (8005234 <elog_output+0x340>)
        log_buf[log_len] = '\0';
 8005176:	552b      	strb	r3, [r5, r4]
        if (!strstr(log_buf, elog.filter.keyword)) {
 8005178:	f004 f812 	bl	80091a0 <strstr>
 800517c:	2800      	cmp	r0, #0
 800517e:	d139      	bne.n	80051f4 <elog_output+0x300>
    elog_output_unlock();
 8005180:	f7ff fea8 	bl	8004ed4 <elog_output_unlock>
}
 8005184:	b00f      	add	sp, #60	@ 0x3c
 8005186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return arg && get_fmt_enabled(level, set);
 800518a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0b5      	beq.n	80050fc <elog_output+0x208>
 8005190:	2180      	movs	r1, #128	@ 0x80
 8005192:	4630      	mov	r0, r6
 8005194:	f000 f8dc 	bl	8005350 <get_fmt_enabled>
 8005198:	b130      	cbz	r0, 80051a8 <elog_output+0x2b4>
                log_len += elog_strcpy(log_len, log_buf + log_len, " ");
 800519a:	eb05 0109 	add.w	r1, r5, r9
 800519e:	4648      	mov	r0, r9
 80051a0:	4a28      	ldr	r2, [pc, #160]	@ (8005244 <elog_output+0x350>)
 80051a2:	f000 f969 	bl	8005478 <elog_strcpy>
 80051a6:	4481      	add	r9, r0
    return arg && get_fmt_enabled(level, set);
 80051a8:	2180      	movs	r1, #128	@ 0x80
 80051aa:	4630      	mov	r0, r6
            log_len += elog_strcpy(log_len, log_buf + log_len, line_num);
 80051ac:	eb05 0409 	add.w	r4, r5, r9
    return arg && get_fmt_enabled(level, set);
 80051b0:	f000 f8ce 	bl	8005350 <get_fmt_enabled>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d0a1      	beq.n	80050fc <elog_output+0x208>
            snprintf(line_num, ELOG_LINE_NUM_MAX_LEN, "%ld", line);
 80051b8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80051ba:	2105      	movs	r1, #5
 80051bc:	4a28      	ldr	r2, [pc, #160]	@ (8005260 <elog_output+0x36c>)
 80051be:	a808      	add	r0, sp, #32
 80051c0:	f003 fee2 	bl	8008f88 <sniprintf>
            log_len += elog_strcpy(log_len, log_buf + log_len, line_num);
 80051c4:	aa08      	add	r2, sp, #32
 80051c6:	4621      	mov	r1, r4
 80051c8:	4648      	mov	r0, r9
 80051ca:	f000 f955 	bl	8005478 <elog_strcpy>
            if (get_fmt_used_and_enabled_ptr(level, ELOG_FMT_FUNC, func)) {
 80051ce:	463a      	mov	r2, r7
            log_len += elog_strcpy(log_len, log_buf + log_len, line_num);
 80051d0:	4481      	add	r9, r0
            if (get_fmt_used_and_enabled_ptr(level, ELOG_FMT_FUNC, func)) {
 80051d2:	2140      	movs	r1, #64	@ 0x40
 80051d4:	4630      	mov	r0, r6
 80051d6:	f000 f8f1 	bl	80053bc <get_fmt_used_and_enabled_ptr>
 80051da:	2800      	cmp	r0, #0
 80051dc:	d08e      	beq.n	80050fc <elog_output+0x208>
                log_len += elog_strcpy(log_len, log_buf + log_len, " ");
 80051de:	eb05 0109 	add.w	r1, r5, r9
 80051e2:	4648      	mov	r0, r9
 80051e4:	4a17      	ldr	r2, [pc, #92]	@ (8005244 <elog_output+0x350>)
 80051e6:	f000 f947 	bl	8005478 <elog_strcpy>
 80051ea:	4481      	add	r9, r0
 80051ec:	e786      	b.n	80050fc <elog_output+0x208>
        log_len -= newline_len;
 80051ee:	f240 34fb 	movw	r4, #1019	@ 0x3fb
 80051f2:	e7b9      	b.n	8005168 <elog_output+0x274>
    if (elog.text_color_enabled) {
 80051f4:	f898 30f5 	ldrb.w	r3, [r8, #245]	@ 0xf5
 80051f8:	b12b      	cbz	r3, 8005206 <elog_output+0x312>
        log_len += elog_strcpy(log_len, log_buf + log_len, CSI_END);
 80051fa:	1929      	adds	r1, r5, r4
 80051fc:	4620      	mov	r0, r4
 80051fe:	4a19      	ldr	r2, [pc, #100]	@ (8005264 <elog_output+0x370>)
 8005200:	f000 f93a 	bl	8005478 <elog_strcpy>
 8005204:	4404      	add	r4, r0
    log_len += elog_strcpy(log_len, log_buf + log_len, ELOG_NEWLINE_SIGN);
 8005206:	1929      	adds	r1, r5, r4
 8005208:	4a17      	ldr	r2, [pc, #92]	@ (8005268 <elog_output+0x374>)
 800520a:	4620      	mov	r0, r4
 800520c:	f000 f934 	bl	8005478 <elog_strcpy>
    elog_port_output(log_buf, log_len);
 8005210:	1821      	adds	r1, r4, r0
 8005212:	4808      	ldr	r0, [pc, #32]	@ (8005234 <elog_output+0x340>)
 8005214:	f7ff fe1b 	bl	8004e4e <elog_port_output>
 8005218:	e7b2      	b.n	8005180 <elog_output+0x28c>
 800521a:	bf00      	nop
 800521c:	24017b08 	.word	0x24017b08
 8005220:	0800ce0c 	.word	0x0800ce0c
 8005224:	0800d254 	.word	0x0800d254
 8005228:	0800ce26 	.word	0x0800ce26
 800522c:	0800cdd6 	.word	0x0800cdd6
 8005230:	0800ce07 	.word	0x0800ce07
 8005234:	24017b0c 	.word	0x24017b0c
 8005238:	0800ce48 	.word	0x0800ce48
 800523c:	0800d284 	.word	0x0800d284
 8005240:	0800d29c 	.word	0x0800d29c
 8005244:	0800d092 	.word	0x0800d092
 8005248:	0800ce49 	.word	0x0800ce49
 800524c:	0800ce4b 	.word	0x0800ce4b
 8005250:	0800ce4e 	.word	0x0800ce4e
 8005254:	0800cd3b 	.word	0x0800cd3b
 8005258:	0800ce93 	.word	0x0800ce93
 800525c:	24017f2c 	.word	0x24017f2c
 8005260:	0800cfa4 	.word	0x0800cfa4
 8005264:	0800ce50 	.word	0x0800ce50
 8005268:	0800cf6d 	.word	0x0800cf6d
 800526c:	24017f0c 	.word	0x24017f0c

08005270 <elog_start>:
void elog_start(void) {
 8005270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (!elog.init_ok) {
 8005272:	4b0b      	ldr	r3, [pc, #44]	@ (80052a0 <elog_start+0x30>)
 8005274:	f893 20f0 	ldrb.w	r2, [r3, #240]	@ 0xf0
 8005278:	b172      	cbz	r2, 8005298 <elog_start+0x28>
    elog.output_enabled = enabled;
 800527a:	2201      	movs	r2, #1
    log_i("EasyLogger V%s is initialize success.", ELOG_SW_VERSION);
 800527c:	4909      	ldr	r1, [pc, #36]	@ (80052a4 <elog_start+0x34>)
 800527e:	2003      	movs	r0, #3
    elog.output_enabled = enabled;
 8005280:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
    log_i("EasyLogger V%s is initialize success.", ELOG_SW_VERSION);
 8005284:	4b08      	ldr	r3, [pc, #32]	@ (80052a8 <elog_start+0x38>)
 8005286:	4a09      	ldr	r2, [pc, #36]	@ (80052ac <elog_start+0x3c>)
 8005288:	9302      	str	r3, [sp, #8]
 800528a:	4b09      	ldr	r3, [pc, #36]	@ (80052b0 <elog_start+0x40>)
 800528c:	9301      	str	r3, [sp, #4]
 800528e:	23f8      	movs	r3, #248	@ 0xf8
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	4b08      	ldr	r3, [pc, #32]	@ (80052b4 <elog_start+0x44>)
 8005294:	f7ff fe2e 	bl	8004ef4 <elog_output>
}
 8005298:	b005      	add	sp, #20
 800529a:	f85d fb04 	ldr.w	pc, [sp], #4
 800529e:	bf00      	nop
 80052a0:	24017f0c 	.word	0x24017f0c
 80052a4:	0800ce07 	.word	0x0800ce07
 80052a8:	0800ce55 	.word	0x0800ce55
 80052ac:	0800cdd6 	.word	0x0800cdd6
 80052b0:	0800ce5c 	.word	0x0800ce5c
 80052b4:	0800d278 	.word	0x0800d278

080052b8 <elog_get_filter_tag_lvl>:
{
 80052b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ELOG_ASSERT(tag != ((void *)0));
 80052ba:	4607      	mov	r7, r0
{
 80052bc:	b087      	sub	sp, #28
    ELOG_ASSERT(tag != ((void *)0));
 80052be:	b9b0      	cbnz	r0, 80052ee <elog_get_filter_tag_lvl+0x36>
 80052c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005334 <elog_get_filter_tag_lvl+0x7c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	b973      	cbnz	r3, 80052e4 <elog_get_filter_tag_lvl+0x2c>
 80052c6:	491c      	ldr	r1, [pc, #112]	@ (8005338 <elog_get_filter_tag_lvl+0x80>)
 80052c8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80052cc:	4b1b      	ldr	r3, [pc, #108]	@ (800533c <elog_get_filter_tag_lvl+0x84>)
 80052ce:	9102      	str	r1, [sp, #8]
 80052d0:	491b      	ldr	r1, [pc, #108]	@ (8005340 <elog_get_filter_tag_lvl+0x88>)
 80052d2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80052d6:	e9cd 2100 	strd	r2, r1, [sp]
 80052da:	4a1a      	ldr	r2, [pc, #104]	@ (8005344 <elog_get_filter_tag_lvl+0x8c>)
 80052dc:	491a      	ldr	r1, [pc, #104]	@ (8005348 <elog_get_filter_tag_lvl+0x90>)
 80052de:	f7ff fe09 	bl	8004ef4 <elog_output>
 80052e2:	e7fe      	b.n	80052e2 <elog_get_filter_tag_lvl+0x2a>
 80052e4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80052e8:	4914      	ldr	r1, [pc, #80]	@ (800533c <elog_get_filter_tag_lvl+0x84>)
 80052ea:	4813      	ldr	r0, [pc, #76]	@ (8005338 <elog_get_filter_tag_lvl+0x80>)
 80052ec:	4798      	blx	r3
    if (!elog.init_ok) {
 80052ee:	4d17      	ldr	r5, [pc, #92]	@ (800534c <elog_get_filter_tag_lvl+0x94>)
 80052f0:	f895 30f0 	ldrb.w	r3, [r5, #240]	@ 0xf0
 80052f4:	b1e3      	cbz	r3, 8005330 <elog_get_filter_tag_lvl+0x78>
    elog_output_lock();
 80052f6:	462e      	mov	r6, r5
 80052f8:	2400      	movs	r4, #0
 80052fa:	f7ff fddb 	bl	8004eb4 <elog_output_lock>
        if (elog.filter.tag_lvl[i].tag_use_flag == true &&
 80052fe:	f896 3051 	ldrb.w	r3, [r6, #81]	@ 0x51
 8005302:	b183      	cbz	r3, 8005326 <elog_get_filter_tag_lvl+0x6e>
            !strncmp(tag, elog.filter.tag_lvl[i].tag,ELOG_FILTER_TAG_MAX_LEN)){
 8005304:	221e      	movs	r2, #30
 8005306:	f106 0132 	add.w	r1, r6, #50	@ 0x32
 800530a:	4638      	mov	r0, r7
 800530c:	f003 ff36 	bl	800917c <strncmp>
        if (elog.filter.tag_lvl[i].tag_use_flag == true &&
 8005310:	b948      	cbnz	r0, 8005326 <elog_get_filter_tag_lvl+0x6e>
            level = elog.filter.tag_lvl[i].level;
 8005312:	eb04 1444 	add.w	r4, r4, r4, lsl #5
 8005316:	4425      	add	r5, r4
 8005318:	f895 4031 	ldrb.w	r4, [r5, #49]	@ 0x31
    elog_output_unlock();
 800531c:	f7ff fdda 	bl	8004ed4 <elog_output_unlock>
}
 8005320:	4620      	mov	r0, r4
 8005322:	b007      	add	sp, #28
 8005324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (i =0; i< ELOG_FILTER_TAG_LVL_MAX_NUM; i++){
 8005326:	3401      	adds	r4, #1
 8005328:	3621      	adds	r6, #33	@ 0x21
 800532a:	2c05      	cmp	r4, #5
 800532c:	d1e7      	bne.n	80052fe <elog_get_filter_tag_lvl+0x46>
 800532e:	e7f5      	b.n	800531c <elog_get_filter_tag_lvl+0x64>
        return level;
 8005330:	2405      	movs	r4, #5
 8005332:	e7f5      	b.n	8005320 <elog_get_filter_tag_lvl+0x68>
 8005334:	24017b08 	.word	0x24017b08
 8005338:	0800ce82 	.word	0x0800ce82
 800533c:	0800d260 	.word	0x0800d260
 8005340:	0800ce26 	.word	0x0800ce26
 8005344:	0800cdd6 	.word	0x0800cdd6
 8005348:	0800ce07 	.word	0x0800ce07
 800534c:	24017f0c 	.word	0x24017f0c

08005350 <get_fmt_enabled>:
    ELOG_ASSERT(level <= ELOG_LVL_VERBOSE);
 8005350:	2805      	cmp	r0, #5
static bool get_fmt_enabled(uint8_t level, size_t set) {
 8005352:	b570      	push	{r4, r5, r6, lr}
 8005354:	4604      	mov	r4, r0
 8005356:	b086      	sub	sp, #24
 8005358:	460d      	mov	r5, r1
    ELOG_ASSERT(level <= ELOG_LVL_VERBOSE);
 800535a:	d917      	bls.n	800538c <get_fmt_enabled+0x3c>
 800535c:	4b10      	ldr	r3, [pc, #64]	@ (80053a0 <get_fmt_enabled+0x50>)
 800535e:	681e      	ldr	r6, [r3, #0]
 8005360:	b97e      	cbnz	r6, 8005382 <get_fmt_enabled+0x32>
 8005362:	4910      	ldr	r1, [pc, #64]	@ (80053a4 <get_fmt_enabled+0x54>)
 8005364:	f240 22e1 	movw	r2, #737	@ 0x2e1
 8005368:	4b0f      	ldr	r3, [pc, #60]	@ (80053a8 <get_fmt_enabled+0x58>)
 800536a:	4630      	mov	r0, r6
 800536c:	9102      	str	r1, [sp, #8]
 800536e:	490f      	ldr	r1, [pc, #60]	@ (80053ac <get_fmt_enabled+0x5c>)
 8005370:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8005374:	e9cd 2100 	strd	r2, r1, [sp]
 8005378:	4a0d      	ldr	r2, [pc, #52]	@ (80053b0 <get_fmt_enabled+0x60>)
 800537a:	490e      	ldr	r1, [pc, #56]	@ (80053b4 <get_fmt_enabled+0x64>)
 800537c:	f7ff fdba 	bl	8004ef4 <elog_output>
 8005380:	e7fe      	b.n	8005380 <get_fmt_enabled+0x30>
 8005382:	f240 22e1 	movw	r2, #737	@ 0x2e1
 8005386:	4908      	ldr	r1, [pc, #32]	@ (80053a8 <get_fmt_enabled+0x58>)
 8005388:	4806      	ldr	r0, [pc, #24]	@ (80053a4 <get_fmt_enabled+0x54>)
 800538a:	47b0      	blx	r6
    if (elog.enabled_fmt_set[level] & set) {
 800538c:	3436      	adds	r4, #54	@ 0x36
 800538e:	4b0a      	ldr	r3, [pc, #40]	@ (80053b8 <get_fmt_enabled+0x68>)
 8005390:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005394:	421d      	tst	r5, r3
}
 8005396:	bf14      	ite	ne
 8005398:	2001      	movne	r0, #1
 800539a:	2000      	moveq	r0, #0
 800539c:	b006      	add	sp, #24
 800539e:	bd70      	pop	{r4, r5, r6, pc}
 80053a0:	24017b08 	.word	0x24017b08
 80053a4:	0800ce0c 	.word	0x0800ce0c
 80053a8:	0800d244 	.word	0x0800d244
 80053ac:	0800ce26 	.word	0x0800ce26
 80053b0:	0800cdd6 	.word	0x0800cdd6
 80053b4:	0800ce07 	.word	0x0800ce07
 80053b8:	24017f0c 	.word	0x24017f0c

080053bc <get_fmt_used_and_enabled_ptr>:
}
static bool get_fmt_used_and_enabled_ptr(uint8_t level, size_t set, const char* arg) {
 80053bc:	b508      	push	{r3, lr}
    return arg && get_fmt_enabled(level, set);
 80053be:	b122      	cbz	r2, 80053ca <get_fmt_used_and_enabled_ptr+0xe>
 80053c0:	f7ff ffc6 	bl	8005350 <get_fmt_enabled>
}
 80053c4:	f000 0001 	and.w	r0, r0, #1
 80053c8:	bd08      	pop	{r3, pc}
    return arg && get_fmt_enabled(level, set);
 80053ca:	4610      	mov	r0, r2
 80053cc:	e7fa      	b.n	80053c4 <get_fmt_used_and_enabled_ptr+0x8>
	...

080053d0 <elog_output_lock_enabled>:
 * @note disable this lock is not recommended except you want output system exception log
 *
 * @param enabled true: enable  false: disable
 */
void elog_output_lock_enabled(bool enabled) {
    elog.output_lock_enabled = enabled;
 80053d0:	4b07      	ldr	r3, [pc, #28]	@ (80053f0 <elog_output_lock_enabled+0x20>)
 80053d2:	f883 00f2 	strb.w	r0, [r3, #242]	@ 0xf2
    /* it will re-lock or re-unlock before output lock enable */
    if (elog.output_lock_enabled) {
 80053d6:	b150      	cbz	r0, 80053ee <elog_output_lock_enabled+0x1e>
        if (!elog.output_is_locked_before_disable && elog.output_is_locked_before_enable) {
 80053d8:	f893 20f3 	ldrb.w	r2, [r3, #243]	@ 0xf3
 80053dc:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 80053e0:	b913      	cbnz	r3, 80053e8 <elog_output_lock_enabled+0x18>
 80053e2:	b122      	cbz	r2, 80053ee <elog_output_lock_enabled+0x1e>
            /* the output lock is unlocked before disable, and the lock will unlocking after enable */
            elog_port_output_lock();
 80053e4:	f7ff bd38 	b.w	8004e58 <elog_port_output_lock>
        } else if (elog.output_is_locked_before_disable && !elog.output_is_locked_before_enable) {
 80053e8:	b90a      	cbnz	r2, 80053ee <elog_output_lock_enabled+0x1e>
            /* the output lock is locked before disable, and the lock will locking after enable */
            elog_port_output_unlock();
 80053ea:	f7ff bd37 	b.w	8004e5c <elog_port_output_unlock>
        }
    }
}
 80053ee:	4770      	bx	lr
 80053f0:	24017f0c 	.word	0x24017f0c

080053f4 <elog_init>:
ElogErrCode elog_init(void) {
 80053f4:	b570      	push	{r4, r5, r6, lr}
    if (elog.init_ok == true) {
 80053f6:	4d14      	ldr	r5, [pc, #80]	@ (8005448 <elog_init+0x54>)
 80053f8:	f895 30f0 	ldrb.w	r3, [r5, #240]	@ 0xf0
 80053fc:	bb13      	cbnz	r3, 8005444 <elog_init+0x50>
    result = elog_port_init();
 80053fe:	f7ff fd24 	bl	8004e4a <elog_port_init>
 8005402:	4604      	mov	r4, r0
    if (result != ELOG_NO_ERR) {
 8005404:	b9f8      	cbnz	r0, 8005446 <elog_init+0x52>
    elog_output_lock_enabled(true);
 8005406:	2001      	movs	r0, #1
        memset(elog.filter.tag_lvl[i].tag, '\0', ELOG_FILTER_TAG_MAX_LEN + 1);
 8005408:	4626      	mov	r6, r4
    elog_output_lock_enabled(true);
 800540a:	f7ff ffe1 	bl	80053d0 <elog_output_lock_enabled>
    elog.output_is_locked_before_disable = false;
 800540e:	f44f 7380 	mov.w	r3, #256	@ 0x100
    elog.filter.level = level;
 8005412:	2205      	movs	r2, #5
    elog.output_is_locked_before_enable = false;
 8005414:	f885 40f3 	strb.w	r4, [r5, #243]	@ 0xf3
    elog.output_is_locked_before_disable = false;
 8005418:	f8a5 30f4 	strh.w	r3, [r5, #244]	@ 0xf4
    elog.filter.level = level;
 800541c:	462b      	mov	r3, r5
 800541e:	f803 2b32 	strb.w	r2, [r3], #50
    for (i =0; i< ELOG_FILTER_TAG_LVL_MAX_NUM; i++){
 8005422:	3401      	adds	r4, #1
        memset(elog.filter.tag_lvl[i].tag, '\0', ELOG_FILTER_TAG_MAX_LEN + 1);
 8005424:	4618      	mov	r0, r3
 8005426:	221f      	movs	r2, #31
 8005428:	2100      	movs	r1, #0
 800542a:	f003 fe9f 	bl	800916c <memset>
    for (i =0; i< ELOG_FILTER_TAG_LVL_MAX_NUM; i++){
 800542e:	2c05      	cmp	r4, #5
        memset(elog.filter.tag_lvl[i].tag, '\0', ELOG_FILTER_TAG_MAX_LEN + 1);
 8005430:	4603      	mov	r3, r0
        elog.filter.tag_lvl[i].level = ELOG_FILTER_LVL_SILENT;
 8005432:	f800 6c01 	strb.w	r6, [r0, #-1]
        elog.filter.tag_lvl[i].tag_use_flag = false;
 8005436:	77c6      	strb	r6, [r0, #31]
    for (i =0; i< ELOG_FILTER_TAG_LVL_MAX_NUM; i++){
 8005438:	f103 0321 	add.w	r3, r3, #33	@ 0x21
 800543c:	d1f1      	bne.n	8005422 <elog_init+0x2e>
    elog.init_ok = true;
 800543e:	2301      	movs	r3, #1
 8005440:	f885 30f0 	strb.w	r3, [r5, #240]	@ 0xf0
        return result;
 8005444:	2000      	movs	r0, #0
}
 8005446:	bd70      	pop	{r4, r5, r6, pc}
 8005448:	24017f0c 	.word	0x24017f0c

0800544c <app_elog_init>:
    /* unlock output */
    elog_output_unlock();
}

void app_elog_init()
{
 800544c:	b508      	push	{r3, lr}
  elog_init();
 800544e:	f7ff ffd1 	bl	80053f4 <elog_init>
    elog.text_color_enabled = enabled;
 8005452:	4b08      	ldr	r3, [pc, #32]	@ (8005474 <app_elog_init+0x28>)
 8005454:	2201      	movs	r2, #1
    elog.enabled_fmt_set[level] = set;
 8005456:	21ff      	movs	r1, #255	@ 0xff
    elog.text_color_enabled = enabled;
 8005458:	f883 20f5 	strb.w	r2, [r3, #245]	@ 0xf5
    elog.enabled_fmt_set[level] = set;
 800545c:	2203      	movs	r2, #3
 800545e:	e9c3 1236 	strd	r1, r2, [r3, #216]	@ 0xd8
 8005462:	e9c3 2238 	strd	r2, r2, [r3, #224]	@ 0xe0
 8005466:	22e3      	movs	r2, #227	@ 0xe3
 8005468:	e9c3 213a 	strd	r2, r1, [r3, #232]	@ 0xe8
  elog_set_fmt(ELOG_LVL_INFO, ELOG_FMT_LVL | ELOG_FMT_TAG);
  elog_set_fmt(ELOG_LVL_DEBUG, ELOG_FMT_ALL & ~(ELOG_FMT_TIME | ELOG_FMT_P_INFO | ELOG_FMT_T_INFO));
  elog_set_fmt(ELOG_LVL_VERBOSE, ELOG_FMT_ALL);

  elog_start();
}
 800546c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  elog_start();
 8005470:	f7ff befe 	b.w	8005270 <elog_start>
 8005474:	24017f0c 	.word	0x24017f0c

08005478 <elog_strcpy>:
 * @param dst destination
 * @param src source
 *
 * @return copied length
 */
size_t elog_strcpy(size_t cur_len, char *dst, const char *src) {
 8005478:	b570      	push	{r4, r5, r6, lr}
    const char *src_old = src;

    assert(dst);
 800547a:	b929      	cbnz	r1, 8005488 <elog_strcpy+0x10>
 800547c:	4b0c      	ldr	r3, [pc, #48]	@ (80054b0 <elog_strcpy+0x38>)
 800547e:	212c      	movs	r1, #44	@ 0x2c
 8005480:	4a0c      	ldr	r2, [pc, #48]	@ (80054b4 <elog_strcpy+0x3c>)
    assert(src);
 8005482:	480d      	ldr	r0, [pc, #52]	@ (80054b8 <elog_strcpy+0x40>)
 8005484:	f002 fd6e 	bl	8007f64 <__assert_func>
 8005488:	b13a      	cbz	r2, 800549a <elog_strcpy+0x22>
 800548a:	4614      	mov	r4, r2
 800548c:	1a40      	subs	r0, r0, r1
 800548e:	4623      	mov	r3, r4

    while (*src != 0) {
 8005490:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005494:	b92d      	cbnz	r5, 80054a2 <elog_strcpy+0x2a>
            *dst++ = *src++;
        } else {
            break;
        }
    }
    return src - src_old;
 8005496:	1a98      	subs	r0, r3, r2
}
 8005498:	bd70      	pop	{r4, r5, r6, pc}
    assert(src);
 800549a:	4b08      	ldr	r3, [pc, #32]	@ (80054bc <elog_strcpy+0x44>)
 800549c:	212d      	movs	r1, #45	@ 0x2d
 800549e:	4a05      	ldr	r2, [pc, #20]	@ (80054b4 <elog_strcpy+0x3c>)
 80054a0:	e7ef      	b.n	8005482 <elog_strcpy+0xa>
        if (cur_len++ < ELOG_LINE_BUF_SIZE) {
 80054a2:	180e      	adds	r6, r1, r0
 80054a4:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80054a8:	d2f5      	bcs.n	8005496 <elog_strcpy+0x1e>
            *dst++ = *src++;
 80054aa:	f801 5b01 	strb.w	r5, [r1], #1
 80054ae:	e7ee      	b.n	800548e <elog_strcpy+0x16>
 80054b0:	0800cecb 	.word	0x0800cecb
 80054b4:	0800d2b4 	.word	0x0800d2b4
 80054b8:	0800cecf 	.word	0x0800cecf
 80054bc:	0800cf06 	.word	0x0800cf06

080054c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80054c0:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 80054c2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80054c6:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80054c8:	f001 f8a4 	bl	8006614 <xTaskGetSchedulerState>
 80054cc:	2801      	cmp	r0, #1
 80054ce:	d003      	beq.n	80054d8 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 80054d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80054d4:	f001 bc7e 	b.w	8006dd4 <xPortSysTickHandler>
}
 80054d8:	bd08      	pop	{r3, pc}
	...

080054dc <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054dc:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80054e0:	b92b      	cbnz	r3, 80054ee <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80054e2:	4b06      	ldr	r3, [pc, #24]	@ (80054fc <osKernelInitialize+0x20>)
 80054e4:	6818      	ldr	r0, [r3, #0]
 80054e6:	b928      	cbnz	r0, 80054f4 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80054e8:	2201      	movs	r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80054ec:	4770      	bx	lr
    stat = osErrorISR;
 80054ee:	f06f 0005 	mvn.w	r0, #5
 80054f2:	4770      	bx	lr
    } else {
      stat = osError;
 80054f4:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	24018754 	.word	0x24018754

08005500 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005500:	b510      	push	{r4, lr}
 8005502:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005506:	b95c      	cbnz	r4, 8005520 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8005508:	4b08      	ldr	r3, [pc, #32]	@ (800552c <osKernelStart+0x2c>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	2a01      	cmp	r2, #1
 800550e:	d10a      	bne.n	8005526 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005510:	4a07      	ldr	r2, [pc, #28]	@ (8005530 <osKernelStart+0x30>)
 8005512:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005514:	2202      	movs	r2, #2
 8005516:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005518:	f000 fde8 	bl	80060ec <vTaskStartScheduler>
      stat = osOK;
 800551c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800551e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8005520:	f06f 0005 	mvn.w	r0, #5
 8005524:	e7fb      	b.n	800551e <osKernelStart+0x1e>
      stat = osError;
 8005526:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800552a:	e7f8      	b.n	800551e <osKernelStart+0x1e>
 800552c:	24018754 	.word	0x24018754
 8005530:	e000ed00 	.word	0xe000ed00

08005534 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005536:	4614      	mov	r4, r2
 8005538:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800553a:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800553c:	460b      	mov	r3, r1
  hTask = NULL;
 800553e:	9205      	str	r2, [sp, #20]
 8005540:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8005544:	b9fa      	cbnz	r2, 8005586 <osThreadNew+0x52>
 8005546:	b1f0      	cbz	r0, 8005586 <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8005548:	b354      	cbz	r4, 80055a0 <osThreadNew+0x6c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800554a:	69a5      	ldr	r5, [r4, #24]
 800554c:	b125      	cbz	r5, 8005558 <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800554e:	1e69      	subs	r1, r5, #1
 8005550:	2937      	cmp	r1, #55	@ 0x37
 8005552:	d902      	bls.n	800555a <osThreadNew+0x26>
        return (NULL);
 8005554:	2000      	movs	r0, #0
 8005556:	e017      	b.n	8005588 <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 8005558:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800555a:	6862      	ldr	r2, [r4, #4]
 800555c:	07d2      	lsls	r2, r2, #31
 800555e:	d4f9      	bmi.n	8005554 <osThreadNew+0x20>
      }

      if (attr->stack_size > 0U) {
 8005560:	6966      	ldr	r6, [r4, #20]
 8005562:	b19e      	cbz	r6, 800558c <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005564:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8005566:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005568:	e9d4 7c02 	ldrd	r7, ip, [r4, #8]
 800556c:	b187      	cbz	r7, 8005590 <osThreadNew+0x5c>
 800556e:	f1bc 0fa7 	cmp.w	ip, #167	@ 0xa7
 8005572:	d908      	bls.n	8005586 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005574:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005576:	b134      	cbz	r4, 8005586 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005578:	b12e      	cbz	r6, 8005586 <osThreadNew+0x52>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800557a:	9500      	str	r5, [sp, #0]
 800557c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8005580:	f000 fd4e 	bl	8006020 <xTaskCreateStatic>
 8005584:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005586:	9805      	ldr	r0, [sp, #20]
}
 8005588:	b007      	add	sp, #28
 800558a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800558c:	2280      	movs	r2, #128	@ 0x80
 800558e:	e7ea      	b.n	8005566 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005590:	f1bc 0f00 	cmp.w	ip, #0
 8005594:	d1f7      	bne.n	8005586 <osThreadNew+0x52>
 8005596:	6924      	ldr	r4, [r4, #16]
 8005598:	2c00      	cmp	r4, #0
 800559a:	d1f4      	bne.n	8005586 <osThreadNew+0x52>
 800559c:	460c      	mov	r4, r1
 800559e:	e001      	b.n	80055a4 <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 80055a0:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 80055a2:	2280      	movs	r2, #128	@ 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80055a4:	a905      	add	r1, sp, #20
 80055a6:	b292      	uxth	r2, r2
 80055a8:	e9cd 5100 	strd	r5, r1, [sp]
 80055ac:	4621      	mov	r1, r4
 80055ae:	f000 fd6f 	bl	8006090 <xTaskCreate>
 80055b2:	2801      	cmp	r0, #1
            hTask = NULL;
 80055b4:	bf1c      	itt	ne
 80055b6:	2300      	movne	r3, #0
 80055b8:	9305      	strne	r3, [sp, #20]
 80055ba:	e7e4      	b.n	8005586 <osThreadNew+0x52>

080055bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80055bc:	b508      	push	{r3, lr}
 80055be:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80055c2:	b922      	cbnz	r2, 80055ce <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80055c4:	b108      	cbz	r0, 80055ca <osDelay+0xe>
      vTaskDelay(ticks);
 80055c6:	f000 fef9 	bl	80063bc <vTaskDelay>
    stat = osOK;
 80055ca:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 80055cc:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 80055ce:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 80055d2:	e7fb      	b.n	80055cc <osDelay+0x10>

080055d4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80055d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055d6:	4605      	mov	r5, r0
 80055d8:	460e      	mov	r6, r1
 80055da:	4614      	mov	r4, r2
 80055dc:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80055e0:	b11f      	cbz	r7, 80055ea <osMessageQueueNew+0x16>
  hQueue = NULL;
 80055e2:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80055e4:	4628      	mov	r0, r5
 80055e6:	b003      	add	sp, #12
 80055e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d0f9      	beq.n	80055e2 <osMessageQueueNew+0xe>
 80055ee:	2900      	cmp	r1, #0
 80055f0:	d0f7      	beq.n	80055e2 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 80055f2:	b1da      	cbz	r2, 800562c <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80055f4:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 80055f8:	b183      	cbz	r3, 800561c <osMessageQueueNew+0x48>
 80055fa:	2a4f      	cmp	r2, #79	@ 0x4f
 80055fc:	d9f1      	bls.n	80055e2 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80055fe:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005600:	2a00      	cmp	r2, #0
 8005602:	d0ee      	beq.n	80055e2 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005604:	434d      	muls	r5, r1
 8005606:	6966      	ldr	r6, [r4, #20]
 8005608:	42ae      	cmp	r6, r5
 800560a:	d3ea      	bcc.n	80055e2 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800560c:	9700      	str	r7, [sp, #0]
 800560e:	f000 f93d 	bl	800588c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8005612:	4605      	mov	r5, r0
 8005614:	2800      	cmp	r0, #0
 8005616:	d0e4      	beq.n	80055e2 <osMessageQueueNew+0xe>
        name = attr->name;
 8005618:	6824      	ldr	r4, [r4, #0]
 800561a:	e011      	b.n	8005640 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800561c:	2a00      	cmp	r2, #0
 800561e:	d1e0      	bne.n	80055e2 <osMessageQueueNew+0xe>
 8005620:	6923      	ldr	r3, [r4, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1dd      	bne.n	80055e2 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005626:	6963      	ldr	r3, [r4, #20]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1da      	bne.n	80055e2 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800562c:	4628      	mov	r0, r5
 800562e:	2200      	movs	r2, #0
 8005630:	4631      	mov	r1, r6
 8005632:	f000 f979 	bl	8005928 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8005636:	4605      	mov	r5, r0
 8005638:	2800      	cmp	r0, #0
 800563a:	d0d2      	beq.n	80055e2 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800563c:	2c00      	cmp	r4, #0
 800563e:	d1eb      	bne.n	8005618 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 8005640:	4621      	mov	r1, r4
 8005642:	4628      	mov	r0, r5
 8005644:	f000 fb44 	bl	8005cd0 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8005648:	e7cc      	b.n	80055e4 <osMessageQueueNew+0x10>
	...

0800564c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800564c:	4b03      	ldr	r3, [pc, #12]	@ (800565c <vApplicationGetIdleTaskMemory+0x10>)
 800564e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005650:	4b03      	ldr	r3, [pc, #12]	@ (8005660 <vApplicationGetIdleTaskMemory+0x14>)
 8005652:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005654:	2380      	movs	r3, #128	@ 0x80
 8005656:	6013      	str	r3, [r2, #0]
}
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	240186ac 	.word	0x240186ac
 8005660:	240184ac 	.word	0x240184ac

08005664 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005664:	4b03      	ldr	r3, [pc, #12]	@ (8005674 <vApplicationGetTimerTaskMemory+0x10>)
 8005666:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005668:	4b03      	ldr	r3, [pc, #12]	@ (8005678 <vApplicationGetTimerTaskMemory+0x14>)
 800566a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800566c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005670:	6013      	str	r3, [r2, #0]
}
 8005672:	4770      	bx	lr
 8005674:	24018404 	.word	0x24018404
 8005678:	24018004 	.word	0x24018004

0800567c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800567c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005680:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005684:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005686:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005688:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005690:	4770      	bx	lr

08005692 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005692:	2300      	movs	r3, #0
 8005694:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005696:	4770      	bx	lr

08005698 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005698:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800569a:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800569c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800569e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056a0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056a2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80056a4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80056a6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80056a8:	3301      	adds	r3, #1
 80056aa:	6003      	str	r3, [r0, #0]
}
 80056ac:	4770      	bx	lr

080056ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056ae:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056b0:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056b2:	1c63      	adds	r3, r4, #1
 80056b4:	d10a      	bne.n	80056cc <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056b6:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056bc:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056be:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80056c0:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80056c2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80056c4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80056c6:	3301      	adds	r3, #1
 80056c8:	6003      	str	r3, [r0, #0]
}
 80056ca:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056cc:	f100 0208 	add.w	r2, r0, #8
 80056d0:	4613      	mov	r3, r2
 80056d2:	6852      	ldr	r2, [r2, #4]
 80056d4:	6815      	ldr	r5, [r2, #0]
 80056d6:	42a5      	cmp	r5, r4
 80056d8:	d9fa      	bls.n	80056d0 <vListInsert+0x22>
 80056da:	e7ed      	b.n	80056b8 <vListInsert+0xa>

080056dc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056dc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056de:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 80056e2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056e4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056e6:	6859      	ldr	r1, [r3, #4]
 80056e8:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056ea:	bf08      	it	eq
 80056ec:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056ee:	2200      	movs	r2, #0
 80056f0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	3a01      	subs	r2, #1
 80056f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056f8:	6818      	ldr	r0, [r3, #0]
}
 80056fa:	4770      	bx	lr

080056fc <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80056fc:	b510      	push	{r4, lr}
 80056fe:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005700:	f001 fb00 	bl	8006d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005704:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005706:	f001 fb1d 	bl	8006d44 <vPortExitCritical>

	return xReturn;
}
 800570a:	fab4 f084 	clz	r0, r4
 800570e:	0940      	lsrs	r0, r0, #5
 8005710:	bd10      	pop	{r4, pc}

08005712 <prvCopyDataToQueue>:
{
 8005712:	b570      	push	{r4, r5, r6, lr}
 8005714:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005716:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8005718:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800571a:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800571c:	b942      	cbnz	r2, 8005730 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800571e:	6806      	ldr	r6, [r0, #0]
 8005720:	b99e      	cbnz	r6, 800574a <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005722:	6880      	ldr	r0, [r0, #8]
 8005724:	f000 ff86 	bl	8006634 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005728:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800572a:	3501      	adds	r5, #1
 800572c:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800572e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8005730:	b96e      	cbnz	r6, 800574e <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005732:	6840      	ldr	r0, [r0, #4]
 8005734:	f003 fe2f 	bl	8009396 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005738:	6863      	ldr	r3, [r4, #4]
 800573a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800573c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800573e:	68a2      	ldr	r2, [r4, #8]
 8005740:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005742:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005744:	bf24      	itt	cs
 8005746:	6823      	ldrcs	r3, [r4, #0]
 8005748:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800574a:	2000      	movs	r0, #0
 800574c:	e7ed      	b.n	800572a <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800574e:	68c0      	ldr	r0, [r0, #12]
 8005750:	f003 fe21 	bl	8009396 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005754:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005756:	68e3      	ldr	r3, [r4, #12]
 8005758:	4251      	negs	r1, r2
 800575a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800575c:	6822      	ldr	r2, [r4, #0]
 800575e:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005760:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005762:	bf3e      	ittt	cc
 8005764:	68a3      	ldrcc	r3, [r4, #8]
 8005766:	185b      	addcc	r3, r3, r1
 8005768:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800576a:	2e02      	cmp	r6, #2
 800576c:	d1ed      	bne.n	800574a <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800576e:	b10d      	cbz	r5, 8005774 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8005770:	3d01      	subs	r5, #1
 8005772:	e7ea      	b.n	800574a <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8005774:	4628      	mov	r0, r5
 8005776:	e7d8      	b.n	800572a <prvCopyDataToQueue+0x18>

08005778 <prvCopyDataFromQueue>:
{
 8005778:	4603      	mov	r3, r0
 800577a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800577c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800577e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005780:	b162      	cbz	r2, 800579c <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005782:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005784:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005786:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005788:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800578a:	60dc      	str	r4, [r3, #12]
}
 800578c:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005790:	bf24      	itt	cs
 8005792:	6819      	ldrcs	r1, [r3, #0]
 8005794:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005796:	68d9      	ldr	r1, [r3, #12]
 8005798:	f003 bdfd 	b.w	8009396 <memcpy>
}
 800579c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <prvUnlockQueue>:
{
 80057a2:	b570      	push	{r4, r5, r6, lr}
 80057a4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80057a6:	f001 faad 	bl	8006d04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80057aa:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057ae:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80057b2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057b4:	2d00      	cmp	r5, #0
 80057b6:	dd01      	ble.n	80057bc <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057b8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80057ba:	b9b3      	cbnz	r3, 80057ea <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 80057bc:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057be:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80057c2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80057c6:	f001 fabd 	bl	8006d44 <vPortExitCritical>
	taskENTER_CRITICAL();
 80057ca:	f001 fa9b 	bl	8006d04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80057ce:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 80057d2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057d4:	2d00      	cmp	r5, #0
 80057d6:	dd01      	ble.n	80057dc <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057d8:	6923      	ldr	r3, [r4, #16]
 80057da:	b97b      	cbnz	r3, 80057fc <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 80057dc:	23ff      	movs	r3, #255	@ 0xff
 80057de:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 80057e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80057e6:	f001 baad 	b.w	8006d44 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057ea:	4630      	mov	r0, r6
 80057ec:	f000 fe82 	bl	80064f4 <xTaskRemoveFromEventList>
 80057f0:	b108      	cbz	r0, 80057f6 <prvUnlockQueue+0x54>
						vTaskMissedYield();
 80057f2:	f000 ff09 	bl	8006608 <vTaskMissedYield>
			--cTxLock;
 80057f6:	3d01      	subs	r5, #1
 80057f8:	b26d      	sxtb	r5, r5
 80057fa:	e7db      	b.n	80057b4 <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057fc:	4630      	mov	r0, r6
 80057fe:	f000 fe79 	bl	80064f4 <xTaskRemoveFromEventList>
 8005802:	b108      	cbz	r0, 8005808 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 8005804:	f000 ff00 	bl	8006608 <vTaskMissedYield>
				--cRxLock;
 8005808:	3d01      	subs	r5, #1
 800580a:	b26d      	sxtb	r5, r5
 800580c:	e7e2      	b.n	80057d4 <prvUnlockQueue+0x32>

0800580e <xQueueGenericReset>:
{
 800580e:	b538      	push	{r3, r4, r5, lr}
 8005810:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8005812:	4604      	mov	r4, r0
 8005814:	b940      	cbnz	r0, 8005828 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	e7fe      	b.n	8005826 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8005828:	f001 fa6c 	bl	8006d04 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800582c:	6822      	ldr	r2, [r4, #0]
 800582e:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005832:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005834:	434b      	muls	r3, r1
 8005836:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005838:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800583a:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800583c:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800583e:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8005840:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005842:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005844:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8005846:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800584a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800584e:	b9a5      	cbnz	r5, 800587a <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005850:	6923      	ldr	r3, [r4, #16]
 8005852:	b173      	cbz	r3, 8005872 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005854:	f104 0010 	add.w	r0, r4, #16
 8005858:	f000 fe4c 	bl	80064f4 <xTaskRemoveFromEventList>
 800585c:	b148      	cbz	r0, 8005872 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800585e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005866:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8005872:	f001 fa67 	bl	8006d44 <vPortExitCritical>
}
 8005876:	2001      	movs	r0, #1
 8005878:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800587a:	f104 0010 	add.w	r0, r4, #16
 800587e:	f7ff fefd 	bl	800567c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005882:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005886:	f7ff fef9 	bl	800567c <vListInitialise>
 800588a:	e7f2      	b.n	8005872 <xQueueGenericReset+0x64>

0800588c <xQueueGenericCreateStatic>:
	{
 800588c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800588e:	460d      	mov	r5, r1
 8005890:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005892:	b940      	cbnz	r0, 80058a6 <xQueueGenericCreateStatic+0x1a>
 8005894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	e7fe      	b.n	80058a4 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 80058a6:	b943      	cbnz	r3, 80058ba <xQueueGenericCreateStatic+0x2e>
 80058a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	e7fe      	b.n	80058b8 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80058ba:	b14a      	cbz	r2, 80058d0 <xQueueGenericCreateStatic+0x44>
 80058bc:	b991      	cbnz	r1, 80058e4 <xQueueGenericCreateStatic+0x58>
 80058be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	e7fe      	b.n	80058ce <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058d0:	b141      	cbz	r1, 80058e4 <xQueueGenericCreateStatic+0x58>
 80058d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	e7fe      	b.n	80058e2 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058e4:	2350      	movs	r3, #80	@ 0x50
 80058e6:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058e8:	9b01      	ldr	r3, [sp, #4]
 80058ea:	2b50      	cmp	r3, #80	@ 0x50
 80058ec:	d008      	beq.n	8005900 <xQueueGenericCreateStatic+0x74>
 80058ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	e7fe      	b.n	80058fe <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005900:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005902:	2d00      	cmp	r5, #0
 8005904:	bf08      	it	eq
 8005906:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005908:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800590a:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800590e:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8005910:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005914:	4620      	mov	r0, r4
 8005916:	f7ff ff7a 	bl	800580e <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800591a:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800591e:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8005920:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8005924:	b003      	add	sp, #12
 8005926:	bd30      	pop	{r4, r5, pc}

08005928 <xQueueGenericCreate>:
	{
 8005928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592a:	460d      	mov	r5, r1
 800592c:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800592e:	4606      	mov	r6, r0
 8005930:	b940      	cbnz	r0, 8005944 <xQueueGenericCreate+0x1c>
 8005932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	e7fe      	b.n	8005942 <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005944:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005946:	3050      	adds	r0, #80	@ 0x50
 8005948:	f001 fb42 	bl	8006fd0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800594c:	4604      	mov	r4, r0
 800594e:	b170      	cbz	r0, 800596e <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005950:	2300      	movs	r3, #0
 8005952:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005956:	b165      	cbz	r5, 8005972 <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005958:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800595c:	2101      	movs	r1, #1
 800595e:	4620      	mov	r0, r4
 8005960:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8005962:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005966:	f7ff ff52 	bl	800580e <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800596a:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800596e:	4620      	mov	r0, r4
 8005970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005972:	4603      	mov	r3, r0
 8005974:	e7f2      	b.n	800595c <xQueueGenericCreate+0x34>

08005976 <xQueueGenericSend>:
{
 8005976:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800597a:	460f      	mov	r7, r1
 800597c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800597e:	4604      	mov	r4, r0
{
 8005980:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005982:	b940      	cbnz	r0, 8005996 <xQueueGenericSend+0x20>
 8005984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	e7fe      	b.n	8005994 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005996:	b951      	cbnz	r1, 80059ae <xQueueGenericSend+0x38>
 8005998:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800599a:	b143      	cbz	r3, 80059ae <xQueueGenericSend+0x38>
 800599c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	e7fe      	b.n	80059ac <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059ae:	2e02      	cmp	r6, #2
 80059b0:	d10b      	bne.n	80059ca <xQueueGenericSend+0x54>
 80059b2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d008      	beq.n	80059ca <xQueueGenericSend+0x54>
 80059b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	e7fe      	b.n	80059c8 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059ca:	f000 fe23 	bl	8006614 <xTaskGetSchedulerState>
 80059ce:	4605      	mov	r5, r0
 80059d0:	b320      	cbz	r0, 8005a1c <xQueueGenericSend+0xa6>
 80059d2:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80059d4:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80059d8:	f001 f994 	bl	8006d04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059dc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80059de:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d227      	bcs.n	8005a34 <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059e4:	4632      	mov	r2, r6
 80059e6:	4639      	mov	r1, r7
 80059e8:	4620      	mov	r0, r4
 80059ea:	f7ff fe92 	bl	8005712 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059ee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80059f0:	b11b      	cbz	r3, 80059fa <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059f2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80059f6:	f000 fd7d 	bl	80064f4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80059fa:	b148      	cbz	r0, 8005a10 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 80059fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005a00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a04:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005a10:	f001 f998 	bl	8006d44 <vPortExitCritical>
				return pdPASS;
 8005a14:	2001      	movs	r0, #1
}
 8005a16:	b004      	add	sp, #16
 8005a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a1c:	9b01      	ldr	r3, [sp, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0d8      	beq.n	80059d4 <xQueueGenericSend+0x5e>
 8005a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	e7fe      	b.n	8005a32 <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a34:	2e02      	cmp	r6, #2
 8005a36:	d0d5      	beq.n	80059e4 <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a38:	9b01      	ldr	r3, [sp, #4]
 8005a3a:	b91b      	cbnz	r3, 8005a44 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8005a3c:	f001 f982 	bl	8006d44 <vPortExitCritical>
					return errQUEUE_FULL;
 8005a40:	2000      	movs	r0, #0
 8005a42:	e7e8      	b.n	8005a16 <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 8005a44:	b915      	cbnz	r5, 8005a4c <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a46:	a802      	add	r0, sp, #8
 8005a48:	f000 fd96 	bl	8006578 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005a4c:	f001 f97a 	bl	8006d44 <vPortExitCritical>
		vTaskSuspendAll();
 8005a50:	f000 fb9c 	bl	800618c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a54:	f001 f956 	bl	8006d04 <vPortEnterCritical>
 8005a58:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005a5c:	2bff      	cmp	r3, #255	@ 0xff
 8005a5e:	d101      	bne.n	8005a64 <xQueueGenericSend+0xee>
 8005a60:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 8005a64:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005a68:	2bff      	cmp	r3, #255	@ 0xff
 8005a6a:	d101      	bne.n	8005a70 <xQueueGenericSend+0xfa>
 8005a6c:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 8005a70:	f001 f968 	bl	8006d44 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a74:	a901      	add	r1, sp, #4
 8005a76:	a802      	add	r0, sp, #8
 8005a78:	f000 fd8a 	bl	8006590 <xTaskCheckForTimeOut>
 8005a7c:	bb38      	cbnz	r0, 8005ace <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a7e:	f001 f941 	bl	8006d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a82:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005a84:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d10e      	bne.n	8005aa8 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005a8a:	f001 f95b 	bl	8006d44 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a8e:	9901      	ldr	r1, [sp, #4]
 8005a90:	f104 0010 	add.w	r0, r4, #16
 8005a94:	f000 fcf6 	bl	8006484 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f7ff fe82 	bl	80057a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a9e:	f000 fc19 	bl	80062d4 <xTaskResumeAll>
 8005aa2:	b148      	cbz	r0, 8005ab8 <xQueueGenericSend+0x142>
 8005aa4:	2501      	movs	r5, #1
 8005aa6:	e797      	b.n	80059d8 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8005aa8:	f001 f94c 	bl	8006d44 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8005aac:	4620      	mov	r0, r4
 8005aae:	f7ff fe78 	bl	80057a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ab2:	f000 fc0f 	bl	80062d4 <xTaskResumeAll>
 8005ab6:	e7f5      	b.n	8005aa4 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8005ab8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005abc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ac0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	e7ea      	b.n	8005aa4 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8005ace:	4620      	mov	r0, r4
 8005ad0:	f7ff fe67 	bl	80057a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ad4:	f000 fbfe 	bl	80062d4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005ad8:	e7b2      	b.n	8005a40 <xQueueGenericSend+0xca>

08005ada <xQueueGenericSendFromISR>:
{
 8005ada:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ade:	4689      	mov	r9, r1
 8005ae0:	4617      	mov	r7, r2
 8005ae2:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	b940      	cbnz	r0, 8005afa <xQueueGenericSendFromISR+0x20>
 8005ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	e7fe      	b.n	8005af8 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005afa:	b951      	cbnz	r1, 8005b12 <xQueueGenericSendFromISR+0x38>
 8005afc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005afe:	b143      	cbz	r3, 8005b12 <xQueueGenericSendFromISR+0x38>
 8005b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	e7fe      	b.n	8005b10 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b12:	2e02      	cmp	r6, #2
 8005b14:	d10b      	bne.n	8005b2e <xQueueGenericSendFromISR+0x54>
 8005b16:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d008      	beq.n	8005b2e <xQueueGenericSendFromISR+0x54>
 8005b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	e7fe      	b.n	8005b2c <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b2e:	f001 f9fb 	bl	8006f28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b32:	f3ef 8811 	mrs	r8, BASEPRI
 8005b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3a:	f383 8811 	msr	BASEPRI, r3
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b46:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005b48:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d301      	bcc.n	8005b52 <xQueueGenericSendFromISR+0x78>
 8005b4e:	2e02      	cmp	r6, #2
 8005b50:	d11e      	bne.n	8005b90 <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b52:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b56:	4632      	mov	r2, r6
 8005b58:	4649      	mov	r1, r9
 8005b5a:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b5c:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b5e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b60:	f7ff fdd7 	bl	8005712 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005b64:	1c6b      	adds	r3, r5, #1
 8005b66:	d10e      	bne.n	8005b86 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b68:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005b6a:	b13b      	cbz	r3, 8005b7c <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b6c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005b70:	f000 fcc0 	bl	80064f4 <xTaskRemoveFromEventList>
 8005b74:	b110      	cbz	r0, 8005b7c <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8005b76:	b10f      	cbz	r7, 8005b7c <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8005b7c:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b7e:	f388 8811 	msr	BASEPRI, r8
}
 8005b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b86:	3501      	adds	r5, #1
 8005b88:	b26d      	sxtb	r5, r5
 8005b8a:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8005b8e:	e7f5      	b.n	8005b7c <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 8005b90:	2000      	movs	r0, #0
 8005b92:	e7f4      	b.n	8005b7e <xQueueGenericSendFromISR+0xa4>

08005b94 <xQueueReceive>:
{
 8005b94:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005b98:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 8005b9a:	4604      	mov	r4, r0
{
 8005b9c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005b9e:	b940      	cbnz	r0, 8005bb2 <xQueueReceive+0x1e>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	e7fe      	b.n	8005bb0 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bb2:	b951      	cbnz	r1, 8005bca <xQueueReceive+0x36>
 8005bb4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005bb6:	b143      	cbz	r3, 8005bca <xQueueReceive+0x36>
 8005bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bbc:	f383 8811 	msr	BASEPRI, r3
 8005bc0:	f3bf 8f6f 	isb	sy
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	e7fe      	b.n	8005bc8 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bca:	f000 fd23 	bl	8006614 <xTaskGetSchedulerState>
 8005bce:	4605      	mov	r5, r0
 8005bd0:	b318      	cbz	r0, 8005c1a <xQueueReceive+0x86>
 8005bd2:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8005bd4:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8005bd8:	f001 f894 	bl	8006d04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bdc:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bde:	b347      	cbz	r7, 8005c32 <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005be0:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005be2:	4631      	mov	r1, r6
 8005be4:	4620      	mov	r0, r4
 8005be6:	f7ff fdc7 	bl	8005778 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bea:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bec:	6923      	ldr	r3, [r4, #16]
 8005bee:	b173      	cbz	r3, 8005c0e <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bf0:	f104 0010 	add.w	r0, r4, #16
 8005bf4:	f000 fc7e 	bl	80064f4 <xTaskRemoveFromEventList>
 8005bf8:	b148      	cbz	r0, 8005c0e <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8005bfa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c02:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005c0e:	f001 f899 	bl	8006d44 <vPortExitCritical>
				return pdPASS;
 8005c12:	2001      	movs	r0, #1
}
 8005c14:	b004      	add	sp, #16
 8005c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c1a:	9b01      	ldr	r3, [sp, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0d9      	beq.n	8005bd4 <xQueueReceive+0x40>
 8005c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	e7fe      	b.n	8005c30 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c32:	9b01      	ldr	r3, [sp, #4]
 8005c34:	b91b      	cbnz	r3, 8005c3e <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8005c36:	f001 f885 	bl	8006d44 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	e7ea      	b.n	8005c14 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8005c3e:	b915      	cbnz	r5, 8005c46 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c40:	a802      	add	r0, sp, #8
 8005c42:	f000 fc99 	bl	8006578 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005c46:	f001 f87d 	bl	8006d44 <vPortExitCritical>
		vTaskSuspendAll();
 8005c4a:	f000 fa9f 	bl	800618c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c4e:	f001 f859 	bl	8006d04 <vPortEnterCritical>
 8005c52:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005c56:	2bff      	cmp	r3, #255	@ 0xff
 8005c58:	d101      	bne.n	8005c5e <xQueueReceive+0xca>
 8005c5a:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 8005c5e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005c62:	2bff      	cmp	r3, #255	@ 0xff
 8005c64:	d101      	bne.n	8005c6a <xQueueReceive+0xd6>
 8005c66:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 8005c6a:	f001 f86b 	bl	8006d44 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c6e:	a901      	add	r1, sp, #4
 8005c70:	a802      	add	r0, sp, #8
 8005c72:	f000 fc8d 	bl	8006590 <xTaskCheckForTimeOut>
 8005c76:	bb00      	cbnz	r0, 8005cba <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f7ff fd3f 	bl	80056fc <prvIsQueueEmpty>
 8005c7e:	b1b0      	cbz	r0, 8005cae <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c80:	9901      	ldr	r1, [sp, #4]
 8005c82:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005c86:	f000 fbfd 	bl	8006484 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f7ff fd89 	bl	80057a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c90:	f000 fb20 	bl	80062d4 <xTaskResumeAll>
 8005c94:	b948      	cbnz	r0, 8005caa <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8005c96:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005c9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c9e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	2501      	movs	r5, #1
 8005cac:	e794      	b.n	8005bd8 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f7ff fd77 	bl	80057a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cb4:	f000 fb0e 	bl	80062d4 <xTaskResumeAll>
 8005cb8:	e7f7      	b.n	8005caa <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f7ff fd71 	bl	80057a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cc0:	f000 fb08 	bl	80062d4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f7ff fd19 	bl	80056fc <prvIsQueueEmpty>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	d0ed      	beq.n	8005caa <xQueueReceive+0x116>
 8005cce:	e7b4      	b.n	8005c3a <xQueueReceive+0xa6>

08005cd0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cd0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005cd2:	4a07      	ldr	r2, [pc, #28]	@ (8005cf0 <vQueueAddToRegistry+0x20>)
	{
 8005cd4:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005cd6:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8005cda:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8005cde:	b91d      	cbnz	r5, 8005ce8 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ce0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ce4:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ce6:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ce8:	3301      	adds	r3, #1
 8005cea:	2b08      	cmp	r3, #8
 8005cec:	d1f3      	bne.n	8005cd6 <vQueueAddToRegistry+0x6>
 8005cee:	e7fa      	b.n	8005ce6 <vQueueAddToRegistry+0x16>
 8005cf0:	24018758 	.word	0x24018758

08005cf4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cf4:	b570      	push	{r4, r5, r6, lr}
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	460d      	mov	r5, r1
 8005cfa:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005cfc:	f001 f802 	bl	8006d04 <vPortEnterCritical>
 8005d00:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005d04:	2bff      	cmp	r3, #255	@ 0xff
 8005d06:	d102      	bne.n	8005d0e <vQueueWaitForMessageRestricted+0x1a>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005d0e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005d12:	2bff      	cmp	r3, #255	@ 0xff
 8005d14:	d102      	bne.n	8005d1c <vQueueWaitForMessageRestricted+0x28>
 8005d16:	2300      	movs	r3, #0
 8005d18:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005d1c:	f001 f812 	bl	8006d44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d20:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005d22:	b92b      	cbnz	r3, 8005d30 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d24:	4632      	mov	r2, r6
 8005d26:	4629      	mov	r1, r5
 8005d28:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005d2c:	f000 fbc4 	bl	80064b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d30:	4620      	mov	r0, r4
	}
 8005d32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8005d36:	f7ff bd34 	b.w	80057a2 <prvUnlockQueue>
	...

08005d3c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d40:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d42:	f000 ffdf 	bl	8006d04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d46:	4b2f      	ldr	r3, [pc, #188]	@ (8005e04 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8005d48:	4e2f      	ldr	r6, [pc, #188]	@ (8005e08 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	4f2f      	ldr	r7, [pc, #188]	@ (8005e0c <prvAddNewTaskToReadyList+0xd0>)
 8005d4e:	3201      	adds	r2, #1
 8005d50:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005d52:	6835      	ldr	r5, [r6, #0]
 8005d54:	2d00      	cmp	r5, #0
 8005d56:	d14a      	bne.n	8005dee <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d58:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d11f      	bne.n	8005da0 <prvAddNewTaskToReadyList+0x64>
 8005d60:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d62:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d64:	4640      	mov	r0, r8
 8005d66:	f7ff fc89 	bl	800567c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d6a:	f108 0814 	add.w	r8, r8, #20
 8005d6e:	2d38      	cmp	r5, #56	@ 0x38
 8005d70:	d1f7      	bne.n	8005d62 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d72:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8005e34 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8005d76:	4d26      	ldr	r5, [pc, #152]	@ (8005e10 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8005d78:	4640      	mov	r0, r8
 8005d7a:	f7ff fc7f 	bl	800567c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f7ff fc7c 	bl	800567c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d84:	4823      	ldr	r0, [pc, #140]	@ (8005e14 <prvAddNewTaskToReadyList+0xd8>)
 8005d86:	f7ff fc79 	bl	800567c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d8a:	4823      	ldr	r0, [pc, #140]	@ (8005e18 <prvAddNewTaskToReadyList+0xdc>)
 8005d8c:	f7ff fc76 	bl	800567c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d90:	4822      	ldr	r0, [pc, #136]	@ (8005e1c <prvAddNewTaskToReadyList+0xe0>)
 8005d92:	f7ff fc73 	bl	800567c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d96:	4b22      	ldr	r3, [pc, #136]	@ (8005e20 <prvAddNewTaskToReadyList+0xe4>)
 8005d98:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d9c:	4b21      	ldr	r3, [pc, #132]	@ (8005e24 <prvAddNewTaskToReadyList+0xe8>)
 8005d9e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8005da0:	4a21      	ldr	r2, [pc, #132]	@ (8005e28 <prvAddNewTaskToReadyList+0xec>)
 8005da2:	6813      	ldr	r3, [r2, #0]
 8005da4:	3301      	adds	r3, #1
 8005da6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005da8:	4a20      	ldr	r2, [pc, #128]	@ (8005e2c <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005daa:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8005dac:	6811      	ldr	r1, [r2, #0]
 8005dae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005db0:	428b      	cmp	r3, r1
 8005db2:	d900      	bls.n	8005db6 <prvAddNewTaskToReadyList+0x7a>
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	2014      	movs	r0, #20
 8005db8:	1d21      	adds	r1, r4, #4
 8005dba:	fb00 7003 	mla	r0, r0, r3, r7
 8005dbe:	f7ff fc6b 	bl	8005698 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005dc2:	f000 ffbf 	bl	8006d44 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8005e30 <prvAddNewTaskToReadyList+0xf4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	b173      	cbz	r3, 8005dea <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005dcc:	6833      	ldr	r3, [r6, #0]
 8005dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dd0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d209      	bcs.n	8005dea <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8005dd6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005dda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dde:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	f3bf 8f6f 	isb	sy
}
 8005dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8005dee:	4b10      	ldr	r3, [pc, #64]	@ (8005e30 <prvAddNewTaskToReadyList+0xf4>)
 8005df0:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005df2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8005df4:	2a00      	cmp	r2, #0
 8005df6:	d1d3      	bne.n	8005da0 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005df8:	6832      	ldr	r2, [r6, #0]
 8005dfa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d8cf      	bhi.n	8005da0 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8005e00:	6034      	str	r4, [r6, #0]
 8005e02:	e7cd      	b.n	8005da0 <prvAddNewTaskToReadyList+0x64>
 8005e04:	240187bc 	.word	0x240187bc
 8005e08:	24018c90 	.word	0x24018c90
 8005e0c:	24018830 	.word	0x24018830
 8005e10:	24018808 	.word	0x24018808
 8005e14:	240187ec 	.word	0x240187ec
 8005e18:	240187d8 	.word	0x240187d8
 8005e1c:	240187c0 	.word	0x240187c0
 8005e20:	24018804 	.word	0x24018804
 8005e24:	24018800 	.word	0x24018800
 8005e28:	240187a0 	.word	0x240187a0
 8005e2c:	240187b4 	.word	0x240187b4
 8005e30:	240187b0 	.word	0x240187b0
 8005e34:	2401881c 	.word	0x2401881c

08005e38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e3a:	4b15      	ldr	r3, [pc, #84]	@ (8005e90 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8005e3c:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e3e:	4d15      	ldr	r5, [pc, #84]	@ (8005e94 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8005e40:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8005e42:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e44:	6828      	ldr	r0, [r5, #0]
 8005e46:	3004      	adds	r0, #4
 8005e48:	f7ff fc48 	bl	80056dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e4c:	1c73      	adds	r3, r6, #1
 8005e4e:	d107      	bne.n	8005e60 <prvAddCurrentTaskToDelayedList+0x28>
 8005e50:	b137      	cbz	r7, 8005e60 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e52:	6829      	ldr	r1, [r5, #0]
 8005e54:	4810      	ldr	r0, [pc, #64]	@ (8005e98 <prvAddCurrentTaskToDelayedList+0x60>)
 8005e56:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e5c:	f7ff bc1c 	b.w	8005698 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e60:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e62:	682b      	ldr	r3, [r5, #0]
 8005e64:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e66:	d307      	bcc.n	8005e78 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e68:	4b0c      	ldr	r3, [pc, #48]	@ (8005e9c <prvAddCurrentTaskToDelayedList+0x64>)
 8005e6a:	6818      	ldr	r0, [r3, #0]
 8005e6c:	6829      	ldr	r1, [r5, #0]
}
 8005e6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e72:	3104      	adds	r1, #4
 8005e74:	f7ff bc1b 	b.w	80056ae <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e78:	4b09      	ldr	r3, [pc, #36]	@ (8005ea0 <prvAddCurrentTaskToDelayedList+0x68>)
 8005e7a:	6818      	ldr	r0, [r3, #0]
 8005e7c:	6829      	ldr	r1, [r5, #0]
 8005e7e:	3104      	adds	r1, #4
 8005e80:	f7ff fc15 	bl	80056ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e84:	4b07      	ldr	r3, [pc, #28]	@ (8005ea4 <prvAddCurrentTaskToDelayedList+0x6c>)
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	42a2      	cmp	r2, r4
 8005e8a:	d900      	bls.n	8005e8e <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8005e8c:	601c      	str	r4, [r3, #0]
}
 8005e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e90:	240187b8 	.word	0x240187b8
 8005e94:	24018c90 	.word	0x24018c90
 8005e98:	240187c0 	.word	0x240187c0
 8005e9c:	24018800 	.word	0x24018800
 8005ea0:	24018804 	.word	0x24018804
 8005ea4:	2401879c 	.word	0x2401879c

08005ea8 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ea8:	4a06      	ldr	r2, [pc, #24]	@ (8005ec4 <prvResetNextTaskUnblockTime+0x1c>)
 8005eaa:	6813      	ldr	r3, [r2, #0]
 8005eac:	6819      	ldr	r1, [r3, #0]
 8005eae:	4b06      	ldr	r3, [pc, #24]	@ (8005ec8 <prvResetNextTaskUnblockTime+0x20>)
 8005eb0:	b919      	cbnz	r1, 8005eba <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8005eb2:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005eb6:	601a      	str	r2, [r3, #0]
}
 8005eb8:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eba:	6812      	ldr	r2, [r2, #0]
 8005ebc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ebe:	68d2      	ldr	r2, [r2, #12]
 8005ec0:	6852      	ldr	r2, [r2, #4]
 8005ec2:	e7f8      	b.n	8005eb6 <prvResetNextTaskUnblockTime+0xe>
 8005ec4:	24018804 	.word	0x24018804
 8005ec8:	2401879c 	.word	0x2401879c

08005ecc <prvDeleteTCB>:
	{
 8005ecc:	b510      	push	{r4, lr}
 8005ece:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ed0:	3054      	adds	r0, #84	@ 0x54
 8005ed2:	f003 f98f 	bl	80091f4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ed6:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 8005eda:	b93b      	cbnz	r3, 8005eec <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8005edc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005ede:	f001 f90f 	bl	8007100 <vPortFree>
				vPortFree( pxTCB );
 8005ee2:	4620      	mov	r0, r4
	}
 8005ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8005ee8:	f001 b90a 	b.w	8007100 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d0f8      	beq.n	8005ee2 <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d008      	beq.n	8005f06 <prvDeleteTCB+0x3a>
 8005ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	e7fe      	b.n	8005f04 <prvDeleteTCB+0x38>
	}
 8005f06:	bd10      	pop	{r4, pc}

08005f08 <prvIdleTask>:
{
 8005f08:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f0a:	4c13      	ldr	r4, [pc, #76]	@ (8005f58 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f0c:	4f13      	ldr	r7, [pc, #76]	@ (8005f5c <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8005f0e:	4d14      	ldr	r5, [pc, #80]	@ (8005f60 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	b973      	cbnz	r3, 8005f32 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f14:	4b13      	ldr	r3, [pc, #76]	@ (8005f64 <prvIdleTask+0x5c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d9f8      	bls.n	8005f0e <prvIdleTask+0x6>
				taskYIELD();
 8005f1c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005f20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f24:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	e7ed      	b.n	8005f0e <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8005f32:	f000 fee7 	bl	8006d04 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f3a:	1d30      	adds	r0, r6, #4
 8005f3c:	f7ff fbce 	bl	80056dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8005f4c:	f000 fefa 	bl	8006d44 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005f50:	4630      	mov	r0, r6
 8005f52:	f7ff ffbb 	bl	8005ecc <prvDeleteTCB>
 8005f56:	e7db      	b.n	8005f10 <prvIdleTask+0x8>
 8005f58:	240187d4 	.word	0x240187d4
 8005f5c:	240187d8 	.word	0x240187d8
 8005f60:	240187bc 	.word	0x240187bc
 8005f64:	24018830 	.word	0x24018830

08005f68 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f6c:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005f6e:	4607      	mov	r7, r0
 8005f70:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f72:	21a5      	movs	r1, #165	@ 0xa5
 8005f74:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005f76:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f78:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005f7a:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f7e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005f80:	f003 f8f4 	bl	800916c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005f86:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f88:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8005f8c:	2d00      	cmp	r5, #0
 8005f8e:	d041      	beq.n	8006014 <prvInitialiseNewTask.constprop.0+0xac>
 8005f90:	1e6b      	subs	r3, r5, #1
 8005f92:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8005f96:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f98:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8005f9c:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8005fa0:	b109      	cbz	r1, 8005fa6 <prvInitialiseNewTask.constprop.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fa2:	42ab      	cmp	r3, r5
 8005fa4:	d1f8      	bne.n	8005f98 <prvInitialiseNewTask.constprop.0+0x30>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fac:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8005fae:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fb2:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fb4:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8005fb6:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fba:	bf28      	it	cs
 8005fbc:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8005fbe:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005fc0:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fc2:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fc6:	f7ff fb64 	bl	8005692 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fca:	f104 0018 	add.w	r0, r4, #24
 8005fce:	f7ff fb60 	bl	8005692 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005fd2:	224c      	movs	r2, #76	@ 0x4c
 8005fd4:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 8005fd6:	f8c4 a0a0 	str.w	sl, [r4, #160]	@ 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005fda:	f104 0054 	add.w	r0, r4, #84	@ 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fde:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fe0:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fe2:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fe4:	f884 a0a4 	strb.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005fe8:	f003 f8c0 	bl	800916c <memset>
 8005fec:	4b0b      	ldr	r3, [pc, #44]	@ (800601c <prvInitialiseNewTask.constprop.0+0xb4>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fee:	4639      	mov	r1, r7
 8005ff0:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ff2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ff6:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005ff8:	33d0      	adds	r3, #208	@ 0xd0
 8005ffa:	65e2      	str	r2, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ffc:	4642      	mov	r2, r8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ffe:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006000:	f000 fe58 	bl	8006cb4 <pxPortInitialiseStack>
 8006004:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8006006:	f1b9 0f00 	cmp.w	r9, #0
 800600a:	d001      	beq.n	8006010 <prvInitialiseNewTask.constprop.0+0xa8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800600c:	f8c9 4000 	str.w	r4, [r9]
}
 8006010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006014:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8006018:	e7c8      	b.n	8005fac <prvInitialiseNewTask.constprop.0+0x44>
 800601a:	bf00      	nop
 800601c:	240292d0 	.word	0x240292d0

08006020 <xTaskCreateStatic>:
	{
 8006020:	b570      	push	{r4, r5, r6, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8006028:	b945      	cbnz	r5, 800603c <xTaskCreateStatic+0x1c>
 800602a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	e7fe      	b.n	800603a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800603c:	b944      	cbnz	r4, 8006050 <xTaskCreateStatic+0x30>
 800603e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	e7fe      	b.n	800604e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006050:	26a8      	movs	r6, #168	@ 0xa8
 8006052:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006054:	9e05      	ldr	r6, [sp, #20]
 8006056:	2ea8      	cmp	r6, #168	@ 0xa8
 8006058:	d008      	beq.n	800606c <xTaskCreateStatic+0x4c>
 800605a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	e7fe      	b.n	800606a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800606c:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800606e:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006070:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006072:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006076:	ad04      	add	r5, sp, #16
 8006078:	9402      	str	r4, [sp, #8]
 800607a:	9501      	str	r5, [sp, #4]
 800607c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800607e:	9500      	str	r5, [sp, #0]
 8006080:	f7ff ff72 	bl	8005f68 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006084:	4620      	mov	r0, r4
 8006086:	f7ff fe59 	bl	8005d3c <prvAddNewTaskToReadyList>
	}
 800608a:	9804      	ldr	r0, [sp, #16]
 800608c:	b006      	add	sp, #24
 800608e:	bd70      	pop	{r4, r5, r6, pc}

08006090 <xTaskCreate>:
	{
 8006090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006094:	4607      	mov	r7, r0
 8006096:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006098:	0090      	lsls	r0, r2, #2
	{
 800609a:	4688      	mov	r8, r1
 800609c:	4616      	mov	r6, r2
 800609e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80060a0:	f000 ff96 	bl	8006fd0 <pvPortMalloc>
			if( pxStack != NULL )
 80060a4:	4605      	mov	r5, r0
 80060a6:	b920      	cbnz	r0, 80060b2 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060a8:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80060ac:	b005      	add	sp, #20
 80060ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80060b2:	20a8      	movs	r0, #168	@ 0xa8
 80060b4:	f000 ff8c 	bl	8006fd0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80060b8:	4604      	mov	r4, r0
 80060ba:	b198      	cbz	r0, 80060e4 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060bc:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 80060be:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060c0:	4632      	mov	r2, r6
 80060c2:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060c4:	f880 30a5 	strb.w	r3, [r0, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060ca:	9002      	str	r0, [sp, #8]
 80060cc:	4638      	mov	r0, r7
 80060ce:	9301      	str	r3, [sp, #4]
 80060d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	464b      	mov	r3, r9
 80060d6:	f7ff ff47 	bl	8005f68 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060da:	4620      	mov	r0, r4
 80060dc:	f7ff fe2e 	bl	8005d3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060e0:	2001      	movs	r0, #1
 80060e2:	e7e3      	b.n	80060ac <xTaskCreate+0x1c>
					vPortFree( pxStack );
 80060e4:	4628      	mov	r0, r5
 80060e6:	f001 f80b 	bl	8007100 <vPortFree>
		if( pxNewTCB != NULL )
 80060ea:	e7dd      	b.n	80060a8 <xTaskCreate+0x18>

080060ec <vTaskStartScheduler>:
{
 80060ec:	b510      	push	{r4, lr}
 80060ee:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060f0:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060f2:	aa07      	add	r2, sp, #28
 80060f4:	a906      	add	r1, sp, #24
 80060f6:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060f8:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060fc:	f7ff faa6 	bl	800564c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006100:	9b05      	ldr	r3, [sp, #20]
 8006102:	9a07      	ldr	r2, [sp, #28]
 8006104:	9302      	str	r3, [sp, #8]
 8006106:	9b06      	ldr	r3, [sp, #24]
 8006108:	4919      	ldr	r1, [pc, #100]	@ (8006170 <vTaskStartScheduler+0x84>)
 800610a:	481a      	ldr	r0, [pc, #104]	@ (8006174 <vTaskStartScheduler+0x88>)
 800610c:	e9cd 4300 	strd	r4, r3, [sp]
 8006110:	4623      	mov	r3, r4
 8006112:	f7ff ff85 	bl	8006020 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006116:	b340      	cbz	r0, 800616a <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 8006118:	f000 fbfa 	bl	8006910 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800611c:	2801      	cmp	r0, #1
 800611e:	d119      	bne.n	8006154 <vTaskStartScheduler+0x68>
 8006120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006130:	4b11      	ldr	r3, [pc, #68]	@ (8006178 <vTaskStartScheduler+0x8c>)
 8006132:	4a12      	ldr	r2, [pc, #72]	@ (800617c <vTaskStartScheduler+0x90>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3354      	adds	r3, #84	@ 0x54
 8006138:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800613a:	f04f 32ff 	mov.w	r2, #4294967295
 800613e:	4b10      	ldr	r3, [pc, #64]	@ (8006180 <vTaskStartScheduler+0x94>)
 8006140:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006142:	4b10      	ldr	r3, [pc, #64]	@ (8006184 <vTaskStartScheduler+0x98>)
 8006144:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006146:	4b10      	ldr	r3, [pc, #64]	@ (8006188 <vTaskStartScheduler+0x9c>)
 8006148:	601c      	str	r4, [r3, #0]
}
 800614a:	b008      	add	sp, #32
 800614c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006150:	f000 be68 	b.w	8006e24 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006154:	3001      	adds	r0, #1
 8006156:	d108      	bne.n	800616a <vTaskStartScheduler+0x7e>
 8006158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	e7fe      	b.n	8006168 <vTaskStartScheduler+0x7c>
}
 800616a:	b008      	add	sp, #32
 800616c:	bd10      	pop	{r4, pc}
 800616e:	bf00      	nop
 8006170:	0800cf0a 	.word	0x0800cf0a
 8006174:	08005f09 	.word	0x08005f09
 8006178:	24018c90 	.word	0x24018c90
 800617c:	24000024 	.word	0x24000024
 8006180:	2401879c 	.word	0x2401879c
 8006184:	240187b0 	.word	0x240187b0
 8006188:	240187b8 	.word	0x240187b8

0800618c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800618c:	4a02      	ldr	r2, [pc, #8]	@ (8006198 <vTaskSuspendAll+0xc>)
 800618e:	6813      	ldr	r3, [r2, #0]
 8006190:	3301      	adds	r3, #1
 8006192:	6013      	str	r3, [r2, #0]
}
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	24018798 	.word	0x24018798

0800619c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800619c:	4b01      	ldr	r3, [pc, #4]	@ (80061a4 <xTaskGetTickCount+0x8>)
 800619e:	6818      	ldr	r0, [r3, #0]
}
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	240187b8 	.word	0x240187b8

080061a8 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061a8:	4b3f      	ldr	r3, [pc, #252]	@ (80062a8 <xTaskIncrementTick+0x100>)
 80061aa:	681b      	ldr	r3, [r3, #0]
{
 80061ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d172      	bne.n	800629a <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061b4:	4b3d      	ldr	r3, [pc, #244]	@ (80062ac <xTaskIncrementTick+0x104>)
 80061b6:	681c      	ldr	r4, [r3, #0]
 80061b8:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80061ba:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80061bc:	b9bc      	cbnz	r4, 80061ee <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80061be:	4b3c      	ldr	r3, [pc, #240]	@ (80062b0 <xTaskIncrementTick+0x108>)
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	6812      	ldr	r2, [r2, #0]
 80061c4:	b142      	cbz	r2, 80061d8 <xTaskIncrementTick+0x30>
 80061c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	e7fe      	b.n	80061d6 <xTaskIncrementTick+0x2e>
 80061d8:	4a36      	ldr	r2, [pc, #216]	@ (80062b4 <xTaskIncrementTick+0x10c>)
 80061da:	6819      	ldr	r1, [r3, #0]
 80061dc:	6810      	ldr	r0, [r2, #0]
 80061de:	6018      	str	r0, [r3, #0]
 80061e0:	6011      	str	r1, [r2, #0]
 80061e2:	4a35      	ldr	r2, [pc, #212]	@ (80062b8 <xTaskIncrementTick+0x110>)
 80061e4:	6813      	ldr	r3, [r2, #0]
 80061e6:	3301      	adds	r3, #1
 80061e8:	6013      	str	r3, [r2, #0]
 80061ea:	f7ff fe5d 	bl	8005ea8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061ee:	4d33      	ldr	r5, [pc, #204]	@ (80062bc <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 80061f0:	f04f 0b00 	mov.w	fp, #0
 80061f4:	4e32      	ldr	r6, [pc, #200]	@ (80062c0 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061f6:	682b      	ldr	r3, [r5, #0]
 80061f8:	4f32      	ldr	r7, [pc, #200]	@ (80062c4 <xTaskIncrementTick+0x11c>)
 80061fa:	429c      	cmp	r4, r3
 80061fc:	d212      	bcs.n	8006224 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	2114      	movs	r1, #20
 8006202:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006204:	434a      	muls	r2, r1
 8006206:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8006208:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800620a:	4a2f      	ldr	r2, [pc, #188]	@ (80062c8 <xTaskIncrementTick+0x120>)
 800620c:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800620e:	bf28      	it	cs
 8006210:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 8006214:	2a00      	cmp	r2, #0
 8006216:	bf18      	it	ne
 8006218:	f04f 0b01 	movne.w	fp, #1
}
 800621c:	4658      	mov	r0, fp
 800621e:	b003      	add	sp, #12
 8006220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006224:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 80062b0 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8006228:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 80062d0 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800622c:	f8d9 2000 	ldr.w	r2, [r9]
 8006230:	6812      	ldr	r2, [r2, #0]
 8006232:	b91a      	cbnz	r2, 800623c <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006234:	f04f 32ff 	mov.w	r2, #4294967295
 8006238:	602a      	str	r2, [r5, #0]
					break;
 800623a:	e7e0      	b.n	80061fe <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800623c:	f8d9 2000 	ldr.w	r2, [r9]
 8006240:	68d2      	ldr	r2, [r2, #12]
 8006242:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006246:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800624a:	428c      	cmp	r4, r1
 800624c:	d201      	bcs.n	8006252 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800624e:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006250:	e7d5      	b.n	80061fe <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006252:	f108 0304 	add.w	r3, r8, #4
 8006256:	4618      	mov	r0, r3
 8006258:	9301      	str	r3, [sp, #4]
 800625a:	f7ff fa3f 	bl	80056dc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800625e:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8006262:	b119      	cbz	r1, 800626c <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006264:	f108 0018 	add.w	r0, r8, #24
 8006268:	f7ff fa38 	bl	80056dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800626c:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8006270:	f8da 1000 	ldr.w	r1, [sl]
 8006274:	4288      	cmp	r0, r1
 8006276:	d901      	bls.n	800627c <xTaskIncrementTick+0xd4>
 8006278:	f8ca 0000 	str.w	r0, [sl]
 800627c:	2314      	movs	r3, #20
 800627e:	9901      	ldr	r1, [sp, #4]
 8006280:	fb03 6000 	mla	r0, r3, r0, r6
 8006284:	f7ff fa08 	bl	8005698 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006288:	6838      	ldr	r0, [r7, #0]
 800628a:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800628e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8006290:	4291      	cmp	r1, r2
 8006292:	bf28      	it	cs
 8006294:	f04f 0b01 	movcs.w	fp, #1
 8006298:	e7c8      	b.n	800622c <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800629a:	4a0c      	ldr	r2, [pc, #48]	@ (80062cc <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800629c:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 80062a0:	6813      	ldr	r3, [r2, #0]
 80062a2:	3301      	adds	r3, #1
 80062a4:	6013      	str	r3, [r2, #0]
 80062a6:	e7b9      	b.n	800621c <xTaskIncrementTick+0x74>
 80062a8:	24018798 	.word	0x24018798
 80062ac:	240187b8 	.word	0x240187b8
 80062b0:	24018804 	.word	0x24018804
 80062b4:	24018800 	.word	0x24018800
 80062b8:	240187a4 	.word	0x240187a4
 80062bc:	2401879c 	.word	0x2401879c
 80062c0:	24018830 	.word	0x24018830
 80062c4:	24018c90 	.word	0x24018c90
 80062c8:	240187a8 	.word	0x240187a8
 80062cc:	240187ac 	.word	0x240187ac
 80062d0:	240187b4 	.word	0x240187b4

080062d4 <xTaskResumeAll>:
{
 80062d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80062d8:	4c30      	ldr	r4, [pc, #192]	@ (800639c <xTaskResumeAll+0xc8>)
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	b943      	cbnz	r3, 80062f0 <xTaskResumeAll+0x1c>
 80062de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	e7fe      	b.n	80062ee <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80062f0:	f000 fd08 	bl	8006d04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80062f4:	6823      	ldr	r3, [r4, #0]
 80062f6:	3b01      	subs	r3, #1
 80062f8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062fa:	6824      	ldr	r4, [r4, #0]
 80062fc:	b12c      	cbz	r4, 800630a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80062fe:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006300:	f000 fd20 	bl	8006d44 <vPortExitCritical>
}
 8006304:	4620      	mov	r0, r4
 8006306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800630a:	4b25      	ldr	r3, [pc, #148]	@ (80063a0 <xTaskResumeAll+0xcc>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0f5      	beq.n	80062fe <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006312:	4d24      	ldr	r5, [pc, #144]	@ (80063a4 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8006314:	4e24      	ldr	r6, [pc, #144]	@ (80063a8 <xTaskResumeAll+0xd4>)
 8006316:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 80063b8 <xTaskResumeAll+0xe4>
 800631a:	e01d      	b.n	8006358 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800631c:	68eb      	ldr	r3, [r5, #12]
 800631e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006320:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006322:	f104 0018 	add.w	r0, r4, #24
 8006326:	f7ff f9d9 	bl	80056dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800632a:	4638      	mov	r0, r7
 800632c:	f7ff f9d6 	bl	80056dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006330:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006332:	6832      	ldr	r2, [r6, #0]
 8006334:	4293      	cmp	r3, r2
 8006336:	d900      	bls.n	800633a <xTaskResumeAll+0x66>
 8006338:	6033      	str	r3, [r6, #0]
 800633a:	2014      	movs	r0, #20
 800633c:	4639      	mov	r1, r7
 800633e:	fb00 8003 	mla	r0, r0, r3, r8
 8006342:	f7ff f9a9 	bl	8005698 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006346:	4b19      	ldr	r3, [pc, #100]	@ (80063ac <xTaskResumeAll+0xd8>)
 8006348:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634e:	429a      	cmp	r2, r3
 8006350:	d302      	bcc.n	8006358 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8006352:	4b17      	ldr	r3, [pc, #92]	@ (80063b0 <xTaskResumeAll+0xdc>)
 8006354:	2201      	movs	r2, #1
 8006356:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1de      	bne.n	800631c <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800635e:	b10c      	cbz	r4, 8006364 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8006360:	f7ff fda2 	bl	8005ea8 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006364:	4d13      	ldr	r5, [pc, #76]	@ (80063b4 <xTaskResumeAll+0xe0>)
 8006366:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8006368:	b144      	cbz	r4, 800637c <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800636a:	4e11      	ldr	r6, [pc, #68]	@ (80063b0 <xTaskResumeAll+0xdc>)
 800636c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800636e:	f7ff ff1b 	bl	80061a8 <xTaskIncrementTick>
 8006372:	b100      	cbz	r0, 8006376 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8006374:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006376:	3c01      	subs	r4, #1
 8006378:	d1f9      	bne.n	800636e <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800637a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800637c:	4b0c      	ldr	r3, [pc, #48]	@ (80063b0 <xTaskResumeAll+0xdc>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0bc      	beq.n	80062fe <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8006384:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006388:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800638c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006398:	2401      	movs	r4, #1
 800639a:	e7b1      	b.n	8006300 <xTaskResumeAll+0x2c>
 800639c:	24018798 	.word	0x24018798
 80063a0:	240187bc 	.word	0x240187bc
 80063a4:	240187ec 	.word	0x240187ec
 80063a8:	240187b4 	.word	0x240187b4
 80063ac:	24018c90 	.word	0x24018c90
 80063b0:	240187a8 	.word	0x240187a8
 80063b4:	240187ac 	.word	0x240187ac
 80063b8:	24018830 	.word	0x24018830

080063bc <vTaskDelay>:
	{
 80063bc:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063be:	b950      	cbnz	r0, 80063d6 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80063c0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80063c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063c8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	f3bf 8f6f 	isb	sy
	}
 80063d4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80063d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006400 <vTaskDelay+0x44>)
 80063d8:	6819      	ldr	r1, [r3, #0]
 80063da:	b141      	cbz	r1, 80063ee <vTaskDelay+0x32>
 80063dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	e7fe      	b.n	80063ec <vTaskDelay+0x30>
			vTaskSuspendAll();
 80063ee:	f7ff fecd 	bl	800618c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063f2:	f7ff fd21 	bl	8005e38 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80063f6:	f7ff ff6d 	bl	80062d4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80063fa:	2800      	cmp	r0, #0
 80063fc:	d0e0      	beq.n	80063c0 <vTaskDelay+0x4>
 80063fe:	e7e9      	b.n	80063d4 <vTaskDelay+0x18>
 8006400:	24018798 	.word	0x24018798

08006404 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006404:	4b19      	ldr	r3, [pc, #100]	@ (800646c <vTaskSwitchContext+0x68>)
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	4b19      	ldr	r3, [pc, #100]	@ (8006470 <vTaskSwitchContext+0x6c>)
{
 800640a:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800640c:	b112      	cbz	r2, 8006414 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800640e:	2201      	movs	r2, #1
 8006410:	601a      	str	r2, [r3, #0]
}
 8006412:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006414:	4d17      	ldr	r5, [pc, #92]	@ (8006474 <vTaskSwitchContext+0x70>)
 8006416:	2614      	movs	r6, #20
		xYieldPending = pdFALSE;
 8006418:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800641a:	4917      	ldr	r1, [pc, #92]	@ (8006478 <vTaskSwitchContext+0x74>)
 800641c:	682a      	ldr	r2, [r5, #0]
 800641e:	fb06 f302 	mul.w	r3, r6, r2
 8006422:	58cc      	ldr	r4, [r1, r3]
 8006424:	18c8      	adds	r0, r1, r3
 8006426:	b1ac      	cbz	r4, 8006454 <vTaskSwitchContext+0x50>
 8006428:	6844      	ldr	r4, [r0, #4]
 800642a:	3308      	adds	r3, #8
 800642c:	6864      	ldr	r4, [r4, #4]
 800642e:	440b      	add	r3, r1
 8006430:	429c      	cmp	r4, r3
 8006432:	6044      	str	r4, [r0, #4]
 8006434:	bf04      	itt	eq
 8006436:	6863      	ldreq	r3, [r4, #4]
 8006438:	6043      	streq	r3, [r0, #4]
 800643a:	2314      	movs	r3, #20
 800643c:	fb03 1102 	mla	r1, r3, r2, r1
 8006440:	684b      	ldr	r3, [r1, #4]
 8006442:	68d9      	ldr	r1, [r3, #12]
 8006444:	4b0d      	ldr	r3, [pc, #52]	@ (800647c <vTaskSwitchContext+0x78>)
 8006446:	6019      	str	r1, [r3, #0]
 8006448:	602a      	str	r2, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a0c      	ldr	r2, [pc, #48]	@ (8006480 <vTaskSwitchContext+0x7c>)
 800644e:	3354      	adds	r3, #84	@ 0x54
 8006450:	6013      	str	r3, [r2, #0]
}
 8006452:	e7de      	b.n	8006412 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006454:	b942      	cbnz	r2, 8006468 <vTaskSwitchContext+0x64>
 8006456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	e7fe      	b.n	8006466 <vTaskSwitchContext+0x62>
 8006468:	3a01      	subs	r2, #1
 800646a:	e7d8      	b.n	800641e <vTaskSwitchContext+0x1a>
 800646c:	24018798 	.word	0x24018798
 8006470:	240187a8 	.word	0x240187a8
 8006474:	240187b4 	.word	0x240187b4
 8006478:	24018830 	.word	0x24018830
 800647c:	24018c90 	.word	0x24018c90
 8006480:	24000024 	.word	0x24000024

08006484 <vTaskPlaceOnEventList>:
{
 8006484:	b510      	push	{r4, lr}
 8006486:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8006488:	b940      	cbnz	r0, 800649c <vTaskPlaceOnEventList+0x18>
 800648a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	e7fe      	b.n	800649a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800649c:	4b05      	ldr	r3, [pc, #20]	@ (80064b4 <vTaskPlaceOnEventList+0x30>)
 800649e:	6819      	ldr	r1, [r3, #0]
 80064a0:	3118      	adds	r1, #24
 80064a2:	f7ff f904 	bl	80056ae <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064a6:	4620      	mov	r0, r4
 80064a8:	2101      	movs	r1, #1
}
 80064aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064ae:	f7ff bcc3 	b.w	8005e38 <prvAddCurrentTaskToDelayedList>
 80064b2:	bf00      	nop
 80064b4:	24018c90 	.word	0x24018c90

080064b8 <vTaskPlaceOnEventListRestricted>:
	{
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	460d      	mov	r5, r1
 80064bc:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80064be:	b940      	cbnz	r0, 80064d2 <vTaskPlaceOnEventListRestricted+0x1a>
 80064c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	e7fe      	b.n	80064d0 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064d2:	4b07      	ldr	r3, [pc, #28]	@ (80064f0 <vTaskPlaceOnEventListRestricted+0x38>)
 80064d4:	6819      	ldr	r1, [r3, #0]
 80064d6:	3118      	adds	r1, #24
 80064d8:	f7ff f8de 	bl	8005698 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80064dc:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80064de:	4621      	mov	r1, r4
 80064e0:	bf0c      	ite	eq
 80064e2:	4628      	moveq	r0, r5
 80064e4:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80064e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80064ec:	f7ff bca4 	b.w	8005e38 <prvAddCurrentTaskToDelayedList>
 80064f0:	24018c90 	.word	0x24018c90

080064f4 <xTaskRemoveFromEventList>:
{
 80064f4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064f6:	68c3      	ldr	r3, [r0, #12]
 80064f8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80064fa:	b944      	cbnz	r4, 800650e <xTaskRemoveFromEventList+0x1a>
 80064fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006500:	f383 8811 	msr	BASEPRI, r3
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	e7fe      	b.n	800650c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800650e:	f104 0518 	add.w	r5, r4, #24
 8006512:	4628      	mov	r0, r5
 8006514:	f7ff f8e2 	bl	80056dc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006518:	4b11      	ldr	r3, [pc, #68]	@ (8006560 <xTaskRemoveFromEventList+0x6c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	b9d3      	cbnz	r3, 8006554 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800651e:	1d25      	adds	r5, r4, #4
 8006520:	4628      	mov	r0, r5
 8006522:	f7ff f8db 	bl	80056dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006526:	4a0f      	ldr	r2, [pc, #60]	@ (8006564 <xTaskRemoveFromEventList+0x70>)
 8006528:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800652a:	6811      	ldr	r1, [r2, #0]
 800652c:	428b      	cmp	r3, r1
 800652e:	d900      	bls.n	8006532 <xTaskRemoveFromEventList+0x3e>
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	2014      	movs	r0, #20
 8006534:	4a0c      	ldr	r2, [pc, #48]	@ (8006568 <xTaskRemoveFromEventList+0x74>)
 8006536:	4629      	mov	r1, r5
 8006538:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800653c:	f7ff f8ac 	bl	8005698 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006540:	4b0a      	ldr	r3, [pc, #40]	@ (800656c <xTaskRemoveFromEventList+0x78>)
 8006542:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006548:	429a      	cmp	r2, r3
 800654a:	d906      	bls.n	800655a <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800654c:	2001      	movs	r0, #1
 800654e:	4b08      	ldr	r3, [pc, #32]	@ (8006570 <xTaskRemoveFromEventList+0x7c>)
 8006550:	6018      	str	r0, [r3, #0]
}
 8006552:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006554:	4629      	mov	r1, r5
 8006556:	4807      	ldr	r0, [pc, #28]	@ (8006574 <xTaskRemoveFromEventList+0x80>)
 8006558:	e7f0      	b.n	800653c <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800655a:	2000      	movs	r0, #0
	return xReturn;
 800655c:	e7f9      	b.n	8006552 <xTaskRemoveFromEventList+0x5e>
 800655e:	bf00      	nop
 8006560:	24018798 	.word	0x24018798
 8006564:	240187b4 	.word	0x240187b4
 8006568:	24018830 	.word	0x24018830
 800656c:	24018c90 	.word	0x24018c90
 8006570:	240187a8 	.word	0x240187a8
 8006574:	240187ec 	.word	0x240187ec

08006578 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006578:	4b03      	ldr	r3, [pc, #12]	@ (8006588 <vTaskInternalSetTimeOutState+0x10>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800657e:	4b03      	ldr	r3, [pc, #12]	@ (800658c <vTaskInternalSetTimeOutState+0x14>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6043      	str	r3, [r0, #4]
}
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	240187a4 	.word	0x240187a4
 800658c:	240187b8 	.word	0x240187b8

08006590 <xTaskCheckForTimeOut>:
{
 8006590:	b570      	push	{r4, r5, r6, lr}
 8006592:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8006594:	4605      	mov	r5, r0
 8006596:	b940      	cbnz	r0, 80065aa <xTaskCheckForTimeOut+0x1a>
 8006598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	e7fe      	b.n	80065a8 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80065aa:	b941      	cbnz	r1, 80065be <xTaskCheckForTimeOut+0x2e>
 80065ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	e7fe      	b.n	80065bc <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80065be:	f000 fba1 	bl	8006d04 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80065c2:	4b0f      	ldr	r3, [pc, #60]	@ (8006600 <xTaskCheckForTimeOut+0x70>)
 80065c4:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	d010      	beq.n	80065ee <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80065cc:	480d      	ldr	r0, [pc, #52]	@ (8006604 <xTaskCheckForTimeOut+0x74>)
 80065ce:	682e      	ldr	r6, [r5, #0]
 80065d0:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80065d2:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80065d4:	4286      	cmp	r6, r0
 80065d6:	d001      	beq.n	80065dc <xTaskCheckForTimeOut+0x4c>
 80065d8:	428a      	cmp	r2, r1
 80065da:	d90f      	bls.n	80065fc <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80065dc:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80065de:	4283      	cmp	r3, r0
 80065e0:	d90a      	bls.n	80065f8 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80065e2:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065e4:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80065e6:	4413      	add	r3, r2
 80065e8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065ea:	f7ff ffc5 	bl	8006578 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80065ee:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80065f0:	f000 fba8 	bl	8006d44 <vPortExitCritical>
}
 80065f4:	4620      	mov	r0, r4
 80065f6:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80065f8:	2300      	movs	r3, #0
 80065fa:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80065fc:	2401      	movs	r4, #1
 80065fe:	e7f7      	b.n	80065f0 <xTaskCheckForTimeOut+0x60>
 8006600:	240187b8 	.word	0x240187b8
 8006604:	240187a4 	.word	0x240187a4

08006608 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006608:	4b01      	ldr	r3, [pc, #4]	@ (8006610 <vTaskMissedYield+0x8>)
 800660a:	2201      	movs	r2, #1
 800660c:	601a      	str	r2, [r3, #0]
}
 800660e:	4770      	bx	lr
 8006610:	240187a8 	.word	0x240187a8

08006614 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006614:	4b05      	ldr	r3, [pc, #20]	@ (800662c <xTaskGetSchedulerState+0x18>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	b133      	cbz	r3, 8006628 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800661a:	4b05      	ldr	r3, [pc, #20]	@ (8006630 <xTaskGetSchedulerState+0x1c>)
 800661c:	6818      	ldr	r0, [r3, #0]
 800661e:	fab0 f080 	clz	r0, r0
 8006622:	0940      	lsrs	r0, r0, #5
 8006624:	0040      	lsls	r0, r0, #1
 8006626:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006628:	2001      	movs	r0, #1
	}
 800662a:	4770      	bx	lr
 800662c:	240187b0 	.word	0x240187b0
 8006630:	24018798 	.word	0x24018798

08006634 <xTaskPriorityDisinherit>:
	{
 8006634:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8006636:	b908      	cbnz	r0, 800663c <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8006638:	2000      	movs	r0, #0
	}
 800663a:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800663c:	4b1b      	ldr	r3, [pc, #108]	@ (80066ac <xTaskPriorityDisinherit+0x78>)
 800663e:	681c      	ldr	r4, [r3, #0]
 8006640:	4284      	cmp	r4, r0
 8006642:	d008      	beq.n	8006656 <xTaskPriorityDisinherit+0x22>
 8006644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	e7fe      	b.n	8006654 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8006656:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8006658:	b943      	cbnz	r3, 800666c <xTaskPriorityDisinherit+0x38>
 800665a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	e7fe      	b.n	800666a <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800666c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800666e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006670:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8006672:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006674:	4291      	cmp	r1, r2
 8006676:	d0df      	beq.n	8006638 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1dd      	bne.n	8006638 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800667c:	1d25      	adds	r5, r4, #4
 800667e:	4628      	mov	r0, r5
 8006680:	f7ff f82c 	bl	80056dc <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006684:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006686:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800668a:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800668c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800668e:	4a08      	ldr	r2, [pc, #32]	@ (80066b0 <xTaskPriorityDisinherit+0x7c>)
 8006690:	6811      	ldr	r1, [r2, #0]
 8006692:	428b      	cmp	r3, r1
 8006694:	d900      	bls.n	8006698 <xTaskPriorityDisinherit+0x64>
 8006696:	6013      	str	r3, [r2, #0]
 8006698:	4a06      	ldr	r2, [pc, #24]	@ (80066b4 <xTaskPriorityDisinherit+0x80>)
 800669a:	2014      	movs	r0, #20
 800669c:	4629      	mov	r1, r5
 800669e:	fb00 2003 	mla	r0, r0, r3, r2
 80066a2:	f7fe fff9 	bl	8005698 <vListInsertEnd>
					xReturn = pdTRUE;
 80066a6:	2001      	movs	r0, #1
		return xReturn;
 80066a8:	e7c7      	b.n	800663a <xTaskPriorityDisinherit+0x6>
 80066aa:	bf00      	nop
 80066ac:	24018c90 	.word	0x24018c90
 80066b0:	240187b4 	.word	0x240187b4
 80066b4:	24018830 	.word	0x24018830

080066b8 <xTaskNotifyWait>:
	{
 80066b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80066bc:	4c22      	ldr	r4, [pc, #136]	@ (8006748 <xTaskNotifyWait+0x90>)
	{
 80066be:	461e      	mov	r6, r3
 80066c0:	4680      	mov	r8, r0
 80066c2:	460f      	mov	r7, r1
 80066c4:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 80066c6:	f000 fb1d 	bl	8006d04 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d018      	beq.n	8006706 <xTaskNotifyWait+0x4e>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80066d4:	6822      	ldr	r2, [r4, #0]
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80066d6:	2101      	movs	r1, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80066d8:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80066dc:	ea23 0308 	bic.w	r3, r3, r8
 80066e0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80066e4:	6823      	ldr	r3, [r4, #0]
 80066e6:	f883 10a4 	strb.w	r1, [r3, #164]	@ 0xa4
				if( xTicksToWait > ( TickType_t ) 0 )
 80066ea:	b166      	cbz	r6, 8006706 <xTaskNotifyWait+0x4e>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066ec:	4630      	mov	r0, r6
 80066ee:	f7ff fba3 	bl	8005e38 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80066f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80066f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 8006706:	f000 fb1d 	bl	8006d44 <vPortExitCritical>
		taskENTER_CRITICAL();
 800670a:	f000 fafb 	bl	8006d04 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800670e:	b11d      	cbz	r5, 8006718 <xTaskNotifyWait+0x60>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006716:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800671e:	2b02      	cmp	r3, #2
 8006720:	d110      	bne.n	8006744 <xTaskNotifyWait+0x8c>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006722:	6822      	ldr	r2, [r4, #0]
				xReturn = pdTRUE;
 8006724:	2501      	movs	r5, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006726:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 800672a:	ea23 0307 	bic.w	r3, r3, r7
 800672e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		taskEXIT_CRITICAL();
 800673a:	f000 fb03 	bl	8006d44 <vPortExitCritical>
	}
 800673e:	4628      	mov	r0, r5
 8006740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				xReturn = pdFALSE;
 8006744:	2500      	movs	r5, #0
 8006746:	e7f4      	b.n	8006732 <xTaskNotifyWait+0x7a>
 8006748:	24018c90 	.word	0x24018c90

0800674c <xTaskGenericNotifyFromISR>:
	{
 800674c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006754:	460d      	mov	r5, r1
 8006756:	4616      	mov	r6, r2
 8006758:	461f      	mov	r7, r3
		configASSERT( xTaskToNotify );
 800675a:	4604      	mov	r4, r0
 800675c:	b940      	cbnz	r0, 8006770 <xTaskGenericNotifyFromISR+0x24>
 800675e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	e7fe      	b.n	800676e <xTaskGenericNotifyFromISR+0x22>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006770:	f000 fbda 	bl	8006f28 <vPortValidateInterruptPriority>
	__asm volatile
 8006774:	f3ef 8911 	mrs	r9, BASEPRI
 8006778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 8006788:	b117      	cbz	r7, 8006790 <xTaskGenericNotifyFromISR+0x44>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800678a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800678e:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006790:	f894 30a4 	ldrb.w	r3, [r4, #164]	@ 0xa4
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006794:	2202      	movs	r2, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006796:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006798:	f884 20a4 	strb.w	r2, [r4, #164]	@ 0xa4
			switch( eAction )
 800679c:	2e04      	cmp	r6, #4
 800679e:	d81f      	bhi.n	80067e0 <xTaskGenericNotifyFromISR+0x94>
 80067a0:	e8df f006 	tbb	[pc, r6]
 80067a4:	1b150308 	.word	0x1b150308
 80067a8:	19          	.byte	0x19
 80067a9:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 80067aa:	f8d4 20a0 	ldr.w	r2, [r4, #160]	@ 0xa0
 80067ae:	432a      	orrs	r2, r5
					( pxTCB->ulNotifiedValue )++;
 80067b0:	f8c4 20a0 	str.w	r2, [r4, #160]	@ 0xa0
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d142      	bne.n	800683e <xTaskGenericNotifyFromISR+0xf2>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80067b8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80067ba:	b1f3      	cbz	r3, 80067fa <xTaskGenericNotifyFromISR+0xae>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	e7fe      	b.n	80067cc <xTaskGenericNotifyFromISR+0x80>
					( pxTCB->ulNotifiedValue )++;
 80067ce:	f8d4 20a0 	ldr.w	r2, [r4, #160]	@ 0xa0
 80067d2:	3201      	adds	r2, #1
 80067d4:	e7ec      	b.n	80067b0 <xTaskGenericNotifyFromISR+0x64>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d03a      	beq.n	8006850 <xTaskGenericNotifyFromISR+0x104>
						pxTCB->ulNotifiedValue = ulValue;
 80067da:	f8c4 50a0 	str.w	r5, [r4, #160]	@ 0xa0
 80067de:	e7e9      	b.n	80067b4 <xTaskGenericNotifyFromISR+0x68>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80067e0:	f8d4 20a0 	ldr.w	r2, [r4, #160]	@ 0xa0
 80067e4:	3201      	adds	r2, #1
 80067e6:	d0e5      	beq.n	80067b4 <xTaskGenericNotifyFromISR+0x68>
 80067e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	e7fe      	b.n	80067f8 <xTaskGenericNotifyFromISR+0xac>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067fa:	4b16      	ldr	r3, [pc, #88]	@ (8006854 <xTaskGenericNotifyFromISR+0x108>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	bb1b      	cbnz	r3, 8006848 <xTaskGenericNotifyFromISR+0xfc>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006800:	1d25      	adds	r5, r4, #4
 8006802:	4628      	mov	r0, r5
 8006804:	f7fe ff6a 	bl	80056dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006808:	4a13      	ldr	r2, [pc, #76]	@ (8006858 <xTaskGenericNotifyFromISR+0x10c>)
 800680a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800680c:	6811      	ldr	r1, [r2, #0]
 800680e:	428b      	cmp	r3, r1
 8006810:	d900      	bls.n	8006814 <xTaskGenericNotifyFromISR+0xc8>
 8006812:	6013      	str	r3, [r2, #0]
 8006814:	2014      	movs	r0, #20
 8006816:	4a11      	ldr	r2, [pc, #68]	@ (800685c <xTaskGenericNotifyFromISR+0x110>)
 8006818:	4629      	mov	r1, r5
 800681a:	fb00 2003 	mla	r0, r0, r3, r2
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800681e:	f7fe ff3b 	bl	8005698 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006822:	4b0f      	ldr	r3, [pc, #60]	@ (8006860 <xTaskGenericNotifyFromISR+0x114>)
 8006824:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800682a:	429a      	cmp	r2, r3
 800682c:	d907      	bls.n	800683e <xTaskGenericNotifyFromISR+0xf2>
					if( pxHigherPriorityTaskWoken != NULL )
 800682e:	2301      	movs	r3, #1
 8006830:	f1b8 0f00 	cmp.w	r8, #0
 8006834:	d001      	beq.n	800683a <xTaskGenericNotifyFromISR+0xee>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006836:	f8c8 3000 	str.w	r3, [r8]
					xYieldPending = pdTRUE;
 800683a:	4a0a      	ldr	r2, [pc, #40]	@ (8006864 <xTaskGenericNotifyFromISR+0x118>)
 800683c:	6013      	str	r3, [r2, #0]
	{
 800683e:	2001      	movs	r0, #1
	__asm volatile
 8006840:	f389 8811 	msr	BASEPRI, r9
	}
 8006844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006848:	f104 0118 	add.w	r1, r4, #24
 800684c:	4806      	ldr	r0, [pc, #24]	@ (8006868 <xTaskGenericNotifyFromISR+0x11c>)
 800684e:	e7e6      	b.n	800681e <xTaskGenericNotifyFromISR+0xd2>
						xReturn = pdFAIL;
 8006850:	2000      	movs	r0, #0
 8006852:	e7f5      	b.n	8006840 <xTaskGenericNotifyFromISR+0xf4>
 8006854:	24018798 	.word	0x24018798
 8006858:	240187b4 	.word	0x240187b4
 800685c:	24018830 	.word	0x24018830
 8006860:	24018c90 	.word	0x24018c90
 8006864:	240187a8 	.word	0x240187a8
 8006868:	240187ec 	.word	0x240187ec

0800686c <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800686c:	4291      	cmp	r1, r2
{
 800686e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006870:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006872:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8006874:	d80a      	bhi.n	800688c <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006876:	1ad2      	subs	r2, r2, r3
 8006878:	6983      	ldr	r3, [r0, #24]
 800687a:	429a      	cmp	r2, r3
 800687c:	d20d      	bcs.n	800689a <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800687e:	1d01      	adds	r1, r0, #4
 8006880:	4b07      	ldr	r3, [pc, #28]	@ (80068a0 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006882:	6818      	ldr	r0, [r3, #0]
 8006884:	f7fe ff13 	bl	80056ae <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006888:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800688a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800688c:	429a      	cmp	r2, r3
 800688e:	d201      	bcs.n	8006894 <prvInsertTimerInActiveList+0x28>
 8006890:	4299      	cmp	r1, r3
 8006892:	d202      	bcs.n	800689a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006894:	1d01      	adds	r1, r0, #4
 8006896:	4b03      	ldr	r3, [pc, #12]	@ (80068a4 <prvInsertTimerInActiveList+0x38>)
 8006898:	e7f3      	b.n	8006882 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800689a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800689c:	e7f5      	b.n	800688a <prvInsertTimerInActiveList+0x1e>
 800689e:	bf00      	nop
 80068a0:	24018d90 	.word	0x24018d90
 80068a4:	24018d94 	.word	0x24018d94

080068a8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80068a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80068aa:	4c11      	ldr	r4, [pc, #68]	@ (80068f0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80068ac:	f000 fa2a 	bl	8006d04 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80068b0:	6825      	ldr	r5, [r4, #0]
 80068b2:	b9bd      	cbnz	r5, 80068e4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80068b4:	4f0f      	ldr	r7, [pc, #60]	@ (80068f4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80068b6:	4e10      	ldr	r6, [pc, #64]	@ (80068f8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80068b8:	4638      	mov	r0, r7
 80068ba:	f7fe fedf 	bl	800567c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80068be:	4630      	mov	r0, r6
 80068c0:	f7fe fedc 	bl	800567c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80068c4:	4b0d      	ldr	r3, [pc, #52]	@ (80068fc <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068c6:	4a0e      	ldr	r2, [pc, #56]	@ (8006900 <prvCheckForValidListAndQueue+0x58>)
 80068c8:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 80068ca:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068cc:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80068ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006904 <prvCheckForValidListAndQueue+0x5c>)
 80068d0:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006908 <prvCheckForValidListAndQueue+0x60>)
 80068d4:	9500      	str	r5, [sp, #0]
 80068d6:	f7fe ffd9 	bl	800588c <xQueueGenericCreateStatic>
 80068da:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068dc:	b110      	cbz	r0, 80068e4 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068de:	490b      	ldr	r1, [pc, #44]	@ (800690c <prvCheckForValidListAndQueue+0x64>)
 80068e0:	f7ff f9f6 	bl	8005cd0 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80068e4:	b003      	add	sp, #12
 80068e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80068ea:	f000 ba2b 	b.w	8006d44 <vPortExitCritical>
 80068ee:	bf00      	nop
 80068f0:	24018d8c 	.word	0x24018d8c
 80068f4:	24018dac 	.word	0x24018dac
 80068f8:	24018d98 	.word	0x24018d98
 80068fc:	24018d94 	.word	0x24018d94
 8006900:	24018ce4 	.word	0x24018ce4
 8006904:	24018d90 	.word	0x24018d90
 8006908:	24018c94 	.word	0x24018c94
 800690c:	0800cf0f 	.word	0x0800cf0f

08006910 <xTimerCreateTimerTask>:
{
 8006910:	b510      	push	{r4, lr}
 8006912:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8006914:	f7ff ffc8 	bl	80068a8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8006918:	4b12      	ldr	r3, [pc, #72]	@ (8006964 <xTimerCreateTimerTask+0x54>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	b1b3      	cbz	r3, 800694c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800691e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006920:	aa07      	add	r2, sp, #28
 8006922:	a906      	add	r1, sp, #24
 8006924:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006926:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800692a:	f7fe fe9b 	bl	8005664 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800692e:	9b05      	ldr	r3, [sp, #20]
 8006930:	9a07      	ldr	r2, [sp, #28]
 8006932:	9302      	str	r3, [sp, #8]
 8006934:	9b06      	ldr	r3, [sp, #24]
 8006936:	490c      	ldr	r1, [pc, #48]	@ (8006968 <xTimerCreateTimerTask+0x58>)
 8006938:	9301      	str	r3, [sp, #4]
 800693a:	2302      	movs	r3, #2
 800693c:	480b      	ldr	r0, [pc, #44]	@ (800696c <xTimerCreateTimerTask+0x5c>)
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	4623      	mov	r3, r4
 8006942:	f7ff fb6d 	bl	8006020 <xTaskCreateStatic>
 8006946:	4b0a      	ldr	r3, [pc, #40]	@ (8006970 <xTimerCreateTimerTask+0x60>)
 8006948:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800694a:	b940      	cbnz	r0, 800695e <xTimerCreateTimerTask+0x4e>
	__asm volatile
 800694c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800695c:	e7fe      	b.n	800695c <xTimerCreateTimerTask+0x4c>
}
 800695e:	2001      	movs	r0, #1
 8006960:	b008      	add	sp, #32
 8006962:	bd10      	pop	{r4, pc}
 8006964:	24018d8c 	.word	0x24018d8c
 8006968:	0800cf14 	.word	0x0800cf14
 800696c:	08006a6d 	.word	0x08006a6d
 8006970:	24018d88 	.word	0x24018d88

08006974 <xTimerGenericCommand>:
{
 8006974:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006976:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8006978:	4604      	mov	r4, r0
{
 800697a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800697c:	b940      	cbnz	r0, 8006990 <xTimerGenericCommand+0x1c>
 800697e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	e7fe      	b.n	800698e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8006990:	4d0c      	ldr	r5, [pc, #48]	@ (80069c4 <xTimerGenericCommand+0x50>)
 8006992:	6828      	ldr	r0, [r5, #0]
 8006994:	b178      	cbz	r0, 80069b6 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006996:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006998:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800699a:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800699e:	dc0c      	bgt.n	80069ba <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069a0:	f7ff fe38 	bl	8006614 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069a4:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069a6:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80069a8:	4669      	mov	r1, sp
 80069aa:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069ac:	bf0c      	ite	eq
 80069ae:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80069b0:	461a      	movne	r2, r3
 80069b2:	f7fe ffe0 	bl	8005976 <xQueueGenericSend>
}
 80069b6:	b004      	add	sp, #16
 80069b8:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80069ba:	2300      	movs	r3, #0
 80069bc:	4669      	mov	r1, sp
 80069be:	f7ff f88c 	bl	8005ada <xQueueGenericSendFromISR>
 80069c2:	e7f8      	b.n	80069b6 <xTimerGenericCommand+0x42>
 80069c4:	24018d8c 	.word	0x24018d8c

080069c8 <prvSampleTimeNow>:
{
 80069c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 80069cc:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8006a68 <prvSampleTimeNow+0xa0>
{
 80069d0:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 80069d2:	f7ff fbe3 	bl	800619c <xTaskGetTickCount>
 80069d6:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 80069d8:	f8d8 3000 	ldr.w	r3, [r8]
 80069dc:	4283      	cmp	r3, r0
 80069de:	d909      	bls.n	80069f4 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069e0:	4f1f      	ldr	r7, [pc, #124]	@ (8006a60 <prvSampleTimeNow+0x98>)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	b96a      	cbnz	r2, 8006a04 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 80069e8:	4a1e      	ldr	r2, [pc, #120]	@ (8006a64 <prvSampleTimeNow+0x9c>)
 80069ea:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 80069f0:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80069f2:	e000      	b.n	80069f6 <prvSampleTimeNow+0x2e>
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 80069f8:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 80069fa:	f8c8 5000 	str.w	r5, [r8]
}
 80069fe:	b002      	add	sp, #8
 8006a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a04:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a06:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a08:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a0c:	f104 0a04 	add.w	sl, r4, #4
 8006a10:	4650      	mov	r0, sl
 8006a12:	f7fe fe63 	bl	80056dc <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a16:	6a23      	ldr	r3, [r4, #32]
 8006a18:	4620      	mov	r0, r4
 8006a1a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a1c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8006a20:	075b      	lsls	r3, r3, #29
 8006a22:	d5de      	bpl.n	80069e2 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a24:	69a3      	ldr	r3, [r4, #24]
 8006a26:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8006a28:	4599      	cmp	r9, r3
 8006a2a:	d206      	bcs.n	8006a3a <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a2c:	4651      	mov	r1, sl
 8006a2e:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a30:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a32:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a34:	f7fe fe3b 	bl	80056ae <vListInsert>
 8006a38:	e7d3      	b.n	80069e2 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	464a      	mov	r2, r9
 8006a3e:	4620      	mov	r0, r4
 8006a40:	4619      	mov	r1, r3
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	f7ff ff96 	bl	8006974 <xTimerGenericCommand>
				configASSERT( xResult );
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	d1ca      	bne.n	80069e2 <prvSampleTimeNow+0x1a>
 8006a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	e7fe      	b.n	8006a5c <prvSampleTimeNow+0x94>
 8006a5e:	bf00      	nop
 8006a60:	24018d94 	.word	0x24018d94
 8006a64:	24018d90 	.word	0x24018d90
 8006a68:	24018d84 	.word	0x24018d84

08006a6c <prvTimerTask>:
{
 8006a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a70:	4d6e      	ldr	r5, [pc, #440]	@ (8006c2c <prvTimerTask+0x1c0>)
{
 8006a72:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a74:	4e6e      	ldr	r6, [pc, #440]	@ (8006c30 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a76:	682b      	ldr	r3, [r5, #0]
 8006a78:	f8d3 8000 	ldr.w	r8, [r3]
 8006a7c:	f1b8 0f00 	cmp.w	r8, #0
 8006a80:	d035      	beq.n	8006aee <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a82:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a84:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a86:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8006a8a:	f7ff fb7f 	bl	800618c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a8e:	a804      	add	r0, sp, #16
 8006a90:	f7ff ff9a 	bl	80069c8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8006a94:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a96:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d169      	bne.n	8006b70 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a9c:	2c00      	cmp	r4, #0
 8006a9e:	d14c      	bne.n	8006b3a <prvTimerTask+0xce>
 8006aa0:	4540      	cmp	r0, r8
 8006aa2:	d350      	bcc.n	8006b46 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8006aa4:	f7ff fc16 	bl	80062d4 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006aae:	1d38      	adds	r0, r7, #4
 8006ab0:	f7fe fe14 	bl	80056dc <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ab4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ab8:	0758      	lsls	r0, r3, #29
 8006aba:	d51a      	bpl.n	8006af2 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006abc:	69b9      	ldr	r1, [r7, #24]
 8006abe:	4643      	mov	r3, r8
 8006ac0:	464a      	mov	r2, r9
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	4441      	add	r1, r8
 8006ac6:	f7ff fed1 	bl	800686c <prvInsertTimerInActiveList>
 8006aca:	b1b0      	cbz	r0, 8006afa <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006acc:	4623      	mov	r3, r4
 8006ace:	4642      	mov	r2, r8
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	9400      	str	r4, [sp, #0]
 8006ad6:	f7ff ff4d 	bl	8006974 <xTimerGenericCommand>
			configASSERT( xResult );
 8006ada:	b970      	cbnz	r0, 8006afa <prvTimerTask+0x8e>
 8006adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	e7fe      	b.n	8006aec <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006aee:	2401      	movs	r4, #1
 8006af0:	e7cb      	b.n	8006a8a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006af2:	f023 0301 	bic.w	r3, r3, #1
 8006af6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	4638      	mov	r0, r7
 8006afe:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b00:	2200      	movs	r2, #0
 8006b02:	a904      	add	r1, sp, #16
 8006b04:	6830      	ldr	r0, [r6, #0]
 8006b06:	f7ff f845 	bl	8005b94 <xQueueReceive>
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	d0b3      	beq.n	8006a76 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b0e:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b10:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	db2f      	blt.n	8006b76 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b16:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b18:	6963      	ldr	r3, [r4, #20]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d132      	bne.n	8006b84 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b1e:	a803      	add	r0, sp, #12
 8006b20:	f7ff ff52 	bl	80069c8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8006b24:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b26:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8006b28:	2b09      	cmp	r3, #9
 8006b2a:	d8e9      	bhi.n	8006b00 <prvTimerTask+0x94>
 8006b2c:	e8df f003 	tbb	[pc, r3]
 8006b30:	572e2e2e 	.word	0x572e2e2e
 8006b34:	2e2e765e 	.word	0x2e2e765e
 8006b38:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8006c34 <prvTimerTask+0x1c8>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681c      	ldr	r4, [r3, #0]
 8006b40:	fab4 f484 	clz	r4, r4
 8006b44:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b46:	4622      	mov	r2, r4
 8006b48:	eba8 0109 	sub.w	r1, r8, r9
 8006b4c:	6830      	ldr	r0, [r6, #0]
 8006b4e:	f7ff f8d1 	bl	8005cf4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b52:	f7ff fbbf 	bl	80062d4 <xTaskResumeAll>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d1d2      	bne.n	8006b00 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 8006b5a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b62:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	e7c7      	b.n	8006b00 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8006b70:	f7ff fbb0 	bl	80062d4 <xTaskResumeAll>
}
 8006b74:	e7c4      	b.n	8006b00 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b76:	9b05      	ldr	r3, [sp, #20]
 8006b78:	9907      	ldr	r1, [sp, #28]
 8006b7a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b7c:	9b04      	ldr	r3, [sp, #16]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	dbbe      	blt.n	8006b00 <prvTimerTask+0x94>
 8006b82:	e7c8      	b.n	8006b16 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b84:	1d20      	adds	r0, r4, #4
 8006b86:	f7fe fda9 	bl	80056dc <uxListRemove>
 8006b8a:	e7c8      	b.n	8006b1e <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b8c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b90:	4620      	mov	r0, r4
 8006b92:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b94:	f043 0301 	orr.w	r3, r3, #1
 8006b98:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b9c:	9b05      	ldr	r3, [sp, #20]
 8006b9e:	4419      	add	r1, r3
 8006ba0:	f7ff fe64 	bl	800686c <prvInsertTimerInActiveList>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d0ab      	beq.n	8006b00 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ba8:	6a23      	ldr	r3, [r4, #32]
 8006baa:	4620      	mov	r0, r4
 8006bac:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006bae:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8006bb2:	0759      	lsls	r1, r3, #29
 8006bb4:	d5a4      	bpl.n	8006b00 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006bb6:	69a2      	ldr	r2, [r4, #24]
 8006bb8:	2300      	movs	r3, #0
 8006bba:	9905      	ldr	r1, [sp, #20]
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	440a      	add	r2, r1
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	f7ff fed6 	bl	8006974 <xTimerGenericCommand>
							configASSERT( xResult );
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	d199      	bne.n	8006b00 <prvTimerTask+0x94>
 8006bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd0:	f383 8811 	msr	BASEPRI, r3
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	e7fe      	b.n	8006bdc <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bde:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006be2:	f023 0301 	bic.w	r3, r3, #1
 8006be6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8006bea:	e789      	b.n	8006b00 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006bec:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8006bf0:	f043 0301 	orr.w	r3, r3, #1
 8006bf4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006bf8:	9905      	ldr	r1, [sp, #20]
 8006bfa:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006bfc:	b941      	cbnz	r1, 8006c10 <prvTimerTask+0x1a4>
 8006bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	e7fe      	b.n	8006c0e <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c10:	4603      	mov	r3, r0
 8006c12:	4401      	add	r1, r0
 8006c14:	4620      	mov	r0, r4
 8006c16:	f7ff fe29 	bl	800686c <prvInsertTimerInActiveList>
					break;
 8006c1a:	e771      	b.n	8006b00 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006c1c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8006c20:	079a      	lsls	r2, r3, #30
 8006c22:	d4de      	bmi.n	8006be2 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8006c24:	4620      	mov	r0, r4
 8006c26:	f000 fa6b 	bl	8007100 <vPortFree>
 8006c2a:	e769      	b.n	8006b00 <prvTimerTask+0x94>
 8006c2c:	24018d94 	.word	0x24018d94
 8006c30:	24018d8c 	.word	0x24018d8c
 8006c34:	24018d90 	.word	0x24018d90

08006c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c38:	4808      	ldr	r0, [pc, #32]	@ (8006c5c <prvPortStartFirstTask+0x24>)
 8006c3a:	6800      	ldr	r0, [r0, #0]
 8006c3c:	6800      	ldr	r0, [r0, #0]
 8006c3e:	f380 8808 	msr	MSP, r0
 8006c42:	f04f 0000 	mov.w	r0, #0
 8006c46:	f380 8814 	msr	CONTROL, r0
 8006c4a:	b662      	cpsie	i
 8006c4c:	b661      	cpsie	f
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	df00      	svc	0
 8006c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c5a:	0000      	.short	0x0000
 8006c5c:	e000ed08 	.word	0xe000ed08

08006c60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c60:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006c70 <vPortEnableVFP+0x10>
 8006c64:	6801      	ldr	r1, [r0, #0]
 8006c66:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006c6a:	6001      	str	r1, [r0, #0]
 8006c6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c6e:	0000      	.short	0x0000
 8006c70:	e000ed88 	.word	0xe000ed88

08006c74 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8006c74:	2300      	movs	r3, #0
{
 8006c76:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006c78:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8006c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cb0 <prvTaskExitError+0x3c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	d008      	beq.n	8006c94 <prvTaskExitError+0x20>
 8006c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	e7fe      	b.n	8006c92 <prvTaskExitError+0x1e>
 8006c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8006ca4:	9b01      	ldr	r3, [sp, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0fc      	beq.n	8006ca4 <prvTaskExitError+0x30>
}
 8006caa:	b002      	add	sp, #8
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	24000010 	.word	0x24000010

08006cb4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006cb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006cb8:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006cbc:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8006cc0:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006cc2:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006cc4:	4b03      	ldr	r3, [pc, #12]	@ (8006cd4 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006cc6:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006cc8:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006cca:	f06f 0302 	mvn.w	r3, #2
 8006cce:	6203      	str	r3, [r0, #32]
}
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	08006c75 	.word	0x08006c75
	...

08006ce0 <SVC_Handler>:
	__asm volatile (
 8006ce0:	4b07      	ldr	r3, [pc, #28]	@ (8006d00 <pxCurrentTCBConst2>)
 8006ce2:	6819      	ldr	r1, [r3, #0]
 8006ce4:	6808      	ldr	r0, [r1, #0]
 8006ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cea:	f380 8809 	msr	PSP, r0
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f04f 0000 	mov.w	r0, #0
 8006cf6:	f380 8811 	msr	BASEPRI, r0
 8006cfa:	4770      	bx	lr
 8006cfc:	f3af 8000 	nop.w

08006d00 <pxCurrentTCBConst2>:
 8006d00:	24018c90 	.word	0x24018c90

08006d04 <vPortEnterCritical>:
 8006d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006d14:	4a0a      	ldr	r2, [pc, #40]	@ (8006d40 <vPortEnterCritical+0x3c>)
 8006d16:	6813      	ldr	r3, [r2, #0]
 8006d18:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8006d1a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8006d1c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8006d1e:	d10e      	bne.n	8006d3e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d20:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006d24:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	b143      	cbz	r3, 8006d3e <vPortEnterCritical+0x3a>
 8006d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	e7fe      	b.n	8006d3c <vPortEnterCritical+0x38>
}
 8006d3e:	4770      	bx	lr
 8006d40:	24000010 	.word	0x24000010

08006d44 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006d44:	4a08      	ldr	r2, [pc, #32]	@ (8006d68 <vPortExitCritical+0x24>)
 8006d46:	6813      	ldr	r3, [r2, #0]
 8006d48:	b943      	cbnz	r3, 8006d5c <vPortExitCritical+0x18>
 8006d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	e7fe      	b.n	8006d5a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d60:	b90b      	cbnz	r3, 8006d66 <vPortExitCritical+0x22>
	__asm volatile
 8006d62:	f383 8811 	msr	BASEPRI, r3
}
 8006d66:	4770      	bx	lr
 8006d68:	24000010 	.word	0x24000010
 8006d6c:	00000000 	.word	0x00000000

08006d70 <PendSV_Handler>:
	__asm volatile
 8006d70:	f3ef 8009 	mrs	r0, PSP
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	4b15      	ldr	r3, [pc, #84]	@ (8006dd0 <pxCurrentTCBConst>)
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	f01e 0f10 	tst.w	lr, #16
 8006d80:	bf08      	it	eq
 8006d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d8a:	6010      	str	r0, [r2, #0]
 8006d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006d94:	f380 8811 	msr	BASEPRI, r0
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f7ff fb30 	bl	8006404 <vTaskSwitchContext>
 8006da4:	f04f 0000 	mov.w	r0, #0
 8006da8:	f380 8811 	msr	BASEPRI, r0
 8006dac:	bc09      	pop	{r0, r3}
 8006dae:	6819      	ldr	r1, [r3, #0]
 8006db0:	6808      	ldr	r0, [r1, #0]
 8006db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db6:	f01e 0f10 	tst.w	lr, #16
 8006dba:	bf08      	it	eq
 8006dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006dc0:	f380 8809 	msr	PSP, r0
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	f3af 8000 	nop.w

08006dd0 <pxCurrentTCBConst>:
 8006dd0:	24018c90 	.word	0x24018c90

08006dd4 <xPortSysTickHandler>:
{
 8006dd4:	b508      	push	{r3, lr}
	__asm volatile
 8006dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dda:	f383 8811 	msr	BASEPRI, r3
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006de6:	f7ff f9df 	bl	80061a8 <xTaskIncrementTick>
 8006dea:	b128      	cbz	r0, 8006df8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006dec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006df0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006df4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f383 8811 	msr	BASEPRI, r3
}
 8006dfe:	bd08      	pop	{r3, pc}

08006e00 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e00:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8006e04:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e06:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e0a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e0c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e0e:	4b04      	ldr	r3, [pc, #16]	@ (8006e20 <vPortSetupTimerInterrupt+0x20>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e16:	3b01      	subs	r3, #1
 8006e18:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e1a:	2307      	movs	r3, #7
 8006e1c:	6113      	str	r3, [r2, #16]
}
 8006e1e:	4770      	bx	lr
 8006e20:	24000004 	.word	0x24000004

08006e24 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e24:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8006e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e2a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8006e2e:	4a38      	ldr	r2, [pc, #224]	@ (8006f10 <xPortStartScheduler+0xec>)
 8006e30:	4291      	cmp	r1, r2
 8006e32:	d108      	bne.n	8006e46 <xPortStartScheduler+0x22>
	__asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	e7fe      	b.n	8006e44 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e46:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8006e4a:	4b32      	ldr	r3, [pc, #200]	@ (8006f14 <xPortStartScheduler+0xf0>)
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d108      	bne.n	8006e62 <xPortStartScheduler+0x3e>
 8006e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e54:	f383 8811 	msr	BASEPRI, r3
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	e7fe      	b.n	8006e60 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e62:	4b2d      	ldr	r3, [pc, #180]	@ (8006f18 <xPortStartScheduler+0xf4>)
 8006e64:	781a      	ldrb	r2, [r3, #0]
 8006e66:	b2d2      	uxtb	r2, r2
 8006e68:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e6a:	22ff      	movs	r2, #255	@ 0xff
 8006e6c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e6e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e70:	4a2a      	ldr	r2, [pc, #168]	@ (8006f1c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e78:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006e7c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006e80:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e82:	2307      	movs	r3, #7
 8006e84:	4a26      	ldr	r2, [pc, #152]	@ (8006f20 <xPortStartScheduler+0xfc>)
 8006e86:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e88:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8006e8c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e8e:	0609      	lsls	r1, r1, #24
 8006e90:	d40a      	bmi.n	8006ea8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d011      	beq.n	8006eba <xPortStartScheduler+0x96>
 8006e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	e7fe      	b.n	8006ea6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006eac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006eb0:	005b      	lsls	r3, r3, #1
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	f88d 3003 	strb.w	r3, [sp, #3]
 8006eb8:	e7e6      	b.n	8006e88 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006eba:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ebe:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 8006ec2:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ec4:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ec6:	9b01      	ldr	r3, [sp, #4]
 8006ec8:	4a13      	ldr	r2, [pc, #76]	@ (8006f18 <xPortStartScheduler+0xf4>)
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ece:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8006ed2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ed6:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006eda:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8006ede:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006ee2:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8006ee6:	f7ff ff8b 	bl	8006e00 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006eea:	4b0e      	ldr	r3, [pc, #56]	@ (8006f24 <xPortStartScheduler+0x100>)
 8006eec:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8006eee:	f7ff feb7 	bl	8006c60 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ef2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8006ef6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006efa:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8006efe:	f7ff fe9b 	bl	8006c38 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006f02:	f7ff fa7f 	bl	8006404 <vTaskSwitchContext>
}
 8006f06:	4628      	mov	r0, r5
	prvTaskExitError();
 8006f08:	f7ff feb4 	bl	8006c74 <prvTaskExitError>
}
 8006f0c:	b003      	add	sp, #12
 8006f0e:	bd30      	pop	{r4, r5, pc}
 8006f10:	410fc271 	.word	0x410fc271
 8006f14:	410fc270 	.word	0x410fc270
 8006f18:	e000e400 	.word	0xe000e400
 8006f1c:	24018dc4 	.word	0x24018dc4
 8006f20:	24018dc0 	.word	0x24018dc0
 8006f24:	24000010 	.word	0x24000010

08006f28 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f28:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f2c:	2b0f      	cmp	r3, #15
 8006f2e:	d90e      	bls.n	8006f4e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f30:	4a11      	ldr	r2, [pc, #68]	@ (8006f78 <vPortValidateInterruptPriority+0x50>)
 8006f32:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f34:	4a11      	ldr	r2, [pc, #68]	@ (8006f7c <vPortValidateInterruptPriority+0x54>)
 8006f36:	7812      	ldrb	r2, [r2, #0]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d908      	bls.n	8006f4e <vPortValidateInterruptPriority+0x26>
 8006f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	e7fe      	b.n	8006f4c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f4e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006f52:	4a0b      	ldr	r2, [pc, #44]	@ (8006f80 <vPortValidateInterruptPriority+0x58>)
 8006f54:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8006f58:	6812      	ldr	r2, [r2, #0]
 8006f5a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d908      	bls.n	8006f74 <vPortValidateInterruptPriority+0x4c>
 8006f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	e7fe      	b.n	8006f72 <vPortValidateInterruptPriority+0x4a>
	}
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	e000e3f0 	.word	0xe000e3f0
 8006f7c:	24018dc4 	.word	0x24018dc4
 8006f80:	24018dc0 	.word	0x24018dc0

08006f84 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f84:	4b10      	ldr	r3, [pc, #64]	@ (8006fc8 <prvInsertBlockIntoFreeList+0x44>)
{
 8006f86:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f88:	461a      	mov	r2, r3
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4283      	cmp	r3, r0
 8006f8e:	d3fb      	bcc.n	8006f88 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f90:	6854      	ldr	r4, [r2, #4]
 8006f92:	1911      	adds	r1, r2, r4
 8006f94:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f96:	bf01      	itttt	eq
 8006f98:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 8006f9a:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f9c:	1909      	addeq	r1, r1, r4
 8006f9e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fa0:	6844      	ldr	r4, [r0, #4]
 8006fa2:	1901      	adds	r1, r0, r4
 8006fa4:	428b      	cmp	r3, r1
 8006fa6:	d10c      	bne.n	8006fc2 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006fa8:	4908      	ldr	r1, [pc, #32]	@ (8006fcc <prvInsertBlockIntoFreeList+0x48>)
 8006faa:	6809      	ldr	r1, [r1, #0]
 8006fac:	428b      	cmp	r3, r1
 8006fae:	d003      	beq.n	8006fb8 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006fb0:	6859      	ldr	r1, [r3, #4]
 8006fb2:	4421      	add	r1, r4
 8006fb4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006fb6:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fb8:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fba:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fbc:	bf18      	it	ne
 8006fbe:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fc0:	bd10      	pop	{r4, pc}
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	e7f8      	b.n	8006fb8 <prvInsertBlockIntoFreeList+0x34>
 8006fc6:	bf00      	nop
 8006fc8:	24018de0 	.word	0x24018de0
 8006fcc:	24018ddc 	.word	0x24018ddc

08006fd0 <pvPortMalloc>:
{
 8006fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006fd6:	f7ff f8d9 	bl	800618c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006fda:	4942      	ldr	r1, [pc, #264]	@ (80070e4 <pvPortMalloc+0x114>)
 8006fdc:	4d42      	ldr	r5, [pc, #264]	@ (80070e8 <pvPortMalloc+0x118>)
 8006fde:	680b      	ldr	r3, [r1, #0]
 8006fe0:	bb0b      	cbnz	r3, 8007026 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8006fe2:	4a42      	ldr	r2, [pc, #264]	@ (80070ec <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006fe4:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fe6:	4e42      	ldr	r6, [pc, #264]	@ (80070f0 <pvPortMalloc+0x120>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006fe8:	bf1b      	ittet	ne
 8006fea:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006fec:	f502 3280 	addne.w	r2, r2, #65536	@ 0x10000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ff0:	f44f 3380 	moveq.w	r3, #65536	@ 0x10000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ff4:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ff8:	bf1c      	itt	ne
 8006ffa:	1a13      	subne	r3, r2, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ffc:	4602      	movne	r2, r0
	xStart.xBlockSize = ( size_t ) 0;
 8006ffe:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007000:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007002:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007004:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 8007006:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007008:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800700c:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007010:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8007012:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007014:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007018:	4b36      	ldr	r3, [pc, #216]	@ (80070f4 <pvPortMalloc+0x124>)
 800701a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800701c:	4b36      	ldr	r3, [pc, #216]	@ (80070f8 <pvPortMalloc+0x128>)
 800701e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007020:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007024:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007026:	682e      	ldr	r6, [r5, #0]
 8007028:	4226      	tst	r6, r4
 800702a:	d155      	bne.n	80070d8 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 800702c:	2c00      	cmp	r4, #0
 800702e:	d046      	beq.n	80070be <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 8007030:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007034:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007036:	bf1c      	itt	ne
 8007038:	f023 0307 	bicne.w	r3, r3, #7
 800703c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800703e:	2b00      	cmp	r3, #0
 8007040:	d04a      	beq.n	80070d8 <pvPortMalloc+0x108>
 8007042:	4f2d      	ldr	r7, [pc, #180]	@ (80070f8 <pvPortMalloc+0x128>)
 8007044:	683c      	ldr	r4, [r7, #0]
 8007046:	429c      	cmp	r4, r3
 8007048:	d346      	bcc.n	80070d8 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 800704a:	4a29      	ldr	r2, [pc, #164]	@ (80070f0 <pvPortMalloc+0x120>)
 800704c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800704e:	6868      	ldr	r0, [r5, #4]
 8007050:	4298      	cmp	r0, r3
 8007052:	d204      	bcs.n	800705e <pvPortMalloc+0x8e>
 8007054:	f8d5 c000 	ldr.w	ip, [r5]
 8007058:	f1bc 0f00 	cmp.w	ip, #0
 800705c:	d115      	bne.n	800708a <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800705e:	6809      	ldr	r1, [r1, #0]
 8007060:	42a9      	cmp	r1, r5
 8007062:	d039      	beq.n	80070d8 <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007064:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007066:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800706a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800706c:	1ac2      	subs	r2, r0, r3
 800706e:	2a10      	cmp	r2, #16
 8007070:	d912      	bls.n	8007098 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007072:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007074:	0741      	lsls	r1, r0, #29
 8007076:	d00b      	beq.n	8007090 <pvPortMalloc+0xc0>
 8007078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	e7fe      	b.n	8007088 <pvPortMalloc+0xb8>
					pxPreviousBlock = pxBlock;
 800708a:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800708c:	4665      	mov	r5, ip
 800708e:	e7de      	b.n	800704e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007090:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007092:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007094:	f7ff ff76 	bl	8006f84 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007098:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800709a:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800709c:	4915      	ldr	r1, [pc, #84]	@ (80070f4 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800709e:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070a0:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070a2:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 80070a4:	4a15      	ldr	r2, [pc, #84]	@ (80070fc <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070a6:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 80070a8:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 80070aa:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070ac:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 80070ae:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070b2:	bf38      	it	cc
 80070b4:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070b6:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070ba:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 80070bc:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 80070be:	f7ff f909 	bl	80062d4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070c2:	0763      	lsls	r3, r4, #29
 80070c4:	d00a      	beq.n	80070dc <pvPortMalloc+0x10c>
 80070c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	e7fe      	b.n	80070d6 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 80070d8:	2400      	movs	r4, #0
 80070da:	e7f0      	b.n	80070be <pvPortMalloc+0xee>
}
 80070dc:	4620      	mov	r0, r4
 80070de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e2:	bf00      	nop
 80070e4:	24018ddc 	.word	0x24018ddc
 80070e8:	24018dc8 	.word	0x24018dc8
 80070ec:	24018de8 	.word	0x24018de8
 80070f0:	24018de0 	.word	0x24018de0
 80070f4:	24018dd4 	.word	0x24018dd4
 80070f8:	24018dd8 	.word	0x24018dd8
 80070fc:	24018dd0 	.word	0x24018dd0

08007100 <vPortFree>:
{
 8007100:	b510      	push	{r4, lr}
	if( pv != NULL )
 8007102:	4604      	mov	r4, r0
 8007104:	b390      	cbz	r0, 800716c <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007106:	4a1a      	ldr	r2, [pc, #104]	@ (8007170 <vPortFree+0x70>)
 8007108:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800710c:	6812      	ldr	r2, [r2, #0]
 800710e:	4213      	tst	r3, r2
 8007110:	d108      	bne.n	8007124 <vPortFree+0x24>
 8007112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	e7fe      	b.n	8007122 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007124:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007128:	b141      	cbz	r1, 800713c <vPortFree+0x3c>
 800712a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	e7fe      	b.n	800713a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800713c:	ea23 0302 	bic.w	r3, r3, r2
 8007140:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007144:	f7ff f822 	bl	800618c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007148:	4a0a      	ldr	r2, [pc, #40]	@ (8007174 <vPortFree+0x74>)
 800714a:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800714e:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007152:	6811      	ldr	r1, [r2, #0]
 8007154:	440b      	add	r3, r1
 8007156:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007158:	f7ff ff14 	bl	8006f84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800715c:	4a06      	ldr	r2, [pc, #24]	@ (8007178 <vPortFree+0x78>)
 800715e:	6813      	ldr	r3, [r2, #0]
 8007160:	3301      	adds	r3, #1
}
 8007162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8007166:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8007168:	f7ff b8b4 	b.w	80062d4 <xTaskResumeAll>
}
 800716c:	bd10      	pop	{r4, pc}
 800716e:	bf00      	nop
 8007170:	24018dc8 	.word	0x24018dc8
 8007174:	24018dd8 	.word	0x24018dd8
 8007178:	24018dcc 	.word	0x24018dcc

0800717c <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800717c:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
 800717e:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
 8007180:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8007182:	bf9c      	itt	ls
 8007184:	6881      	ldrls	r1, [r0, #8]
 8007186:	185b      	addls	r3, r3, r1
  } else {
    r = RdOff - WrOff - 1u;
 8007188:	3b01      	subs	r3, #1
 800718a:	1a98      	subs	r0, r3, r2
  }
  return r;
}
 800718c:	4770      	bx	lr

0800718e <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800718e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
 8007192:	e9d0 8402 	ldrd	r8, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8007196:	4605      	mov	r5, r0
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8007198:	6840      	ldr	r0, [r0, #4]
  Rem = pRing->SizeOfBuffer - WrOff;
 800719a:	eba8 0604 	sub.w	r6, r8, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800719e:	460f      	mov	r7, r1
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80071a0:	4420      	add	r0, r4
    pRing->WrOff = WrOff + NumBytes;
 80071a2:	4414      	add	r4, r2
  if (Rem > NumBytes) {
 80071a4:	4296      	cmp	r6, r2
 80071a6:	d906      	bls.n	80071b6 <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80071a8:	f002 f8f5 	bl	8009396 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80071ac:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80071b0:	60ec      	str	r4, [r5, #12]
}
 80071b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NumBytesAtOnce = NumBytes - Rem;
 80071b6:	eba4 0408 	sub.w	r4, r4, r8
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80071ba:	4632      	mov	r2, r6
 80071bc:	f002 f8eb 	bl	8009396 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80071c0:	19b9      	adds	r1, r7, r6
 80071c2:	4622      	mov	r2, r4
 80071c4:	6868      	ldr	r0, [r5, #4]
 80071c6:	e7ef      	b.n	80071a8 <_WriteNoCheck+0x1a>

080071c8 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80071c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071cc:	4606      	mov	r6, r0
 80071ce:	4689      	mov	r9, r1
 80071d0:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
 80071d2:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
 80071d4:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80071d8:	6933      	ldr	r3, [r6, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80071da:	4649      	mov	r1, r9
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80071dc:	68b4      	ldr	r4, [r6, #8]
    if (RdOff > WrOff) {
 80071de:	429d      	cmp	r5, r3
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80071e0:	6870      	ldr	r0, [r6, #4]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80071e2:	bf28      	it	cs
 80071e4:	191b      	addcs	r3, r3, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80071e6:	1b64      	subs	r4, r4, r5
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80071e8:	4428      	add	r0, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80071ea:	42bc      	cmp	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80071ec:	f103 33ff 	add.w	r3, r3, #4294967295
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80071f0:	bf28      	it	cs
 80071f2:	463c      	movcs	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80071f4:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80071f6:	429c      	cmp	r4, r3
 80071f8:	bf28      	it	cs
 80071fa:	461c      	movcs	r4, r3
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80071fc:	4622      	mov	r2, r4
    WrOff           += NumBytesToWrite;
 80071fe:	4425      	add	r5, r4
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8007200:	f002 f8c9 	bl	8009396 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
 8007204:	68b3      	ldr	r3, [r6, #8]
    NumBytesWritten += NumBytesToWrite;
 8007206:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
 8007208:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
 800720a:	1b3f      	subs	r7, r7, r4
      WrOff = 0u;
 800720c:	42ab      	cmp	r3, r5
 800720e:	bf08      	it	eq
 8007210:	2500      	moveq	r5, #0
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007212:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8007216:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
 8007218:	2f00      	cmp	r7, #0
 800721a:	d1dd      	bne.n	80071d8 <_WriteBlocking+0x10>
}
 800721c:	4640      	mov	r0, r8
 800721e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08007224 <_DoInit>:
static void _DoInit(void) {
 8007224:	b508      	push	{r3, lr}
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8007226:	4b14      	ldr	r3, [pc, #80]	@ (8007278 <_DoInit+0x54>)
 8007228:	22a8      	movs	r2, #168	@ 0xa8
 800722a:	2100      	movs	r1, #0
 800722c:	4618      	mov	r0, r3
 800722e:	f001 ff9d 	bl	800916c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8007232:	2203      	movs	r2, #3
  p->aUp[0].sName         = "Terminal";
 8007234:	4911      	ldr	r1, [pc, #68]	@ (800727c <_DoInit+0x58>)
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8007236:	4603      	mov	r3, r0
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8007238:	6102      	str	r2, [r0, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800723a:	6142      	str	r2, [r0, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800723c:	4a10      	ldr	r2, [pc, #64]	@ (8007280 <_DoInit+0x5c>)
  p->aUp[0].sName         = "Terminal";
 800723e:	6181      	str	r1, [r0, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8007240:	61c2      	str	r2, [r0, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8007242:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007246:	6202      	str	r2, [r0, #32]
  p->aUp[0].RdOff         = 0u;
 8007248:	2200      	movs	r2, #0
 800724a:	6282      	str	r2, [r0, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800724c:	6242      	str	r2, [r0, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800724e:	62c2      	str	r2, [r0, #44]	@ 0x2c
  p->aDown[0].sName         = "Terminal";
 8007250:	6601      	str	r1, [r0, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8007252:	490c      	ldr	r1, [pc, #48]	@ (8007284 <_DoInit+0x60>)
 8007254:	6641      	str	r1, [r0, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8007256:	2110      	movs	r1, #16
 8007258:	6681      	str	r1, [r0, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800725a:	6702      	str	r2, [r0, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800725c:	66c2      	str	r2, [r0, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800725e:	6742      	str	r2, [r0, #116]	@ 0x74
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8007260:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8007264:	4908      	ldr	r1, [pc, #32]	@ (8007288 <_DoInit+0x64>)
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8007266:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 800726a:	5498      	strb	r0, [r3, r2]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800726c:	3201      	adds	r2, #1
 800726e:	2a10      	cmp	r2, #16
 8007270:	d1f9      	bne.n	8007266 <_DoInit+0x42>
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8007272:	f3bf 8f5f 	dmb	sy
}
 8007276:	bd08      	pop	{r3, pc}
 8007278:	240291f8 	.word	0x240291f8
 800727c:	0800cf1c 	.word	0x0800cf1c
 8007280:	24028df8 	.word	0x24028df8
 8007284:	24028de8 	.word	0x24028de8
 8007288:	0800d2d0 	.word	0x0800d2d0

0800728c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800728c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800728e:	2718      	movs	r7, #24
 8007290:	4b13      	ldr	r3, [pc, #76]	@ (80072e0 <SEGGER_RTT_WriteNoLock+0x54>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8007292:	460e      	mov	r6, r1
 8007294:	4614      	mov	r4, r2
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007296:	fb00 7507 	mla	r5, r0, r7, r7
 800729a:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800729c:	fb07 3300 	mla	r3, r7, r0, r3
 80072a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d00a      	beq.n	80072bc <SEGGER_RTT_WriteNoLock+0x30>
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d014      	beq.n	80072d4 <SEGGER_RTT_WriteNoLock+0x48>
 80072aa:	b923      	cbnz	r3, 80072b6 <SEGGER_RTT_WriteNoLock+0x2a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80072ac:	4628      	mov	r0, r5
 80072ae:	f7ff ff65 	bl	800717c <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
 80072b2:	4284      	cmp	r4, r0
 80072b4:	d908      	bls.n	80072c8 <SEGGER_RTT_WriteNoLock+0x3c>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
 80072b6:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
 80072b8:	4620      	mov	r0, r4
 80072ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
 80072bc:	4628      	mov	r0, r5
 80072be:	f7ff ff5d 	bl	800717c <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
 80072c2:	4284      	cmp	r4, r0
 80072c4:	bf28      	it	cs
 80072c6:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
 80072c8:	4622      	mov	r2, r4
 80072ca:	4631      	mov	r1, r6
 80072cc:	4628      	mov	r0, r5
 80072ce:	f7ff ff5e 	bl	800718e <_WriteNoCheck>
    break;
 80072d2:	e7f1      	b.n	80072b8 <SEGGER_RTT_WriteNoLock+0x2c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80072d4:	4628      	mov	r0, r5
}
 80072d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80072da:	f7ff bf75 	b.w	80071c8 <_WriteBlocking>
 80072de:	bf00      	nop
 80072e0:	240291f8 	.word	0x240291f8

080072e4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned Status;

  INIT();
 80072e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007314 <SEGGER_RTT_Write+0x30>)
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80072e8:	4604      	mov	r4, r0
 80072ea:	460d      	mov	r5, r1
 80072ec:	4616      	mov	r6, r2
  INIT();
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	2b53      	cmp	r3, #83	@ 0x53
 80072f2:	d001      	beq.n	80072f8 <SEGGER_RTT_Write+0x14>
 80072f4:	f7ff ff96 	bl	8007224 <_DoInit>
  SEGGER_RTT_LOCK();
 80072f8:	f3ef 8711 	mrs	r7, BASEPRI
 80072fc:	f04f 0120 	mov.w	r1, #32
 8007300:	f381 8811 	msr	BASEPRI, r1
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8007304:	4632      	mov	r2, r6
 8007306:	4629      	mov	r1, r5
 8007308:	4620      	mov	r0, r4
 800730a:	f7ff ffbf 	bl	800728c <SEGGER_RTT_WriteNoLock>
  SEGGER_RTT_UNLOCK();
 800730e:	f387 8811 	msr	BASEPRI, r7
  return Status;
}
 8007312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007314:	240291f8 	.word	0x240291f8

08007318 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
 8007318:	f7ff bf84 	b.w	8007224 <_DoInit>

0800731c <_StoreChar>:
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
  unsigned Cnt;

  Cnt = p->Cnt;
 800731c:	6882      	ldr	r2, [r0, #8]
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 800731e:	b510      	push	{r4, lr}
  if ((Cnt + 1u) <= p->BufferSize) {
 8007320:	1c53      	adds	r3, r2, #1
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8007322:	4604      	mov	r4, r0
  if ((Cnt + 1u) <= p->BufferSize) {
 8007324:	6840      	ldr	r0, [r0, #4]
 8007326:	4283      	cmp	r3, r0
 8007328:	d805      	bhi.n	8007336 <_StoreChar+0x1a>
    *(p->pBuffer + Cnt) = c;
 800732a:	6820      	ldr	r0, [r4, #0]
 800732c:	5481      	strb	r1, [r0, r2]
    p->Cnt = Cnt + 1u;
 800732e:	60a3      	str	r3, [r4, #8]
    p->ReturnValue++;
 8007330:	68e3      	ldr	r3, [r4, #12]
 8007332:	3301      	adds	r3, #1
 8007334:	60e3      	str	r3, [r4, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8007336:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 800733a:	429a      	cmp	r2, r3
 800733c:	d10b      	bne.n	8007356 <_StoreChar+0x3a>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 800733e:	6821      	ldr	r1, [r4, #0]
 8007340:	6920      	ldr	r0, [r4, #16]
 8007342:	f7ff ffcf 	bl	80072e4 <SEGGER_RTT_Write>
 8007346:	68a3      	ldr	r3, [r4, #8]
 8007348:	4298      	cmp	r0, r3
      p->ReturnValue = -1;
 800734a:	bf15      	itete	ne
 800734c:	f04f 33ff 	movne.w	r3, #4294967295
    } else {
      p->Cnt = 0u;
 8007350:	2300      	moveq	r3, #0
      p->ReturnValue = -1;
 8007352:	60e3      	strne	r3, [r4, #12]
      p->Cnt = 0u;
 8007354:	60a3      	streq	r3, [r4, #8]
    }
  }
}
 8007356:	bd10      	pop	{r4, pc}

08007358 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8007358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800735c:	4617      	mov	r7, r2
 800735e:	4699      	mov	r9, r3
 8007360:	4606      	mov	r6, r0
 8007362:	4688      	mov	r8, r1
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8007364:	460a      	mov	r2, r1
  Digit = 1u;
  //
  // Get actual field width
  //
  Width = 1u;
 8007366:	f04f 0a01 	mov.w	sl, #1
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 800736a:	e9dd 430a 	ldrd	r4, r3, [sp, #40]	@ 0x28
  while (Number >= Base) {
 800736e:	42ba      	cmp	r2, r7
 8007370:	d212      	bcs.n	8007398 <_PrintUnsigned+0x40>
    Number = (Number / Base);
    Width++;
  }
  if (NumDigits > Width) {
 8007372:	45ca      	cmp	sl, r9
 8007374:	bf38      	it	cc
 8007376:	46ca      	movcc	sl, r9
    Width = NumDigits;
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8007378:	f013 0b01 	ands.w	fp, r3, #1
 800737c:	d101      	bne.n	8007382 <_PrintUnsigned+0x2a>
    if (FieldWidth != 0u) {
 800737e:	b984      	cbnz	r4, 80073a2 <_PrintUnsigned+0x4a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
        c = '0';
      } else {
        c = ' ';
 8007380:	2400      	movs	r4, #0
          break;
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8007382:	68f3      	ldr	r3, [r6, #12]
 8007384:	2b00      	cmp	r3, #0
 8007386:	db3d      	blt.n	8007404 <_PrintUnsigned+0xac>
  Digit = 1u;
 8007388:	2501      	movs	r5, #1
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800738a:	f1b9 0f01 	cmp.w	r9, #1
 800738e:	d91f      	bls.n	80073d0 <_PrintUnsigned+0x78>
        NumDigits--;
 8007390:	f109 39ff 	add.w	r9, r9, #4294967295
        Div = v / Digit;
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
          break;
        }
      }
      Digit *= Base;
 8007394:	437d      	muls	r5, r7
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8007396:	e7f8      	b.n	800738a <_PrintUnsigned+0x32>
    Number = (Number / Base);
 8007398:	fbb2 f2f7 	udiv	r2, r2, r7
    Width++;
 800739c:	f10a 0a01 	add.w	sl, sl, #1
 80073a0:	e7e5      	b.n	800736e <_PrintUnsigned+0x16>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80073a2:	079b      	lsls	r3, r3, #30
 80073a4:	d511      	bpl.n	80073ca <_PrintUnsigned+0x72>
        c = ' ';
 80073a6:	f1b9 0f00 	cmp.w	r9, #0
 80073aa:	bf0c      	ite	eq
 80073ac:	2530      	moveq	r5, #48	@ 0x30
 80073ae:	2520      	movne	r5, #32
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80073b0:	45a2      	cmp	sl, r4
 80073b2:	d2e6      	bcs.n	8007382 <_PrintUnsigned+0x2a>
        _StoreChar(pBufferDesc, c);
 80073b4:	4629      	mov	r1, r5
 80073b6:	4630      	mov	r0, r6
 80073b8:	f7ff ffb0 	bl	800731c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80073bc:	68f3      	ldr	r3, [r6, #12]
        FieldWidth--;
 80073be:	3c01      	subs	r4, #1
        if (pBufferDesc->ReturnValue < 0) {
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	dbde      	blt.n	8007382 <_PrintUnsigned+0x2a>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80073c4:	2c00      	cmp	r4, #0
 80073c6:	d1f3      	bne.n	80073b0 <_PrintUnsigned+0x58>
 80073c8:	e7da      	b.n	8007380 <_PrintUnsigned+0x28>
        c = ' ';
 80073ca:	2520      	movs	r5, #32
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80073cc:	e7f0      	b.n	80073b0 <_PrintUnsigned+0x58>
      Digit *= Base;
 80073ce:	437d      	muls	r5, r7
        Div = v / Digit;
 80073d0:	fbb8 f3f5 	udiv	r3, r8, r5
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80073d4:	429f      	cmp	r7, r3
 80073d6:	d9fa      	bls.n	80073ce <_PrintUnsigned+0x76>
    // Output digits
    //
    do {
      Div = v / Digit;
      v -= Div * Digit;
      _StoreChar(pBufferDesc, _aV2C[Div]);
 80073d8:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 8007424 <_PrintUnsigned+0xcc>
 80073dc:	4630      	mov	r0, r6
      Div = v / Digit;
 80073de:	fbb8 f3f5 	udiv	r3, r8, r5
      _StoreChar(pBufferDesc, _aV2C[Div]);
 80073e2:	f819 1003 	ldrb.w	r1, [r9, r3]
 80073e6:	fb05 8813 	mls	r8, r5, r3, r8
 80073ea:	f7ff ff97 	bl	800731c <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 80073ee:	68f3      	ldr	r3, [r6, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	db03      	blt.n	80073fc <_PrintUnsigned+0xa4>
        break;
      }
      Digit /= Base;
    } while (Digit);
 80073f4:	42bd      	cmp	r5, r7
      Digit /= Base;
 80073f6:	fbb5 f3f7 	udiv	r3, r5, r7
    } while (Digit);
 80073fa:	d205      	bcs.n	8007408 <_PrintUnsigned+0xb0>
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80073fc:	f1bb 0f00 	cmp.w	fp, #0
 8007400:	d000      	beq.n	8007404 <_PrintUnsigned+0xac>
      if (FieldWidth != 0u) {
 8007402:	b95c      	cbnz	r4, 800741c <_PrintUnsigned+0xc4>
          }
        }
      }
    }
  }
}
 8007404:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Digit /= Base;
 8007408:	461d      	mov	r5, r3
 800740a:	e7e7      	b.n	80073dc <_PrintUnsigned+0x84>
          _StoreChar(pBufferDesc, ' ');
 800740c:	2120      	movs	r1, #32
 800740e:	4630      	mov	r0, r6
 8007410:	f7ff ff84 	bl	800731c <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8007414:	68f3      	ldr	r3, [r6, #12]
          FieldWidth--;
 8007416:	3c01      	subs	r4, #1
          if (pBufferDesc->ReturnValue < 0) {
 8007418:	2b00      	cmp	r3, #0
 800741a:	dbf3      	blt.n	8007404 <_PrintUnsigned+0xac>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800741c:	4554      	cmp	r4, sl
 800741e:	d8f5      	bhi.n	800740c <_PrintUnsigned+0xb4>
 8007420:	e7f0      	b.n	8007404 <_PrintUnsigned+0xac>
 8007422:	bf00      	nop
 8007424:	0800d2d1 	.word	0x0800d2d1

08007428 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8007428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742c:	b09b      	sub	sp, #108	@ 0x6c
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
  BufferDesc.Cnt            = 0u;
 800742e:	2300      	movs	r3, #0
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8007430:	460d      	mov	r5, r1
 8007432:	4616      	mov	r6, r2
  BufferDesc.pBuffer        = acBuffer;
 8007434:	f10d 0a28 	add.w	sl, sp, #40	@ 0x28
  BufferDesc.Cnt            = 0u;
 8007438:	2140      	movs	r1, #64	@ 0x40
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 800743a:	9003      	str	r0, [sp, #12]
  BufferDesc.pBuffer        = acBuffer;
 800743c:	f8cd a014 	str.w	sl, [sp, #20]
  BufferDesc.Cnt            = 0u;
 8007440:	e9cd 1306 	strd	r1, r3, [sp, #24]
  BufferDesc.RTTBufferIndex = BufferIndex;
  BufferDesc.ReturnValue    = 0;
 8007444:	e9cd 3008 	strd	r3, r0, [sp, #32]

  do {
    c = *sFormat;
 8007448:	f815 1b01 	ldrb.w	r1, [r5], #1
    sFormat++;
    if (c == 0u) {
 800744c:	b939      	cbnz	r1, 800745e <SEGGER_RTT_vprintf+0x36>
    } else {
      _StoreChar(&BufferDesc, c);
    }
  } while (BufferDesc.ReturnValue >= 0);

  if (BufferDesc.ReturnValue > 0) {
 800744e:	9d08      	ldr	r5, [sp, #32]
 8007450:	2d00      	cmp	r5, #0
 8007452:	f300 812a 	bgt.w	80076aa <SEGGER_RTT_vprintf+0x282>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
  }
  return BufferDesc.ReturnValue;
}
 8007456:	9808      	ldr	r0, [sp, #32]
 8007458:	b01b      	add	sp, #108	@ 0x6c
 800745a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '%') {
 800745e:	2925      	cmp	r1, #37	@ 0x25
 8007460:	f040 80cc 	bne.w	80075fc <SEGGER_RTT_vprintf+0x1d4>
      FormatFlags = 0u;
 8007464:	f04f 0900 	mov.w	r9, #0
 8007468:	e007      	b.n	800747a <SEGGER_RTT_vprintf+0x52>
        switch (c) {
 800746a:	2b30      	cmp	r3, #48	@ 0x30
 800746c:	d10f      	bne.n	800748e <SEGGER_RTT_vprintf+0x66>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800746e:	f049 0902 	orr.w	r9, r9, #2
 8007472:	e001      	b.n	8007478 <SEGGER_RTT_vprintf+0x50>
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8007474:	f049 0901 	orr.w	r9, r9, #1
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8007478:	460d      	mov	r5, r1
        c = *sFormat;
 800747a:	4629      	mov	r1, r5
 800747c:	f811 3b01 	ldrb.w	r3, [r1], #1
        switch (c) {
 8007480:	2b2d      	cmp	r3, #45	@ 0x2d
 8007482:	d0f7      	beq.n	8007474 <SEGGER_RTT_vprintf+0x4c>
 8007484:	d8f1      	bhi.n	800746a <SEGGER_RTT_vprintf+0x42>
 8007486:	2b23      	cmp	r3, #35	@ 0x23
 8007488:	d013      	beq.n	80074b2 <SEGGER_RTT_vprintf+0x8a>
 800748a:	2b2b      	cmp	r3, #43	@ 0x2b
 800748c:	d00e      	beq.n	80074ac <SEGGER_RTT_vprintf+0x84>
 800748e:	2400      	movs	r4, #0
        c = *sFormat;
 8007490:	4629      	mov	r1, r5
 8007492:	f811 3b01 	ldrb.w	r3, [r1], #1
        if ((c < '0') || (c > '9')) {
 8007496:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 800749a:	2809      	cmp	r0, #9
 800749c:	d80c      	bhi.n	80074b8 <SEGGER_RTT_vprintf+0x90>
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 800749e:	220a      	movs	r2, #10
        sFormat++;
 80074a0:	460d      	mov	r5, r1
 80074a2:	fb02 3304 	mla	r3, r2, r4, r3
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 80074a6:	f1a3 0430 	sub.w	r4, r3, #48	@ 0x30
        c = *sFormat;
 80074aa:	e7f1      	b.n	8007490 <SEGGER_RTT_vprintf+0x68>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80074ac:	f049 0904 	orr.w	r9, r9, #4
 80074b0:	e7e2      	b.n	8007478 <SEGGER_RTT_vprintf+0x50>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80074b2:	f049 0908 	orr.w	r9, r9, #8
 80074b6:	e7df      	b.n	8007478 <SEGGER_RTT_vprintf+0x50>
      if (c == '.') {
 80074b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80074ba:	d139      	bne.n	8007530 <SEGGER_RTT_vprintf+0x108>
        if (*sFormat == '*') {
 80074bc:	786b      	ldrb	r3, [r5, #1]
 80074be:	2b2a      	cmp	r3, #42	@ 0x2a
 80074c0:	d121      	bne.n	8007506 <SEGGER_RTT_vprintf+0xde>
          Precision = va_arg(*pParamList, int);
 80074c2:	6833      	ldr	r3, [r6, #0]
          sFormat++;
 80074c4:	3502      	adds	r5, #2
          PrecisionSet = 1;
 80074c6:	2701      	movs	r7, #1
          Precision = va_arg(*pParamList, int);
 80074c8:	1d19      	adds	r1, r3, #4
 80074ca:	f8d3 b000 	ldr.w	fp, [r3]
 80074ce:	6031      	str	r1, [r6, #0]
      c = *sFormat;
 80074d0:	4628      	mov	r0, r5
 80074d2:	f810 1b01 	ldrb.w	r1, [r0], #1
        if ((c == 'l') || (c == 'h')) {
 80074d6:	f001 0cfb 	and.w	ip, r1, #251	@ 0xfb
          sFormat++;
 80074da:	4605      	mov	r5, r0
        if ((c == 'l') || (c == 'h')) {
 80074dc:	f1bc 0f68 	cmp.w	ip, #104	@ 0x68
 80074e0:	d0f7      	beq.n	80074d2 <SEGGER_RTT_vprintf+0xaa>
      switch (c) {
 80074e2:	2978      	cmp	r1, #120	@ 0x78
 80074e4:	d80b      	bhi.n	80074fe <SEGGER_RTT_vprintf+0xd6>
 80074e6:	296f      	cmp	r1, #111	@ 0x6f
 80074e8:	d826      	bhi.n	8007538 <SEGGER_RTT_vprintf+0x110>
 80074ea:	2963      	cmp	r1, #99	@ 0x63
 80074ec:	f000 8082 	beq.w	80075f4 <SEGGER_RTT_vprintf+0x1cc>
 80074f0:	d83a      	bhi.n	8007568 <SEGGER_RTT_vprintf+0x140>
 80074f2:	2925      	cmp	r1, #37	@ 0x25
 80074f4:	f000 8082 	beq.w	80075fc <SEGGER_RTT_vprintf+0x1d4>
 80074f8:	2958      	cmp	r1, #88	@ 0x58
 80074fa:	f000 80ac 	beq.w	8007656 <SEGGER_RTT_vprintf+0x22e>
  } while (BufferDesc.ReturnValue >= 0);
 80074fe:	9b08      	ldr	r3, [sp, #32]
 8007500:	2b00      	cmp	r3, #0
 8007502:	daa1      	bge.n	8007448 <SEGGER_RTT_vprintf+0x20>
 8007504:	e7a3      	b.n	800744e <SEGGER_RTT_vprintf+0x26>
      Precision = 0u;
 8007506:	f04f 0b00 	mov.w	fp, #0
        sFormat++;
 800750a:	460d      	mov	r5, r1
            Precision = Precision * 10u + ((unsigned)c - '0');
 800750c:	f04f 0c0a 	mov.w	ip, #10
      PrecisionSet = 0;
 8007510:	465f      	mov	r7, fp
            c = *sFormat;
 8007512:	4628      	mov	r0, r5
 8007514:	f810 1b01 	ldrb.w	r1, [r0], #1
            if ((c < '0') || (c > '9')) {
 8007518:	f1a1 0e30 	sub.w	lr, r1, #48	@ 0x30
 800751c:	f1be 0f09 	cmp.w	lr, #9
 8007520:	d8d6      	bhi.n	80074d0 <SEGGER_RTT_vprintf+0xa8>
            Precision = Precision * 10u + ((unsigned)c - '0');
 8007522:	fb0c 110b 	mla	r1, ip, fp, r1
            sFormat++;
 8007526:	4605      	mov	r5, r0
            PrecisionSet = 1;
 8007528:	2701      	movs	r7, #1
            Precision = Precision * 10u + ((unsigned)c - '0');
 800752a:	f1a1 0b30 	sub.w	fp, r1, #48	@ 0x30
            c = *sFormat;
 800752e:	e7f0      	b.n	8007512 <SEGGER_RTT_vprintf+0xea>
      Precision = 0u;
 8007530:	f04f 0b00 	mov.w	fp, #0
      PrecisionSet = 0;
 8007534:	465f      	mov	r7, fp
 8007536:	e7cb      	b.n	80074d0 <SEGGER_RTT_vprintf+0xa8>
      switch (c) {
 8007538:	3970      	subs	r1, #112	@ 0x70
 800753a:	2908      	cmp	r1, #8
 800753c:	d8df      	bhi.n	80074fe <SEGGER_RTT_vprintf+0xd6>
 800753e:	a001      	add	r0, pc, #4	@ (adr r0, 8007544 <SEGGER_RTT_vprintf+0x11c>)
 8007540:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007544:	0800769b 	.word	0x0800769b
 8007548:	080074ff 	.word	0x080074ff
 800754c:	080074ff 	.word	0x080074ff
 8007550:	08007667 	.word	0x08007667
 8007554:	080074ff 	.word	0x080074ff
 8007558:	08007645 	.word	0x08007645
 800755c:	080074ff 	.word	0x080074ff
 8007560:	080074ff 	.word	0x080074ff
 8007564:	08007657 	.word	0x08007657
 8007568:	2964      	cmp	r1, #100	@ 0x64
 800756a:	d1c8      	bne.n	80074fe <SEGGER_RTT_vprintf+0xd6>
        v = va_arg(*pParamList, int);
 800756c:	6831      	ldr	r1, [r6, #0]
  Width = 1u;
 800756e:	f04f 0801 	mov.w	r8, #1
        v = va_arg(*pParamList, int);
 8007572:	680f      	ldr	r7, [r1, #0]
 8007574:	1d08      	adds	r0, r1, #4
  Number = (v < 0) ? -v : v;
 8007576:	ea87 71e7 	eor.w	r1, r7, r7, asr #31
        v = va_arg(*pParamList, int);
 800757a:	6030      	str	r0, [r6, #0]
    Number = (Number / (int)Base);
 800757c:	200a      	movs	r0, #10
  Number = (v < 0) ? -v : v;
 800757e:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
  while (Number >= (int)Base) {
 8007582:	2909      	cmp	r1, #9
 8007584:	dc3e      	bgt.n	8007604 <SEGGER_RTT_vprintf+0x1dc>
  if (NumDigits > Width) {
 8007586:	45d8      	cmp	r8, fp
 8007588:	bf38      	it	cc
 800758a:	46d8      	movcc	r8, fp
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800758c:	b12c      	cbz	r4, 800759a <SEGGER_RTT_vprintf+0x172>
 800758e:	2f00      	cmp	r7, #0
 8007590:	db02      	blt.n	8007598 <SEGGER_RTT_vprintf+0x170>
 8007592:	f019 0f04 	tst.w	r9, #4
 8007596:	d000      	beq.n	800759a <SEGGER_RTT_vprintf+0x172>
    FieldWidth--;
 8007598:	3c01      	subs	r4, #1
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800759a:	f019 0f02 	tst.w	r9, #2
 800759e:	d002      	beq.n	80075a6 <SEGGER_RTT_vprintf+0x17e>
 80075a0:	f1bb 0f00 	cmp.w	fp, #0
 80075a4:	d004      	beq.n	80075b0 <SEGGER_RTT_vprintf+0x188>
 80075a6:	f019 0f01 	tst.w	r9, #1
 80075aa:	d101      	bne.n	80075b0 <SEGGER_RTT_vprintf+0x188>
    if (FieldWidth != 0u) {
 80075ac:	bb7c      	cbnz	r4, 800760e <SEGGER_RTT_vprintf+0x1e6>
  Width = 1u;
 80075ae:	2400      	movs	r4, #0
  if (pBufferDesc->ReturnValue >= 0) {
 80075b0:	9908      	ldr	r1, [sp, #32]
 80075b2:	2900      	cmp	r1, #0
 80075b4:	dba3      	blt.n	80074fe <SEGGER_RTT_vprintf+0xd6>
    if (v < 0) {
 80075b6:	2f00      	cmp	r7, #0
 80075b8:	da34      	bge.n	8007624 <SEGGER_RTT_vprintf+0x1fc>
      v = -v;
 80075ba:	427f      	negs	r7, r7
      _StoreChar(pBufferDesc, '-');
 80075bc:	212d      	movs	r1, #45	@ 0x2d
      _StoreChar(pBufferDesc, '+');
 80075be:	a805      	add	r0, sp, #20
 80075c0:	f7ff feac 	bl	800731c <_StoreChar>
    if (pBufferDesc->ReturnValue >= 0) {
 80075c4:	9908      	ldr	r1, [sp, #32]
 80075c6:	2900      	cmp	r1, #0
 80075c8:	db99      	blt.n	80074fe <SEGGER_RTT_vprintf+0xd6>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80075ca:	f009 0103 	and.w	r1, r9, #3
 80075ce:	2902      	cmp	r1, #2
 80075d0:	d104      	bne.n	80075dc <SEGGER_RTT_vprintf+0x1b4>
 80075d2:	f1bb 0f00 	cmp.w	fp, #0
 80075d6:	d101      	bne.n	80075dc <SEGGER_RTT_vprintf+0x1b4>
        if (FieldWidth != 0u) {
 80075d8:	bb4c      	cbnz	r4, 800762e <SEGGER_RTT_vprintf+0x206>
  Width = 1u;
 80075da:	2400      	movs	r4, #0
      if (pBufferDesc->ReturnValue >= 0) {
 80075dc:	9908      	ldr	r1, [sp, #32]
 80075de:	2900      	cmp	r1, #0
 80075e0:	db8d      	blt.n	80074fe <SEGGER_RTT_vprintf+0xd6>
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 80075e2:	465b      	mov	r3, fp
 80075e4:	220a      	movs	r2, #10
 80075e6:	4639      	mov	r1, r7
 80075e8:	e9cd 4900 	strd	r4, r9, [sp]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 80075ec:	a805      	add	r0, sp, #20
 80075ee:	f7ff feb3 	bl	8007358 <_PrintUnsigned>
        break;
 80075f2:	e784      	b.n	80074fe <SEGGER_RTT_vprintf+0xd6>
        v = va_arg(*pParamList, int);
 80075f4:	6833      	ldr	r3, [r6, #0]
 80075f6:	1d1a      	adds	r2, r3, #4
        _StoreChar(&BufferDesc, c0);
 80075f8:	7819      	ldrb	r1, [r3, #0]
        v = va_arg(*pParamList, int);
 80075fa:	6032      	str	r2, [r6, #0]
      _StoreChar(&BufferDesc, c);
 80075fc:	a805      	add	r0, sp, #20
 80075fe:	f7ff fe8d 	bl	800731c <_StoreChar>
 8007602:	e77c      	b.n	80074fe <SEGGER_RTT_vprintf+0xd6>
    Number = (Number / (int)Base);
 8007604:	fbb1 f1f0 	udiv	r1, r1, r0
    Width++;
 8007608:	f108 0801 	add.w	r8, r8, #1
 800760c:	e7b9      	b.n	8007582 <SEGGER_RTT_vprintf+0x15a>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800760e:	4544      	cmp	r4, r8
 8007610:	d9ce      	bls.n	80075b0 <SEGGER_RTT_vprintf+0x188>
        _StoreChar(pBufferDesc, ' ');
 8007612:	2120      	movs	r1, #32
 8007614:	a805      	add	r0, sp, #20
 8007616:	f7ff fe81 	bl	800731c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800761a:	9908      	ldr	r1, [sp, #32]
        FieldWidth--;
 800761c:	3c01      	subs	r4, #1
        if (pBufferDesc->ReturnValue < 0) {
 800761e:	2900      	cmp	r1, #0
 8007620:	dac4      	bge.n	80075ac <SEGGER_RTT_vprintf+0x184>
 8007622:	e7c5      	b.n	80075b0 <SEGGER_RTT_vprintf+0x188>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8007624:	f019 0f04 	tst.w	r9, #4
 8007628:	d0cf      	beq.n	80075ca <SEGGER_RTT_vprintf+0x1a2>
      _StoreChar(pBufferDesc, '+');
 800762a:	212b      	movs	r1, #43	@ 0x2b
 800762c:	e7c7      	b.n	80075be <SEGGER_RTT_vprintf+0x196>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800762e:	4544      	cmp	r4, r8
 8007630:	d9d4      	bls.n	80075dc <SEGGER_RTT_vprintf+0x1b4>
            _StoreChar(pBufferDesc, '0');
 8007632:	2130      	movs	r1, #48	@ 0x30
 8007634:	a805      	add	r0, sp, #20
 8007636:	f7ff fe71 	bl	800731c <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 800763a:	9908      	ldr	r1, [sp, #32]
            FieldWidth--;
 800763c:	3c01      	subs	r4, #1
            if (pBufferDesc->ReturnValue < 0) {
 800763e:	2900      	cmp	r1, #0
 8007640:	daca      	bge.n	80075d8 <SEGGER_RTT_vprintf+0x1b0>
 8007642:	e7cb      	b.n	80075dc <SEGGER_RTT_vprintf+0x1b4>
        v = va_arg(*pParamList, int);
 8007644:	6831      	ldr	r1, [r6, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, Precision, FieldWidth, FormatFlags);
 8007646:	465b      	mov	r3, fp
 8007648:	220a      	movs	r2, #10
        v = va_arg(*pParamList, int);
 800764a:	1d08      	adds	r0, r1, #4
 800764c:	6030      	str	r0, [r6, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, Precision, FieldWidth, FormatFlags);
 800764e:	e9cd 4900 	strd	r4, r9, [sp]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8007652:	6809      	ldr	r1, [r1, #0]
 8007654:	e7ca      	b.n	80075ec <SEGGER_RTT_vprintf+0x1c4>
        v = va_arg(*pParamList, int);
 8007656:	6831      	ldr	r1, [r6, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, Precision, FieldWidth, FormatFlags);
 8007658:	465b      	mov	r3, fp
        v = va_arg(*pParamList, int);
 800765a:	1d08      	adds	r0, r1, #4
 800765c:	6030      	str	r0, [r6, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, Precision, FieldWidth, FormatFlags);
 800765e:	e9cd 4900 	strd	r4, r9, [sp]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8007662:	2210      	movs	r2, #16
 8007664:	e7f5      	b.n	8007652 <SEGGER_RTT_vprintf+0x22a>
          const char * s = va_arg(*pParamList, const char *);
 8007666:	6832      	ldr	r2, [r6, #0]
 8007668:	1d11      	adds	r1, r2, #4
 800766a:	6031      	str	r1, [r6, #0]
 800766c:	6814      	ldr	r4, [r2, #0]
          if (s == NULL) {
 800766e:	b90c      	cbnz	r4, 8007674 <SEGGER_RTT_vprintf+0x24c>
            s = "(NULL)";     // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
 8007670:	4c13      	ldr	r4, [pc, #76]	@ (80076c0 <SEGGER_RTT_vprintf+0x298>)
            PrecisionSet = 0; // Make sure (NULL) is printed, even when precision was set.
 8007672:	2700      	movs	r7, #0
            c = *s;
 8007674:	f814 1b01 	ldrb.w	r1, [r4], #1
            if (c == '\0') {
 8007678:	2900      	cmp	r1, #0
 800767a:	f43f af40 	beq.w	80074fe <SEGGER_RTT_vprintf+0xd6>
            if ((PrecisionSet != 0) && (Precision == 0)) {
 800767e:	b11f      	cbz	r7, 8007688 <SEGGER_RTT_vprintf+0x260>
 8007680:	f1bb 0f00 	cmp.w	fp, #0
 8007684:	f43f af3b 	beq.w	80074fe <SEGGER_RTT_vprintf+0xd6>
            _StoreChar(&BufferDesc, c);
 8007688:	a805      	add	r0, sp, #20
            Precision--;
 800768a:	f10b 3bff 	add.w	fp, fp, #4294967295
            _StoreChar(&BufferDesc, c);
 800768e:	f7ff fe45 	bl	800731c <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8007692:	9a08      	ldr	r2, [sp, #32]
 8007694:	2a00      	cmp	r2, #0
 8007696:	daed      	bge.n	8007674 <SEGGER_RTT_vprintf+0x24c>
 8007698:	e731      	b.n	80074fe <SEGGER_RTT_vprintf+0xd6>
        v = va_arg(*pParamList, int);
 800769a:	6831      	ldr	r1, [r6, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800769c:	2200      	movs	r2, #0
        v = va_arg(*pParamList, int);
 800769e:	1d0b      	adds	r3, r1, #4
 80076a0:	6033      	str	r3, [r6, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 80076a2:	2308      	movs	r3, #8
 80076a4:	e9cd 3200 	strd	r3, r2, [sp]
 80076a8:	e7db      	b.n	8007662 <SEGGER_RTT_vprintf+0x23a>
    if (BufferDesc.Cnt != 0u) {
 80076aa:	9c07      	ldr	r4, [sp, #28]
 80076ac:	b124      	cbz	r4, 80076b8 <SEGGER_RTT_vprintf+0x290>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 80076ae:	4622      	mov	r2, r4
 80076b0:	4651      	mov	r1, sl
 80076b2:	9803      	ldr	r0, [sp, #12]
 80076b4:	f7ff fe16 	bl	80072e4 <SEGGER_RTT_Write>
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 80076b8:	442c      	add	r4, r5
 80076ba:	9408      	str	r4, [sp, #32]
 80076bc:	e6cb      	b.n	8007456 <SEGGER_RTT_vprintf+0x2e>
 80076be:	bf00      	nop
 80076c0:	0800cf25 	.word	0x0800cf25

080076c4 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 80076c4:	b40e      	push	{r1, r2, r3}
 80076c6:	b503      	push	{r0, r1, lr}
 80076c8:	ab03      	add	r3, sp, #12
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 80076ca:	aa01      	add	r2, sp, #4
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 80076cc:	f853 1b04 	ldr.w	r1, [r3], #4
  va_start(ParamList, sFormat);
 80076d0:	9301      	str	r3, [sp, #4]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 80076d2:	f7ff fea9 	bl	8007428 <SEGGER_RTT_vprintf>
  va_end(ParamList);
  return r;
}
 80076d6:	b002      	add	sp, #8
 80076d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80076dc:	b003      	add	sp, #12
 80076de:	4770      	bx	lr

080076e0 <_put_c_driver>:
static void _put_c_driver(void *user, const char c)
{
#if defined(HAS_DEDICATED_PRINT_PORT) && HAS_DEDICATED_PRINT_PORT == 1
  port_io_dedicated_putc(c);
#else
  if (_ioWriteAllowed)
 80076e0:	4b08      	ldr	r3, [pc, #32]	@ (8007704 <_put_c_driver+0x24>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
{
 80076e4:	b507      	push	{r0, r1, r2, lr}
 80076e6:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 80076ea:	b13b      	cbz	r3, 80076fc <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 80076ec:	f04f 33ff 	mov.w	r3, #4294967295
 80076f0:	2201      	movs	r2, #1
 80076f2:	f10d 0107 	add.w	r1, sp, #7
 80076f6:	4804      	ldr	r0, [pc, #16]	@ (8007708 <_put_c_driver+0x28>)
 80076f8:	f7fd fa49 	bl	8004b8e <HAL_UART_Transmit>
  }
#ifdef SWO_OUTPUT
  ITM_SendChar(c);
#endif 
#endif
}
 80076fc:	b003      	add	sp, #12
 80076fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8007702:	bf00      	nop
 8007704:	24000014 	.word	0x24000014
 8007708:	24017a5c 	.word	0x24017a5c

0800770c <_write>:
{
 800770c:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 800770e:	1e14      	subs	r4, r2, #0
 8007710:	da0a      	bge.n	8007728 <_write+0x1c>
 8007712:	3801      	subs	r0, #1
 8007714:	2801      	cmp	r0, #1
 8007716:	d907      	bls.n	8007728 <_write+0x1c>
    errno = EBADF;
 8007718:	f001 fe10 	bl	800933c <__errno>
    return -1;
 800771c:	f04f 34ff 	mov.w	r4, #4294967295
    errno = EBADF;
 8007720:	2309      	movs	r3, #9
 8007722:	6003      	str	r3, [r0, #0]
}
 8007724:	4620      	mov	r0, r4
 8007726:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8007728:	4b06      	ldr	r3, [pc, #24]	@ (8007744 <_write+0x38>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0f9      	beq.n	8007724 <_write+0x18>
 8007730:	b2a2      	uxth	r2, r4
 8007732:	f04f 33ff 	mov.w	r3, #4294967295
 8007736:	4804      	ldr	r0, [pc, #16]	@ (8007748 <_write+0x3c>)
 8007738:	f7fd fa29 	bl	8004b8e <HAL_UART_Transmit>
  return (status ? count : 0);
 800773c:	2800      	cmp	r0, #0
 800773e:	bf18      	it	ne
 8007740:	2400      	movne	r4, #0
 8007742:	e7ef      	b.n	8007724 <_write+0x18>
 8007744:	24000014 	.word	0x24000014
 8007748:	24017a5c 	.word	0x24017a5c

0800774c <lc_print>:

void lc_print(const char* fmt, ... )
{
 800774c:	b40f      	push	{r0, r1, r2, r3}
 800774e:	b507      	push	{r0, r1, r2, lr}
 8007750:	ab04      	add	r3, sp, #16
  va_list ap;
  va_start(ap, fmt);
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8007752:	2100      	movs	r1, #0
 8007754:	4805      	ldr	r0, [pc, #20]	@ (800776c <lc_print+0x20>)
{
 8007756:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 800775a:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 800775c:	f000 fa12 	bl	8007b84 <vlc_print>
  va_end(ap);
}
 8007760:	b003      	add	sp, #12
 8007762:	f85d eb04 	ldr.w	lr, [sp], #4
 8007766:	b004      	add	sp, #16
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	080076e1 	.word	0x080076e1

08007770 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8007770:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 8007772:	4d11      	ldr	r5, [pc, #68]	@ (80077b8 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8007774:	1cc4      	adds	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8007776:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8007778:	f024 0403 	bic.w	r4, r4, #3
  io_malloc.cfg |= 1 << 1;
 800777c:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8007780:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 8007784:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8007786:	f000 fc0b 	bl	8007fa0 <malloc>

  /* remember size */
  if (ptr) {
 800778a:	b1a0      	cbz	r0, 80077b6 <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 800778c:	1903      	adds	r3, r0, r4
 800778e:	4a0b      	ldr	r2, [pc, #44]	@ (80077bc <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8007790:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8007792:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 8007794:	682b      	ldr	r3, [r5, #0]
 8007796:	07db      	lsls	r3, r3, #31
 8007798:	d50c      	bpl.n	80077b4 <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 800779a:	68eb      	ldr	r3, [r5, #12]
 800779c:	3301      	adds	r3, #1
 800779e:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 80077a0:	686b      	ldr	r3, [r5, #4]
 80077a2:	4423      	add	r3, r4
 80077a4:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 80077a6:	69ab      	ldr	r3, [r5, #24]
 80077a8:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 80077aa:	696b      	ldr	r3, [r5, #20]
 80077ac:	429c      	cmp	r4, r3
    io_malloc.used += bytes;
 80077ae:	61ac      	str	r4, [r5, #24]
      io_malloc.max = io_malloc.used;
 80077b0:	bf88      	it	hi
 80077b2:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 80077b4:	3004      	adds	r0, #4
}
 80077b6:	bd38      	pop	{r3, r4, r5, pc}
 80077b8:	240292ac 	.word	0x240292ac
 80077bc:	efdcba98 	.word	0xefdcba98

080077c0 <dwtCyclesToTime>:
 */

struct cyclesCount cyclesCount;

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 80077c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c4:	4604      	mov	r4, r0
 80077c6:	468a      	mov	sl, r1
  if (!t)
 80077c8:	4616      	mov	r6, r2
 80077ca:	b38a      	cbz	r2, 8007830 <dwtCyclesToTime+0x70>
    return -1;
  uint32_t fcpu = port_hal_get_frequency();
  uint64_t s  = clks / fcpu;
  uint64_t ms = (clks * 1000) / fcpu;
 80077cc:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
  uint32_t fcpu = port_hal_get_frequency();
 80077d0:	f7fb f9b6 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
  uint64_t s  = clks / fcpu;
 80077d4:	2300      	movs	r3, #0
  uint32_t fcpu = port_hal_get_frequency();
 80077d6:	4607      	mov	r7, r0
  uint64_t s  = clks / fcpu;
 80077d8:	4602      	mov	r2, r0
 80077da:	4651      	mov	r1, sl
 80077dc:	4620      	mov	r0, r4
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80077de:	f8df 9058 	ldr.w	r9, [pc, #88]	@ 8007838 <dwtCyclesToTime+0x78>
  uint64_t s  = clks / fcpu;
 80077e2:	f7f8 ff91 	bl	8000708 <__aeabi_uldivmod>
 80077e6:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 80077e8:	fba4 0105 	umull	r0, r1, r4, r5
 80077ec:	463a      	mov	r2, r7
 80077ee:	2300      	movs	r3, #0
 80077f0:	fb05 110a 	mla	r1, r5, sl, r1
 80077f4:	f7f8 ff88 	bl	8000708 <__aeabi_uldivmod>
  ms -= (s * 1000);
 80077f8:	fbab 3205 	umull	r3, r2, fp, r5
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80077fc:	463a      	mov	r2, r7
  ms -= (s * 1000);
 80077fe:	1ac3      	subs	r3, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8007800:	fba4 0109 	umull	r0, r1, r4, r9
  ms -= (s * 1000);
 8007804:	9301      	str	r3, [sp, #4]
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8007806:	2300      	movs	r3, #0
 8007808:	fb09 110a 	mla	r1, r9, sl, r1
 800780c:	f7f8 ff7c 	bl	8000708 <__aeabi_uldivmod>
  us -= (ms * 1000 + s * 1000000);
 8007810:	fbab 8909 	umull	r8, r9, fp, r9
  t->fcpu = fcpu;
  t->s = s;
  t->ms = ms;
 8007814:	9b01      	ldr	r3, [sp, #4]
 8007816:	eba0 0008 	sub.w	r0, r0, r8
 800781a:	60b3      	str	r3, [r6, #8]
  us -= (ms * 1000 + s * 1000000);
 800781c:	fba3 3505 	umull	r3, r5, r3, r5
 8007820:	1ac0      	subs	r0, r0, r3
  t->us = us;
 8007822:	60f0      	str	r0, [r6, #12]
  return 0;
 8007824:	2000      	movs	r0, #0
  t->s = s;
 8007826:	e9c6 7b00 	strd	r7, fp, [r6]
}
 800782a:	b003      	add	sp, #12
 800782c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 8007830:	f04f 30ff 	mov.w	r0, #4294967295
 8007834:	e7f9      	b.n	800782a <dwtCyclesToTime+0x6a>
 8007836:	bf00      	nop
 8007838:	000f4240 	.word	0x000f4240

0800783c <getFlashCacheConf>:

#if defined(STM32H7) || defined(STM32H7RS)

  mconf |= MCONF_H7;

  __I uint32_t acr = FLASH->ACR;
 800783c:	4b0c      	ldr	r3, [pc, #48]	@ (8007870 <getFlashCacheConf+0x34>)
{
 800783e:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR;
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	9300      	str	r3, [sp, #0]

  mconf |= (acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos;
#if !defined(CORE_CM4)
  __I uint32_t ccr = SCB->CCR;
 8007844:	4b0b      	ldr	r3, [pc, #44]	@ (8007874 <getFlashCacheConf+0x38>)
  mconf |= (acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos;
 8007846:	9800      	ldr	r0, [sp, #0]
  __I uint32_t ccr = SCB->CCR;
 8007848:	695b      	ldr	r3, [r3, #20]
  mconf |= (acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos;
 800784a:	f000 000f 	and.w	r0, r0, #15
  __I uint32_t ccr = SCB->CCR;
 800784e:	9301      	str	r3, [sp, #4]

  if (ccr & SCB_CCR_IC_Msk)
 8007850:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_CORE_ICACHE;
 8007852:	f040 7040 	orr.w	r0, r0, #50331648	@ 0x3000000
  if (ccr & SCB_CCR_IC_Msk)
 8007856:	039a      	lsls	r2, r3, #14
  if (ccr & SCB_CCR_DC_Msk)
 8007858:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_CORE_ICACHE;
 800785a:	bf48      	it	mi
 800785c:	f440 6080 	orrmi.w	r0, r0, #1024	@ 0x400
  if (ccr & SCB_CCR_DC_Msk)
 8007860:	03db      	lsls	r3, r3, #15
    mconf |= MCONF_CORE_DCACHE;
 8007862:	bf48      	it	mi
 8007864:	f440 6000 	orrmi.w	r0, r0, #2048	@ 0x800
  mconf |= MCONF_CORE_DCACHE;

#endif

  return mconf;
}
 8007868:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 800786c:	b002      	add	sp, #8
 800786e:	4770      	bx	lr
 8007870:	52002000 	.word	0x52002000
 8007874:	e000ed00 	.word	0xe000ed00

08007878 <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 8007878:	b510      	push	{r4, lr}
 800787a:	4604      	mov	r4, r0
  conf->sclk = port_hal_get_cpu_freq();
 800787c:	f7fb f960 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8007880:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_get_sys_freq();
 8007882:	f7fb fb25 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8007886:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 8007888:	f7ff ffd8 	bl	800783c <getFlashCacheConf>
 800788c:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 800788e:	f7f9 fe0d 	bl	80014ac <HAL_GetDEVID>
 8007892:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 8007894:	f7f9 fe04 	bl	80014a0 <HAL_GetREVID>
 8007898:	6120      	str	r0, [r4, #16]
}
 800789a:	bd10      	pop	{r4, pc}

0800789c <systemSettingLog>:

void systemSettingLog(void)
{
 800789c:	b510      	push	{r4, lr}
 800789e:	b086      	sub	sp, #24
  LC_PRINT("Compiled with GHS-ARM Compiler %d\r\n", __GHS_VERSION_NUMBER);
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  LC_PRINT("Compiled with HIGHTEC Clang %d.%d.%d\r\n", __clang_major__, __clang_minor__,
      __clang_patchlevel__);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 80078a0:	2301      	movs	r3, #1
 80078a2:	210d      	movs	r1, #13
 80078a4:	2203      	movs	r2, #3
 80078a6:	482b      	ldr	r0, [pc, #172]	@ (8007954 <systemSettingLog+0xb8>)
 80078a8:	f7ff ff50 	bl	800774c <lc_print>
  if (!conf)
 80078ac:	a801      	add	r0, sp, #4
 80078ae:	f7ff ffe3 	bl	8007878 <getSysConf.part.0>


  /* Display Device configuration */
  getSysConf(&sys_conf);

  LC_PRINT(DEVICE_FAMILY " device configuration...\r\n");
 80078b2:	4829      	ldr	r0, [pc, #164]	@ (8007958 <systemSettingLog+0xbc>)
 80078b4:	f7ff ff4a 	bl	800774c <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80078b8:	9904      	ldr	r1, [sp, #16]
 80078ba:	b28b      	uxth	r3, r1
  switch (dev_id) {
 80078bc:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80078c0:	d043      	beq.n	800794a <systemSettingLog+0xae>
 80078c2:	f240 4283 	movw	r2, #1155	@ 0x483
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d041      	beq.n	800794e <systemSettingLog+0xb2>
  default:    str = "UNKNOWN";
 80078ca:	4824      	ldr	r0, [pc, #144]	@ (800795c <systemSettingLog+0xc0>)
 80078cc:	f100 0245 	add.w	r2, r0, #69	@ 0x45
 80078d0:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80078d4:	bf08      	it	eq
 80078d6:	4602      	moveq	r2, r0
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80078d8:	9b05      	ldr	r3, [sp, #20]
 80078da:	4821      	ldr	r0, [pc, #132]	@ (8007960 <systemSettingLog+0xc4>)
 80078dc:	f7ff ff36 	bl	800774c <lc_print>
      (int)sys_conf.revid
  );

#if (__FPU_PRESENT == 1)
#if !defined(SR6X)
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 80078e0:	4b20      	ldr	r3, [pc, #128]	@ (8007964 <systemSettingLog+0xc8>)
 80078e2:	2107      	movs	r1, #7
#else
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
#endif


  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 80078e4:	4c20      	ldr	r4, [pc, #128]	@ (8007968 <systemSettingLog+0xcc>)
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 80078e6:	1d5a      	adds	r2, r3, #5
 80078e8:	f103 000a 	add.w	r0, r3, #10
 80078ec:	f7ff ff2e 	bl	800774c <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 80078f0:	f7f9 fdd2 	bl	8001498 <HAL_GetHalVersion>
 80078f4:	4601      	mov	r1, r0
 80078f6:	481d      	ldr	r0, [pc, #116]	@ (800796c <systemSettingLog+0xd0>)
 80078f8:	f7ff ff28 	bl	800774c <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 80078fc:	9901      	ldr	r1, [sp, #4]
 80078fe:	481c      	ldr	r0, [pc, #112]	@ (8007970 <systemSettingLog+0xd4>)
 8007900:	fb91 f1f4 	sdiv	r1, r1, r4
 8007904:	f7ff ff22 	bl	800774c <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 8007908:	9902      	ldr	r1, [sp, #8]
 800790a:	481a      	ldr	r0, [pc, #104]	@ (8007974 <systemSettingLog+0xd8>)
 800790c:	fb91 f1f4 	sdiv	r1, r1, r4
 8007910:	f7ff ff1c 	bl	800774c <lc_print>
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

#if defined(STM32H7) || defined(STM32H7RS)
  uint32_t acr = FLASH->ACR;
 8007914:	4b18      	ldr	r3, [pc, #96]	@ (8007978 <systemSettingLog+0xdc>)
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
 8007916:	4819      	ldr	r0, [pc, #100]	@ (800797c <systemSettingLog+0xe0>)
  uint32_t acr = FLASH->ACR;
 8007918:	6819      	ldr	r1, [r3, #0]
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
 800791a:	f001 020f 	and.w	r2, r1, #15
 800791e:	f7ff ff15 	bl	800774c <lc_print>
      (int)acr,
      (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
#if !defined(CORE_CM4)
  uint32_t ccr = SCB->CCR;
 8007922:	4b17      	ldr	r3, [pc, #92]	@ (8007980 <systemSettingLog+0xe4>)
    return "True";
 8007924:	4817      	ldr	r0, [pc, #92]	@ (8007984 <systemSettingLog+0xe8>)
  uint32_t ccr = SCB->CCR;
 8007926:	695b      	ldr	r3, [r3, #20]
    return "True";
 8007928:	1f42      	subs	r2, r0, #5
 800792a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800792e:	bf0c      	ite	eq
 8007930:	4601      	moveq	r1, r0
 8007932:	4611      	movne	r1, r2
 8007934:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8007938:	bf08      	it	eq
 800793a:	4602      	moveq	r2, r0
 800793c:	f200 1011 	addw	r0, r0, #273	@ 0x111
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(sys_conf.conf & MCONF_CORE_ICACHE),
      bitToStr(sys_conf.conf & MCONF_CORE_DCACHE));
#endif

}
 8007940:	b006      	add	sp, #24
 8007942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8007946:	f7ff bf01 	b.w	800774c <lc_print>
  switch (dev_id) {
 800794a:	4a0f      	ldr	r2, [pc, #60]	@ (8007988 <systemSettingLog+0xec>)
 800794c:	e7c4      	b.n	80078d8 <systemSettingLog+0x3c>
  case 0x483: str = "STM32H7[2,3]x"; break;  /* LittleShark1M */
 800794e:	4a0f      	ldr	r2, [pc, #60]	@ (800798c <systemSettingLog+0xf0>)
 8007950:	e7c2      	b.n	80078d8 <systemSettingLog+0x3c>
 8007952:	bf00      	nop
 8007954:	0800c77e 	.word	0x0800c77e
 8007958:	0800c79b 	.word	0x0800c79b
 800795c:	0800c726 	.word	0x0800c726
 8007960:	0800c7bb 	.word	0x0800c7bb
 8007964:	0800c7ec 	.word	0x0800c7ec
 8007968:	000f4240 	.word	0x000f4240
 800796c:	0800c814 	.word	0x0800c814
 8007970:	0800c82d 	.word	0x0800c82d
 8007974:	0800c846 	.word	0x0800c846
 8007978:	52002000 	.word	0x52002000
 800797c:	0800c85f 	.word	0x0800c85f
 8007980:	e000ed00 	.word	0xe000ed00
 8007984:	0800c778 	.word	0x0800c778
 8007988:	0800c751 	.word	0x0800c751
 800798c:	0800c75d 	.word	0x0800c75d

08007990 <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 8007990:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LC_PRINT("\r\n#\r\n");
 8007992:	4c1f      	ldr	r4, [pc, #124]	@ (8007a10 <aiValidationInit+0x80>)
#else /* USE_SYSTICK_ONLY */
  struct dwtTime t;
  uint32_t st;

  port_dwt_init();
  port_dwt_reset();
 8007994:	2500      	movs	r5, #0
 8007996:	4e1f      	ldr	r6, [pc, #124]	@ (8007a14 <aiValidationInit+0x84>)
 8007998:	f204 2019 	addw	r0, r4, #537	@ 0x219
 800799c:	f7ff fed6 	bl	800774c <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 80079a0:	2301      	movs	r3, #1
 80079a2:	f204 211f 	addw	r1, r4, #543	@ 0x21f
 80079a6:	2207      	movs	r2, #7
 80079a8:	f204 202d 	addw	r0, r4, #557	@ 0x22d
 80079ac:	f7ff fece 	bl	800774c <lc_print>
  LC_PRINT("#\r\n");
 80079b0:	f204 203a 	addw	r0, r4, #570	@ 0x23a
 80079b4:	f7ff feca 	bl	800774c <lc_print>

  systemSettingLog();
 80079b8:	f7ff ff70 	bl	800789c <systemSettingLog>
  port_dwt_init();
 80079bc:	f000 f82e 	bl	8007a1c <port_dwt_init_imp>
  port_dwt_reset();
 80079c0:	6075      	str	r5, [r6, #4]
  port_hal_delay(100);
 80079c2:	2064      	movs	r0, #100	@ 0x64
 80079c4:	f7f9 fd56 	bl	8001474 <HAL_Delay>
  st = port_dwt_get_cycles();
 80079c8:	6870      	ldr	r0, [r6, #4]
  dwtCyclesToTime(st/100, &t);
 80079ca:	2664      	movs	r6, #100	@ 0x64
 80079cc:	466a      	mov	r2, sp
 80079ce:	4629      	mov	r1, r5
 80079d0:	fbb0 f0f6 	udiv	r0, r0, r6
 80079d4:	f7ff fef4 	bl	80077c0 <dwtCyclesToTime>

#if USE_CORE_CLOCK_ONLY == 1
  LC_PRINT(" Timestamp    : DWT only (delay(1)=%d.%03d ms)\r\n",
           t.s * 100 + t.ms, t.us);
#else /* USE_CORE_CLOCK_ONLY == 1 */
  LC_PRINT(" Timestamp    : SysTick + DWT (delay(1)=%d.%03d ms)\r\n",
 80079d8:	9a03      	ldr	r2, [sp, #12]
 80079da:	f204 203e 	addw	r0, r4, #574	@ 0x23e
 80079de:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 80079e2:	fb06 3101 	mla	r1, r6, r1, r3
 80079e6:	f7ff feb1 	bl	800774c <lc_print>
           t.s * 100 + t.ms, t.us);
  dwtCyclesToTime(UINT32_MAX, &t);
 80079ea:	466a      	mov	r2, sp
 80079ec:	2100      	movs	r1, #0
 80079ee:	f04f 30ff 	mov.w	r0, #4294967295
 80079f2:	f7ff fee5 	bl	80077c0 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 80079f6:	9a01      	ldr	r2, [sp, #4]
 80079f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80079fc:	9b02      	ldr	r3, [sp, #8]
 80079fe:	fb01 3302 	mla	r3, r1, r2, r3
 8007a02:	4a05      	ldr	r2, [pc, #20]	@ (8007a18 <aiValidationInit+0x88>)
 8007a04:	6013      	str	r3, [r2, #0]
#endif /* !USE_CORE_CLOCK_ONLY != 1 */
  port_dwt_init();
 8007a06:	f000 f809 	bl	8007a1c <port_dwt_init_imp>

  cyclesCounterInit();

  return 0;
}
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	b004      	add	sp, #16
 8007a0e:	bd70      	pop	{r4, r5, r6, pc}
 8007a10:	0800c8a9 	.word	0x0800c8a9
 8007a14:	e0001000 	.word	0xe0001000
 8007a18:	240292a0 	.word	0x240292a0

08007a1c <port_dwt_init_imp>:

#if defined(HAS_DWT_CTRL) && HAS_DWT_CTRL == 1

void port_dwt_init_imp()
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007a1c:	4a07      	ldr	r2, [pc, #28]	@ (8007a3c <port_dwt_init_imp+0x20>)
 8007a1e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
 8007a22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a26:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif
  DWT->CYCCNT = 0;
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	4b04      	ldr	r3, [pc, #16]	@ (8007a40 <port_dwt_init_imp+0x24>)
 8007a2e:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	f042 0201 	orr.w	r2, r2, #1
 8007a36:	601a      	str	r2, [r3, #0]
}
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	e000ed00 	.word	0xe000ed00
 8007a40:	e0001000 	.word	0xe0001000

08007a44 <MX_X_CUBE_AI_Init>:
ai_handle data_activations0[] = {pool0};

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8007a44:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 8007a46:	f7f9 fc2d 	bl	80012a4 <MX_USART1_UART_Init>
    aiValidationInit();
    /* USER CODE BEGIN 5 */
    /* USER CODE END 5 */
}
 8007a4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiValidationInit();
 8007a4e:	f7ff bf9f 	b.w	8007990 <aiValidationInit>

08007a52 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8007a52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8007a56:	6896      	ldr	r6, [r2, #8]
{
 8007a58:	b091      	sub	sp, #68	@ 0x44
  buf[idx--] = 0;
 8007a5a:	2500      	movs	r5, #0
{
 8007a5c:	4614      	mov	r4, r2
  if (specifier->flags & FLAG_IS_SIGNED) {
 8007a5e:	f016 0304 	ands.w	r3, r6, #4
  buf[idx--] = 0;
 8007a62:	f88d 503f 	strb.w	r5, [sp, #63]	@ 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8007a66:	d02c      	beq.n	8007ac2 <_write_number+0x70>
    if ((int64_t)number < 0) {
 8007a68:	42a9      	cmp	r1, r5
 8007a6a:	da08      	bge.n	8007a7e <_write_number+0x2c>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 8007a6c:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8007a6e:	4240      	negs	r0, r0
      sign_neg = '-';
 8007a70:	f04f 052d 	mov.w	r5, #45	@ 0x2d
      specifier->width -= 1;
 8007a74:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 8007a78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 8007a7c:	6013      	str	r3, [r2, #0]
 8007a7e:	f016 0f08 	tst.w	r6, #8
 8007a82:	f10d 093f 	add.w	r9, sp, #63	@ 0x3f
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8007a86:	f04f 073e 	mov.w	r7, #62	@ 0x3e
    if (specifier->flags & FLAG_HEX) {
 8007a8a:	f006 0a10 	and.w	sl, r6, #16
 8007a8e:	bf14      	ite	ne
 8007a90:	f04f 0841 	movne.w	r8, #65	@ 0x41
 8007a94:	f04f 0861 	moveq.w	r8, #97	@ 0x61
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8007a98:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 8007a9c:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 8007aa0:	f1ba 0f00 	cmp.w	sl, #0
 8007aa4:	d04d      	beq.n	8007b42 <_write_number+0xf0>
      chr = number & 0x0F;
 8007aa6:	f00b 0b0f 	and.w	fp, fp, #15
      t = number >> 4;
 8007aaa:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8007aac:	f1bb 0f09 	cmp.w	fp, #9
      t = number >> 4;
 8007ab0:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8007ab4:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8007ab8:	d907      	bls.n	8007aca <_write_number+0x78>
 8007aba:	44c3      	add	fp, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 8007abc:	fa5f fb8b 	uxtb.w	fp, fp
 8007ac0:	e005      	b.n	8007ace <_write_number+0x7c>
  char sign_neg = 0;
 8007ac2:	461d      	mov	r5, r3
 8007ac4:	e7db      	b.n	8007a7e <_write_number+0x2c>
    }
    number = t;
    buf[idx--] = chr;
 8007ac6:	461f      	mov	r7, r3
 8007ac8:	e7e8      	b.n	8007a9c <_write_number+0x4a>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8007aca:	f10b 0b30 	add.w	fp, fp, #48	@ 0x30
    count++;
  } while (number);
 8007ace:	ea50 0201 	orrs.w	r2, r0, r1
    buf[idx--] = chr;
 8007ad2:	f809 bd01 	strb.w	fp, [r9, #-1]!
 8007ad6:	f107 33ff 	add.w	r3, r7, #4294967295
    count++;
 8007ada:	f1c7 0b3f 	rsb	fp, r7, #63	@ 0x3f
  } while (number);
 8007ade:	d1f2      	bne.n	8007ac6 <_write_number+0x74>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 8007ae0:	f006 0101 	and.w	r1, r6, #1
 8007ae4:	b145      	cbz	r5, 8007af8 <_write_number+0xa6>
 8007ae6:	b939      	cbnz	r1, 8007af8 <_write_number+0xa6>
    buf[idx--] = sign_neg;
 8007ae8:	3340      	adds	r3, #64	@ 0x40
 8007aea:	222d      	movs	r2, #45	@ 0x2d
    count++;
 8007aec:	f1c7 0b40 	rsb	fp, r7, #64	@ 0x40
    buf[idx--] = sign_neg;
 8007af0:	446b      	add	r3, sp
 8007af2:	f803 2c40 	strb.w	r2, [r3, #-64]
 8007af6:	1ebb      	subs	r3, r7, #2
 8007af8:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 8007afa:	6822      	ldr	r2, [r4, #0]
 8007afc:	f006 0602 	and.w	r6, r6, #2
 8007b00:	bf14      	ite	ne
 8007b02:	2130      	movne	r1, #48	@ 0x30
 8007b04:	2120      	moveq	r1, #32
 8007b06:	455a      	cmp	r2, fp
 8007b08:	dd2c      	ble.n	8007b64 <_write_number+0x112>
 8007b0a:	b32e      	cbz	r6, 8007b58 <_write_number+0x106>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 8007b0c:	b36d      	cbz	r5, 8007b6a <_write_number+0x118>
    buf[idx--] = sign_neg;
 8007b0e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8007b12:	212d      	movs	r1, #45	@ 0x2d
    count++;
 8007b14:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 8007b18:	446a      	add	r2, sp
 8007b1a:	f802 1c40 	strb.w	r1, [r2, #-64]
  }

  idx++;


  for(int i = 0; i < count; i++) {
 8007b1e:	eb0d 0603 	add.w	r6, sp, r3
 8007b22:	2500      	movs	r5, #0
 8007b24:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8007b26:	68e3      	ldr	r3, [r4, #12]
 8007b28:	f816 1b01 	ldrb.w	r1, [r6], #1
 8007b2c:	6920      	ldr	r0, [r4, #16]
 8007b2e:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8007b30:	455d      	cmp	r5, fp
 8007b32:	d1f7      	bne.n	8007b24 <_write_number+0xd2>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 8007b34:	68a3      	ldr	r3, [r4, #8]
 8007b36:	079b      	lsls	r3, r3, #30
 8007b38:	d41f      	bmi.n	8007b7a <_write_number+0x128>
      _WRITE_C(' ');
    }
  }

  return count;
}
 8007b3a:	4658      	mov	r0, fp
 8007b3c:	b011      	add	sp, #68	@ 0x44
 8007b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      t = number / 10;
 8007b42:	2300      	movs	r3, #0
 8007b44:	220a      	movs	r2, #10
      chr = (number - t * 10) + '0';
 8007b46:	f10b 0b30 	add.w	fp, fp, #48	@ 0x30
      t = number / 10;
 8007b4a:	f7f8 fddd 	bl	8000708 <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 8007b4e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8007b52:	ebab 0b43 	sub.w	fp, fp, r3, lsl #1
 8007b56:	e7b1      	b.n	8007abc <_write_number+0x6a>
      buf[idx--] = ' ';
 8007b58:	f80d 1003 	strb.w	r1, [sp, r3]
    count++;
 8007b5c:	f10b 0b01 	add.w	fp, fp, #1
 8007b60:	3b01      	subs	r3, #1
 8007b62:	e7d0      	b.n	8007b06 <_write_number+0xb4>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 8007b64:	b10d      	cbz	r5, 8007b6a <_write_number+0x118>
 8007b66:	455a      	cmp	r2, fp
 8007b68:	dad1      	bge.n	8007b0e <_write_number+0xbc>
  idx++;
 8007b6a:	3301      	adds	r3, #1
  for(int i = 0; i < count; i++) {
 8007b6c:	e7d7      	b.n	8007b1e <_write_number+0xcc>
      _WRITE_C(' ');
 8007b6e:	f10b 0b01 	add.w	fp, fp, #1
 8007b72:	68e3      	ldr	r3, [r4, #12]
 8007b74:	2120      	movs	r1, #32
 8007b76:	6920      	ldr	r0, [r4, #16]
 8007b78:	4798      	blx	r3
    while (count < specifier->width) {
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	455b      	cmp	r3, fp
 8007b7e:	dcf6      	bgt.n	8007b6e <_write_number+0x11c>
 8007b80:	e7db      	b.n	8007b3a <_write_number+0xe8>
	...

08007b84 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 8007b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b88:	4606      	mov	r6, r0
 8007b8a:	460f      	mov	r7, r1
 8007b8c:	4691      	mov	r9, r2
 8007b8e:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 8007b90:	2500      	movs	r5, #0
{
 8007b92:	ed2d 8b02 	vpush	{d8}
 8007b96:	b099      	sub	sp, #100	@ 0x64
  return *(*fmtP)++;
 8007b98:	f819 1b01 	ldrb.w	r1, [r9], #1
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 8007b9c:	b929      	cbnz	r1, 8007baa <vlc_print+0x26>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	b019      	add	sp, #100	@ 0x64
 8007ba2:	ecbd 8b02 	vpop	{d8}
 8007ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 8007baa:	290a      	cmp	r1, #10
 8007bac:	d103      	bne.n	8007bb6 <vlc_print+0x32>
      putc_fct(user, c);
 8007bae:	4638      	mov	r0, r7
      count++;
 8007bb0:	3501      	adds	r5, #1
      putc_fct(user, c);
 8007bb2:	47b0      	blx	r6
      count++;
 8007bb4:	e7f0      	b.n	8007b98 <vlc_print+0x14>
    else if (c == '%')
 8007bb6:	2925      	cmp	r1, #37	@ 0x25
 8007bb8:	d1f9      	bne.n	8007bae <vlc_print+0x2a>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8007bba:	2300      	movs	r3, #0
 8007bbc:	9707      	str	r7, [sp, #28]
 8007bbe:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007bc2:	e9cd 3605 	strd	r3, r6, [sp, #20]
            specifier.width = specifier.width * 10 + (c - '0');
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	e008      	b.n	8007bdc <vlc_print+0x58>
          if (!specifier.width && !specifier.precision) {
 8007bca:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
 8007bce:	ea51 0c02 	orrs.w	ip, r1, r2
 8007bd2:	d111      	bne.n	8007bf8 <vlc_print+0x74>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8007bd4:	9a05      	ldr	r2, [sp, #20]
 8007bd6:	f042 0201 	orr.w	r2, r2, #1
 8007bda:	9205      	str	r2, [sp, #20]
  return *(*fmtP)++;
 8007bdc:	f819 1b01 	ldrb.w	r1, [r9], #1
        if (!c)
 8007be0:	2939      	cmp	r1, #57	@ 0x39
 8007be2:	f200 81a3 	bhi.w	8007f2c <vlc_print+0x3a8>
 8007be6:	292c      	cmp	r1, #44	@ 0x2c
 8007be8:	f200 817d 	bhi.w	8007ee6 <vlc_print+0x362>
 8007bec:	2900      	cmp	r1, #0
 8007bee:	f000 81ab 	beq.w	8007f48 <vlc_print+0x3c4>
          switch(c)
 8007bf2:	2925      	cmp	r1, #37	@ 0x25
 8007bf4:	d0db      	beq.n	8007bae <vlc_print+0x2a>
 8007bf6:	e1a7      	b.n	8007f48 <vlc_print+0x3c4>
          } else if (has_precision) {
 8007bf8:	f04f 0c0a 	mov.w	ip, #10
 8007bfc:	b120      	cbz	r0, 8007c08 <vlc_print+0x84>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8007bfe:	fb0c f202 	mul.w	r2, ip, r2
 8007c02:	9204      	str	r2, [sp, #16]
  for(int i = 0; i < count; i++) {
 8007c04:	2001      	movs	r0, #1
 8007c06:	e7e9      	b.n	8007bdc <vlc_print+0x58>
            specifier.width = specifier.width * 10 + (c - '0');
 8007c08:	fb0c f101 	mul.w	r1, ip, r1
            specifier.width = specifier.width * 10 + (c - '0');
 8007c0c:	9103      	str	r1, [sp, #12]
 8007c0e:	e7da      	b.n	8007bc6 <vlc_print+0x42>
          specifier.flags |= FLAG_NEG_PAD;
 8007c10:	9a05      	ldr	r2, [sp, #20]
 8007c12:	f042 0202 	orr.w	r2, r2, #2
 8007c16:	e7e0      	b.n	8007bda <vlc_print+0x56>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8007c18:	3930      	subs	r1, #48	@ 0x30
 8007c1a:	220a      	movs	r2, #10
          if (has_precision) {
 8007c1c:	b120      	cbz	r0, 8007c28 <vlc_print+0xa4>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8007c1e:	9804      	ldr	r0, [sp, #16]
 8007c20:	fb02 1100 	mla	r1, r2, r0, r1
 8007c24:	9104      	str	r1, [sp, #16]
 8007c26:	e7ed      	b.n	8007c04 <vlc_print+0x80>
            specifier.width = specifier.width * 10 + (c - '0');
 8007c28:	9803      	ldr	r0, [sp, #12]
 8007c2a:	fb02 1100 	mla	r1, r2, r0, r1
 8007c2e:	e7ed      	b.n	8007c0c <vlc_print+0x88>
          long_type += 1;
 8007c30:	3301      	adds	r3, #1
 8007c32:	e7d3      	b.n	8007bdc <vlc_print+0x58>
          switch(c)
 8007c34:	3963      	subs	r1, #99	@ 0x63
 8007c36:	2915      	cmp	r1, #21
 8007c38:	f200 8186 	bhi.w	8007f48 <vlc_print+0x3c4>
 8007c3c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007c40:	00840020 	.word	0x00840020
 8007c44:	008d0184 	.word	0x008d0184
 8007c48:	01840184 	.word	0x01840184
 8007c4c:	01840084 	.word	0x01840084
 8007c50:	01840184 	.word	0x01840184
 8007c54:	01840184 	.word	0x01840184
 8007c58:	006e0184 	.word	0x006e0184
 8007c5c:	01840184 	.word	0x01840184
 8007c60:	01840023 	.word	0x01840023
 8007c64:	01840016 	.word	0x01840016
 8007c68:	00780184 	.word	0x00780184
                val = va_arg(vl, unsigned int);
 8007c6c:	46a0      	mov	r8, r4
 8007c6e:	2100      	movs	r1, #0
 8007c70:	f858 0b04 	ldr.w	r0, [r8], #4
            count += _write_number(val, &specifier);
 8007c74:	aa03      	add	r2, sp, #12
 8007c76:	4644      	mov	r4, r8
 8007c78:	f7ff feeb 	bl	8007a52 <_write_number>
 8007c7c:	4405      	add	r5, r0
      if (error) {
 8007c7e:	e78b      	b.n	8007b98 <vlc_print+0x14>
            putc_fct(user, t);
 8007c80:	f814 1b04 	ldrb.w	r1, [r4], #4
 8007c84:	e793      	b.n	8007bae <vlc_print+0x2a>
            if (!str) str = "(null)";
 8007c86:	4ab6      	ldr	r2, [pc, #728]	@ (8007f60 <vlc_print+0x3dc>)
            str = va_arg(vl, char*);
 8007c88:	f854 bb04 	ldr.w	fp, [r4], #4
            if (!str) str = "(null)";
 8007c8c:	f1bb 0f00 	cmp.w	fp, #0
 8007c90:	bf08      	it	eq
 8007c92:	4693      	moveq	fp, r2
  int len = strlen(str);
 8007c94:	4658      	mov	r0, fp
 8007c96:	f7f8 fb73 	bl	8000380 <strlen>
  if (specifier->precision) {
 8007c9a:	9a04      	ldr	r2, [sp, #16]
  int len = strlen(str);
 8007c9c:	4680      	mov	r8, r0
  if (specifier->precision) {
 8007c9e:	b112      	cbz	r2, 8007ca6 <vlc_print+0x122>
    len = (len > specifier->precision)?specifier->precision:len;
 8007ca0:	4290      	cmp	r0, r2
 8007ca2:	bfa8      	it	ge
 8007ca4:	4690      	movge	r8, r2
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 8007ca6:	9a05      	ldr	r2, [sp, #20]
 8007ca8:	f012 0302 	ands.w	r3, r2, #2
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	d01d      	beq.n	8007cec <vlc_print+0x168>
  int count = 0;
 8007cb0:	f04f 0a00 	mov.w	sl, #0
 8007cb4:	465a      	mov	r2, fp
  for (int i = 0; i < len; i++) {
 8007cb6:	eba2 010b 	sub.w	r1, r2, fp
 8007cba:	4588      	cmp	r8, r1
 8007cbc:	dc19      	bgt.n	8007cf2 <vlc_print+0x16e>
 8007cbe:	f1b8 0f00 	cmp.w	r8, #0
 8007cc2:	bfac      	ite	ge
 8007cc4:	eb0a 0308 	addge.w	r3, sl, r8
 8007cc8:	f10a 0300 	addlt.w	r3, sl, #0
  if (specifier->flags & FLAG_NEG_PAD) {
 8007ccc:	9a00      	ldr	r2, [sp, #0]
 8007cce:	469a      	mov	sl, r3
 8007cd0:	bb0a      	cbnz	r2, 8007d16 <vlc_print+0x192>
            count += _write_string(str, &specifier);
 8007cd2:	4455      	add	r5, sl
      if (error) {
 8007cd4:	e760      	b.n	8007b98 <vlc_print+0x14>
      _WRITE_C(' ');
 8007cd6:	f10a 0a01 	add.w	sl, sl, #1
 8007cda:	2120      	movs	r1, #32
 8007cdc:	4638      	mov	r0, r7
 8007cde:	47b0      	blx	r6
    for(int i = len; i < specifier->width; i++) {
 8007ce0:	eb0a 0208 	add.w	r2, sl, r8
 8007ce4:	9903      	ldr	r1, [sp, #12]
 8007ce6:	4291      	cmp	r1, r2
 8007ce8:	dcf5      	bgt.n	8007cd6 <vlc_print+0x152>
 8007cea:	e7e3      	b.n	8007cb4 <vlc_print+0x130>
  int count = 0;
 8007cec:	f8dd a000 	ldr.w	sl, [sp]
 8007cf0:	e7f6      	b.n	8007ce0 <vlc_print+0x15c>
    _WRITE_C(*str++);
 8007cf2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007cf6:	4638      	mov	r0, r7
 8007cf8:	9201      	str	r2, [sp, #4]
 8007cfa:	47b0      	blx	r6
 8007cfc:	9a01      	ldr	r2, [sp, #4]
  for (int i = 0; i < len; i++) {
 8007cfe:	e7da      	b.n	8007cb6 <vlc_print+0x132>
      _WRITE_C(' ');
 8007d00:	f10a 0a01 	add.w	sl, sl, #1
 8007d04:	2120      	movs	r1, #32
 8007d06:	4638      	mov	r0, r7
 8007d08:	47b0      	blx	r6
    for(int i = len; i < specifier->width; i++) {
 8007d0a:	eb08 030a 	add.w	r3, r8, sl
 8007d0e:	9a03      	ldr	r2, [sp, #12]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	dcf5      	bgt.n	8007d00 <vlc_print+0x17c>
 8007d14:	e7dd      	b.n	8007cd2 <vlc_print+0x14e>
 8007d16:	eba8 0803 	sub.w	r8, r8, r3
 8007d1a:	e7f6      	b.n	8007d0a <vlc_print+0x186>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8007d1c:	9b05      	ldr	r3, [sp, #20]
 8007d1e:	f043 0301 	orr.w	r3, r3, #1
 8007d22:	9305      	str	r3, [sp, #20]
            specifier.width = 8;
 8007d24:	2308      	movs	r3, #8
 8007d26:	9303      	str	r3, [sp, #12]
            specifier.flags |= FLAG_CAPS;
 8007d28:	9b05      	ldr	r3, [sp, #20]
 8007d2a:	f043 0308 	orr.w	r3, r3, #8
 8007d2e:	9305      	str	r3, [sp, #20]
            specifier.flags |= FLAG_HEX;
 8007d30:	9b05      	ldr	r3, [sp, #20]
            count += _write_number(val, &specifier);
 8007d32:	aa03      	add	r2, sp, #12
 8007d34:	f854 0b04 	ldr.w	r0, [r4], #4
 8007d38:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 8007d3a:	f043 0310 	orr.w	r3, r3, #16
 8007d3e:	9305      	str	r3, [sp, #20]
            count += _write_number(val, &specifier);
 8007d40:	f7ff fe87 	bl	8007a52 <_write_number>
 8007d44:	4405      	add	r5, r0
      if (error) {
 8007d46:	e727      	b.n	8007b98 <vlc_print+0x14>
            specifier.flags |= FLAG_IS_SIGNED;
 8007d48:	9a05      	ldr	r2, [sp, #20]
                val = va_arg(vl, unsigned int);
 8007d4a:	f104 0804 	add.w	r8, r4, #4
            specifier.flags |= FLAG_IS_SIGNED;
 8007d4e:	f042 0204 	orr.w	r2, r2, #4
 8007d52:	9205      	str	r2, [sp, #20]
                val = va_arg(vl, signed int);
 8007d54:	6820      	ldr	r0, [r4, #0]
 8007d56:	17c1      	asrs	r1, r0, #31
 8007d58:	e78c      	b.n	8007c74 <vlc_print+0xf0>
            dbl = va_arg(vl, double);
 8007d5a:	3407      	adds	r4, #7
            if (specifier.precision == 0)
 8007d5c:	9b04      	ldr	r3, [sp, #16]
            dbl = va_arg(vl, double);
 8007d5e:	f024 0407 	bic.w	r4, r4, #7
 8007d62:	ecb4 8b02 	vldmia	r4!, {d8}
            if (specifier.precision == 0)
 8007d66:	b90b      	cbnz	r3, 8007d6c <vlc_print+0x1e8>
              specifier.precision = 6;
 8007d68:	2306      	movs	r3, #6
 8007d6a:	9304      	str	r3, [sp, #16]
  double mul = 1.0;
 8007d6c:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
  for (int i=0;i <specifier->precision; i++)
 8007d70:	f8dd 8010 	ldr.w	r8, [sp, #16]
    mul *= 10;
 8007d74:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
  for (int i=0;i <specifier->precision; i++)
 8007d78:	2300      	movs	r3, #0
 8007d7a:	4543      	cmp	r3, r8
 8007d7c:	db6c      	blt.n	8007e58 <vlc_print+0x2d4>
  if (is_signed)
 8007d7e:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8007d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d86:	d56b      	bpl.n	8007e60 <vlc_print+0x2dc>
    number = -number;
 8007d88:	eeb1 5b48 	vneg.f64	d5, d8
  number += (half_ / mul);
 8007d8c:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
  int count = 0;
 8007d90:	f04f 0a00 	mov.w	sl, #0
  uint32_t idx = sizeof(buf) - 1;
 8007d94:	f04f 0b3f 	mov.w	fp, #63	@ 0x3f
  number += (half_ / mul);
 8007d98:	ee84 6b07 	vdiv.f64	d6, d4, d7
 8007d9c:	ee36 6b05 	vadd.f64	d6, d6, d5
  val = (uint64_t)(number * mul);
 8007da0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007da4:	ec51 0b17 	vmov	r0, r1, d7
 8007da8:	f7f8 fcde 	bl	8000768 <__aeabi_d2ulz>
    uint64_t t = val / 10;
 8007dac:	220a      	movs	r2, #10
 8007dae:	2300      	movs	r3, #0
 8007db0:	e9cd 0100 	strd	r0, r1, [sp]
 8007db4:	f7f8 fca8 	bl	8000708 <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 8007db8:	9b00      	ldr	r3, [sp, #0]
    buf[idx--] = chr;
 8007dba:	f10b 32ff 	add.w	r2, fp, #4294967295
    chr = (val - t * 10) + '0';
 8007dbe:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
 8007dc2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8007dc6:	ebac 0c43 	sub.w	ip, ip, r3, lsl #1
    buf[idx--] = chr;
 8007dca:	f10b 0360 	add.w	r3, fp, #96	@ 0x60
 8007dce:	446b      	add	r3, sp
 8007dd0:	f803 cc40 	strb.w	ip, [r3, #-64]
    count++;
 8007dd4:	f10a 0301 	add.w	r3, sl, #1
    if (count == specifier->precision) {
 8007dd8:	4598      	cmp	r8, r3
      buf[idx--] = '.';
 8007dda:	bf09      	itett	eq
 8007ddc:	f102 0360 	addeq.w	r3, r2, #96	@ 0x60
    count++;
 8007de0:	469a      	movne	sl, r3
      buf[idx--] = '.';
 8007de2:	f1ab 0b02 	subeq.w	fp, fp, #2
      count++;
 8007de6:	f10a 0a02 	addeq.w	sl, sl, #2
      buf[idx--] = '.';
 8007dea:	bf05      	ittet	eq
 8007dec:	eb0d 0203 	addeq.w	r2, sp, r3
 8007df0:	232e      	moveq	r3, #46	@ 0x2e
    buf[idx--] = chr;
 8007df2:	4693      	movne	fp, r2
      buf[idx--] = '.';
 8007df4:	f802 3c40 	strbeq.w	r3, [r2, #-64]
  } while (val);
 8007df8:	9b00      	ldr	r3, [sp, #0]
 8007dfa:	2b0a      	cmp	r3, #10
 8007dfc:	9b01      	ldr	r3, [sp, #4]
 8007dfe:	f173 0300 	sbcs.w	r3, r3, #0
 8007e02:	d2d3      	bcs.n	8007dac <vlc_print+0x228>
 8007e04:	ab08      	add	r3, sp, #32
    buf[idx--] = '0';
 8007e06:	2130      	movs	r1, #48	@ 0x30
 8007e08:	eb03 020b 	add.w	r2, r3, fp
  } while (val);
 8007e0c:	4653      	mov	r3, sl
  while (count < specifier->precision) {
 8007e0e:	4598      	cmp	r8, r3
 8007e10:	dc29      	bgt.n	8007e66 <vlc_print+0x2e2>
 8007e12:	45d0      	cmp	r8, sl
 8007e14:	eba8 030a 	sub.w	r3, r8, sl
 8007e18:	ebaa 0208 	sub.w	r2, sl, r8
 8007e1c:	bfb4      	ite	lt
 8007e1e:	2100      	movlt	r1, #0
 8007e20:	2101      	movge	r1, #1
 8007e22:	2900      	cmp	r1, #0
 8007e24:	bf04      	itt	eq
 8007e26:	2300      	moveq	r3, #0
 8007e28:	2200      	moveq	r2, #0
 8007e2a:	4453      	add	r3, sl
  if (count == specifier->precision) {
 8007e2c:	445a      	add	r2, fp
 8007e2e:	4543      	cmp	r3, r8
 8007e30:	f108 0801 	add.w	r8, r8, #1
 8007e34:	d11b      	bne.n	8007e6e <vlc_print+0x2ea>
    buf[idx--] = '.';
 8007e36:	f102 0360 	add.w	r3, r2, #96	@ 0x60
 8007e3a:	212e      	movs	r1, #46	@ 0x2e
 8007e3c:	3a01      	subs	r2, #1
 8007e3e:	446b      	add	r3, sp
 8007e40:	f803 1c40 	strb.w	r1, [r3, #-64]
    buf[idx--] = '0';
 8007e44:	f102 0360 	add.w	r3, r2, #96	@ 0x60
 8007e48:	2130      	movs	r1, #48	@ 0x30
 8007e4a:	3a01      	subs	r2, #1
 8007e4c:	446b      	add	r3, sp
 8007e4e:	f803 1c40 	strb.w	r1, [r3, #-64]
    count++;
 8007e52:	f108 0301 	add.w	r3, r8, #1
 8007e56:	e00c      	b.n	8007e72 <vlc_print+0x2ee>
    mul *= 10;
 8007e58:	ee27 7b06 	vmul.f64	d7, d7, d6
  for (int i=0;i <specifier->precision; i++)
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	e78c      	b.n	8007d7a <vlc_print+0x1f6>
 8007e60:	eeb0 5b48 	vmov.f64	d5, d8
 8007e64:	e792      	b.n	8007d8c <vlc_print+0x208>
    count++;
 8007e66:	3301      	adds	r3, #1
    buf[idx--] = '0';
 8007e68:	f802 1901 	strb.w	r1, [r2], #-1
    count++;
 8007e6c:	e7cf      	b.n	8007e0e <vlc_print+0x28a>
  if (count == specifier->precision + 1)
 8007e6e:	4543      	cmp	r3, r8
 8007e70:	d0e8      	beq.n	8007e44 <vlc_print+0x2c0>
  if (is_signed) {
 8007e72:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8007e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e7a:	d507      	bpl.n	8007e8c <vlc_print+0x308>
    buf[idx--] = '-';
 8007e7c:	f102 0160 	add.w	r1, r2, #96	@ 0x60
 8007e80:	202d      	movs	r0, #45	@ 0x2d
    count++;
 8007e82:	3301      	adds	r3, #1
    buf[idx--] = '-';
 8007e84:	3a01      	subs	r2, #1
 8007e86:	4469      	add	r1, sp
 8007e88:	f801 0c40 	strb.w	r0, [r1, #-64]
    count++;
 8007e8c:	a808      	add	r0, sp, #32
  while (count < specifier->width) {
 8007e8e:	9903      	ldr	r1, [sp, #12]
    buf[idx--] = ' ';
 8007e90:	f04f 0e20 	mov.w	lr, #32
 8007e94:	eb00 0c02 	add.w	ip, r0, r2
  while (count < specifier->width) {
 8007e98:	4618      	mov	r0, r3
 8007e9a:	4288      	cmp	r0, r1
 8007e9c:	db18      	blt.n	8007ed0 <vlc_print+0x34c>
 8007e9e:	428b      	cmp	r3, r1
 8007ea0:	eba1 0803 	sub.w	r8, r1, r3
  for(int i = 0; i < count; i++) {
 8007ea4:	f04f 0b00 	mov.w	fp, #0
 8007ea8:	bfcc      	ite	gt
 8007eaa:	2000      	movgt	r0, #0
 8007eac:	2001      	movle	r0, #1
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	bf08      	it	eq
 8007eb2:	f04f 0800 	moveq.w	r8, #0
 8007eb6:	4498      	add	r8, r3
 8007eb8:	eba3 0301 	sub.w	r3, r3, r1
 8007ebc:	bf08      	it	eq
 8007ebe:	2300      	moveq	r3, #0
 8007ec0:	4413      	add	r3, r2
 8007ec2:	aa08      	add	r2, sp, #32
 8007ec4:	eb02 0a03 	add.w	sl, r2, r3
 8007ec8:	45d8      	cmp	r8, fp
 8007eca:	dc05      	bgt.n	8007ed8 <vlc_print+0x354>
            count += _write_double(dbl, &specifier);
 8007ecc:	4445      	add	r5, r8
      if (error) {
 8007ece:	e663      	b.n	8007b98 <vlc_print+0x14>
    count++;
 8007ed0:	3001      	adds	r0, #1
    buf[idx--] = ' ';
 8007ed2:	f80c e901 	strb.w	lr, [ip], #-1
    count++;
 8007ed6:	e7e0      	b.n	8007e9a <vlc_print+0x316>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8007ed8:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8007edc:	4638      	mov	r0, r7
  for(int i = 0; i < count; i++) {
 8007ede:	f10b 0b01 	add.w	fp, fp, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8007ee2:	47b0      	blx	r6
  for(int i = 0; i < count; i++) {
 8007ee4:	e7f0      	b.n	8007ec8 <vlc_print+0x344>
 8007ee6:	f1a1 022d 	sub.w	r2, r1, #45	@ 0x2d
 8007eea:	2a0c      	cmp	r2, #12
 8007eec:	d82c      	bhi.n	8007f48 <vlc_print+0x3c4>
 8007eee:	f20f 0c08 	addw	ip, pc, #8
 8007ef2:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
 8007ef6:	bf00      	nop
 8007ef8:	08007c11 	.word	0x08007c11
 8007efc:	08007c05 	.word	0x08007c05
 8007f00:	08007f49 	.word	0x08007f49
 8007f04:	08007bcb 	.word	0x08007bcb
 8007f08:	08007c19 	.word	0x08007c19
 8007f0c:	08007c19 	.word	0x08007c19
 8007f10:	08007c19 	.word	0x08007c19
 8007f14:	08007c19 	.word	0x08007c19
 8007f18:	08007c19 	.word	0x08007c19
 8007f1c:	08007c19 	.word	0x08007c19
 8007f20:	08007c19 	.word	0x08007c19
 8007f24:	08007c19 	.word	0x08007c19
 8007f28:	08007c19 	.word	0x08007c19
 8007f2c:	296c      	cmp	r1, #108	@ 0x6c
 8007f2e:	f43f ae7f 	beq.w	8007c30 <vlc_print+0xac>
          switch(c)
 8007f32:	2978      	cmp	r1, #120	@ 0x78
 8007f34:	d808      	bhi.n	8007f48 <vlc_print+0x3c4>
 8007f36:	2962      	cmp	r1, #98	@ 0x62
 8007f38:	f63f ae7c 	bhi.w	8007c34 <vlc_print+0xb0>
 8007f3c:	2946      	cmp	r1, #70	@ 0x46
 8007f3e:	f43f af0c 	beq.w	8007d5a <vlc_print+0x1d6>
 8007f42:	2958      	cmp	r1, #88	@ 0x58
 8007f44:	f43f aef0 	beq.w	8007d28 <vlc_print+0x1a4>
        putc_fct(user, '<');
 8007f48:	213c      	movs	r1, #60	@ 0x3c
 8007f4a:	4638      	mov	r0, r7
 8007f4c:	47b0      	blx	r6
        putc_fct(user, '!');
 8007f4e:	2121      	movs	r1, #33	@ 0x21
 8007f50:	4638      	mov	r0, r7
        va_arg(vl, signed long);
 8007f52:	3404      	adds	r4, #4
        putc_fct(user, '!');
 8007f54:	47b0      	blx	r6
        putc_fct(user, '>');
 8007f56:	213e      	movs	r1, #62	@ 0x3e
 8007f58:	4638      	mov	r0, r7
        count += 3;
 8007f5a:	3503      	adds	r5, #3
        putc_fct(user, '>');
 8007f5c:	47b0      	blx	r6
        error = false;
 8007f5e:	e61b      	b.n	8007b98 <vlc_print+0x14>
 8007f60:	0800cf2c 	.word	0x0800cf2c

08007f64 <__assert_func>:
 8007f64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f66:	4614      	mov	r4, r2
 8007f68:	461a      	mov	r2, r3
 8007f6a:	4b09      	ldr	r3, [pc, #36]	@ (8007f90 <__assert_func+0x2c>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4605      	mov	r5, r0
 8007f70:	68d8      	ldr	r0, [r3, #12]
 8007f72:	b14c      	cbz	r4, 8007f88 <__assert_func+0x24>
 8007f74:	4b07      	ldr	r3, [pc, #28]	@ (8007f94 <__assert_func+0x30>)
 8007f76:	9100      	str	r1, [sp, #0]
 8007f78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f7c:	4906      	ldr	r1, [pc, #24]	@ (8007f98 <__assert_func+0x34>)
 8007f7e:	462b      	mov	r3, r5
 8007f80:	f000 ffd2 	bl	8008f28 <fiprintf>
 8007f84:	f001 fa1c 	bl	80093c0 <abort>
 8007f88:	4b04      	ldr	r3, [pc, #16]	@ (8007f9c <__assert_func+0x38>)
 8007f8a:	461c      	mov	r4, r3
 8007f8c:	e7f3      	b.n	8007f76 <__assert_func+0x12>
 8007f8e:	bf00      	nop
 8007f90:	24000024 	.word	0x24000024
 8007f94:	0800cf33 	.word	0x0800cf33
 8007f98:	0800cf40 	.word	0x0800cf40
 8007f9c:	0800cf6e 	.word	0x0800cf6e

08007fa0 <malloc>:
 8007fa0:	4b02      	ldr	r3, [pc, #8]	@ (8007fac <malloc+0xc>)
 8007fa2:	4601      	mov	r1, r0
 8007fa4:	6818      	ldr	r0, [r3, #0]
 8007fa6:	f000 b825 	b.w	8007ff4 <_malloc_r>
 8007faa:	bf00      	nop
 8007fac:	24000024 	.word	0x24000024

08007fb0 <sbrk_aligned>:
 8007fb0:	b570      	push	{r4, r5, r6, lr}
 8007fb2:	4e0f      	ldr	r6, [pc, #60]	@ (8007ff0 <sbrk_aligned+0x40>)
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	6831      	ldr	r1, [r6, #0]
 8007fb8:	4605      	mov	r5, r0
 8007fba:	b911      	cbnz	r1, 8007fc2 <sbrk_aligned+0x12>
 8007fbc:	f001 f99c 	bl	80092f8 <_sbrk_r>
 8007fc0:	6030      	str	r0, [r6, #0]
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	f001 f997 	bl	80092f8 <_sbrk_r>
 8007fca:	1c43      	adds	r3, r0, #1
 8007fcc:	d103      	bne.n	8007fd6 <sbrk_aligned+0x26>
 8007fce:	f04f 34ff 	mov.w	r4, #4294967295
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	bd70      	pop	{r4, r5, r6, pc}
 8007fd6:	1cc4      	adds	r4, r0, #3
 8007fd8:	f024 0403 	bic.w	r4, r4, #3
 8007fdc:	42a0      	cmp	r0, r4
 8007fde:	d0f8      	beq.n	8007fd2 <sbrk_aligned+0x22>
 8007fe0:	1a21      	subs	r1, r4, r0
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	f001 f988 	bl	80092f8 <_sbrk_r>
 8007fe8:	3001      	adds	r0, #1
 8007fea:	d1f2      	bne.n	8007fd2 <sbrk_aligned+0x22>
 8007fec:	e7ef      	b.n	8007fce <sbrk_aligned+0x1e>
 8007fee:	bf00      	nop
 8007ff0:	240292c8 	.word	0x240292c8

08007ff4 <_malloc_r>:
 8007ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ff8:	1ccd      	adds	r5, r1, #3
 8007ffa:	f025 0503 	bic.w	r5, r5, #3
 8007ffe:	3508      	adds	r5, #8
 8008000:	2d0c      	cmp	r5, #12
 8008002:	bf38      	it	cc
 8008004:	250c      	movcc	r5, #12
 8008006:	2d00      	cmp	r5, #0
 8008008:	4606      	mov	r6, r0
 800800a:	db01      	blt.n	8008010 <_malloc_r+0x1c>
 800800c:	42a9      	cmp	r1, r5
 800800e:	d904      	bls.n	800801a <_malloc_r+0x26>
 8008010:	230c      	movs	r3, #12
 8008012:	6033      	str	r3, [r6, #0]
 8008014:	2000      	movs	r0, #0
 8008016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800801a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80080f0 <_malloc_r+0xfc>
 800801e:	f000 f869 	bl	80080f4 <__malloc_lock>
 8008022:	f8d8 3000 	ldr.w	r3, [r8]
 8008026:	461c      	mov	r4, r3
 8008028:	bb44      	cbnz	r4, 800807c <_malloc_r+0x88>
 800802a:	4629      	mov	r1, r5
 800802c:	4630      	mov	r0, r6
 800802e:	f7ff ffbf 	bl	8007fb0 <sbrk_aligned>
 8008032:	1c43      	adds	r3, r0, #1
 8008034:	4604      	mov	r4, r0
 8008036:	d158      	bne.n	80080ea <_malloc_r+0xf6>
 8008038:	f8d8 4000 	ldr.w	r4, [r8]
 800803c:	4627      	mov	r7, r4
 800803e:	2f00      	cmp	r7, #0
 8008040:	d143      	bne.n	80080ca <_malloc_r+0xd6>
 8008042:	2c00      	cmp	r4, #0
 8008044:	d04b      	beq.n	80080de <_malloc_r+0xea>
 8008046:	6823      	ldr	r3, [r4, #0]
 8008048:	4639      	mov	r1, r7
 800804a:	4630      	mov	r0, r6
 800804c:	eb04 0903 	add.w	r9, r4, r3
 8008050:	f001 f952 	bl	80092f8 <_sbrk_r>
 8008054:	4581      	cmp	r9, r0
 8008056:	d142      	bne.n	80080de <_malloc_r+0xea>
 8008058:	6821      	ldr	r1, [r4, #0]
 800805a:	1a6d      	subs	r5, r5, r1
 800805c:	4629      	mov	r1, r5
 800805e:	4630      	mov	r0, r6
 8008060:	f7ff ffa6 	bl	8007fb0 <sbrk_aligned>
 8008064:	3001      	adds	r0, #1
 8008066:	d03a      	beq.n	80080de <_malloc_r+0xea>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	442b      	add	r3, r5
 800806c:	6023      	str	r3, [r4, #0]
 800806e:	f8d8 3000 	ldr.w	r3, [r8]
 8008072:	685a      	ldr	r2, [r3, #4]
 8008074:	bb62      	cbnz	r2, 80080d0 <_malloc_r+0xdc>
 8008076:	f8c8 7000 	str.w	r7, [r8]
 800807a:	e00f      	b.n	800809c <_malloc_r+0xa8>
 800807c:	6822      	ldr	r2, [r4, #0]
 800807e:	1b52      	subs	r2, r2, r5
 8008080:	d420      	bmi.n	80080c4 <_malloc_r+0xd0>
 8008082:	2a0b      	cmp	r2, #11
 8008084:	d917      	bls.n	80080b6 <_malloc_r+0xc2>
 8008086:	1961      	adds	r1, r4, r5
 8008088:	42a3      	cmp	r3, r4
 800808a:	6025      	str	r5, [r4, #0]
 800808c:	bf18      	it	ne
 800808e:	6059      	strne	r1, [r3, #4]
 8008090:	6863      	ldr	r3, [r4, #4]
 8008092:	bf08      	it	eq
 8008094:	f8c8 1000 	streq.w	r1, [r8]
 8008098:	5162      	str	r2, [r4, r5]
 800809a:	604b      	str	r3, [r1, #4]
 800809c:	4630      	mov	r0, r6
 800809e:	f000 f82f 	bl	8008100 <__malloc_unlock>
 80080a2:	f104 000b 	add.w	r0, r4, #11
 80080a6:	1d23      	adds	r3, r4, #4
 80080a8:	f020 0007 	bic.w	r0, r0, #7
 80080ac:	1ac2      	subs	r2, r0, r3
 80080ae:	bf1c      	itt	ne
 80080b0:	1a1b      	subne	r3, r3, r0
 80080b2:	50a3      	strne	r3, [r4, r2]
 80080b4:	e7af      	b.n	8008016 <_malloc_r+0x22>
 80080b6:	6862      	ldr	r2, [r4, #4]
 80080b8:	42a3      	cmp	r3, r4
 80080ba:	bf0c      	ite	eq
 80080bc:	f8c8 2000 	streq.w	r2, [r8]
 80080c0:	605a      	strne	r2, [r3, #4]
 80080c2:	e7eb      	b.n	800809c <_malloc_r+0xa8>
 80080c4:	4623      	mov	r3, r4
 80080c6:	6864      	ldr	r4, [r4, #4]
 80080c8:	e7ae      	b.n	8008028 <_malloc_r+0x34>
 80080ca:	463c      	mov	r4, r7
 80080cc:	687f      	ldr	r7, [r7, #4]
 80080ce:	e7b6      	b.n	800803e <_malloc_r+0x4a>
 80080d0:	461a      	mov	r2, r3
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	42a3      	cmp	r3, r4
 80080d6:	d1fb      	bne.n	80080d0 <_malloc_r+0xdc>
 80080d8:	2300      	movs	r3, #0
 80080da:	6053      	str	r3, [r2, #4]
 80080dc:	e7de      	b.n	800809c <_malloc_r+0xa8>
 80080de:	230c      	movs	r3, #12
 80080e0:	6033      	str	r3, [r6, #0]
 80080e2:	4630      	mov	r0, r6
 80080e4:	f000 f80c 	bl	8008100 <__malloc_unlock>
 80080e8:	e794      	b.n	8008014 <_malloc_r+0x20>
 80080ea:	6005      	str	r5, [r0, #0]
 80080ec:	e7d6      	b.n	800809c <_malloc_r+0xa8>
 80080ee:	bf00      	nop
 80080f0:	240292cc 	.word	0x240292cc

080080f4 <__malloc_lock>:
 80080f4:	4801      	ldr	r0, [pc, #4]	@ (80080fc <__malloc_lock+0x8>)
 80080f6:	f001 b94c 	b.w	8009392 <__retarget_lock_acquire_recursive>
 80080fa:	bf00      	nop
 80080fc:	24029410 	.word	0x24029410

08008100 <__malloc_unlock>:
 8008100:	4801      	ldr	r0, [pc, #4]	@ (8008108 <__malloc_unlock+0x8>)
 8008102:	f001 b947 	b.w	8009394 <__retarget_lock_release_recursive>
 8008106:	bf00      	nop
 8008108:	24029410 	.word	0x24029410

0800810c <_realloc_r>:
 800810c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008110:	4607      	mov	r7, r0
 8008112:	4614      	mov	r4, r2
 8008114:	460d      	mov	r5, r1
 8008116:	b921      	cbnz	r1, 8008122 <_realloc_r+0x16>
 8008118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800811c:	4611      	mov	r1, r2
 800811e:	f7ff bf69 	b.w	8007ff4 <_malloc_r>
 8008122:	b92a      	cbnz	r2, 8008130 <_realloc_r+0x24>
 8008124:	f001 ff3a 	bl	8009f9c <_free_r>
 8008128:	4625      	mov	r5, r4
 800812a:	4628      	mov	r0, r5
 800812c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008130:	f002 fc25 	bl	800a97e <_malloc_usable_size_r>
 8008134:	4284      	cmp	r4, r0
 8008136:	4606      	mov	r6, r0
 8008138:	d802      	bhi.n	8008140 <_realloc_r+0x34>
 800813a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800813e:	d8f4      	bhi.n	800812a <_realloc_r+0x1e>
 8008140:	4621      	mov	r1, r4
 8008142:	4638      	mov	r0, r7
 8008144:	f7ff ff56 	bl	8007ff4 <_malloc_r>
 8008148:	4680      	mov	r8, r0
 800814a:	b908      	cbnz	r0, 8008150 <_realloc_r+0x44>
 800814c:	4645      	mov	r5, r8
 800814e:	e7ec      	b.n	800812a <_realloc_r+0x1e>
 8008150:	42b4      	cmp	r4, r6
 8008152:	4622      	mov	r2, r4
 8008154:	4629      	mov	r1, r5
 8008156:	bf28      	it	cs
 8008158:	4632      	movcs	r2, r6
 800815a:	f001 f91c 	bl	8009396 <memcpy>
 800815e:	4629      	mov	r1, r5
 8008160:	4638      	mov	r0, r7
 8008162:	f001 ff1b 	bl	8009f9c <_free_r>
 8008166:	e7f1      	b.n	800814c <_realloc_r+0x40>

08008168 <__cvt>:
 8008168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800816a:	ed2d 8b02 	vpush	{d8}
 800816e:	eeb0 8b40 	vmov.f64	d8, d0
 8008172:	b085      	sub	sp, #20
 8008174:	4617      	mov	r7, r2
 8008176:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008178:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800817a:	ee18 2a90 	vmov	r2, s17
 800817e:	f025 0520 	bic.w	r5, r5, #32
 8008182:	2a00      	cmp	r2, #0
 8008184:	bfb6      	itet	lt
 8008186:	222d      	movlt	r2, #45	@ 0x2d
 8008188:	2200      	movge	r2, #0
 800818a:	eeb1 8b40 	vneglt.f64	d8, d0
 800818e:	2d46      	cmp	r5, #70	@ 0x46
 8008190:	460c      	mov	r4, r1
 8008192:	701a      	strb	r2, [r3, #0]
 8008194:	d004      	beq.n	80081a0 <__cvt+0x38>
 8008196:	2d45      	cmp	r5, #69	@ 0x45
 8008198:	d100      	bne.n	800819c <__cvt+0x34>
 800819a:	3401      	adds	r4, #1
 800819c:	2102      	movs	r1, #2
 800819e:	e000      	b.n	80081a2 <__cvt+0x3a>
 80081a0:	2103      	movs	r1, #3
 80081a2:	ab03      	add	r3, sp, #12
 80081a4:	9301      	str	r3, [sp, #4]
 80081a6:	ab02      	add	r3, sp, #8
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	4622      	mov	r2, r4
 80081ac:	4633      	mov	r3, r6
 80081ae:	eeb0 0b48 	vmov.f64	d0, d8
 80081b2:	f001 f995 	bl	80094e0 <_dtoa_r>
 80081b6:	2d47      	cmp	r5, #71	@ 0x47
 80081b8:	d114      	bne.n	80081e4 <__cvt+0x7c>
 80081ba:	07fb      	lsls	r3, r7, #31
 80081bc:	d50a      	bpl.n	80081d4 <__cvt+0x6c>
 80081be:	1902      	adds	r2, r0, r4
 80081c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80081c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081c8:	bf08      	it	eq
 80081ca:	9203      	streq	r2, [sp, #12]
 80081cc:	2130      	movs	r1, #48	@ 0x30
 80081ce:	9b03      	ldr	r3, [sp, #12]
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d319      	bcc.n	8008208 <__cvt+0xa0>
 80081d4:	9b03      	ldr	r3, [sp, #12]
 80081d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081d8:	1a1b      	subs	r3, r3, r0
 80081da:	6013      	str	r3, [r2, #0]
 80081dc:	b005      	add	sp, #20
 80081de:	ecbd 8b02 	vpop	{d8}
 80081e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081e4:	2d46      	cmp	r5, #70	@ 0x46
 80081e6:	eb00 0204 	add.w	r2, r0, r4
 80081ea:	d1e9      	bne.n	80081c0 <__cvt+0x58>
 80081ec:	7803      	ldrb	r3, [r0, #0]
 80081ee:	2b30      	cmp	r3, #48	@ 0x30
 80081f0:	d107      	bne.n	8008202 <__cvt+0x9a>
 80081f2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80081f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081fa:	bf1c      	itt	ne
 80081fc:	f1c4 0401 	rsbne	r4, r4, #1
 8008200:	6034      	strne	r4, [r6, #0]
 8008202:	6833      	ldr	r3, [r6, #0]
 8008204:	441a      	add	r2, r3
 8008206:	e7db      	b.n	80081c0 <__cvt+0x58>
 8008208:	1c5c      	adds	r4, r3, #1
 800820a:	9403      	str	r4, [sp, #12]
 800820c:	7019      	strb	r1, [r3, #0]
 800820e:	e7de      	b.n	80081ce <__cvt+0x66>

08008210 <__exponent>:
 8008210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008212:	2900      	cmp	r1, #0
 8008214:	bfba      	itte	lt
 8008216:	4249      	neglt	r1, r1
 8008218:	232d      	movlt	r3, #45	@ 0x2d
 800821a:	232b      	movge	r3, #43	@ 0x2b
 800821c:	2909      	cmp	r1, #9
 800821e:	7002      	strb	r2, [r0, #0]
 8008220:	7043      	strb	r3, [r0, #1]
 8008222:	dd29      	ble.n	8008278 <__exponent+0x68>
 8008224:	f10d 0307 	add.w	r3, sp, #7
 8008228:	461d      	mov	r5, r3
 800822a:	270a      	movs	r7, #10
 800822c:	461a      	mov	r2, r3
 800822e:	fbb1 f6f7 	udiv	r6, r1, r7
 8008232:	fb07 1416 	mls	r4, r7, r6, r1
 8008236:	3430      	adds	r4, #48	@ 0x30
 8008238:	f802 4c01 	strb.w	r4, [r2, #-1]
 800823c:	460c      	mov	r4, r1
 800823e:	2c63      	cmp	r4, #99	@ 0x63
 8008240:	f103 33ff 	add.w	r3, r3, #4294967295
 8008244:	4631      	mov	r1, r6
 8008246:	dcf1      	bgt.n	800822c <__exponent+0x1c>
 8008248:	3130      	adds	r1, #48	@ 0x30
 800824a:	1e94      	subs	r4, r2, #2
 800824c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008250:	1c41      	adds	r1, r0, #1
 8008252:	4623      	mov	r3, r4
 8008254:	42ab      	cmp	r3, r5
 8008256:	d30a      	bcc.n	800826e <__exponent+0x5e>
 8008258:	f10d 0309 	add.w	r3, sp, #9
 800825c:	1a9b      	subs	r3, r3, r2
 800825e:	42ac      	cmp	r4, r5
 8008260:	bf88      	it	hi
 8008262:	2300      	movhi	r3, #0
 8008264:	3302      	adds	r3, #2
 8008266:	4403      	add	r3, r0
 8008268:	1a18      	subs	r0, r3, r0
 800826a:	b003      	add	sp, #12
 800826c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800826e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008272:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008276:	e7ed      	b.n	8008254 <__exponent+0x44>
 8008278:	2330      	movs	r3, #48	@ 0x30
 800827a:	3130      	adds	r1, #48	@ 0x30
 800827c:	7083      	strb	r3, [r0, #2]
 800827e:	70c1      	strb	r1, [r0, #3]
 8008280:	1d03      	adds	r3, r0, #4
 8008282:	e7f1      	b.n	8008268 <__exponent+0x58>
 8008284:	0000      	movs	r0, r0
	...

08008288 <_printf_float>:
 8008288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828c:	b08d      	sub	sp, #52	@ 0x34
 800828e:	460c      	mov	r4, r1
 8008290:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008294:	4616      	mov	r6, r2
 8008296:	461f      	mov	r7, r3
 8008298:	4605      	mov	r5, r0
 800829a:	f000 ff97 	bl	80091cc <_localeconv_r>
 800829e:	f8d0 b000 	ldr.w	fp, [r0]
 80082a2:	4658      	mov	r0, fp
 80082a4:	f7f8 f86c 	bl	8000380 <strlen>
 80082a8:	2300      	movs	r3, #0
 80082aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80082ac:	f8d8 3000 	ldr.w	r3, [r8]
 80082b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80082b4:	6822      	ldr	r2, [r4, #0]
 80082b6:	9005      	str	r0, [sp, #20]
 80082b8:	3307      	adds	r3, #7
 80082ba:	f023 0307 	bic.w	r3, r3, #7
 80082be:	f103 0108 	add.w	r1, r3, #8
 80082c2:	f8c8 1000 	str.w	r1, [r8]
 80082c6:	ed93 0b00 	vldr	d0, [r3]
 80082ca:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008528 <_printf_float+0x2a0>
 80082ce:	eeb0 7bc0 	vabs.f64	d7, d0
 80082d2:	eeb4 7b46 	vcmp.f64	d7, d6
 80082d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082da:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80082de:	dd24      	ble.n	800832a <_printf_float+0xa2>
 80082e0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80082e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e8:	d502      	bpl.n	80082f0 <_printf_float+0x68>
 80082ea:	232d      	movs	r3, #45	@ 0x2d
 80082ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082f0:	498f      	ldr	r1, [pc, #572]	@ (8008530 <_printf_float+0x2a8>)
 80082f2:	4b90      	ldr	r3, [pc, #576]	@ (8008534 <_printf_float+0x2ac>)
 80082f4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80082f8:	bf8c      	ite	hi
 80082fa:	4688      	movhi	r8, r1
 80082fc:	4698      	movls	r8, r3
 80082fe:	f022 0204 	bic.w	r2, r2, #4
 8008302:	2303      	movs	r3, #3
 8008304:	6123      	str	r3, [r4, #16]
 8008306:	6022      	str	r2, [r4, #0]
 8008308:	f04f 0a00 	mov.w	sl, #0
 800830c:	9700      	str	r7, [sp, #0]
 800830e:	4633      	mov	r3, r6
 8008310:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008312:	4621      	mov	r1, r4
 8008314:	4628      	mov	r0, r5
 8008316:	f000 f9d1 	bl	80086bc <_printf_common>
 800831a:	3001      	adds	r0, #1
 800831c:	f040 8089 	bne.w	8008432 <_printf_float+0x1aa>
 8008320:	f04f 30ff 	mov.w	r0, #4294967295
 8008324:	b00d      	add	sp, #52	@ 0x34
 8008326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832a:	eeb4 0b40 	vcmp.f64	d0, d0
 800832e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008332:	d709      	bvc.n	8008348 <_printf_float+0xc0>
 8008334:	ee10 3a90 	vmov	r3, s1
 8008338:	2b00      	cmp	r3, #0
 800833a:	bfbc      	itt	lt
 800833c:	232d      	movlt	r3, #45	@ 0x2d
 800833e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008342:	497d      	ldr	r1, [pc, #500]	@ (8008538 <_printf_float+0x2b0>)
 8008344:	4b7d      	ldr	r3, [pc, #500]	@ (800853c <_printf_float+0x2b4>)
 8008346:	e7d5      	b.n	80082f4 <_printf_float+0x6c>
 8008348:	6863      	ldr	r3, [r4, #4]
 800834a:	1c59      	adds	r1, r3, #1
 800834c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008350:	d139      	bne.n	80083c6 <_printf_float+0x13e>
 8008352:	2306      	movs	r3, #6
 8008354:	6063      	str	r3, [r4, #4]
 8008356:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800835a:	2300      	movs	r3, #0
 800835c:	6022      	str	r2, [r4, #0]
 800835e:	9303      	str	r3, [sp, #12]
 8008360:	ab0a      	add	r3, sp, #40	@ 0x28
 8008362:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008366:	ab09      	add	r3, sp, #36	@ 0x24
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	6861      	ldr	r1, [r4, #4]
 800836c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008370:	4628      	mov	r0, r5
 8008372:	f7ff fef9 	bl	8008168 <__cvt>
 8008376:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800837a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800837c:	4680      	mov	r8, r0
 800837e:	d129      	bne.n	80083d4 <_printf_float+0x14c>
 8008380:	1cc8      	adds	r0, r1, #3
 8008382:	db02      	blt.n	800838a <_printf_float+0x102>
 8008384:	6863      	ldr	r3, [r4, #4]
 8008386:	4299      	cmp	r1, r3
 8008388:	dd41      	ble.n	800840e <_printf_float+0x186>
 800838a:	f1a9 0902 	sub.w	r9, r9, #2
 800838e:	fa5f f989 	uxtb.w	r9, r9
 8008392:	3901      	subs	r1, #1
 8008394:	464a      	mov	r2, r9
 8008396:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800839a:	9109      	str	r1, [sp, #36]	@ 0x24
 800839c:	f7ff ff38 	bl	8008210 <__exponent>
 80083a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80083a2:	1813      	adds	r3, r2, r0
 80083a4:	2a01      	cmp	r2, #1
 80083a6:	4682      	mov	sl, r0
 80083a8:	6123      	str	r3, [r4, #16]
 80083aa:	dc02      	bgt.n	80083b2 <_printf_float+0x12a>
 80083ac:	6822      	ldr	r2, [r4, #0]
 80083ae:	07d2      	lsls	r2, r2, #31
 80083b0:	d501      	bpl.n	80083b6 <_printf_float+0x12e>
 80083b2:	3301      	adds	r3, #1
 80083b4:	6123      	str	r3, [r4, #16]
 80083b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d0a6      	beq.n	800830c <_printf_float+0x84>
 80083be:	232d      	movs	r3, #45	@ 0x2d
 80083c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083c4:	e7a2      	b.n	800830c <_printf_float+0x84>
 80083c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80083ca:	d1c4      	bne.n	8008356 <_printf_float+0xce>
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1c2      	bne.n	8008356 <_printf_float+0xce>
 80083d0:	2301      	movs	r3, #1
 80083d2:	e7bf      	b.n	8008354 <_printf_float+0xcc>
 80083d4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80083d8:	d9db      	bls.n	8008392 <_printf_float+0x10a>
 80083da:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80083de:	d118      	bne.n	8008412 <_printf_float+0x18a>
 80083e0:	2900      	cmp	r1, #0
 80083e2:	6863      	ldr	r3, [r4, #4]
 80083e4:	dd0b      	ble.n	80083fe <_printf_float+0x176>
 80083e6:	6121      	str	r1, [r4, #16]
 80083e8:	b913      	cbnz	r3, 80083f0 <_printf_float+0x168>
 80083ea:	6822      	ldr	r2, [r4, #0]
 80083ec:	07d0      	lsls	r0, r2, #31
 80083ee:	d502      	bpl.n	80083f6 <_printf_float+0x16e>
 80083f0:	3301      	adds	r3, #1
 80083f2:	440b      	add	r3, r1
 80083f4:	6123      	str	r3, [r4, #16]
 80083f6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80083f8:	f04f 0a00 	mov.w	sl, #0
 80083fc:	e7db      	b.n	80083b6 <_printf_float+0x12e>
 80083fe:	b913      	cbnz	r3, 8008406 <_printf_float+0x17e>
 8008400:	6822      	ldr	r2, [r4, #0]
 8008402:	07d2      	lsls	r2, r2, #31
 8008404:	d501      	bpl.n	800840a <_printf_float+0x182>
 8008406:	3302      	adds	r3, #2
 8008408:	e7f4      	b.n	80083f4 <_printf_float+0x16c>
 800840a:	2301      	movs	r3, #1
 800840c:	e7f2      	b.n	80083f4 <_printf_float+0x16c>
 800840e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8008412:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008414:	4299      	cmp	r1, r3
 8008416:	db05      	blt.n	8008424 <_printf_float+0x19c>
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	6121      	str	r1, [r4, #16]
 800841c:	07d8      	lsls	r0, r3, #31
 800841e:	d5ea      	bpl.n	80083f6 <_printf_float+0x16e>
 8008420:	1c4b      	adds	r3, r1, #1
 8008422:	e7e7      	b.n	80083f4 <_printf_float+0x16c>
 8008424:	2900      	cmp	r1, #0
 8008426:	bfd4      	ite	le
 8008428:	f1c1 0202 	rsble	r2, r1, #2
 800842c:	2201      	movgt	r2, #1
 800842e:	4413      	add	r3, r2
 8008430:	e7e0      	b.n	80083f4 <_printf_float+0x16c>
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	055a      	lsls	r2, r3, #21
 8008436:	d407      	bmi.n	8008448 <_printf_float+0x1c0>
 8008438:	6923      	ldr	r3, [r4, #16]
 800843a:	4642      	mov	r2, r8
 800843c:	4631      	mov	r1, r6
 800843e:	4628      	mov	r0, r5
 8008440:	47b8      	blx	r7
 8008442:	3001      	adds	r0, #1
 8008444:	d12a      	bne.n	800849c <_printf_float+0x214>
 8008446:	e76b      	b.n	8008320 <_printf_float+0x98>
 8008448:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800844c:	f240 80e0 	bls.w	8008610 <_printf_float+0x388>
 8008450:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008454:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800845c:	d133      	bne.n	80084c6 <_printf_float+0x23e>
 800845e:	4a38      	ldr	r2, [pc, #224]	@ (8008540 <_printf_float+0x2b8>)
 8008460:	2301      	movs	r3, #1
 8008462:	4631      	mov	r1, r6
 8008464:	4628      	mov	r0, r5
 8008466:	47b8      	blx	r7
 8008468:	3001      	adds	r0, #1
 800846a:	f43f af59 	beq.w	8008320 <_printf_float+0x98>
 800846e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008472:	4543      	cmp	r3, r8
 8008474:	db02      	blt.n	800847c <_printf_float+0x1f4>
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	07d8      	lsls	r0, r3, #31
 800847a:	d50f      	bpl.n	800849c <_printf_float+0x214>
 800847c:	9b05      	ldr	r3, [sp, #20]
 800847e:	465a      	mov	r2, fp
 8008480:	4631      	mov	r1, r6
 8008482:	4628      	mov	r0, r5
 8008484:	47b8      	blx	r7
 8008486:	3001      	adds	r0, #1
 8008488:	f43f af4a 	beq.w	8008320 <_printf_float+0x98>
 800848c:	f04f 0900 	mov.w	r9, #0
 8008490:	f108 38ff 	add.w	r8, r8, #4294967295
 8008494:	f104 0a1a 	add.w	sl, r4, #26
 8008498:	45c8      	cmp	r8, r9
 800849a:	dc09      	bgt.n	80084b0 <_printf_float+0x228>
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	079b      	lsls	r3, r3, #30
 80084a0:	f100 8107 	bmi.w	80086b2 <_printf_float+0x42a>
 80084a4:	68e0      	ldr	r0, [r4, #12]
 80084a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084a8:	4298      	cmp	r0, r3
 80084aa:	bfb8      	it	lt
 80084ac:	4618      	movlt	r0, r3
 80084ae:	e739      	b.n	8008324 <_printf_float+0x9c>
 80084b0:	2301      	movs	r3, #1
 80084b2:	4652      	mov	r2, sl
 80084b4:	4631      	mov	r1, r6
 80084b6:	4628      	mov	r0, r5
 80084b8:	47b8      	blx	r7
 80084ba:	3001      	adds	r0, #1
 80084bc:	f43f af30 	beq.w	8008320 <_printf_float+0x98>
 80084c0:	f109 0901 	add.w	r9, r9, #1
 80084c4:	e7e8      	b.n	8008498 <_printf_float+0x210>
 80084c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	dc3b      	bgt.n	8008544 <_printf_float+0x2bc>
 80084cc:	4a1c      	ldr	r2, [pc, #112]	@ (8008540 <_printf_float+0x2b8>)
 80084ce:	2301      	movs	r3, #1
 80084d0:	4631      	mov	r1, r6
 80084d2:	4628      	mov	r0, r5
 80084d4:	47b8      	blx	r7
 80084d6:	3001      	adds	r0, #1
 80084d8:	f43f af22 	beq.w	8008320 <_printf_float+0x98>
 80084dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80084e0:	ea59 0303 	orrs.w	r3, r9, r3
 80084e4:	d102      	bne.n	80084ec <_printf_float+0x264>
 80084e6:	6823      	ldr	r3, [r4, #0]
 80084e8:	07d9      	lsls	r1, r3, #31
 80084ea:	d5d7      	bpl.n	800849c <_printf_float+0x214>
 80084ec:	9b05      	ldr	r3, [sp, #20]
 80084ee:	465a      	mov	r2, fp
 80084f0:	4631      	mov	r1, r6
 80084f2:	4628      	mov	r0, r5
 80084f4:	47b8      	blx	r7
 80084f6:	3001      	adds	r0, #1
 80084f8:	f43f af12 	beq.w	8008320 <_printf_float+0x98>
 80084fc:	f04f 0a00 	mov.w	sl, #0
 8008500:	f104 0b1a 	add.w	fp, r4, #26
 8008504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008506:	425b      	negs	r3, r3
 8008508:	4553      	cmp	r3, sl
 800850a:	dc01      	bgt.n	8008510 <_printf_float+0x288>
 800850c:	464b      	mov	r3, r9
 800850e:	e794      	b.n	800843a <_printf_float+0x1b2>
 8008510:	2301      	movs	r3, #1
 8008512:	465a      	mov	r2, fp
 8008514:	4631      	mov	r1, r6
 8008516:	4628      	mov	r0, r5
 8008518:	47b8      	blx	r7
 800851a:	3001      	adds	r0, #1
 800851c:	f43f af00 	beq.w	8008320 <_printf_float+0x98>
 8008520:	f10a 0a01 	add.w	sl, sl, #1
 8008524:	e7ee      	b.n	8008504 <_printf_float+0x27c>
 8008526:	bf00      	nop
 8008528:	ffffffff 	.word	0xffffffff
 800852c:	7fefffff 	.word	0x7fefffff
 8008530:	0800cf73 	.word	0x0800cf73
 8008534:	0800cf6f 	.word	0x0800cf6f
 8008538:	0800cf7b 	.word	0x0800cf7b
 800853c:	0800cf77 	.word	0x0800cf77
 8008540:	0800cf7f 	.word	0x0800cf7f
 8008544:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008546:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800854a:	4553      	cmp	r3, sl
 800854c:	bfa8      	it	ge
 800854e:	4653      	movge	r3, sl
 8008550:	2b00      	cmp	r3, #0
 8008552:	4699      	mov	r9, r3
 8008554:	dc37      	bgt.n	80085c6 <_printf_float+0x33e>
 8008556:	2300      	movs	r3, #0
 8008558:	9307      	str	r3, [sp, #28]
 800855a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800855e:	f104 021a 	add.w	r2, r4, #26
 8008562:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008564:	9907      	ldr	r1, [sp, #28]
 8008566:	9306      	str	r3, [sp, #24]
 8008568:	eba3 0309 	sub.w	r3, r3, r9
 800856c:	428b      	cmp	r3, r1
 800856e:	dc31      	bgt.n	80085d4 <_printf_float+0x34c>
 8008570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008572:	459a      	cmp	sl, r3
 8008574:	dc3b      	bgt.n	80085ee <_printf_float+0x366>
 8008576:	6823      	ldr	r3, [r4, #0]
 8008578:	07da      	lsls	r2, r3, #31
 800857a:	d438      	bmi.n	80085ee <_printf_float+0x366>
 800857c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800857e:	ebaa 0903 	sub.w	r9, sl, r3
 8008582:	9b06      	ldr	r3, [sp, #24]
 8008584:	ebaa 0303 	sub.w	r3, sl, r3
 8008588:	4599      	cmp	r9, r3
 800858a:	bfa8      	it	ge
 800858c:	4699      	movge	r9, r3
 800858e:	f1b9 0f00 	cmp.w	r9, #0
 8008592:	dc34      	bgt.n	80085fe <_printf_float+0x376>
 8008594:	f04f 0800 	mov.w	r8, #0
 8008598:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800859c:	f104 0b1a 	add.w	fp, r4, #26
 80085a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a2:	ebaa 0303 	sub.w	r3, sl, r3
 80085a6:	eba3 0309 	sub.w	r3, r3, r9
 80085aa:	4543      	cmp	r3, r8
 80085ac:	f77f af76 	ble.w	800849c <_printf_float+0x214>
 80085b0:	2301      	movs	r3, #1
 80085b2:	465a      	mov	r2, fp
 80085b4:	4631      	mov	r1, r6
 80085b6:	4628      	mov	r0, r5
 80085b8:	47b8      	blx	r7
 80085ba:	3001      	adds	r0, #1
 80085bc:	f43f aeb0 	beq.w	8008320 <_printf_float+0x98>
 80085c0:	f108 0801 	add.w	r8, r8, #1
 80085c4:	e7ec      	b.n	80085a0 <_printf_float+0x318>
 80085c6:	4642      	mov	r2, r8
 80085c8:	4631      	mov	r1, r6
 80085ca:	4628      	mov	r0, r5
 80085cc:	47b8      	blx	r7
 80085ce:	3001      	adds	r0, #1
 80085d0:	d1c1      	bne.n	8008556 <_printf_float+0x2ce>
 80085d2:	e6a5      	b.n	8008320 <_printf_float+0x98>
 80085d4:	2301      	movs	r3, #1
 80085d6:	4631      	mov	r1, r6
 80085d8:	4628      	mov	r0, r5
 80085da:	9206      	str	r2, [sp, #24]
 80085dc:	47b8      	blx	r7
 80085de:	3001      	adds	r0, #1
 80085e0:	f43f ae9e 	beq.w	8008320 <_printf_float+0x98>
 80085e4:	9b07      	ldr	r3, [sp, #28]
 80085e6:	9a06      	ldr	r2, [sp, #24]
 80085e8:	3301      	adds	r3, #1
 80085ea:	9307      	str	r3, [sp, #28]
 80085ec:	e7b9      	b.n	8008562 <_printf_float+0x2da>
 80085ee:	9b05      	ldr	r3, [sp, #20]
 80085f0:	465a      	mov	r2, fp
 80085f2:	4631      	mov	r1, r6
 80085f4:	4628      	mov	r0, r5
 80085f6:	47b8      	blx	r7
 80085f8:	3001      	adds	r0, #1
 80085fa:	d1bf      	bne.n	800857c <_printf_float+0x2f4>
 80085fc:	e690      	b.n	8008320 <_printf_float+0x98>
 80085fe:	9a06      	ldr	r2, [sp, #24]
 8008600:	464b      	mov	r3, r9
 8008602:	4442      	add	r2, r8
 8008604:	4631      	mov	r1, r6
 8008606:	4628      	mov	r0, r5
 8008608:	47b8      	blx	r7
 800860a:	3001      	adds	r0, #1
 800860c:	d1c2      	bne.n	8008594 <_printf_float+0x30c>
 800860e:	e687      	b.n	8008320 <_printf_float+0x98>
 8008610:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008614:	f1b9 0f01 	cmp.w	r9, #1
 8008618:	dc01      	bgt.n	800861e <_printf_float+0x396>
 800861a:	07db      	lsls	r3, r3, #31
 800861c:	d536      	bpl.n	800868c <_printf_float+0x404>
 800861e:	2301      	movs	r3, #1
 8008620:	4642      	mov	r2, r8
 8008622:	4631      	mov	r1, r6
 8008624:	4628      	mov	r0, r5
 8008626:	47b8      	blx	r7
 8008628:	3001      	adds	r0, #1
 800862a:	f43f ae79 	beq.w	8008320 <_printf_float+0x98>
 800862e:	9b05      	ldr	r3, [sp, #20]
 8008630:	465a      	mov	r2, fp
 8008632:	4631      	mov	r1, r6
 8008634:	4628      	mov	r0, r5
 8008636:	47b8      	blx	r7
 8008638:	3001      	adds	r0, #1
 800863a:	f43f ae71 	beq.w	8008320 <_printf_float+0x98>
 800863e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008642:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800864a:	f109 39ff 	add.w	r9, r9, #4294967295
 800864e:	d018      	beq.n	8008682 <_printf_float+0x3fa>
 8008650:	464b      	mov	r3, r9
 8008652:	f108 0201 	add.w	r2, r8, #1
 8008656:	4631      	mov	r1, r6
 8008658:	4628      	mov	r0, r5
 800865a:	47b8      	blx	r7
 800865c:	3001      	adds	r0, #1
 800865e:	d10c      	bne.n	800867a <_printf_float+0x3f2>
 8008660:	e65e      	b.n	8008320 <_printf_float+0x98>
 8008662:	2301      	movs	r3, #1
 8008664:	465a      	mov	r2, fp
 8008666:	4631      	mov	r1, r6
 8008668:	4628      	mov	r0, r5
 800866a:	47b8      	blx	r7
 800866c:	3001      	adds	r0, #1
 800866e:	f43f ae57 	beq.w	8008320 <_printf_float+0x98>
 8008672:	f108 0801 	add.w	r8, r8, #1
 8008676:	45c8      	cmp	r8, r9
 8008678:	dbf3      	blt.n	8008662 <_printf_float+0x3da>
 800867a:	4653      	mov	r3, sl
 800867c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008680:	e6dc      	b.n	800843c <_printf_float+0x1b4>
 8008682:	f04f 0800 	mov.w	r8, #0
 8008686:	f104 0b1a 	add.w	fp, r4, #26
 800868a:	e7f4      	b.n	8008676 <_printf_float+0x3ee>
 800868c:	2301      	movs	r3, #1
 800868e:	4642      	mov	r2, r8
 8008690:	e7e1      	b.n	8008656 <_printf_float+0x3ce>
 8008692:	2301      	movs	r3, #1
 8008694:	464a      	mov	r2, r9
 8008696:	4631      	mov	r1, r6
 8008698:	4628      	mov	r0, r5
 800869a:	47b8      	blx	r7
 800869c:	3001      	adds	r0, #1
 800869e:	f43f ae3f 	beq.w	8008320 <_printf_float+0x98>
 80086a2:	f108 0801 	add.w	r8, r8, #1
 80086a6:	68e3      	ldr	r3, [r4, #12]
 80086a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80086aa:	1a5b      	subs	r3, r3, r1
 80086ac:	4543      	cmp	r3, r8
 80086ae:	dcf0      	bgt.n	8008692 <_printf_float+0x40a>
 80086b0:	e6f8      	b.n	80084a4 <_printf_float+0x21c>
 80086b2:	f04f 0800 	mov.w	r8, #0
 80086b6:	f104 0919 	add.w	r9, r4, #25
 80086ba:	e7f4      	b.n	80086a6 <_printf_float+0x41e>

080086bc <_printf_common>:
 80086bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086c0:	4616      	mov	r6, r2
 80086c2:	4698      	mov	r8, r3
 80086c4:	688a      	ldr	r2, [r1, #8]
 80086c6:	690b      	ldr	r3, [r1, #16]
 80086c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086cc:	4293      	cmp	r3, r2
 80086ce:	bfb8      	it	lt
 80086d0:	4613      	movlt	r3, r2
 80086d2:	6033      	str	r3, [r6, #0]
 80086d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086d8:	4607      	mov	r7, r0
 80086da:	460c      	mov	r4, r1
 80086dc:	b10a      	cbz	r2, 80086e2 <_printf_common+0x26>
 80086de:	3301      	adds	r3, #1
 80086e0:	6033      	str	r3, [r6, #0]
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	0699      	lsls	r1, r3, #26
 80086e6:	bf42      	ittt	mi
 80086e8:	6833      	ldrmi	r3, [r6, #0]
 80086ea:	3302      	addmi	r3, #2
 80086ec:	6033      	strmi	r3, [r6, #0]
 80086ee:	6825      	ldr	r5, [r4, #0]
 80086f0:	f015 0506 	ands.w	r5, r5, #6
 80086f4:	d106      	bne.n	8008704 <_printf_common+0x48>
 80086f6:	f104 0a19 	add.w	sl, r4, #25
 80086fa:	68e3      	ldr	r3, [r4, #12]
 80086fc:	6832      	ldr	r2, [r6, #0]
 80086fe:	1a9b      	subs	r3, r3, r2
 8008700:	42ab      	cmp	r3, r5
 8008702:	dc26      	bgt.n	8008752 <_printf_common+0x96>
 8008704:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008708:	6822      	ldr	r2, [r4, #0]
 800870a:	3b00      	subs	r3, #0
 800870c:	bf18      	it	ne
 800870e:	2301      	movne	r3, #1
 8008710:	0692      	lsls	r2, r2, #26
 8008712:	d42b      	bmi.n	800876c <_printf_common+0xb0>
 8008714:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008718:	4641      	mov	r1, r8
 800871a:	4638      	mov	r0, r7
 800871c:	47c8      	blx	r9
 800871e:	3001      	adds	r0, #1
 8008720:	d01e      	beq.n	8008760 <_printf_common+0xa4>
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	6922      	ldr	r2, [r4, #16]
 8008726:	f003 0306 	and.w	r3, r3, #6
 800872a:	2b04      	cmp	r3, #4
 800872c:	bf02      	ittt	eq
 800872e:	68e5      	ldreq	r5, [r4, #12]
 8008730:	6833      	ldreq	r3, [r6, #0]
 8008732:	1aed      	subeq	r5, r5, r3
 8008734:	68a3      	ldr	r3, [r4, #8]
 8008736:	bf0c      	ite	eq
 8008738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800873c:	2500      	movne	r5, #0
 800873e:	4293      	cmp	r3, r2
 8008740:	bfc4      	itt	gt
 8008742:	1a9b      	subgt	r3, r3, r2
 8008744:	18ed      	addgt	r5, r5, r3
 8008746:	2600      	movs	r6, #0
 8008748:	341a      	adds	r4, #26
 800874a:	42b5      	cmp	r5, r6
 800874c:	d11a      	bne.n	8008784 <_printf_common+0xc8>
 800874e:	2000      	movs	r0, #0
 8008750:	e008      	b.n	8008764 <_printf_common+0xa8>
 8008752:	2301      	movs	r3, #1
 8008754:	4652      	mov	r2, sl
 8008756:	4641      	mov	r1, r8
 8008758:	4638      	mov	r0, r7
 800875a:	47c8      	blx	r9
 800875c:	3001      	adds	r0, #1
 800875e:	d103      	bne.n	8008768 <_printf_common+0xac>
 8008760:	f04f 30ff 	mov.w	r0, #4294967295
 8008764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008768:	3501      	adds	r5, #1
 800876a:	e7c6      	b.n	80086fa <_printf_common+0x3e>
 800876c:	18e1      	adds	r1, r4, r3
 800876e:	1c5a      	adds	r2, r3, #1
 8008770:	2030      	movs	r0, #48	@ 0x30
 8008772:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008776:	4422      	add	r2, r4
 8008778:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800877c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008780:	3302      	adds	r3, #2
 8008782:	e7c7      	b.n	8008714 <_printf_common+0x58>
 8008784:	2301      	movs	r3, #1
 8008786:	4622      	mov	r2, r4
 8008788:	4641      	mov	r1, r8
 800878a:	4638      	mov	r0, r7
 800878c:	47c8      	blx	r9
 800878e:	3001      	adds	r0, #1
 8008790:	d0e6      	beq.n	8008760 <_printf_common+0xa4>
 8008792:	3601      	adds	r6, #1
 8008794:	e7d9      	b.n	800874a <_printf_common+0x8e>
	...

08008798 <_printf_i>:
 8008798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800879c:	7e0f      	ldrb	r7, [r1, #24]
 800879e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80087a0:	2f78      	cmp	r7, #120	@ 0x78
 80087a2:	4691      	mov	r9, r2
 80087a4:	4680      	mov	r8, r0
 80087a6:	460c      	mov	r4, r1
 80087a8:	469a      	mov	sl, r3
 80087aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80087ae:	d807      	bhi.n	80087c0 <_printf_i+0x28>
 80087b0:	2f62      	cmp	r7, #98	@ 0x62
 80087b2:	d80a      	bhi.n	80087ca <_printf_i+0x32>
 80087b4:	2f00      	cmp	r7, #0
 80087b6:	f000 80d1 	beq.w	800895c <_printf_i+0x1c4>
 80087ba:	2f58      	cmp	r7, #88	@ 0x58
 80087bc:	f000 80b8 	beq.w	8008930 <_printf_i+0x198>
 80087c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80087c8:	e03a      	b.n	8008840 <_printf_i+0xa8>
 80087ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087ce:	2b15      	cmp	r3, #21
 80087d0:	d8f6      	bhi.n	80087c0 <_printf_i+0x28>
 80087d2:	a101      	add	r1, pc, #4	@ (adr r1, 80087d8 <_printf_i+0x40>)
 80087d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087d8:	08008831 	.word	0x08008831
 80087dc:	08008845 	.word	0x08008845
 80087e0:	080087c1 	.word	0x080087c1
 80087e4:	080087c1 	.word	0x080087c1
 80087e8:	080087c1 	.word	0x080087c1
 80087ec:	080087c1 	.word	0x080087c1
 80087f0:	08008845 	.word	0x08008845
 80087f4:	080087c1 	.word	0x080087c1
 80087f8:	080087c1 	.word	0x080087c1
 80087fc:	080087c1 	.word	0x080087c1
 8008800:	080087c1 	.word	0x080087c1
 8008804:	08008943 	.word	0x08008943
 8008808:	0800886f 	.word	0x0800886f
 800880c:	080088fd 	.word	0x080088fd
 8008810:	080087c1 	.word	0x080087c1
 8008814:	080087c1 	.word	0x080087c1
 8008818:	08008965 	.word	0x08008965
 800881c:	080087c1 	.word	0x080087c1
 8008820:	0800886f 	.word	0x0800886f
 8008824:	080087c1 	.word	0x080087c1
 8008828:	080087c1 	.word	0x080087c1
 800882c:	08008905 	.word	0x08008905
 8008830:	6833      	ldr	r3, [r6, #0]
 8008832:	1d1a      	adds	r2, r3, #4
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	6032      	str	r2, [r6, #0]
 8008838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800883c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008840:	2301      	movs	r3, #1
 8008842:	e09c      	b.n	800897e <_printf_i+0x1e6>
 8008844:	6833      	ldr	r3, [r6, #0]
 8008846:	6820      	ldr	r0, [r4, #0]
 8008848:	1d19      	adds	r1, r3, #4
 800884a:	6031      	str	r1, [r6, #0]
 800884c:	0606      	lsls	r6, r0, #24
 800884e:	d501      	bpl.n	8008854 <_printf_i+0xbc>
 8008850:	681d      	ldr	r5, [r3, #0]
 8008852:	e003      	b.n	800885c <_printf_i+0xc4>
 8008854:	0645      	lsls	r5, r0, #25
 8008856:	d5fb      	bpl.n	8008850 <_printf_i+0xb8>
 8008858:	f9b3 5000 	ldrsh.w	r5, [r3]
 800885c:	2d00      	cmp	r5, #0
 800885e:	da03      	bge.n	8008868 <_printf_i+0xd0>
 8008860:	232d      	movs	r3, #45	@ 0x2d
 8008862:	426d      	negs	r5, r5
 8008864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008868:	4858      	ldr	r0, [pc, #352]	@ (80089cc <_printf_i+0x234>)
 800886a:	230a      	movs	r3, #10
 800886c:	e011      	b.n	8008892 <_printf_i+0xfa>
 800886e:	6821      	ldr	r1, [r4, #0]
 8008870:	6833      	ldr	r3, [r6, #0]
 8008872:	0608      	lsls	r0, r1, #24
 8008874:	f853 5b04 	ldr.w	r5, [r3], #4
 8008878:	d402      	bmi.n	8008880 <_printf_i+0xe8>
 800887a:	0649      	lsls	r1, r1, #25
 800887c:	bf48      	it	mi
 800887e:	b2ad      	uxthmi	r5, r5
 8008880:	2f6f      	cmp	r7, #111	@ 0x6f
 8008882:	4852      	ldr	r0, [pc, #328]	@ (80089cc <_printf_i+0x234>)
 8008884:	6033      	str	r3, [r6, #0]
 8008886:	bf14      	ite	ne
 8008888:	230a      	movne	r3, #10
 800888a:	2308      	moveq	r3, #8
 800888c:	2100      	movs	r1, #0
 800888e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008892:	6866      	ldr	r6, [r4, #4]
 8008894:	60a6      	str	r6, [r4, #8]
 8008896:	2e00      	cmp	r6, #0
 8008898:	db05      	blt.n	80088a6 <_printf_i+0x10e>
 800889a:	6821      	ldr	r1, [r4, #0]
 800889c:	432e      	orrs	r6, r5
 800889e:	f021 0104 	bic.w	r1, r1, #4
 80088a2:	6021      	str	r1, [r4, #0]
 80088a4:	d04b      	beq.n	800893e <_printf_i+0x1a6>
 80088a6:	4616      	mov	r6, r2
 80088a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80088ac:	fb03 5711 	mls	r7, r3, r1, r5
 80088b0:	5dc7      	ldrb	r7, [r0, r7]
 80088b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088b6:	462f      	mov	r7, r5
 80088b8:	42bb      	cmp	r3, r7
 80088ba:	460d      	mov	r5, r1
 80088bc:	d9f4      	bls.n	80088a8 <_printf_i+0x110>
 80088be:	2b08      	cmp	r3, #8
 80088c0:	d10b      	bne.n	80088da <_printf_i+0x142>
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	07df      	lsls	r7, r3, #31
 80088c6:	d508      	bpl.n	80088da <_printf_i+0x142>
 80088c8:	6923      	ldr	r3, [r4, #16]
 80088ca:	6861      	ldr	r1, [r4, #4]
 80088cc:	4299      	cmp	r1, r3
 80088ce:	bfde      	ittt	le
 80088d0:	2330      	movle	r3, #48	@ 0x30
 80088d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088da:	1b92      	subs	r2, r2, r6
 80088dc:	6122      	str	r2, [r4, #16]
 80088de:	f8cd a000 	str.w	sl, [sp]
 80088e2:	464b      	mov	r3, r9
 80088e4:	aa03      	add	r2, sp, #12
 80088e6:	4621      	mov	r1, r4
 80088e8:	4640      	mov	r0, r8
 80088ea:	f7ff fee7 	bl	80086bc <_printf_common>
 80088ee:	3001      	adds	r0, #1
 80088f0:	d14a      	bne.n	8008988 <_printf_i+0x1f0>
 80088f2:	f04f 30ff 	mov.w	r0, #4294967295
 80088f6:	b004      	add	sp, #16
 80088f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	f043 0320 	orr.w	r3, r3, #32
 8008902:	6023      	str	r3, [r4, #0]
 8008904:	4832      	ldr	r0, [pc, #200]	@ (80089d0 <_printf_i+0x238>)
 8008906:	2778      	movs	r7, #120	@ 0x78
 8008908:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800890c:	6823      	ldr	r3, [r4, #0]
 800890e:	6831      	ldr	r1, [r6, #0]
 8008910:	061f      	lsls	r7, r3, #24
 8008912:	f851 5b04 	ldr.w	r5, [r1], #4
 8008916:	d402      	bmi.n	800891e <_printf_i+0x186>
 8008918:	065f      	lsls	r7, r3, #25
 800891a:	bf48      	it	mi
 800891c:	b2ad      	uxthmi	r5, r5
 800891e:	6031      	str	r1, [r6, #0]
 8008920:	07d9      	lsls	r1, r3, #31
 8008922:	bf44      	itt	mi
 8008924:	f043 0320 	orrmi.w	r3, r3, #32
 8008928:	6023      	strmi	r3, [r4, #0]
 800892a:	b11d      	cbz	r5, 8008934 <_printf_i+0x19c>
 800892c:	2310      	movs	r3, #16
 800892e:	e7ad      	b.n	800888c <_printf_i+0xf4>
 8008930:	4826      	ldr	r0, [pc, #152]	@ (80089cc <_printf_i+0x234>)
 8008932:	e7e9      	b.n	8008908 <_printf_i+0x170>
 8008934:	6823      	ldr	r3, [r4, #0]
 8008936:	f023 0320 	bic.w	r3, r3, #32
 800893a:	6023      	str	r3, [r4, #0]
 800893c:	e7f6      	b.n	800892c <_printf_i+0x194>
 800893e:	4616      	mov	r6, r2
 8008940:	e7bd      	b.n	80088be <_printf_i+0x126>
 8008942:	6833      	ldr	r3, [r6, #0]
 8008944:	6825      	ldr	r5, [r4, #0]
 8008946:	6961      	ldr	r1, [r4, #20]
 8008948:	1d18      	adds	r0, r3, #4
 800894a:	6030      	str	r0, [r6, #0]
 800894c:	062e      	lsls	r6, r5, #24
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	d501      	bpl.n	8008956 <_printf_i+0x1be>
 8008952:	6019      	str	r1, [r3, #0]
 8008954:	e002      	b.n	800895c <_printf_i+0x1c4>
 8008956:	0668      	lsls	r0, r5, #25
 8008958:	d5fb      	bpl.n	8008952 <_printf_i+0x1ba>
 800895a:	8019      	strh	r1, [r3, #0]
 800895c:	2300      	movs	r3, #0
 800895e:	6123      	str	r3, [r4, #16]
 8008960:	4616      	mov	r6, r2
 8008962:	e7bc      	b.n	80088de <_printf_i+0x146>
 8008964:	6833      	ldr	r3, [r6, #0]
 8008966:	1d1a      	adds	r2, r3, #4
 8008968:	6032      	str	r2, [r6, #0]
 800896a:	681e      	ldr	r6, [r3, #0]
 800896c:	6862      	ldr	r2, [r4, #4]
 800896e:	2100      	movs	r1, #0
 8008970:	4630      	mov	r0, r6
 8008972:	f7f7 fcb5 	bl	80002e0 <memchr>
 8008976:	b108      	cbz	r0, 800897c <_printf_i+0x1e4>
 8008978:	1b80      	subs	r0, r0, r6
 800897a:	6060      	str	r0, [r4, #4]
 800897c:	6863      	ldr	r3, [r4, #4]
 800897e:	6123      	str	r3, [r4, #16]
 8008980:	2300      	movs	r3, #0
 8008982:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008986:	e7aa      	b.n	80088de <_printf_i+0x146>
 8008988:	6923      	ldr	r3, [r4, #16]
 800898a:	4632      	mov	r2, r6
 800898c:	4649      	mov	r1, r9
 800898e:	4640      	mov	r0, r8
 8008990:	47d0      	blx	sl
 8008992:	3001      	adds	r0, #1
 8008994:	d0ad      	beq.n	80088f2 <_printf_i+0x15a>
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	079b      	lsls	r3, r3, #30
 800899a:	d413      	bmi.n	80089c4 <_printf_i+0x22c>
 800899c:	68e0      	ldr	r0, [r4, #12]
 800899e:	9b03      	ldr	r3, [sp, #12]
 80089a0:	4298      	cmp	r0, r3
 80089a2:	bfb8      	it	lt
 80089a4:	4618      	movlt	r0, r3
 80089a6:	e7a6      	b.n	80088f6 <_printf_i+0x15e>
 80089a8:	2301      	movs	r3, #1
 80089aa:	4632      	mov	r2, r6
 80089ac:	4649      	mov	r1, r9
 80089ae:	4640      	mov	r0, r8
 80089b0:	47d0      	blx	sl
 80089b2:	3001      	adds	r0, #1
 80089b4:	d09d      	beq.n	80088f2 <_printf_i+0x15a>
 80089b6:	3501      	adds	r5, #1
 80089b8:	68e3      	ldr	r3, [r4, #12]
 80089ba:	9903      	ldr	r1, [sp, #12]
 80089bc:	1a5b      	subs	r3, r3, r1
 80089be:	42ab      	cmp	r3, r5
 80089c0:	dcf2      	bgt.n	80089a8 <_printf_i+0x210>
 80089c2:	e7eb      	b.n	800899c <_printf_i+0x204>
 80089c4:	2500      	movs	r5, #0
 80089c6:	f104 0619 	add.w	r6, r4, #25
 80089ca:	e7f5      	b.n	80089b8 <_printf_i+0x220>
 80089cc:	0800cf81 	.word	0x0800cf81
 80089d0:	0800cf92 	.word	0x0800cf92

080089d4 <_scanf_float>:
 80089d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d8:	b087      	sub	sp, #28
 80089da:	4691      	mov	r9, r2
 80089dc:	9303      	str	r3, [sp, #12]
 80089de:	688b      	ldr	r3, [r1, #8]
 80089e0:	1e5a      	subs	r2, r3, #1
 80089e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80089e6:	bf81      	itttt	hi
 80089e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80089ec:	eb03 0b05 	addhi.w	fp, r3, r5
 80089f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80089f4:	608b      	strhi	r3, [r1, #8]
 80089f6:	680b      	ldr	r3, [r1, #0]
 80089f8:	460a      	mov	r2, r1
 80089fa:	f04f 0500 	mov.w	r5, #0
 80089fe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008a02:	f842 3b1c 	str.w	r3, [r2], #28
 8008a06:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008a0a:	4680      	mov	r8, r0
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	bf98      	it	ls
 8008a10:	f04f 0b00 	movls.w	fp, #0
 8008a14:	9201      	str	r2, [sp, #4]
 8008a16:	4616      	mov	r6, r2
 8008a18:	46aa      	mov	sl, r5
 8008a1a:	462f      	mov	r7, r5
 8008a1c:	9502      	str	r5, [sp, #8]
 8008a1e:	68a2      	ldr	r2, [r4, #8]
 8008a20:	b15a      	cbz	r2, 8008a3a <_scanf_float+0x66>
 8008a22:	f8d9 3000 	ldr.w	r3, [r9]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	2b4e      	cmp	r3, #78	@ 0x4e
 8008a2a:	d863      	bhi.n	8008af4 <_scanf_float+0x120>
 8008a2c:	2b40      	cmp	r3, #64	@ 0x40
 8008a2e:	d83b      	bhi.n	8008aa8 <_scanf_float+0xd4>
 8008a30:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008a34:	b2c8      	uxtb	r0, r1
 8008a36:	280e      	cmp	r0, #14
 8008a38:	d939      	bls.n	8008aae <_scanf_float+0xda>
 8008a3a:	b11f      	cbz	r7, 8008a44 <_scanf_float+0x70>
 8008a3c:	6823      	ldr	r3, [r4, #0]
 8008a3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a42:	6023      	str	r3, [r4, #0]
 8008a44:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a48:	f1ba 0f01 	cmp.w	sl, #1
 8008a4c:	f200 8114 	bhi.w	8008c78 <_scanf_float+0x2a4>
 8008a50:	9b01      	ldr	r3, [sp, #4]
 8008a52:	429e      	cmp	r6, r3
 8008a54:	f200 8105 	bhi.w	8008c62 <_scanf_float+0x28e>
 8008a58:	2001      	movs	r0, #1
 8008a5a:	b007      	add	sp, #28
 8008a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a60:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008a64:	2a0d      	cmp	r2, #13
 8008a66:	d8e8      	bhi.n	8008a3a <_scanf_float+0x66>
 8008a68:	a101      	add	r1, pc, #4	@ (adr r1, 8008a70 <_scanf_float+0x9c>)
 8008a6a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a6e:	bf00      	nop
 8008a70:	08008bb9 	.word	0x08008bb9
 8008a74:	08008a3b 	.word	0x08008a3b
 8008a78:	08008a3b 	.word	0x08008a3b
 8008a7c:	08008a3b 	.word	0x08008a3b
 8008a80:	08008c15 	.word	0x08008c15
 8008a84:	08008bef 	.word	0x08008bef
 8008a88:	08008a3b 	.word	0x08008a3b
 8008a8c:	08008a3b 	.word	0x08008a3b
 8008a90:	08008bc7 	.word	0x08008bc7
 8008a94:	08008a3b 	.word	0x08008a3b
 8008a98:	08008a3b 	.word	0x08008a3b
 8008a9c:	08008a3b 	.word	0x08008a3b
 8008aa0:	08008a3b 	.word	0x08008a3b
 8008aa4:	08008b83 	.word	0x08008b83
 8008aa8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008aac:	e7da      	b.n	8008a64 <_scanf_float+0x90>
 8008aae:	290e      	cmp	r1, #14
 8008ab0:	d8c3      	bhi.n	8008a3a <_scanf_float+0x66>
 8008ab2:	a001      	add	r0, pc, #4	@ (adr r0, 8008ab8 <_scanf_float+0xe4>)
 8008ab4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008ab8:	08008b73 	.word	0x08008b73
 8008abc:	08008a3b 	.word	0x08008a3b
 8008ac0:	08008b73 	.word	0x08008b73
 8008ac4:	08008c03 	.word	0x08008c03
 8008ac8:	08008a3b 	.word	0x08008a3b
 8008acc:	08008b15 	.word	0x08008b15
 8008ad0:	08008b59 	.word	0x08008b59
 8008ad4:	08008b59 	.word	0x08008b59
 8008ad8:	08008b59 	.word	0x08008b59
 8008adc:	08008b59 	.word	0x08008b59
 8008ae0:	08008b59 	.word	0x08008b59
 8008ae4:	08008b59 	.word	0x08008b59
 8008ae8:	08008b59 	.word	0x08008b59
 8008aec:	08008b59 	.word	0x08008b59
 8008af0:	08008b59 	.word	0x08008b59
 8008af4:	2b6e      	cmp	r3, #110	@ 0x6e
 8008af6:	d809      	bhi.n	8008b0c <_scanf_float+0x138>
 8008af8:	2b60      	cmp	r3, #96	@ 0x60
 8008afa:	d8b1      	bhi.n	8008a60 <_scanf_float+0x8c>
 8008afc:	2b54      	cmp	r3, #84	@ 0x54
 8008afe:	d07b      	beq.n	8008bf8 <_scanf_float+0x224>
 8008b00:	2b59      	cmp	r3, #89	@ 0x59
 8008b02:	d19a      	bne.n	8008a3a <_scanf_float+0x66>
 8008b04:	2d07      	cmp	r5, #7
 8008b06:	d198      	bne.n	8008a3a <_scanf_float+0x66>
 8008b08:	2508      	movs	r5, #8
 8008b0a:	e02f      	b.n	8008b6c <_scanf_float+0x198>
 8008b0c:	2b74      	cmp	r3, #116	@ 0x74
 8008b0e:	d073      	beq.n	8008bf8 <_scanf_float+0x224>
 8008b10:	2b79      	cmp	r3, #121	@ 0x79
 8008b12:	e7f6      	b.n	8008b02 <_scanf_float+0x12e>
 8008b14:	6821      	ldr	r1, [r4, #0]
 8008b16:	05c8      	lsls	r0, r1, #23
 8008b18:	d51e      	bpl.n	8008b58 <_scanf_float+0x184>
 8008b1a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008b1e:	6021      	str	r1, [r4, #0]
 8008b20:	3701      	adds	r7, #1
 8008b22:	f1bb 0f00 	cmp.w	fp, #0
 8008b26:	d003      	beq.n	8008b30 <_scanf_float+0x15c>
 8008b28:	3201      	adds	r2, #1
 8008b2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b2e:	60a2      	str	r2, [r4, #8]
 8008b30:	68a3      	ldr	r3, [r4, #8]
 8008b32:	3b01      	subs	r3, #1
 8008b34:	60a3      	str	r3, [r4, #8]
 8008b36:	6923      	ldr	r3, [r4, #16]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	6123      	str	r3, [r4, #16]
 8008b3c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008b40:	3b01      	subs	r3, #1
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f8c9 3004 	str.w	r3, [r9, #4]
 8008b48:	f340 8082 	ble.w	8008c50 <_scanf_float+0x27c>
 8008b4c:	f8d9 3000 	ldr.w	r3, [r9]
 8008b50:	3301      	adds	r3, #1
 8008b52:	f8c9 3000 	str.w	r3, [r9]
 8008b56:	e762      	b.n	8008a1e <_scanf_float+0x4a>
 8008b58:	eb1a 0105 	adds.w	r1, sl, r5
 8008b5c:	f47f af6d 	bne.w	8008a3a <_scanf_float+0x66>
 8008b60:	6822      	ldr	r2, [r4, #0]
 8008b62:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008b66:	6022      	str	r2, [r4, #0]
 8008b68:	460d      	mov	r5, r1
 8008b6a:	468a      	mov	sl, r1
 8008b6c:	f806 3b01 	strb.w	r3, [r6], #1
 8008b70:	e7de      	b.n	8008b30 <_scanf_float+0x15c>
 8008b72:	6822      	ldr	r2, [r4, #0]
 8008b74:	0610      	lsls	r0, r2, #24
 8008b76:	f57f af60 	bpl.w	8008a3a <_scanf_float+0x66>
 8008b7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008b7e:	6022      	str	r2, [r4, #0]
 8008b80:	e7f4      	b.n	8008b6c <_scanf_float+0x198>
 8008b82:	f1ba 0f00 	cmp.w	sl, #0
 8008b86:	d10c      	bne.n	8008ba2 <_scanf_float+0x1ce>
 8008b88:	b977      	cbnz	r7, 8008ba8 <_scanf_float+0x1d4>
 8008b8a:	6822      	ldr	r2, [r4, #0]
 8008b8c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008b90:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008b94:	d108      	bne.n	8008ba8 <_scanf_float+0x1d4>
 8008b96:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008b9a:	6022      	str	r2, [r4, #0]
 8008b9c:	f04f 0a01 	mov.w	sl, #1
 8008ba0:	e7e4      	b.n	8008b6c <_scanf_float+0x198>
 8008ba2:	f1ba 0f02 	cmp.w	sl, #2
 8008ba6:	d050      	beq.n	8008c4a <_scanf_float+0x276>
 8008ba8:	2d01      	cmp	r5, #1
 8008baa:	d002      	beq.n	8008bb2 <_scanf_float+0x1de>
 8008bac:	2d04      	cmp	r5, #4
 8008bae:	f47f af44 	bne.w	8008a3a <_scanf_float+0x66>
 8008bb2:	3501      	adds	r5, #1
 8008bb4:	b2ed      	uxtb	r5, r5
 8008bb6:	e7d9      	b.n	8008b6c <_scanf_float+0x198>
 8008bb8:	f1ba 0f01 	cmp.w	sl, #1
 8008bbc:	f47f af3d 	bne.w	8008a3a <_scanf_float+0x66>
 8008bc0:	f04f 0a02 	mov.w	sl, #2
 8008bc4:	e7d2      	b.n	8008b6c <_scanf_float+0x198>
 8008bc6:	b975      	cbnz	r5, 8008be6 <_scanf_float+0x212>
 8008bc8:	2f00      	cmp	r7, #0
 8008bca:	f47f af37 	bne.w	8008a3c <_scanf_float+0x68>
 8008bce:	6822      	ldr	r2, [r4, #0]
 8008bd0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008bd4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008bd8:	f040 80fc 	bne.w	8008dd4 <_scanf_float+0x400>
 8008bdc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008be0:	6022      	str	r2, [r4, #0]
 8008be2:	2501      	movs	r5, #1
 8008be4:	e7c2      	b.n	8008b6c <_scanf_float+0x198>
 8008be6:	2d03      	cmp	r5, #3
 8008be8:	d0e3      	beq.n	8008bb2 <_scanf_float+0x1de>
 8008bea:	2d05      	cmp	r5, #5
 8008bec:	e7df      	b.n	8008bae <_scanf_float+0x1da>
 8008bee:	2d02      	cmp	r5, #2
 8008bf0:	f47f af23 	bne.w	8008a3a <_scanf_float+0x66>
 8008bf4:	2503      	movs	r5, #3
 8008bf6:	e7b9      	b.n	8008b6c <_scanf_float+0x198>
 8008bf8:	2d06      	cmp	r5, #6
 8008bfa:	f47f af1e 	bne.w	8008a3a <_scanf_float+0x66>
 8008bfe:	2507      	movs	r5, #7
 8008c00:	e7b4      	b.n	8008b6c <_scanf_float+0x198>
 8008c02:	6822      	ldr	r2, [r4, #0]
 8008c04:	0591      	lsls	r1, r2, #22
 8008c06:	f57f af18 	bpl.w	8008a3a <_scanf_float+0x66>
 8008c0a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008c0e:	6022      	str	r2, [r4, #0]
 8008c10:	9702      	str	r7, [sp, #8]
 8008c12:	e7ab      	b.n	8008b6c <_scanf_float+0x198>
 8008c14:	6822      	ldr	r2, [r4, #0]
 8008c16:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008c1a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008c1e:	d005      	beq.n	8008c2c <_scanf_float+0x258>
 8008c20:	0550      	lsls	r0, r2, #21
 8008c22:	f57f af0a 	bpl.w	8008a3a <_scanf_float+0x66>
 8008c26:	2f00      	cmp	r7, #0
 8008c28:	f000 80d4 	beq.w	8008dd4 <_scanf_float+0x400>
 8008c2c:	0591      	lsls	r1, r2, #22
 8008c2e:	bf58      	it	pl
 8008c30:	9902      	ldrpl	r1, [sp, #8]
 8008c32:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c36:	bf58      	it	pl
 8008c38:	1a79      	subpl	r1, r7, r1
 8008c3a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008c3e:	bf58      	it	pl
 8008c40:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008c44:	6022      	str	r2, [r4, #0]
 8008c46:	2700      	movs	r7, #0
 8008c48:	e790      	b.n	8008b6c <_scanf_float+0x198>
 8008c4a:	f04f 0a03 	mov.w	sl, #3
 8008c4e:	e78d      	b.n	8008b6c <_scanf_float+0x198>
 8008c50:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008c54:	4649      	mov	r1, r9
 8008c56:	4640      	mov	r0, r8
 8008c58:	4798      	blx	r3
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	f43f aedf 	beq.w	8008a1e <_scanf_float+0x4a>
 8008c60:	e6eb      	b.n	8008a3a <_scanf_float+0x66>
 8008c62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c6a:	464a      	mov	r2, r9
 8008c6c:	4640      	mov	r0, r8
 8008c6e:	4798      	blx	r3
 8008c70:	6923      	ldr	r3, [r4, #16]
 8008c72:	3b01      	subs	r3, #1
 8008c74:	6123      	str	r3, [r4, #16]
 8008c76:	e6eb      	b.n	8008a50 <_scanf_float+0x7c>
 8008c78:	1e6b      	subs	r3, r5, #1
 8008c7a:	2b06      	cmp	r3, #6
 8008c7c:	d824      	bhi.n	8008cc8 <_scanf_float+0x2f4>
 8008c7e:	2d02      	cmp	r5, #2
 8008c80:	d836      	bhi.n	8008cf0 <_scanf_float+0x31c>
 8008c82:	9b01      	ldr	r3, [sp, #4]
 8008c84:	429e      	cmp	r6, r3
 8008c86:	f67f aee7 	bls.w	8008a58 <_scanf_float+0x84>
 8008c8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c92:	464a      	mov	r2, r9
 8008c94:	4640      	mov	r0, r8
 8008c96:	4798      	blx	r3
 8008c98:	6923      	ldr	r3, [r4, #16]
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	6123      	str	r3, [r4, #16]
 8008c9e:	e7f0      	b.n	8008c82 <_scanf_float+0x2ae>
 8008ca0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ca4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008ca8:	464a      	mov	r2, r9
 8008caa:	4640      	mov	r0, r8
 8008cac:	4798      	blx	r3
 8008cae:	6923      	ldr	r3, [r4, #16]
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	6123      	str	r3, [r4, #16]
 8008cb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cb8:	fa5f fa8a 	uxtb.w	sl, sl
 8008cbc:	f1ba 0f02 	cmp.w	sl, #2
 8008cc0:	d1ee      	bne.n	8008ca0 <_scanf_float+0x2cc>
 8008cc2:	3d03      	subs	r5, #3
 8008cc4:	b2ed      	uxtb	r5, r5
 8008cc6:	1b76      	subs	r6, r6, r5
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	05da      	lsls	r2, r3, #23
 8008ccc:	d530      	bpl.n	8008d30 <_scanf_float+0x35c>
 8008cce:	055b      	lsls	r3, r3, #21
 8008cd0:	d511      	bpl.n	8008cf6 <_scanf_float+0x322>
 8008cd2:	9b01      	ldr	r3, [sp, #4]
 8008cd4:	429e      	cmp	r6, r3
 8008cd6:	f67f aebf 	bls.w	8008a58 <_scanf_float+0x84>
 8008cda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ce2:	464a      	mov	r2, r9
 8008ce4:	4640      	mov	r0, r8
 8008ce6:	4798      	blx	r3
 8008ce8:	6923      	ldr	r3, [r4, #16]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	6123      	str	r3, [r4, #16]
 8008cee:	e7f0      	b.n	8008cd2 <_scanf_float+0x2fe>
 8008cf0:	46aa      	mov	sl, r5
 8008cf2:	46b3      	mov	fp, r6
 8008cf4:	e7de      	b.n	8008cb4 <_scanf_float+0x2e0>
 8008cf6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008cfa:	6923      	ldr	r3, [r4, #16]
 8008cfc:	2965      	cmp	r1, #101	@ 0x65
 8008cfe:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d02:	f106 35ff 	add.w	r5, r6, #4294967295
 8008d06:	6123      	str	r3, [r4, #16]
 8008d08:	d00c      	beq.n	8008d24 <_scanf_float+0x350>
 8008d0a:	2945      	cmp	r1, #69	@ 0x45
 8008d0c:	d00a      	beq.n	8008d24 <_scanf_float+0x350>
 8008d0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d12:	464a      	mov	r2, r9
 8008d14:	4640      	mov	r0, r8
 8008d16:	4798      	blx	r3
 8008d18:	6923      	ldr	r3, [r4, #16]
 8008d1a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	1eb5      	subs	r5, r6, #2
 8008d22:	6123      	str	r3, [r4, #16]
 8008d24:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d28:	464a      	mov	r2, r9
 8008d2a:	4640      	mov	r0, r8
 8008d2c:	4798      	blx	r3
 8008d2e:	462e      	mov	r6, r5
 8008d30:	6822      	ldr	r2, [r4, #0]
 8008d32:	f012 0210 	ands.w	r2, r2, #16
 8008d36:	d001      	beq.n	8008d3c <_scanf_float+0x368>
 8008d38:	2000      	movs	r0, #0
 8008d3a:	e68e      	b.n	8008a5a <_scanf_float+0x86>
 8008d3c:	7032      	strb	r2, [r6, #0]
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d48:	d123      	bne.n	8008d92 <_scanf_float+0x3be>
 8008d4a:	9b02      	ldr	r3, [sp, #8]
 8008d4c:	429f      	cmp	r7, r3
 8008d4e:	d00a      	beq.n	8008d66 <_scanf_float+0x392>
 8008d50:	1bda      	subs	r2, r3, r7
 8008d52:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008d56:	429e      	cmp	r6, r3
 8008d58:	bf28      	it	cs
 8008d5a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008d5e:	491e      	ldr	r1, [pc, #120]	@ (8008dd8 <_scanf_float+0x404>)
 8008d60:	4630      	mov	r0, r6
 8008d62:	f000 f947 	bl	8008ff4 <siprintf>
 8008d66:	9901      	ldr	r1, [sp, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	f002 fbc6 	bl	800b4fc <_strtod_r>
 8008d70:	9b03      	ldr	r3, [sp, #12]
 8008d72:	6821      	ldr	r1, [r4, #0]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f011 0f02 	tst.w	r1, #2
 8008d7a:	f103 0204 	add.w	r2, r3, #4
 8008d7e:	d015      	beq.n	8008dac <_scanf_float+0x3d8>
 8008d80:	9903      	ldr	r1, [sp, #12]
 8008d82:	600a      	str	r2, [r1, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	ed83 0b00 	vstr	d0, [r3]
 8008d8a:	68e3      	ldr	r3, [r4, #12]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	60e3      	str	r3, [r4, #12]
 8008d90:	e7d2      	b.n	8008d38 <_scanf_float+0x364>
 8008d92:	9b04      	ldr	r3, [sp, #16]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d0e6      	beq.n	8008d66 <_scanf_float+0x392>
 8008d98:	9905      	ldr	r1, [sp, #20]
 8008d9a:	230a      	movs	r3, #10
 8008d9c:	3101      	adds	r1, #1
 8008d9e:	4640      	mov	r0, r8
 8008da0:	f002 fc2c 	bl	800b5fc <_strtol_r>
 8008da4:	9b04      	ldr	r3, [sp, #16]
 8008da6:	9e05      	ldr	r6, [sp, #20]
 8008da8:	1ac2      	subs	r2, r0, r3
 8008daa:	e7d2      	b.n	8008d52 <_scanf_float+0x37e>
 8008dac:	f011 0f04 	tst.w	r1, #4
 8008db0:	9903      	ldr	r1, [sp, #12]
 8008db2:	600a      	str	r2, [r1, #0]
 8008db4:	d1e6      	bne.n	8008d84 <_scanf_float+0x3b0>
 8008db6:	eeb4 0b40 	vcmp.f64	d0, d0
 8008dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dbe:	681d      	ldr	r5, [r3, #0]
 8008dc0:	d705      	bvc.n	8008dce <_scanf_float+0x3fa>
 8008dc2:	4806      	ldr	r0, [pc, #24]	@ (8008ddc <_scanf_float+0x408>)
 8008dc4:	f000 faf6 	bl	80093b4 <nanf>
 8008dc8:	ed85 0a00 	vstr	s0, [r5]
 8008dcc:	e7dd      	b.n	8008d8a <_scanf_float+0x3b6>
 8008dce:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008dd2:	e7f9      	b.n	8008dc8 <_scanf_float+0x3f4>
 8008dd4:	2700      	movs	r7, #0
 8008dd6:	e635      	b.n	8008a44 <_scanf_float+0x70>
 8008dd8:	0800cfa3 	.word	0x0800cfa3
 8008ddc:	0800cf6e 	.word	0x0800cf6e

08008de0 <std>:
 8008de0:	2300      	movs	r3, #0
 8008de2:	b510      	push	{r4, lr}
 8008de4:	4604      	mov	r4, r0
 8008de6:	e9c0 3300 	strd	r3, r3, [r0]
 8008dea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dee:	6083      	str	r3, [r0, #8]
 8008df0:	8181      	strh	r1, [r0, #12]
 8008df2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008df4:	81c2      	strh	r2, [r0, #14]
 8008df6:	6183      	str	r3, [r0, #24]
 8008df8:	4619      	mov	r1, r3
 8008dfa:	2208      	movs	r2, #8
 8008dfc:	305c      	adds	r0, #92	@ 0x5c
 8008dfe:	f000 f9b5 	bl	800916c <memset>
 8008e02:	4b0d      	ldr	r3, [pc, #52]	@ (8008e38 <std+0x58>)
 8008e04:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e06:	4b0d      	ldr	r3, [pc, #52]	@ (8008e3c <std+0x5c>)
 8008e08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e40 <std+0x60>)
 8008e0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e44 <std+0x64>)
 8008e10:	6323      	str	r3, [r4, #48]	@ 0x30
 8008e12:	4b0d      	ldr	r3, [pc, #52]	@ (8008e48 <std+0x68>)
 8008e14:	6224      	str	r4, [r4, #32]
 8008e16:	429c      	cmp	r4, r3
 8008e18:	d006      	beq.n	8008e28 <std+0x48>
 8008e1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e1e:	4294      	cmp	r4, r2
 8008e20:	d002      	beq.n	8008e28 <std+0x48>
 8008e22:	33d0      	adds	r3, #208	@ 0xd0
 8008e24:	429c      	cmp	r4, r3
 8008e26:	d105      	bne.n	8008e34 <std+0x54>
 8008e28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e30:	f000 baae 	b.w	8009390 <__retarget_lock_init_recursive>
 8008e34:	bd10      	pop	{r4, pc}
 8008e36:	bf00      	nop
 8008e38:	08009039 	.word	0x08009039
 8008e3c:	0800905b 	.word	0x0800905b
 8008e40:	08009093 	.word	0x08009093
 8008e44:	080090b7 	.word	0x080090b7
 8008e48:	240292d0 	.word	0x240292d0

08008e4c <stdio_exit_handler>:
 8008e4c:	4a02      	ldr	r2, [pc, #8]	@ (8008e58 <stdio_exit_handler+0xc>)
 8008e4e:	4903      	ldr	r1, [pc, #12]	@ (8008e5c <stdio_exit_handler+0x10>)
 8008e50:	4803      	ldr	r0, [pc, #12]	@ (8008e60 <stdio_exit_handler+0x14>)
 8008e52:	f000 b87b 	b.w	8008f4c <_fwalk_sglue>
 8008e56:	bf00      	nop
 8008e58:	24000018 	.word	0x24000018
 8008e5c:	0800bc3d 	.word	0x0800bc3d
 8008e60:	24000028 	.word	0x24000028

08008e64 <cleanup_stdio>:
 8008e64:	6841      	ldr	r1, [r0, #4]
 8008e66:	4b0c      	ldr	r3, [pc, #48]	@ (8008e98 <cleanup_stdio+0x34>)
 8008e68:	4299      	cmp	r1, r3
 8008e6a:	b510      	push	{r4, lr}
 8008e6c:	4604      	mov	r4, r0
 8008e6e:	d001      	beq.n	8008e74 <cleanup_stdio+0x10>
 8008e70:	f002 fee4 	bl	800bc3c <_fflush_r>
 8008e74:	68a1      	ldr	r1, [r4, #8]
 8008e76:	4b09      	ldr	r3, [pc, #36]	@ (8008e9c <cleanup_stdio+0x38>)
 8008e78:	4299      	cmp	r1, r3
 8008e7a:	d002      	beq.n	8008e82 <cleanup_stdio+0x1e>
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f002 fedd 	bl	800bc3c <_fflush_r>
 8008e82:	68e1      	ldr	r1, [r4, #12]
 8008e84:	4b06      	ldr	r3, [pc, #24]	@ (8008ea0 <cleanup_stdio+0x3c>)
 8008e86:	4299      	cmp	r1, r3
 8008e88:	d004      	beq.n	8008e94 <cleanup_stdio+0x30>
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e90:	f002 bed4 	b.w	800bc3c <_fflush_r>
 8008e94:	bd10      	pop	{r4, pc}
 8008e96:	bf00      	nop
 8008e98:	240292d0 	.word	0x240292d0
 8008e9c:	24029338 	.word	0x24029338
 8008ea0:	240293a0 	.word	0x240293a0

08008ea4 <global_stdio_init.part.0>:
 8008ea4:	b510      	push	{r4, lr}
 8008ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ed4 <global_stdio_init.part.0+0x30>)
 8008ea8:	4c0b      	ldr	r4, [pc, #44]	@ (8008ed8 <global_stdio_init.part.0+0x34>)
 8008eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8008edc <global_stdio_init.part.0+0x38>)
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	4620      	mov	r0, r4
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	2104      	movs	r1, #4
 8008eb4:	f7ff ff94 	bl	8008de0 <std>
 8008eb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	2109      	movs	r1, #9
 8008ec0:	f7ff ff8e 	bl	8008de0 <std>
 8008ec4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ec8:	2202      	movs	r2, #2
 8008eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ece:	2112      	movs	r1, #18
 8008ed0:	f7ff bf86 	b.w	8008de0 <std>
 8008ed4:	24029408 	.word	0x24029408
 8008ed8:	240292d0 	.word	0x240292d0
 8008edc:	08008e4d 	.word	0x08008e4d

08008ee0 <__sfp_lock_acquire>:
 8008ee0:	4801      	ldr	r0, [pc, #4]	@ (8008ee8 <__sfp_lock_acquire+0x8>)
 8008ee2:	f000 ba56 	b.w	8009392 <__retarget_lock_acquire_recursive>
 8008ee6:	bf00      	nop
 8008ee8:	24029411 	.word	0x24029411

08008eec <__sfp_lock_release>:
 8008eec:	4801      	ldr	r0, [pc, #4]	@ (8008ef4 <__sfp_lock_release+0x8>)
 8008eee:	f000 ba51 	b.w	8009394 <__retarget_lock_release_recursive>
 8008ef2:	bf00      	nop
 8008ef4:	24029411 	.word	0x24029411

08008ef8 <__sinit>:
 8008ef8:	b510      	push	{r4, lr}
 8008efa:	4604      	mov	r4, r0
 8008efc:	f7ff fff0 	bl	8008ee0 <__sfp_lock_acquire>
 8008f00:	6a23      	ldr	r3, [r4, #32]
 8008f02:	b11b      	cbz	r3, 8008f0c <__sinit+0x14>
 8008f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f08:	f7ff bff0 	b.w	8008eec <__sfp_lock_release>
 8008f0c:	4b04      	ldr	r3, [pc, #16]	@ (8008f20 <__sinit+0x28>)
 8008f0e:	6223      	str	r3, [r4, #32]
 8008f10:	4b04      	ldr	r3, [pc, #16]	@ (8008f24 <__sinit+0x2c>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1f5      	bne.n	8008f04 <__sinit+0xc>
 8008f18:	f7ff ffc4 	bl	8008ea4 <global_stdio_init.part.0>
 8008f1c:	e7f2      	b.n	8008f04 <__sinit+0xc>
 8008f1e:	bf00      	nop
 8008f20:	08008e65 	.word	0x08008e65
 8008f24:	24029408 	.word	0x24029408

08008f28 <fiprintf>:
 8008f28:	b40e      	push	{r1, r2, r3}
 8008f2a:	b503      	push	{r0, r1, lr}
 8008f2c:	4601      	mov	r1, r0
 8008f2e:	ab03      	add	r3, sp, #12
 8008f30:	4805      	ldr	r0, [pc, #20]	@ (8008f48 <fiprintf+0x20>)
 8008f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f36:	6800      	ldr	r0, [r0, #0]
 8008f38:	9301      	str	r3, [sp, #4]
 8008f3a:	f002 fce3 	bl	800b904 <_vfiprintf_r>
 8008f3e:	b002      	add	sp, #8
 8008f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f44:	b003      	add	sp, #12
 8008f46:	4770      	bx	lr
 8008f48:	24000024 	.word	0x24000024

08008f4c <_fwalk_sglue>:
 8008f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f50:	4607      	mov	r7, r0
 8008f52:	4688      	mov	r8, r1
 8008f54:	4614      	mov	r4, r2
 8008f56:	2600      	movs	r6, #0
 8008f58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f5c:	f1b9 0901 	subs.w	r9, r9, #1
 8008f60:	d505      	bpl.n	8008f6e <_fwalk_sglue+0x22>
 8008f62:	6824      	ldr	r4, [r4, #0]
 8008f64:	2c00      	cmp	r4, #0
 8008f66:	d1f7      	bne.n	8008f58 <_fwalk_sglue+0xc>
 8008f68:	4630      	mov	r0, r6
 8008f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f6e:	89ab      	ldrh	r3, [r5, #12]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d907      	bls.n	8008f84 <_fwalk_sglue+0x38>
 8008f74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	d003      	beq.n	8008f84 <_fwalk_sglue+0x38>
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	4638      	mov	r0, r7
 8008f80:	47c0      	blx	r8
 8008f82:	4306      	orrs	r6, r0
 8008f84:	3568      	adds	r5, #104	@ 0x68
 8008f86:	e7e9      	b.n	8008f5c <_fwalk_sglue+0x10>

08008f88 <sniprintf>:
 8008f88:	b40c      	push	{r2, r3}
 8008f8a:	b530      	push	{r4, r5, lr}
 8008f8c:	4b18      	ldr	r3, [pc, #96]	@ (8008ff0 <sniprintf+0x68>)
 8008f8e:	1e0c      	subs	r4, r1, #0
 8008f90:	681d      	ldr	r5, [r3, #0]
 8008f92:	b09d      	sub	sp, #116	@ 0x74
 8008f94:	da08      	bge.n	8008fa8 <sniprintf+0x20>
 8008f96:	238b      	movs	r3, #139	@ 0x8b
 8008f98:	602b      	str	r3, [r5, #0]
 8008f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f9e:	b01d      	add	sp, #116	@ 0x74
 8008fa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fa4:	b002      	add	sp, #8
 8008fa6:	4770      	bx	lr
 8008fa8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008fac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008fb0:	f04f 0300 	mov.w	r3, #0
 8008fb4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008fb6:	bf14      	ite	ne
 8008fb8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008fbc:	4623      	moveq	r3, r4
 8008fbe:	9304      	str	r3, [sp, #16]
 8008fc0:	9307      	str	r3, [sp, #28]
 8008fc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008fc6:	9002      	str	r0, [sp, #8]
 8008fc8:	9006      	str	r0, [sp, #24]
 8008fca:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008fce:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008fd0:	ab21      	add	r3, sp, #132	@ 0x84
 8008fd2:	a902      	add	r1, sp, #8
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	9301      	str	r3, [sp, #4]
 8008fd8:	f002 fb6e 	bl	800b6b8 <_svfiprintf_r>
 8008fdc:	1c43      	adds	r3, r0, #1
 8008fde:	bfbc      	itt	lt
 8008fe0:	238b      	movlt	r3, #139	@ 0x8b
 8008fe2:	602b      	strlt	r3, [r5, #0]
 8008fe4:	2c00      	cmp	r4, #0
 8008fe6:	d0da      	beq.n	8008f9e <sniprintf+0x16>
 8008fe8:	9b02      	ldr	r3, [sp, #8]
 8008fea:	2200      	movs	r2, #0
 8008fec:	701a      	strb	r2, [r3, #0]
 8008fee:	e7d6      	b.n	8008f9e <sniprintf+0x16>
 8008ff0:	24000024 	.word	0x24000024

08008ff4 <siprintf>:
 8008ff4:	b40e      	push	{r1, r2, r3}
 8008ff6:	b510      	push	{r4, lr}
 8008ff8:	b09d      	sub	sp, #116	@ 0x74
 8008ffa:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008ffc:	9002      	str	r0, [sp, #8]
 8008ffe:	9006      	str	r0, [sp, #24]
 8009000:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009004:	480a      	ldr	r0, [pc, #40]	@ (8009030 <siprintf+0x3c>)
 8009006:	9107      	str	r1, [sp, #28]
 8009008:	9104      	str	r1, [sp, #16]
 800900a:	490a      	ldr	r1, [pc, #40]	@ (8009034 <siprintf+0x40>)
 800900c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009010:	9105      	str	r1, [sp, #20]
 8009012:	2400      	movs	r4, #0
 8009014:	a902      	add	r1, sp, #8
 8009016:	6800      	ldr	r0, [r0, #0]
 8009018:	9301      	str	r3, [sp, #4]
 800901a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800901c:	f002 fb4c 	bl	800b6b8 <_svfiprintf_r>
 8009020:	9b02      	ldr	r3, [sp, #8]
 8009022:	701c      	strb	r4, [r3, #0]
 8009024:	b01d      	add	sp, #116	@ 0x74
 8009026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800902a:	b003      	add	sp, #12
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	24000024 	.word	0x24000024
 8009034:	ffff0208 	.word	0xffff0208

08009038 <__sread>:
 8009038:	b510      	push	{r4, lr}
 800903a:	460c      	mov	r4, r1
 800903c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009040:	f000 f948 	bl	80092d4 <_read_r>
 8009044:	2800      	cmp	r0, #0
 8009046:	bfab      	itete	ge
 8009048:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800904a:	89a3      	ldrhlt	r3, [r4, #12]
 800904c:	181b      	addge	r3, r3, r0
 800904e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009052:	bfac      	ite	ge
 8009054:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009056:	81a3      	strhlt	r3, [r4, #12]
 8009058:	bd10      	pop	{r4, pc}

0800905a <__swrite>:
 800905a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800905e:	461f      	mov	r7, r3
 8009060:	898b      	ldrh	r3, [r1, #12]
 8009062:	05db      	lsls	r3, r3, #23
 8009064:	4605      	mov	r5, r0
 8009066:	460c      	mov	r4, r1
 8009068:	4616      	mov	r6, r2
 800906a:	d505      	bpl.n	8009078 <__swrite+0x1e>
 800906c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009070:	2302      	movs	r3, #2
 8009072:	2200      	movs	r2, #0
 8009074:	f000 f91c 	bl	80092b0 <_lseek_r>
 8009078:	89a3      	ldrh	r3, [r4, #12]
 800907a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800907e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009082:	81a3      	strh	r3, [r4, #12]
 8009084:	4632      	mov	r2, r6
 8009086:	463b      	mov	r3, r7
 8009088:	4628      	mov	r0, r5
 800908a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800908e:	f000 b943 	b.w	8009318 <_write_r>

08009092 <__sseek>:
 8009092:	b510      	push	{r4, lr}
 8009094:	460c      	mov	r4, r1
 8009096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800909a:	f000 f909 	bl	80092b0 <_lseek_r>
 800909e:	1c43      	adds	r3, r0, #1
 80090a0:	89a3      	ldrh	r3, [r4, #12]
 80090a2:	bf15      	itete	ne
 80090a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090ae:	81a3      	strheq	r3, [r4, #12]
 80090b0:	bf18      	it	ne
 80090b2:	81a3      	strhne	r3, [r4, #12]
 80090b4:	bd10      	pop	{r4, pc}

080090b6 <__sclose>:
 80090b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ba:	f000 b88b 	b.w	80091d4 <_close_r>

080090be <_vsniprintf_r>:
 80090be:	b530      	push	{r4, r5, lr}
 80090c0:	4614      	mov	r4, r2
 80090c2:	2c00      	cmp	r4, #0
 80090c4:	b09b      	sub	sp, #108	@ 0x6c
 80090c6:	4605      	mov	r5, r0
 80090c8:	461a      	mov	r2, r3
 80090ca:	da05      	bge.n	80090d8 <_vsniprintf_r+0x1a>
 80090cc:	238b      	movs	r3, #139	@ 0x8b
 80090ce:	6003      	str	r3, [r0, #0]
 80090d0:	f04f 30ff 	mov.w	r0, #4294967295
 80090d4:	b01b      	add	sp, #108	@ 0x6c
 80090d6:	bd30      	pop	{r4, r5, pc}
 80090d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80090dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80090e0:	f04f 0300 	mov.w	r3, #0
 80090e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80090e6:	bf14      	ite	ne
 80090e8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80090ec:	4623      	moveq	r3, r4
 80090ee:	9302      	str	r3, [sp, #8]
 80090f0:	9305      	str	r3, [sp, #20]
 80090f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80090f6:	9100      	str	r1, [sp, #0]
 80090f8:	9104      	str	r1, [sp, #16]
 80090fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80090fe:	4669      	mov	r1, sp
 8009100:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009102:	f002 fad9 	bl	800b6b8 <_svfiprintf_r>
 8009106:	1c43      	adds	r3, r0, #1
 8009108:	bfbc      	itt	lt
 800910a:	238b      	movlt	r3, #139	@ 0x8b
 800910c:	602b      	strlt	r3, [r5, #0]
 800910e:	2c00      	cmp	r4, #0
 8009110:	d0e0      	beq.n	80090d4 <_vsniprintf_r+0x16>
 8009112:	9b00      	ldr	r3, [sp, #0]
 8009114:	2200      	movs	r2, #0
 8009116:	701a      	strb	r2, [r3, #0]
 8009118:	e7dc      	b.n	80090d4 <_vsniprintf_r+0x16>
	...

0800911c <vsniprintf>:
 800911c:	b507      	push	{r0, r1, r2, lr}
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	4613      	mov	r3, r2
 8009122:	460a      	mov	r2, r1
 8009124:	4601      	mov	r1, r0
 8009126:	4803      	ldr	r0, [pc, #12]	@ (8009134 <vsniprintf+0x18>)
 8009128:	6800      	ldr	r0, [r0, #0]
 800912a:	f7ff ffc8 	bl	80090be <_vsniprintf_r>
 800912e:	b003      	add	sp, #12
 8009130:	f85d fb04 	ldr.w	pc, [sp], #4
 8009134:	24000024 	.word	0x24000024

08009138 <memmove>:
 8009138:	4288      	cmp	r0, r1
 800913a:	b510      	push	{r4, lr}
 800913c:	eb01 0402 	add.w	r4, r1, r2
 8009140:	d902      	bls.n	8009148 <memmove+0x10>
 8009142:	4284      	cmp	r4, r0
 8009144:	4623      	mov	r3, r4
 8009146:	d807      	bhi.n	8009158 <memmove+0x20>
 8009148:	1e43      	subs	r3, r0, #1
 800914a:	42a1      	cmp	r1, r4
 800914c:	d008      	beq.n	8009160 <memmove+0x28>
 800914e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009152:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009156:	e7f8      	b.n	800914a <memmove+0x12>
 8009158:	4402      	add	r2, r0
 800915a:	4601      	mov	r1, r0
 800915c:	428a      	cmp	r2, r1
 800915e:	d100      	bne.n	8009162 <memmove+0x2a>
 8009160:	bd10      	pop	{r4, pc}
 8009162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800916a:	e7f7      	b.n	800915c <memmove+0x24>

0800916c <memset>:
 800916c:	4402      	add	r2, r0
 800916e:	4603      	mov	r3, r0
 8009170:	4293      	cmp	r3, r2
 8009172:	d100      	bne.n	8009176 <memset+0xa>
 8009174:	4770      	bx	lr
 8009176:	f803 1b01 	strb.w	r1, [r3], #1
 800917a:	e7f9      	b.n	8009170 <memset+0x4>

0800917c <strncmp>:
 800917c:	b510      	push	{r4, lr}
 800917e:	b16a      	cbz	r2, 800919c <strncmp+0x20>
 8009180:	3901      	subs	r1, #1
 8009182:	1884      	adds	r4, r0, r2
 8009184:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009188:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800918c:	429a      	cmp	r2, r3
 800918e:	d103      	bne.n	8009198 <strncmp+0x1c>
 8009190:	42a0      	cmp	r0, r4
 8009192:	d001      	beq.n	8009198 <strncmp+0x1c>
 8009194:	2a00      	cmp	r2, #0
 8009196:	d1f5      	bne.n	8009184 <strncmp+0x8>
 8009198:	1ad0      	subs	r0, r2, r3
 800919a:	bd10      	pop	{r4, pc}
 800919c:	4610      	mov	r0, r2
 800919e:	e7fc      	b.n	800919a <strncmp+0x1e>

080091a0 <strstr>:
 80091a0:	780a      	ldrb	r2, [r1, #0]
 80091a2:	b570      	push	{r4, r5, r6, lr}
 80091a4:	b96a      	cbnz	r2, 80091c2 <strstr+0x22>
 80091a6:	bd70      	pop	{r4, r5, r6, pc}
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d109      	bne.n	80091c0 <strstr+0x20>
 80091ac:	460c      	mov	r4, r1
 80091ae:	4605      	mov	r5, r0
 80091b0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d0f6      	beq.n	80091a6 <strstr+0x6>
 80091b8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80091bc:	429e      	cmp	r6, r3
 80091be:	d0f7      	beq.n	80091b0 <strstr+0x10>
 80091c0:	3001      	adds	r0, #1
 80091c2:	7803      	ldrb	r3, [r0, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1ef      	bne.n	80091a8 <strstr+0x8>
 80091c8:	4618      	mov	r0, r3
 80091ca:	e7ec      	b.n	80091a6 <strstr+0x6>

080091cc <_localeconv_r>:
 80091cc:	4800      	ldr	r0, [pc, #0]	@ (80091d0 <_localeconv_r+0x4>)
 80091ce:	4770      	bx	lr
 80091d0:	24000164 	.word	0x24000164

080091d4 <_close_r>:
 80091d4:	b538      	push	{r3, r4, r5, lr}
 80091d6:	4d06      	ldr	r5, [pc, #24]	@ (80091f0 <_close_r+0x1c>)
 80091d8:	2300      	movs	r3, #0
 80091da:	4604      	mov	r4, r0
 80091dc:	4608      	mov	r0, r1
 80091de:	602b      	str	r3, [r5, #0]
 80091e0:	f003 fa26 	bl	800c630 <_close>
 80091e4:	1c43      	adds	r3, r0, #1
 80091e6:	d102      	bne.n	80091ee <_close_r+0x1a>
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	b103      	cbz	r3, 80091ee <_close_r+0x1a>
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
 80091f0:	2402940c 	.word	0x2402940c

080091f4 <_reclaim_reent>:
 80091f4:	4b2d      	ldr	r3, [pc, #180]	@ (80092ac <_reclaim_reent+0xb8>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4283      	cmp	r3, r0
 80091fa:	b570      	push	{r4, r5, r6, lr}
 80091fc:	4604      	mov	r4, r0
 80091fe:	d053      	beq.n	80092a8 <_reclaim_reent+0xb4>
 8009200:	69c3      	ldr	r3, [r0, #28]
 8009202:	b31b      	cbz	r3, 800924c <_reclaim_reent+0x58>
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	b163      	cbz	r3, 8009222 <_reclaim_reent+0x2e>
 8009208:	2500      	movs	r5, #0
 800920a:	69e3      	ldr	r3, [r4, #28]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	5959      	ldr	r1, [r3, r5]
 8009210:	b9b1      	cbnz	r1, 8009240 <_reclaim_reent+0x4c>
 8009212:	3504      	adds	r5, #4
 8009214:	2d80      	cmp	r5, #128	@ 0x80
 8009216:	d1f8      	bne.n	800920a <_reclaim_reent+0x16>
 8009218:	69e3      	ldr	r3, [r4, #28]
 800921a:	4620      	mov	r0, r4
 800921c:	68d9      	ldr	r1, [r3, #12]
 800921e:	f000 febd 	bl	8009f9c <_free_r>
 8009222:	69e3      	ldr	r3, [r4, #28]
 8009224:	6819      	ldr	r1, [r3, #0]
 8009226:	b111      	cbz	r1, 800922e <_reclaim_reent+0x3a>
 8009228:	4620      	mov	r0, r4
 800922a:	f000 feb7 	bl	8009f9c <_free_r>
 800922e:	69e3      	ldr	r3, [r4, #28]
 8009230:	689d      	ldr	r5, [r3, #8]
 8009232:	b15d      	cbz	r5, 800924c <_reclaim_reent+0x58>
 8009234:	4629      	mov	r1, r5
 8009236:	4620      	mov	r0, r4
 8009238:	682d      	ldr	r5, [r5, #0]
 800923a:	f000 feaf 	bl	8009f9c <_free_r>
 800923e:	e7f8      	b.n	8009232 <_reclaim_reent+0x3e>
 8009240:	680e      	ldr	r6, [r1, #0]
 8009242:	4620      	mov	r0, r4
 8009244:	f000 feaa 	bl	8009f9c <_free_r>
 8009248:	4631      	mov	r1, r6
 800924a:	e7e1      	b.n	8009210 <_reclaim_reent+0x1c>
 800924c:	6961      	ldr	r1, [r4, #20]
 800924e:	b111      	cbz	r1, 8009256 <_reclaim_reent+0x62>
 8009250:	4620      	mov	r0, r4
 8009252:	f000 fea3 	bl	8009f9c <_free_r>
 8009256:	69e1      	ldr	r1, [r4, #28]
 8009258:	b111      	cbz	r1, 8009260 <_reclaim_reent+0x6c>
 800925a:	4620      	mov	r0, r4
 800925c:	f000 fe9e 	bl	8009f9c <_free_r>
 8009260:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009262:	b111      	cbz	r1, 800926a <_reclaim_reent+0x76>
 8009264:	4620      	mov	r0, r4
 8009266:	f000 fe99 	bl	8009f9c <_free_r>
 800926a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800926c:	b111      	cbz	r1, 8009274 <_reclaim_reent+0x80>
 800926e:	4620      	mov	r0, r4
 8009270:	f000 fe94 	bl	8009f9c <_free_r>
 8009274:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009276:	b111      	cbz	r1, 800927e <_reclaim_reent+0x8a>
 8009278:	4620      	mov	r0, r4
 800927a:	f000 fe8f 	bl	8009f9c <_free_r>
 800927e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009280:	b111      	cbz	r1, 8009288 <_reclaim_reent+0x94>
 8009282:	4620      	mov	r0, r4
 8009284:	f000 fe8a 	bl	8009f9c <_free_r>
 8009288:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800928a:	b111      	cbz	r1, 8009292 <_reclaim_reent+0x9e>
 800928c:	4620      	mov	r0, r4
 800928e:	f000 fe85 	bl	8009f9c <_free_r>
 8009292:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009294:	b111      	cbz	r1, 800929c <_reclaim_reent+0xa8>
 8009296:	4620      	mov	r0, r4
 8009298:	f000 fe80 	bl	8009f9c <_free_r>
 800929c:	6a23      	ldr	r3, [r4, #32]
 800929e:	b11b      	cbz	r3, 80092a8 <_reclaim_reent+0xb4>
 80092a0:	4620      	mov	r0, r4
 80092a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80092a6:	4718      	bx	r3
 80092a8:	bd70      	pop	{r4, r5, r6, pc}
 80092aa:	bf00      	nop
 80092ac:	24000024 	.word	0x24000024

080092b0 <_lseek_r>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	4d07      	ldr	r5, [pc, #28]	@ (80092d0 <_lseek_r+0x20>)
 80092b4:	4604      	mov	r4, r0
 80092b6:	4608      	mov	r0, r1
 80092b8:	4611      	mov	r1, r2
 80092ba:	2200      	movs	r2, #0
 80092bc:	602a      	str	r2, [r5, #0]
 80092be:	461a      	mov	r2, r3
 80092c0:	f003 f9de 	bl	800c680 <_lseek>
 80092c4:	1c43      	adds	r3, r0, #1
 80092c6:	d102      	bne.n	80092ce <_lseek_r+0x1e>
 80092c8:	682b      	ldr	r3, [r5, #0]
 80092ca:	b103      	cbz	r3, 80092ce <_lseek_r+0x1e>
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	bd38      	pop	{r3, r4, r5, pc}
 80092d0:	2402940c 	.word	0x2402940c

080092d4 <_read_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	4d07      	ldr	r5, [pc, #28]	@ (80092f4 <_read_r+0x20>)
 80092d8:	4604      	mov	r4, r0
 80092da:	4608      	mov	r0, r1
 80092dc:	4611      	mov	r1, r2
 80092de:	2200      	movs	r2, #0
 80092e0:	602a      	str	r2, [r5, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	f003 f9d4 	bl	800c690 <_read>
 80092e8:	1c43      	adds	r3, r0, #1
 80092ea:	d102      	bne.n	80092f2 <_read_r+0x1e>
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	b103      	cbz	r3, 80092f2 <_read_r+0x1e>
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	bd38      	pop	{r3, r4, r5, pc}
 80092f4:	2402940c 	.word	0x2402940c

080092f8 <_sbrk_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4d06      	ldr	r5, [pc, #24]	@ (8009314 <_sbrk_r+0x1c>)
 80092fc:	2300      	movs	r3, #0
 80092fe:	4604      	mov	r4, r0
 8009300:	4608      	mov	r0, r1
 8009302:	602b      	str	r3, [r5, #0]
 8009304:	f7f7 ff30 	bl	8001168 <_sbrk>
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	d102      	bne.n	8009312 <_sbrk_r+0x1a>
 800930c:	682b      	ldr	r3, [r5, #0]
 800930e:	b103      	cbz	r3, 8009312 <_sbrk_r+0x1a>
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	bd38      	pop	{r3, r4, r5, pc}
 8009314:	2402940c 	.word	0x2402940c

08009318 <_write_r>:
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	4d07      	ldr	r5, [pc, #28]	@ (8009338 <_write_r+0x20>)
 800931c:	4604      	mov	r4, r0
 800931e:	4608      	mov	r0, r1
 8009320:	4611      	mov	r1, r2
 8009322:	2200      	movs	r2, #0
 8009324:	602a      	str	r2, [r5, #0]
 8009326:	461a      	mov	r2, r3
 8009328:	f7fe f9f0 	bl	800770c <_write>
 800932c:	1c43      	adds	r3, r0, #1
 800932e:	d102      	bne.n	8009336 <_write_r+0x1e>
 8009330:	682b      	ldr	r3, [r5, #0]
 8009332:	b103      	cbz	r3, 8009336 <_write_r+0x1e>
 8009334:	6023      	str	r3, [r4, #0]
 8009336:	bd38      	pop	{r3, r4, r5, pc}
 8009338:	2402940c 	.word	0x2402940c

0800933c <__errno>:
 800933c:	4b01      	ldr	r3, [pc, #4]	@ (8009344 <__errno+0x8>)
 800933e:	6818      	ldr	r0, [r3, #0]
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	24000024 	.word	0x24000024

08009348 <__libc_init_array>:
 8009348:	b570      	push	{r4, r5, r6, lr}
 800934a:	4d0d      	ldr	r5, [pc, #52]	@ (8009380 <__libc_init_array+0x38>)
 800934c:	4c0d      	ldr	r4, [pc, #52]	@ (8009384 <__libc_init_array+0x3c>)
 800934e:	1b64      	subs	r4, r4, r5
 8009350:	10a4      	asrs	r4, r4, #2
 8009352:	2600      	movs	r6, #0
 8009354:	42a6      	cmp	r6, r4
 8009356:	d109      	bne.n	800936c <__libc_init_array+0x24>
 8009358:	4d0b      	ldr	r5, [pc, #44]	@ (8009388 <__libc_init_array+0x40>)
 800935a:	4c0c      	ldr	r4, [pc, #48]	@ (800938c <__libc_init_array+0x44>)
 800935c:	f003 f9a2 	bl	800c6a4 <_init>
 8009360:	1b64      	subs	r4, r4, r5
 8009362:	10a4      	asrs	r4, r4, #2
 8009364:	2600      	movs	r6, #0
 8009366:	42a6      	cmp	r6, r4
 8009368:	d105      	bne.n	8009376 <__libc_init_array+0x2e>
 800936a:	bd70      	pop	{r4, r5, r6, pc}
 800936c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009370:	4798      	blx	r3
 8009372:	3601      	adds	r6, #1
 8009374:	e7ee      	b.n	8009354 <__libc_init_array+0xc>
 8009376:	f855 3b04 	ldr.w	r3, [r5], #4
 800937a:	4798      	blx	r3
 800937c:	3601      	adds	r6, #1
 800937e:	e7f2      	b.n	8009366 <__libc_init_array+0x1e>
 8009380:	0800d53c 	.word	0x0800d53c
 8009384:	0800d53c 	.word	0x0800d53c
 8009388:	0800d53c 	.word	0x0800d53c
 800938c:	0800d540 	.word	0x0800d540

08009390 <__retarget_lock_init_recursive>:
 8009390:	4770      	bx	lr

08009392 <__retarget_lock_acquire_recursive>:
 8009392:	4770      	bx	lr

08009394 <__retarget_lock_release_recursive>:
 8009394:	4770      	bx	lr

08009396 <memcpy>:
 8009396:	440a      	add	r2, r1
 8009398:	4291      	cmp	r1, r2
 800939a:	f100 33ff 	add.w	r3, r0, #4294967295
 800939e:	d100      	bne.n	80093a2 <memcpy+0xc>
 80093a0:	4770      	bx	lr
 80093a2:	b510      	push	{r4, lr}
 80093a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093ac:	4291      	cmp	r1, r2
 80093ae:	d1f9      	bne.n	80093a4 <memcpy+0xe>
 80093b0:	bd10      	pop	{r4, pc}
	...

080093b4 <nanf>:
 80093b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80093bc <nanf+0x8>
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	7fc00000 	.word	0x7fc00000

080093c0 <abort>:
 80093c0:	b508      	push	{r3, lr}
 80093c2:	2006      	movs	r0, #6
 80093c4:	f002 fd1e 	bl	800be04 <raise>
 80093c8:	2001      	movs	r0, #1
 80093ca:	f003 f969 	bl	800c6a0 <_exit>

080093ce <quorem>:
 80093ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d2:	6903      	ldr	r3, [r0, #16]
 80093d4:	690c      	ldr	r4, [r1, #16]
 80093d6:	42a3      	cmp	r3, r4
 80093d8:	4607      	mov	r7, r0
 80093da:	db7e      	blt.n	80094da <quorem+0x10c>
 80093dc:	3c01      	subs	r4, #1
 80093de:	f101 0814 	add.w	r8, r1, #20
 80093e2:	00a3      	lsls	r3, r4, #2
 80093e4:	f100 0514 	add.w	r5, r0, #20
 80093e8:	9300      	str	r3, [sp, #0]
 80093ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093ee:	9301      	str	r3, [sp, #4]
 80093f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80093f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093f8:	3301      	adds	r3, #1
 80093fa:	429a      	cmp	r2, r3
 80093fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009400:	fbb2 f6f3 	udiv	r6, r2, r3
 8009404:	d32e      	bcc.n	8009464 <quorem+0x96>
 8009406:	f04f 0a00 	mov.w	sl, #0
 800940a:	46c4      	mov	ip, r8
 800940c:	46ae      	mov	lr, r5
 800940e:	46d3      	mov	fp, sl
 8009410:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009414:	b298      	uxth	r0, r3
 8009416:	fb06 a000 	mla	r0, r6, r0, sl
 800941a:	0c02      	lsrs	r2, r0, #16
 800941c:	0c1b      	lsrs	r3, r3, #16
 800941e:	fb06 2303 	mla	r3, r6, r3, r2
 8009422:	f8de 2000 	ldr.w	r2, [lr]
 8009426:	b280      	uxth	r0, r0
 8009428:	b292      	uxth	r2, r2
 800942a:	1a12      	subs	r2, r2, r0
 800942c:	445a      	add	r2, fp
 800942e:	f8de 0000 	ldr.w	r0, [lr]
 8009432:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009436:	b29b      	uxth	r3, r3
 8009438:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800943c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009440:	b292      	uxth	r2, r2
 8009442:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009446:	45e1      	cmp	r9, ip
 8009448:	f84e 2b04 	str.w	r2, [lr], #4
 800944c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009450:	d2de      	bcs.n	8009410 <quorem+0x42>
 8009452:	9b00      	ldr	r3, [sp, #0]
 8009454:	58eb      	ldr	r3, [r5, r3]
 8009456:	b92b      	cbnz	r3, 8009464 <quorem+0x96>
 8009458:	9b01      	ldr	r3, [sp, #4]
 800945a:	3b04      	subs	r3, #4
 800945c:	429d      	cmp	r5, r3
 800945e:	461a      	mov	r2, r3
 8009460:	d32f      	bcc.n	80094c2 <quorem+0xf4>
 8009462:	613c      	str	r4, [r7, #16]
 8009464:	4638      	mov	r0, r7
 8009466:	f001 f89f 	bl	800a5a8 <__mcmp>
 800946a:	2800      	cmp	r0, #0
 800946c:	db25      	blt.n	80094ba <quorem+0xec>
 800946e:	4629      	mov	r1, r5
 8009470:	2000      	movs	r0, #0
 8009472:	f858 2b04 	ldr.w	r2, [r8], #4
 8009476:	f8d1 c000 	ldr.w	ip, [r1]
 800947a:	fa1f fe82 	uxth.w	lr, r2
 800947e:	fa1f f38c 	uxth.w	r3, ip
 8009482:	eba3 030e 	sub.w	r3, r3, lr
 8009486:	4403      	add	r3, r0
 8009488:	0c12      	lsrs	r2, r2, #16
 800948a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800948e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009492:	b29b      	uxth	r3, r3
 8009494:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009498:	45c1      	cmp	r9, r8
 800949a:	f841 3b04 	str.w	r3, [r1], #4
 800949e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80094a2:	d2e6      	bcs.n	8009472 <quorem+0xa4>
 80094a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094ac:	b922      	cbnz	r2, 80094b8 <quorem+0xea>
 80094ae:	3b04      	subs	r3, #4
 80094b0:	429d      	cmp	r5, r3
 80094b2:	461a      	mov	r2, r3
 80094b4:	d30b      	bcc.n	80094ce <quorem+0x100>
 80094b6:	613c      	str	r4, [r7, #16]
 80094b8:	3601      	adds	r6, #1
 80094ba:	4630      	mov	r0, r6
 80094bc:	b003      	add	sp, #12
 80094be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c2:	6812      	ldr	r2, [r2, #0]
 80094c4:	3b04      	subs	r3, #4
 80094c6:	2a00      	cmp	r2, #0
 80094c8:	d1cb      	bne.n	8009462 <quorem+0x94>
 80094ca:	3c01      	subs	r4, #1
 80094cc:	e7c6      	b.n	800945c <quorem+0x8e>
 80094ce:	6812      	ldr	r2, [r2, #0]
 80094d0:	3b04      	subs	r3, #4
 80094d2:	2a00      	cmp	r2, #0
 80094d4:	d1ef      	bne.n	80094b6 <quorem+0xe8>
 80094d6:	3c01      	subs	r4, #1
 80094d8:	e7ea      	b.n	80094b0 <quorem+0xe2>
 80094da:	2000      	movs	r0, #0
 80094dc:	e7ee      	b.n	80094bc <quorem+0xee>
	...

080094e0 <_dtoa_r>:
 80094e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e4:	ed2d 8b02 	vpush	{d8}
 80094e8:	69c7      	ldr	r7, [r0, #28]
 80094ea:	b091      	sub	sp, #68	@ 0x44
 80094ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80094f0:	ec55 4b10 	vmov	r4, r5, d0
 80094f4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80094f6:	9107      	str	r1, [sp, #28]
 80094f8:	4681      	mov	r9, r0
 80094fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80094fc:	930d      	str	r3, [sp, #52]	@ 0x34
 80094fe:	b97f      	cbnz	r7, 8009520 <_dtoa_r+0x40>
 8009500:	2010      	movs	r0, #16
 8009502:	f7fe f935 	bl	8007770 <__wrap_malloc>
 8009506:	4602      	mov	r2, r0
 8009508:	f8c9 001c 	str.w	r0, [r9, #28]
 800950c:	b920      	cbnz	r0, 8009518 <_dtoa_r+0x38>
 800950e:	4ba0      	ldr	r3, [pc, #640]	@ (8009790 <_dtoa_r+0x2b0>)
 8009510:	21ef      	movs	r1, #239	@ 0xef
 8009512:	48a0      	ldr	r0, [pc, #640]	@ (8009794 <_dtoa_r+0x2b4>)
 8009514:	f7fe fd26 	bl	8007f64 <__assert_func>
 8009518:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800951c:	6007      	str	r7, [r0, #0]
 800951e:	60c7      	str	r7, [r0, #12]
 8009520:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009524:	6819      	ldr	r1, [r3, #0]
 8009526:	b159      	cbz	r1, 8009540 <_dtoa_r+0x60>
 8009528:	685a      	ldr	r2, [r3, #4]
 800952a:	604a      	str	r2, [r1, #4]
 800952c:	2301      	movs	r3, #1
 800952e:	4093      	lsls	r3, r2
 8009530:	608b      	str	r3, [r1, #8]
 8009532:	4648      	mov	r0, r9
 8009534:	f000 fdbc 	bl	800a0b0 <_Bfree>
 8009538:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800953c:	2200      	movs	r2, #0
 800953e:	601a      	str	r2, [r3, #0]
 8009540:	1e2b      	subs	r3, r5, #0
 8009542:	bfbb      	ittet	lt
 8009544:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009548:	9303      	strlt	r3, [sp, #12]
 800954a:	2300      	movge	r3, #0
 800954c:	2201      	movlt	r2, #1
 800954e:	bfac      	ite	ge
 8009550:	6033      	strge	r3, [r6, #0]
 8009552:	6032      	strlt	r2, [r6, #0]
 8009554:	4b90      	ldr	r3, [pc, #576]	@ (8009798 <_dtoa_r+0x2b8>)
 8009556:	9e03      	ldr	r6, [sp, #12]
 8009558:	43b3      	bics	r3, r6
 800955a:	d110      	bne.n	800957e <_dtoa_r+0x9e>
 800955c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800955e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009562:	6013      	str	r3, [r2, #0]
 8009564:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8009568:	4323      	orrs	r3, r4
 800956a:	f000 84e6 	beq.w	8009f3a <_dtoa_r+0xa5a>
 800956e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009570:	4f8a      	ldr	r7, [pc, #552]	@ (800979c <_dtoa_r+0x2bc>)
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 84e8 	beq.w	8009f48 <_dtoa_r+0xa68>
 8009578:	1cfb      	adds	r3, r7, #3
 800957a:	f000 bce3 	b.w	8009f44 <_dtoa_r+0xa64>
 800957e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009582:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800958a:	d10a      	bne.n	80095a2 <_dtoa_r+0xc2>
 800958c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800958e:	2301      	movs	r3, #1
 8009590:	6013      	str	r3, [r2, #0]
 8009592:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009594:	b113      	cbz	r3, 800959c <_dtoa_r+0xbc>
 8009596:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009598:	4b81      	ldr	r3, [pc, #516]	@ (80097a0 <_dtoa_r+0x2c0>)
 800959a:	6013      	str	r3, [r2, #0]
 800959c:	4f81      	ldr	r7, [pc, #516]	@ (80097a4 <_dtoa_r+0x2c4>)
 800959e:	f000 bcd3 	b.w	8009f48 <_dtoa_r+0xa68>
 80095a2:	aa0e      	add	r2, sp, #56	@ 0x38
 80095a4:	a90f      	add	r1, sp, #60	@ 0x3c
 80095a6:	4648      	mov	r0, r9
 80095a8:	eeb0 0b48 	vmov.f64	d0, d8
 80095ac:	f001 f91c 	bl	800a7e8 <__d2b>
 80095b0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80095b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095b6:	9001      	str	r0, [sp, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d045      	beq.n	8009648 <_dtoa_r+0x168>
 80095bc:	eeb0 7b48 	vmov.f64	d7, d8
 80095c0:	ee18 1a90 	vmov	r1, s17
 80095c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80095c8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80095cc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80095d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80095d4:	2500      	movs	r5, #0
 80095d6:	ee07 1a90 	vmov	s15, r1
 80095da:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80095de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009778 <_dtoa_r+0x298>
 80095e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80095e6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8009780 <_dtoa_r+0x2a0>
 80095ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 80095ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009788 <_dtoa_r+0x2a8>
 80095f2:	ee07 3a90 	vmov	s15, r3
 80095f6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80095fa:	eeb0 7b46 	vmov.f64	d7, d6
 80095fe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009602:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009606:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800960a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800960e:	ee16 8a90 	vmov	r8, s13
 8009612:	d508      	bpl.n	8009626 <_dtoa_r+0x146>
 8009614:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009618:	eeb4 6b47 	vcmp.f64	d6, d7
 800961c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009620:	bf18      	it	ne
 8009622:	f108 38ff 	addne.w	r8, r8, #4294967295
 8009626:	f1b8 0f16 	cmp.w	r8, #22
 800962a:	d82b      	bhi.n	8009684 <_dtoa_r+0x1a4>
 800962c:	495e      	ldr	r1, [pc, #376]	@ (80097a8 <_dtoa_r+0x2c8>)
 800962e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8009632:	ed91 7b00 	vldr	d7, [r1]
 8009636:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800963a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800963e:	d501      	bpl.n	8009644 <_dtoa_r+0x164>
 8009640:	f108 38ff 	add.w	r8, r8, #4294967295
 8009644:	2100      	movs	r1, #0
 8009646:	e01e      	b.n	8009686 <_dtoa_r+0x1a6>
 8009648:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800964a:	4413      	add	r3, r2
 800964c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8009650:	2920      	cmp	r1, #32
 8009652:	bfc1      	itttt	gt
 8009654:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009658:	408e      	lslgt	r6, r1
 800965a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800965e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8009662:	bfd6      	itet	le
 8009664:	f1c1 0120 	rsble	r1, r1, #32
 8009668:	4331      	orrgt	r1, r6
 800966a:	fa04 f101 	lslle.w	r1, r4, r1
 800966e:	ee07 1a90 	vmov	s15, r1
 8009672:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009676:	3b01      	subs	r3, #1
 8009678:	ee17 1a90 	vmov	r1, s15
 800967c:	2501      	movs	r5, #1
 800967e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8009682:	e7a8      	b.n	80095d6 <_dtoa_r+0xf6>
 8009684:	2101      	movs	r1, #1
 8009686:	1ad2      	subs	r2, r2, r3
 8009688:	1e53      	subs	r3, r2, #1
 800968a:	9306      	str	r3, [sp, #24]
 800968c:	bf45      	ittet	mi
 800968e:	f1c2 0301 	rsbmi	r3, r2, #1
 8009692:	9304      	strmi	r3, [sp, #16]
 8009694:	2300      	movpl	r3, #0
 8009696:	2300      	movmi	r3, #0
 8009698:	bf4c      	ite	mi
 800969a:	9306      	strmi	r3, [sp, #24]
 800969c:	9304      	strpl	r3, [sp, #16]
 800969e:	f1b8 0f00 	cmp.w	r8, #0
 80096a2:	910c      	str	r1, [sp, #48]	@ 0x30
 80096a4:	db18      	blt.n	80096d8 <_dtoa_r+0x1f8>
 80096a6:	9b06      	ldr	r3, [sp, #24]
 80096a8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80096ac:	4443      	add	r3, r8
 80096ae:	9306      	str	r3, [sp, #24]
 80096b0:	2300      	movs	r3, #0
 80096b2:	9a07      	ldr	r2, [sp, #28]
 80096b4:	2a09      	cmp	r2, #9
 80096b6:	d845      	bhi.n	8009744 <_dtoa_r+0x264>
 80096b8:	2a05      	cmp	r2, #5
 80096ba:	bfc4      	itt	gt
 80096bc:	3a04      	subgt	r2, #4
 80096be:	9207      	strgt	r2, [sp, #28]
 80096c0:	9a07      	ldr	r2, [sp, #28]
 80096c2:	f1a2 0202 	sub.w	r2, r2, #2
 80096c6:	bfcc      	ite	gt
 80096c8:	2400      	movgt	r4, #0
 80096ca:	2401      	movle	r4, #1
 80096cc:	2a03      	cmp	r2, #3
 80096ce:	d844      	bhi.n	800975a <_dtoa_r+0x27a>
 80096d0:	e8df f002 	tbb	[pc, r2]
 80096d4:	0b173634 	.word	0x0b173634
 80096d8:	9b04      	ldr	r3, [sp, #16]
 80096da:	2200      	movs	r2, #0
 80096dc:	eba3 0308 	sub.w	r3, r3, r8
 80096e0:	9304      	str	r3, [sp, #16]
 80096e2:	920a      	str	r2, [sp, #40]	@ 0x28
 80096e4:	f1c8 0300 	rsb	r3, r8, #0
 80096e8:	e7e3      	b.n	80096b2 <_dtoa_r+0x1d2>
 80096ea:	2201      	movs	r2, #1
 80096ec:	9208      	str	r2, [sp, #32]
 80096ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096f0:	eb08 0b02 	add.w	fp, r8, r2
 80096f4:	f10b 0a01 	add.w	sl, fp, #1
 80096f8:	4652      	mov	r2, sl
 80096fa:	2a01      	cmp	r2, #1
 80096fc:	bfb8      	it	lt
 80096fe:	2201      	movlt	r2, #1
 8009700:	e006      	b.n	8009710 <_dtoa_r+0x230>
 8009702:	2201      	movs	r2, #1
 8009704:	9208      	str	r2, [sp, #32]
 8009706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009708:	2a00      	cmp	r2, #0
 800970a:	dd29      	ble.n	8009760 <_dtoa_r+0x280>
 800970c:	4693      	mov	fp, r2
 800970e:	4692      	mov	sl, r2
 8009710:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8009714:	2100      	movs	r1, #0
 8009716:	2004      	movs	r0, #4
 8009718:	f100 0614 	add.w	r6, r0, #20
 800971c:	4296      	cmp	r6, r2
 800971e:	d926      	bls.n	800976e <_dtoa_r+0x28e>
 8009720:	6079      	str	r1, [r7, #4]
 8009722:	4648      	mov	r0, r9
 8009724:	9305      	str	r3, [sp, #20]
 8009726:	f000 fc83 	bl	800a030 <_Balloc>
 800972a:	9b05      	ldr	r3, [sp, #20]
 800972c:	4607      	mov	r7, r0
 800972e:	2800      	cmp	r0, #0
 8009730:	d13e      	bne.n	80097b0 <_dtoa_r+0x2d0>
 8009732:	4b1e      	ldr	r3, [pc, #120]	@ (80097ac <_dtoa_r+0x2cc>)
 8009734:	4602      	mov	r2, r0
 8009736:	f240 11af 	movw	r1, #431	@ 0x1af
 800973a:	e6ea      	b.n	8009512 <_dtoa_r+0x32>
 800973c:	2200      	movs	r2, #0
 800973e:	e7e1      	b.n	8009704 <_dtoa_r+0x224>
 8009740:	2200      	movs	r2, #0
 8009742:	e7d3      	b.n	80096ec <_dtoa_r+0x20c>
 8009744:	2401      	movs	r4, #1
 8009746:	2200      	movs	r2, #0
 8009748:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800974c:	f04f 3bff 	mov.w	fp, #4294967295
 8009750:	2100      	movs	r1, #0
 8009752:	46da      	mov	sl, fp
 8009754:	2212      	movs	r2, #18
 8009756:	9109      	str	r1, [sp, #36]	@ 0x24
 8009758:	e7da      	b.n	8009710 <_dtoa_r+0x230>
 800975a:	2201      	movs	r2, #1
 800975c:	9208      	str	r2, [sp, #32]
 800975e:	e7f5      	b.n	800974c <_dtoa_r+0x26c>
 8009760:	f04f 0b01 	mov.w	fp, #1
 8009764:	46da      	mov	sl, fp
 8009766:	465a      	mov	r2, fp
 8009768:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800976c:	e7d0      	b.n	8009710 <_dtoa_r+0x230>
 800976e:	3101      	adds	r1, #1
 8009770:	0040      	lsls	r0, r0, #1
 8009772:	e7d1      	b.n	8009718 <_dtoa_r+0x238>
 8009774:	f3af 8000 	nop.w
 8009778:	636f4361 	.word	0x636f4361
 800977c:	3fd287a7 	.word	0x3fd287a7
 8009780:	8b60c8b3 	.word	0x8b60c8b3
 8009784:	3fc68a28 	.word	0x3fc68a28
 8009788:	509f79fb 	.word	0x509f79fb
 800978c:	3fd34413 	.word	0x3fd34413
 8009790:	0800cfb5 	.word	0x0800cfb5
 8009794:	0800cfcc 	.word	0x0800cfcc
 8009798:	7ff00000 	.word	0x7ff00000
 800979c:	0800cfb1 	.word	0x0800cfb1
 80097a0:	0800cf80 	.word	0x0800cf80
 80097a4:	0800cf7f 	.word	0x0800cf7f
 80097a8:	0800d318 	.word	0x0800d318
 80097ac:	0800d024 	.word	0x0800d024
 80097b0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80097b4:	f1ba 0f0e 	cmp.w	sl, #14
 80097b8:	6010      	str	r0, [r2, #0]
 80097ba:	d86e      	bhi.n	800989a <_dtoa_r+0x3ba>
 80097bc:	2c00      	cmp	r4, #0
 80097be:	d06c      	beq.n	800989a <_dtoa_r+0x3ba>
 80097c0:	f1b8 0f00 	cmp.w	r8, #0
 80097c4:	f340 80b4 	ble.w	8009930 <_dtoa_r+0x450>
 80097c8:	4ac8      	ldr	r2, [pc, #800]	@ (8009aec <_dtoa_r+0x60c>)
 80097ca:	f008 010f 	and.w	r1, r8, #15
 80097ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80097d2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80097d6:	ed92 7b00 	vldr	d7, [r2]
 80097da:	ea4f 1128 	mov.w	r1, r8, asr #4
 80097de:	f000 809b 	beq.w	8009918 <_dtoa_r+0x438>
 80097e2:	4ac3      	ldr	r2, [pc, #780]	@ (8009af0 <_dtoa_r+0x610>)
 80097e4:	ed92 6b08 	vldr	d6, [r2, #32]
 80097e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80097ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80097f0:	f001 010f 	and.w	r1, r1, #15
 80097f4:	2203      	movs	r2, #3
 80097f6:	48be      	ldr	r0, [pc, #760]	@ (8009af0 <_dtoa_r+0x610>)
 80097f8:	2900      	cmp	r1, #0
 80097fa:	f040 808f 	bne.w	800991c <_dtoa_r+0x43c>
 80097fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009802:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009806:	ed8d 7b02 	vstr	d7, [sp, #8]
 800980a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800980c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009810:	2900      	cmp	r1, #0
 8009812:	f000 80b3 	beq.w	800997c <_dtoa_r+0x49c>
 8009816:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800981a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800981e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009822:	f140 80ab 	bpl.w	800997c <_dtoa_r+0x49c>
 8009826:	f1ba 0f00 	cmp.w	sl, #0
 800982a:	f000 80a7 	beq.w	800997c <_dtoa_r+0x49c>
 800982e:	f1bb 0f00 	cmp.w	fp, #0
 8009832:	dd30      	ble.n	8009896 <_dtoa_r+0x3b6>
 8009834:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009838:	ee27 7b06 	vmul.f64	d7, d7, d6
 800983c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009840:	f108 31ff 	add.w	r1, r8, #4294967295
 8009844:	9105      	str	r1, [sp, #20]
 8009846:	3201      	adds	r2, #1
 8009848:	465c      	mov	r4, fp
 800984a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800984e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8009852:	ee07 2a90 	vmov	s15, r2
 8009856:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800985a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800985e:	ee15 2a90 	vmov	r2, s11
 8009862:	ec51 0b15 	vmov	r0, r1, d5
 8009866:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800986a:	2c00      	cmp	r4, #0
 800986c:	f040 808a 	bne.w	8009984 <_dtoa_r+0x4a4>
 8009870:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009874:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009878:	ec41 0b17 	vmov	d7, r0, r1
 800987c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009884:	f300 826a 	bgt.w	8009d5c <_dtoa_r+0x87c>
 8009888:	eeb1 7b47 	vneg.f64	d7, d7
 800988c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009894:	d423      	bmi.n	80098de <_dtoa_r+0x3fe>
 8009896:	ed8d 8b02 	vstr	d8, [sp, #8]
 800989a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800989c:	2a00      	cmp	r2, #0
 800989e:	f2c0 8129 	blt.w	8009af4 <_dtoa_r+0x614>
 80098a2:	f1b8 0f0e 	cmp.w	r8, #14
 80098a6:	f300 8125 	bgt.w	8009af4 <_dtoa_r+0x614>
 80098aa:	4b90      	ldr	r3, [pc, #576]	@ (8009aec <_dtoa_r+0x60c>)
 80098ac:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80098b0:	ed93 6b00 	vldr	d6, [r3]
 80098b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f280 80c8 	bge.w	8009a4c <_dtoa_r+0x56c>
 80098bc:	f1ba 0f00 	cmp.w	sl, #0
 80098c0:	f300 80c4 	bgt.w	8009a4c <_dtoa_r+0x56c>
 80098c4:	d10b      	bne.n	80098de <_dtoa_r+0x3fe>
 80098c6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80098ca:	ee26 6b07 	vmul.f64	d6, d6, d7
 80098ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80098d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098da:	f2c0 823c 	blt.w	8009d56 <_dtoa_r+0x876>
 80098de:	2400      	movs	r4, #0
 80098e0:	4625      	mov	r5, r4
 80098e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098e4:	43db      	mvns	r3, r3
 80098e6:	9305      	str	r3, [sp, #20]
 80098e8:	463e      	mov	r6, r7
 80098ea:	f04f 0800 	mov.w	r8, #0
 80098ee:	4621      	mov	r1, r4
 80098f0:	4648      	mov	r0, r9
 80098f2:	f000 fbdd 	bl	800a0b0 <_Bfree>
 80098f6:	2d00      	cmp	r5, #0
 80098f8:	f000 80a2 	beq.w	8009a40 <_dtoa_r+0x560>
 80098fc:	f1b8 0f00 	cmp.w	r8, #0
 8009900:	d005      	beq.n	800990e <_dtoa_r+0x42e>
 8009902:	45a8      	cmp	r8, r5
 8009904:	d003      	beq.n	800990e <_dtoa_r+0x42e>
 8009906:	4641      	mov	r1, r8
 8009908:	4648      	mov	r0, r9
 800990a:	f000 fbd1 	bl	800a0b0 <_Bfree>
 800990e:	4629      	mov	r1, r5
 8009910:	4648      	mov	r0, r9
 8009912:	f000 fbcd 	bl	800a0b0 <_Bfree>
 8009916:	e093      	b.n	8009a40 <_dtoa_r+0x560>
 8009918:	2202      	movs	r2, #2
 800991a:	e76c      	b.n	80097f6 <_dtoa_r+0x316>
 800991c:	07cc      	lsls	r4, r1, #31
 800991e:	d504      	bpl.n	800992a <_dtoa_r+0x44a>
 8009920:	ed90 6b00 	vldr	d6, [r0]
 8009924:	3201      	adds	r2, #1
 8009926:	ee27 7b06 	vmul.f64	d7, d7, d6
 800992a:	1049      	asrs	r1, r1, #1
 800992c:	3008      	adds	r0, #8
 800992e:	e763      	b.n	80097f8 <_dtoa_r+0x318>
 8009930:	d022      	beq.n	8009978 <_dtoa_r+0x498>
 8009932:	f1c8 0100 	rsb	r1, r8, #0
 8009936:	4a6d      	ldr	r2, [pc, #436]	@ (8009aec <_dtoa_r+0x60c>)
 8009938:	f001 000f 	and.w	r0, r1, #15
 800993c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009940:	ed92 7b00 	vldr	d7, [r2]
 8009944:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009948:	ed8d 7b02 	vstr	d7, [sp, #8]
 800994c:	4868      	ldr	r0, [pc, #416]	@ (8009af0 <_dtoa_r+0x610>)
 800994e:	1109      	asrs	r1, r1, #4
 8009950:	2400      	movs	r4, #0
 8009952:	2202      	movs	r2, #2
 8009954:	b929      	cbnz	r1, 8009962 <_dtoa_r+0x482>
 8009956:	2c00      	cmp	r4, #0
 8009958:	f43f af57 	beq.w	800980a <_dtoa_r+0x32a>
 800995c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009960:	e753      	b.n	800980a <_dtoa_r+0x32a>
 8009962:	07ce      	lsls	r6, r1, #31
 8009964:	d505      	bpl.n	8009972 <_dtoa_r+0x492>
 8009966:	ed90 6b00 	vldr	d6, [r0]
 800996a:	3201      	adds	r2, #1
 800996c:	2401      	movs	r4, #1
 800996e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009972:	1049      	asrs	r1, r1, #1
 8009974:	3008      	adds	r0, #8
 8009976:	e7ed      	b.n	8009954 <_dtoa_r+0x474>
 8009978:	2202      	movs	r2, #2
 800997a:	e746      	b.n	800980a <_dtoa_r+0x32a>
 800997c:	f8cd 8014 	str.w	r8, [sp, #20]
 8009980:	4654      	mov	r4, sl
 8009982:	e762      	b.n	800984a <_dtoa_r+0x36a>
 8009984:	4a59      	ldr	r2, [pc, #356]	@ (8009aec <_dtoa_r+0x60c>)
 8009986:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800998a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800998e:	9a08      	ldr	r2, [sp, #32]
 8009990:	ec41 0b17 	vmov	d7, r0, r1
 8009994:	443c      	add	r4, r7
 8009996:	b34a      	cbz	r2, 80099ec <_dtoa_r+0x50c>
 8009998:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800999c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80099a0:	463e      	mov	r6, r7
 80099a2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80099a6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80099aa:	ee35 7b47 	vsub.f64	d7, d5, d7
 80099ae:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80099b2:	ee14 2a90 	vmov	r2, s9
 80099b6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80099ba:	3230      	adds	r2, #48	@ 0x30
 80099bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80099c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80099c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099c8:	f806 2b01 	strb.w	r2, [r6], #1
 80099cc:	d438      	bmi.n	8009a40 <_dtoa_r+0x560>
 80099ce:	ee32 5b46 	vsub.f64	d5, d2, d6
 80099d2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80099d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099da:	d46e      	bmi.n	8009aba <_dtoa_r+0x5da>
 80099dc:	42a6      	cmp	r6, r4
 80099de:	f43f af5a 	beq.w	8009896 <_dtoa_r+0x3b6>
 80099e2:	ee27 7b03 	vmul.f64	d7, d7, d3
 80099e6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80099ea:	e7e0      	b.n	80099ae <_dtoa_r+0x4ce>
 80099ec:	4621      	mov	r1, r4
 80099ee:	463e      	mov	r6, r7
 80099f0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80099f4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80099f8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80099fc:	ee14 2a90 	vmov	r2, s9
 8009a00:	3230      	adds	r2, #48	@ 0x30
 8009a02:	f806 2b01 	strb.w	r2, [r6], #1
 8009a06:	42a6      	cmp	r6, r4
 8009a08:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009a0c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009a10:	d119      	bne.n	8009a46 <_dtoa_r+0x566>
 8009a12:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009a16:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009a1a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a22:	dc4a      	bgt.n	8009aba <_dtoa_r+0x5da>
 8009a24:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009a28:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a30:	f57f af31 	bpl.w	8009896 <_dtoa_r+0x3b6>
 8009a34:	460e      	mov	r6, r1
 8009a36:	3901      	subs	r1, #1
 8009a38:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a3c:	2b30      	cmp	r3, #48	@ 0x30
 8009a3e:	d0f9      	beq.n	8009a34 <_dtoa_r+0x554>
 8009a40:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009a44:	e027      	b.n	8009a96 <_dtoa_r+0x5b6>
 8009a46:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009a4a:	e7d5      	b.n	80099f8 <_dtoa_r+0x518>
 8009a4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a50:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8009a54:	463e      	mov	r6, r7
 8009a56:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009a5a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009a5e:	ee15 3a10 	vmov	r3, s10
 8009a62:	3330      	adds	r3, #48	@ 0x30
 8009a64:	f806 3b01 	strb.w	r3, [r6], #1
 8009a68:	1bf3      	subs	r3, r6, r7
 8009a6a:	459a      	cmp	sl, r3
 8009a6c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009a70:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009a74:	d132      	bne.n	8009adc <_dtoa_r+0x5fc>
 8009a76:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009a7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a82:	dc18      	bgt.n	8009ab6 <_dtoa_r+0x5d6>
 8009a84:	eeb4 7b46 	vcmp.f64	d7, d6
 8009a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a8c:	d103      	bne.n	8009a96 <_dtoa_r+0x5b6>
 8009a8e:	ee15 3a10 	vmov	r3, s10
 8009a92:	07db      	lsls	r3, r3, #31
 8009a94:	d40f      	bmi.n	8009ab6 <_dtoa_r+0x5d6>
 8009a96:	9901      	ldr	r1, [sp, #4]
 8009a98:	4648      	mov	r0, r9
 8009a9a:	f000 fb09 	bl	800a0b0 <_Bfree>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009aa2:	7033      	strb	r3, [r6, #0]
 8009aa4:	f108 0301 	add.w	r3, r8, #1
 8009aa8:	6013      	str	r3, [r2, #0]
 8009aaa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f000 824b 	beq.w	8009f48 <_dtoa_r+0xa68>
 8009ab2:	601e      	str	r6, [r3, #0]
 8009ab4:	e248      	b.n	8009f48 <_dtoa_r+0xa68>
 8009ab6:	f8cd 8014 	str.w	r8, [sp, #20]
 8009aba:	4633      	mov	r3, r6
 8009abc:	461e      	mov	r6, r3
 8009abe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ac2:	2a39      	cmp	r2, #57	@ 0x39
 8009ac4:	d106      	bne.n	8009ad4 <_dtoa_r+0x5f4>
 8009ac6:	429f      	cmp	r7, r3
 8009ac8:	d1f8      	bne.n	8009abc <_dtoa_r+0x5dc>
 8009aca:	9a05      	ldr	r2, [sp, #20]
 8009acc:	3201      	adds	r2, #1
 8009ace:	9205      	str	r2, [sp, #20]
 8009ad0:	2230      	movs	r2, #48	@ 0x30
 8009ad2:	703a      	strb	r2, [r7, #0]
 8009ad4:	781a      	ldrb	r2, [r3, #0]
 8009ad6:	3201      	adds	r2, #1
 8009ad8:	701a      	strb	r2, [r3, #0]
 8009ada:	e7b1      	b.n	8009a40 <_dtoa_r+0x560>
 8009adc:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009ae0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ae8:	d1b5      	bne.n	8009a56 <_dtoa_r+0x576>
 8009aea:	e7d4      	b.n	8009a96 <_dtoa_r+0x5b6>
 8009aec:	0800d318 	.word	0x0800d318
 8009af0:	0800d2f0 	.word	0x0800d2f0
 8009af4:	9908      	ldr	r1, [sp, #32]
 8009af6:	2900      	cmp	r1, #0
 8009af8:	f000 80e9 	beq.w	8009cce <_dtoa_r+0x7ee>
 8009afc:	9907      	ldr	r1, [sp, #28]
 8009afe:	2901      	cmp	r1, #1
 8009b00:	f300 80cb 	bgt.w	8009c9a <_dtoa_r+0x7ba>
 8009b04:	2d00      	cmp	r5, #0
 8009b06:	f000 80c4 	beq.w	8009c92 <_dtoa_r+0x7b2>
 8009b0a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009b0e:	9e04      	ldr	r6, [sp, #16]
 8009b10:	461c      	mov	r4, r3
 8009b12:	9305      	str	r3, [sp, #20]
 8009b14:	9b04      	ldr	r3, [sp, #16]
 8009b16:	4413      	add	r3, r2
 8009b18:	9304      	str	r3, [sp, #16]
 8009b1a:	9b06      	ldr	r3, [sp, #24]
 8009b1c:	2101      	movs	r1, #1
 8009b1e:	4413      	add	r3, r2
 8009b20:	4648      	mov	r0, r9
 8009b22:	9306      	str	r3, [sp, #24]
 8009b24:	f000 fbc2 	bl	800a2ac <__i2b>
 8009b28:	9b05      	ldr	r3, [sp, #20]
 8009b2a:	4605      	mov	r5, r0
 8009b2c:	b166      	cbz	r6, 8009b48 <_dtoa_r+0x668>
 8009b2e:	9a06      	ldr	r2, [sp, #24]
 8009b30:	2a00      	cmp	r2, #0
 8009b32:	dd09      	ble.n	8009b48 <_dtoa_r+0x668>
 8009b34:	42b2      	cmp	r2, r6
 8009b36:	9904      	ldr	r1, [sp, #16]
 8009b38:	bfa8      	it	ge
 8009b3a:	4632      	movge	r2, r6
 8009b3c:	1a89      	subs	r1, r1, r2
 8009b3e:	9104      	str	r1, [sp, #16]
 8009b40:	9906      	ldr	r1, [sp, #24]
 8009b42:	1ab6      	subs	r6, r6, r2
 8009b44:	1a8a      	subs	r2, r1, r2
 8009b46:	9206      	str	r2, [sp, #24]
 8009b48:	b30b      	cbz	r3, 8009b8e <_dtoa_r+0x6ae>
 8009b4a:	9a08      	ldr	r2, [sp, #32]
 8009b4c:	2a00      	cmp	r2, #0
 8009b4e:	f000 80c5 	beq.w	8009cdc <_dtoa_r+0x7fc>
 8009b52:	2c00      	cmp	r4, #0
 8009b54:	f000 80bf 	beq.w	8009cd6 <_dtoa_r+0x7f6>
 8009b58:	4629      	mov	r1, r5
 8009b5a:	4622      	mov	r2, r4
 8009b5c:	4648      	mov	r0, r9
 8009b5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b60:	f000 fc5c 	bl	800a41c <__pow5mult>
 8009b64:	9a01      	ldr	r2, [sp, #4]
 8009b66:	4601      	mov	r1, r0
 8009b68:	4605      	mov	r5, r0
 8009b6a:	4648      	mov	r0, r9
 8009b6c:	f000 fbb4 	bl	800a2d8 <__multiply>
 8009b70:	9901      	ldr	r1, [sp, #4]
 8009b72:	9005      	str	r0, [sp, #20]
 8009b74:	4648      	mov	r0, r9
 8009b76:	f000 fa9b 	bl	800a0b0 <_Bfree>
 8009b7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b7c:	1b1b      	subs	r3, r3, r4
 8009b7e:	f000 80b0 	beq.w	8009ce2 <_dtoa_r+0x802>
 8009b82:	9905      	ldr	r1, [sp, #20]
 8009b84:	461a      	mov	r2, r3
 8009b86:	4648      	mov	r0, r9
 8009b88:	f000 fc48 	bl	800a41c <__pow5mult>
 8009b8c:	9001      	str	r0, [sp, #4]
 8009b8e:	2101      	movs	r1, #1
 8009b90:	4648      	mov	r0, r9
 8009b92:	f000 fb8b 	bl	800a2ac <__i2b>
 8009b96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b98:	4604      	mov	r4, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f000 81da 	beq.w	8009f54 <_dtoa_r+0xa74>
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	4601      	mov	r1, r0
 8009ba4:	4648      	mov	r0, r9
 8009ba6:	f000 fc39 	bl	800a41c <__pow5mult>
 8009baa:	9b07      	ldr	r3, [sp, #28]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	4604      	mov	r4, r0
 8009bb0:	f300 80a0 	bgt.w	8009cf4 <_dtoa_r+0x814>
 8009bb4:	9b02      	ldr	r3, [sp, #8]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f040 8096 	bne.w	8009ce8 <_dtoa_r+0x808>
 8009bbc:	9b03      	ldr	r3, [sp, #12]
 8009bbe:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009bc2:	2a00      	cmp	r2, #0
 8009bc4:	f040 8092 	bne.w	8009cec <_dtoa_r+0x80c>
 8009bc8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009bcc:	0d12      	lsrs	r2, r2, #20
 8009bce:	0512      	lsls	r2, r2, #20
 8009bd0:	2a00      	cmp	r2, #0
 8009bd2:	f000 808d 	beq.w	8009cf0 <_dtoa_r+0x810>
 8009bd6:	9b04      	ldr	r3, [sp, #16]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	9304      	str	r3, [sp, #16]
 8009bdc:	9b06      	ldr	r3, [sp, #24]
 8009bde:	3301      	adds	r3, #1
 8009be0:	9306      	str	r3, [sp, #24]
 8009be2:	2301      	movs	r3, #1
 8009be4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009be6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 81b9 	beq.w	8009f60 <_dtoa_r+0xa80>
 8009bee:	6922      	ldr	r2, [r4, #16]
 8009bf0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009bf4:	6910      	ldr	r0, [r2, #16]
 8009bf6:	f000 fb0d 	bl	800a214 <__hi0bits>
 8009bfa:	f1c0 0020 	rsb	r0, r0, #32
 8009bfe:	9b06      	ldr	r3, [sp, #24]
 8009c00:	4418      	add	r0, r3
 8009c02:	f010 001f 	ands.w	r0, r0, #31
 8009c06:	f000 8081 	beq.w	8009d0c <_dtoa_r+0x82c>
 8009c0a:	f1c0 0220 	rsb	r2, r0, #32
 8009c0e:	2a04      	cmp	r2, #4
 8009c10:	dd73      	ble.n	8009cfa <_dtoa_r+0x81a>
 8009c12:	9b04      	ldr	r3, [sp, #16]
 8009c14:	f1c0 001c 	rsb	r0, r0, #28
 8009c18:	4403      	add	r3, r0
 8009c1a:	9304      	str	r3, [sp, #16]
 8009c1c:	9b06      	ldr	r3, [sp, #24]
 8009c1e:	4406      	add	r6, r0
 8009c20:	4403      	add	r3, r0
 8009c22:	9306      	str	r3, [sp, #24]
 8009c24:	9b04      	ldr	r3, [sp, #16]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	dd05      	ble.n	8009c36 <_dtoa_r+0x756>
 8009c2a:	9901      	ldr	r1, [sp, #4]
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	4648      	mov	r0, r9
 8009c30:	f000 fc4e 	bl	800a4d0 <__lshift>
 8009c34:	9001      	str	r0, [sp, #4]
 8009c36:	9b06      	ldr	r3, [sp, #24]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	dd05      	ble.n	8009c48 <_dtoa_r+0x768>
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	461a      	mov	r2, r3
 8009c40:	4648      	mov	r0, r9
 8009c42:	f000 fc45 	bl	800a4d0 <__lshift>
 8009c46:	4604      	mov	r4, r0
 8009c48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d060      	beq.n	8009d10 <_dtoa_r+0x830>
 8009c4e:	9801      	ldr	r0, [sp, #4]
 8009c50:	4621      	mov	r1, r4
 8009c52:	f000 fca9 	bl	800a5a8 <__mcmp>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	da5a      	bge.n	8009d10 <_dtoa_r+0x830>
 8009c5a:	f108 33ff 	add.w	r3, r8, #4294967295
 8009c5e:	9305      	str	r3, [sp, #20]
 8009c60:	9901      	ldr	r1, [sp, #4]
 8009c62:	2300      	movs	r3, #0
 8009c64:	220a      	movs	r2, #10
 8009c66:	4648      	mov	r0, r9
 8009c68:	f000 fa44 	bl	800a0f4 <__multadd>
 8009c6c:	9b08      	ldr	r3, [sp, #32]
 8009c6e:	9001      	str	r0, [sp, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f000 8177 	beq.w	8009f64 <_dtoa_r+0xa84>
 8009c76:	4629      	mov	r1, r5
 8009c78:	2300      	movs	r3, #0
 8009c7a:	220a      	movs	r2, #10
 8009c7c:	4648      	mov	r0, r9
 8009c7e:	f000 fa39 	bl	800a0f4 <__multadd>
 8009c82:	f1bb 0f00 	cmp.w	fp, #0
 8009c86:	4605      	mov	r5, r0
 8009c88:	dc6e      	bgt.n	8009d68 <_dtoa_r+0x888>
 8009c8a:	9b07      	ldr	r3, [sp, #28]
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	dc48      	bgt.n	8009d22 <_dtoa_r+0x842>
 8009c90:	e06a      	b.n	8009d68 <_dtoa_r+0x888>
 8009c92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c94:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009c98:	e739      	b.n	8009b0e <_dtoa_r+0x62e>
 8009c9a:	f10a 34ff 	add.w	r4, sl, #4294967295
 8009c9e:	42a3      	cmp	r3, r4
 8009ca0:	db07      	blt.n	8009cb2 <_dtoa_r+0x7d2>
 8009ca2:	f1ba 0f00 	cmp.w	sl, #0
 8009ca6:	eba3 0404 	sub.w	r4, r3, r4
 8009caa:	db0b      	blt.n	8009cc4 <_dtoa_r+0x7e4>
 8009cac:	9e04      	ldr	r6, [sp, #16]
 8009cae:	4652      	mov	r2, sl
 8009cb0:	e72f      	b.n	8009b12 <_dtoa_r+0x632>
 8009cb2:	1ae2      	subs	r2, r4, r3
 8009cb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cb6:	9e04      	ldr	r6, [sp, #16]
 8009cb8:	4413      	add	r3, r2
 8009cba:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cbc:	4652      	mov	r2, sl
 8009cbe:	4623      	mov	r3, r4
 8009cc0:	2400      	movs	r4, #0
 8009cc2:	e726      	b.n	8009b12 <_dtoa_r+0x632>
 8009cc4:	9a04      	ldr	r2, [sp, #16]
 8009cc6:	eba2 060a 	sub.w	r6, r2, sl
 8009cca:	2200      	movs	r2, #0
 8009ccc:	e721      	b.n	8009b12 <_dtoa_r+0x632>
 8009cce:	9e04      	ldr	r6, [sp, #16]
 8009cd0:	9d08      	ldr	r5, [sp, #32]
 8009cd2:	461c      	mov	r4, r3
 8009cd4:	e72a      	b.n	8009b2c <_dtoa_r+0x64c>
 8009cd6:	9a01      	ldr	r2, [sp, #4]
 8009cd8:	9205      	str	r2, [sp, #20]
 8009cda:	e752      	b.n	8009b82 <_dtoa_r+0x6a2>
 8009cdc:	9901      	ldr	r1, [sp, #4]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	e751      	b.n	8009b86 <_dtoa_r+0x6a6>
 8009ce2:	9b05      	ldr	r3, [sp, #20]
 8009ce4:	9301      	str	r3, [sp, #4]
 8009ce6:	e752      	b.n	8009b8e <_dtoa_r+0x6ae>
 8009ce8:	2300      	movs	r3, #0
 8009cea:	e77b      	b.n	8009be4 <_dtoa_r+0x704>
 8009cec:	9b02      	ldr	r3, [sp, #8]
 8009cee:	e779      	b.n	8009be4 <_dtoa_r+0x704>
 8009cf0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009cf2:	e778      	b.n	8009be6 <_dtoa_r+0x706>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cf8:	e779      	b.n	8009bee <_dtoa_r+0x70e>
 8009cfa:	d093      	beq.n	8009c24 <_dtoa_r+0x744>
 8009cfc:	9b04      	ldr	r3, [sp, #16]
 8009cfe:	321c      	adds	r2, #28
 8009d00:	4413      	add	r3, r2
 8009d02:	9304      	str	r3, [sp, #16]
 8009d04:	9b06      	ldr	r3, [sp, #24]
 8009d06:	4416      	add	r6, r2
 8009d08:	4413      	add	r3, r2
 8009d0a:	e78a      	b.n	8009c22 <_dtoa_r+0x742>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	e7f5      	b.n	8009cfc <_dtoa_r+0x81c>
 8009d10:	f1ba 0f00 	cmp.w	sl, #0
 8009d14:	f8cd 8014 	str.w	r8, [sp, #20]
 8009d18:	46d3      	mov	fp, sl
 8009d1a:	dc21      	bgt.n	8009d60 <_dtoa_r+0x880>
 8009d1c:	9b07      	ldr	r3, [sp, #28]
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	dd1e      	ble.n	8009d60 <_dtoa_r+0x880>
 8009d22:	f1bb 0f00 	cmp.w	fp, #0
 8009d26:	f47f addc 	bne.w	80098e2 <_dtoa_r+0x402>
 8009d2a:	4621      	mov	r1, r4
 8009d2c:	465b      	mov	r3, fp
 8009d2e:	2205      	movs	r2, #5
 8009d30:	4648      	mov	r0, r9
 8009d32:	f000 f9df 	bl	800a0f4 <__multadd>
 8009d36:	4601      	mov	r1, r0
 8009d38:	4604      	mov	r4, r0
 8009d3a:	9801      	ldr	r0, [sp, #4]
 8009d3c:	f000 fc34 	bl	800a5a8 <__mcmp>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	f77f adce 	ble.w	80098e2 <_dtoa_r+0x402>
 8009d46:	463e      	mov	r6, r7
 8009d48:	2331      	movs	r3, #49	@ 0x31
 8009d4a:	f806 3b01 	strb.w	r3, [r6], #1
 8009d4e:	9b05      	ldr	r3, [sp, #20]
 8009d50:	3301      	adds	r3, #1
 8009d52:	9305      	str	r3, [sp, #20]
 8009d54:	e5c9      	b.n	80098ea <_dtoa_r+0x40a>
 8009d56:	f8cd 8014 	str.w	r8, [sp, #20]
 8009d5a:	4654      	mov	r4, sl
 8009d5c:	4625      	mov	r5, r4
 8009d5e:	e7f2      	b.n	8009d46 <_dtoa_r+0x866>
 8009d60:	9b08      	ldr	r3, [sp, #32]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f000 8102 	beq.w	8009f6c <_dtoa_r+0xa8c>
 8009d68:	2e00      	cmp	r6, #0
 8009d6a:	dd05      	ble.n	8009d78 <_dtoa_r+0x898>
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	4632      	mov	r2, r6
 8009d70:	4648      	mov	r0, r9
 8009d72:	f000 fbad 	bl	800a4d0 <__lshift>
 8009d76:	4605      	mov	r5, r0
 8009d78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d058      	beq.n	8009e30 <_dtoa_r+0x950>
 8009d7e:	6869      	ldr	r1, [r5, #4]
 8009d80:	4648      	mov	r0, r9
 8009d82:	f000 f955 	bl	800a030 <_Balloc>
 8009d86:	4606      	mov	r6, r0
 8009d88:	b928      	cbnz	r0, 8009d96 <_dtoa_r+0x8b6>
 8009d8a:	4b82      	ldr	r3, [pc, #520]	@ (8009f94 <_dtoa_r+0xab4>)
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009d92:	f7ff bbbe 	b.w	8009512 <_dtoa_r+0x32>
 8009d96:	692a      	ldr	r2, [r5, #16]
 8009d98:	3202      	adds	r2, #2
 8009d9a:	0092      	lsls	r2, r2, #2
 8009d9c:	f105 010c 	add.w	r1, r5, #12
 8009da0:	300c      	adds	r0, #12
 8009da2:	f7ff faf8 	bl	8009396 <memcpy>
 8009da6:	2201      	movs	r2, #1
 8009da8:	4631      	mov	r1, r6
 8009daa:	4648      	mov	r0, r9
 8009dac:	f000 fb90 	bl	800a4d0 <__lshift>
 8009db0:	1c7b      	adds	r3, r7, #1
 8009db2:	9304      	str	r3, [sp, #16]
 8009db4:	eb07 030b 	add.w	r3, r7, fp
 8009db8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dba:	9b02      	ldr	r3, [sp, #8]
 8009dbc:	f003 0301 	and.w	r3, r3, #1
 8009dc0:	46a8      	mov	r8, r5
 8009dc2:	9308      	str	r3, [sp, #32]
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	9b04      	ldr	r3, [sp, #16]
 8009dc8:	9801      	ldr	r0, [sp, #4]
 8009dca:	4621      	mov	r1, r4
 8009dcc:	f103 3bff 	add.w	fp, r3, #4294967295
 8009dd0:	f7ff fafd 	bl	80093ce <quorem>
 8009dd4:	4641      	mov	r1, r8
 8009dd6:	9002      	str	r0, [sp, #8]
 8009dd8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009ddc:	9801      	ldr	r0, [sp, #4]
 8009dde:	f000 fbe3 	bl	800a5a8 <__mcmp>
 8009de2:	462a      	mov	r2, r5
 8009de4:	9006      	str	r0, [sp, #24]
 8009de6:	4621      	mov	r1, r4
 8009de8:	4648      	mov	r0, r9
 8009dea:	f000 fbf9 	bl	800a5e0 <__mdiff>
 8009dee:	68c2      	ldr	r2, [r0, #12]
 8009df0:	4606      	mov	r6, r0
 8009df2:	b9fa      	cbnz	r2, 8009e34 <_dtoa_r+0x954>
 8009df4:	4601      	mov	r1, r0
 8009df6:	9801      	ldr	r0, [sp, #4]
 8009df8:	f000 fbd6 	bl	800a5a8 <__mcmp>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	4631      	mov	r1, r6
 8009e00:	4648      	mov	r0, r9
 8009e02:	920a      	str	r2, [sp, #40]	@ 0x28
 8009e04:	f000 f954 	bl	800a0b0 <_Bfree>
 8009e08:	9b07      	ldr	r3, [sp, #28]
 8009e0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e0c:	9e04      	ldr	r6, [sp, #16]
 8009e0e:	ea42 0103 	orr.w	r1, r2, r3
 8009e12:	9b08      	ldr	r3, [sp, #32]
 8009e14:	4319      	orrs	r1, r3
 8009e16:	d10f      	bne.n	8009e38 <_dtoa_r+0x958>
 8009e18:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009e1c:	d028      	beq.n	8009e70 <_dtoa_r+0x990>
 8009e1e:	9b06      	ldr	r3, [sp, #24]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	dd02      	ble.n	8009e2a <_dtoa_r+0x94a>
 8009e24:	9b02      	ldr	r3, [sp, #8]
 8009e26:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8009e2a:	f88b a000 	strb.w	sl, [fp]
 8009e2e:	e55e      	b.n	80098ee <_dtoa_r+0x40e>
 8009e30:	4628      	mov	r0, r5
 8009e32:	e7bd      	b.n	8009db0 <_dtoa_r+0x8d0>
 8009e34:	2201      	movs	r2, #1
 8009e36:	e7e2      	b.n	8009dfe <_dtoa_r+0x91e>
 8009e38:	9b06      	ldr	r3, [sp, #24]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	db04      	blt.n	8009e48 <_dtoa_r+0x968>
 8009e3e:	9907      	ldr	r1, [sp, #28]
 8009e40:	430b      	orrs	r3, r1
 8009e42:	9908      	ldr	r1, [sp, #32]
 8009e44:	430b      	orrs	r3, r1
 8009e46:	d120      	bne.n	8009e8a <_dtoa_r+0x9aa>
 8009e48:	2a00      	cmp	r2, #0
 8009e4a:	ddee      	ble.n	8009e2a <_dtoa_r+0x94a>
 8009e4c:	9901      	ldr	r1, [sp, #4]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	4648      	mov	r0, r9
 8009e52:	f000 fb3d 	bl	800a4d0 <__lshift>
 8009e56:	4621      	mov	r1, r4
 8009e58:	9001      	str	r0, [sp, #4]
 8009e5a:	f000 fba5 	bl	800a5a8 <__mcmp>
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	dc03      	bgt.n	8009e6a <_dtoa_r+0x98a>
 8009e62:	d1e2      	bne.n	8009e2a <_dtoa_r+0x94a>
 8009e64:	f01a 0f01 	tst.w	sl, #1
 8009e68:	d0df      	beq.n	8009e2a <_dtoa_r+0x94a>
 8009e6a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009e6e:	d1d9      	bne.n	8009e24 <_dtoa_r+0x944>
 8009e70:	2339      	movs	r3, #57	@ 0x39
 8009e72:	f88b 3000 	strb.w	r3, [fp]
 8009e76:	4633      	mov	r3, r6
 8009e78:	461e      	mov	r6, r3
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009e80:	2a39      	cmp	r2, #57	@ 0x39
 8009e82:	d052      	beq.n	8009f2a <_dtoa_r+0xa4a>
 8009e84:	3201      	adds	r2, #1
 8009e86:	701a      	strb	r2, [r3, #0]
 8009e88:	e531      	b.n	80098ee <_dtoa_r+0x40e>
 8009e8a:	2a00      	cmp	r2, #0
 8009e8c:	dd07      	ble.n	8009e9e <_dtoa_r+0x9be>
 8009e8e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009e92:	d0ed      	beq.n	8009e70 <_dtoa_r+0x990>
 8009e94:	f10a 0301 	add.w	r3, sl, #1
 8009e98:	f88b 3000 	strb.w	r3, [fp]
 8009e9c:	e527      	b.n	80098ee <_dtoa_r+0x40e>
 8009e9e:	9b04      	ldr	r3, [sp, #16]
 8009ea0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ea2:	f803 ac01 	strb.w	sl, [r3, #-1]
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d029      	beq.n	8009efe <_dtoa_r+0xa1e>
 8009eaa:	9901      	ldr	r1, [sp, #4]
 8009eac:	2300      	movs	r3, #0
 8009eae:	220a      	movs	r2, #10
 8009eb0:	4648      	mov	r0, r9
 8009eb2:	f000 f91f 	bl	800a0f4 <__multadd>
 8009eb6:	45a8      	cmp	r8, r5
 8009eb8:	9001      	str	r0, [sp, #4]
 8009eba:	f04f 0300 	mov.w	r3, #0
 8009ebe:	f04f 020a 	mov.w	r2, #10
 8009ec2:	4641      	mov	r1, r8
 8009ec4:	4648      	mov	r0, r9
 8009ec6:	d107      	bne.n	8009ed8 <_dtoa_r+0x9f8>
 8009ec8:	f000 f914 	bl	800a0f4 <__multadd>
 8009ecc:	4680      	mov	r8, r0
 8009ece:	4605      	mov	r5, r0
 8009ed0:	9b04      	ldr	r3, [sp, #16]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	9304      	str	r3, [sp, #16]
 8009ed6:	e776      	b.n	8009dc6 <_dtoa_r+0x8e6>
 8009ed8:	f000 f90c 	bl	800a0f4 <__multadd>
 8009edc:	4629      	mov	r1, r5
 8009ede:	4680      	mov	r8, r0
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	220a      	movs	r2, #10
 8009ee4:	4648      	mov	r0, r9
 8009ee6:	f000 f905 	bl	800a0f4 <__multadd>
 8009eea:	4605      	mov	r5, r0
 8009eec:	e7f0      	b.n	8009ed0 <_dtoa_r+0x9f0>
 8009eee:	f1bb 0f00 	cmp.w	fp, #0
 8009ef2:	bfcc      	ite	gt
 8009ef4:	465e      	movgt	r6, fp
 8009ef6:	2601      	movle	r6, #1
 8009ef8:	443e      	add	r6, r7
 8009efa:	f04f 0800 	mov.w	r8, #0
 8009efe:	9901      	ldr	r1, [sp, #4]
 8009f00:	2201      	movs	r2, #1
 8009f02:	4648      	mov	r0, r9
 8009f04:	f000 fae4 	bl	800a4d0 <__lshift>
 8009f08:	4621      	mov	r1, r4
 8009f0a:	9001      	str	r0, [sp, #4]
 8009f0c:	f000 fb4c 	bl	800a5a8 <__mcmp>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	dcb0      	bgt.n	8009e76 <_dtoa_r+0x996>
 8009f14:	d102      	bne.n	8009f1c <_dtoa_r+0xa3c>
 8009f16:	f01a 0f01 	tst.w	sl, #1
 8009f1a:	d1ac      	bne.n	8009e76 <_dtoa_r+0x996>
 8009f1c:	4633      	mov	r3, r6
 8009f1e:	461e      	mov	r6, r3
 8009f20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f24:	2a30      	cmp	r2, #48	@ 0x30
 8009f26:	d0fa      	beq.n	8009f1e <_dtoa_r+0xa3e>
 8009f28:	e4e1      	b.n	80098ee <_dtoa_r+0x40e>
 8009f2a:	429f      	cmp	r7, r3
 8009f2c:	d1a4      	bne.n	8009e78 <_dtoa_r+0x998>
 8009f2e:	9b05      	ldr	r3, [sp, #20]
 8009f30:	3301      	adds	r3, #1
 8009f32:	9305      	str	r3, [sp, #20]
 8009f34:	2331      	movs	r3, #49	@ 0x31
 8009f36:	703b      	strb	r3, [r7, #0]
 8009f38:	e4d9      	b.n	80098ee <_dtoa_r+0x40e>
 8009f3a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009f3c:	4f16      	ldr	r7, [pc, #88]	@ (8009f98 <_dtoa_r+0xab8>)
 8009f3e:	b11b      	cbz	r3, 8009f48 <_dtoa_r+0xa68>
 8009f40:	f107 0308 	add.w	r3, r7, #8
 8009f44:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009f46:	6013      	str	r3, [r2, #0]
 8009f48:	4638      	mov	r0, r7
 8009f4a:	b011      	add	sp, #68	@ 0x44
 8009f4c:	ecbd 8b02 	vpop	{d8}
 8009f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f54:	9b07      	ldr	r3, [sp, #28]
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	f77f ae2c 	ble.w	8009bb4 <_dtoa_r+0x6d4>
 8009f5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f60:	2001      	movs	r0, #1
 8009f62:	e64c      	b.n	8009bfe <_dtoa_r+0x71e>
 8009f64:	f1bb 0f00 	cmp.w	fp, #0
 8009f68:	f77f aed8 	ble.w	8009d1c <_dtoa_r+0x83c>
 8009f6c:	463e      	mov	r6, r7
 8009f6e:	9801      	ldr	r0, [sp, #4]
 8009f70:	4621      	mov	r1, r4
 8009f72:	f7ff fa2c 	bl	80093ce <quorem>
 8009f76:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009f7a:	f806 ab01 	strb.w	sl, [r6], #1
 8009f7e:	1bf2      	subs	r2, r6, r7
 8009f80:	4593      	cmp	fp, r2
 8009f82:	ddb4      	ble.n	8009eee <_dtoa_r+0xa0e>
 8009f84:	9901      	ldr	r1, [sp, #4]
 8009f86:	2300      	movs	r3, #0
 8009f88:	220a      	movs	r2, #10
 8009f8a:	4648      	mov	r0, r9
 8009f8c:	f000 f8b2 	bl	800a0f4 <__multadd>
 8009f90:	9001      	str	r0, [sp, #4]
 8009f92:	e7ec      	b.n	8009f6e <_dtoa_r+0xa8e>
 8009f94:	0800d024 	.word	0x0800d024
 8009f98:	0800cfa8 	.word	0x0800cfa8

08009f9c <_free_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	4605      	mov	r5, r0
 8009fa0:	2900      	cmp	r1, #0
 8009fa2:	d041      	beq.n	800a028 <_free_r+0x8c>
 8009fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fa8:	1f0c      	subs	r4, r1, #4
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	bfb8      	it	lt
 8009fae:	18e4      	addlt	r4, r4, r3
 8009fb0:	f7fe f8a0 	bl	80080f4 <__malloc_lock>
 8009fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800a02c <_free_r+0x90>)
 8009fb6:	6813      	ldr	r3, [r2, #0]
 8009fb8:	b933      	cbnz	r3, 8009fc8 <_free_r+0x2c>
 8009fba:	6063      	str	r3, [r4, #4]
 8009fbc:	6014      	str	r4, [r2, #0]
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fc4:	f7fe b89c 	b.w	8008100 <__malloc_unlock>
 8009fc8:	42a3      	cmp	r3, r4
 8009fca:	d908      	bls.n	8009fde <_free_r+0x42>
 8009fcc:	6820      	ldr	r0, [r4, #0]
 8009fce:	1821      	adds	r1, r4, r0
 8009fd0:	428b      	cmp	r3, r1
 8009fd2:	bf01      	itttt	eq
 8009fd4:	6819      	ldreq	r1, [r3, #0]
 8009fd6:	685b      	ldreq	r3, [r3, #4]
 8009fd8:	1809      	addeq	r1, r1, r0
 8009fda:	6021      	streq	r1, [r4, #0]
 8009fdc:	e7ed      	b.n	8009fba <_free_r+0x1e>
 8009fde:	461a      	mov	r2, r3
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	b10b      	cbz	r3, 8009fe8 <_free_r+0x4c>
 8009fe4:	42a3      	cmp	r3, r4
 8009fe6:	d9fa      	bls.n	8009fde <_free_r+0x42>
 8009fe8:	6811      	ldr	r1, [r2, #0]
 8009fea:	1850      	adds	r0, r2, r1
 8009fec:	42a0      	cmp	r0, r4
 8009fee:	d10b      	bne.n	800a008 <_free_r+0x6c>
 8009ff0:	6820      	ldr	r0, [r4, #0]
 8009ff2:	4401      	add	r1, r0
 8009ff4:	1850      	adds	r0, r2, r1
 8009ff6:	4283      	cmp	r3, r0
 8009ff8:	6011      	str	r1, [r2, #0]
 8009ffa:	d1e0      	bne.n	8009fbe <_free_r+0x22>
 8009ffc:	6818      	ldr	r0, [r3, #0]
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	6053      	str	r3, [r2, #4]
 800a002:	4408      	add	r0, r1
 800a004:	6010      	str	r0, [r2, #0]
 800a006:	e7da      	b.n	8009fbe <_free_r+0x22>
 800a008:	d902      	bls.n	800a010 <_free_r+0x74>
 800a00a:	230c      	movs	r3, #12
 800a00c:	602b      	str	r3, [r5, #0]
 800a00e:	e7d6      	b.n	8009fbe <_free_r+0x22>
 800a010:	6820      	ldr	r0, [r4, #0]
 800a012:	1821      	adds	r1, r4, r0
 800a014:	428b      	cmp	r3, r1
 800a016:	bf04      	itt	eq
 800a018:	6819      	ldreq	r1, [r3, #0]
 800a01a:	685b      	ldreq	r3, [r3, #4]
 800a01c:	6063      	str	r3, [r4, #4]
 800a01e:	bf04      	itt	eq
 800a020:	1809      	addeq	r1, r1, r0
 800a022:	6021      	streq	r1, [r4, #0]
 800a024:	6054      	str	r4, [r2, #4]
 800a026:	e7ca      	b.n	8009fbe <_free_r+0x22>
 800a028:	bd38      	pop	{r3, r4, r5, pc}
 800a02a:	bf00      	nop
 800a02c:	240292cc 	.word	0x240292cc

0800a030 <_Balloc>:
 800a030:	b570      	push	{r4, r5, r6, lr}
 800a032:	69c6      	ldr	r6, [r0, #28]
 800a034:	4604      	mov	r4, r0
 800a036:	460d      	mov	r5, r1
 800a038:	b976      	cbnz	r6, 800a058 <_Balloc+0x28>
 800a03a:	2010      	movs	r0, #16
 800a03c:	f7fd fb98 	bl	8007770 <__wrap_malloc>
 800a040:	4602      	mov	r2, r0
 800a042:	61e0      	str	r0, [r4, #28]
 800a044:	b920      	cbnz	r0, 800a050 <_Balloc+0x20>
 800a046:	4b18      	ldr	r3, [pc, #96]	@ (800a0a8 <_Balloc+0x78>)
 800a048:	4818      	ldr	r0, [pc, #96]	@ (800a0ac <_Balloc+0x7c>)
 800a04a:	216b      	movs	r1, #107	@ 0x6b
 800a04c:	f7fd ff8a 	bl	8007f64 <__assert_func>
 800a050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a054:	6006      	str	r6, [r0, #0]
 800a056:	60c6      	str	r6, [r0, #12]
 800a058:	69e6      	ldr	r6, [r4, #28]
 800a05a:	68f3      	ldr	r3, [r6, #12]
 800a05c:	b183      	cbz	r3, 800a080 <_Balloc+0x50>
 800a05e:	69e3      	ldr	r3, [r4, #28]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a066:	b9b8      	cbnz	r0, 800a098 <_Balloc+0x68>
 800a068:	2101      	movs	r1, #1
 800a06a:	fa01 f605 	lsl.w	r6, r1, r5
 800a06e:	1d72      	adds	r2, r6, #5
 800a070:	0092      	lsls	r2, r2, #2
 800a072:	4620      	mov	r0, r4
 800a074:	f001 feec 	bl	800be50 <_calloc_r>
 800a078:	b160      	cbz	r0, 800a094 <_Balloc+0x64>
 800a07a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a07e:	e00e      	b.n	800a09e <_Balloc+0x6e>
 800a080:	2221      	movs	r2, #33	@ 0x21
 800a082:	2104      	movs	r1, #4
 800a084:	4620      	mov	r0, r4
 800a086:	f001 fee3 	bl	800be50 <_calloc_r>
 800a08a:	69e3      	ldr	r3, [r4, #28]
 800a08c:	60f0      	str	r0, [r6, #12]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d1e4      	bne.n	800a05e <_Balloc+0x2e>
 800a094:	2000      	movs	r0, #0
 800a096:	bd70      	pop	{r4, r5, r6, pc}
 800a098:	6802      	ldr	r2, [r0, #0]
 800a09a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a09e:	2300      	movs	r3, #0
 800a0a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0a4:	e7f7      	b.n	800a096 <_Balloc+0x66>
 800a0a6:	bf00      	nop
 800a0a8:	0800cfb5 	.word	0x0800cfb5
 800a0ac:	0800d035 	.word	0x0800d035

0800a0b0 <_Bfree>:
 800a0b0:	b570      	push	{r4, r5, r6, lr}
 800a0b2:	69c6      	ldr	r6, [r0, #28]
 800a0b4:	4605      	mov	r5, r0
 800a0b6:	460c      	mov	r4, r1
 800a0b8:	b976      	cbnz	r6, 800a0d8 <_Bfree+0x28>
 800a0ba:	2010      	movs	r0, #16
 800a0bc:	f7fd fb58 	bl	8007770 <__wrap_malloc>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	61e8      	str	r0, [r5, #28]
 800a0c4:	b920      	cbnz	r0, 800a0d0 <_Bfree+0x20>
 800a0c6:	4b09      	ldr	r3, [pc, #36]	@ (800a0ec <_Bfree+0x3c>)
 800a0c8:	4809      	ldr	r0, [pc, #36]	@ (800a0f0 <_Bfree+0x40>)
 800a0ca:	218f      	movs	r1, #143	@ 0x8f
 800a0cc:	f7fd ff4a 	bl	8007f64 <__assert_func>
 800a0d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0d4:	6006      	str	r6, [r0, #0]
 800a0d6:	60c6      	str	r6, [r0, #12]
 800a0d8:	b13c      	cbz	r4, 800a0ea <_Bfree+0x3a>
 800a0da:	69eb      	ldr	r3, [r5, #28]
 800a0dc:	6862      	ldr	r2, [r4, #4]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0e4:	6021      	str	r1, [r4, #0]
 800a0e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0ea:	bd70      	pop	{r4, r5, r6, pc}
 800a0ec:	0800cfb5 	.word	0x0800cfb5
 800a0f0:	0800d035 	.word	0x0800d035

0800a0f4 <__multadd>:
 800a0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f8:	690d      	ldr	r5, [r1, #16]
 800a0fa:	4607      	mov	r7, r0
 800a0fc:	460c      	mov	r4, r1
 800a0fe:	461e      	mov	r6, r3
 800a100:	f101 0c14 	add.w	ip, r1, #20
 800a104:	2000      	movs	r0, #0
 800a106:	f8dc 3000 	ldr.w	r3, [ip]
 800a10a:	b299      	uxth	r1, r3
 800a10c:	fb02 6101 	mla	r1, r2, r1, r6
 800a110:	0c1e      	lsrs	r6, r3, #16
 800a112:	0c0b      	lsrs	r3, r1, #16
 800a114:	fb02 3306 	mla	r3, r2, r6, r3
 800a118:	b289      	uxth	r1, r1
 800a11a:	3001      	adds	r0, #1
 800a11c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a120:	4285      	cmp	r5, r0
 800a122:	f84c 1b04 	str.w	r1, [ip], #4
 800a126:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a12a:	dcec      	bgt.n	800a106 <__multadd+0x12>
 800a12c:	b30e      	cbz	r6, 800a172 <__multadd+0x7e>
 800a12e:	68a3      	ldr	r3, [r4, #8]
 800a130:	42ab      	cmp	r3, r5
 800a132:	dc19      	bgt.n	800a168 <__multadd+0x74>
 800a134:	6861      	ldr	r1, [r4, #4]
 800a136:	4638      	mov	r0, r7
 800a138:	3101      	adds	r1, #1
 800a13a:	f7ff ff79 	bl	800a030 <_Balloc>
 800a13e:	4680      	mov	r8, r0
 800a140:	b928      	cbnz	r0, 800a14e <__multadd+0x5a>
 800a142:	4602      	mov	r2, r0
 800a144:	4b0c      	ldr	r3, [pc, #48]	@ (800a178 <__multadd+0x84>)
 800a146:	480d      	ldr	r0, [pc, #52]	@ (800a17c <__multadd+0x88>)
 800a148:	21ba      	movs	r1, #186	@ 0xba
 800a14a:	f7fd ff0b 	bl	8007f64 <__assert_func>
 800a14e:	6922      	ldr	r2, [r4, #16]
 800a150:	3202      	adds	r2, #2
 800a152:	f104 010c 	add.w	r1, r4, #12
 800a156:	0092      	lsls	r2, r2, #2
 800a158:	300c      	adds	r0, #12
 800a15a:	f7ff f91c 	bl	8009396 <memcpy>
 800a15e:	4621      	mov	r1, r4
 800a160:	4638      	mov	r0, r7
 800a162:	f7ff ffa5 	bl	800a0b0 <_Bfree>
 800a166:	4644      	mov	r4, r8
 800a168:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a16c:	3501      	adds	r5, #1
 800a16e:	615e      	str	r6, [r3, #20]
 800a170:	6125      	str	r5, [r4, #16]
 800a172:	4620      	mov	r0, r4
 800a174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a178:	0800d024 	.word	0x0800d024
 800a17c:	0800d035 	.word	0x0800d035

0800a180 <__s2b>:
 800a180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a184:	460c      	mov	r4, r1
 800a186:	4615      	mov	r5, r2
 800a188:	461f      	mov	r7, r3
 800a18a:	2209      	movs	r2, #9
 800a18c:	3308      	adds	r3, #8
 800a18e:	4606      	mov	r6, r0
 800a190:	fb93 f3f2 	sdiv	r3, r3, r2
 800a194:	2100      	movs	r1, #0
 800a196:	2201      	movs	r2, #1
 800a198:	429a      	cmp	r2, r3
 800a19a:	db09      	blt.n	800a1b0 <__s2b+0x30>
 800a19c:	4630      	mov	r0, r6
 800a19e:	f7ff ff47 	bl	800a030 <_Balloc>
 800a1a2:	b940      	cbnz	r0, 800a1b6 <__s2b+0x36>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	4b19      	ldr	r3, [pc, #100]	@ (800a20c <__s2b+0x8c>)
 800a1a8:	4819      	ldr	r0, [pc, #100]	@ (800a210 <__s2b+0x90>)
 800a1aa:	21d3      	movs	r1, #211	@ 0xd3
 800a1ac:	f7fd feda 	bl	8007f64 <__assert_func>
 800a1b0:	0052      	lsls	r2, r2, #1
 800a1b2:	3101      	adds	r1, #1
 800a1b4:	e7f0      	b.n	800a198 <__s2b+0x18>
 800a1b6:	9b08      	ldr	r3, [sp, #32]
 800a1b8:	6143      	str	r3, [r0, #20]
 800a1ba:	2d09      	cmp	r5, #9
 800a1bc:	f04f 0301 	mov.w	r3, #1
 800a1c0:	6103      	str	r3, [r0, #16]
 800a1c2:	dd16      	ble.n	800a1f2 <__s2b+0x72>
 800a1c4:	f104 0909 	add.w	r9, r4, #9
 800a1c8:	46c8      	mov	r8, r9
 800a1ca:	442c      	add	r4, r5
 800a1cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a1d0:	4601      	mov	r1, r0
 800a1d2:	3b30      	subs	r3, #48	@ 0x30
 800a1d4:	220a      	movs	r2, #10
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	f7ff ff8c 	bl	800a0f4 <__multadd>
 800a1dc:	45a0      	cmp	r8, r4
 800a1de:	d1f5      	bne.n	800a1cc <__s2b+0x4c>
 800a1e0:	f1a5 0408 	sub.w	r4, r5, #8
 800a1e4:	444c      	add	r4, r9
 800a1e6:	1b2d      	subs	r5, r5, r4
 800a1e8:	1963      	adds	r3, r4, r5
 800a1ea:	42bb      	cmp	r3, r7
 800a1ec:	db04      	blt.n	800a1f8 <__s2b+0x78>
 800a1ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1f2:	340a      	adds	r4, #10
 800a1f4:	2509      	movs	r5, #9
 800a1f6:	e7f6      	b.n	800a1e6 <__s2b+0x66>
 800a1f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a1fc:	4601      	mov	r1, r0
 800a1fe:	3b30      	subs	r3, #48	@ 0x30
 800a200:	220a      	movs	r2, #10
 800a202:	4630      	mov	r0, r6
 800a204:	f7ff ff76 	bl	800a0f4 <__multadd>
 800a208:	e7ee      	b.n	800a1e8 <__s2b+0x68>
 800a20a:	bf00      	nop
 800a20c:	0800d024 	.word	0x0800d024
 800a210:	0800d035 	.word	0x0800d035

0800a214 <__hi0bits>:
 800a214:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a218:	4603      	mov	r3, r0
 800a21a:	bf36      	itet	cc
 800a21c:	0403      	lslcc	r3, r0, #16
 800a21e:	2000      	movcs	r0, #0
 800a220:	2010      	movcc	r0, #16
 800a222:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a226:	bf3c      	itt	cc
 800a228:	021b      	lslcc	r3, r3, #8
 800a22a:	3008      	addcc	r0, #8
 800a22c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a230:	bf3c      	itt	cc
 800a232:	011b      	lslcc	r3, r3, #4
 800a234:	3004      	addcc	r0, #4
 800a236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a23a:	bf3c      	itt	cc
 800a23c:	009b      	lslcc	r3, r3, #2
 800a23e:	3002      	addcc	r0, #2
 800a240:	2b00      	cmp	r3, #0
 800a242:	db05      	blt.n	800a250 <__hi0bits+0x3c>
 800a244:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a248:	f100 0001 	add.w	r0, r0, #1
 800a24c:	bf08      	it	eq
 800a24e:	2020      	moveq	r0, #32
 800a250:	4770      	bx	lr

0800a252 <__lo0bits>:
 800a252:	6803      	ldr	r3, [r0, #0]
 800a254:	4602      	mov	r2, r0
 800a256:	f013 0007 	ands.w	r0, r3, #7
 800a25a:	d00b      	beq.n	800a274 <__lo0bits+0x22>
 800a25c:	07d9      	lsls	r1, r3, #31
 800a25e:	d421      	bmi.n	800a2a4 <__lo0bits+0x52>
 800a260:	0798      	lsls	r0, r3, #30
 800a262:	bf49      	itett	mi
 800a264:	085b      	lsrmi	r3, r3, #1
 800a266:	089b      	lsrpl	r3, r3, #2
 800a268:	2001      	movmi	r0, #1
 800a26a:	6013      	strmi	r3, [r2, #0]
 800a26c:	bf5c      	itt	pl
 800a26e:	6013      	strpl	r3, [r2, #0]
 800a270:	2002      	movpl	r0, #2
 800a272:	4770      	bx	lr
 800a274:	b299      	uxth	r1, r3
 800a276:	b909      	cbnz	r1, 800a27c <__lo0bits+0x2a>
 800a278:	0c1b      	lsrs	r3, r3, #16
 800a27a:	2010      	movs	r0, #16
 800a27c:	b2d9      	uxtb	r1, r3
 800a27e:	b909      	cbnz	r1, 800a284 <__lo0bits+0x32>
 800a280:	3008      	adds	r0, #8
 800a282:	0a1b      	lsrs	r3, r3, #8
 800a284:	0719      	lsls	r1, r3, #28
 800a286:	bf04      	itt	eq
 800a288:	091b      	lsreq	r3, r3, #4
 800a28a:	3004      	addeq	r0, #4
 800a28c:	0799      	lsls	r1, r3, #30
 800a28e:	bf04      	itt	eq
 800a290:	089b      	lsreq	r3, r3, #2
 800a292:	3002      	addeq	r0, #2
 800a294:	07d9      	lsls	r1, r3, #31
 800a296:	d403      	bmi.n	800a2a0 <__lo0bits+0x4e>
 800a298:	085b      	lsrs	r3, r3, #1
 800a29a:	f100 0001 	add.w	r0, r0, #1
 800a29e:	d003      	beq.n	800a2a8 <__lo0bits+0x56>
 800a2a0:	6013      	str	r3, [r2, #0]
 800a2a2:	4770      	bx	lr
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	4770      	bx	lr
 800a2a8:	2020      	movs	r0, #32
 800a2aa:	4770      	bx	lr

0800a2ac <__i2b>:
 800a2ac:	b510      	push	{r4, lr}
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	f7ff febd 	bl	800a030 <_Balloc>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	b928      	cbnz	r0, 800a2c6 <__i2b+0x1a>
 800a2ba:	4b05      	ldr	r3, [pc, #20]	@ (800a2d0 <__i2b+0x24>)
 800a2bc:	4805      	ldr	r0, [pc, #20]	@ (800a2d4 <__i2b+0x28>)
 800a2be:	f240 1145 	movw	r1, #325	@ 0x145
 800a2c2:	f7fd fe4f 	bl	8007f64 <__assert_func>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	6144      	str	r4, [r0, #20]
 800a2ca:	6103      	str	r3, [r0, #16]
 800a2cc:	bd10      	pop	{r4, pc}
 800a2ce:	bf00      	nop
 800a2d0:	0800d024 	.word	0x0800d024
 800a2d4:	0800d035 	.word	0x0800d035

0800a2d8 <__multiply>:
 800a2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2dc:	4617      	mov	r7, r2
 800a2de:	690a      	ldr	r2, [r1, #16]
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	bfa8      	it	ge
 800a2e6:	463b      	movge	r3, r7
 800a2e8:	4689      	mov	r9, r1
 800a2ea:	bfa4      	itt	ge
 800a2ec:	460f      	movge	r7, r1
 800a2ee:	4699      	movge	r9, r3
 800a2f0:	693d      	ldr	r5, [r7, #16]
 800a2f2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	6879      	ldr	r1, [r7, #4]
 800a2fa:	eb05 060a 	add.w	r6, r5, sl
 800a2fe:	42b3      	cmp	r3, r6
 800a300:	b085      	sub	sp, #20
 800a302:	bfb8      	it	lt
 800a304:	3101      	addlt	r1, #1
 800a306:	f7ff fe93 	bl	800a030 <_Balloc>
 800a30a:	b930      	cbnz	r0, 800a31a <__multiply+0x42>
 800a30c:	4602      	mov	r2, r0
 800a30e:	4b41      	ldr	r3, [pc, #260]	@ (800a414 <__multiply+0x13c>)
 800a310:	4841      	ldr	r0, [pc, #260]	@ (800a418 <__multiply+0x140>)
 800a312:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a316:	f7fd fe25 	bl	8007f64 <__assert_func>
 800a31a:	f100 0414 	add.w	r4, r0, #20
 800a31e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a322:	4623      	mov	r3, r4
 800a324:	2200      	movs	r2, #0
 800a326:	4573      	cmp	r3, lr
 800a328:	d320      	bcc.n	800a36c <__multiply+0x94>
 800a32a:	f107 0814 	add.w	r8, r7, #20
 800a32e:	f109 0114 	add.w	r1, r9, #20
 800a332:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a336:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a33a:	9302      	str	r3, [sp, #8]
 800a33c:	1beb      	subs	r3, r5, r7
 800a33e:	3b15      	subs	r3, #21
 800a340:	f023 0303 	bic.w	r3, r3, #3
 800a344:	3304      	adds	r3, #4
 800a346:	3715      	adds	r7, #21
 800a348:	42bd      	cmp	r5, r7
 800a34a:	bf38      	it	cc
 800a34c:	2304      	movcc	r3, #4
 800a34e:	9301      	str	r3, [sp, #4]
 800a350:	9b02      	ldr	r3, [sp, #8]
 800a352:	9103      	str	r1, [sp, #12]
 800a354:	428b      	cmp	r3, r1
 800a356:	d80c      	bhi.n	800a372 <__multiply+0x9a>
 800a358:	2e00      	cmp	r6, #0
 800a35a:	dd03      	ble.n	800a364 <__multiply+0x8c>
 800a35c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a360:	2b00      	cmp	r3, #0
 800a362:	d055      	beq.n	800a410 <__multiply+0x138>
 800a364:	6106      	str	r6, [r0, #16]
 800a366:	b005      	add	sp, #20
 800a368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a36c:	f843 2b04 	str.w	r2, [r3], #4
 800a370:	e7d9      	b.n	800a326 <__multiply+0x4e>
 800a372:	f8b1 a000 	ldrh.w	sl, [r1]
 800a376:	f1ba 0f00 	cmp.w	sl, #0
 800a37a:	d01f      	beq.n	800a3bc <__multiply+0xe4>
 800a37c:	46c4      	mov	ip, r8
 800a37e:	46a1      	mov	r9, r4
 800a380:	2700      	movs	r7, #0
 800a382:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a386:	f8d9 3000 	ldr.w	r3, [r9]
 800a38a:	fa1f fb82 	uxth.w	fp, r2
 800a38e:	b29b      	uxth	r3, r3
 800a390:	fb0a 330b 	mla	r3, sl, fp, r3
 800a394:	443b      	add	r3, r7
 800a396:	f8d9 7000 	ldr.w	r7, [r9]
 800a39a:	0c12      	lsrs	r2, r2, #16
 800a39c:	0c3f      	lsrs	r7, r7, #16
 800a39e:	fb0a 7202 	mla	r2, sl, r2, r7
 800a3a2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3ac:	4565      	cmp	r5, ip
 800a3ae:	f849 3b04 	str.w	r3, [r9], #4
 800a3b2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a3b6:	d8e4      	bhi.n	800a382 <__multiply+0xaa>
 800a3b8:	9b01      	ldr	r3, [sp, #4]
 800a3ba:	50e7      	str	r7, [r4, r3]
 800a3bc:	9b03      	ldr	r3, [sp, #12]
 800a3be:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a3c2:	3104      	adds	r1, #4
 800a3c4:	f1b9 0f00 	cmp.w	r9, #0
 800a3c8:	d020      	beq.n	800a40c <__multiply+0x134>
 800a3ca:	6823      	ldr	r3, [r4, #0]
 800a3cc:	4647      	mov	r7, r8
 800a3ce:	46a4      	mov	ip, r4
 800a3d0:	f04f 0a00 	mov.w	sl, #0
 800a3d4:	f8b7 b000 	ldrh.w	fp, [r7]
 800a3d8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a3dc:	fb09 220b 	mla	r2, r9, fp, r2
 800a3e0:	4452      	add	r2, sl
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3e8:	f84c 3b04 	str.w	r3, [ip], #4
 800a3ec:	f857 3b04 	ldr.w	r3, [r7], #4
 800a3f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3f4:	f8bc 3000 	ldrh.w	r3, [ip]
 800a3f8:	fb09 330a 	mla	r3, r9, sl, r3
 800a3fc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a400:	42bd      	cmp	r5, r7
 800a402:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a406:	d8e5      	bhi.n	800a3d4 <__multiply+0xfc>
 800a408:	9a01      	ldr	r2, [sp, #4]
 800a40a:	50a3      	str	r3, [r4, r2]
 800a40c:	3404      	adds	r4, #4
 800a40e:	e79f      	b.n	800a350 <__multiply+0x78>
 800a410:	3e01      	subs	r6, #1
 800a412:	e7a1      	b.n	800a358 <__multiply+0x80>
 800a414:	0800d024 	.word	0x0800d024
 800a418:	0800d035 	.word	0x0800d035

0800a41c <__pow5mult>:
 800a41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a420:	4615      	mov	r5, r2
 800a422:	f012 0203 	ands.w	r2, r2, #3
 800a426:	4607      	mov	r7, r0
 800a428:	460e      	mov	r6, r1
 800a42a:	d007      	beq.n	800a43c <__pow5mult+0x20>
 800a42c:	4c25      	ldr	r4, [pc, #148]	@ (800a4c4 <__pow5mult+0xa8>)
 800a42e:	3a01      	subs	r2, #1
 800a430:	2300      	movs	r3, #0
 800a432:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a436:	f7ff fe5d 	bl	800a0f4 <__multadd>
 800a43a:	4606      	mov	r6, r0
 800a43c:	10ad      	asrs	r5, r5, #2
 800a43e:	d03d      	beq.n	800a4bc <__pow5mult+0xa0>
 800a440:	69fc      	ldr	r4, [r7, #28]
 800a442:	b97c      	cbnz	r4, 800a464 <__pow5mult+0x48>
 800a444:	2010      	movs	r0, #16
 800a446:	f7fd f993 	bl	8007770 <__wrap_malloc>
 800a44a:	4602      	mov	r2, r0
 800a44c:	61f8      	str	r0, [r7, #28]
 800a44e:	b928      	cbnz	r0, 800a45c <__pow5mult+0x40>
 800a450:	4b1d      	ldr	r3, [pc, #116]	@ (800a4c8 <__pow5mult+0xac>)
 800a452:	481e      	ldr	r0, [pc, #120]	@ (800a4cc <__pow5mult+0xb0>)
 800a454:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a458:	f7fd fd84 	bl	8007f64 <__assert_func>
 800a45c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a460:	6004      	str	r4, [r0, #0]
 800a462:	60c4      	str	r4, [r0, #12]
 800a464:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a468:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a46c:	b94c      	cbnz	r4, 800a482 <__pow5mult+0x66>
 800a46e:	f240 2171 	movw	r1, #625	@ 0x271
 800a472:	4638      	mov	r0, r7
 800a474:	f7ff ff1a 	bl	800a2ac <__i2b>
 800a478:	2300      	movs	r3, #0
 800a47a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a47e:	4604      	mov	r4, r0
 800a480:	6003      	str	r3, [r0, #0]
 800a482:	f04f 0900 	mov.w	r9, #0
 800a486:	07eb      	lsls	r3, r5, #31
 800a488:	d50a      	bpl.n	800a4a0 <__pow5mult+0x84>
 800a48a:	4631      	mov	r1, r6
 800a48c:	4622      	mov	r2, r4
 800a48e:	4638      	mov	r0, r7
 800a490:	f7ff ff22 	bl	800a2d8 <__multiply>
 800a494:	4631      	mov	r1, r6
 800a496:	4680      	mov	r8, r0
 800a498:	4638      	mov	r0, r7
 800a49a:	f7ff fe09 	bl	800a0b0 <_Bfree>
 800a49e:	4646      	mov	r6, r8
 800a4a0:	106d      	asrs	r5, r5, #1
 800a4a2:	d00b      	beq.n	800a4bc <__pow5mult+0xa0>
 800a4a4:	6820      	ldr	r0, [r4, #0]
 800a4a6:	b938      	cbnz	r0, 800a4b8 <__pow5mult+0x9c>
 800a4a8:	4622      	mov	r2, r4
 800a4aa:	4621      	mov	r1, r4
 800a4ac:	4638      	mov	r0, r7
 800a4ae:	f7ff ff13 	bl	800a2d8 <__multiply>
 800a4b2:	6020      	str	r0, [r4, #0]
 800a4b4:	f8c0 9000 	str.w	r9, [r0]
 800a4b8:	4604      	mov	r4, r0
 800a4ba:	e7e4      	b.n	800a486 <__pow5mult+0x6a>
 800a4bc:	4630      	mov	r0, r6
 800a4be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4c2:	bf00      	nop
 800a4c4:	0800d2e4 	.word	0x0800d2e4
 800a4c8:	0800cfb5 	.word	0x0800cfb5
 800a4cc:	0800d035 	.word	0x0800d035

0800a4d0 <__lshift>:
 800a4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4d4:	460c      	mov	r4, r1
 800a4d6:	6849      	ldr	r1, [r1, #4]
 800a4d8:	6923      	ldr	r3, [r4, #16]
 800a4da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4de:	68a3      	ldr	r3, [r4, #8]
 800a4e0:	4607      	mov	r7, r0
 800a4e2:	4691      	mov	r9, r2
 800a4e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4e8:	f108 0601 	add.w	r6, r8, #1
 800a4ec:	42b3      	cmp	r3, r6
 800a4ee:	db0b      	blt.n	800a508 <__lshift+0x38>
 800a4f0:	4638      	mov	r0, r7
 800a4f2:	f7ff fd9d 	bl	800a030 <_Balloc>
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	b948      	cbnz	r0, 800a50e <__lshift+0x3e>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	4b28      	ldr	r3, [pc, #160]	@ (800a5a0 <__lshift+0xd0>)
 800a4fe:	4829      	ldr	r0, [pc, #164]	@ (800a5a4 <__lshift+0xd4>)
 800a500:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a504:	f7fd fd2e 	bl	8007f64 <__assert_func>
 800a508:	3101      	adds	r1, #1
 800a50a:	005b      	lsls	r3, r3, #1
 800a50c:	e7ee      	b.n	800a4ec <__lshift+0x1c>
 800a50e:	2300      	movs	r3, #0
 800a510:	f100 0114 	add.w	r1, r0, #20
 800a514:	f100 0210 	add.w	r2, r0, #16
 800a518:	4618      	mov	r0, r3
 800a51a:	4553      	cmp	r3, sl
 800a51c:	db33      	blt.n	800a586 <__lshift+0xb6>
 800a51e:	6920      	ldr	r0, [r4, #16]
 800a520:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a524:	f104 0314 	add.w	r3, r4, #20
 800a528:	f019 091f 	ands.w	r9, r9, #31
 800a52c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a530:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a534:	d02b      	beq.n	800a58e <__lshift+0xbe>
 800a536:	f1c9 0e20 	rsb	lr, r9, #32
 800a53a:	468a      	mov	sl, r1
 800a53c:	2200      	movs	r2, #0
 800a53e:	6818      	ldr	r0, [r3, #0]
 800a540:	fa00 f009 	lsl.w	r0, r0, r9
 800a544:	4310      	orrs	r0, r2
 800a546:	f84a 0b04 	str.w	r0, [sl], #4
 800a54a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a54e:	459c      	cmp	ip, r3
 800a550:	fa22 f20e 	lsr.w	r2, r2, lr
 800a554:	d8f3      	bhi.n	800a53e <__lshift+0x6e>
 800a556:	ebac 0304 	sub.w	r3, ip, r4
 800a55a:	3b15      	subs	r3, #21
 800a55c:	f023 0303 	bic.w	r3, r3, #3
 800a560:	3304      	adds	r3, #4
 800a562:	f104 0015 	add.w	r0, r4, #21
 800a566:	4560      	cmp	r0, ip
 800a568:	bf88      	it	hi
 800a56a:	2304      	movhi	r3, #4
 800a56c:	50ca      	str	r2, [r1, r3]
 800a56e:	b10a      	cbz	r2, 800a574 <__lshift+0xa4>
 800a570:	f108 0602 	add.w	r6, r8, #2
 800a574:	3e01      	subs	r6, #1
 800a576:	4638      	mov	r0, r7
 800a578:	612e      	str	r6, [r5, #16]
 800a57a:	4621      	mov	r1, r4
 800a57c:	f7ff fd98 	bl	800a0b0 <_Bfree>
 800a580:	4628      	mov	r0, r5
 800a582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a586:	f842 0f04 	str.w	r0, [r2, #4]!
 800a58a:	3301      	adds	r3, #1
 800a58c:	e7c5      	b.n	800a51a <__lshift+0x4a>
 800a58e:	3904      	subs	r1, #4
 800a590:	f853 2b04 	ldr.w	r2, [r3], #4
 800a594:	f841 2f04 	str.w	r2, [r1, #4]!
 800a598:	459c      	cmp	ip, r3
 800a59a:	d8f9      	bhi.n	800a590 <__lshift+0xc0>
 800a59c:	e7ea      	b.n	800a574 <__lshift+0xa4>
 800a59e:	bf00      	nop
 800a5a0:	0800d024 	.word	0x0800d024
 800a5a4:	0800d035 	.word	0x0800d035

0800a5a8 <__mcmp>:
 800a5a8:	690a      	ldr	r2, [r1, #16]
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	6900      	ldr	r0, [r0, #16]
 800a5ae:	1a80      	subs	r0, r0, r2
 800a5b0:	b530      	push	{r4, r5, lr}
 800a5b2:	d10e      	bne.n	800a5d2 <__mcmp+0x2a>
 800a5b4:	3314      	adds	r3, #20
 800a5b6:	3114      	adds	r1, #20
 800a5b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a5bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a5c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a5c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a5c8:	4295      	cmp	r5, r2
 800a5ca:	d003      	beq.n	800a5d4 <__mcmp+0x2c>
 800a5cc:	d205      	bcs.n	800a5da <__mcmp+0x32>
 800a5ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d2:	bd30      	pop	{r4, r5, pc}
 800a5d4:	42a3      	cmp	r3, r4
 800a5d6:	d3f3      	bcc.n	800a5c0 <__mcmp+0x18>
 800a5d8:	e7fb      	b.n	800a5d2 <__mcmp+0x2a>
 800a5da:	2001      	movs	r0, #1
 800a5dc:	e7f9      	b.n	800a5d2 <__mcmp+0x2a>
	...

0800a5e0 <__mdiff>:
 800a5e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e4:	4689      	mov	r9, r1
 800a5e6:	4606      	mov	r6, r0
 800a5e8:	4611      	mov	r1, r2
 800a5ea:	4648      	mov	r0, r9
 800a5ec:	4614      	mov	r4, r2
 800a5ee:	f7ff ffdb 	bl	800a5a8 <__mcmp>
 800a5f2:	1e05      	subs	r5, r0, #0
 800a5f4:	d112      	bne.n	800a61c <__mdiff+0x3c>
 800a5f6:	4629      	mov	r1, r5
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	f7ff fd19 	bl	800a030 <_Balloc>
 800a5fe:	4602      	mov	r2, r0
 800a600:	b928      	cbnz	r0, 800a60e <__mdiff+0x2e>
 800a602:	4b3f      	ldr	r3, [pc, #252]	@ (800a700 <__mdiff+0x120>)
 800a604:	f240 2137 	movw	r1, #567	@ 0x237
 800a608:	483e      	ldr	r0, [pc, #248]	@ (800a704 <__mdiff+0x124>)
 800a60a:	f7fd fcab 	bl	8007f64 <__assert_func>
 800a60e:	2301      	movs	r3, #1
 800a610:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a614:	4610      	mov	r0, r2
 800a616:	b003      	add	sp, #12
 800a618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a61c:	bfbc      	itt	lt
 800a61e:	464b      	movlt	r3, r9
 800a620:	46a1      	movlt	r9, r4
 800a622:	4630      	mov	r0, r6
 800a624:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a628:	bfba      	itte	lt
 800a62a:	461c      	movlt	r4, r3
 800a62c:	2501      	movlt	r5, #1
 800a62e:	2500      	movge	r5, #0
 800a630:	f7ff fcfe 	bl	800a030 <_Balloc>
 800a634:	4602      	mov	r2, r0
 800a636:	b918      	cbnz	r0, 800a640 <__mdiff+0x60>
 800a638:	4b31      	ldr	r3, [pc, #196]	@ (800a700 <__mdiff+0x120>)
 800a63a:	f240 2145 	movw	r1, #581	@ 0x245
 800a63e:	e7e3      	b.n	800a608 <__mdiff+0x28>
 800a640:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a644:	6926      	ldr	r6, [r4, #16]
 800a646:	60c5      	str	r5, [r0, #12]
 800a648:	f109 0310 	add.w	r3, r9, #16
 800a64c:	f109 0514 	add.w	r5, r9, #20
 800a650:	f104 0e14 	add.w	lr, r4, #20
 800a654:	f100 0b14 	add.w	fp, r0, #20
 800a658:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a65c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a660:	9301      	str	r3, [sp, #4]
 800a662:	46d9      	mov	r9, fp
 800a664:	f04f 0c00 	mov.w	ip, #0
 800a668:	9b01      	ldr	r3, [sp, #4]
 800a66a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a66e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a672:	9301      	str	r3, [sp, #4]
 800a674:	fa1f f38a 	uxth.w	r3, sl
 800a678:	4619      	mov	r1, r3
 800a67a:	b283      	uxth	r3, r0
 800a67c:	1acb      	subs	r3, r1, r3
 800a67e:	0c00      	lsrs	r0, r0, #16
 800a680:	4463      	add	r3, ip
 800a682:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a686:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a690:	4576      	cmp	r6, lr
 800a692:	f849 3b04 	str.w	r3, [r9], #4
 800a696:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a69a:	d8e5      	bhi.n	800a668 <__mdiff+0x88>
 800a69c:	1b33      	subs	r3, r6, r4
 800a69e:	3b15      	subs	r3, #21
 800a6a0:	f023 0303 	bic.w	r3, r3, #3
 800a6a4:	3415      	adds	r4, #21
 800a6a6:	3304      	adds	r3, #4
 800a6a8:	42a6      	cmp	r6, r4
 800a6aa:	bf38      	it	cc
 800a6ac:	2304      	movcc	r3, #4
 800a6ae:	441d      	add	r5, r3
 800a6b0:	445b      	add	r3, fp
 800a6b2:	461e      	mov	r6, r3
 800a6b4:	462c      	mov	r4, r5
 800a6b6:	4544      	cmp	r4, r8
 800a6b8:	d30e      	bcc.n	800a6d8 <__mdiff+0xf8>
 800a6ba:	f108 0103 	add.w	r1, r8, #3
 800a6be:	1b49      	subs	r1, r1, r5
 800a6c0:	f021 0103 	bic.w	r1, r1, #3
 800a6c4:	3d03      	subs	r5, #3
 800a6c6:	45a8      	cmp	r8, r5
 800a6c8:	bf38      	it	cc
 800a6ca:	2100      	movcc	r1, #0
 800a6cc:	440b      	add	r3, r1
 800a6ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6d2:	b191      	cbz	r1, 800a6fa <__mdiff+0x11a>
 800a6d4:	6117      	str	r7, [r2, #16]
 800a6d6:	e79d      	b.n	800a614 <__mdiff+0x34>
 800a6d8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a6dc:	46e6      	mov	lr, ip
 800a6de:	0c08      	lsrs	r0, r1, #16
 800a6e0:	fa1c fc81 	uxtah	ip, ip, r1
 800a6e4:	4471      	add	r1, lr
 800a6e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a6ea:	b289      	uxth	r1, r1
 800a6ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a6f0:	f846 1b04 	str.w	r1, [r6], #4
 800a6f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6f8:	e7dd      	b.n	800a6b6 <__mdiff+0xd6>
 800a6fa:	3f01      	subs	r7, #1
 800a6fc:	e7e7      	b.n	800a6ce <__mdiff+0xee>
 800a6fe:	bf00      	nop
 800a700:	0800d024 	.word	0x0800d024
 800a704:	0800d035 	.word	0x0800d035

0800a708 <__ulp>:
 800a708:	b082      	sub	sp, #8
 800a70a:	ed8d 0b00 	vstr	d0, [sp]
 800a70e:	9a01      	ldr	r2, [sp, #4]
 800a710:	4b0f      	ldr	r3, [pc, #60]	@ (800a750 <__ulp+0x48>)
 800a712:	4013      	ands	r3, r2
 800a714:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a718:	2b00      	cmp	r3, #0
 800a71a:	dc08      	bgt.n	800a72e <__ulp+0x26>
 800a71c:	425b      	negs	r3, r3
 800a71e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a722:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a726:	da04      	bge.n	800a732 <__ulp+0x2a>
 800a728:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a72c:	4113      	asrs	r3, r2
 800a72e:	2200      	movs	r2, #0
 800a730:	e008      	b.n	800a744 <__ulp+0x3c>
 800a732:	f1a2 0314 	sub.w	r3, r2, #20
 800a736:	2b1e      	cmp	r3, #30
 800a738:	bfda      	itte	le
 800a73a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a73e:	40da      	lsrle	r2, r3
 800a740:	2201      	movgt	r2, #1
 800a742:	2300      	movs	r3, #0
 800a744:	4619      	mov	r1, r3
 800a746:	4610      	mov	r0, r2
 800a748:	ec41 0b10 	vmov	d0, r0, r1
 800a74c:	b002      	add	sp, #8
 800a74e:	4770      	bx	lr
 800a750:	7ff00000 	.word	0x7ff00000

0800a754 <__b2d>:
 800a754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a758:	6906      	ldr	r6, [r0, #16]
 800a75a:	f100 0814 	add.w	r8, r0, #20
 800a75e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a762:	1f37      	subs	r7, r6, #4
 800a764:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a768:	4610      	mov	r0, r2
 800a76a:	f7ff fd53 	bl	800a214 <__hi0bits>
 800a76e:	f1c0 0320 	rsb	r3, r0, #32
 800a772:	280a      	cmp	r0, #10
 800a774:	600b      	str	r3, [r1, #0]
 800a776:	491b      	ldr	r1, [pc, #108]	@ (800a7e4 <__b2d+0x90>)
 800a778:	dc15      	bgt.n	800a7a6 <__b2d+0x52>
 800a77a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a77e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a782:	45b8      	cmp	r8, r7
 800a784:	ea43 0501 	orr.w	r5, r3, r1
 800a788:	bf34      	ite	cc
 800a78a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a78e:	2300      	movcs	r3, #0
 800a790:	3015      	adds	r0, #21
 800a792:	fa02 f000 	lsl.w	r0, r2, r0
 800a796:	fa23 f30c 	lsr.w	r3, r3, ip
 800a79a:	4303      	orrs	r3, r0
 800a79c:	461c      	mov	r4, r3
 800a79e:	ec45 4b10 	vmov	d0, r4, r5
 800a7a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7a6:	45b8      	cmp	r8, r7
 800a7a8:	bf3a      	itte	cc
 800a7aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a7ae:	f1a6 0708 	subcc.w	r7, r6, #8
 800a7b2:	2300      	movcs	r3, #0
 800a7b4:	380b      	subs	r0, #11
 800a7b6:	d012      	beq.n	800a7de <__b2d+0x8a>
 800a7b8:	f1c0 0120 	rsb	r1, r0, #32
 800a7bc:	fa23 f401 	lsr.w	r4, r3, r1
 800a7c0:	4082      	lsls	r2, r0
 800a7c2:	4322      	orrs	r2, r4
 800a7c4:	4547      	cmp	r7, r8
 800a7c6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a7ca:	bf8c      	ite	hi
 800a7cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a7d0:	2200      	movls	r2, #0
 800a7d2:	4083      	lsls	r3, r0
 800a7d4:	40ca      	lsrs	r2, r1
 800a7d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	e7de      	b.n	800a79c <__b2d+0x48>
 800a7de:	ea42 0501 	orr.w	r5, r2, r1
 800a7e2:	e7db      	b.n	800a79c <__b2d+0x48>
 800a7e4:	3ff00000 	.word	0x3ff00000

0800a7e8 <__d2b>:
 800a7e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7ec:	460f      	mov	r7, r1
 800a7ee:	2101      	movs	r1, #1
 800a7f0:	ec59 8b10 	vmov	r8, r9, d0
 800a7f4:	4616      	mov	r6, r2
 800a7f6:	f7ff fc1b 	bl	800a030 <_Balloc>
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	b930      	cbnz	r0, 800a80c <__d2b+0x24>
 800a7fe:	4602      	mov	r2, r0
 800a800:	4b23      	ldr	r3, [pc, #140]	@ (800a890 <__d2b+0xa8>)
 800a802:	4824      	ldr	r0, [pc, #144]	@ (800a894 <__d2b+0xac>)
 800a804:	f240 310f 	movw	r1, #783	@ 0x30f
 800a808:	f7fd fbac 	bl	8007f64 <__assert_func>
 800a80c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a810:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a814:	b10d      	cbz	r5, 800a81a <__d2b+0x32>
 800a816:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a81a:	9301      	str	r3, [sp, #4]
 800a81c:	f1b8 0300 	subs.w	r3, r8, #0
 800a820:	d023      	beq.n	800a86a <__d2b+0x82>
 800a822:	4668      	mov	r0, sp
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	f7ff fd14 	bl	800a252 <__lo0bits>
 800a82a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a82e:	b1d0      	cbz	r0, 800a866 <__d2b+0x7e>
 800a830:	f1c0 0320 	rsb	r3, r0, #32
 800a834:	fa02 f303 	lsl.w	r3, r2, r3
 800a838:	430b      	orrs	r3, r1
 800a83a:	40c2      	lsrs	r2, r0
 800a83c:	6163      	str	r3, [r4, #20]
 800a83e:	9201      	str	r2, [sp, #4]
 800a840:	9b01      	ldr	r3, [sp, #4]
 800a842:	61a3      	str	r3, [r4, #24]
 800a844:	2b00      	cmp	r3, #0
 800a846:	bf0c      	ite	eq
 800a848:	2201      	moveq	r2, #1
 800a84a:	2202      	movne	r2, #2
 800a84c:	6122      	str	r2, [r4, #16]
 800a84e:	b1a5      	cbz	r5, 800a87a <__d2b+0x92>
 800a850:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a854:	4405      	add	r5, r0
 800a856:	603d      	str	r5, [r7, #0]
 800a858:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a85c:	6030      	str	r0, [r6, #0]
 800a85e:	4620      	mov	r0, r4
 800a860:	b003      	add	sp, #12
 800a862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a866:	6161      	str	r1, [r4, #20]
 800a868:	e7ea      	b.n	800a840 <__d2b+0x58>
 800a86a:	a801      	add	r0, sp, #4
 800a86c:	f7ff fcf1 	bl	800a252 <__lo0bits>
 800a870:	9b01      	ldr	r3, [sp, #4]
 800a872:	6163      	str	r3, [r4, #20]
 800a874:	3020      	adds	r0, #32
 800a876:	2201      	movs	r2, #1
 800a878:	e7e8      	b.n	800a84c <__d2b+0x64>
 800a87a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a87e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a882:	6038      	str	r0, [r7, #0]
 800a884:	6918      	ldr	r0, [r3, #16]
 800a886:	f7ff fcc5 	bl	800a214 <__hi0bits>
 800a88a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a88e:	e7e5      	b.n	800a85c <__d2b+0x74>
 800a890:	0800d024 	.word	0x0800d024
 800a894:	0800d035 	.word	0x0800d035

0800a898 <__ratio>:
 800a898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a89c:	4688      	mov	r8, r1
 800a89e:	4669      	mov	r1, sp
 800a8a0:	4681      	mov	r9, r0
 800a8a2:	f7ff ff57 	bl	800a754 <__b2d>
 800a8a6:	a901      	add	r1, sp, #4
 800a8a8:	4640      	mov	r0, r8
 800a8aa:	ec55 4b10 	vmov	r4, r5, d0
 800a8ae:	f7ff ff51 	bl	800a754 <__b2d>
 800a8b2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a8b6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800a8ba:	1ad2      	subs	r2, r2, r3
 800a8bc:	e9dd 3100 	ldrd	r3, r1, [sp]
 800a8c0:	1a5b      	subs	r3, r3, r1
 800a8c2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a8c6:	ec57 6b10 	vmov	r6, r7, d0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	bfd6      	itet	le
 800a8ce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a8d2:	462a      	movgt	r2, r5
 800a8d4:	463a      	movle	r2, r7
 800a8d6:	46ab      	mov	fp, r5
 800a8d8:	46a2      	mov	sl, r4
 800a8da:	bfce      	itee	gt
 800a8dc:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a8e0:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800a8e4:	ee00 3a90 	vmovle	s1, r3
 800a8e8:	ec4b ab17 	vmov	d7, sl, fp
 800a8ec:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800a8f0:	b003      	add	sp, #12
 800a8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8f6 <__copybits>:
 800a8f6:	3901      	subs	r1, #1
 800a8f8:	b570      	push	{r4, r5, r6, lr}
 800a8fa:	1149      	asrs	r1, r1, #5
 800a8fc:	6914      	ldr	r4, [r2, #16]
 800a8fe:	3101      	adds	r1, #1
 800a900:	f102 0314 	add.w	r3, r2, #20
 800a904:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a908:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a90c:	1f05      	subs	r5, r0, #4
 800a90e:	42a3      	cmp	r3, r4
 800a910:	d30c      	bcc.n	800a92c <__copybits+0x36>
 800a912:	1aa3      	subs	r3, r4, r2
 800a914:	3b11      	subs	r3, #17
 800a916:	f023 0303 	bic.w	r3, r3, #3
 800a91a:	3211      	adds	r2, #17
 800a91c:	42a2      	cmp	r2, r4
 800a91e:	bf88      	it	hi
 800a920:	2300      	movhi	r3, #0
 800a922:	4418      	add	r0, r3
 800a924:	2300      	movs	r3, #0
 800a926:	4288      	cmp	r0, r1
 800a928:	d305      	bcc.n	800a936 <__copybits+0x40>
 800a92a:	bd70      	pop	{r4, r5, r6, pc}
 800a92c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a930:	f845 6f04 	str.w	r6, [r5, #4]!
 800a934:	e7eb      	b.n	800a90e <__copybits+0x18>
 800a936:	f840 3b04 	str.w	r3, [r0], #4
 800a93a:	e7f4      	b.n	800a926 <__copybits+0x30>

0800a93c <__any_on>:
 800a93c:	f100 0214 	add.w	r2, r0, #20
 800a940:	6900      	ldr	r0, [r0, #16]
 800a942:	114b      	asrs	r3, r1, #5
 800a944:	4298      	cmp	r0, r3
 800a946:	b510      	push	{r4, lr}
 800a948:	db11      	blt.n	800a96e <__any_on+0x32>
 800a94a:	dd0a      	ble.n	800a962 <__any_on+0x26>
 800a94c:	f011 011f 	ands.w	r1, r1, #31
 800a950:	d007      	beq.n	800a962 <__any_on+0x26>
 800a952:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a956:	fa24 f001 	lsr.w	r0, r4, r1
 800a95a:	fa00 f101 	lsl.w	r1, r0, r1
 800a95e:	428c      	cmp	r4, r1
 800a960:	d10b      	bne.n	800a97a <__any_on+0x3e>
 800a962:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a966:	4293      	cmp	r3, r2
 800a968:	d803      	bhi.n	800a972 <__any_on+0x36>
 800a96a:	2000      	movs	r0, #0
 800a96c:	bd10      	pop	{r4, pc}
 800a96e:	4603      	mov	r3, r0
 800a970:	e7f7      	b.n	800a962 <__any_on+0x26>
 800a972:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a976:	2900      	cmp	r1, #0
 800a978:	d0f5      	beq.n	800a966 <__any_on+0x2a>
 800a97a:	2001      	movs	r0, #1
 800a97c:	e7f6      	b.n	800a96c <__any_on+0x30>

0800a97e <_malloc_usable_size_r>:
 800a97e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a982:	1f18      	subs	r0, r3, #4
 800a984:	2b00      	cmp	r3, #0
 800a986:	bfbc      	itt	lt
 800a988:	580b      	ldrlt	r3, [r1, r0]
 800a98a:	18c0      	addlt	r0, r0, r3
 800a98c:	4770      	bx	lr

0800a98e <sulp>:
 800a98e:	b570      	push	{r4, r5, r6, lr}
 800a990:	4604      	mov	r4, r0
 800a992:	460d      	mov	r5, r1
 800a994:	4616      	mov	r6, r2
 800a996:	ec45 4b10 	vmov	d0, r4, r5
 800a99a:	f7ff feb5 	bl	800a708 <__ulp>
 800a99e:	b17e      	cbz	r6, 800a9c0 <sulp+0x32>
 800a9a0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a9a4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	dd09      	ble.n	800a9c0 <sulp+0x32>
 800a9ac:	051b      	lsls	r3, r3, #20
 800a9ae:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800a9b2:	2000      	movs	r0, #0
 800a9b4:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800a9b8:	ec41 0b17 	vmov	d7, r0, r1
 800a9bc:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a9c0:	bd70      	pop	{r4, r5, r6, pc}
 800a9c2:	0000      	movs	r0, r0
 800a9c4:	0000      	movs	r0, r0
	...

0800a9c8 <_strtod_l>:
 800a9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9cc:	ed2d 8b0a 	vpush	{d8-d12}
 800a9d0:	b097      	sub	sp, #92	@ 0x5c
 800a9d2:	4688      	mov	r8, r1
 800a9d4:	920e      	str	r2, [sp, #56]	@ 0x38
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	9212      	str	r2, [sp, #72]	@ 0x48
 800a9da:	9005      	str	r0, [sp, #20]
 800a9dc:	f04f 0a00 	mov.w	sl, #0
 800a9e0:	f04f 0b00 	mov.w	fp, #0
 800a9e4:	460a      	mov	r2, r1
 800a9e6:	9211      	str	r2, [sp, #68]	@ 0x44
 800a9e8:	7811      	ldrb	r1, [r2, #0]
 800a9ea:	292b      	cmp	r1, #43	@ 0x2b
 800a9ec:	d04c      	beq.n	800aa88 <_strtod_l+0xc0>
 800a9ee:	d839      	bhi.n	800aa64 <_strtod_l+0x9c>
 800a9f0:	290d      	cmp	r1, #13
 800a9f2:	d833      	bhi.n	800aa5c <_strtod_l+0x94>
 800a9f4:	2908      	cmp	r1, #8
 800a9f6:	d833      	bhi.n	800aa60 <_strtod_l+0x98>
 800a9f8:	2900      	cmp	r1, #0
 800a9fa:	d03c      	beq.n	800aa76 <_strtod_l+0xae>
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	9208      	str	r2, [sp, #32]
 800aa00:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800aa02:	782a      	ldrb	r2, [r5, #0]
 800aa04:	2a30      	cmp	r2, #48	@ 0x30
 800aa06:	f040 80b7 	bne.w	800ab78 <_strtod_l+0x1b0>
 800aa0a:	786a      	ldrb	r2, [r5, #1]
 800aa0c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aa10:	2a58      	cmp	r2, #88	@ 0x58
 800aa12:	d170      	bne.n	800aaf6 <_strtod_l+0x12e>
 800aa14:	9302      	str	r3, [sp, #8]
 800aa16:	9b08      	ldr	r3, [sp, #32]
 800aa18:	9301      	str	r3, [sp, #4]
 800aa1a:	ab12      	add	r3, sp, #72	@ 0x48
 800aa1c:	9300      	str	r3, [sp, #0]
 800aa1e:	4a90      	ldr	r2, [pc, #576]	@ (800ac60 <_strtod_l+0x298>)
 800aa20:	9805      	ldr	r0, [sp, #20]
 800aa22:	ab13      	add	r3, sp, #76	@ 0x4c
 800aa24:	a911      	add	r1, sp, #68	@ 0x44
 800aa26:	f001 fa8f 	bl	800bf48 <__gethex>
 800aa2a:	f010 060f 	ands.w	r6, r0, #15
 800aa2e:	4604      	mov	r4, r0
 800aa30:	d005      	beq.n	800aa3e <_strtod_l+0x76>
 800aa32:	2e06      	cmp	r6, #6
 800aa34:	d12a      	bne.n	800aa8c <_strtod_l+0xc4>
 800aa36:	3501      	adds	r5, #1
 800aa38:	2300      	movs	r3, #0
 800aa3a:	9511      	str	r5, [sp, #68]	@ 0x44
 800aa3c:	9308      	str	r3, [sp, #32]
 800aa3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f040 8537 	bne.w	800b4b4 <_strtod_l+0xaec>
 800aa46:	9b08      	ldr	r3, [sp, #32]
 800aa48:	ec4b ab10 	vmov	d0, sl, fp
 800aa4c:	b1cb      	cbz	r3, 800aa82 <_strtod_l+0xba>
 800aa4e:	eeb1 0b40 	vneg.f64	d0, d0
 800aa52:	b017      	add	sp, #92	@ 0x5c
 800aa54:	ecbd 8b0a 	vpop	{d8-d12}
 800aa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5c:	2920      	cmp	r1, #32
 800aa5e:	d1cd      	bne.n	800a9fc <_strtod_l+0x34>
 800aa60:	3201      	adds	r2, #1
 800aa62:	e7c0      	b.n	800a9e6 <_strtod_l+0x1e>
 800aa64:	292d      	cmp	r1, #45	@ 0x2d
 800aa66:	d1c9      	bne.n	800a9fc <_strtod_l+0x34>
 800aa68:	2101      	movs	r1, #1
 800aa6a:	9108      	str	r1, [sp, #32]
 800aa6c:	1c51      	adds	r1, r2, #1
 800aa6e:	9111      	str	r1, [sp, #68]	@ 0x44
 800aa70:	7852      	ldrb	r2, [r2, #1]
 800aa72:	2a00      	cmp	r2, #0
 800aa74:	d1c4      	bne.n	800aa00 <_strtod_l+0x38>
 800aa76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa78:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f040 8517 	bne.w	800b4b0 <_strtod_l+0xae8>
 800aa82:	ec4b ab10 	vmov	d0, sl, fp
 800aa86:	e7e4      	b.n	800aa52 <_strtod_l+0x8a>
 800aa88:	2100      	movs	r1, #0
 800aa8a:	e7ee      	b.n	800aa6a <_strtod_l+0xa2>
 800aa8c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800aa8e:	b13a      	cbz	r2, 800aaa0 <_strtod_l+0xd8>
 800aa90:	2135      	movs	r1, #53	@ 0x35
 800aa92:	a814      	add	r0, sp, #80	@ 0x50
 800aa94:	f7ff ff2f 	bl	800a8f6 <__copybits>
 800aa98:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800aa9a:	9805      	ldr	r0, [sp, #20]
 800aa9c:	f7ff fb08 	bl	800a0b0 <_Bfree>
 800aaa0:	1e73      	subs	r3, r6, #1
 800aaa2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aaa4:	2b04      	cmp	r3, #4
 800aaa6:	d806      	bhi.n	800aab6 <_strtod_l+0xee>
 800aaa8:	e8df f003 	tbb	[pc, r3]
 800aaac:	201d0314 	.word	0x201d0314
 800aab0:	14          	.byte	0x14
 800aab1:	00          	.byte	0x00
 800aab2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800aab6:	05e3      	lsls	r3, r4, #23
 800aab8:	bf48      	it	mi
 800aaba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800aabe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aac2:	0d1b      	lsrs	r3, r3, #20
 800aac4:	051b      	lsls	r3, r3, #20
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1b9      	bne.n	800aa3e <_strtod_l+0x76>
 800aaca:	f7fe fc37 	bl	800933c <__errno>
 800aace:	2322      	movs	r3, #34	@ 0x22
 800aad0:	6003      	str	r3, [r0, #0]
 800aad2:	e7b4      	b.n	800aa3e <_strtod_l+0x76>
 800aad4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800aad8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800aadc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800aae0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aae4:	e7e7      	b.n	800aab6 <_strtod_l+0xee>
 800aae6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ac68 <_strtod_l+0x2a0>
 800aaea:	e7e4      	b.n	800aab6 <_strtod_l+0xee>
 800aaec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aaf0:	f04f 3aff 	mov.w	sl, #4294967295
 800aaf4:	e7df      	b.n	800aab6 <_strtod_l+0xee>
 800aaf6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aaf8:	1c5a      	adds	r2, r3, #1
 800aafa:	9211      	str	r2, [sp, #68]	@ 0x44
 800aafc:	785b      	ldrb	r3, [r3, #1]
 800aafe:	2b30      	cmp	r3, #48	@ 0x30
 800ab00:	d0f9      	beq.n	800aaf6 <_strtod_l+0x12e>
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d09b      	beq.n	800aa3e <_strtod_l+0x76>
 800ab06:	2301      	movs	r3, #1
 800ab08:	9307      	str	r3, [sp, #28]
 800ab0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ab0c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab0e:	2300      	movs	r3, #0
 800ab10:	9306      	str	r3, [sp, #24]
 800ab12:	4699      	mov	r9, r3
 800ab14:	461d      	mov	r5, r3
 800ab16:	220a      	movs	r2, #10
 800ab18:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800ab1a:	7804      	ldrb	r4, [r0, #0]
 800ab1c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800ab20:	b2d9      	uxtb	r1, r3
 800ab22:	2909      	cmp	r1, #9
 800ab24:	d92a      	bls.n	800ab7c <_strtod_l+0x1b4>
 800ab26:	494f      	ldr	r1, [pc, #316]	@ (800ac64 <_strtod_l+0x29c>)
 800ab28:	2201      	movs	r2, #1
 800ab2a:	f7fe fb27 	bl	800917c <strncmp>
 800ab2e:	b398      	cbz	r0, 800ab98 <_strtod_l+0x1d0>
 800ab30:	2000      	movs	r0, #0
 800ab32:	4622      	mov	r2, r4
 800ab34:	462b      	mov	r3, r5
 800ab36:	4607      	mov	r7, r0
 800ab38:	4601      	mov	r1, r0
 800ab3a:	2a65      	cmp	r2, #101	@ 0x65
 800ab3c:	d001      	beq.n	800ab42 <_strtod_l+0x17a>
 800ab3e:	2a45      	cmp	r2, #69	@ 0x45
 800ab40:	d118      	bne.n	800ab74 <_strtod_l+0x1ac>
 800ab42:	b91b      	cbnz	r3, 800ab4c <_strtod_l+0x184>
 800ab44:	9b07      	ldr	r3, [sp, #28]
 800ab46:	4303      	orrs	r3, r0
 800ab48:	d095      	beq.n	800aa76 <_strtod_l+0xae>
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800ab50:	f108 0201 	add.w	r2, r8, #1
 800ab54:	9211      	str	r2, [sp, #68]	@ 0x44
 800ab56:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ab5a:	2a2b      	cmp	r2, #43	@ 0x2b
 800ab5c:	d074      	beq.n	800ac48 <_strtod_l+0x280>
 800ab5e:	2a2d      	cmp	r2, #45	@ 0x2d
 800ab60:	d07a      	beq.n	800ac58 <_strtod_l+0x290>
 800ab62:	f04f 0e00 	mov.w	lr, #0
 800ab66:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800ab6a:	2c09      	cmp	r4, #9
 800ab6c:	f240 8082 	bls.w	800ac74 <_strtod_l+0x2ac>
 800ab70:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800ab74:	2400      	movs	r4, #0
 800ab76:	e09d      	b.n	800acb4 <_strtod_l+0x2ec>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	e7c5      	b.n	800ab08 <_strtod_l+0x140>
 800ab7c:	2d08      	cmp	r5, #8
 800ab7e:	bfc8      	it	gt
 800ab80:	9906      	ldrgt	r1, [sp, #24]
 800ab82:	f100 0001 	add.w	r0, r0, #1
 800ab86:	bfca      	itet	gt
 800ab88:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ab8c:	fb02 3909 	mlale	r9, r2, r9, r3
 800ab90:	9306      	strgt	r3, [sp, #24]
 800ab92:	3501      	adds	r5, #1
 800ab94:	9011      	str	r0, [sp, #68]	@ 0x44
 800ab96:	e7bf      	b.n	800ab18 <_strtod_l+0x150>
 800ab98:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ab9a:	1c5a      	adds	r2, r3, #1
 800ab9c:	9211      	str	r2, [sp, #68]	@ 0x44
 800ab9e:	785a      	ldrb	r2, [r3, #1]
 800aba0:	b3bd      	cbz	r5, 800ac12 <_strtod_l+0x24a>
 800aba2:	4607      	mov	r7, r0
 800aba4:	462b      	mov	r3, r5
 800aba6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800abaa:	2909      	cmp	r1, #9
 800abac:	d912      	bls.n	800abd4 <_strtod_l+0x20c>
 800abae:	2101      	movs	r1, #1
 800abb0:	e7c3      	b.n	800ab3a <_strtod_l+0x172>
 800abb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800abb4:	1c5a      	adds	r2, r3, #1
 800abb6:	9211      	str	r2, [sp, #68]	@ 0x44
 800abb8:	785a      	ldrb	r2, [r3, #1]
 800abba:	3001      	adds	r0, #1
 800abbc:	2a30      	cmp	r2, #48	@ 0x30
 800abbe:	d0f8      	beq.n	800abb2 <_strtod_l+0x1ea>
 800abc0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800abc4:	2b08      	cmp	r3, #8
 800abc6:	f200 847a 	bhi.w	800b4be <_strtod_l+0xaf6>
 800abca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800abcc:	930a      	str	r3, [sp, #40]	@ 0x28
 800abce:	4607      	mov	r7, r0
 800abd0:	2000      	movs	r0, #0
 800abd2:	4603      	mov	r3, r0
 800abd4:	3a30      	subs	r2, #48	@ 0x30
 800abd6:	f100 0101 	add.w	r1, r0, #1
 800abda:	d014      	beq.n	800ac06 <_strtod_l+0x23e>
 800abdc:	440f      	add	r7, r1
 800abde:	469c      	mov	ip, r3
 800abe0:	f04f 0e0a 	mov.w	lr, #10
 800abe4:	f10c 0401 	add.w	r4, ip, #1
 800abe8:	1ae6      	subs	r6, r4, r3
 800abea:	42b1      	cmp	r1, r6
 800abec:	dc13      	bgt.n	800ac16 <_strtod_l+0x24e>
 800abee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800abf2:	1819      	adds	r1, r3, r0
 800abf4:	2908      	cmp	r1, #8
 800abf6:	f103 0301 	add.w	r3, r3, #1
 800abfa:	4403      	add	r3, r0
 800abfc:	dc19      	bgt.n	800ac32 <_strtod_l+0x26a>
 800abfe:	210a      	movs	r1, #10
 800ac00:	fb01 2909 	mla	r9, r1, r9, r2
 800ac04:	2100      	movs	r1, #0
 800ac06:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ac08:	1c50      	adds	r0, r2, #1
 800ac0a:	9011      	str	r0, [sp, #68]	@ 0x44
 800ac0c:	7852      	ldrb	r2, [r2, #1]
 800ac0e:	4608      	mov	r0, r1
 800ac10:	e7c9      	b.n	800aba6 <_strtod_l+0x1de>
 800ac12:	4628      	mov	r0, r5
 800ac14:	e7d2      	b.n	800abbc <_strtod_l+0x1f4>
 800ac16:	f1bc 0f08 	cmp.w	ip, #8
 800ac1a:	dc03      	bgt.n	800ac24 <_strtod_l+0x25c>
 800ac1c:	fb0e f909 	mul.w	r9, lr, r9
 800ac20:	46a4      	mov	ip, r4
 800ac22:	e7df      	b.n	800abe4 <_strtod_l+0x21c>
 800ac24:	2c10      	cmp	r4, #16
 800ac26:	bfde      	ittt	le
 800ac28:	9e06      	ldrle	r6, [sp, #24]
 800ac2a:	fb0e f606 	mulle.w	r6, lr, r6
 800ac2e:	9606      	strle	r6, [sp, #24]
 800ac30:	e7f6      	b.n	800ac20 <_strtod_l+0x258>
 800ac32:	290f      	cmp	r1, #15
 800ac34:	bfdf      	itttt	le
 800ac36:	9806      	ldrle	r0, [sp, #24]
 800ac38:	210a      	movle	r1, #10
 800ac3a:	fb01 2200 	mlale	r2, r1, r0, r2
 800ac3e:	9206      	strle	r2, [sp, #24]
 800ac40:	e7e0      	b.n	800ac04 <_strtod_l+0x23c>
 800ac42:	2700      	movs	r7, #0
 800ac44:	2101      	movs	r1, #1
 800ac46:	e77d      	b.n	800ab44 <_strtod_l+0x17c>
 800ac48:	f04f 0e00 	mov.w	lr, #0
 800ac4c:	f108 0202 	add.w	r2, r8, #2
 800ac50:	9211      	str	r2, [sp, #68]	@ 0x44
 800ac52:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ac56:	e786      	b.n	800ab66 <_strtod_l+0x19e>
 800ac58:	f04f 0e01 	mov.w	lr, #1
 800ac5c:	e7f6      	b.n	800ac4c <_strtod_l+0x284>
 800ac5e:	bf00      	nop
 800ac60:	0800d3f4 	.word	0x0800d3f4
 800ac64:	0800ce46 	.word	0x0800ce46
 800ac68:	7ff00000 	.word	0x7ff00000
 800ac6c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ac6e:	1c54      	adds	r4, r2, #1
 800ac70:	9411      	str	r4, [sp, #68]	@ 0x44
 800ac72:	7852      	ldrb	r2, [r2, #1]
 800ac74:	2a30      	cmp	r2, #48	@ 0x30
 800ac76:	d0f9      	beq.n	800ac6c <_strtod_l+0x2a4>
 800ac78:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800ac7c:	2c08      	cmp	r4, #8
 800ac7e:	f63f af79 	bhi.w	800ab74 <_strtod_l+0x1ac>
 800ac82:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800ac86:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ac88:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac8a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ac8c:	1c54      	adds	r4, r2, #1
 800ac8e:	9411      	str	r4, [sp, #68]	@ 0x44
 800ac90:	7852      	ldrb	r2, [r2, #1]
 800ac92:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800ac96:	2e09      	cmp	r6, #9
 800ac98:	d937      	bls.n	800ad0a <_strtod_l+0x342>
 800ac9a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800ac9c:	1ba4      	subs	r4, r4, r6
 800ac9e:	2c08      	cmp	r4, #8
 800aca0:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800aca4:	dc02      	bgt.n	800acac <_strtod_l+0x2e4>
 800aca6:	4564      	cmp	r4, ip
 800aca8:	bfa8      	it	ge
 800acaa:	4664      	movge	r4, ip
 800acac:	f1be 0f00 	cmp.w	lr, #0
 800acb0:	d000      	beq.n	800acb4 <_strtod_l+0x2ec>
 800acb2:	4264      	negs	r4, r4
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d14d      	bne.n	800ad54 <_strtod_l+0x38c>
 800acb8:	9b07      	ldr	r3, [sp, #28]
 800acba:	4318      	orrs	r0, r3
 800acbc:	f47f aebf 	bne.w	800aa3e <_strtod_l+0x76>
 800acc0:	2900      	cmp	r1, #0
 800acc2:	f47f aed8 	bne.w	800aa76 <_strtod_l+0xae>
 800acc6:	2a69      	cmp	r2, #105	@ 0x69
 800acc8:	d027      	beq.n	800ad1a <_strtod_l+0x352>
 800acca:	dc24      	bgt.n	800ad16 <_strtod_l+0x34e>
 800accc:	2a49      	cmp	r2, #73	@ 0x49
 800acce:	d024      	beq.n	800ad1a <_strtod_l+0x352>
 800acd0:	2a4e      	cmp	r2, #78	@ 0x4e
 800acd2:	f47f aed0 	bne.w	800aa76 <_strtod_l+0xae>
 800acd6:	4997      	ldr	r1, [pc, #604]	@ (800af34 <_strtod_l+0x56c>)
 800acd8:	a811      	add	r0, sp, #68	@ 0x44
 800acda:	f001 fb57 	bl	800c38c <__match>
 800acde:	2800      	cmp	r0, #0
 800ace0:	f43f aec9 	beq.w	800aa76 <_strtod_l+0xae>
 800ace4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	2b28      	cmp	r3, #40	@ 0x28
 800acea:	d12d      	bne.n	800ad48 <_strtod_l+0x380>
 800acec:	4992      	ldr	r1, [pc, #584]	@ (800af38 <_strtod_l+0x570>)
 800acee:	aa14      	add	r2, sp, #80	@ 0x50
 800acf0:	a811      	add	r0, sp, #68	@ 0x44
 800acf2:	f001 fb5f 	bl	800c3b4 <__hexnan>
 800acf6:	2805      	cmp	r0, #5
 800acf8:	d126      	bne.n	800ad48 <_strtod_l+0x380>
 800acfa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800acfc:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800ad00:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ad04:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ad08:	e699      	b.n	800aa3e <_strtod_l+0x76>
 800ad0a:	240a      	movs	r4, #10
 800ad0c:	fb04 2c0c 	mla	ip, r4, ip, r2
 800ad10:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800ad14:	e7b9      	b.n	800ac8a <_strtod_l+0x2c2>
 800ad16:	2a6e      	cmp	r2, #110	@ 0x6e
 800ad18:	e7db      	b.n	800acd2 <_strtod_l+0x30a>
 800ad1a:	4988      	ldr	r1, [pc, #544]	@ (800af3c <_strtod_l+0x574>)
 800ad1c:	a811      	add	r0, sp, #68	@ 0x44
 800ad1e:	f001 fb35 	bl	800c38c <__match>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	f43f aea7 	beq.w	800aa76 <_strtod_l+0xae>
 800ad28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ad2a:	4985      	ldr	r1, [pc, #532]	@ (800af40 <_strtod_l+0x578>)
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	a811      	add	r0, sp, #68	@ 0x44
 800ad30:	9311      	str	r3, [sp, #68]	@ 0x44
 800ad32:	f001 fb2b 	bl	800c38c <__match>
 800ad36:	b910      	cbnz	r0, 800ad3e <_strtod_l+0x376>
 800ad38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	9311      	str	r3, [sp, #68]	@ 0x44
 800ad3e:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800af54 <_strtod_l+0x58c>
 800ad42:	f04f 0a00 	mov.w	sl, #0
 800ad46:	e67a      	b.n	800aa3e <_strtod_l+0x76>
 800ad48:	487e      	ldr	r0, [pc, #504]	@ (800af44 <_strtod_l+0x57c>)
 800ad4a:	f001 f879 	bl	800be40 <nan>
 800ad4e:	ec5b ab10 	vmov	sl, fp, d0
 800ad52:	e674      	b.n	800aa3e <_strtod_l+0x76>
 800ad54:	ee07 9a90 	vmov	s15, r9
 800ad58:	1be2      	subs	r2, r4, r7
 800ad5a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ad5e:	2d00      	cmp	r5, #0
 800ad60:	bf08      	it	eq
 800ad62:	461d      	moveq	r5, r3
 800ad64:	2b10      	cmp	r3, #16
 800ad66:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad68:	461a      	mov	r2, r3
 800ad6a:	bfa8      	it	ge
 800ad6c:	2210      	movge	r2, #16
 800ad6e:	2b09      	cmp	r3, #9
 800ad70:	ec5b ab17 	vmov	sl, fp, d7
 800ad74:	dc15      	bgt.n	800ada2 <_strtod_l+0x3da>
 800ad76:	1be1      	subs	r1, r4, r7
 800ad78:	2900      	cmp	r1, #0
 800ad7a:	f43f ae60 	beq.w	800aa3e <_strtod_l+0x76>
 800ad7e:	eba4 0107 	sub.w	r1, r4, r7
 800ad82:	dd72      	ble.n	800ae6a <_strtod_l+0x4a2>
 800ad84:	2916      	cmp	r1, #22
 800ad86:	dc59      	bgt.n	800ae3c <_strtod_l+0x474>
 800ad88:	4b6f      	ldr	r3, [pc, #444]	@ (800af48 <_strtod_l+0x580>)
 800ad8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad90:	ed93 7b00 	vldr	d7, [r3]
 800ad94:	ec4b ab16 	vmov	d6, sl, fp
 800ad98:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ad9c:	ec5b ab17 	vmov	sl, fp, d7
 800ada0:	e64d      	b.n	800aa3e <_strtod_l+0x76>
 800ada2:	4969      	ldr	r1, [pc, #420]	@ (800af48 <_strtod_l+0x580>)
 800ada4:	eddd 6a06 	vldr	s13, [sp, #24]
 800ada8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800adac:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800adb0:	2b0f      	cmp	r3, #15
 800adb2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800adb6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800adba:	ec5b ab16 	vmov	sl, fp, d6
 800adbe:	ddda      	ble.n	800ad76 <_strtod_l+0x3ae>
 800adc0:	1a9a      	subs	r2, r3, r2
 800adc2:	1be1      	subs	r1, r4, r7
 800adc4:	440a      	add	r2, r1
 800adc6:	2a00      	cmp	r2, #0
 800adc8:	f340 8094 	ble.w	800aef4 <_strtod_l+0x52c>
 800adcc:	f012 000f 	ands.w	r0, r2, #15
 800add0:	d00a      	beq.n	800ade8 <_strtod_l+0x420>
 800add2:	495d      	ldr	r1, [pc, #372]	@ (800af48 <_strtod_l+0x580>)
 800add4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800add8:	ed91 7b00 	vldr	d7, [r1]
 800addc:	ec4b ab16 	vmov	d6, sl, fp
 800ade0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ade4:	ec5b ab17 	vmov	sl, fp, d7
 800ade8:	f032 020f 	bics.w	r2, r2, #15
 800adec:	d073      	beq.n	800aed6 <_strtod_l+0x50e>
 800adee:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800adf2:	dd47      	ble.n	800ae84 <_strtod_l+0x4bc>
 800adf4:	2400      	movs	r4, #0
 800adf6:	4625      	mov	r5, r4
 800adf8:	9407      	str	r4, [sp, #28]
 800adfa:	4626      	mov	r6, r4
 800adfc:	9a05      	ldr	r2, [sp, #20]
 800adfe:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800af54 <_strtod_l+0x58c>
 800ae02:	2322      	movs	r3, #34	@ 0x22
 800ae04:	6013      	str	r3, [r2, #0]
 800ae06:	f04f 0a00 	mov.w	sl, #0
 800ae0a:	9b07      	ldr	r3, [sp, #28]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f43f ae16 	beq.w	800aa3e <_strtod_l+0x76>
 800ae12:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ae14:	9805      	ldr	r0, [sp, #20]
 800ae16:	f7ff f94b 	bl	800a0b0 <_Bfree>
 800ae1a:	9805      	ldr	r0, [sp, #20]
 800ae1c:	4631      	mov	r1, r6
 800ae1e:	f7ff f947 	bl	800a0b0 <_Bfree>
 800ae22:	9805      	ldr	r0, [sp, #20]
 800ae24:	4629      	mov	r1, r5
 800ae26:	f7ff f943 	bl	800a0b0 <_Bfree>
 800ae2a:	9907      	ldr	r1, [sp, #28]
 800ae2c:	9805      	ldr	r0, [sp, #20]
 800ae2e:	f7ff f93f 	bl	800a0b0 <_Bfree>
 800ae32:	9805      	ldr	r0, [sp, #20]
 800ae34:	4621      	mov	r1, r4
 800ae36:	f7ff f93b 	bl	800a0b0 <_Bfree>
 800ae3a:	e600      	b.n	800aa3e <_strtod_l+0x76>
 800ae3c:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800ae40:	1be0      	subs	r0, r4, r7
 800ae42:	4281      	cmp	r1, r0
 800ae44:	dbbc      	blt.n	800adc0 <_strtod_l+0x3f8>
 800ae46:	4a40      	ldr	r2, [pc, #256]	@ (800af48 <_strtod_l+0x580>)
 800ae48:	f1c3 030f 	rsb	r3, r3, #15
 800ae4c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800ae50:	ed91 7b00 	vldr	d7, [r1]
 800ae54:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae56:	ec4b ab16 	vmov	d6, sl, fp
 800ae5a:	1acb      	subs	r3, r1, r3
 800ae5c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ae60:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ae64:	ed92 6b00 	vldr	d6, [r2]
 800ae68:	e796      	b.n	800ad98 <_strtod_l+0x3d0>
 800ae6a:	3116      	adds	r1, #22
 800ae6c:	dba8      	blt.n	800adc0 <_strtod_l+0x3f8>
 800ae6e:	4b36      	ldr	r3, [pc, #216]	@ (800af48 <_strtod_l+0x580>)
 800ae70:	1b3c      	subs	r4, r7, r4
 800ae72:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ae76:	ed94 7b00 	vldr	d7, [r4]
 800ae7a:	ec4b ab16 	vmov	d6, sl, fp
 800ae7e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ae82:	e78b      	b.n	800ad9c <_strtod_l+0x3d4>
 800ae84:	2000      	movs	r0, #0
 800ae86:	ec4b ab17 	vmov	d7, sl, fp
 800ae8a:	4e30      	ldr	r6, [pc, #192]	@ (800af4c <_strtod_l+0x584>)
 800ae8c:	1112      	asrs	r2, r2, #4
 800ae8e:	4601      	mov	r1, r0
 800ae90:	2a01      	cmp	r2, #1
 800ae92:	dc23      	bgt.n	800aedc <_strtod_l+0x514>
 800ae94:	b108      	cbz	r0, 800ae9a <_strtod_l+0x4d2>
 800ae96:	ec5b ab17 	vmov	sl, fp, d7
 800ae9a:	4a2c      	ldr	r2, [pc, #176]	@ (800af4c <_strtod_l+0x584>)
 800ae9c:	482c      	ldr	r0, [pc, #176]	@ (800af50 <_strtod_l+0x588>)
 800ae9e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800aea2:	ed92 7b00 	vldr	d7, [r2]
 800aea6:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800aeaa:	ec4b ab16 	vmov	d6, sl, fp
 800aeae:	4a29      	ldr	r2, [pc, #164]	@ (800af54 <_strtod_l+0x58c>)
 800aeb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aeb4:	ee17 1a90 	vmov	r1, s15
 800aeb8:	400a      	ands	r2, r1
 800aeba:	4282      	cmp	r2, r0
 800aebc:	ec5b ab17 	vmov	sl, fp, d7
 800aec0:	d898      	bhi.n	800adf4 <_strtod_l+0x42c>
 800aec2:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800aec6:	4282      	cmp	r2, r0
 800aec8:	bf86      	itte	hi
 800aeca:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800af58 <_strtod_l+0x590>
 800aece:	f04f 3aff 	movhi.w	sl, #4294967295
 800aed2:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800aed6:	2200      	movs	r2, #0
 800aed8:	9206      	str	r2, [sp, #24]
 800aeda:	e076      	b.n	800afca <_strtod_l+0x602>
 800aedc:	f012 0f01 	tst.w	r2, #1
 800aee0:	d004      	beq.n	800aeec <_strtod_l+0x524>
 800aee2:	ed96 6b00 	vldr	d6, [r6]
 800aee6:	2001      	movs	r0, #1
 800aee8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aeec:	3101      	adds	r1, #1
 800aeee:	1052      	asrs	r2, r2, #1
 800aef0:	3608      	adds	r6, #8
 800aef2:	e7cd      	b.n	800ae90 <_strtod_l+0x4c8>
 800aef4:	d0ef      	beq.n	800aed6 <_strtod_l+0x50e>
 800aef6:	4252      	negs	r2, r2
 800aef8:	f012 000f 	ands.w	r0, r2, #15
 800aefc:	d00a      	beq.n	800af14 <_strtod_l+0x54c>
 800aefe:	4912      	ldr	r1, [pc, #72]	@ (800af48 <_strtod_l+0x580>)
 800af00:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800af04:	ed91 7b00 	vldr	d7, [r1]
 800af08:	ec4b ab16 	vmov	d6, sl, fp
 800af0c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800af10:	ec5b ab17 	vmov	sl, fp, d7
 800af14:	1112      	asrs	r2, r2, #4
 800af16:	d0de      	beq.n	800aed6 <_strtod_l+0x50e>
 800af18:	2a1f      	cmp	r2, #31
 800af1a:	dd1f      	ble.n	800af5c <_strtod_l+0x594>
 800af1c:	2400      	movs	r4, #0
 800af1e:	4625      	mov	r5, r4
 800af20:	9407      	str	r4, [sp, #28]
 800af22:	4626      	mov	r6, r4
 800af24:	9a05      	ldr	r2, [sp, #20]
 800af26:	2322      	movs	r3, #34	@ 0x22
 800af28:	f04f 0a00 	mov.w	sl, #0
 800af2c:	f04f 0b00 	mov.w	fp, #0
 800af30:	6013      	str	r3, [r2, #0]
 800af32:	e76a      	b.n	800ae0a <_strtod_l+0x442>
 800af34:	0800cf7c 	.word	0x0800cf7c
 800af38:	0800d3e0 	.word	0x0800d3e0
 800af3c:	0800cf74 	.word	0x0800cf74
 800af40:	0800cfab 	.word	0x0800cfab
 800af44:	0800cf6e 	.word	0x0800cf6e
 800af48:	0800d318 	.word	0x0800d318
 800af4c:	0800d2f0 	.word	0x0800d2f0
 800af50:	7ca00000 	.word	0x7ca00000
 800af54:	7ff00000 	.word	0x7ff00000
 800af58:	7fefffff 	.word	0x7fefffff
 800af5c:	f012 0110 	ands.w	r1, r2, #16
 800af60:	bf18      	it	ne
 800af62:	216a      	movne	r1, #106	@ 0x6a
 800af64:	9106      	str	r1, [sp, #24]
 800af66:	ec4b ab17 	vmov	d7, sl, fp
 800af6a:	49af      	ldr	r1, [pc, #700]	@ (800b228 <_strtod_l+0x860>)
 800af6c:	2000      	movs	r0, #0
 800af6e:	07d6      	lsls	r6, r2, #31
 800af70:	d504      	bpl.n	800af7c <_strtod_l+0x5b4>
 800af72:	ed91 6b00 	vldr	d6, [r1]
 800af76:	2001      	movs	r0, #1
 800af78:	ee27 7b06 	vmul.f64	d7, d7, d6
 800af7c:	1052      	asrs	r2, r2, #1
 800af7e:	f101 0108 	add.w	r1, r1, #8
 800af82:	d1f4      	bne.n	800af6e <_strtod_l+0x5a6>
 800af84:	b108      	cbz	r0, 800af8a <_strtod_l+0x5c2>
 800af86:	ec5b ab17 	vmov	sl, fp, d7
 800af8a:	9a06      	ldr	r2, [sp, #24]
 800af8c:	b1b2      	cbz	r2, 800afbc <_strtod_l+0x5f4>
 800af8e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800af92:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800af96:	2a00      	cmp	r2, #0
 800af98:	4658      	mov	r0, fp
 800af9a:	dd0f      	ble.n	800afbc <_strtod_l+0x5f4>
 800af9c:	2a1f      	cmp	r2, #31
 800af9e:	dd55      	ble.n	800b04c <_strtod_l+0x684>
 800afa0:	2a34      	cmp	r2, #52	@ 0x34
 800afa2:	bfde      	ittt	le
 800afa4:	f04f 32ff 	movle.w	r2, #4294967295
 800afa8:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800afac:	408a      	lslle	r2, r1
 800afae:	f04f 0a00 	mov.w	sl, #0
 800afb2:	bfcc      	ite	gt
 800afb4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800afb8:	ea02 0b00 	andle.w	fp, r2, r0
 800afbc:	ec4b ab17 	vmov	d7, sl, fp
 800afc0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800afc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afc8:	d0a8      	beq.n	800af1c <_strtod_l+0x554>
 800afca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800afcc:	9805      	ldr	r0, [sp, #20]
 800afce:	f8cd 9000 	str.w	r9, [sp]
 800afd2:	462a      	mov	r2, r5
 800afd4:	f7ff f8d4 	bl	800a180 <__s2b>
 800afd8:	9007      	str	r0, [sp, #28]
 800afda:	2800      	cmp	r0, #0
 800afdc:	f43f af0a 	beq.w	800adf4 <_strtod_l+0x42c>
 800afe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afe2:	1b3f      	subs	r7, r7, r4
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	bfb4      	ite	lt
 800afe8:	463b      	movlt	r3, r7
 800afea:	2300      	movge	r3, #0
 800afec:	930a      	str	r3, [sp, #40]	@ 0x28
 800afee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aff0:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800b218 <_strtod_l+0x850>
 800aff4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aff8:	2400      	movs	r4, #0
 800affa:	930d      	str	r3, [sp, #52]	@ 0x34
 800affc:	4625      	mov	r5, r4
 800affe:	9b07      	ldr	r3, [sp, #28]
 800b000:	9805      	ldr	r0, [sp, #20]
 800b002:	6859      	ldr	r1, [r3, #4]
 800b004:	f7ff f814 	bl	800a030 <_Balloc>
 800b008:	4606      	mov	r6, r0
 800b00a:	2800      	cmp	r0, #0
 800b00c:	f43f aef6 	beq.w	800adfc <_strtod_l+0x434>
 800b010:	9b07      	ldr	r3, [sp, #28]
 800b012:	691a      	ldr	r2, [r3, #16]
 800b014:	ec4b ab19 	vmov	d9, sl, fp
 800b018:	3202      	adds	r2, #2
 800b01a:	f103 010c 	add.w	r1, r3, #12
 800b01e:	0092      	lsls	r2, r2, #2
 800b020:	300c      	adds	r0, #12
 800b022:	f7fe f9b8 	bl	8009396 <memcpy>
 800b026:	eeb0 0b49 	vmov.f64	d0, d9
 800b02a:	9805      	ldr	r0, [sp, #20]
 800b02c:	aa14      	add	r2, sp, #80	@ 0x50
 800b02e:	a913      	add	r1, sp, #76	@ 0x4c
 800b030:	f7ff fbda 	bl	800a7e8 <__d2b>
 800b034:	9012      	str	r0, [sp, #72]	@ 0x48
 800b036:	2800      	cmp	r0, #0
 800b038:	f43f aee0 	beq.w	800adfc <_strtod_l+0x434>
 800b03c:	9805      	ldr	r0, [sp, #20]
 800b03e:	2101      	movs	r1, #1
 800b040:	f7ff f934 	bl	800a2ac <__i2b>
 800b044:	4605      	mov	r5, r0
 800b046:	b940      	cbnz	r0, 800b05a <_strtod_l+0x692>
 800b048:	2500      	movs	r5, #0
 800b04a:	e6d7      	b.n	800adfc <_strtod_l+0x434>
 800b04c:	f04f 31ff 	mov.w	r1, #4294967295
 800b050:	fa01 f202 	lsl.w	r2, r1, r2
 800b054:	ea02 0a0a 	and.w	sl, r2, sl
 800b058:	e7b0      	b.n	800afbc <_strtod_l+0x5f4>
 800b05a:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800b05c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b05e:	2f00      	cmp	r7, #0
 800b060:	bfab      	itete	ge
 800b062:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800b064:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800b066:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800b06a:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800b06e:	bfac      	ite	ge
 800b070:	eb07 0903 	addge.w	r9, r7, r3
 800b074:	eba3 0807 	sublt.w	r8, r3, r7
 800b078:	9b06      	ldr	r3, [sp, #24]
 800b07a:	1aff      	subs	r7, r7, r3
 800b07c:	4417      	add	r7, r2
 800b07e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800b082:	4a6a      	ldr	r2, [pc, #424]	@ (800b22c <_strtod_l+0x864>)
 800b084:	3f01      	subs	r7, #1
 800b086:	4297      	cmp	r7, r2
 800b088:	da51      	bge.n	800b12e <_strtod_l+0x766>
 800b08a:	1bd1      	subs	r1, r2, r7
 800b08c:	291f      	cmp	r1, #31
 800b08e:	eba3 0301 	sub.w	r3, r3, r1
 800b092:	f04f 0201 	mov.w	r2, #1
 800b096:	dc3e      	bgt.n	800b116 <_strtod_l+0x74e>
 800b098:	408a      	lsls	r2, r1
 800b09a:	920c      	str	r2, [sp, #48]	@ 0x30
 800b09c:	2200      	movs	r2, #0
 800b09e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b0a0:	eb09 0703 	add.w	r7, r9, r3
 800b0a4:	4498      	add	r8, r3
 800b0a6:	9b06      	ldr	r3, [sp, #24]
 800b0a8:	45b9      	cmp	r9, r7
 800b0aa:	4498      	add	r8, r3
 800b0ac:	464b      	mov	r3, r9
 800b0ae:	bfa8      	it	ge
 800b0b0:	463b      	movge	r3, r7
 800b0b2:	4543      	cmp	r3, r8
 800b0b4:	bfa8      	it	ge
 800b0b6:	4643      	movge	r3, r8
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	bfc2      	ittt	gt
 800b0bc:	1aff      	subgt	r7, r7, r3
 800b0be:	eba8 0803 	subgt.w	r8, r8, r3
 800b0c2:	eba9 0903 	subgt.w	r9, r9, r3
 800b0c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	dd16      	ble.n	800b0fa <_strtod_l+0x732>
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	9805      	ldr	r0, [sp, #20]
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	f7ff f9a3 	bl	800a41c <__pow5mult>
 800b0d6:	4605      	mov	r5, r0
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d0b5      	beq.n	800b048 <_strtod_l+0x680>
 800b0dc:	4601      	mov	r1, r0
 800b0de:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b0e0:	9805      	ldr	r0, [sp, #20]
 800b0e2:	f7ff f8f9 	bl	800a2d8 <__multiply>
 800b0e6:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	f43f ae87 	beq.w	800adfc <_strtod_l+0x434>
 800b0ee:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b0f0:	9805      	ldr	r0, [sp, #20]
 800b0f2:	f7fe ffdd 	bl	800a0b0 <_Bfree>
 800b0f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0f8:	9312      	str	r3, [sp, #72]	@ 0x48
 800b0fa:	2f00      	cmp	r7, #0
 800b0fc:	dc1b      	bgt.n	800b136 <_strtod_l+0x76e>
 800b0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b100:	2b00      	cmp	r3, #0
 800b102:	dd21      	ble.n	800b148 <_strtod_l+0x780>
 800b104:	4631      	mov	r1, r6
 800b106:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b108:	9805      	ldr	r0, [sp, #20]
 800b10a:	f7ff f987 	bl	800a41c <__pow5mult>
 800b10e:	4606      	mov	r6, r0
 800b110:	b9d0      	cbnz	r0, 800b148 <_strtod_l+0x780>
 800b112:	2600      	movs	r6, #0
 800b114:	e672      	b.n	800adfc <_strtod_l+0x434>
 800b116:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800b11a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800b11e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800b122:	37e2      	adds	r7, #226	@ 0xe2
 800b124:	fa02 f107 	lsl.w	r1, r2, r7
 800b128:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b12a:	920c      	str	r2, [sp, #48]	@ 0x30
 800b12c:	e7b8      	b.n	800b0a0 <_strtod_l+0x6d8>
 800b12e:	2200      	movs	r2, #0
 800b130:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b132:	2201      	movs	r2, #1
 800b134:	e7f9      	b.n	800b12a <_strtod_l+0x762>
 800b136:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b138:	9805      	ldr	r0, [sp, #20]
 800b13a:	463a      	mov	r2, r7
 800b13c:	f7ff f9c8 	bl	800a4d0 <__lshift>
 800b140:	9012      	str	r0, [sp, #72]	@ 0x48
 800b142:	2800      	cmp	r0, #0
 800b144:	d1db      	bne.n	800b0fe <_strtod_l+0x736>
 800b146:	e659      	b.n	800adfc <_strtod_l+0x434>
 800b148:	f1b8 0f00 	cmp.w	r8, #0
 800b14c:	dd07      	ble.n	800b15e <_strtod_l+0x796>
 800b14e:	4631      	mov	r1, r6
 800b150:	9805      	ldr	r0, [sp, #20]
 800b152:	4642      	mov	r2, r8
 800b154:	f7ff f9bc 	bl	800a4d0 <__lshift>
 800b158:	4606      	mov	r6, r0
 800b15a:	2800      	cmp	r0, #0
 800b15c:	d0d9      	beq.n	800b112 <_strtod_l+0x74a>
 800b15e:	f1b9 0f00 	cmp.w	r9, #0
 800b162:	dd08      	ble.n	800b176 <_strtod_l+0x7ae>
 800b164:	4629      	mov	r1, r5
 800b166:	9805      	ldr	r0, [sp, #20]
 800b168:	464a      	mov	r2, r9
 800b16a:	f7ff f9b1 	bl	800a4d0 <__lshift>
 800b16e:	4605      	mov	r5, r0
 800b170:	2800      	cmp	r0, #0
 800b172:	f43f ae43 	beq.w	800adfc <_strtod_l+0x434>
 800b176:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b178:	9805      	ldr	r0, [sp, #20]
 800b17a:	4632      	mov	r2, r6
 800b17c:	f7ff fa30 	bl	800a5e0 <__mdiff>
 800b180:	4604      	mov	r4, r0
 800b182:	2800      	cmp	r0, #0
 800b184:	f43f ae3a 	beq.w	800adfc <_strtod_l+0x434>
 800b188:	2300      	movs	r3, #0
 800b18a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800b18e:	60c3      	str	r3, [r0, #12]
 800b190:	4629      	mov	r1, r5
 800b192:	f7ff fa09 	bl	800a5a8 <__mcmp>
 800b196:	2800      	cmp	r0, #0
 800b198:	da4c      	bge.n	800b234 <_strtod_l+0x86c>
 800b19a:	ea58 080a 	orrs.w	r8, r8, sl
 800b19e:	d172      	bne.n	800b286 <_strtod_l+0x8be>
 800b1a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d16e      	bne.n	800b286 <_strtod_l+0x8be>
 800b1a8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b1ac:	0d1b      	lsrs	r3, r3, #20
 800b1ae:	051b      	lsls	r3, r3, #20
 800b1b0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b1b4:	d967      	bls.n	800b286 <_strtod_l+0x8be>
 800b1b6:	6963      	ldr	r3, [r4, #20]
 800b1b8:	b913      	cbnz	r3, 800b1c0 <_strtod_l+0x7f8>
 800b1ba:	6923      	ldr	r3, [r4, #16]
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	dd62      	ble.n	800b286 <_strtod_l+0x8be>
 800b1c0:	4621      	mov	r1, r4
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	9805      	ldr	r0, [sp, #20]
 800b1c6:	f7ff f983 	bl	800a4d0 <__lshift>
 800b1ca:	4629      	mov	r1, r5
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	f7ff f9eb 	bl	800a5a8 <__mcmp>
 800b1d2:	2800      	cmp	r0, #0
 800b1d4:	dd57      	ble.n	800b286 <_strtod_l+0x8be>
 800b1d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b1da:	9a06      	ldr	r2, [sp, #24]
 800b1dc:	0d1b      	lsrs	r3, r3, #20
 800b1de:	051b      	lsls	r3, r3, #20
 800b1e0:	2a00      	cmp	r2, #0
 800b1e2:	d06e      	beq.n	800b2c2 <_strtod_l+0x8fa>
 800b1e4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b1e8:	d86b      	bhi.n	800b2c2 <_strtod_l+0x8fa>
 800b1ea:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b1ee:	f67f ae99 	bls.w	800af24 <_strtod_l+0x55c>
 800b1f2:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800b220 <_strtod_l+0x858>
 800b1f6:	ec4b ab16 	vmov	d6, sl, fp
 800b1fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b230 <_strtod_l+0x868>)
 800b1fc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b200:	ee17 2a90 	vmov	r2, s15
 800b204:	4013      	ands	r3, r2
 800b206:	ec5b ab17 	vmov	sl, fp, d7
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f47f ae01 	bne.w	800ae12 <_strtod_l+0x44a>
 800b210:	9a05      	ldr	r2, [sp, #20]
 800b212:	2322      	movs	r3, #34	@ 0x22
 800b214:	6013      	str	r3, [r2, #0]
 800b216:	e5fc      	b.n	800ae12 <_strtod_l+0x44a>
 800b218:	ffc00000 	.word	0xffc00000
 800b21c:	41dfffff 	.word	0x41dfffff
 800b220:	00000000 	.word	0x00000000
 800b224:	39500000 	.word	0x39500000
 800b228:	0800d408 	.word	0x0800d408
 800b22c:	fffffc02 	.word	0xfffffc02
 800b230:	7ff00000 	.word	0x7ff00000
 800b234:	46d9      	mov	r9, fp
 800b236:	d15d      	bne.n	800b2f4 <_strtod_l+0x92c>
 800b238:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b23c:	f1b8 0f00 	cmp.w	r8, #0
 800b240:	d02a      	beq.n	800b298 <_strtod_l+0x8d0>
 800b242:	4aa9      	ldr	r2, [pc, #676]	@ (800b4e8 <_strtod_l+0xb20>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d12a      	bne.n	800b29e <_strtod_l+0x8d6>
 800b248:	9b06      	ldr	r3, [sp, #24]
 800b24a:	4652      	mov	r2, sl
 800b24c:	b1fb      	cbz	r3, 800b28e <_strtod_l+0x8c6>
 800b24e:	4ba7      	ldr	r3, [pc, #668]	@ (800b4ec <_strtod_l+0xb24>)
 800b250:	ea0b 0303 	and.w	r3, fp, r3
 800b254:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b258:	f04f 31ff 	mov.w	r1, #4294967295
 800b25c:	d81a      	bhi.n	800b294 <_strtod_l+0x8cc>
 800b25e:	0d1b      	lsrs	r3, r3, #20
 800b260:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b264:	fa01 f303 	lsl.w	r3, r1, r3
 800b268:	429a      	cmp	r2, r3
 800b26a:	d118      	bne.n	800b29e <_strtod_l+0x8d6>
 800b26c:	4ba0      	ldr	r3, [pc, #640]	@ (800b4f0 <_strtod_l+0xb28>)
 800b26e:	4599      	cmp	r9, r3
 800b270:	d102      	bne.n	800b278 <_strtod_l+0x8b0>
 800b272:	3201      	adds	r2, #1
 800b274:	f43f adc2 	beq.w	800adfc <_strtod_l+0x434>
 800b278:	4b9c      	ldr	r3, [pc, #624]	@ (800b4ec <_strtod_l+0xb24>)
 800b27a:	ea09 0303 	and.w	r3, r9, r3
 800b27e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800b282:	f04f 0a00 	mov.w	sl, #0
 800b286:	9b06      	ldr	r3, [sp, #24]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d1b2      	bne.n	800b1f2 <_strtod_l+0x82a>
 800b28c:	e5c1      	b.n	800ae12 <_strtod_l+0x44a>
 800b28e:	f04f 33ff 	mov.w	r3, #4294967295
 800b292:	e7e9      	b.n	800b268 <_strtod_l+0x8a0>
 800b294:	460b      	mov	r3, r1
 800b296:	e7e7      	b.n	800b268 <_strtod_l+0x8a0>
 800b298:	ea53 030a 	orrs.w	r3, r3, sl
 800b29c:	d09b      	beq.n	800b1d6 <_strtod_l+0x80e>
 800b29e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2a0:	b1c3      	cbz	r3, 800b2d4 <_strtod_l+0x90c>
 800b2a2:	ea13 0f09 	tst.w	r3, r9
 800b2a6:	d0ee      	beq.n	800b286 <_strtod_l+0x8be>
 800b2a8:	9a06      	ldr	r2, [sp, #24]
 800b2aa:	4650      	mov	r0, sl
 800b2ac:	4659      	mov	r1, fp
 800b2ae:	f1b8 0f00 	cmp.w	r8, #0
 800b2b2:	d013      	beq.n	800b2dc <_strtod_l+0x914>
 800b2b4:	f7ff fb6b 	bl	800a98e <sulp>
 800b2b8:	ee39 7b00 	vadd.f64	d7, d9, d0
 800b2bc:	ec5b ab17 	vmov	sl, fp, d7
 800b2c0:	e7e1      	b.n	800b286 <_strtod_l+0x8be>
 800b2c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b2c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b2ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b2ce:	f04f 3aff 	mov.w	sl, #4294967295
 800b2d2:	e7d8      	b.n	800b286 <_strtod_l+0x8be>
 800b2d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2d6:	ea13 0f0a 	tst.w	r3, sl
 800b2da:	e7e4      	b.n	800b2a6 <_strtod_l+0x8de>
 800b2dc:	f7ff fb57 	bl	800a98e <sulp>
 800b2e0:	ee39 0b40 	vsub.f64	d0, d9, d0
 800b2e4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800b2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ec:	ec5b ab10 	vmov	sl, fp, d0
 800b2f0:	d1c9      	bne.n	800b286 <_strtod_l+0x8be>
 800b2f2:	e617      	b.n	800af24 <_strtod_l+0x55c>
 800b2f4:	4629      	mov	r1, r5
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f7ff face 	bl	800a898 <__ratio>
 800b2fc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800b300:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b308:	d85d      	bhi.n	800b3c6 <_strtod_l+0x9fe>
 800b30a:	f1b8 0f00 	cmp.w	r8, #0
 800b30e:	d164      	bne.n	800b3da <_strtod_l+0xa12>
 800b310:	f1ba 0f00 	cmp.w	sl, #0
 800b314:	d14b      	bne.n	800b3ae <_strtod_l+0x9e6>
 800b316:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b31a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d160      	bne.n	800b3e4 <_strtod_l+0xa1c>
 800b322:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800b326:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800b32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b32e:	d401      	bmi.n	800b334 <_strtod_l+0x96c>
 800b330:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b334:	eeb1 ab48 	vneg.f64	d10, d8
 800b338:	486c      	ldr	r0, [pc, #432]	@ (800b4ec <_strtod_l+0xb24>)
 800b33a:	496e      	ldr	r1, [pc, #440]	@ (800b4f4 <_strtod_l+0xb2c>)
 800b33c:	ea09 0700 	and.w	r7, r9, r0
 800b340:	428f      	cmp	r7, r1
 800b342:	ec53 2b1a 	vmov	r2, r3, d10
 800b346:	d17d      	bne.n	800b444 <_strtod_l+0xa7c>
 800b348:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800b34c:	ec4b ab1c 	vmov	d12, sl, fp
 800b350:	eeb0 0b4c 	vmov.f64	d0, d12
 800b354:	f7ff f9d8 	bl	800a708 <__ulp>
 800b358:	4864      	ldr	r0, [pc, #400]	@ (800b4ec <_strtod_l+0xb24>)
 800b35a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800b35e:	ee1c 3a90 	vmov	r3, s25
 800b362:	4a65      	ldr	r2, [pc, #404]	@ (800b4f8 <_strtod_l+0xb30>)
 800b364:	ea03 0100 	and.w	r1, r3, r0
 800b368:	4291      	cmp	r1, r2
 800b36a:	ec5b ab1c 	vmov	sl, fp, d12
 800b36e:	d93c      	bls.n	800b3ea <_strtod_l+0xa22>
 800b370:	ee19 2a90 	vmov	r2, s19
 800b374:	4b5e      	ldr	r3, [pc, #376]	@ (800b4f0 <_strtod_l+0xb28>)
 800b376:	429a      	cmp	r2, r3
 800b378:	d104      	bne.n	800b384 <_strtod_l+0x9bc>
 800b37a:	ee19 3a10 	vmov	r3, s18
 800b37e:	3301      	adds	r3, #1
 800b380:	f43f ad3c 	beq.w	800adfc <_strtod_l+0x434>
 800b384:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800b4f0 <_strtod_l+0xb28>
 800b388:	f04f 3aff 	mov.w	sl, #4294967295
 800b38c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b38e:	9805      	ldr	r0, [sp, #20]
 800b390:	f7fe fe8e 	bl	800a0b0 <_Bfree>
 800b394:	9805      	ldr	r0, [sp, #20]
 800b396:	4631      	mov	r1, r6
 800b398:	f7fe fe8a 	bl	800a0b0 <_Bfree>
 800b39c:	9805      	ldr	r0, [sp, #20]
 800b39e:	4629      	mov	r1, r5
 800b3a0:	f7fe fe86 	bl	800a0b0 <_Bfree>
 800b3a4:	9805      	ldr	r0, [sp, #20]
 800b3a6:	4621      	mov	r1, r4
 800b3a8:	f7fe fe82 	bl	800a0b0 <_Bfree>
 800b3ac:	e627      	b.n	800affe <_strtod_l+0x636>
 800b3ae:	f1ba 0f01 	cmp.w	sl, #1
 800b3b2:	d103      	bne.n	800b3bc <_strtod_l+0x9f4>
 800b3b4:	f1bb 0f00 	cmp.w	fp, #0
 800b3b8:	f43f adb4 	beq.w	800af24 <_strtod_l+0x55c>
 800b3bc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800b3c0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800b3c4:	e7b8      	b.n	800b338 <_strtod_l+0x970>
 800b3c6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800b3ca:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b3ce:	f1b8 0f00 	cmp.w	r8, #0
 800b3d2:	d0af      	beq.n	800b334 <_strtod_l+0x96c>
 800b3d4:	eeb0 ab48 	vmov.f64	d10, d8
 800b3d8:	e7ae      	b.n	800b338 <_strtod_l+0x970>
 800b3da:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800b3de:	eeb0 8b4a 	vmov.f64	d8, d10
 800b3e2:	e7a9      	b.n	800b338 <_strtod_l+0x970>
 800b3e4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800b3e8:	e7a6      	b.n	800b338 <_strtod_l+0x970>
 800b3ea:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b3ee:	9b06      	ldr	r3, [sp, #24]
 800b3f0:	46d9      	mov	r9, fp
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d1ca      	bne.n	800b38c <_strtod_l+0x9c4>
 800b3f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b3fa:	0d1b      	lsrs	r3, r3, #20
 800b3fc:	051b      	lsls	r3, r3, #20
 800b3fe:	429f      	cmp	r7, r3
 800b400:	d1c4      	bne.n	800b38c <_strtod_l+0x9c4>
 800b402:	ec51 0b18 	vmov	r0, r1, d8
 800b406:	f7f5 f997 	bl	8000738 <__aeabi_d2lz>
 800b40a:	f7f5 f94f 	bl	80006ac <__aeabi_l2d>
 800b40e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800b412:	ec41 0b17 	vmov	d7, r0, r1
 800b416:	ea49 090a 	orr.w	r9, r9, sl
 800b41a:	ea59 0908 	orrs.w	r9, r9, r8
 800b41e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800b422:	d03c      	beq.n	800b49e <_strtod_l+0xad6>
 800b424:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800b4d0 <_strtod_l+0xb08>
 800b428:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b430:	f53f acef 	bmi.w	800ae12 <_strtod_l+0x44a>
 800b434:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800b4d8 <_strtod_l+0xb10>
 800b438:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b440:	dda4      	ble.n	800b38c <_strtod_l+0x9c4>
 800b442:	e4e6      	b.n	800ae12 <_strtod_l+0x44a>
 800b444:	9906      	ldr	r1, [sp, #24]
 800b446:	b1e1      	cbz	r1, 800b482 <_strtod_l+0xaba>
 800b448:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800b44c:	d819      	bhi.n	800b482 <_strtod_l+0xaba>
 800b44e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800b452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b456:	d811      	bhi.n	800b47c <_strtod_l+0xab4>
 800b458:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800b45c:	ee18 3a10 	vmov	r3, s16
 800b460:	2b01      	cmp	r3, #1
 800b462:	bf38      	it	cc
 800b464:	2301      	movcc	r3, #1
 800b466:	ee08 3a10 	vmov	s16, r3
 800b46a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800b46e:	f1b8 0f00 	cmp.w	r8, #0
 800b472:	d111      	bne.n	800b498 <_strtod_l+0xad0>
 800b474:	eeb1 7b48 	vneg.f64	d7, d8
 800b478:	ec53 2b17 	vmov	r2, r3, d7
 800b47c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800b480:	1bcb      	subs	r3, r1, r7
 800b482:	eeb0 0b49 	vmov.f64	d0, d9
 800b486:	ec43 2b1a 	vmov	d10, r2, r3
 800b48a:	f7ff f93d 	bl	800a708 <__ulp>
 800b48e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800b492:	ec5b ab19 	vmov	sl, fp, d9
 800b496:	e7aa      	b.n	800b3ee <_strtod_l+0xa26>
 800b498:	eeb0 7b48 	vmov.f64	d7, d8
 800b49c:	e7ec      	b.n	800b478 <_strtod_l+0xab0>
 800b49e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800b4e0 <_strtod_l+0xb18>
 800b4a2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4aa:	f57f af6f 	bpl.w	800b38c <_strtod_l+0x9c4>
 800b4ae:	e4b0      	b.n	800ae12 <_strtod_l+0x44a>
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	9308      	str	r3, [sp, #32]
 800b4b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b4b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b4b8:	6013      	str	r3, [r2, #0]
 800b4ba:	f7ff bac4 	b.w	800aa46 <_strtod_l+0x7e>
 800b4be:	2a65      	cmp	r2, #101	@ 0x65
 800b4c0:	f43f abbf 	beq.w	800ac42 <_strtod_l+0x27a>
 800b4c4:	2a45      	cmp	r2, #69	@ 0x45
 800b4c6:	f43f abbc 	beq.w	800ac42 <_strtod_l+0x27a>
 800b4ca:	2101      	movs	r1, #1
 800b4cc:	f7ff bbf4 	b.w	800acb8 <_strtod_l+0x2f0>
 800b4d0:	94a03595 	.word	0x94a03595
 800b4d4:	3fdfffff 	.word	0x3fdfffff
 800b4d8:	35afe535 	.word	0x35afe535
 800b4dc:	3fe00000 	.word	0x3fe00000
 800b4e0:	94a03595 	.word	0x94a03595
 800b4e4:	3fcfffff 	.word	0x3fcfffff
 800b4e8:	000fffff 	.word	0x000fffff
 800b4ec:	7ff00000 	.word	0x7ff00000
 800b4f0:	7fefffff 	.word	0x7fefffff
 800b4f4:	7fe00000 	.word	0x7fe00000
 800b4f8:	7c9fffff 	.word	0x7c9fffff

0800b4fc <_strtod_r>:
 800b4fc:	4b01      	ldr	r3, [pc, #4]	@ (800b504 <_strtod_r+0x8>)
 800b4fe:	f7ff ba63 	b.w	800a9c8 <_strtod_l>
 800b502:	bf00      	nop
 800b504:	24000074 	.word	0x24000074

0800b508 <_strtol_l.isra.0>:
 800b508:	2b24      	cmp	r3, #36	@ 0x24
 800b50a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b50e:	4686      	mov	lr, r0
 800b510:	4690      	mov	r8, r2
 800b512:	d801      	bhi.n	800b518 <_strtol_l.isra.0+0x10>
 800b514:	2b01      	cmp	r3, #1
 800b516:	d106      	bne.n	800b526 <_strtol_l.isra.0+0x1e>
 800b518:	f7fd ff10 	bl	800933c <__errno>
 800b51c:	2316      	movs	r3, #22
 800b51e:	6003      	str	r3, [r0, #0]
 800b520:	2000      	movs	r0, #0
 800b522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b526:	4834      	ldr	r0, [pc, #208]	@ (800b5f8 <_strtol_l.isra.0+0xf0>)
 800b528:	460d      	mov	r5, r1
 800b52a:	462a      	mov	r2, r5
 800b52c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b530:	5d06      	ldrb	r6, [r0, r4]
 800b532:	f016 0608 	ands.w	r6, r6, #8
 800b536:	d1f8      	bne.n	800b52a <_strtol_l.isra.0+0x22>
 800b538:	2c2d      	cmp	r4, #45	@ 0x2d
 800b53a:	d110      	bne.n	800b55e <_strtol_l.isra.0+0x56>
 800b53c:	782c      	ldrb	r4, [r5, #0]
 800b53e:	2601      	movs	r6, #1
 800b540:	1c95      	adds	r5, r2, #2
 800b542:	f033 0210 	bics.w	r2, r3, #16
 800b546:	d115      	bne.n	800b574 <_strtol_l.isra.0+0x6c>
 800b548:	2c30      	cmp	r4, #48	@ 0x30
 800b54a:	d10d      	bne.n	800b568 <_strtol_l.isra.0+0x60>
 800b54c:	782a      	ldrb	r2, [r5, #0]
 800b54e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b552:	2a58      	cmp	r2, #88	@ 0x58
 800b554:	d108      	bne.n	800b568 <_strtol_l.isra.0+0x60>
 800b556:	786c      	ldrb	r4, [r5, #1]
 800b558:	3502      	adds	r5, #2
 800b55a:	2310      	movs	r3, #16
 800b55c:	e00a      	b.n	800b574 <_strtol_l.isra.0+0x6c>
 800b55e:	2c2b      	cmp	r4, #43	@ 0x2b
 800b560:	bf04      	itt	eq
 800b562:	782c      	ldrbeq	r4, [r5, #0]
 800b564:	1c95      	addeq	r5, r2, #2
 800b566:	e7ec      	b.n	800b542 <_strtol_l.isra.0+0x3a>
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1f6      	bne.n	800b55a <_strtol_l.isra.0+0x52>
 800b56c:	2c30      	cmp	r4, #48	@ 0x30
 800b56e:	bf14      	ite	ne
 800b570:	230a      	movne	r3, #10
 800b572:	2308      	moveq	r3, #8
 800b574:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b578:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b57c:	2200      	movs	r2, #0
 800b57e:	fbbc f9f3 	udiv	r9, ip, r3
 800b582:	4610      	mov	r0, r2
 800b584:	fb03 ca19 	mls	sl, r3, r9, ip
 800b588:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b58c:	2f09      	cmp	r7, #9
 800b58e:	d80f      	bhi.n	800b5b0 <_strtol_l.isra.0+0xa8>
 800b590:	463c      	mov	r4, r7
 800b592:	42a3      	cmp	r3, r4
 800b594:	dd1b      	ble.n	800b5ce <_strtol_l.isra.0+0xc6>
 800b596:	1c57      	adds	r7, r2, #1
 800b598:	d007      	beq.n	800b5aa <_strtol_l.isra.0+0xa2>
 800b59a:	4581      	cmp	r9, r0
 800b59c:	d314      	bcc.n	800b5c8 <_strtol_l.isra.0+0xc0>
 800b59e:	d101      	bne.n	800b5a4 <_strtol_l.isra.0+0x9c>
 800b5a0:	45a2      	cmp	sl, r4
 800b5a2:	db11      	blt.n	800b5c8 <_strtol_l.isra.0+0xc0>
 800b5a4:	fb00 4003 	mla	r0, r0, r3, r4
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5ae:	e7eb      	b.n	800b588 <_strtol_l.isra.0+0x80>
 800b5b0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b5b4:	2f19      	cmp	r7, #25
 800b5b6:	d801      	bhi.n	800b5bc <_strtol_l.isra.0+0xb4>
 800b5b8:	3c37      	subs	r4, #55	@ 0x37
 800b5ba:	e7ea      	b.n	800b592 <_strtol_l.isra.0+0x8a>
 800b5bc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b5c0:	2f19      	cmp	r7, #25
 800b5c2:	d804      	bhi.n	800b5ce <_strtol_l.isra.0+0xc6>
 800b5c4:	3c57      	subs	r4, #87	@ 0x57
 800b5c6:	e7e4      	b.n	800b592 <_strtol_l.isra.0+0x8a>
 800b5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b5cc:	e7ed      	b.n	800b5aa <_strtol_l.isra.0+0xa2>
 800b5ce:	1c53      	adds	r3, r2, #1
 800b5d0:	d108      	bne.n	800b5e4 <_strtol_l.isra.0+0xdc>
 800b5d2:	2322      	movs	r3, #34	@ 0x22
 800b5d4:	f8ce 3000 	str.w	r3, [lr]
 800b5d8:	4660      	mov	r0, ip
 800b5da:	f1b8 0f00 	cmp.w	r8, #0
 800b5de:	d0a0      	beq.n	800b522 <_strtol_l.isra.0+0x1a>
 800b5e0:	1e69      	subs	r1, r5, #1
 800b5e2:	e006      	b.n	800b5f2 <_strtol_l.isra.0+0xea>
 800b5e4:	b106      	cbz	r6, 800b5e8 <_strtol_l.isra.0+0xe0>
 800b5e6:	4240      	negs	r0, r0
 800b5e8:	f1b8 0f00 	cmp.w	r8, #0
 800b5ec:	d099      	beq.n	800b522 <_strtol_l.isra.0+0x1a>
 800b5ee:	2a00      	cmp	r2, #0
 800b5f0:	d1f6      	bne.n	800b5e0 <_strtol_l.isra.0+0xd8>
 800b5f2:	f8c8 1000 	str.w	r1, [r8]
 800b5f6:	e794      	b.n	800b522 <_strtol_l.isra.0+0x1a>
 800b5f8:	0800d431 	.word	0x0800d431

0800b5fc <_strtol_r>:
 800b5fc:	f7ff bf84 	b.w	800b508 <_strtol_l.isra.0>

0800b600 <__ssputs_r>:
 800b600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b604:	688e      	ldr	r6, [r1, #8]
 800b606:	461f      	mov	r7, r3
 800b608:	42be      	cmp	r6, r7
 800b60a:	680b      	ldr	r3, [r1, #0]
 800b60c:	4682      	mov	sl, r0
 800b60e:	460c      	mov	r4, r1
 800b610:	4690      	mov	r8, r2
 800b612:	d82d      	bhi.n	800b670 <__ssputs_r+0x70>
 800b614:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b618:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b61c:	d026      	beq.n	800b66c <__ssputs_r+0x6c>
 800b61e:	6965      	ldr	r5, [r4, #20]
 800b620:	6909      	ldr	r1, [r1, #16]
 800b622:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b626:	eba3 0901 	sub.w	r9, r3, r1
 800b62a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b62e:	1c7b      	adds	r3, r7, #1
 800b630:	444b      	add	r3, r9
 800b632:	106d      	asrs	r5, r5, #1
 800b634:	429d      	cmp	r5, r3
 800b636:	bf38      	it	cc
 800b638:	461d      	movcc	r5, r3
 800b63a:	0553      	lsls	r3, r2, #21
 800b63c:	d527      	bpl.n	800b68e <__ssputs_r+0x8e>
 800b63e:	4629      	mov	r1, r5
 800b640:	f7fc fcd8 	bl	8007ff4 <_malloc_r>
 800b644:	4606      	mov	r6, r0
 800b646:	b360      	cbz	r0, 800b6a2 <__ssputs_r+0xa2>
 800b648:	6921      	ldr	r1, [r4, #16]
 800b64a:	464a      	mov	r2, r9
 800b64c:	f7fd fea3 	bl	8009396 <memcpy>
 800b650:	89a3      	ldrh	r3, [r4, #12]
 800b652:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b65a:	81a3      	strh	r3, [r4, #12]
 800b65c:	6126      	str	r6, [r4, #16]
 800b65e:	6165      	str	r5, [r4, #20]
 800b660:	444e      	add	r6, r9
 800b662:	eba5 0509 	sub.w	r5, r5, r9
 800b666:	6026      	str	r6, [r4, #0]
 800b668:	60a5      	str	r5, [r4, #8]
 800b66a:	463e      	mov	r6, r7
 800b66c:	42be      	cmp	r6, r7
 800b66e:	d900      	bls.n	800b672 <__ssputs_r+0x72>
 800b670:	463e      	mov	r6, r7
 800b672:	6820      	ldr	r0, [r4, #0]
 800b674:	4632      	mov	r2, r6
 800b676:	4641      	mov	r1, r8
 800b678:	f7fd fd5e 	bl	8009138 <memmove>
 800b67c:	68a3      	ldr	r3, [r4, #8]
 800b67e:	1b9b      	subs	r3, r3, r6
 800b680:	60a3      	str	r3, [r4, #8]
 800b682:	6823      	ldr	r3, [r4, #0]
 800b684:	4433      	add	r3, r6
 800b686:	6023      	str	r3, [r4, #0]
 800b688:	2000      	movs	r0, #0
 800b68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b68e:	462a      	mov	r2, r5
 800b690:	f7fc fd3c 	bl	800810c <_realloc_r>
 800b694:	4606      	mov	r6, r0
 800b696:	2800      	cmp	r0, #0
 800b698:	d1e0      	bne.n	800b65c <__ssputs_r+0x5c>
 800b69a:	6921      	ldr	r1, [r4, #16]
 800b69c:	4650      	mov	r0, sl
 800b69e:	f7fe fc7d 	bl	8009f9c <_free_r>
 800b6a2:	230c      	movs	r3, #12
 800b6a4:	f8ca 3000 	str.w	r3, [sl]
 800b6a8:	89a3      	ldrh	r3, [r4, #12]
 800b6aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6ae:	81a3      	strh	r3, [r4, #12]
 800b6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b4:	e7e9      	b.n	800b68a <__ssputs_r+0x8a>
	...

0800b6b8 <_svfiprintf_r>:
 800b6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6bc:	4698      	mov	r8, r3
 800b6be:	898b      	ldrh	r3, [r1, #12]
 800b6c0:	061b      	lsls	r3, r3, #24
 800b6c2:	b09d      	sub	sp, #116	@ 0x74
 800b6c4:	4607      	mov	r7, r0
 800b6c6:	460d      	mov	r5, r1
 800b6c8:	4614      	mov	r4, r2
 800b6ca:	d510      	bpl.n	800b6ee <_svfiprintf_r+0x36>
 800b6cc:	690b      	ldr	r3, [r1, #16]
 800b6ce:	b973      	cbnz	r3, 800b6ee <_svfiprintf_r+0x36>
 800b6d0:	2140      	movs	r1, #64	@ 0x40
 800b6d2:	f7fc fc8f 	bl	8007ff4 <_malloc_r>
 800b6d6:	6028      	str	r0, [r5, #0]
 800b6d8:	6128      	str	r0, [r5, #16]
 800b6da:	b930      	cbnz	r0, 800b6ea <_svfiprintf_r+0x32>
 800b6dc:	230c      	movs	r3, #12
 800b6de:	603b      	str	r3, [r7, #0]
 800b6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e4:	b01d      	add	sp, #116	@ 0x74
 800b6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ea:	2340      	movs	r3, #64	@ 0x40
 800b6ec:	616b      	str	r3, [r5, #20]
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6f2:	2320      	movs	r3, #32
 800b6f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b6f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6fc:	2330      	movs	r3, #48	@ 0x30
 800b6fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b89c <_svfiprintf_r+0x1e4>
 800b702:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b706:	f04f 0901 	mov.w	r9, #1
 800b70a:	4623      	mov	r3, r4
 800b70c:	469a      	mov	sl, r3
 800b70e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b712:	b10a      	cbz	r2, 800b718 <_svfiprintf_r+0x60>
 800b714:	2a25      	cmp	r2, #37	@ 0x25
 800b716:	d1f9      	bne.n	800b70c <_svfiprintf_r+0x54>
 800b718:	ebba 0b04 	subs.w	fp, sl, r4
 800b71c:	d00b      	beq.n	800b736 <_svfiprintf_r+0x7e>
 800b71e:	465b      	mov	r3, fp
 800b720:	4622      	mov	r2, r4
 800b722:	4629      	mov	r1, r5
 800b724:	4638      	mov	r0, r7
 800b726:	f7ff ff6b 	bl	800b600 <__ssputs_r>
 800b72a:	3001      	adds	r0, #1
 800b72c:	f000 80a7 	beq.w	800b87e <_svfiprintf_r+0x1c6>
 800b730:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b732:	445a      	add	r2, fp
 800b734:	9209      	str	r2, [sp, #36]	@ 0x24
 800b736:	f89a 3000 	ldrb.w	r3, [sl]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f000 809f 	beq.w	800b87e <_svfiprintf_r+0x1c6>
 800b740:	2300      	movs	r3, #0
 800b742:	f04f 32ff 	mov.w	r2, #4294967295
 800b746:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b74a:	f10a 0a01 	add.w	sl, sl, #1
 800b74e:	9304      	str	r3, [sp, #16]
 800b750:	9307      	str	r3, [sp, #28]
 800b752:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b756:	931a      	str	r3, [sp, #104]	@ 0x68
 800b758:	4654      	mov	r4, sl
 800b75a:	2205      	movs	r2, #5
 800b75c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b760:	484e      	ldr	r0, [pc, #312]	@ (800b89c <_svfiprintf_r+0x1e4>)
 800b762:	f7f4 fdbd 	bl	80002e0 <memchr>
 800b766:	9a04      	ldr	r2, [sp, #16]
 800b768:	b9d8      	cbnz	r0, 800b7a2 <_svfiprintf_r+0xea>
 800b76a:	06d0      	lsls	r0, r2, #27
 800b76c:	bf44      	itt	mi
 800b76e:	2320      	movmi	r3, #32
 800b770:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b774:	0711      	lsls	r1, r2, #28
 800b776:	bf44      	itt	mi
 800b778:	232b      	movmi	r3, #43	@ 0x2b
 800b77a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b77e:	f89a 3000 	ldrb.w	r3, [sl]
 800b782:	2b2a      	cmp	r3, #42	@ 0x2a
 800b784:	d015      	beq.n	800b7b2 <_svfiprintf_r+0xfa>
 800b786:	9a07      	ldr	r2, [sp, #28]
 800b788:	4654      	mov	r4, sl
 800b78a:	2000      	movs	r0, #0
 800b78c:	f04f 0c0a 	mov.w	ip, #10
 800b790:	4621      	mov	r1, r4
 800b792:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b796:	3b30      	subs	r3, #48	@ 0x30
 800b798:	2b09      	cmp	r3, #9
 800b79a:	d94b      	bls.n	800b834 <_svfiprintf_r+0x17c>
 800b79c:	b1b0      	cbz	r0, 800b7cc <_svfiprintf_r+0x114>
 800b79e:	9207      	str	r2, [sp, #28]
 800b7a0:	e014      	b.n	800b7cc <_svfiprintf_r+0x114>
 800b7a2:	eba0 0308 	sub.w	r3, r0, r8
 800b7a6:	fa09 f303 	lsl.w	r3, r9, r3
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	9304      	str	r3, [sp, #16]
 800b7ae:	46a2      	mov	sl, r4
 800b7b0:	e7d2      	b.n	800b758 <_svfiprintf_r+0xa0>
 800b7b2:	9b03      	ldr	r3, [sp, #12]
 800b7b4:	1d19      	adds	r1, r3, #4
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	9103      	str	r1, [sp, #12]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	bfbb      	ittet	lt
 800b7be:	425b      	neglt	r3, r3
 800b7c0:	f042 0202 	orrlt.w	r2, r2, #2
 800b7c4:	9307      	strge	r3, [sp, #28]
 800b7c6:	9307      	strlt	r3, [sp, #28]
 800b7c8:	bfb8      	it	lt
 800b7ca:	9204      	strlt	r2, [sp, #16]
 800b7cc:	7823      	ldrb	r3, [r4, #0]
 800b7ce:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7d0:	d10a      	bne.n	800b7e8 <_svfiprintf_r+0x130>
 800b7d2:	7863      	ldrb	r3, [r4, #1]
 800b7d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7d6:	d132      	bne.n	800b83e <_svfiprintf_r+0x186>
 800b7d8:	9b03      	ldr	r3, [sp, #12]
 800b7da:	1d1a      	adds	r2, r3, #4
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	9203      	str	r2, [sp, #12]
 800b7e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b7e4:	3402      	adds	r4, #2
 800b7e6:	9305      	str	r3, [sp, #20]
 800b7e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b8ac <_svfiprintf_r+0x1f4>
 800b7ec:	7821      	ldrb	r1, [r4, #0]
 800b7ee:	2203      	movs	r2, #3
 800b7f0:	4650      	mov	r0, sl
 800b7f2:	f7f4 fd75 	bl	80002e0 <memchr>
 800b7f6:	b138      	cbz	r0, 800b808 <_svfiprintf_r+0x150>
 800b7f8:	9b04      	ldr	r3, [sp, #16]
 800b7fa:	eba0 000a 	sub.w	r0, r0, sl
 800b7fe:	2240      	movs	r2, #64	@ 0x40
 800b800:	4082      	lsls	r2, r0
 800b802:	4313      	orrs	r3, r2
 800b804:	3401      	adds	r4, #1
 800b806:	9304      	str	r3, [sp, #16]
 800b808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b80c:	4824      	ldr	r0, [pc, #144]	@ (800b8a0 <_svfiprintf_r+0x1e8>)
 800b80e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b812:	2206      	movs	r2, #6
 800b814:	f7f4 fd64 	bl	80002e0 <memchr>
 800b818:	2800      	cmp	r0, #0
 800b81a:	d036      	beq.n	800b88a <_svfiprintf_r+0x1d2>
 800b81c:	4b21      	ldr	r3, [pc, #132]	@ (800b8a4 <_svfiprintf_r+0x1ec>)
 800b81e:	bb1b      	cbnz	r3, 800b868 <_svfiprintf_r+0x1b0>
 800b820:	9b03      	ldr	r3, [sp, #12]
 800b822:	3307      	adds	r3, #7
 800b824:	f023 0307 	bic.w	r3, r3, #7
 800b828:	3308      	adds	r3, #8
 800b82a:	9303      	str	r3, [sp, #12]
 800b82c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b82e:	4433      	add	r3, r6
 800b830:	9309      	str	r3, [sp, #36]	@ 0x24
 800b832:	e76a      	b.n	800b70a <_svfiprintf_r+0x52>
 800b834:	fb0c 3202 	mla	r2, ip, r2, r3
 800b838:	460c      	mov	r4, r1
 800b83a:	2001      	movs	r0, #1
 800b83c:	e7a8      	b.n	800b790 <_svfiprintf_r+0xd8>
 800b83e:	2300      	movs	r3, #0
 800b840:	3401      	adds	r4, #1
 800b842:	9305      	str	r3, [sp, #20]
 800b844:	4619      	mov	r1, r3
 800b846:	f04f 0c0a 	mov.w	ip, #10
 800b84a:	4620      	mov	r0, r4
 800b84c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b850:	3a30      	subs	r2, #48	@ 0x30
 800b852:	2a09      	cmp	r2, #9
 800b854:	d903      	bls.n	800b85e <_svfiprintf_r+0x1a6>
 800b856:	2b00      	cmp	r3, #0
 800b858:	d0c6      	beq.n	800b7e8 <_svfiprintf_r+0x130>
 800b85a:	9105      	str	r1, [sp, #20]
 800b85c:	e7c4      	b.n	800b7e8 <_svfiprintf_r+0x130>
 800b85e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b862:	4604      	mov	r4, r0
 800b864:	2301      	movs	r3, #1
 800b866:	e7f0      	b.n	800b84a <_svfiprintf_r+0x192>
 800b868:	ab03      	add	r3, sp, #12
 800b86a:	9300      	str	r3, [sp, #0]
 800b86c:	462a      	mov	r2, r5
 800b86e:	4b0e      	ldr	r3, [pc, #56]	@ (800b8a8 <_svfiprintf_r+0x1f0>)
 800b870:	a904      	add	r1, sp, #16
 800b872:	4638      	mov	r0, r7
 800b874:	f7fc fd08 	bl	8008288 <_printf_float>
 800b878:	1c42      	adds	r2, r0, #1
 800b87a:	4606      	mov	r6, r0
 800b87c:	d1d6      	bne.n	800b82c <_svfiprintf_r+0x174>
 800b87e:	89ab      	ldrh	r3, [r5, #12]
 800b880:	065b      	lsls	r3, r3, #25
 800b882:	f53f af2d 	bmi.w	800b6e0 <_svfiprintf_r+0x28>
 800b886:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b888:	e72c      	b.n	800b6e4 <_svfiprintf_r+0x2c>
 800b88a:	ab03      	add	r3, sp, #12
 800b88c:	9300      	str	r3, [sp, #0]
 800b88e:	462a      	mov	r2, r5
 800b890:	4b05      	ldr	r3, [pc, #20]	@ (800b8a8 <_svfiprintf_r+0x1f0>)
 800b892:	a904      	add	r1, sp, #16
 800b894:	4638      	mov	r0, r7
 800b896:	f7fc ff7f 	bl	8008798 <_printf_i>
 800b89a:	e7ed      	b.n	800b878 <_svfiprintf_r+0x1c0>
 800b89c:	0800d08e 	.word	0x0800d08e
 800b8a0:	0800d098 	.word	0x0800d098
 800b8a4:	08008289 	.word	0x08008289
 800b8a8:	0800b601 	.word	0x0800b601
 800b8ac:	0800d094 	.word	0x0800d094

0800b8b0 <__sfputc_r>:
 800b8b0:	6893      	ldr	r3, [r2, #8]
 800b8b2:	3b01      	subs	r3, #1
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	b410      	push	{r4}
 800b8b8:	6093      	str	r3, [r2, #8]
 800b8ba:	da08      	bge.n	800b8ce <__sfputc_r+0x1e>
 800b8bc:	6994      	ldr	r4, [r2, #24]
 800b8be:	42a3      	cmp	r3, r4
 800b8c0:	db01      	blt.n	800b8c6 <__sfputc_r+0x16>
 800b8c2:	290a      	cmp	r1, #10
 800b8c4:	d103      	bne.n	800b8ce <__sfputc_r+0x1e>
 800b8c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8ca:	f000 b9df 	b.w	800bc8c <__swbuf_r>
 800b8ce:	6813      	ldr	r3, [r2, #0]
 800b8d0:	1c58      	adds	r0, r3, #1
 800b8d2:	6010      	str	r0, [r2, #0]
 800b8d4:	7019      	strb	r1, [r3, #0]
 800b8d6:	4608      	mov	r0, r1
 800b8d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8dc:	4770      	bx	lr

0800b8de <__sfputs_r>:
 800b8de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8e0:	4606      	mov	r6, r0
 800b8e2:	460f      	mov	r7, r1
 800b8e4:	4614      	mov	r4, r2
 800b8e6:	18d5      	adds	r5, r2, r3
 800b8e8:	42ac      	cmp	r4, r5
 800b8ea:	d101      	bne.n	800b8f0 <__sfputs_r+0x12>
 800b8ec:	2000      	movs	r0, #0
 800b8ee:	e007      	b.n	800b900 <__sfputs_r+0x22>
 800b8f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8f4:	463a      	mov	r2, r7
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	f7ff ffda 	bl	800b8b0 <__sfputc_r>
 800b8fc:	1c43      	adds	r3, r0, #1
 800b8fe:	d1f3      	bne.n	800b8e8 <__sfputs_r+0xa>
 800b900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b904 <_vfiprintf_r>:
 800b904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b908:	460d      	mov	r5, r1
 800b90a:	b09d      	sub	sp, #116	@ 0x74
 800b90c:	4614      	mov	r4, r2
 800b90e:	4698      	mov	r8, r3
 800b910:	4606      	mov	r6, r0
 800b912:	b118      	cbz	r0, 800b91c <_vfiprintf_r+0x18>
 800b914:	6a03      	ldr	r3, [r0, #32]
 800b916:	b90b      	cbnz	r3, 800b91c <_vfiprintf_r+0x18>
 800b918:	f7fd faee 	bl	8008ef8 <__sinit>
 800b91c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b91e:	07d9      	lsls	r1, r3, #31
 800b920:	d405      	bmi.n	800b92e <_vfiprintf_r+0x2a>
 800b922:	89ab      	ldrh	r3, [r5, #12]
 800b924:	059a      	lsls	r2, r3, #22
 800b926:	d402      	bmi.n	800b92e <_vfiprintf_r+0x2a>
 800b928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b92a:	f7fd fd32 	bl	8009392 <__retarget_lock_acquire_recursive>
 800b92e:	89ab      	ldrh	r3, [r5, #12]
 800b930:	071b      	lsls	r3, r3, #28
 800b932:	d501      	bpl.n	800b938 <_vfiprintf_r+0x34>
 800b934:	692b      	ldr	r3, [r5, #16]
 800b936:	b99b      	cbnz	r3, 800b960 <_vfiprintf_r+0x5c>
 800b938:	4629      	mov	r1, r5
 800b93a:	4630      	mov	r0, r6
 800b93c:	f000 f9e4 	bl	800bd08 <__swsetup_r>
 800b940:	b170      	cbz	r0, 800b960 <_vfiprintf_r+0x5c>
 800b942:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b944:	07dc      	lsls	r4, r3, #31
 800b946:	d504      	bpl.n	800b952 <_vfiprintf_r+0x4e>
 800b948:	f04f 30ff 	mov.w	r0, #4294967295
 800b94c:	b01d      	add	sp, #116	@ 0x74
 800b94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b952:	89ab      	ldrh	r3, [r5, #12]
 800b954:	0598      	lsls	r0, r3, #22
 800b956:	d4f7      	bmi.n	800b948 <_vfiprintf_r+0x44>
 800b958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b95a:	f7fd fd1b 	bl	8009394 <__retarget_lock_release_recursive>
 800b95e:	e7f3      	b.n	800b948 <_vfiprintf_r+0x44>
 800b960:	2300      	movs	r3, #0
 800b962:	9309      	str	r3, [sp, #36]	@ 0x24
 800b964:	2320      	movs	r3, #32
 800b966:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b96a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b96e:	2330      	movs	r3, #48	@ 0x30
 800b970:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bb20 <_vfiprintf_r+0x21c>
 800b974:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b978:	f04f 0901 	mov.w	r9, #1
 800b97c:	4623      	mov	r3, r4
 800b97e:	469a      	mov	sl, r3
 800b980:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b984:	b10a      	cbz	r2, 800b98a <_vfiprintf_r+0x86>
 800b986:	2a25      	cmp	r2, #37	@ 0x25
 800b988:	d1f9      	bne.n	800b97e <_vfiprintf_r+0x7a>
 800b98a:	ebba 0b04 	subs.w	fp, sl, r4
 800b98e:	d00b      	beq.n	800b9a8 <_vfiprintf_r+0xa4>
 800b990:	465b      	mov	r3, fp
 800b992:	4622      	mov	r2, r4
 800b994:	4629      	mov	r1, r5
 800b996:	4630      	mov	r0, r6
 800b998:	f7ff ffa1 	bl	800b8de <__sfputs_r>
 800b99c:	3001      	adds	r0, #1
 800b99e:	f000 80a7 	beq.w	800baf0 <_vfiprintf_r+0x1ec>
 800b9a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9a4:	445a      	add	r2, fp
 800b9a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9a8:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f000 809f 	beq.w	800baf0 <_vfiprintf_r+0x1ec>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9bc:	f10a 0a01 	add.w	sl, sl, #1
 800b9c0:	9304      	str	r3, [sp, #16]
 800b9c2:	9307      	str	r3, [sp, #28]
 800b9c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9ca:	4654      	mov	r4, sl
 800b9cc:	2205      	movs	r2, #5
 800b9ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d2:	4853      	ldr	r0, [pc, #332]	@ (800bb20 <_vfiprintf_r+0x21c>)
 800b9d4:	f7f4 fc84 	bl	80002e0 <memchr>
 800b9d8:	9a04      	ldr	r2, [sp, #16]
 800b9da:	b9d8      	cbnz	r0, 800ba14 <_vfiprintf_r+0x110>
 800b9dc:	06d1      	lsls	r1, r2, #27
 800b9de:	bf44      	itt	mi
 800b9e0:	2320      	movmi	r3, #32
 800b9e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9e6:	0713      	lsls	r3, r2, #28
 800b9e8:	bf44      	itt	mi
 800b9ea:	232b      	movmi	r3, #43	@ 0x2b
 800b9ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b9f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9f6:	d015      	beq.n	800ba24 <_vfiprintf_r+0x120>
 800b9f8:	9a07      	ldr	r2, [sp, #28]
 800b9fa:	4654      	mov	r4, sl
 800b9fc:	2000      	movs	r0, #0
 800b9fe:	f04f 0c0a 	mov.w	ip, #10
 800ba02:	4621      	mov	r1, r4
 800ba04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba08:	3b30      	subs	r3, #48	@ 0x30
 800ba0a:	2b09      	cmp	r3, #9
 800ba0c:	d94b      	bls.n	800baa6 <_vfiprintf_r+0x1a2>
 800ba0e:	b1b0      	cbz	r0, 800ba3e <_vfiprintf_r+0x13a>
 800ba10:	9207      	str	r2, [sp, #28]
 800ba12:	e014      	b.n	800ba3e <_vfiprintf_r+0x13a>
 800ba14:	eba0 0308 	sub.w	r3, r0, r8
 800ba18:	fa09 f303 	lsl.w	r3, r9, r3
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	9304      	str	r3, [sp, #16]
 800ba20:	46a2      	mov	sl, r4
 800ba22:	e7d2      	b.n	800b9ca <_vfiprintf_r+0xc6>
 800ba24:	9b03      	ldr	r3, [sp, #12]
 800ba26:	1d19      	adds	r1, r3, #4
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	9103      	str	r1, [sp, #12]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	bfbb      	ittet	lt
 800ba30:	425b      	neglt	r3, r3
 800ba32:	f042 0202 	orrlt.w	r2, r2, #2
 800ba36:	9307      	strge	r3, [sp, #28]
 800ba38:	9307      	strlt	r3, [sp, #28]
 800ba3a:	bfb8      	it	lt
 800ba3c:	9204      	strlt	r2, [sp, #16]
 800ba3e:	7823      	ldrb	r3, [r4, #0]
 800ba40:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba42:	d10a      	bne.n	800ba5a <_vfiprintf_r+0x156>
 800ba44:	7863      	ldrb	r3, [r4, #1]
 800ba46:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba48:	d132      	bne.n	800bab0 <_vfiprintf_r+0x1ac>
 800ba4a:	9b03      	ldr	r3, [sp, #12]
 800ba4c:	1d1a      	adds	r2, r3, #4
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	9203      	str	r2, [sp, #12]
 800ba52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba56:	3402      	adds	r4, #2
 800ba58:	9305      	str	r3, [sp, #20]
 800ba5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bb30 <_vfiprintf_r+0x22c>
 800ba5e:	7821      	ldrb	r1, [r4, #0]
 800ba60:	2203      	movs	r2, #3
 800ba62:	4650      	mov	r0, sl
 800ba64:	f7f4 fc3c 	bl	80002e0 <memchr>
 800ba68:	b138      	cbz	r0, 800ba7a <_vfiprintf_r+0x176>
 800ba6a:	9b04      	ldr	r3, [sp, #16]
 800ba6c:	eba0 000a 	sub.w	r0, r0, sl
 800ba70:	2240      	movs	r2, #64	@ 0x40
 800ba72:	4082      	lsls	r2, r0
 800ba74:	4313      	orrs	r3, r2
 800ba76:	3401      	adds	r4, #1
 800ba78:	9304      	str	r3, [sp, #16]
 800ba7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba7e:	4829      	ldr	r0, [pc, #164]	@ (800bb24 <_vfiprintf_r+0x220>)
 800ba80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba84:	2206      	movs	r2, #6
 800ba86:	f7f4 fc2b 	bl	80002e0 <memchr>
 800ba8a:	2800      	cmp	r0, #0
 800ba8c:	d03f      	beq.n	800bb0e <_vfiprintf_r+0x20a>
 800ba8e:	4b26      	ldr	r3, [pc, #152]	@ (800bb28 <_vfiprintf_r+0x224>)
 800ba90:	bb1b      	cbnz	r3, 800bada <_vfiprintf_r+0x1d6>
 800ba92:	9b03      	ldr	r3, [sp, #12]
 800ba94:	3307      	adds	r3, #7
 800ba96:	f023 0307 	bic.w	r3, r3, #7
 800ba9a:	3308      	adds	r3, #8
 800ba9c:	9303      	str	r3, [sp, #12]
 800ba9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baa0:	443b      	add	r3, r7
 800baa2:	9309      	str	r3, [sp, #36]	@ 0x24
 800baa4:	e76a      	b.n	800b97c <_vfiprintf_r+0x78>
 800baa6:	fb0c 3202 	mla	r2, ip, r2, r3
 800baaa:	460c      	mov	r4, r1
 800baac:	2001      	movs	r0, #1
 800baae:	e7a8      	b.n	800ba02 <_vfiprintf_r+0xfe>
 800bab0:	2300      	movs	r3, #0
 800bab2:	3401      	adds	r4, #1
 800bab4:	9305      	str	r3, [sp, #20]
 800bab6:	4619      	mov	r1, r3
 800bab8:	f04f 0c0a 	mov.w	ip, #10
 800babc:	4620      	mov	r0, r4
 800babe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bac2:	3a30      	subs	r2, #48	@ 0x30
 800bac4:	2a09      	cmp	r2, #9
 800bac6:	d903      	bls.n	800bad0 <_vfiprintf_r+0x1cc>
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d0c6      	beq.n	800ba5a <_vfiprintf_r+0x156>
 800bacc:	9105      	str	r1, [sp, #20]
 800bace:	e7c4      	b.n	800ba5a <_vfiprintf_r+0x156>
 800bad0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bad4:	4604      	mov	r4, r0
 800bad6:	2301      	movs	r3, #1
 800bad8:	e7f0      	b.n	800babc <_vfiprintf_r+0x1b8>
 800bada:	ab03      	add	r3, sp, #12
 800badc:	9300      	str	r3, [sp, #0]
 800bade:	462a      	mov	r2, r5
 800bae0:	4b12      	ldr	r3, [pc, #72]	@ (800bb2c <_vfiprintf_r+0x228>)
 800bae2:	a904      	add	r1, sp, #16
 800bae4:	4630      	mov	r0, r6
 800bae6:	f7fc fbcf 	bl	8008288 <_printf_float>
 800baea:	4607      	mov	r7, r0
 800baec:	1c78      	adds	r0, r7, #1
 800baee:	d1d6      	bne.n	800ba9e <_vfiprintf_r+0x19a>
 800baf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800baf2:	07d9      	lsls	r1, r3, #31
 800baf4:	d405      	bmi.n	800bb02 <_vfiprintf_r+0x1fe>
 800baf6:	89ab      	ldrh	r3, [r5, #12]
 800baf8:	059a      	lsls	r2, r3, #22
 800bafa:	d402      	bmi.n	800bb02 <_vfiprintf_r+0x1fe>
 800bafc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bafe:	f7fd fc49 	bl	8009394 <__retarget_lock_release_recursive>
 800bb02:	89ab      	ldrh	r3, [r5, #12]
 800bb04:	065b      	lsls	r3, r3, #25
 800bb06:	f53f af1f 	bmi.w	800b948 <_vfiprintf_r+0x44>
 800bb0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb0c:	e71e      	b.n	800b94c <_vfiprintf_r+0x48>
 800bb0e:	ab03      	add	r3, sp, #12
 800bb10:	9300      	str	r3, [sp, #0]
 800bb12:	462a      	mov	r2, r5
 800bb14:	4b05      	ldr	r3, [pc, #20]	@ (800bb2c <_vfiprintf_r+0x228>)
 800bb16:	a904      	add	r1, sp, #16
 800bb18:	4630      	mov	r0, r6
 800bb1a:	f7fc fe3d 	bl	8008798 <_printf_i>
 800bb1e:	e7e4      	b.n	800baea <_vfiprintf_r+0x1e6>
 800bb20:	0800d08e 	.word	0x0800d08e
 800bb24:	0800d098 	.word	0x0800d098
 800bb28:	08008289 	.word	0x08008289
 800bb2c:	0800b8df 	.word	0x0800b8df
 800bb30:	0800d094 	.word	0x0800d094

0800bb34 <__sflush_r>:
 800bb34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb3c:	0716      	lsls	r6, r2, #28
 800bb3e:	4605      	mov	r5, r0
 800bb40:	460c      	mov	r4, r1
 800bb42:	d454      	bmi.n	800bbee <__sflush_r+0xba>
 800bb44:	684b      	ldr	r3, [r1, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	dc02      	bgt.n	800bb50 <__sflush_r+0x1c>
 800bb4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	dd48      	ble.n	800bbe2 <__sflush_r+0xae>
 800bb50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb52:	2e00      	cmp	r6, #0
 800bb54:	d045      	beq.n	800bbe2 <__sflush_r+0xae>
 800bb56:	2300      	movs	r3, #0
 800bb58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bb5c:	682f      	ldr	r7, [r5, #0]
 800bb5e:	6a21      	ldr	r1, [r4, #32]
 800bb60:	602b      	str	r3, [r5, #0]
 800bb62:	d030      	beq.n	800bbc6 <__sflush_r+0x92>
 800bb64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb66:	89a3      	ldrh	r3, [r4, #12]
 800bb68:	0759      	lsls	r1, r3, #29
 800bb6a:	d505      	bpl.n	800bb78 <__sflush_r+0x44>
 800bb6c:	6863      	ldr	r3, [r4, #4]
 800bb6e:	1ad2      	subs	r2, r2, r3
 800bb70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb72:	b10b      	cbz	r3, 800bb78 <__sflush_r+0x44>
 800bb74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb76:	1ad2      	subs	r2, r2, r3
 800bb78:	2300      	movs	r3, #0
 800bb7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb7c:	6a21      	ldr	r1, [r4, #32]
 800bb7e:	4628      	mov	r0, r5
 800bb80:	47b0      	blx	r6
 800bb82:	1c43      	adds	r3, r0, #1
 800bb84:	89a3      	ldrh	r3, [r4, #12]
 800bb86:	d106      	bne.n	800bb96 <__sflush_r+0x62>
 800bb88:	6829      	ldr	r1, [r5, #0]
 800bb8a:	291d      	cmp	r1, #29
 800bb8c:	d82b      	bhi.n	800bbe6 <__sflush_r+0xb2>
 800bb8e:	4a2a      	ldr	r2, [pc, #168]	@ (800bc38 <__sflush_r+0x104>)
 800bb90:	40ca      	lsrs	r2, r1
 800bb92:	07d6      	lsls	r6, r2, #31
 800bb94:	d527      	bpl.n	800bbe6 <__sflush_r+0xb2>
 800bb96:	2200      	movs	r2, #0
 800bb98:	6062      	str	r2, [r4, #4]
 800bb9a:	04d9      	lsls	r1, r3, #19
 800bb9c:	6922      	ldr	r2, [r4, #16]
 800bb9e:	6022      	str	r2, [r4, #0]
 800bba0:	d504      	bpl.n	800bbac <__sflush_r+0x78>
 800bba2:	1c42      	adds	r2, r0, #1
 800bba4:	d101      	bne.n	800bbaa <__sflush_r+0x76>
 800bba6:	682b      	ldr	r3, [r5, #0]
 800bba8:	b903      	cbnz	r3, 800bbac <__sflush_r+0x78>
 800bbaa:	6560      	str	r0, [r4, #84]	@ 0x54
 800bbac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbae:	602f      	str	r7, [r5, #0]
 800bbb0:	b1b9      	cbz	r1, 800bbe2 <__sflush_r+0xae>
 800bbb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbb6:	4299      	cmp	r1, r3
 800bbb8:	d002      	beq.n	800bbc0 <__sflush_r+0x8c>
 800bbba:	4628      	mov	r0, r5
 800bbbc:	f7fe f9ee 	bl	8009f9c <_free_r>
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbc4:	e00d      	b.n	800bbe2 <__sflush_r+0xae>
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	4628      	mov	r0, r5
 800bbca:	47b0      	blx	r6
 800bbcc:	4602      	mov	r2, r0
 800bbce:	1c50      	adds	r0, r2, #1
 800bbd0:	d1c9      	bne.n	800bb66 <__sflush_r+0x32>
 800bbd2:	682b      	ldr	r3, [r5, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d0c6      	beq.n	800bb66 <__sflush_r+0x32>
 800bbd8:	2b1d      	cmp	r3, #29
 800bbda:	d001      	beq.n	800bbe0 <__sflush_r+0xac>
 800bbdc:	2b16      	cmp	r3, #22
 800bbde:	d11e      	bne.n	800bc1e <__sflush_r+0xea>
 800bbe0:	602f      	str	r7, [r5, #0]
 800bbe2:	2000      	movs	r0, #0
 800bbe4:	e022      	b.n	800bc2c <__sflush_r+0xf8>
 800bbe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbea:	b21b      	sxth	r3, r3
 800bbec:	e01b      	b.n	800bc26 <__sflush_r+0xf2>
 800bbee:	690f      	ldr	r7, [r1, #16]
 800bbf0:	2f00      	cmp	r7, #0
 800bbf2:	d0f6      	beq.n	800bbe2 <__sflush_r+0xae>
 800bbf4:	0793      	lsls	r3, r2, #30
 800bbf6:	680e      	ldr	r6, [r1, #0]
 800bbf8:	bf08      	it	eq
 800bbfa:	694b      	ldreq	r3, [r1, #20]
 800bbfc:	600f      	str	r7, [r1, #0]
 800bbfe:	bf18      	it	ne
 800bc00:	2300      	movne	r3, #0
 800bc02:	eba6 0807 	sub.w	r8, r6, r7
 800bc06:	608b      	str	r3, [r1, #8]
 800bc08:	f1b8 0f00 	cmp.w	r8, #0
 800bc0c:	dde9      	ble.n	800bbe2 <__sflush_r+0xae>
 800bc0e:	6a21      	ldr	r1, [r4, #32]
 800bc10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bc12:	4643      	mov	r3, r8
 800bc14:	463a      	mov	r2, r7
 800bc16:	4628      	mov	r0, r5
 800bc18:	47b0      	blx	r6
 800bc1a:	2800      	cmp	r0, #0
 800bc1c:	dc08      	bgt.n	800bc30 <__sflush_r+0xfc>
 800bc1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc26:	81a3      	strh	r3, [r4, #12]
 800bc28:	f04f 30ff 	mov.w	r0, #4294967295
 800bc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc30:	4407      	add	r7, r0
 800bc32:	eba8 0800 	sub.w	r8, r8, r0
 800bc36:	e7e7      	b.n	800bc08 <__sflush_r+0xd4>
 800bc38:	20400001 	.word	0x20400001

0800bc3c <_fflush_r>:
 800bc3c:	b538      	push	{r3, r4, r5, lr}
 800bc3e:	690b      	ldr	r3, [r1, #16]
 800bc40:	4605      	mov	r5, r0
 800bc42:	460c      	mov	r4, r1
 800bc44:	b913      	cbnz	r3, 800bc4c <_fflush_r+0x10>
 800bc46:	2500      	movs	r5, #0
 800bc48:	4628      	mov	r0, r5
 800bc4a:	bd38      	pop	{r3, r4, r5, pc}
 800bc4c:	b118      	cbz	r0, 800bc56 <_fflush_r+0x1a>
 800bc4e:	6a03      	ldr	r3, [r0, #32]
 800bc50:	b90b      	cbnz	r3, 800bc56 <_fflush_r+0x1a>
 800bc52:	f7fd f951 	bl	8008ef8 <__sinit>
 800bc56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d0f3      	beq.n	800bc46 <_fflush_r+0xa>
 800bc5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bc60:	07d0      	lsls	r0, r2, #31
 800bc62:	d404      	bmi.n	800bc6e <_fflush_r+0x32>
 800bc64:	0599      	lsls	r1, r3, #22
 800bc66:	d402      	bmi.n	800bc6e <_fflush_r+0x32>
 800bc68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc6a:	f7fd fb92 	bl	8009392 <__retarget_lock_acquire_recursive>
 800bc6e:	4628      	mov	r0, r5
 800bc70:	4621      	mov	r1, r4
 800bc72:	f7ff ff5f 	bl	800bb34 <__sflush_r>
 800bc76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc78:	07da      	lsls	r2, r3, #31
 800bc7a:	4605      	mov	r5, r0
 800bc7c:	d4e4      	bmi.n	800bc48 <_fflush_r+0xc>
 800bc7e:	89a3      	ldrh	r3, [r4, #12]
 800bc80:	059b      	lsls	r3, r3, #22
 800bc82:	d4e1      	bmi.n	800bc48 <_fflush_r+0xc>
 800bc84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc86:	f7fd fb85 	bl	8009394 <__retarget_lock_release_recursive>
 800bc8a:	e7dd      	b.n	800bc48 <_fflush_r+0xc>

0800bc8c <__swbuf_r>:
 800bc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc8e:	460e      	mov	r6, r1
 800bc90:	4614      	mov	r4, r2
 800bc92:	4605      	mov	r5, r0
 800bc94:	b118      	cbz	r0, 800bc9e <__swbuf_r+0x12>
 800bc96:	6a03      	ldr	r3, [r0, #32]
 800bc98:	b90b      	cbnz	r3, 800bc9e <__swbuf_r+0x12>
 800bc9a:	f7fd f92d 	bl	8008ef8 <__sinit>
 800bc9e:	69a3      	ldr	r3, [r4, #24]
 800bca0:	60a3      	str	r3, [r4, #8]
 800bca2:	89a3      	ldrh	r3, [r4, #12]
 800bca4:	071a      	lsls	r2, r3, #28
 800bca6:	d501      	bpl.n	800bcac <__swbuf_r+0x20>
 800bca8:	6923      	ldr	r3, [r4, #16]
 800bcaa:	b943      	cbnz	r3, 800bcbe <__swbuf_r+0x32>
 800bcac:	4621      	mov	r1, r4
 800bcae:	4628      	mov	r0, r5
 800bcb0:	f000 f82a 	bl	800bd08 <__swsetup_r>
 800bcb4:	b118      	cbz	r0, 800bcbe <__swbuf_r+0x32>
 800bcb6:	f04f 37ff 	mov.w	r7, #4294967295
 800bcba:	4638      	mov	r0, r7
 800bcbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcbe:	6823      	ldr	r3, [r4, #0]
 800bcc0:	6922      	ldr	r2, [r4, #16]
 800bcc2:	1a98      	subs	r0, r3, r2
 800bcc4:	6963      	ldr	r3, [r4, #20]
 800bcc6:	b2f6      	uxtb	r6, r6
 800bcc8:	4283      	cmp	r3, r0
 800bcca:	4637      	mov	r7, r6
 800bccc:	dc05      	bgt.n	800bcda <__swbuf_r+0x4e>
 800bcce:	4621      	mov	r1, r4
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	f7ff ffb3 	bl	800bc3c <_fflush_r>
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	d1ed      	bne.n	800bcb6 <__swbuf_r+0x2a>
 800bcda:	68a3      	ldr	r3, [r4, #8]
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	60a3      	str	r3, [r4, #8]
 800bce0:	6823      	ldr	r3, [r4, #0]
 800bce2:	1c5a      	adds	r2, r3, #1
 800bce4:	6022      	str	r2, [r4, #0]
 800bce6:	701e      	strb	r6, [r3, #0]
 800bce8:	6962      	ldr	r2, [r4, #20]
 800bcea:	1c43      	adds	r3, r0, #1
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d004      	beq.n	800bcfa <__swbuf_r+0x6e>
 800bcf0:	89a3      	ldrh	r3, [r4, #12]
 800bcf2:	07db      	lsls	r3, r3, #31
 800bcf4:	d5e1      	bpl.n	800bcba <__swbuf_r+0x2e>
 800bcf6:	2e0a      	cmp	r6, #10
 800bcf8:	d1df      	bne.n	800bcba <__swbuf_r+0x2e>
 800bcfa:	4621      	mov	r1, r4
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	f7ff ff9d 	bl	800bc3c <_fflush_r>
 800bd02:	2800      	cmp	r0, #0
 800bd04:	d0d9      	beq.n	800bcba <__swbuf_r+0x2e>
 800bd06:	e7d6      	b.n	800bcb6 <__swbuf_r+0x2a>

0800bd08 <__swsetup_r>:
 800bd08:	b538      	push	{r3, r4, r5, lr}
 800bd0a:	4b29      	ldr	r3, [pc, #164]	@ (800bdb0 <__swsetup_r+0xa8>)
 800bd0c:	4605      	mov	r5, r0
 800bd0e:	6818      	ldr	r0, [r3, #0]
 800bd10:	460c      	mov	r4, r1
 800bd12:	b118      	cbz	r0, 800bd1c <__swsetup_r+0x14>
 800bd14:	6a03      	ldr	r3, [r0, #32]
 800bd16:	b90b      	cbnz	r3, 800bd1c <__swsetup_r+0x14>
 800bd18:	f7fd f8ee 	bl	8008ef8 <__sinit>
 800bd1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd20:	0719      	lsls	r1, r3, #28
 800bd22:	d422      	bmi.n	800bd6a <__swsetup_r+0x62>
 800bd24:	06da      	lsls	r2, r3, #27
 800bd26:	d407      	bmi.n	800bd38 <__swsetup_r+0x30>
 800bd28:	2209      	movs	r2, #9
 800bd2a:	602a      	str	r2, [r5, #0]
 800bd2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd30:	81a3      	strh	r3, [r4, #12]
 800bd32:	f04f 30ff 	mov.w	r0, #4294967295
 800bd36:	e033      	b.n	800bda0 <__swsetup_r+0x98>
 800bd38:	0758      	lsls	r0, r3, #29
 800bd3a:	d512      	bpl.n	800bd62 <__swsetup_r+0x5a>
 800bd3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd3e:	b141      	cbz	r1, 800bd52 <__swsetup_r+0x4a>
 800bd40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd44:	4299      	cmp	r1, r3
 800bd46:	d002      	beq.n	800bd4e <__swsetup_r+0x46>
 800bd48:	4628      	mov	r0, r5
 800bd4a:	f7fe f927 	bl	8009f9c <_free_r>
 800bd4e:	2300      	movs	r3, #0
 800bd50:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd52:	89a3      	ldrh	r3, [r4, #12]
 800bd54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bd58:	81a3      	strh	r3, [r4, #12]
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	6063      	str	r3, [r4, #4]
 800bd5e:	6923      	ldr	r3, [r4, #16]
 800bd60:	6023      	str	r3, [r4, #0]
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	f043 0308 	orr.w	r3, r3, #8
 800bd68:	81a3      	strh	r3, [r4, #12]
 800bd6a:	6923      	ldr	r3, [r4, #16]
 800bd6c:	b94b      	cbnz	r3, 800bd82 <__swsetup_r+0x7a>
 800bd6e:	89a3      	ldrh	r3, [r4, #12]
 800bd70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bd74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd78:	d003      	beq.n	800bd82 <__swsetup_r+0x7a>
 800bd7a:	4621      	mov	r1, r4
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	f000 fbf9 	bl	800c574 <__smakebuf_r>
 800bd82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd86:	f013 0201 	ands.w	r2, r3, #1
 800bd8a:	d00a      	beq.n	800bda2 <__swsetup_r+0x9a>
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	60a2      	str	r2, [r4, #8]
 800bd90:	6962      	ldr	r2, [r4, #20]
 800bd92:	4252      	negs	r2, r2
 800bd94:	61a2      	str	r2, [r4, #24]
 800bd96:	6922      	ldr	r2, [r4, #16]
 800bd98:	b942      	cbnz	r2, 800bdac <__swsetup_r+0xa4>
 800bd9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bd9e:	d1c5      	bne.n	800bd2c <__swsetup_r+0x24>
 800bda0:	bd38      	pop	{r3, r4, r5, pc}
 800bda2:	0799      	lsls	r1, r3, #30
 800bda4:	bf58      	it	pl
 800bda6:	6962      	ldrpl	r2, [r4, #20]
 800bda8:	60a2      	str	r2, [r4, #8]
 800bdaa:	e7f4      	b.n	800bd96 <__swsetup_r+0x8e>
 800bdac:	2000      	movs	r0, #0
 800bdae:	e7f7      	b.n	800bda0 <__swsetup_r+0x98>
 800bdb0:	24000024 	.word	0x24000024

0800bdb4 <_raise_r>:
 800bdb4:	291f      	cmp	r1, #31
 800bdb6:	b538      	push	{r3, r4, r5, lr}
 800bdb8:	4605      	mov	r5, r0
 800bdba:	460c      	mov	r4, r1
 800bdbc:	d904      	bls.n	800bdc8 <_raise_r+0x14>
 800bdbe:	2316      	movs	r3, #22
 800bdc0:	6003      	str	r3, [r0, #0]
 800bdc2:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc6:	bd38      	pop	{r3, r4, r5, pc}
 800bdc8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bdca:	b112      	cbz	r2, 800bdd2 <_raise_r+0x1e>
 800bdcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdd0:	b94b      	cbnz	r3, 800bde6 <_raise_r+0x32>
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	f000 f830 	bl	800be38 <_getpid_r>
 800bdd8:	4622      	mov	r2, r4
 800bdda:	4601      	mov	r1, r0
 800bddc:	4628      	mov	r0, r5
 800bdde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bde2:	f000 b817 	b.w	800be14 <_kill_r>
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d00a      	beq.n	800be00 <_raise_r+0x4c>
 800bdea:	1c59      	adds	r1, r3, #1
 800bdec:	d103      	bne.n	800bdf6 <_raise_r+0x42>
 800bdee:	2316      	movs	r3, #22
 800bdf0:	6003      	str	r3, [r0, #0]
 800bdf2:	2001      	movs	r0, #1
 800bdf4:	e7e7      	b.n	800bdc6 <_raise_r+0x12>
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	4798      	blx	r3
 800be00:	2000      	movs	r0, #0
 800be02:	e7e0      	b.n	800bdc6 <_raise_r+0x12>

0800be04 <raise>:
 800be04:	4b02      	ldr	r3, [pc, #8]	@ (800be10 <raise+0xc>)
 800be06:	4601      	mov	r1, r0
 800be08:	6818      	ldr	r0, [r3, #0]
 800be0a:	f7ff bfd3 	b.w	800bdb4 <_raise_r>
 800be0e:	bf00      	nop
 800be10:	24000024 	.word	0x24000024

0800be14 <_kill_r>:
 800be14:	b538      	push	{r3, r4, r5, lr}
 800be16:	4d07      	ldr	r5, [pc, #28]	@ (800be34 <_kill_r+0x20>)
 800be18:	2300      	movs	r3, #0
 800be1a:	4604      	mov	r4, r0
 800be1c:	4608      	mov	r0, r1
 800be1e:	4611      	mov	r1, r2
 800be20:	602b      	str	r3, [r5, #0]
 800be22:	f000 fc25 	bl	800c670 <_kill>
 800be26:	1c43      	adds	r3, r0, #1
 800be28:	d102      	bne.n	800be30 <_kill_r+0x1c>
 800be2a:	682b      	ldr	r3, [r5, #0]
 800be2c:	b103      	cbz	r3, 800be30 <_kill_r+0x1c>
 800be2e:	6023      	str	r3, [r4, #0]
 800be30:	bd38      	pop	{r3, r4, r5, pc}
 800be32:	bf00      	nop
 800be34:	2402940c 	.word	0x2402940c

0800be38 <_getpid_r>:
 800be38:	f000 bc0a 	b.w	800c650 <_getpid>
 800be3c:	0000      	movs	r0, r0
	...

0800be40 <nan>:
 800be40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800be48 <nan+0x8>
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	00000000 	.word	0x00000000
 800be4c:	7ff80000 	.word	0x7ff80000

0800be50 <_calloc_r>:
 800be50:	b570      	push	{r4, r5, r6, lr}
 800be52:	fba1 5402 	umull	r5, r4, r1, r2
 800be56:	b934      	cbnz	r4, 800be66 <_calloc_r+0x16>
 800be58:	4629      	mov	r1, r5
 800be5a:	f7fc f8cb 	bl	8007ff4 <_malloc_r>
 800be5e:	4606      	mov	r6, r0
 800be60:	b928      	cbnz	r0, 800be6e <_calloc_r+0x1e>
 800be62:	4630      	mov	r0, r6
 800be64:	bd70      	pop	{r4, r5, r6, pc}
 800be66:	220c      	movs	r2, #12
 800be68:	6002      	str	r2, [r0, #0]
 800be6a:	2600      	movs	r6, #0
 800be6c:	e7f9      	b.n	800be62 <_calloc_r+0x12>
 800be6e:	462a      	mov	r2, r5
 800be70:	4621      	mov	r1, r4
 800be72:	f7fd f97b 	bl	800916c <memset>
 800be76:	e7f4      	b.n	800be62 <_calloc_r+0x12>

0800be78 <rshift>:
 800be78:	6903      	ldr	r3, [r0, #16]
 800be7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800be7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be82:	ea4f 1261 	mov.w	r2, r1, asr #5
 800be86:	f100 0414 	add.w	r4, r0, #20
 800be8a:	dd45      	ble.n	800bf18 <rshift+0xa0>
 800be8c:	f011 011f 	ands.w	r1, r1, #31
 800be90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800be94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800be98:	d10c      	bne.n	800beb4 <rshift+0x3c>
 800be9a:	f100 0710 	add.w	r7, r0, #16
 800be9e:	4629      	mov	r1, r5
 800bea0:	42b1      	cmp	r1, r6
 800bea2:	d334      	bcc.n	800bf0e <rshift+0x96>
 800bea4:	1a9b      	subs	r3, r3, r2
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	1eea      	subs	r2, r5, #3
 800beaa:	4296      	cmp	r6, r2
 800beac:	bf38      	it	cc
 800beae:	2300      	movcc	r3, #0
 800beb0:	4423      	add	r3, r4
 800beb2:	e015      	b.n	800bee0 <rshift+0x68>
 800beb4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800beb8:	f1c1 0820 	rsb	r8, r1, #32
 800bebc:	40cf      	lsrs	r7, r1
 800bebe:	f105 0e04 	add.w	lr, r5, #4
 800bec2:	46a1      	mov	r9, r4
 800bec4:	4576      	cmp	r6, lr
 800bec6:	46f4      	mov	ip, lr
 800bec8:	d815      	bhi.n	800bef6 <rshift+0x7e>
 800beca:	1a9a      	subs	r2, r3, r2
 800becc:	0092      	lsls	r2, r2, #2
 800bece:	3a04      	subs	r2, #4
 800bed0:	3501      	adds	r5, #1
 800bed2:	42ae      	cmp	r6, r5
 800bed4:	bf38      	it	cc
 800bed6:	2200      	movcc	r2, #0
 800bed8:	18a3      	adds	r3, r4, r2
 800beda:	50a7      	str	r7, [r4, r2]
 800bedc:	b107      	cbz	r7, 800bee0 <rshift+0x68>
 800bede:	3304      	adds	r3, #4
 800bee0:	1b1a      	subs	r2, r3, r4
 800bee2:	42a3      	cmp	r3, r4
 800bee4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bee8:	bf08      	it	eq
 800beea:	2300      	moveq	r3, #0
 800beec:	6102      	str	r2, [r0, #16]
 800beee:	bf08      	it	eq
 800bef0:	6143      	streq	r3, [r0, #20]
 800bef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bef6:	f8dc c000 	ldr.w	ip, [ip]
 800befa:	fa0c fc08 	lsl.w	ip, ip, r8
 800befe:	ea4c 0707 	orr.w	r7, ip, r7
 800bf02:	f849 7b04 	str.w	r7, [r9], #4
 800bf06:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf0a:	40cf      	lsrs	r7, r1
 800bf0c:	e7da      	b.n	800bec4 <rshift+0x4c>
 800bf0e:	f851 cb04 	ldr.w	ip, [r1], #4
 800bf12:	f847 cf04 	str.w	ip, [r7, #4]!
 800bf16:	e7c3      	b.n	800bea0 <rshift+0x28>
 800bf18:	4623      	mov	r3, r4
 800bf1a:	e7e1      	b.n	800bee0 <rshift+0x68>

0800bf1c <__hexdig_fun>:
 800bf1c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bf20:	2b09      	cmp	r3, #9
 800bf22:	d802      	bhi.n	800bf2a <__hexdig_fun+0xe>
 800bf24:	3820      	subs	r0, #32
 800bf26:	b2c0      	uxtb	r0, r0
 800bf28:	4770      	bx	lr
 800bf2a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bf2e:	2b05      	cmp	r3, #5
 800bf30:	d801      	bhi.n	800bf36 <__hexdig_fun+0x1a>
 800bf32:	3847      	subs	r0, #71	@ 0x47
 800bf34:	e7f7      	b.n	800bf26 <__hexdig_fun+0xa>
 800bf36:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bf3a:	2b05      	cmp	r3, #5
 800bf3c:	d801      	bhi.n	800bf42 <__hexdig_fun+0x26>
 800bf3e:	3827      	subs	r0, #39	@ 0x27
 800bf40:	e7f1      	b.n	800bf26 <__hexdig_fun+0xa>
 800bf42:	2000      	movs	r0, #0
 800bf44:	4770      	bx	lr
	...

0800bf48 <__gethex>:
 800bf48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf4c:	b085      	sub	sp, #20
 800bf4e:	468a      	mov	sl, r1
 800bf50:	9302      	str	r3, [sp, #8]
 800bf52:	680b      	ldr	r3, [r1, #0]
 800bf54:	9001      	str	r0, [sp, #4]
 800bf56:	4690      	mov	r8, r2
 800bf58:	1c9c      	adds	r4, r3, #2
 800bf5a:	46a1      	mov	r9, r4
 800bf5c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bf60:	2830      	cmp	r0, #48	@ 0x30
 800bf62:	d0fa      	beq.n	800bf5a <__gethex+0x12>
 800bf64:	eba9 0303 	sub.w	r3, r9, r3
 800bf68:	f1a3 0b02 	sub.w	fp, r3, #2
 800bf6c:	f7ff ffd6 	bl	800bf1c <__hexdig_fun>
 800bf70:	4605      	mov	r5, r0
 800bf72:	2800      	cmp	r0, #0
 800bf74:	d168      	bne.n	800c048 <__gethex+0x100>
 800bf76:	49a0      	ldr	r1, [pc, #640]	@ (800c1f8 <__gethex+0x2b0>)
 800bf78:	2201      	movs	r2, #1
 800bf7a:	4648      	mov	r0, r9
 800bf7c:	f7fd f8fe 	bl	800917c <strncmp>
 800bf80:	4607      	mov	r7, r0
 800bf82:	2800      	cmp	r0, #0
 800bf84:	d167      	bne.n	800c056 <__gethex+0x10e>
 800bf86:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bf8a:	4626      	mov	r6, r4
 800bf8c:	f7ff ffc6 	bl	800bf1c <__hexdig_fun>
 800bf90:	2800      	cmp	r0, #0
 800bf92:	d062      	beq.n	800c05a <__gethex+0x112>
 800bf94:	4623      	mov	r3, r4
 800bf96:	7818      	ldrb	r0, [r3, #0]
 800bf98:	2830      	cmp	r0, #48	@ 0x30
 800bf9a:	4699      	mov	r9, r3
 800bf9c:	f103 0301 	add.w	r3, r3, #1
 800bfa0:	d0f9      	beq.n	800bf96 <__gethex+0x4e>
 800bfa2:	f7ff ffbb 	bl	800bf1c <__hexdig_fun>
 800bfa6:	fab0 f580 	clz	r5, r0
 800bfaa:	096d      	lsrs	r5, r5, #5
 800bfac:	f04f 0b01 	mov.w	fp, #1
 800bfb0:	464a      	mov	r2, r9
 800bfb2:	4616      	mov	r6, r2
 800bfb4:	3201      	adds	r2, #1
 800bfb6:	7830      	ldrb	r0, [r6, #0]
 800bfb8:	f7ff ffb0 	bl	800bf1c <__hexdig_fun>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	d1f8      	bne.n	800bfb2 <__gethex+0x6a>
 800bfc0:	498d      	ldr	r1, [pc, #564]	@ (800c1f8 <__gethex+0x2b0>)
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	f7fd f8d9 	bl	800917c <strncmp>
 800bfca:	2800      	cmp	r0, #0
 800bfcc:	d13f      	bne.n	800c04e <__gethex+0x106>
 800bfce:	b944      	cbnz	r4, 800bfe2 <__gethex+0x9a>
 800bfd0:	1c74      	adds	r4, r6, #1
 800bfd2:	4622      	mov	r2, r4
 800bfd4:	4616      	mov	r6, r2
 800bfd6:	3201      	adds	r2, #1
 800bfd8:	7830      	ldrb	r0, [r6, #0]
 800bfda:	f7ff ff9f 	bl	800bf1c <__hexdig_fun>
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	d1f8      	bne.n	800bfd4 <__gethex+0x8c>
 800bfe2:	1ba4      	subs	r4, r4, r6
 800bfe4:	00a7      	lsls	r7, r4, #2
 800bfe6:	7833      	ldrb	r3, [r6, #0]
 800bfe8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bfec:	2b50      	cmp	r3, #80	@ 0x50
 800bfee:	d13e      	bne.n	800c06e <__gethex+0x126>
 800bff0:	7873      	ldrb	r3, [r6, #1]
 800bff2:	2b2b      	cmp	r3, #43	@ 0x2b
 800bff4:	d033      	beq.n	800c05e <__gethex+0x116>
 800bff6:	2b2d      	cmp	r3, #45	@ 0x2d
 800bff8:	d034      	beq.n	800c064 <__gethex+0x11c>
 800bffa:	1c71      	adds	r1, r6, #1
 800bffc:	2400      	movs	r4, #0
 800bffe:	7808      	ldrb	r0, [r1, #0]
 800c000:	f7ff ff8c 	bl	800bf1c <__hexdig_fun>
 800c004:	1e43      	subs	r3, r0, #1
 800c006:	b2db      	uxtb	r3, r3
 800c008:	2b18      	cmp	r3, #24
 800c00a:	d830      	bhi.n	800c06e <__gethex+0x126>
 800c00c:	f1a0 0210 	sub.w	r2, r0, #16
 800c010:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c014:	f7ff ff82 	bl	800bf1c <__hexdig_fun>
 800c018:	f100 3cff 	add.w	ip, r0, #4294967295
 800c01c:	fa5f fc8c 	uxtb.w	ip, ip
 800c020:	f1bc 0f18 	cmp.w	ip, #24
 800c024:	f04f 030a 	mov.w	r3, #10
 800c028:	d91e      	bls.n	800c068 <__gethex+0x120>
 800c02a:	b104      	cbz	r4, 800c02e <__gethex+0xe6>
 800c02c:	4252      	negs	r2, r2
 800c02e:	4417      	add	r7, r2
 800c030:	f8ca 1000 	str.w	r1, [sl]
 800c034:	b1ed      	cbz	r5, 800c072 <__gethex+0x12a>
 800c036:	f1bb 0f00 	cmp.w	fp, #0
 800c03a:	bf0c      	ite	eq
 800c03c:	2506      	moveq	r5, #6
 800c03e:	2500      	movne	r5, #0
 800c040:	4628      	mov	r0, r5
 800c042:	b005      	add	sp, #20
 800c044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c048:	2500      	movs	r5, #0
 800c04a:	462c      	mov	r4, r5
 800c04c:	e7b0      	b.n	800bfb0 <__gethex+0x68>
 800c04e:	2c00      	cmp	r4, #0
 800c050:	d1c7      	bne.n	800bfe2 <__gethex+0x9a>
 800c052:	4627      	mov	r7, r4
 800c054:	e7c7      	b.n	800bfe6 <__gethex+0x9e>
 800c056:	464e      	mov	r6, r9
 800c058:	462f      	mov	r7, r5
 800c05a:	2501      	movs	r5, #1
 800c05c:	e7c3      	b.n	800bfe6 <__gethex+0x9e>
 800c05e:	2400      	movs	r4, #0
 800c060:	1cb1      	adds	r1, r6, #2
 800c062:	e7cc      	b.n	800bffe <__gethex+0xb6>
 800c064:	2401      	movs	r4, #1
 800c066:	e7fb      	b.n	800c060 <__gethex+0x118>
 800c068:	fb03 0002 	mla	r0, r3, r2, r0
 800c06c:	e7ce      	b.n	800c00c <__gethex+0xc4>
 800c06e:	4631      	mov	r1, r6
 800c070:	e7de      	b.n	800c030 <__gethex+0xe8>
 800c072:	eba6 0309 	sub.w	r3, r6, r9
 800c076:	3b01      	subs	r3, #1
 800c078:	4629      	mov	r1, r5
 800c07a:	2b07      	cmp	r3, #7
 800c07c:	dc0a      	bgt.n	800c094 <__gethex+0x14c>
 800c07e:	9801      	ldr	r0, [sp, #4]
 800c080:	f7fd ffd6 	bl	800a030 <_Balloc>
 800c084:	4604      	mov	r4, r0
 800c086:	b940      	cbnz	r0, 800c09a <__gethex+0x152>
 800c088:	4b5c      	ldr	r3, [pc, #368]	@ (800c1fc <__gethex+0x2b4>)
 800c08a:	4602      	mov	r2, r0
 800c08c:	21e4      	movs	r1, #228	@ 0xe4
 800c08e:	485c      	ldr	r0, [pc, #368]	@ (800c200 <__gethex+0x2b8>)
 800c090:	f7fb ff68 	bl	8007f64 <__assert_func>
 800c094:	3101      	adds	r1, #1
 800c096:	105b      	asrs	r3, r3, #1
 800c098:	e7ef      	b.n	800c07a <__gethex+0x132>
 800c09a:	f100 0a14 	add.w	sl, r0, #20
 800c09e:	2300      	movs	r3, #0
 800c0a0:	4655      	mov	r5, sl
 800c0a2:	469b      	mov	fp, r3
 800c0a4:	45b1      	cmp	r9, r6
 800c0a6:	d337      	bcc.n	800c118 <__gethex+0x1d0>
 800c0a8:	f845 bb04 	str.w	fp, [r5], #4
 800c0ac:	eba5 050a 	sub.w	r5, r5, sl
 800c0b0:	10ad      	asrs	r5, r5, #2
 800c0b2:	6125      	str	r5, [r4, #16]
 800c0b4:	4658      	mov	r0, fp
 800c0b6:	f7fe f8ad 	bl	800a214 <__hi0bits>
 800c0ba:	016d      	lsls	r5, r5, #5
 800c0bc:	f8d8 6000 	ldr.w	r6, [r8]
 800c0c0:	1a2d      	subs	r5, r5, r0
 800c0c2:	42b5      	cmp	r5, r6
 800c0c4:	dd54      	ble.n	800c170 <__gethex+0x228>
 800c0c6:	1bad      	subs	r5, r5, r6
 800c0c8:	4629      	mov	r1, r5
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	f7fe fc36 	bl	800a93c <__any_on>
 800c0d0:	4681      	mov	r9, r0
 800c0d2:	b178      	cbz	r0, 800c0f4 <__gethex+0x1ac>
 800c0d4:	1e6b      	subs	r3, r5, #1
 800c0d6:	1159      	asrs	r1, r3, #5
 800c0d8:	f003 021f 	and.w	r2, r3, #31
 800c0dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c0e0:	f04f 0901 	mov.w	r9, #1
 800c0e4:	fa09 f202 	lsl.w	r2, r9, r2
 800c0e8:	420a      	tst	r2, r1
 800c0ea:	d003      	beq.n	800c0f4 <__gethex+0x1ac>
 800c0ec:	454b      	cmp	r3, r9
 800c0ee:	dc36      	bgt.n	800c15e <__gethex+0x216>
 800c0f0:	f04f 0902 	mov.w	r9, #2
 800c0f4:	4629      	mov	r1, r5
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	f7ff febe 	bl	800be78 <rshift>
 800c0fc:	442f      	add	r7, r5
 800c0fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c102:	42bb      	cmp	r3, r7
 800c104:	da42      	bge.n	800c18c <__gethex+0x244>
 800c106:	9801      	ldr	r0, [sp, #4]
 800c108:	4621      	mov	r1, r4
 800c10a:	f7fd ffd1 	bl	800a0b0 <_Bfree>
 800c10e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c110:	2300      	movs	r3, #0
 800c112:	6013      	str	r3, [r2, #0]
 800c114:	25a3      	movs	r5, #163	@ 0xa3
 800c116:	e793      	b.n	800c040 <__gethex+0xf8>
 800c118:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c11c:	2a2e      	cmp	r2, #46	@ 0x2e
 800c11e:	d012      	beq.n	800c146 <__gethex+0x1fe>
 800c120:	2b20      	cmp	r3, #32
 800c122:	d104      	bne.n	800c12e <__gethex+0x1e6>
 800c124:	f845 bb04 	str.w	fp, [r5], #4
 800c128:	f04f 0b00 	mov.w	fp, #0
 800c12c:	465b      	mov	r3, fp
 800c12e:	7830      	ldrb	r0, [r6, #0]
 800c130:	9303      	str	r3, [sp, #12]
 800c132:	f7ff fef3 	bl	800bf1c <__hexdig_fun>
 800c136:	9b03      	ldr	r3, [sp, #12]
 800c138:	f000 000f 	and.w	r0, r0, #15
 800c13c:	4098      	lsls	r0, r3
 800c13e:	ea4b 0b00 	orr.w	fp, fp, r0
 800c142:	3304      	adds	r3, #4
 800c144:	e7ae      	b.n	800c0a4 <__gethex+0x15c>
 800c146:	45b1      	cmp	r9, r6
 800c148:	d8ea      	bhi.n	800c120 <__gethex+0x1d8>
 800c14a:	492b      	ldr	r1, [pc, #172]	@ (800c1f8 <__gethex+0x2b0>)
 800c14c:	9303      	str	r3, [sp, #12]
 800c14e:	2201      	movs	r2, #1
 800c150:	4630      	mov	r0, r6
 800c152:	f7fd f813 	bl	800917c <strncmp>
 800c156:	9b03      	ldr	r3, [sp, #12]
 800c158:	2800      	cmp	r0, #0
 800c15a:	d1e1      	bne.n	800c120 <__gethex+0x1d8>
 800c15c:	e7a2      	b.n	800c0a4 <__gethex+0x15c>
 800c15e:	1ea9      	subs	r1, r5, #2
 800c160:	4620      	mov	r0, r4
 800c162:	f7fe fbeb 	bl	800a93c <__any_on>
 800c166:	2800      	cmp	r0, #0
 800c168:	d0c2      	beq.n	800c0f0 <__gethex+0x1a8>
 800c16a:	f04f 0903 	mov.w	r9, #3
 800c16e:	e7c1      	b.n	800c0f4 <__gethex+0x1ac>
 800c170:	da09      	bge.n	800c186 <__gethex+0x23e>
 800c172:	1b75      	subs	r5, r6, r5
 800c174:	4621      	mov	r1, r4
 800c176:	9801      	ldr	r0, [sp, #4]
 800c178:	462a      	mov	r2, r5
 800c17a:	f7fe f9a9 	bl	800a4d0 <__lshift>
 800c17e:	1b7f      	subs	r7, r7, r5
 800c180:	4604      	mov	r4, r0
 800c182:	f100 0a14 	add.w	sl, r0, #20
 800c186:	f04f 0900 	mov.w	r9, #0
 800c18a:	e7b8      	b.n	800c0fe <__gethex+0x1b6>
 800c18c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c190:	42bd      	cmp	r5, r7
 800c192:	dd6f      	ble.n	800c274 <__gethex+0x32c>
 800c194:	1bed      	subs	r5, r5, r7
 800c196:	42ae      	cmp	r6, r5
 800c198:	dc34      	bgt.n	800c204 <__gethex+0x2bc>
 800c19a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c19e:	2b02      	cmp	r3, #2
 800c1a0:	d022      	beq.n	800c1e8 <__gethex+0x2a0>
 800c1a2:	2b03      	cmp	r3, #3
 800c1a4:	d024      	beq.n	800c1f0 <__gethex+0x2a8>
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d115      	bne.n	800c1d6 <__gethex+0x28e>
 800c1aa:	42ae      	cmp	r6, r5
 800c1ac:	d113      	bne.n	800c1d6 <__gethex+0x28e>
 800c1ae:	2e01      	cmp	r6, #1
 800c1b0:	d10b      	bne.n	800c1ca <__gethex+0x282>
 800c1b2:	9a02      	ldr	r2, [sp, #8]
 800c1b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c1b8:	6013      	str	r3, [r2, #0]
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	6123      	str	r3, [r4, #16]
 800c1be:	f8ca 3000 	str.w	r3, [sl]
 800c1c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1c4:	2562      	movs	r5, #98	@ 0x62
 800c1c6:	601c      	str	r4, [r3, #0]
 800c1c8:	e73a      	b.n	800c040 <__gethex+0xf8>
 800c1ca:	1e71      	subs	r1, r6, #1
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	f7fe fbb5 	bl	800a93c <__any_on>
 800c1d2:	2800      	cmp	r0, #0
 800c1d4:	d1ed      	bne.n	800c1b2 <__gethex+0x26a>
 800c1d6:	9801      	ldr	r0, [sp, #4]
 800c1d8:	4621      	mov	r1, r4
 800c1da:	f7fd ff69 	bl	800a0b0 <_Bfree>
 800c1de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	6013      	str	r3, [r2, #0]
 800c1e4:	2550      	movs	r5, #80	@ 0x50
 800c1e6:	e72b      	b.n	800c040 <__gethex+0xf8>
 800c1e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d1f3      	bne.n	800c1d6 <__gethex+0x28e>
 800c1ee:	e7e0      	b.n	800c1b2 <__gethex+0x26a>
 800c1f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d1dd      	bne.n	800c1b2 <__gethex+0x26a>
 800c1f6:	e7ee      	b.n	800c1d6 <__gethex+0x28e>
 800c1f8:	0800ce46 	.word	0x0800ce46
 800c1fc:	0800d024 	.word	0x0800d024
 800c200:	0800d0a7 	.word	0x0800d0a7
 800c204:	1e6f      	subs	r7, r5, #1
 800c206:	f1b9 0f00 	cmp.w	r9, #0
 800c20a:	d130      	bne.n	800c26e <__gethex+0x326>
 800c20c:	b127      	cbz	r7, 800c218 <__gethex+0x2d0>
 800c20e:	4639      	mov	r1, r7
 800c210:	4620      	mov	r0, r4
 800c212:	f7fe fb93 	bl	800a93c <__any_on>
 800c216:	4681      	mov	r9, r0
 800c218:	117a      	asrs	r2, r7, #5
 800c21a:	2301      	movs	r3, #1
 800c21c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c220:	f007 071f 	and.w	r7, r7, #31
 800c224:	40bb      	lsls	r3, r7
 800c226:	4213      	tst	r3, r2
 800c228:	4629      	mov	r1, r5
 800c22a:	4620      	mov	r0, r4
 800c22c:	bf18      	it	ne
 800c22e:	f049 0902 	orrne.w	r9, r9, #2
 800c232:	f7ff fe21 	bl	800be78 <rshift>
 800c236:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c23a:	1b76      	subs	r6, r6, r5
 800c23c:	2502      	movs	r5, #2
 800c23e:	f1b9 0f00 	cmp.w	r9, #0
 800c242:	d047      	beq.n	800c2d4 <__gethex+0x38c>
 800c244:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c248:	2b02      	cmp	r3, #2
 800c24a:	d015      	beq.n	800c278 <__gethex+0x330>
 800c24c:	2b03      	cmp	r3, #3
 800c24e:	d017      	beq.n	800c280 <__gethex+0x338>
 800c250:	2b01      	cmp	r3, #1
 800c252:	d109      	bne.n	800c268 <__gethex+0x320>
 800c254:	f019 0f02 	tst.w	r9, #2
 800c258:	d006      	beq.n	800c268 <__gethex+0x320>
 800c25a:	f8da 3000 	ldr.w	r3, [sl]
 800c25e:	ea49 0903 	orr.w	r9, r9, r3
 800c262:	f019 0f01 	tst.w	r9, #1
 800c266:	d10e      	bne.n	800c286 <__gethex+0x33e>
 800c268:	f045 0510 	orr.w	r5, r5, #16
 800c26c:	e032      	b.n	800c2d4 <__gethex+0x38c>
 800c26e:	f04f 0901 	mov.w	r9, #1
 800c272:	e7d1      	b.n	800c218 <__gethex+0x2d0>
 800c274:	2501      	movs	r5, #1
 800c276:	e7e2      	b.n	800c23e <__gethex+0x2f6>
 800c278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c27a:	f1c3 0301 	rsb	r3, r3, #1
 800c27e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c280:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c282:	2b00      	cmp	r3, #0
 800c284:	d0f0      	beq.n	800c268 <__gethex+0x320>
 800c286:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c28a:	f104 0314 	add.w	r3, r4, #20
 800c28e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c292:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c296:	f04f 0c00 	mov.w	ip, #0
 800c29a:	4618      	mov	r0, r3
 800c29c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2a0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c2a4:	d01b      	beq.n	800c2de <__gethex+0x396>
 800c2a6:	3201      	adds	r2, #1
 800c2a8:	6002      	str	r2, [r0, #0]
 800c2aa:	2d02      	cmp	r5, #2
 800c2ac:	f104 0314 	add.w	r3, r4, #20
 800c2b0:	d13c      	bne.n	800c32c <__gethex+0x3e4>
 800c2b2:	f8d8 2000 	ldr.w	r2, [r8]
 800c2b6:	3a01      	subs	r2, #1
 800c2b8:	42b2      	cmp	r2, r6
 800c2ba:	d109      	bne.n	800c2d0 <__gethex+0x388>
 800c2bc:	1171      	asrs	r1, r6, #5
 800c2be:	2201      	movs	r2, #1
 800c2c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c2c4:	f006 061f 	and.w	r6, r6, #31
 800c2c8:	fa02 f606 	lsl.w	r6, r2, r6
 800c2cc:	421e      	tst	r6, r3
 800c2ce:	d13a      	bne.n	800c346 <__gethex+0x3fe>
 800c2d0:	f045 0520 	orr.w	r5, r5, #32
 800c2d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2d6:	601c      	str	r4, [r3, #0]
 800c2d8:	9b02      	ldr	r3, [sp, #8]
 800c2da:	601f      	str	r7, [r3, #0]
 800c2dc:	e6b0      	b.n	800c040 <__gethex+0xf8>
 800c2de:	4299      	cmp	r1, r3
 800c2e0:	f843 cc04 	str.w	ip, [r3, #-4]
 800c2e4:	d8d9      	bhi.n	800c29a <__gethex+0x352>
 800c2e6:	68a3      	ldr	r3, [r4, #8]
 800c2e8:	459b      	cmp	fp, r3
 800c2ea:	db17      	blt.n	800c31c <__gethex+0x3d4>
 800c2ec:	6861      	ldr	r1, [r4, #4]
 800c2ee:	9801      	ldr	r0, [sp, #4]
 800c2f0:	3101      	adds	r1, #1
 800c2f2:	f7fd fe9d 	bl	800a030 <_Balloc>
 800c2f6:	4681      	mov	r9, r0
 800c2f8:	b918      	cbnz	r0, 800c302 <__gethex+0x3ba>
 800c2fa:	4b1a      	ldr	r3, [pc, #104]	@ (800c364 <__gethex+0x41c>)
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	2184      	movs	r1, #132	@ 0x84
 800c300:	e6c5      	b.n	800c08e <__gethex+0x146>
 800c302:	6922      	ldr	r2, [r4, #16]
 800c304:	3202      	adds	r2, #2
 800c306:	f104 010c 	add.w	r1, r4, #12
 800c30a:	0092      	lsls	r2, r2, #2
 800c30c:	300c      	adds	r0, #12
 800c30e:	f7fd f842 	bl	8009396 <memcpy>
 800c312:	4621      	mov	r1, r4
 800c314:	9801      	ldr	r0, [sp, #4]
 800c316:	f7fd fecb 	bl	800a0b0 <_Bfree>
 800c31a:	464c      	mov	r4, r9
 800c31c:	6923      	ldr	r3, [r4, #16]
 800c31e:	1c5a      	adds	r2, r3, #1
 800c320:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c324:	6122      	str	r2, [r4, #16]
 800c326:	2201      	movs	r2, #1
 800c328:	615a      	str	r2, [r3, #20]
 800c32a:	e7be      	b.n	800c2aa <__gethex+0x362>
 800c32c:	6922      	ldr	r2, [r4, #16]
 800c32e:	455a      	cmp	r2, fp
 800c330:	dd0b      	ble.n	800c34a <__gethex+0x402>
 800c332:	2101      	movs	r1, #1
 800c334:	4620      	mov	r0, r4
 800c336:	f7ff fd9f 	bl	800be78 <rshift>
 800c33a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c33e:	3701      	adds	r7, #1
 800c340:	42bb      	cmp	r3, r7
 800c342:	f6ff aee0 	blt.w	800c106 <__gethex+0x1be>
 800c346:	2501      	movs	r5, #1
 800c348:	e7c2      	b.n	800c2d0 <__gethex+0x388>
 800c34a:	f016 061f 	ands.w	r6, r6, #31
 800c34e:	d0fa      	beq.n	800c346 <__gethex+0x3fe>
 800c350:	4453      	add	r3, sl
 800c352:	f1c6 0620 	rsb	r6, r6, #32
 800c356:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c35a:	f7fd ff5b 	bl	800a214 <__hi0bits>
 800c35e:	42b0      	cmp	r0, r6
 800c360:	dbe7      	blt.n	800c332 <__gethex+0x3ea>
 800c362:	e7f0      	b.n	800c346 <__gethex+0x3fe>
 800c364:	0800d024 	.word	0x0800d024

0800c368 <L_shift>:
 800c368:	f1c2 0208 	rsb	r2, r2, #8
 800c36c:	0092      	lsls	r2, r2, #2
 800c36e:	b570      	push	{r4, r5, r6, lr}
 800c370:	f1c2 0620 	rsb	r6, r2, #32
 800c374:	6843      	ldr	r3, [r0, #4]
 800c376:	6804      	ldr	r4, [r0, #0]
 800c378:	fa03 f506 	lsl.w	r5, r3, r6
 800c37c:	432c      	orrs	r4, r5
 800c37e:	40d3      	lsrs	r3, r2
 800c380:	6004      	str	r4, [r0, #0]
 800c382:	f840 3f04 	str.w	r3, [r0, #4]!
 800c386:	4288      	cmp	r0, r1
 800c388:	d3f4      	bcc.n	800c374 <L_shift+0xc>
 800c38a:	bd70      	pop	{r4, r5, r6, pc}

0800c38c <__match>:
 800c38c:	b530      	push	{r4, r5, lr}
 800c38e:	6803      	ldr	r3, [r0, #0]
 800c390:	3301      	adds	r3, #1
 800c392:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c396:	b914      	cbnz	r4, 800c39e <__match+0x12>
 800c398:	6003      	str	r3, [r0, #0]
 800c39a:	2001      	movs	r0, #1
 800c39c:	bd30      	pop	{r4, r5, pc}
 800c39e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3a2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c3a6:	2d19      	cmp	r5, #25
 800c3a8:	bf98      	it	ls
 800c3aa:	3220      	addls	r2, #32
 800c3ac:	42a2      	cmp	r2, r4
 800c3ae:	d0f0      	beq.n	800c392 <__match+0x6>
 800c3b0:	2000      	movs	r0, #0
 800c3b2:	e7f3      	b.n	800c39c <__match+0x10>

0800c3b4 <__hexnan>:
 800c3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b8:	680b      	ldr	r3, [r1, #0]
 800c3ba:	6801      	ldr	r1, [r0, #0]
 800c3bc:	115e      	asrs	r6, r3, #5
 800c3be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c3c2:	f013 031f 	ands.w	r3, r3, #31
 800c3c6:	b087      	sub	sp, #28
 800c3c8:	bf18      	it	ne
 800c3ca:	3604      	addne	r6, #4
 800c3cc:	2500      	movs	r5, #0
 800c3ce:	1f37      	subs	r7, r6, #4
 800c3d0:	4682      	mov	sl, r0
 800c3d2:	4690      	mov	r8, r2
 800c3d4:	9301      	str	r3, [sp, #4]
 800c3d6:	f846 5c04 	str.w	r5, [r6, #-4]
 800c3da:	46b9      	mov	r9, r7
 800c3dc:	463c      	mov	r4, r7
 800c3de:	9502      	str	r5, [sp, #8]
 800c3e0:	46ab      	mov	fp, r5
 800c3e2:	784a      	ldrb	r2, [r1, #1]
 800c3e4:	1c4b      	adds	r3, r1, #1
 800c3e6:	9303      	str	r3, [sp, #12]
 800c3e8:	b342      	cbz	r2, 800c43c <__hexnan+0x88>
 800c3ea:	4610      	mov	r0, r2
 800c3ec:	9105      	str	r1, [sp, #20]
 800c3ee:	9204      	str	r2, [sp, #16]
 800c3f0:	f7ff fd94 	bl	800bf1c <__hexdig_fun>
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	d151      	bne.n	800c49c <__hexnan+0xe8>
 800c3f8:	9a04      	ldr	r2, [sp, #16]
 800c3fa:	9905      	ldr	r1, [sp, #20]
 800c3fc:	2a20      	cmp	r2, #32
 800c3fe:	d818      	bhi.n	800c432 <__hexnan+0x7e>
 800c400:	9b02      	ldr	r3, [sp, #8]
 800c402:	459b      	cmp	fp, r3
 800c404:	dd13      	ble.n	800c42e <__hexnan+0x7a>
 800c406:	454c      	cmp	r4, r9
 800c408:	d206      	bcs.n	800c418 <__hexnan+0x64>
 800c40a:	2d07      	cmp	r5, #7
 800c40c:	dc04      	bgt.n	800c418 <__hexnan+0x64>
 800c40e:	462a      	mov	r2, r5
 800c410:	4649      	mov	r1, r9
 800c412:	4620      	mov	r0, r4
 800c414:	f7ff ffa8 	bl	800c368 <L_shift>
 800c418:	4544      	cmp	r4, r8
 800c41a:	d952      	bls.n	800c4c2 <__hexnan+0x10e>
 800c41c:	2300      	movs	r3, #0
 800c41e:	f1a4 0904 	sub.w	r9, r4, #4
 800c422:	f844 3c04 	str.w	r3, [r4, #-4]
 800c426:	f8cd b008 	str.w	fp, [sp, #8]
 800c42a:	464c      	mov	r4, r9
 800c42c:	461d      	mov	r5, r3
 800c42e:	9903      	ldr	r1, [sp, #12]
 800c430:	e7d7      	b.n	800c3e2 <__hexnan+0x2e>
 800c432:	2a29      	cmp	r2, #41	@ 0x29
 800c434:	d157      	bne.n	800c4e6 <__hexnan+0x132>
 800c436:	3102      	adds	r1, #2
 800c438:	f8ca 1000 	str.w	r1, [sl]
 800c43c:	f1bb 0f00 	cmp.w	fp, #0
 800c440:	d051      	beq.n	800c4e6 <__hexnan+0x132>
 800c442:	454c      	cmp	r4, r9
 800c444:	d206      	bcs.n	800c454 <__hexnan+0xa0>
 800c446:	2d07      	cmp	r5, #7
 800c448:	dc04      	bgt.n	800c454 <__hexnan+0xa0>
 800c44a:	462a      	mov	r2, r5
 800c44c:	4649      	mov	r1, r9
 800c44e:	4620      	mov	r0, r4
 800c450:	f7ff ff8a 	bl	800c368 <L_shift>
 800c454:	4544      	cmp	r4, r8
 800c456:	d936      	bls.n	800c4c6 <__hexnan+0x112>
 800c458:	f1a8 0204 	sub.w	r2, r8, #4
 800c45c:	4623      	mov	r3, r4
 800c45e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c462:	f842 1f04 	str.w	r1, [r2, #4]!
 800c466:	429f      	cmp	r7, r3
 800c468:	d2f9      	bcs.n	800c45e <__hexnan+0xaa>
 800c46a:	1b3b      	subs	r3, r7, r4
 800c46c:	f023 0303 	bic.w	r3, r3, #3
 800c470:	3304      	adds	r3, #4
 800c472:	3401      	adds	r4, #1
 800c474:	3e03      	subs	r6, #3
 800c476:	42b4      	cmp	r4, r6
 800c478:	bf88      	it	hi
 800c47a:	2304      	movhi	r3, #4
 800c47c:	4443      	add	r3, r8
 800c47e:	2200      	movs	r2, #0
 800c480:	f843 2b04 	str.w	r2, [r3], #4
 800c484:	429f      	cmp	r7, r3
 800c486:	d2fb      	bcs.n	800c480 <__hexnan+0xcc>
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	b91b      	cbnz	r3, 800c494 <__hexnan+0xe0>
 800c48c:	4547      	cmp	r7, r8
 800c48e:	d128      	bne.n	800c4e2 <__hexnan+0x12e>
 800c490:	2301      	movs	r3, #1
 800c492:	603b      	str	r3, [r7, #0]
 800c494:	2005      	movs	r0, #5
 800c496:	b007      	add	sp, #28
 800c498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c49c:	3501      	adds	r5, #1
 800c49e:	2d08      	cmp	r5, #8
 800c4a0:	f10b 0b01 	add.w	fp, fp, #1
 800c4a4:	dd06      	ble.n	800c4b4 <__hexnan+0x100>
 800c4a6:	4544      	cmp	r4, r8
 800c4a8:	d9c1      	bls.n	800c42e <__hexnan+0x7a>
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	f844 3c04 	str.w	r3, [r4, #-4]
 800c4b0:	2501      	movs	r5, #1
 800c4b2:	3c04      	subs	r4, #4
 800c4b4:	6822      	ldr	r2, [r4, #0]
 800c4b6:	f000 000f 	and.w	r0, r0, #15
 800c4ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c4be:	6020      	str	r0, [r4, #0]
 800c4c0:	e7b5      	b.n	800c42e <__hexnan+0x7a>
 800c4c2:	2508      	movs	r5, #8
 800c4c4:	e7b3      	b.n	800c42e <__hexnan+0x7a>
 800c4c6:	9b01      	ldr	r3, [sp, #4]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d0dd      	beq.n	800c488 <__hexnan+0xd4>
 800c4cc:	f1c3 0320 	rsb	r3, r3, #32
 800c4d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c4d4:	40da      	lsrs	r2, r3
 800c4d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c4da:	4013      	ands	r3, r2
 800c4dc:	f846 3c04 	str.w	r3, [r6, #-4]
 800c4e0:	e7d2      	b.n	800c488 <__hexnan+0xd4>
 800c4e2:	3f04      	subs	r7, #4
 800c4e4:	e7d0      	b.n	800c488 <__hexnan+0xd4>
 800c4e6:	2004      	movs	r0, #4
 800c4e8:	e7d5      	b.n	800c496 <__hexnan+0xe2>

0800c4ea <__ascii_mbtowc>:
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	b901      	cbnz	r1, 800c4f0 <__ascii_mbtowc+0x6>
 800c4ee:	a901      	add	r1, sp, #4
 800c4f0:	b142      	cbz	r2, 800c504 <__ascii_mbtowc+0x1a>
 800c4f2:	b14b      	cbz	r3, 800c508 <__ascii_mbtowc+0x1e>
 800c4f4:	7813      	ldrb	r3, [r2, #0]
 800c4f6:	600b      	str	r3, [r1, #0]
 800c4f8:	7812      	ldrb	r2, [r2, #0]
 800c4fa:	1e10      	subs	r0, r2, #0
 800c4fc:	bf18      	it	ne
 800c4fe:	2001      	movne	r0, #1
 800c500:	b002      	add	sp, #8
 800c502:	4770      	bx	lr
 800c504:	4610      	mov	r0, r2
 800c506:	e7fb      	b.n	800c500 <__ascii_mbtowc+0x16>
 800c508:	f06f 0001 	mvn.w	r0, #1
 800c50c:	e7f8      	b.n	800c500 <__ascii_mbtowc+0x16>

0800c50e <__ascii_wctomb>:
 800c50e:	4603      	mov	r3, r0
 800c510:	4608      	mov	r0, r1
 800c512:	b141      	cbz	r1, 800c526 <__ascii_wctomb+0x18>
 800c514:	2aff      	cmp	r2, #255	@ 0xff
 800c516:	d904      	bls.n	800c522 <__ascii_wctomb+0x14>
 800c518:	228a      	movs	r2, #138	@ 0x8a
 800c51a:	601a      	str	r2, [r3, #0]
 800c51c:	f04f 30ff 	mov.w	r0, #4294967295
 800c520:	4770      	bx	lr
 800c522:	700a      	strb	r2, [r1, #0]
 800c524:	2001      	movs	r0, #1
 800c526:	4770      	bx	lr

0800c528 <__swhatbuf_r>:
 800c528:	b570      	push	{r4, r5, r6, lr}
 800c52a:	460c      	mov	r4, r1
 800c52c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c530:	2900      	cmp	r1, #0
 800c532:	b096      	sub	sp, #88	@ 0x58
 800c534:	4615      	mov	r5, r2
 800c536:	461e      	mov	r6, r3
 800c538:	da0d      	bge.n	800c556 <__swhatbuf_r+0x2e>
 800c53a:	89a3      	ldrh	r3, [r4, #12]
 800c53c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c540:	f04f 0100 	mov.w	r1, #0
 800c544:	bf14      	ite	ne
 800c546:	2340      	movne	r3, #64	@ 0x40
 800c548:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c54c:	2000      	movs	r0, #0
 800c54e:	6031      	str	r1, [r6, #0]
 800c550:	602b      	str	r3, [r5, #0]
 800c552:	b016      	add	sp, #88	@ 0x58
 800c554:	bd70      	pop	{r4, r5, r6, pc}
 800c556:	466a      	mov	r2, sp
 800c558:	f000 f848 	bl	800c5ec <_fstat_r>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	dbec      	blt.n	800c53a <__swhatbuf_r+0x12>
 800c560:	9901      	ldr	r1, [sp, #4]
 800c562:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c566:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c56a:	4259      	negs	r1, r3
 800c56c:	4159      	adcs	r1, r3
 800c56e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c572:	e7eb      	b.n	800c54c <__swhatbuf_r+0x24>

0800c574 <__smakebuf_r>:
 800c574:	898b      	ldrh	r3, [r1, #12]
 800c576:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c578:	079d      	lsls	r5, r3, #30
 800c57a:	4606      	mov	r6, r0
 800c57c:	460c      	mov	r4, r1
 800c57e:	d507      	bpl.n	800c590 <__smakebuf_r+0x1c>
 800c580:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c584:	6023      	str	r3, [r4, #0]
 800c586:	6123      	str	r3, [r4, #16]
 800c588:	2301      	movs	r3, #1
 800c58a:	6163      	str	r3, [r4, #20]
 800c58c:	b003      	add	sp, #12
 800c58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c590:	ab01      	add	r3, sp, #4
 800c592:	466a      	mov	r2, sp
 800c594:	f7ff ffc8 	bl	800c528 <__swhatbuf_r>
 800c598:	9f00      	ldr	r7, [sp, #0]
 800c59a:	4605      	mov	r5, r0
 800c59c:	4639      	mov	r1, r7
 800c59e:	4630      	mov	r0, r6
 800c5a0:	f7fb fd28 	bl	8007ff4 <_malloc_r>
 800c5a4:	b948      	cbnz	r0, 800c5ba <__smakebuf_r+0x46>
 800c5a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5aa:	059a      	lsls	r2, r3, #22
 800c5ac:	d4ee      	bmi.n	800c58c <__smakebuf_r+0x18>
 800c5ae:	f023 0303 	bic.w	r3, r3, #3
 800c5b2:	f043 0302 	orr.w	r3, r3, #2
 800c5b6:	81a3      	strh	r3, [r4, #12]
 800c5b8:	e7e2      	b.n	800c580 <__smakebuf_r+0xc>
 800c5ba:	89a3      	ldrh	r3, [r4, #12]
 800c5bc:	6020      	str	r0, [r4, #0]
 800c5be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5c2:	81a3      	strh	r3, [r4, #12]
 800c5c4:	9b01      	ldr	r3, [sp, #4]
 800c5c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c5ca:	b15b      	cbz	r3, 800c5e4 <__smakebuf_r+0x70>
 800c5cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	f000 f81d 	bl	800c610 <_isatty_r>
 800c5d6:	b128      	cbz	r0, 800c5e4 <__smakebuf_r+0x70>
 800c5d8:	89a3      	ldrh	r3, [r4, #12]
 800c5da:	f023 0303 	bic.w	r3, r3, #3
 800c5de:	f043 0301 	orr.w	r3, r3, #1
 800c5e2:	81a3      	strh	r3, [r4, #12]
 800c5e4:	89a3      	ldrh	r3, [r4, #12]
 800c5e6:	431d      	orrs	r5, r3
 800c5e8:	81a5      	strh	r5, [r4, #12]
 800c5ea:	e7cf      	b.n	800c58c <__smakebuf_r+0x18>

0800c5ec <_fstat_r>:
 800c5ec:	b538      	push	{r3, r4, r5, lr}
 800c5ee:	4d07      	ldr	r5, [pc, #28]	@ (800c60c <_fstat_r+0x20>)
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	4604      	mov	r4, r0
 800c5f4:	4608      	mov	r0, r1
 800c5f6:	4611      	mov	r1, r2
 800c5f8:	602b      	str	r3, [r5, #0]
 800c5fa:	f000 f821 	bl	800c640 <_fstat>
 800c5fe:	1c43      	adds	r3, r0, #1
 800c600:	d102      	bne.n	800c608 <_fstat_r+0x1c>
 800c602:	682b      	ldr	r3, [r5, #0]
 800c604:	b103      	cbz	r3, 800c608 <_fstat_r+0x1c>
 800c606:	6023      	str	r3, [r4, #0]
 800c608:	bd38      	pop	{r3, r4, r5, pc}
 800c60a:	bf00      	nop
 800c60c:	2402940c 	.word	0x2402940c

0800c610 <_isatty_r>:
 800c610:	b538      	push	{r3, r4, r5, lr}
 800c612:	4d06      	ldr	r5, [pc, #24]	@ (800c62c <_isatty_r+0x1c>)
 800c614:	2300      	movs	r3, #0
 800c616:	4604      	mov	r4, r0
 800c618:	4608      	mov	r0, r1
 800c61a:	602b      	str	r3, [r5, #0]
 800c61c:	f000 f820 	bl	800c660 <_isatty>
 800c620:	1c43      	adds	r3, r0, #1
 800c622:	d102      	bne.n	800c62a <_isatty_r+0x1a>
 800c624:	682b      	ldr	r3, [r5, #0]
 800c626:	b103      	cbz	r3, 800c62a <_isatty_r+0x1a>
 800c628:	6023      	str	r3, [r4, #0]
 800c62a:	bd38      	pop	{r3, r4, r5, pc}
 800c62c:	2402940c 	.word	0x2402940c

0800c630 <_close>:
 800c630:	4b02      	ldr	r3, [pc, #8]	@ (800c63c <_close+0xc>)
 800c632:	2258      	movs	r2, #88	@ 0x58
 800c634:	601a      	str	r2, [r3, #0]
 800c636:	f04f 30ff 	mov.w	r0, #4294967295
 800c63a:	4770      	bx	lr
 800c63c:	2402940c 	.word	0x2402940c

0800c640 <_fstat>:
 800c640:	4b02      	ldr	r3, [pc, #8]	@ (800c64c <_fstat+0xc>)
 800c642:	2258      	movs	r2, #88	@ 0x58
 800c644:	601a      	str	r2, [r3, #0]
 800c646:	f04f 30ff 	mov.w	r0, #4294967295
 800c64a:	4770      	bx	lr
 800c64c:	2402940c 	.word	0x2402940c

0800c650 <_getpid>:
 800c650:	4b02      	ldr	r3, [pc, #8]	@ (800c65c <_getpid+0xc>)
 800c652:	2258      	movs	r2, #88	@ 0x58
 800c654:	601a      	str	r2, [r3, #0]
 800c656:	f04f 30ff 	mov.w	r0, #4294967295
 800c65a:	4770      	bx	lr
 800c65c:	2402940c 	.word	0x2402940c

0800c660 <_isatty>:
 800c660:	4b02      	ldr	r3, [pc, #8]	@ (800c66c <_isatty+0xc>)
 800c662:	2258      	movs	r2, #88	@ 0x58
 800c664:	601a      	str	r2, [r3, #0]
 800c666:	2000      	movs	r0, #0
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	2402940c 	.word	0x2402940c

0800c670 <_kill>:
 800c670:	4b02      	ldr	r3, [pc, #8]	@ (800c67c <_kill+0xc>)
 800c672:	2258      	movs	r2, #88	@ 0x58
 800c674:	601a      	str	r2, [r3, #0]
 800c676:	f04f 30ff 	mov.w	r0, #4294967295
 800c67a:	4770      	bx	lr
 800c67c:	2402940c 	.word	0x2402940c

0800c680 <_lseek>:
 800c680:	4b02      	ldr	r3, [pc, #8]	@ (800c68c <_lseek+0xc>)
 800c682:	2258      	movs	r2, #88	@ 0x58
 800c684:	601a      	str	r2, [r3, #0]
 800c686:	f04f 30ff 	mov.w	r0, #4294967295
 800c68a:	4770      	bx	lr
 800c68c:	2402940c 	.word	0x2402940c

0800c690 <_read>:
 800c690:	4b02      	ldr	r3, [pc, #8]	@ (800c69c <_read+0xc>)
 800c692:	2258      	movs	r2, #88	@ 0x58
 800c694:	601a      	str	r2, [r3, #0]
 800c696:	f04f 30ff 	mov.w	r0, #4294967295
 800c69a:	4770      	bx	lr
 800c69c:	2402940c 	.word	0x2402940c

0800c6a0 <_exit>:
 800c6a0:	e7fe      	b.n	800c6a0 <_exit>
	...

0800c6a4 <_init>:
 800c6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6a6:	bf00      	nop
 800c6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6aa:	bc08      	pop	{r3}
 800c6ac:	469e      	mov	lr, r3
 800c6ae:	4770      	bx	lr

0800c6b0 <_fini>:
 800c6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6b2:	bf00      	nop
 800c6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6b6:	bc08      	pop	{r3}
 800c6b8:	469e      	mov	lr, r3
 800c6ba:	4770      	bx	lr
